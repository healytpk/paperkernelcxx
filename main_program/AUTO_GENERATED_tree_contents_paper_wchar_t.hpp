{
    {    1u, RevList< Rev< 0u, Arr64< Hash(L"Author1903") >(), L"Remove Deprecated Use of the register Keyword" > , Rev< 1u, Arr64< Hash(L"Author2074") >(), L"Remove Deprecated Use of the register Keyword" >  >() },
    {    2u, RevList< Rev< 0u, Arr64< Hash(L"Author632") >(), L"Remove Deprecated operator++(bool)" > , Rev< 1u, Arr64< Hash(L"Author1450") >(), L"Remove Deprecated operator++(bool)" >  >() },
    {    3u, RevList< Rev< 0u, Arr64< Hash(L"Author1811") >(), L"Removing Deprecated Exception Specifications from C++17" > , Rev< 1u, Arr64< Hash(L"Author1513") >(), L"Removing Deprecated Exception Specifications from C++17" > , Rev< 2u, Arr64< Hash(L"Author217") >(), L"Removing Deprecated Exception Specifications from C++17" > , Rev< 3u, Arr64< Hash(L"Author112") >(), L"Removing Deprecated Exception Specifications from C++17" > , Rev< 4u, Arr64< Hash(L"Author496") >(), L"Removing Deprecated Exception Specifications from C++17" > , Rev< 5u, Arr64< Hash(L"Author1429") >(), L"Removing Deprecated Exception Specifications from C++17" >  >() },
    {    4u, RevList< Rev< 0u, Arr64< Hash(L"Author1167") >(), L"Remove Deprecated iostreams aliases" > , Rev< 1u, Arr64< Hash(L"Author1592") >(), L"Remove Deprecated iostreams aliases" >  >() },
    {    5u, RevList< Rev< 0u, Arr64< Hash(L"Author520") >(), L"Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 1u, Arr64< Hash(L"Author387") >(), L"Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 2u, Arr64< Hash(L"Author310") >(), L"Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 3u, Arr64< Hash(L"Author143") >(), L"Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 4u, Arr64< Hash(L"Author539") >(), L"Adopt 'not_fn' from Library Fundamentals 2 for C++17" >  >() },
    {    6u, RevList< Rev< 0u, Arr64< Hash(L"Author638") >(), L"Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17" >  >() },
    {    7u, RevList< Rev< 0u, Arr64< Hash(L"Author1149") >(), L"Constant View: A proposal for a 'std::as_const' helper function template" > , Rev< 1u, Arr64< Hash(L"Author935") >(), L"Constant View: A proposal for a 'std::as_const' helper function template" >  >() },
    {    8u, RevList< Rev< 0u, Arr64< Hash(L"Author2091") >(), L"Title1622" >  >() },
    {    9u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0009r00 : Polymorphic Multidimensional Array View" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0009r1 : Polymorphic Multidimensional Array Reference" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"P0009r2 : Polymorphic Multidimensional Array Reference" > , Rev< 3u, Arr64< Hash(L"H. Carter") >(), L"P0009r3 : Polymorphic Multidimensional Array Reference" > , Rev< 4u, Arr64< Hash(L"H. Carter") >(), L"P0009r4 : Polymorphic Multidimensional Array Reference" > , Rev< 5u, Arr64< Hash(L"H. Carter") >(), L"P0009r5 : Polymorphic Multidimensional Array Reference" > , Rev< 8u, Arr64< Hash(L"H. Carter") >(), L"<code>mdspan</code>: A Non-Owning Multidimensional Array Reference" > , Rev< 9u, Arr64< Hash(L"H. Carter") >(), L"<code>mdspan</code>: A Non-Owning Multidimensional Array Reference" > , Rev< 10u, Arr64< Hash(L"Christian Trott") >(), L"MDSPAN" > , Rev< 11u, Arr64< Hash(L"Christian Trott") >(), L"MDSPAN" > , Rev< 12u, Arr64< Hash(L"Christian Trott") >(), L"MDSPAN" > , Rev< 13u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" > , Rev< 14u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" > , Rev< 15u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" > , Rev< 16u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" > , Rev< 17u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" > , Rev< 18u, Arr64< Hash(L"1 [presumably") >(), L"MDSPAN" >  >() },
    {   10u, RevList< Rev< 0u, Arr64< Hash(L"Author975") >(), L"concurrent random number" >  >() },
    {   11u, RevList< Rev< 0u, Arr64< Hash(L"Jamie Allsop") >(), L"papers/P0011R0.md - Grip" >  >() },
    {   12u, RevList< Rev< 0u, Arr64< Hash(L"Author21") >(), L"Make exception-specifications be part of the type system, version 4" > , Rev< 1u, Arr64< Hash(L"Author655") >(), L"Make exception-specifications be part of the type system, version 5" >  >() },
    {   13u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan Wakely") >(), L"Logical Operator Type Traits" > , Rev< 1u, Arr64< Hash(L"Jonathan Wakely") >(), L"Logical Operator Type Traits (revision 1)" >  >() },
    {   14u, RevList< Rev< 0u, Arr64< Hash(L"Nozomu KatM") >(), L"Multiline Optiion" > , Rev< 1u, Arr64< Hash(L"Author650") >(), L"Proposal to add the multiline option to std::regex for its ECMAScript engine" >  >() },
    {   15u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"ISO/IEC JTC1/SC22/WG21p0015r0" >  >() },
    {   17u, RevList< Rev< 0u, Arr64< Hash(L"Oleg Smolsky") >(), L"Extension to aggregate initialization" > , Rev< 1u, Arr64< Hash(L"Oleg Smolsky") >(), L"Extension to aggregate initialization" >  >() },
    {   18u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0018r00 : Lambda Capture of *this by Value" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0018r1 : Lambda Capture of *this by Value" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"Capturing <tt>*this</tt>" > , Rev< 3u, Arr64< Hash(L"H. Carter") >(), L"Capturing <tt>*this</tt>" >  >() },
    {   19u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0019r00 : Atomic View" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0019R1 : Atomic View" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"P0019r2 : Atomic View" > , Rev< 3u, Arr64< Hash(L"H. Carter") >(), L"P0019r3 : Atomic View" > , Rev< 4u, Arr64< Hash(L"H. Carter") >(), L"P0019r4 : Atomic View" > , Rev< 5u, Arr64< Hash(L"H. Carter") >(), L"P0019r5 : Atomic View" >  >() },
    {   20u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0020r00 : Floating Point Atomic View" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0020r1 : Floating Point Atomic" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"P0020r2 : Floating Point Atomic" > , Rev< 3u, Arr64< Hash(L"H. Carter") >(), L"P0020r3 : Floating Point Atomic" > , Rev< 4u, Arr64< Hash(L"H. Carter") >(), L"P0020r4 : Floating Point Atomic" > , Rev< 5u, Arr64< Hash(L"H. Carter") >(), L"P0020r5 : Floating Point Atomic" >  >() },
    {   21u, RevList< Rev< 0u, Arr64< Hash(L"Author1538") >(), L"C++ Technical Specification" >  >() },
    {   22u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Proxy Iterators for the Ranges Extensions" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Proxy Iterators for the Ranges Extensions" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Proxy Iterators for the Ranges Extensions" >  >() },
    {   23u, RevList< Rev< 0u, Arr64< Hash(L"Author1948") >(), L"Title1510" >  >() },
    {   24u, RevList< Rev< 0u, Arr64< Hash(L"Author134") >(), L"Title115" > , Rev< 1u, Arr64< Hash(L"Author2083") >(), L"Title1616" > , Rev< 2u, Arr64< Hash(L"Author2224") >(), L"Title1701" >  >() },
    {   25u, RevList< Rev< 0u, Arr64< Hash(L"Author1524") >(), L"clamp: An algorithm to 'clamp' a value between a pair of boundary values (Draft) -" > , Rev< 1u, Arr64< Hash(L"Author1572") >(), L"clamp: An algorithm to 'clamp' a value between a pair of boundary values -" >  >() },
    {   26u, RevList< Rev< 0u, Arr64< Hash(L"Matthew McAtamney-Greenwood") >(), L"P0026 - MultiRange-Based For Loop Proposal - v1.1.0" >  >() },
    {   27u, RevList< Rev< 0u, Arr64< Hash(L"Troy Korjuslommi") >(), L"named_template" >  >() },
    {   28u, RevList< Rev< 0u, Arr64< Hash(L"Author513") >(), L"Title421" > , Rev< 1u, Arr64< Hash(L"Author43") >(), L"Title43" > , Rev< 2u, Arr64< Hash(L"Author2046") >(), L"Title1588" > , Rev< 3u, Arr64< Hash(L"Author906") >(), L"Using scoped attributes" > , Rev< 4u, Arr64< Hash(L"Author2147") >(), L"Using attribute namespaces without repetition" >  >() },
    {   29u, RevList< Rev< 0u, Arr64< Hash(L"Author1943") >(), L"A Unified Proposal for Composable Hashing" >  >() },
    {   30u, RevList< Rev< 0u, Arr64< Hash(L"Benson Ma") >(), L"Microsoft Word - P0030R0.docx" > , Rev< 1u, Arr64< Hash(L"Benson Ma") >(), L"Title128" >  >() },
    {   31u, RevList< Rev< 0u, Arr64< Hash(L"Author1165") >(), L"A Proposal to Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access" >  >() },
    {   32u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"Title1411" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"Title1548" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"P0032R2" > , Rev< 3u, Arr64< Hash(L"Vicente J") >(), L"Title1571" >  >() },
    {   33u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan Wakely") >(), L"Re-enabling shared_from_this" > , Rev< 1u, Arr64< Hash(L"Jonathan Wakely") >(), L"Re-enabling shared_from_this" >  >() },
    {   34u, RevList< Rev< 0u, Arr64< Hash(L"Author1128") >(), L"P0034 Civil Time" >  >() },
    {   35u, RevList< Rev< 0u, Arr64< Hash(L"Author12") >(), L"Dynamic memory allocation for over-aligned data" > , Rev< 1u, Arr64< Hash(L"Author656") >(), L"Dynamic memory allocation for over-aligned data" > , Rev< 2u, Arr64< Hash(L"Author98") >(), L"Dynamic memory allocation for over-aligned data" > , Rev< 3u, Arr64< Hash(L"Author1039") >(), L"Dynamic memory allocation for over-aligned data" > , Rev< 4u, Arr64< Hash(L"Author1665") >(), L"Dynamic memory allocation for over-aligned data" >  >() },
    {   36u, RevList< Rev< 0u, Arr64< Hash(L"Thibaut Le") >(), L"Title119" >  >() },
    {   37u, RevList< Rev< 0u, Arr64< Hash(L"Author1232") >(), L"Fixed_Point_Library_Proposal" > , Rev< 1u, Arr64< Hash(L"Author590") >(), L"Title479" > , Rev< 2u, Arr64< Hash(L"Author193") >(), L"Title164" > , Rev< 3u, Arr64< Hash(L"Author7") >(), L"Title7" > , Rev< 4u, Arr64< Hash(L"Author1694") >(), L"Title1314" > , Rev< 5u, Arr64< Hash(L"Author1207") >(), L"Title948" > , Rev< 6u, Arr64< Hash(L"Author1248") >(), L"Title969" > , Rev< 7u, Arr64< Hash(L"Author1925") >(), L"p0037r7" >  >() },
    {   38u, RevList< Rev< 0u, Arr64< Hash(L"Sean Middleditch") >(), L"Untitled Document.md" >  >() },
    {   39u, RevList< Rev< 0u, Arr64< Hash(L"Author2212") >(), L"Untitled Document.md" >  >() },
    {   40u, RevList< Rev< 0u, Arr64< Hash(L"Author324") >(), L"Untitled Document.md" > , Rev< 1u, Arr64< Hash(L"Author1315") >(), L"P0040R1" > , Rev< 2u, Arr64< Hash(L"Author1508") >(), L"P0040R2" > , Rev< 3u, Arr64< Hash(L"Author770") >(), L"P0040R3" >  >() },
    {   41u, RevList< Rev< 0u, Arr64< Hash(L"Author840") >(), L"Untitled Document.md" >  >() },
    {   42u, RevList< Rev< 0u, Arr64< Hash(L"Author898") >(), L"recover_cast.pages" >  >() },
    {   43u, RevList< Rev< 0u, Arr64< Hash(L"Author1595") >(), L"function_container.pages" >  >() },
    {   44u, RevList< Rev< 0u, Arr64< Hash(L"Author932") >(), L"unwinding_state.pages" >  >() },
    {   45u, RevList< Rev< 0u, Arr64< Hash(L"Author558") >(), L"function.pages" > , Rev< 1u, Arr64< Hash(L"Author1363") >(), L"function.pages" >  >() },
    {   46u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Change is_transparent to metafunction" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Change is_transparent to metafunction (Revision 1)" >  >() },
    {   47u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title453" >  >() },
    {   48u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title646" >  >() },
    {   50u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"Title186" >  >() },
    {   51u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"Title1476" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"Title168" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"P0051R2" > , Rev< 3u, Arr64< Hash(L"Vicente J") >(), L"p0051r3" >  >() },
    {   52u, RevList< Rev< 0u, Arr64< Hash(L"Author1398") >(), L"Title1089" > , Rev< 1u, Arr64< Hash(L"Author1040") >(), L"Title835" > , Rev< 2u, Arr64< Hash(L"Author1299") >(), L"Title1002" > , Rev< 3u, Arr64< Hash(L"Author820") >(), L"C++ International Standard" > , Rev< 4u, Arr64< Hash(L"Author757") >(), L"Title614" > , Rev< 5u, Arr64< Hash(L"Author887") >(), L"Title716" > , Rev< 9u, Arr64< Hash(L"Author559") >(), L"Title452" > , Rev< 10u, Arr64< Hash(L"Author260") >(), L"Title218" >  >() },
    {   53u, RevList< Rev< 0u, Arr64< Hash(L"Author2105") >(), L"C++ Synchronized Buffered Ostream" > , Rev< 1u, Arr64< Hash(L"Author579") >(), L"C++ Synchronized Buffered Ostream" > , Rev< 2u, Arr64< Hash(L"Author1561") >(), L"C++ Synchronized Buffered Ostream" > , Rev< 3u, Arr64< Hash(L"Author452") >(), L"DRAFT C++ Synchronized Buffered Ostream" > , Rev< 4u, Arr64< Hash(L"Author1729") >(), L"DRAFT C++ Synchronized Buffered Ostream" > , Rev< 5u, Arr64< Hash(L"Author1864") >(), L"Title1445" >  >() },
    {   54u, RevList< Rev< 0u, Arr64< Hash(L"Author826") >(), L"D0054_ReportsFromTheField" >  >() },
    {   55u, RevList< Rev< 0u, Arr64< Hash(L"Author473") >(), L"D0055_BetterTogether" > , Rev< 1u, Arr64< Hash(L"Author1253") >(), L"D0055_BetterTogether" >  >() },
    {   56u, RevList< Rev< 0u, Arr64< Hash(L"Author1519") >(), L"D0056_SoftKeywords" >  >() },
    {   57u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" > , Rev< 1u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" > , Rev< 2u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" > , Rev< 3u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" > , Rev< 4u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" > , Rev< 5u, Arr64< Hash(L"Gor Nishanov") >(), L"C++ Technical Specification" >  >() },
    {   58u, RevList< Rev< 0u, Arr64< Hash(L"Author1334") >(), L"An Interface for Abstracting Execution | P0058R0" > , Rev< 1u, Arr64< Hash(L"Author571") >(), L"An Interface for Abstracting Execution | P0058R1" >  >() },
    {   59u, RevList< Rev< 0u, Arr64< Hash(L"Author742") >(), L"Title598" > , Rev< 1u, Arr64< Hash(L"Author1094") >(), L"Title881" > , Rev< 2u, Arr64< Hash(L"Author1459") >(), L"Title1138" > , Rev< 3u, Arr64< Hash(L"Author1172") >(), L"Title928" > , Rev< 4u, Arr64< Hash(L"Author1485") >(), L"Title1156" >  >() },
    {   60u, RevList< Rev< 0u, Arr64< Hash(L"Author2") >(), L"Function Object-Based Overloading of Operator Dot" >  >() },
    {   61u, RevList< Rev< 0u, Arr64< Hash(L"Author1996") >(), L"Feature-testing preprocessor predicates for C++17" > , Rev< 1u, Arr64< Hash(L"Author1127") >(), L"Feature-testing preprocessor predicates for C++17" >  >() },
    {   62u, RevList< Rev< 0u, Arr64< Hash(L"Author1177") >(), L"When should compilers optimize atomics?" > , Rev< 1u, Arr64< Hash(L"Author1960") >(), L"When should compilers optimize atomics?" >  >() },
    {   63u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"C++17 should refer to C11 instead of C99" > , Rev< 1u, Arr64< Hash(L"Author139") >(), L"C++17 should refer to C11 instead of C99" > , Rev< 2u, Arr64< Hash(L"Author855") >(), L"C++17 should refer to C11 instead of C99" > , Rev< 3u, Arr64< Hash(L"Author1931") >(), L"C++17 should refer to C11 instead of C99" >  >() },
    {   65u, RevList< Rev< 0u, Arr64< Hash(L"Author664") >(), L"movable-il.pages" >  >() },
    {   66u, RevList< Rev< 0u, Arr64< Hash(L"Author1589") >(), L"values.pages" >  >() },
    {   67u, RevList< Rev< 0u, Arr64< Hash(L"Author1337") >(), L"Elementary string conversions" > , Rev< 1u, Arr64< Hash(L"Author1540") >(), L"Elementary string conversions, revision 1" > , Rev< 2u, Arr64< Hash(L"Author1035") >(), L"Elementary string conversions, revision 2" > , Rev< 3u, Arr64< Hash(L"Author2214") >(), L"Elementary string conversions, revision 2" > , Rev< 4u, Arr64< Hash(L"Author550") >(), L"Elementary string conversions, revision 4" > , Rev< 5u, Arr64< Hash(L"Author1406") >(), L"Elementary string conversions, revision 5" >  >() },
    {   68u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1268" >  >() },
    {   69u, RevList< Rev< 0u, Arr64< Hash(L"Ben Sander") >(), L"Title1067" >  >() },
    {   70u, RevList< Rev< 0u, Arr64< Hash(L"Author1808") >(), L"D0070_ReturnBeforeAwait" >  >() },
    {   71u, RevList< Rev< 0u, Arr64< Hash(L"Author40") >(), L"D0071_KeywordsForCoroutines" >  >() },
    {   72u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Title1472" > , Rev< 1u, Arr64< Hash(L"Torvald Riegel") >(), L"Title1496" >  >() },
    {   73u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Title675" > , Rev< 1u, Arr64< Hash(L"Torvald Riegel") >(), L"Title973" > , Rev< 2u, Arr64< Hash(L"Torvald Riegel") >(), L"Title937" >  >() },
    {   74u, RevList< Rev< 0u, Arr64< Hash(L"Author1378") >(), L"Making std::owner_less more flexible" >  >() },
    {   75u, RevList< Rev< 0u, Arr64< Hash(L"Author1915") >(), L"Title1481" > , Rev< 1u, Arr64< Hash(L"Author934") >(), L"Template Library for Parallel For Loops" > , Rev< 2u, Arr64< Hash(L"Arch D") >(), L"Template Library for Parallel For Loops" >  >() },
    {   76u, RevList< Rev< 0u, Arr64< Hash(L"Author280") >(), L"Title231" > , Rev< 1u, Arr64< Hash(L"Author42") >(), L"Vector and Wavefront Policies" > , Rev< 2u, Arr64< Hash(L"Author1863") >(), L"Vector and Wavefront Policies" > , Rev< 3u, Arr64< Hash(L"Author55") >(), L"Vector and Wavefront Policies" > , Rev< 4u, Arr64< Hash(L"Author783") >(), L"Vector and Wavefront Policies" >  >() },
    {   77u, RevList< Rev< 0u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"is_callable, the missing INVOKE related trait" > , Rev< 1u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"is_callable, the missing INVOKE related trait" > , Rev< 2u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"is_callable, the missing INVOKE related trait" >  >() },
    {   78u, RevList< Rev< 0u, Arr64< Hash(L"Author398") >(), L"Title338" >  >() },
    {   79u, RevList< Rev< 0u, Arr64< Hash(L"Author923") >(), L"Title743" >  >() },
    {   80u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"Title991" >  >() },
    {   81u, RevList< Rev< 0u, Arr64< Hash(L"Author1355") >(), L"Title1051" >  >() },
    {   82u, RevList< Rev< 0u, Arr64< Hash(L"Author1993") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1498") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash(L"Author1849") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   83u, RevList< Rev< 0u, Arr64< Hash(L"Author309") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author739") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash(L"Author1664") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 3u, Arr64< Hash(L"Author526") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   84u, RevList< Rev< 0u, Arr64< Hash(L"Author1229") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1090") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash(L"Author417") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   85u, RevList< Rev< 0u, Arr64< Hash(L"Author1069") >(), L"Oo... adding a coherent character sequence to start octal-literals" >  >() },
    {   86u, RevList< Rev< 0u, Arr64< Hash(L"Author627") >(), L"Variant design review." >  >() },
    {   87u, RevList< Rev< 0u, Arr64< Hash(L"Author1246") >(), L"Variant: a type-safe union without undefined behavior (v2)." >  >() },
    {   88u, RevList< Rev< 0u, Arr64< Hash(L"Author1601") >(), L"Variant: a type-safe union that is rarely invalid (v5)." > , Rev< 1u, Arr64< Hash(L"Axel Naumann") >(), L"Variant: a type-safe union (v6)." > , Rev< 2u, Arr64< Hash(L"Axel Naumann") >(), L"Variant: a type-safe union for C++17 (v7)." > , Rev< 3u, Arr64< Hash(L"Axel Naumann") >(), L"Variant: a type-safe union for C++17 (v8)." >  >() },
    {   89u, RevList< Rev< 0u, Arr64< Hash(L"John Lakos") >(), L"On the Effective Use Of Memory Allocators" > , Rev< 1u, Arr64< Hash(L"John Lakos") >(), L"On Quantifying Memory-Allocation Strategies (Revision 2)" >  >() },
    {   90u, RevList< Rev< 0u, Arr64< Hash(L"Stephan T") >(), L"ISO/IEC JTC1/SC22/WG21p0090r0" >  >() },
    {   91u, RevList< Rev< 0u, Arr64< Hash(L"Author1156") >(), L"Template parameter deduction for constructors (Rev. 2)" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Template argument deduction for class templates (Rev. 4)" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Template argument deduction for class templates (Rev. 5)" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Template argument deduction for class templates (Rev. 6)" > , Rev< 4u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Template argument deduction for class templates (Rev. 7)" >  >() },
    {   92u, RevList< Rev< 0u, Arr64< Hash(L"Author406") >(), L"Polishing chrono" > , Rev< 1u, Arr64< Hash(L"Author1901") >(), L"Polishing chrono" >  >() },
    {   93u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title1251" >  >() },
    {   94u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title280" >  >() },
    {   95u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title1591" > , Rev< 1u, Arr64< Hash(L"David Sankel") >(), L"Title1447" > , Rev< 2u, Arr64< Hash(L"David Sankel") >(), L"language_variant" >  >() },
    {   96u, RevList< Rev< 0u, Arr64< Hash(L"Author721") >(), L"Feature-testing recommendations for C++" > , Rev< 1u, Arr64< Hash(L"Author1121") >(), L"Feature-testing recommendations for C++" > , Rev< 2u, Arr64< Hash(L"Author712") >(), L"Feature-testing recommendations for C++" > , Rev< 3u, Arr64< Hash(L"Author838") >(), L"Feature-testing recommendations for C++" > , Rev< 4u, Arr64< Hash(L"Author926") >(), L"Feature-testing recommendations for C++" > , Rev< 5u, Arr64< Hash(L"Author2115") >(), L"Feature-testing recommendations for C++" >  >() },
    {   97u, RevList< Rev< 0u, Arr64< Hash(L"Author936") >(), L"Use Cases for Thread-Local Storage" >  >() },
    {   98u, RevList< Rev< 0u, Arr64< Hash(L"Author1388") >(), L"Title1079" > , Rev< 1u, Arr64< Hash(L"Author782") >(), L"Title636" >  >() },
    {   99u, RevList< Rev< 0u, Arr64< Hash(L"Oliver Kowalke") >(), L"A low-level API for stackful context switching" > , Rev< 1u, Arr64< Hash(L"Oliver Kowalke") >(), L"A low-level API for stackful context switching" >  >() },
    {  100u, RevList< Rev< 0u, Arr64< Hash(L"Author348") >(), L"Comparison in C++" > , Rev< 1u, Arr64< Hash(L"Author772") >(), L"Comparison in C++" > , Rev< 2u, Arr64< Hash(L"Lawrence Crowl") >(), L"Comparison in C++" >  >() },
    {  101u, RevList< Rev< 0u, Arr64< Hash(L"Author592") >(), L"An Outline of a C++ Numbers Technical Specification" >  >() },
    {  102u, RevList< Rev< 0u, Arr64< Hash(L"Author344") >(), L"C++ Parametric Number Type Aliases" >  >() },
    {  103u, RevList< Rev< 0u, Arr64< Hash(L"Author1838") >(), L"Overflow-Detecting and Double-Wide Arithmetic Operations" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"Overflow-Detecting and Double-Wide Arithmetic Operations" >  >() },
    {  104u, RevList< Rev< 0u, Arr64< Hash(L"Author1268") >(), L"Multi-Word Integer Operations and Types" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"Multi-Word Integer Operations and Types" >  >() },
    {  105u, RevList< Rev< 0u, Arr64< Hash(L"Author113") >(), L"Rounding and Overflow in C++" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"Rounding and Overflow in C++" >  >() },
    {  106u, RevList< Rev< 0u, Arr64< Hash(L"Author1101") >(), L"C++ Binary Fixed-Point Arithmetic" >  >() },
    {  107u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title926" >  >() },
    {  108u, RevList< Rev< 0u, Arr64< Hash(L"Author537") >(), L"Skeleton Proposal for Thread-Local Storage (TLS)" > , Rev< 1u, Arr64< Hash(L"Author1057") >(), L"Skeleton Proposal for Thread-Local Storage (TLS)" >  >() },
    {  109u, RevList< Rev< 0u, Arr64< Hash(L"Author634") >(), L"Function Aliases + Extended Inheritance = Opaque Typedefs" >  >() },
    {  110u, RevList< Rev< 0u, Arr64< Hash(L"Anthony") >(), L"P0110: Implementing the strong guarantee for variant<> assignment" >  >() },
    {  112u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking Library (Revision 6)" > , Rev< 1u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking Library (Revision 7)" >  >() },
    {  113u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Executors and Asynchronous Operations, Revision 2" >  >() },
    {  114u, RevList< Rev< 0u, Arr64< Hash(L"Author1464") >(), L"Microsoft Word - Resumable Expressions rev 2.docm" >  >() },
    {  116u, RevList< Rev< 0u, Arr64< Hash(L"Robert Kawulak") >(), L"Boolean conversion for Standard Library types" >  >() },
    {  117u, RevList< Rev< 0u, Arr64< Hash(L"Robert Kawulak") >(), L"Generic to_string/to_wstring functions" >  >() },
    {  118u, RevList< Rev< 0u, Arr64< Hash(L"Author702") >(), L"Title564" >  >() },
    {  119u, RevList< Rev< 0u, Arr64< Hash(L"Author157") >(), L"Title133" > , Rev< 1u, Arr64< Hash(L"Author253") >(), L"Title212" > , Rev< 2u, Arr64< Hash(L"Author1374") >(), L"Title1066" >  >() },
    {  120u, RevList< Rev< 0u, Arr64< Hash(L"Anthony") >(), L"constexpr unions and common initial sequences" >  >() },
    {  121u, RevList< Rev< 0u, Arr64< Hash(L"Author1604") >(), L"C++ Technical Specification" >  >() },
    {  122u, RevList< Rev< 0u, Arr64< Hash(L"Neil MacIntosh") >(), L"Title256" > , Rev< 1u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0122R1" > , Rev< 2u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0122R2.docx" > , Rev< 3u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - D0122R3.docx" > , Rev< 4u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0122R3" > , Rev< 5u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0122R3" >  >() },
    {  123u, RevList< Rev< 0u, Arr64< Hash(L"Neil MacIntosh") >(), L"Title1230" > , Rev< 1u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0123R1" > , Rev< 2u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0123R2.docx" >  >() },
    {  124u, RevList< Rev< 0u, Arr64< Hash(L"Author2069") >(), L"Linux-Kernel Memory Model" > , Rev< 1u, Arr64< Hash(L"Author1809") >(), L"Linux-Kernel Memory Model" > , Rev< 2u, Arr64< Hash(L"Author133") >(), L"Linux-Kernel Memory Model" > , Rev< 3u, Arr64< Hash(L"Author2012") >(), L"Linux-Kernel Memory Model" > , Rev< 4u, Arr64< Hash(L"Author986") >(), L"Linux-Kernel Memory Model" > , Rev< 5u, Arr64< Hash(L"Author1004") >(), L"Linux-Kernel Memory Model" > , Rev< 6u, Arr64< Hash(L"Author238") >(), L"Linux-Kernel Memory Model" > , Rev< 7u, Arr64< Hash(L"Author1633") >(), L"Linux-Kernel Memory Model" > , Rev< 8u, Arr64< Hash(L"Author1239") >(), L"Linux-Kernel Memory Model" >  >() },
    {  125u, RevList< Rev< 0u, Arr64< Hash(L"Author1878") >(), L"Untitled Document.md" >  >() },
    {  126u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"Title288" > , Rev< 1u, Arr64< Hash(L"Olivier Giroux") >(), L"Untitled" > , Rev< 2u, Arr64< Hash(L"Olivier Giroux") >(), L"synchronic" >  >() },
    {  127u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Declaring non-type template arguments with auto" > , Rev< 1u, Arr64< Hash(L"James Touton") >(), L"Declaring non-type template arguments with auto" > , Rev< 2u, Arr64< Hash(L"James Touton") >(), L"Declaring non-type template parameters with auto" >  >() },
    {  128u, RevList< Rev< 0u, Arr64< Hash(L"Author1261") >(), L"constexpr_if" > , Rev< 1u, Arr64< Hash(L"Author2203") >(), L"constexpr if" >  >() },
    {  129u, RevList< Rev< 0u, Arr64< Hash(L"Author368") >(), L"We cannot (realistically) get rid of throwing moves" >  >() },
    {  130u, RevList< Rev< 0u, Arr64< Hash(L"Author20") >(), L"Title17" >  >() },
    {  131u, RevList< Rev< 0u, Arr64< Hash(L"Author1025") >(), L"Title819" >  >() },
    {  132u, RevList< Rev< 0u, Arr64< Hash(L"Author1488") >(), L"Non-throwing container operations" > , Rev< 1u, Arr64< Hash(L"Author1331") >(), L"Non-throwing container operations" >  >() },
    {  133u, RevList< Rev< 0u, Arr64< Hash(L"Author1486") >(), L"Putting noexcept(auto) on hold, again" >  >() },
    {  134u, RevList< Rev< 0u, Arr64< Hash(L"Author1007") >(), L"Introducing a name for brace-or-equal-initializers for non-static data members" >  >() },
    {  135u, RevList< Rev< 0u, Arr64< Hash(L"Author663") >(), L"Guaranteed copy elision through simplified value categories" > , Rev< 1u, Arr64< Hash(L"Author1247") >(), L"Wording for guaranteed copy elision through simplified value categories" >  >() },
    {  136u, RevList< Rev< 0u, Arr64< Hash(L"Author698") >(), L"N4429: Rewording inheriting constructors (core issue 1941 et al)" > , Rev< 1u, Arr64< Hash(L"Author289") >(), L"Rewording inheriting constructors (core issue 1941 et al)" >  >() },
    {  137u, RevList< Rev< 0u, Arr64< Hash(L"Author154") >(), L"Core Issue 1776: Replacement of class objects containing reference members" > , Rev< 1u, Arr64< Hash(L"Author2227") >(), L"Core Issue 1776: Replacement of class objects containing reference members (et al)" >  >() },
    {  138u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title717" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title126" > , Rev< 2u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title513" >  >() },
    {  141u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1353" >  >() },
    {  142u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1244" >  >() },
    {  143u, RevList< Rev< 0u, Arr64< Hash(L"Author562") >(), L"Title455" > , Rev< 1u, Arr64< Hash(L"Author2011") >(), L"Title1551" > , Rev< 2u, Arr64< Hash(L"Author2037") >(), L"Title1576" >  >() },
    {  144u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title481" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title258" > , Rev< 2u, Arr64< Hash(L"Herb Sutter") >(), L"Title533" >  >() },
    {  145u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1271" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title84" > , Rev< 2u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1052" > , Rev< 3u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1515" >  >() },
    {  146u, RevList< Rev< 0u, Arr64< Hash(L"Author1742") >(), L"Regular Void" > , Rev< 1u, Arr64< Hash(L"Author1332") >(), L"Regular Void (Revision 1)" >  >() },
    {  147u, RevList< Rev< 0u, Arr64< Hash(L"Author988") >(), L"The Use and Implementation of Contracts" >  >() },
    {  148u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Title669" >  >() },
    {  149u, RevList< Rev< 0u, Arr64< Hash(L"Author481") >(), L"Title400" > , Rev< 1u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1261" >  >() },
    {  151u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title81" >  >() },
    {  152u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"P0152R0 constexpr atomic<T>::is_always_lock_free" > , Rev< 1u, Arr64< Hash(L"Olivier Giroux") >(), L"P0152R1 constexpr atomic<T>::is_always_lock_free" >  >() },
    {  153u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"P0153R0 std::atomic_object_fence(mo, T&&...)" >  >() },
    {  154u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"P0154R0 constexpr std::hardware_{constructive,destructive}_interference_size" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"P0154R1 constexpr std::hardware_{constructive,destructive}_interference_size" >  >() },
    {  155u, RevList< Rev< 0u, Arr64< Hash(L"Author752") >(), L"P0155R0 | Task Block R5" >  >() },
    {  156u, RevList< Rev< 0u, Arr64< Hash(L"Author1939") >(), L"Variadic lock_guard (Rev. 2)" > , Rev< 1u, Arr64< Hash(L"Author1291") >(), L"Variadic lock_guard (Rev. 4)" > , Rev< 2u, Arr64< Hash(L"Author2036") >(), L"Variadic lock_guard (Rev. 5)" >  >() },
    {  157u, RevList< Rev< 0u, Arr64< Hash(L"Author2128") >(), L"Handling Disappointment in C++" >  >() },
    {  158u, RevList< Rev< 0u, Arr64< Hash(L"Jamie Allsop") >(), L"papers/P0158R0.md - Grip" >  >() },
    {  159u, RevList< Rev< 0u, Arr64< Hash(L"Author797") >(), L"Technical Specification for C++ Extensions for Concurrency, DTS" >  >() },
    {  160u, RevList< Rev< 0u, Arr64< Hash(L"Author1777") >(), L"Wording for removing defaults for unary folds" >  >() },
    {  161u, RevList< Rev< 0u, Arr64< Hash(L"Author1986") >(), L"Title1539" >  >() },
    {  162u, RevList< Rev< 0u, Arr64< Hash(L"Author995") >(), L"Microsoft Word - Response to P0055R0.docm" >  >() },
    {  163u, RevList< Rev< 0u, Arr64< Hash(L"Author519") >(), L"shared_ptr::weak_type" >  >() },
    {  164u, RevList< Rev< 0u, Arr64< Hash(L"Author2119") >(), L"Core Motions" >  >() },
    {  165u, RevList< Rev< 0u, Arr64< Hash(L"Author1514") >(), L"C++ Standard Library Issues to be moved in Kona" > , Rev< 1u, Arr64< Hash(L"Author1946") >(), L"C++ Standard Library Issues to be moved in Jacksonville" > , Rev< 2u, Arr64< Hash(L"Author1385") >(), L"C++ Standard Library Issues to be moved in Oulu" > , Rev< 3u, Arr64< Hash(L"Author1153") >(), L"C++ Standard Library Issues to be moved in Issaquah" > , Rev< 4u, Arr64< Hash(L"Author1652") >(), L"C++ Standard Library Issues to be moved in Kona" >  >() },
    {  166u, RevList< Rev< 0u, Arr64< Hash(L"Author167") >(), L"Title144" >  >() },
    {  167u, RevList< Rev< 0u, Arr64< Hash(L"Author2054") >(), L"Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author1328") >(), L"Core \"ready\" Issues" > , Rev< 2u, Arr64< Hash(L"Author1471") >(), L"Core \"ready\" Issues" >  >() },
    {  169u, RevList< Rev< 0u, Arr64< Hash(L"Author1661") >(), L"regex with Unicode character types" >  >() },
    {  170u, RevList< Rev< 0u, Arr64< Hash(L"Author1028") >(), L"Title822" > , Rev< 1u, Arr64< Hash(L"Author1739") >(), L"Title1343" >  >() },
    {  171u, RevList< Rev< 0u, Arr64< Hash(L"Author1362") >(), L"P0171_ResponseToP0114" >  >() },
    {  172u, RevList< Rev< 0u, Arr64< Hash(L"Author577") >(), L"Abominable Function Types" >  >() },
    {  174u, RevList< Rev< 0u, Arr64< Hash(L"Author777") >(), L"Deprecating Vestigial Library Parts in C++17" > , Rev< 1u, Arr64< Hash(L"Author1469") >(), L"Deprecating Vestigial Library Parts in C++17" > , Rev< 2u, Arr64< Hash(L"Author1754") >(), L"Deprecating Vestigial Library Parts in C++17" >  >() },
    {  175u, RevList< Rev< 0u, Arr64< Hash(L"Author88") >(), L"Synopses for the C library" > , Rev< 1u, Arr64< Hash(L"Author1596") >(), L"Synopses for the C library" >  >() },
    {  177u, RevList< Rev< 0u, Arr64< Hash(L"Author1168") >(), L"Cleaning up allocator_traits" > , Rev< 1u, Arr64< Hash(L"Author1619") >(), L"Cleaning up allocator_traits" > , Rev< 2u, Arr64< Hash(L"Author972") >(), L"Cleaning up allocator_traits" >  >() },
    {  178u, RevList< Rev< 0u, Arr64< Hash(L"Author1409") >(), L"Allocators and swap" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Allocators and swap" >  >() },
    {  180u, RevList< Rev< 0u, Arr64< Hash(L"Author1250") >(), L"Reserve a New Library Namespace Future Standardization" > , Rev< 1u, Arr64< Hash(L"Author1839") >(), L"Reserve a New Library Namespace Future Standardization" > , Rev< 2u, Arr64< Hash(L"Author937") >(), L"Reserve a New Library Namespace for Future Standardization" >  >() },
    {  181u, RevList< Rev< 0u, Arr64< Hash(L"Author1930") >(), L"Ordered By Default" > , Rev< 1u, Arr64< Hash(L"Author2197") >(), L"Ordered By Default" >  >() },
    {  184u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Generalizing the Range-Based For Loop" >  >() },
    {  185u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Adding [nothrow-]swappable traits (Revision 2)" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Adding [nothrow-]swappable traits (Revision 3)" >  >() },
    {  186u, RevList< Rev< 0u, Arr64< Hash(L"Author1852") >(), L"Iterator Facade -" >  >() },
    {  187u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title470" > , Rev< 1u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1024" >  >() },
    {  188u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title611" > , Rev< 1u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1352" >  >() },
    {  189u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1333" > , Rev< 1u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1690" >  >() },
    {  190u, RevList< Rev< 0u, Arr64< Hash(L"Author492") >(), L"Title411" > , Rev< 1u, Arr64< Hash(L"Author120") >(), L"Title107" > , Rev< 2u, Arr64< Hash(L"Author726") >(), L"Title586" > , Rev< 3u, Arr64< Hash(L"Author987") >(), L"Title799" > , Rev< 4u, Arr64< Hash(L"Author639") >(), L"Title521" >  >() },
    {  191u, RevList< Rev< 1u, Arr64< Hash(L"Daniel Markus") >(), L"VirtualMemberFunctionPointerComparison" >  >() },
    {  192u, RevList< Rev< 0u, Arr64< Hash(L"Author464") >(), L"Title389" > , Rev< 1u, Arr64< Hash(L"Boris Fomitchev") >(), L"Title867" > , Rev< 4u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`short float` and fixed-size floating point types" >  >() },
    {  193u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"P0193R0 Where is Vectorization in C++" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"P0193R1 Where is Vectorization in C++" >  >() },
    {  194u, RevList< Rev< 0u, Arr64< Hash(L"Matus") >(), L"Title1448" > , Rev< 1u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"P0194R1 Static reflection" > , Rev< 2u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"P0194R2 Static reflection" > , Rev< 3u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection" > , Rev< 4u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection" > , Rev< 5u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection" >  >() },
    {  195u, RevList< Rev< 0u, Arr64< Hash(L"Author2076") >(), L"Title1608" > , Rev< 1u, Arr64< Hash(L"Author283") >(), L"Title233" > , Rev< 2u, Arr64< Hash(L"Author999") >(), L"Pack expansions in using-declarations" >  >() },
    {  196u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"P0196R0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"P0196R1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"P0196R2" > , Rev< 3u, Arr64< Hash(L"Vicente J") >(), L"p0196r3" > , Rev< 4u, Arr64< Hash(L"Vicente J") >(), L"p0196r4" > , Rev< 5u, Arr64< Hash(L"Vicente J") >(), L"p0196r5" >  >() },
    {  197u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"P0197R0" >  >() },
    {  198u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"P0198R0" >  >() },
    {  199u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"P0199R0" >  >() },
    {  200u, RevList< Rev< 0u, Arr64< Hash(L"Author670") >(), L"A Proposal to Add YCombinator to the Standard Library" >  >() },
    {  201u, RevList< Rev< 0u, Arr64< Hash(L"Author1606") >(), L"Title1245" > , Rev< 1u, Arr64< Hash(L"Author569") >(), L"Title461" > , Rev< 2u, Arr64< Hash(L"Author196") >(), L"Title166" > , Rev< 3u, Arr64< Hash(L"Author1937") >(), L"Title1498" > , Rev< 4u, Arr64< Hash(L"Author1182") >(), L"Title930" > , Rev< 5u, Arr64< Hash(L"Author351") >(), L"Title297" > , Rev< 6u, Arr64< Hash(L"Jonathan B") >(), L"<code>polymorphic_value</code>: A Polymorphic Value Type for C++" >  >() },
    {  202u, RevList< Rev< 0u, Arr64< Hash(L"Author1137") >(), L"A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers" > , Rev< 1u, Arr64< Hash(L"Author2149") >(), L"A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" > , Rev< 2u, Arr64< Hash(L"Author137") >(), L"A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" > , Rev< 3u, Arr64< Hash(L"Author694") >(), L"A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" >  >() },
    {  203u, RevList< Rev< 0u, Arr64< Hash(L"Author1174") >(), L"Considerations for the design of expressive portable SIMD vectors" >  >() },
    {  205u, RevList< Rev< 0u, Arr64< Hash(L"Moritz Klammler") >(), L"P0205R0 Allow Seeding Random Number Engines with std::random_device" > , Rev< 1u, Arr64< Hash(L"Moritz Klammler") >(), L"P0205R1 Efficient Seeding of Random Number Engines" >  >() },
    {  206u, RevList< Rev< 0u, Arr64< Hash(L"Author534") >(), L"Discussion about std::thread and RAII" > , Rev< 1u, Arr64< Hash(L"Author127") >(), L"A joining thread" >  >() },
    {  207u, RevList< Rev< 0u, Arr64< Hash(L"Author57") >(), L"Ruminations on lambda captures" >  >() },
    {  208u, RevList< Rev< 0u, Arr64< Hash(L"Author706") >(), L"Copy-Swap Helper" > , Rev< 1u, Arr64< Hash(L"Author806") >(), L"Copy-Swap Transaction" >  >() },
    {  209u, RevList< Rev< 0u, Arr64< Hash(L"Author2061") >(), L"P0209r0 | make_from_tuple: apply for construction" > , Rev< 1u, Arr64< Hash(L"Author302") >(), L"P0209r1 | make_from_tuple: apply for construction" > , Rev< 2u, Arr64< Hash(L"Author957") >(), L"P0209r2 | make_from_tuple: apply for construction" >  >() },
    {  210u, RevList< Rev< 0u, Arr64< Hash(L"Author1625") >(), L"A light-weight, compact dynamic array" >  >() },
    {  211u, RevList< Rev< 0u, Arr64< Hash(L"Author1726") >(), L"Allocator-aware library wrappers for dynamic allocation" > , Rev< 1u, Arr64< Hash(L"Author1826") >(), L"Allocator-aware library wrappers for dynamic allocation" > , Rev< 2u, Arr64< Hash(L"Author461") >(), L"Allocator-aware library wrappers for dynamic allocation" > , Rev< 3u, Arr64< Hash(L"Author725") >(), L"Allocator-aware library wrappers for dynamic allocation" >  >() },
    {  212u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title780" > , Rev< 1u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title385" >  >() },
    {  213u, RevList< Rev< 0u, Arr64< Hash(L"Graham Bleaney") >(), L"On the Effective Use Of Memory Allocators" >  >() },
    {  214u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R3]" > , Rev< 4u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R4]" > , Rev< 5u, Arr64< Hash(L"Matthias Kretz") >(), L"Data-Parallel Vector Types & Operations [P0214R5]" >  >() },
    {  215u, RevList< Rev< 0u, Arr64< Hash(L"Greg Miller") >(), L"Title889" >  >() },
    {  216u, RevList< Rev< 0u, Arr64< Hash(L"Greg Miller") >(), L"Title462" >  >() },
    {  217u, RevList< Rev< 0u, Arr64< Hash(L"Author652") >(), L"Wording for structured bindings" > , Rev< 1u, Arr64< Hash(L"Author1710") >(), L"Wording for structured bindings" > , Rev< 2u, Arr64< Hash(L"Author866") >(), L"Wording for structured bindings" > , Rev< 3u, Arr64< Hash(L"Author563") >(), L"Wording for structured bindings" >  >() },
    {  218u, RevList< Rev< 0u, Arr64< Hash(L"Author1097") >(), L"C++17 Filesystem -" > , Rev< 1u, Arr64< Hash(L"Author931") >(), L"C++17 Filesystem -" >  >() },
    {  219u, RevList< Rev< 0u, Arr64< Hash(L"Author2129") >(), L"Relative Paths" > , Rev< 1u, Arr64< Hash(L"Author1190") >(), L"Relative Paths" >  >() },
    {  220u, RevList< Rev< 0u, Arr64< Hash(L"Author573") >(), L"C++17 Fundamentals -" > , Rev< 1u, Arr64< Hash(L"Author749") >(), L"C++17 Fundamentals -" >  >() },
    {  221u, RevList< Rev< 0u, Arr64< Hash(L"Author2208") >(), L"Default comparisons" > , Rev< 1u, Arr64< Hash(L"Author2107") >(), L"Proposed wording for default comparisons, revision 3" > , Rev< 2u, Arr64< Hash(L"Author1086") >(), L"Proposed wording for default comparisons, revision 4" >  >() },
    {  222u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Allowing Anonymous Structs as Return Values" >  >() },
    {  223u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Class Namespace" >  >() },
    {  224u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Implicit Return Type" >  >() },
    {  225u, RevList< Rev< 0u, Arr64< Hash(L"Author1965") >(), L"Why I want Concepts, and why I want them sooner rather than later" >  >() },
    {  226u, RevList< Rev< 0u, Arr64< Hash(L"Author1704") >(), L"Mathematical Special Functions for C++17, v4" > , Rev< 1u, Arr64< Hash(L"Author33") >(), L"Mathematical Special Functions for C++17, v5" >  >() },
    {  227u, RevList< Rev< 0u, Arr64< Hash(L"Thibaut Le") >(), L"Title1440" >  >() },
    {  228u, RevList< Rev< 0u, Arr64< Hash(L"Robert Ramey") >(), L"Java Printing.pdf" > , Rev< 3u, Arr64< Hash(L"Ryan McDougall") >(), L"unique_function: a move-only std::function" >  >() },
    {  229u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title426" >  >() },
    {  230u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1272" >  >() },
    {  231u, RevList< Rev< 0u, Arr64< Hash(L"Victor Luchangco") >(), L"Title909" >  >() },
    {  232u, RevList< Rev< 0u, Arr64< Hash(L"Paul McKenney") >(), L"Title1262" >  >() },
    {  233u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Title1403" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Title276" > , Rev< 2u, Arr64< Hash(L"Maged M") >(), L"Title306" > , Rev< 3u, Arr64< Hash(L"Maged M") >(), L"Title651" > , Rev< 4u, Arr64< Hash(L"Maged M") >(), L"Title1637" > , Rev< 5u, Arr64< Hash(L"Maged M") >(), L"Title1564" >  >() },
    {  234u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title610" >  >() },
    {  235u, RevList< Rev< 0u, Arr64< Hash(L"Author2223") >(), L"Title1700" >  >() },
    {  236u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1538" >  >() },
    {  237u, RevList< Rev< 0u, Arr64< Hash(L"Author1155") >(), L"Title918" > , Rev< 1u, Arr64< Hash(L"Author1927") >(), L"Wording for fundamental bit manipulation utilities" > , Rev< 2u, Arr64< Hash(L"Author1066") >(), L"Wording for fundamental bit manipulation utilities" > , Rev< 3u, Arr64< Hash(L"Author162") >(), L"Wording for fundamental bit manipulation utilities" > , Rev< 4u, Arr64< Hash(L"Author1317") >(), L"Wording for fundamental bit manipulation utilities" > , Rev< 5u, Arr64< Hash(L"Author476") >(), L"Wording for fundamental bit manipulation utilities" > , Rev< 9u, Arr64< Hash(L"Author2058") >(), L"P0237R9" > , Rev< 10u, Arr64< Hash(L"Author1651") >(), L"P0237R10" >  >() },
    {  238u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Return type deduction and SFINAE" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Return type deduction and SFINAE" >  >() },
    {  239u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title1585" >  >() },
    {  240u, RevList< Rev< 0u, Arr64< Hash(L"Author2163") >(), L"Why I want Concepts, but why they should come later rather than sooner" >  >() },
    {  241u, RevList< Rev< 0u, Arr64< Hash(L"Author1713") >(), L"Remove Future-Related Explicit Specializations for Void" >  >() },
    {  242u, RevList< Rev< 0u, Arr64< Hash(L"Author1307") >(), L"Standard Library Support for Void" >  >() },
    {  244u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Text_view: A C++ concepts and range based character encoding and code point enumeration library" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"Text_view: A C++ concepts and range based character encoding and code point enumeration library" > , Rev< 2u, Arr64< Hash(L"Tom Honermann") >(), L"Text_view: A C++ concepts and range based character encoding and code point enumeration library" >  >() },
    {  245u, RevList< Rev< 0u, Arr64< Hash(L"Author1532") >(), L"Hexadecimal floating literals for C++" > , Rev< 1u, Arr64< Hash(L"Author1806") >(), L"Hexadecimal floating literals for C++" >  >() },
    {  246u, RevList< Rev< 0u, Arr64< Hash(L"John Lakos") >(), L"Title712" >  >() },
    {  247u, RevList< Rev< 0u, Arr64< Hash(L"Author1603") >(), L"Title1243" >  >() },
    {  248u, RevList< Rev< 0u, Arr64< Hash(L"Author2201") >(), L"Untitled" >  >() },
    {  249u, RevList< Rev< 0u, Arr64< Hash(L"Michael McLaughlin") >(), L"Input Devices for 2d GraPhics" > , Rev< 2u, Arr64< Hash(L"Michael McLaughlin") >(), L"Input Devices for 2d GraPhics" >  >() },
    {  250u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Wording improvements for initialization and thread ids (CWG 2046)" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Wording improvements for initialization and thread ids (CWG 2046)" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Wording improvements for initialization and thread ids (CWG 2046, 1784)" > , Rev< 3u, Arr64< Hash(L"Hans-J. Boehm") >(), L"D0250R3: Wording improvements for initialization and thread ids (CWG 2046, 1784)" >  >() },
    {  251u, RevList< Rev< 0u, Arr64< Hash(L"Author735") >(), L"Title593" >  >() },
    {  252u, RevList< Rev< 0u, Arr64< Hash(L"Author229") >(), L"Title189" > , Rev< 1u, Arr64< Hash(L"Author1403") >(), L"Title1093" > , Rev< 2u, Arr64< Hash(L"Author1834") >(), L"Title1425" >  >() },
    {  253u, RevList< Rev< 0u, Arr64< Hash(L"Author458") >(), L"BMH Wording" > , Rev< 1u, Arr64< Hash(L"Author1945") >(), L"P0253R1" >  >() },
    {  254u, RevList< Rev< 0u, Arr64< Hash(L"Author2117") >(), L"Integrating string_view" > , Rev< 1u, Arr64< Hash(L"Author1426") >(), L"Integrating string_viewR1" > , Rev< 2u, Arr64< Hash(L"Author2063") >(), L"Integrating string_viewR2" >  >() },
    {  255u, RevList< Rev< 0u, Arr64< Hash(L"Cleiton Santoia") >(), L"C++ International Standard" >  >() },
    {  256u, RevList< Rev< 0u, Arr64< Hash(L"Cleiton Santoia") >(), L"C++ International Standard" >  >() },
    {  257u, RevList< Rev< 0u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0257R0" > , Rev< 1u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0257R1.docx" >  >() },
    {  258u, RevList< Rev< 0u, Arr64< Hash(L"Author2021") >(), L"is_contiguous_layout" > , Rev< 1u, Arr64< Hash(L"Author1436") >(), L"is_contiguous_layout" > , Rev< 2u, Arr64< Hash(L"Author2207") >(), L"P0258R2 has_unique_object_representations - wording" >  >() },
    {  259u, RevList< Rev< 0u, Arr64< Hash(L"Michael Price") >(), L"Title1560" >  >() },
    {  260u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 2u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 3u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 4u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 5u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 6u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 7u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 8u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 9u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 10u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 11u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 12u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 13u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 14u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 15u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 16u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" > , Rev< 17u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Queues" >  >() },
    {  261u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Distributed Counters" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Distributed Counters" > , Rev< 2u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Distributed Counters" > , Rev< 3u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Distributed Counters" > , Rev< 4u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Distributed Counters" >  >() },
    {  262u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"A Class for Status and Optional Value" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"A Class for Status and Optional Value" >  >() },
    {  263u, RevList< Rev< 0u, Arr64< Hash(L"Author1478") >(), L"Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author1205") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  264u, RevList< Rev< 0u, Arr64< Hash(L"Author531") >(), L"auto operator= considered dangerous" >  >() },
    {  265u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title821" >  >() },
    {  266u, RevList< Rev< 0u, Arr64< Hash(L"Author1873") >(), L"Lifting Restrictions on requires-Expressions" > , Rev< 1u, Arr64< Hash(L"Author1130") >(), L"Lifting Restrictions on requires-Expressions" > , Rev< 2u, Arr64< Hash(L"Author1617") >(), L"Lifting Restrictions on requires-Expressions" >  >() },
    {  267u, RevList< Rev< 0u, Arr64< Hash(L"Author1934") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 1u, Arr64< Hash(L"Author1602") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 2u, Arr64< Hash(L"Author1117") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 3u, Arr64< Hash(L"Author1142") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 4u, Arr64< Hash(L"Author341") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 5u, Arr64< Hash(L"Author892") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 8u, Arr64< Hash(L"Author1188") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 9u, Arr64< Hash(L"Author1767") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 10u, Arr64< Hash(L"Author801") >(), L"A Proposal to Add 2D Graphics Rendering and Display to C++" >  >() },
    {  268u, RevList< Rev< 0u, Arr64< Hash(L"Author540") >(), L"Title438" >  >() },
    {  269u, RevList< Rev< 0u, Arr64< Hash(L"mike_spertus@symantec.com Authors") >(), L"Title406" >  >() },
    {  270u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Removing C dependencies from signal handler wording" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Removing C dependencies from signal handler wording" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Removing C dependencies from signal handler wording" > , Rev< 3u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Removing C dependencies from signal handler wording" >  >() },
    {  271u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Title949" >  >() },
    {  272u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title784" > , Rev< 1u, Arr64< Hash(L"David Sankel") >(), L"Title887" >  >() },
    {  273u, RevList< Rev< 0u, Arr64< Hash(L"Author1468") >(), L"Title1141" > , Rev< 1u, Arr64< Hash(L"Author1070") >(), L"Title861" >  >() },
    {  274u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"P0274R0 Clump - A Vector-like Contiguous Sequence Container with Embedded Storage.pages" >  >() },
    {  275u, RevList< Rev< 0u, Arr64< Hash(L"Author301") >(), L"A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 1u, Arr64< Hash(L"Author1105") >(), L"A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 2u, Arr64< Hash(L"Author1659") >(), L"A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 3u, Arr64< Hash(L"Author2060") >(), L"A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 4u, Arr64< Hash(L"Author1719") >(), L"A Proposal to add Classes and Functions Required for Dynamic Library Load" >  >() },
    {  276u, RevList< Rev< 0u, Arr64< Hash(L"Author1732") >(), L"A Proposal to add Attribute [[visible]]" >  >() },
    {  277u, RevList< Rev< 0u, Arr64< Hash(L"Author298") >(), L"Title252" > , Rev< 1u, Arr64< Hash(L"Author920") >(), L"Title741" >  >() },
    {  278u, RevList< Rev< 0u, Arr64< Hash(L"Jon Kalb") >(), L"P0278r0 - volatile solutions" >  >() },
    {  279u, RevList< Rev< 0u, Arr64< Hash(L"Author959") >(), L"Read-Copy Update (RCU) for C++" > , Rev< 1u, Arr64< Hash(L"Author716") >(), L"Title578" >  >() },
    {  280u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Initialize unspecified aggregate members with direct list initialization" >  >() },
    {  281u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Remove comma elision in variadic function declarations" >  >() },
    {  282u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Const-preserving overloads for the strtox family of functions" >  >() },
    {  283u, RevList< Rev< 0u, Arr64< Hash(L"Author2043") >(), L"Title1582" > , Rev< 1u, Arr64< Hash(L"Author1670") >(), L"Title1299" > , Rev< 2u, Arr64< Hash(L"Author1797") >(), L"Standard and non-standard attributes" >  >() },
    {  284u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Unqualified enumerators in case labels" >  >() },
    {  285u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Using customization points to unify executors" >  >() },
    {  286u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"A networking library extension to support co_await-based coroutines" >  >() },
    {  287u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1188" >  >() },
    {  288u, RevList< Rev< 0u, Arr64< Hash(L"Author1220") >(), L"unique_function.pages" > , Rev< 1u, Arr64< Hash(L"Author1376") >(), L"unique_function.pages" > , Rev< 4u, Arr64< Hash(L"Ryan McDougall") >(), L"any_invocable" > , Rev< 5u, Arr64< Hash(L"Ryan McDougall") >(), L"any_invocable" > , Rev< 6u, Arr64< Hash(L"Matt Calabrese") >(), L"any_invocable" > , Rev< 7u, Arr64< Hash(L"Matt Calabrese") >(), L"any_invocable" > , Rev< 8u, Arr64< Hash(L"Matt Calabrese") >(), L"move_only_function" > , Rev< 9u, Arr64< Hash(L"Matt Calabrese") >(), L"move_only_function" >  >() },
    {  289u, RevList< Rev< 0u, Arr64< Hash(L"Author18") >(), L"Title16" >  >() },
    {  290u, RevList< Rev< 0u, Arr64< Hash(L"Anthony") >(), L"apply() for synchronized_value<T>" > , Rev< 1u, Arr64< Hash(L"Anthony") >(), L"apply() for synchronized_value<T>" > , Rev< 2u, Arr64< Hash(L"Anthony") >(), L"apply() for synchronized_value<T>" > , Rev< 3u, Arr64< Hash(L"Anthony") >(), L"apply() for synchronized_value<T>" > , Rev< 4u, Arr64< Hash(L"Anthony") >(), L"apply() for synchronized_value<T>" >  >() },
    {  292u, RevList< Rev< 0u, Arr64< Hash(L"Author1322") >(), L"constexpr if: A slightly different syntax" > , Rev< 1u, Arr64< Hash(L"Author1407") >(), L"constexpr if: A slightly different syntax" > , Rev< 2u, Arr64< Hash(L"Author165") >(), L"constexpr if: A slightly different syntax" >  >() },
    {  293u, RevList< Rev< 0u, Arr64< Hash(L"Author1386") >(), L"Title1077" >  >() },
    {  295u, RevList< Rev< 0u, Arr64< Hash(L"Author418") >(), L"Adopt Selected Library Fundamentals V2 Components for C++17" >  >() },
    {  296u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Forward progress guarantees: Base definitions" > , Rev< 1u, Arr64< Hash(L"Torvald Riegel") >(), L"Forward progress guarantees: Base definitions" > , Rev< 2u, Arr64< Hash(L"Torvald Riegel") >(), L"Forward progress guarantees: Base definitions" >  >() },
    {  298u, RevList< Rev< 0u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0298R0.docx" > , Rev< 1u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - D0298R1.docx" > , Rev< 2u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - P0298R2.docx" > , Rev< 3u, Arr64< Hash(L"Neil MacIntosh") >(), L"Microsoft Word - D0298R3" >  >() },
    {  299u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Forward progress guarantees for the Parallelism TS v2" > , Rev< 1u, Arr64< Hash(L"Torvald Riegel") >(), L"Forward progress guarantees for Parallelism TS features" >  >() },
    {  301u, RevList< Rev< 0u, Arr64< Hash(L"Author1917") >(), L"Wording for Unified Call Syntax" > , Rev< 1u, Arr64< Hash(L"Author720") >(), L"Wording for Unified Call Syntax (revision 1)" >  >() },
    {  302u, RevList< Rev< 0u, Arr64< Hash(L"Author1411") >(), L"Deprecating Allocator Support in std::function" > , Rev< 1u, Arr64< Hash(L"Author1144") >(), L"Removing Allocator Support in std::function (rev 1)" >  >() },
    {  303u, RevList< Rev< 0u, Arr64< Hash(L"Boris Fomitchev") >(), L"C++ International Standard" >  >() },
    {  304u, RevList< Rev< 0u, Arr64< Hash(L"Author904") >(), L"C++ Standard Library Issues Resolved Directly" > , Rev< 1u, Arr64< Hash(L"Author389") >(), L"C++ Standard Library Issues Resolved Directly In Issaquah" >  >() },
    {  305u, RevList< Rev< 0u, Arr64< Hash(L"Author1441") >(), L"If statement with initializer" > , Rev< 1u, Arr64< Hash(L"Author1134") >(), L"Selection statements with initializer" >  >() },
    {  306u, RevList< Rev< 0u, Arr64< Hash(L"Author900") >(), L"Comma omission and comma deletion" > , Rev< 1u, Arr64< Hash(L"Author195") >(), L"Comma omission and comma deletion" > , Rev< 2u, Arr64< Hash(L"Author969") >(), L"Comma omission and comma deletion" > , Rev< 3u, Arr64< Hash(L"Author1064") >(), L"Comma omission and comma deletion" > , Rev< 4u, Arr64< Hash(L"Author1899") >(), L"Comma omission and comma deletion" >  >() },
    {  307u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title713" > , Rev< 2u, Arr64< Hash(L"Tony Van") >(), L"Title856" >  >() },
    {  308u, RevList< Rev< 0u, Arr64< Hash(L"Author1646") >(), L"Title1275" >  >() },
    {  309u, RevList< Rev< 0u, Arr64< Hash(L"Daniele Bordes") >(), L"Title300" >  >() },
    {  310u, RevList< Rev< 0u, Arr64< Hash(L"Author1245") >(), L"Node allocators" >  >() },
    {  311u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"A Unified Vision for Manipulating Tuple-like Objects" >  >() },
    {  312u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Microsoft Word - Pointers to Members.docx" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Make Pointers to Members Callable" >  >() },
    {  313u, RevList< Rev< 0u, Arr64< Hash(L"Author2002") >(), L"Comparison operators in fold-expressions" >  >() },
    {  314u, RevList< Rev< 0u, Arr64< Hash(L"Author536") >(), L"Title435" >  >() },
    {  315u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title1636" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title787" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title55" > , Rev< 3u, Arr64< Hash(L"Louis Dionne") >(), L"Title985" > , Rev< 4u, Arr64< Hash(L"Louis Dionne") >(), L"Title1492" >  >() },
    {  316u, RevList< Rev< 0u, Arr64< Hash(L"Miro Knejp") >(), L"allocate_unique and allocator_delete" >  >() },
    {  317u, RevList< Rev< 0u, Arr64< Hash(L"Author1855") >(), L"Directory Entry Caching" > , Rev< 1u, Arr64< Hash(L"Author1076") >(), L"Directory Entry Caching" >  >() },
    {  318u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0318r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0318r1" >  >() },
    {  319u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0319r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0319r1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"p0319r2" >  >() },
    {  320u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0320r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0320r1" >  >() },
    {  322u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0322r0 : exception_list" >  >() },
    {  323u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0323r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0323r1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"p0323r2" > , Rev< 3u, Arr64< Hash(L"Make bad_expected_access") >(), L"p0323r3" > , Rev< 4u, Arr64< Hash(L"Vicente Botet") >(), L"p0323r4: std::expected" > , Rev< 5u, Arr64< Hash(L"Vicente Botet") >(), L"p0323r5: std::expected" > , Rev< 7u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" > , Rev< 8u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" > , Rev< 9u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" > , Rev< 10u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" > , Rev< 11u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" > , Rev< 12u, Arr64< Hash(L"Vicente Botet") >(), L"std::expected" >  >() },
    {  324u, RevList< Rev< 0u, Arr64< Hash(L"Author1183") >(), L"One Concept Definition Syntax" >  >() },
    {  325u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Propose to adopt make_array in C++17" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Propose to adopt make_array into the IS" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"to_array from LFTS with updates - HackMD" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"to_array from LFTS with updates - HackMD" > , Rev< 4u, Arr64< Hash(L"Zhihao Yuan") >(), L"to_array from LFTS with updates - HackMD" >  >() },
    {  326u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0326r0" >  >() },
    {  327u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0327r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0327r1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"p0327r2" > , Rev< 3u, Arr64< Hash(L"Vicente J") >(), L"p0327r3" >  >() },
    {  329u, RevList< Rev< 0u, Arr64< Hash(L"Author2215") >(), L"Title1695" > , Rev< 1u, Arr64< Hash(L"Author1446") >(), L"Title1123" > , Rev< 2u, Arr64< Hash(L"Author1203") >(), L"Title947" > , Rev< 3u, Arr64< Hash(L"Author871") >(), L"Title698" > , Rev< 4u, Arr64< Hash(L"Author31") >(), L"Title26" >  >() },
    {  330u, RevList< Rev< 0u, Arr64< Hash(L"Rein Halbersma") >(), L"Title225" > , Rev< 1u, Arr64< Hash(L"Rein Halbersma") >(), L"Title56" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffixes for ptrdiff_t and size_t" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffixes for ptrdiff_t and size_t" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffixes for ptrdiff_t and size_t" > , Rev< 6u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffixes for ptrdiff_t and size_t" > , Rev< 7u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffixes for ptrdiff_t and size_t" > , Rev< 8u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Literal Suffix for (signed) size_t" >  >() },
    {  331u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0331r0 : Motivation and Examples for Multidimensional Array" >  >() },
    {  332u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0332r0 : Relaxed Incomplete Multidimensional Array Type Declaration" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0332r1 : Relaxed Incomplete Multidimensional Array Type Declaration" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"p0332R2: Relaxed Incomplete Multidimensional Array Type Declaration" >  >() },
    {  333u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0333r0 : Improving Parallel Algorithm Exception Handling" >  >() },
    {  334u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0334r0 : Immutable Persistent Containers" >  >() },
    {  335u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Context Tokens for Parallel Algorithms" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"Context Tokens for Parallel Algorithms" >  >() },
    {  336u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Better Names for Parallel Execution Policies in C++17" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"Better Names for Parallel Execution Policies in C++17" >  >() },
    {  337u, RevList< Rev< 0u, Arr64< Hash(L"Author408") >(), L"P0337r0 | Delete operator= for polymorphic_allocator" >  >() },
    {  338u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0338r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0338r1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"p0338r2" > , Rev< 3u, Arr64< Hash(L"Vicente J") >(), L"p0338r3" >  >() },
    {  339u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<void> as a vocabulary type" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" > , Rev< 2u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" > , Rev< 3u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" > , Rev< 4u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" > , Rev< 5u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" > , Rev< 6u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<> as a vocabulary type" >  >() },
    {  340u, RevList< Rev< 0u, Arr64< Hash(L"Author4") >(), L"P0340R0" > , Rev< 1u, Arr64< Hash(L"Author823") >(), L"Making std::underlying_type SFINAE-friendly" > , Rev< 2u, Arr64< Hash(L"Author1506") >(), L"D0340R2: Making std::underlying_type SFINAE-friendly" > , Rev< 3u, Arr64< Hash(L"Author10") >(), L"Making std::underlying_type SFINAE-friendly" >  >() },
    {  341u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Leveraging parameter packs outside of templates" >  >() },
    {  342u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Timing barriers" > , Rev< 1u, Arr64< Hash(L"Mike Spertus") >(), L"Title1502" > , Rev< 2u, Arr64< Hash(L"Gonzalo Brito") >(), L"pessimize_hint" >  >() },
    {  343u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0343r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0343r1" >  >() },
    {  345u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Allowing any unsigned integral type as parameter type for literal operators" >  >() },
    {  346u, RevList< Rev< 0u, Arr64< Hash(L"Author91") >(), L"A <random> Nomenclature Tweak" > , Rev< 1u, Arr64< Hash(L"Author2148") >(), L"A <random> Nomenclature Tweak" >  >() },
    {  347u, RevList< Rev< 0u, Arr64< Hash(L"R. Tim") >(), L"P0347R0" > , Rev< 1u, Arr64< Hash(L"R. Tim") >(), L"Simplifying simple uses of <random>" >  >() },
    {  348u, RevList< Rev< 0u, Arr64< Hash(L"Andrzej Krzemienski") >(), L"Validity testing issues" >  >() },
    {  349u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Assumptions about the size of datapar [P0349R0]" >  >() },
    {  350u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Integrating datapar with parallel algorithms and executors [P0350R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Integrating simd with parallel algorithms [P0350R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Integrating simd with parallel algorithms [P0350R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Integrating simd with parallel algorithms [P0350R3]" > , Rev< 4u, Arr64< Hash(L"Ma hias") >(), L"Integrating simd with parallel algorithms [P0350R4]" >  >() },
    {  352u, RevList< Rev< 0u, Arr64< Hash(L"Author1733") >(), L"Title1339" > , Rev< 1u, Arr64< Hash(L"Author1394") >(), L"Title1083" >  >() },
    {  353u, RevList< Rev< 0u, Arr64< Hash(L"Author1605") >(), L"Unicode Encoding conversions" > , Rev< 1u, Arr64< Hash(L"Author1189") >(), L"Unicode Encoding conversions" >  >() },
    {  354u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title924" >  >() },
    {  355u, RevList< Rev< 0u, Arr64< Hash(L"Author1815") >(), L"Extending <chrono> to Calendars and Time Zones" > , Rev< 1u, Arr64< Hash(L"Author2070") >(), L"Extending <chrono> to Calendars and Time Zones" > , Rev< 2u, Arr64< Hash(L"Author1345") >(), L"Extending <chrono> to Calendars and Time Zones" > , Rev< 3u, Arr64< Hash(L"Author1002") >(), L"Extending <chrono> to Calendars and Time Zones" > , Rev< 4u, Arr64< Hash(L"Author316") >(), L"Extending <chrono> to Calendars and Time Zones" > , Rev< 5u, Arr64< Hash(L"Author1531") >(), L"Extending <chrono> to Calendars and Time Zones" >  >() },
    {  356u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" > , Rev< 4u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" > , Rev< 5u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Simplified partial function application" >  >() },
    {  357u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"'reference_wrapper' for incomplete types" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"'reference_wrapper' for incomplete types" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"'reference_wrapper' for incomplete types" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"'reference_wrapper' for incomplete types" >  >() },
    {  358u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixes for 'not_fn'" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixes for 'not_fn'" >  >() },
    {  359u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title588" >  >() },
    {  360u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title916" >  >() },
    {  361u, RevList< Rev< 0u, Arr64< Hash(L"Hartmut Kaiser") >(), L"Title1424" > , Rev< 1u, Arr64< Hash(L"Hartmut Kaiser") >(), L"Title1417" >  >() },
    {  362u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title796" >  >() },
    {  363u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1096" >  >() },
    {  364u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1200" >  >() },
    {  365u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1558" >  >() },
    {  366u, RevList< Rev< 0u, Arr64< Hash(L"Victor Luchangco") >(), L"Title1398" >  >() },
    {  367u, RevList< Rev< 0u, Arr64< Hash(L"Author1688") >(), L"Title1310" >  >() },
    {  369u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1221" >  >() },
    {  370u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Design Updates Omnibus" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Design Updates Omnibus" > , Rev< 2u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Design Updates Omnibus" > , Rev< 3u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Design Updates Omnibus" >  >() },
    {  371u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Temporarily deprecate memory_order_consume" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Temporarily discourage memory_order_consume" >  >() },
    {  372u, RevList< Rev< 0u, Arr64< Hash(L"Author1224") >(), L"P0372R0 - A type for utf-8 data" >  >() },
    {  373u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title899" >  >() },
    {  374u, RevList< Rev< 0u, Arr64< Hash(L"Author1045") >(), L"Title840" >  >() },
    {  375u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title803" >  >() },
    {  376u, RevList< Rev< 0u, Arr64< Hash(L"Author635") >(), L"A Single Generalization of std::invoke, std::apply, and std::visit" >  >() },
    {  377u, RevList< Rev< 0u, Arr64< Hash(L"Author1058") >(), L"std::integral_constant with a Deduced Value Type" >  >() },
    {  379u, RevList< Rev< 0u, Arr64< Hash(L"Author405") >(), L"Why a joining thread from P0206 is a Bad Idea" >  >() },
    {  380u, RevList< Rev< 0u, Arr64< Hash(L"Author380") >(), L"Title323" > , Rev< 1u, Arr64< Hash(L"Author696") >(), L"Title559" >  >() },
    {  381u, RevList< Rev< 0u, Arr64< Hash(L"Author1949") >(), L"Title1511" > , Rev< 1u, Arr64< Hash(L"Author859") >(), L"Title683" >  >() },
    {  382u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Comments on P0119: Overload sets as function arguments" >  >() },
    {  384u, RevList< Rev< 0u, Arr64< Hash(L"Author1702") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  385u, RevList< Rev< 0u, Arr64< Hash(L"Matus") >(), L"Title1697" > , Rev< 1u, Arr64< Hash(L"Axel Naumann") >(), L"Title1378" > , Rev< 2u, Arr64< Hash(L"Axel Naumann") >(), L"Title932" >  >() },
    {  386u, RevList< Rev< 0u, Arr64< Hash(L"Author169") >(), L"Title146" > , Rev< 2u, Arr64< Hash(L"Author669") >(), L"Title541" >  >() },
    {  387u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Memory Model Issues for Concurrent Data Structures" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Memory Model Issues for Concurrent Data Structures" >  >() },
    {  388u, RevList< Rev< 0u, Arr64< Hash(L"Author2172") >(), L"Proposal: conversions to arrays of unknown bound" > , Rev< 1u, Arr64< Hash(L"Author1622") >(), L"Proposal: conversions to arrays of unknown bound" > , Rev< 2u, Arr64< Hash(L"Author570") >(), L"Proposal: conversions to arrays of unknown bound" > , Rev< 3u, Arr64< Hash(L"Author832") >(), L"Proposal: conversions to arrays of unknown bound" > , Rev< 4u, Arr64< Hash(L"Author2130") >(), L"Proposal: conversions to arrays of unknown bound" >  >() },
    {  389u, RevList< Rev< 0u, Arr64< Hash(L"Author1554") >(), L"Proposal: template keyword in unqualified-ids" >  >() },
    {  390u, RevList< Rev< 0u, Arr64< Hash(L"Nickolas Pokhylets") >(), L"ISO/IEC JTC1/SC22/WG21p0390r0" >  >() },
    {  391u, RevList< Rev< 0u, Arr64< Hash(L"Author2182") >(), L"Introducing the term \"templated entity\"" >  >() },
    {  392u, RevList< Rev< 0u, Arr64< Hash(L"Author979") >(), L"Microsoft Word - P0392_stringview4path_160623.docx" >  >() },
    {  393u, RevList< Rev< 3u, Arr64< Hash(L"Tony Van") >(), L"Variant: relational operators." >  >() },
    {  394u, RevList< Rev< 4u, Arr64< Hash(L"JF Bastien") >(), L"Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling" >  >() },
    {  396u, RevList< Rev< 0u, Arr64< Hash(L"Author1071") >(), L"C++ Concepts Active Issues List (Snapshot of Revision 4)" >  >() },
    {  397u, RevList< Rev< 0u, Arr64< Hash(L"Author1046") >(), L"C++ Standard Library Priority 1 Issues Resolved Directly In Oulu" >  >() },
    {  398u, RevList< Rev< 0u, Arr64< Hash(L"Author673") >(), L"Core issue 1518: Explicit default constructors and copy-list-initialization" >  >() },
    {  399u, RevList< Rev< 0u, Arr64< Hash(L"Author1558") >(), L"Networking TS & Threadpool" >  >() },
    {  400u, RevList< Rev< 0u, Arr64< Hash(L"Author1330") >(), L"P0400R0 2016-06-25" >  >() },
    {  401u, RevList< Rev< 0u, Arr64< Hash(L"Author510") >(), L"Extensions to the Allocator interface" > , Rev< 1u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" > , Rev< 2u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" > , Rev< 3u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" > , Rev< 4u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" > , Rev< 5u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" > , Rev< 6u, Arr64< Hash(L"Jonathan Wakely") >(), L"Providing size feedback in the Allocator interface" >  >() },
    {  403u, RevList< Rev< 0u, Arr64< Hash(L"Author1234") >(), L"Literal suffixes for basic_string_view" > , Rev< 1u, Arr64< Hash(L"Author795") >(), L"Literal suffixes for basic_string_view" >  >() },
    {  404u, RevList< Rev< 0u, Arr64< Hash(L"Hubert Tong") >(), L"Matching Types: 404 Syntax Not found" >  >() },
    {  405u, RevList< Rev< 0u, Arr64< Hash(L"Author578") >(), L"Wording for Networking TS changes discussed in Kona" >  >() },
    {  406u, RevList< Rev< 1u, Arr64< Hash(L"Hal Finkel") >(), L"Intrusive Containers" >  >() },
    {  407u, RevList< Rev< 0u, Arr64< Hash(L"Author1325") >(), L"Title1022" > , Rev< 1u, Arr64< Hash(L"Author1427") >(), L"Title1106" > , Rev< 2u, Arr64< Hash(L"Author525") >(), L"Title430" >  >() },
    {  408u, RevList< Rev< 0u, Arr64< Hash(L"Author313") >(), L"Title265" > , Rev< 1u, Arr64< Hash(L"Author1846") >(), L"Title1431" > , Rev< 2u, Arr64< Hash(L"Author52") >(), L"Title52" > , Rev< 3u, Arr64< Hash(L"Author922") >(), L"Title742" > , Rev< 4u, Arr64< Hash(L"Author2146") >(), L"Title1654" > , Rev< 5u, Arr64< Hash(L"Author1522") >(), L"Title1184" > , Rev< 6u, Arr64< Hash(L"Author1408") >(), L"Title1095" > , Rev< 7u, Arr64< Hash(L"Author352") >(), L"Title298" >  >() },
    {  409u, RevList< Rev< 0u, Arr64< Hash(L"Author2103") >(), L"Allow lambda capture [=, this]" > , Rev< 1u, Arr64< Hash(L"Author1819") >(), L"Allow lambda capture [=, this]" > , Rev< 2u, Arr64< Hash(L"Author275") >(), L"Allow lambda capture [=, this]" >  >() },
    {  411u, RevList< Rev< 0u, Arr64< Hash(L"Author1912") >(), L"Separating Library Requirements and Preconditions" >  >() },
    {  412u, RevList< Rev< 0u, Arr64< Hash(L"Mikhail Maltsev") >(), L"Benchmarking Primitives" >  >() },
    {  413u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Updating Parallel Execution Policy Names in the Parallelism TS" >  >() },
    {  414u, RevList< Rev< 0u, Arr64< Hash(L"Author1272") >(), L"Merging shared_ptr changes from Library Fundamentals to C++17" > , Rev< 1u, Arr64< Hash(L"Author954") >(), L"Merging shared_ptr changes from Library Fundamentals to C++17" > , Rev< 2u, Arr64< Hash(L"Author396") >(), L"Merging shared_ptr changes from Library Fundamentals to C++17" >  >() },
    {  415u, RevList< Rev< 0u, Arr64< Hash(L"Author152") >(), L"Constexpr for std::complex" > , Rev< 1u, Arr64< Hash(L"Author1585") >(), L"Constexpr for std::complex" >  >() },
    {  416u, RevList< Rev< 0u, Arr64< Hash(L"Author2028") >(), L"dot P0416" > , Rev< 1u, Arr64< Hash(L"Author825") >(), L"Title657" >  >() },
    {  417u, RevList< Rev< 0u, Arr64< Hash(L"Author1075") >(), L"ISO 10646:2014" > , Rev< 1u, Arr64< Hash(L"Author339") >(), L"ISO 10646:2014" >  >() },
    {  418u, RevList< Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"P0418r1: Fail or succeed: there is no atomic lattice" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"P0418r2: Fail or succeed: there is no atomic lattice" >  >() },
    {  421u, RevList< Rev< 0u, Arr64< Hash(L"Mariusz Moczala") >(), L"Title401" >  >() },
    {  422u, RevList< Rev< 0u, Arr64< Hash(L"Author2033") >(), L"Out-of-Thin-Air Execution is Vacuous" >  >() },
    {  423u, RevList< Rev< 0u, Arr64< Hash(L"Author1711") >(), L"Variable templates for Networking TS traits" >  >() },
    {  424u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title450" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title47" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title527" >  >() },
    {  425u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title1225" >  >() },
    {  426u, RevList< Rev< 0u, Arr64< Hash(L"Author1600") >(), L"Constexpr for std::char_traits" > , Rev< 1u, Arr64< Hash(L"Author1181") >(), L"Constexpr for std::char_traits" >  >() },
    {  428u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title567" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title1150" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title858" >  >() },
    {  429u, RevList< Rev< 0u, Arr64< Hash(L"Author1588") >(), L"Title1232" > , Rev< 1u, Arr64< Hash(L"Author1674") >(), L"Title1300" > , Rev< 2u, Arr64< Hash(L"Author889") >(), L"Title718" > , Rev< 3u, Arr64< Hash(L"Author718") >(), L"Title580" > , Rev< 4u, Arr64< Hash(L"Author1484") >(), L"A Standard flatmap" > , Rev< 5u, Arr64< Hash(L"Author1817") >(), L"A Standard flatmap" > , Rev< 6u, Arr64< Hash(L"Author257") >(), L"A Standard flatmap" > , Rev< 7u, Arr64< Hash(L"Author454") >(), L"A Standard flatmap" > , Rev< 8u, Arr64< Hash(L"Author636") >(), L"A Standard flatmap" > , Rev< 9u, Arr64< Hash(L"Author1983") >(), L"A Standard flatmap" >  >() },
    {  430u, RevList< Rev< 0u, Arr64< Hash(L"Jason Liu") >(), L"Microsoft Word - open LWG issue (Autosaved).docx" > , Rev< 1u, Arr64< Hash(L"Jason Liu") >(), L"Microsoft Word - P0430R1.docx" > , Rev< 2u, Arr64< Hash(L"Jason Liu") >(), L"Title1208" >  >() },
    {  431u, RevList< Rev< 0u, Arr64< Hash(L"Hyman Rosen") >(), L"ISO/IEC JTC1/SC22/WG21p0431r0" >  >() },
    {  432u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title857" >  >() },
    {  433u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" >  >() },
    {  434u, RevList< Rev< 0u, Arr64< Hash(L"BRETT SEARLES") >(), L"P0434 Portable Interrupt Library" >  >() },
    {  435u, RevList< Rev< 0u, Arr64< Hash(L"Author524") >(), L"Resolving LWG Issues re common_type" > , Rev< 1u, Arr64< Hash(L"Author74") >(), L"Resolving LWG Issues re common_type" >  >() },
    {  436u, RevList< Rev< 0u, Arr64< Hash(L"Author1941") >(), L"An Extensible Approach to Obtaining Selected Operators" > , Rev< 1u, Arr64< Hash(L"Author992") >(), L"An Extensible Approach to Obtaining Selected Operators" >  >() },
    {  437u, RevList< Rev< 0u, Arr64< Hash(L"Author17") >(), L"Numeric Traits for the Next Standard Library" > , Rev< 1u, Arr64< Hash(L"Author151") >(), L"Numeric Traits for the Standard Library" >  >() },
    {  438u, RevList< Rev< 0u, Arr64< Hash(L"Author1813") >(), L"Toward a <random> Technical Specification" >  >() },
    {  439u, RevList< Rev< 0u, Arr64< Hash(L"Author108") >(), L"Make std::memory_order a scoped enumeration" >  >() },
    {  440u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0440r0 : Floating Point Atomic View" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0440r1 : Floating Point Atomic View" >  >() },
    {  441u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Ranges: Merging Writable and MoveWritable" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Ranges: Merging Writable and MoveWritable" >  >() },
    {  443u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"Title517" > , Rev< 1u, Arr64< Hash(L"Jared Hoberock") >(), L"Title655" > , Rev< 2u, Arr64< Hash(L"Jared Hoberock") >(), L"Title90" > , Rev< 3u, Arr64< Hash(L"Jared Hoberock") >(), L"Title692" > , Rev< 4u, Arr64< Hash(L"Jared Hoberock") >(), L"Title882" > , Rev< 5u, Arr64< Hash(L"Jared Hoberock") >(), L"Title30" > , Rev< 9u, Arr64< Hash(L"Jared Hoberock") >(), L"Title734" > , Rev< 10u, Arr64< Hash(L"Jared Hoberock") >(), L"Title820" > , Rev< 11u, Arr64< Hash(L"Jared Hoberock") >(), L"A Unified Executors Proposal for C++ | P0443R11" > , Rev< 12u, Arr64< Hash(L"Jared Hoberock") >(), L"A Unified Executors Proposal for C++ | P0443R12" > , Rev< 13u, Arr64< Hash(L"Jared Hoberock") >(), L"A Unified Executors Proposal for C++ | P0443R13" > , Rev< 14u, Arr64< Hash(L"Jared Hoberock") >(), L"A Unified Executors Proposal for C++ | P0443R14" >  >() },
    {  444u, RevList< Rev< 0u, Arr64< Hash(L"Nat Goodspeed") >(), L"P0444" >  >() },
    {  445u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1355" >  >() },
    {  446u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title271" >  >() },
    {  447u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 1u, Arr64< Hash(L"Author263") >(), L"Title222" > , Rev< 2u, Arr64< Hash(L"Author989") >(), L"Title800" > , Rev< 3u, Arr64< Hash(L"Author1959") >(), L"Title1524" > , Rev< 4u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 8u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 9u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 10u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 11u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 12u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 13u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 14u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::colony to the standard library" > , Rev< 15u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 16u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 17u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 18u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 19u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 20u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 21u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 22u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 23u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 24u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 25u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 26u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 27u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" > , Rev< 28u, Arr64< Hash(L"Matthew Bentley") >(), L"Introduction of std::hive to the standard library" >  >() },
    {  448u, RevList< Rev< 0u, Arr64< Hash(L"Author506") >(), L"Title417" > , Rev< 1u, Arr64< Hash(L"Author2041") >(), L"Title1578" > , Rev< 2u, Arr64< Hash(L"Author9") >(), L"Title12" > , Rev< 3u, Arr64< Hash(L"Author760") >(), L"Title617" > , Rev< 4u, Arr64< Hash(L"Author1271") >(), L"Title984" >  >() },
    {  451u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0451r0: Future-Proofing Parallel Algorithms Exception Handling" >  >() },
    {  452u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0452r0: Binary-Binary transform_reduce(): The Missing Overload" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0452r1: Unifying <numeric> Parallel Algorithms" >  >() },
    {  454u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0454r0: Wording for a Minimal mdspan<>" >  >() },
    {  457u, RevList< Rev< 0u, Arr64< Hash(L"Mikhail Maltsev") >(), L"String Prefix and Suffix Checking" > , Rev< 1u, Arr64< Hash(L"Mikhail Maltsev") >(), L"String Prefix and Suffix Checking" > , Rev< 2u, Arr64< Hash(L"Mikhail Maltsev") >(), L"String Prefix and Suffix Checking" >  >() },
    {  458u, RevList< Rev< 0u, Arr64< Hash(L"Mikhail Maltsev") >(), L"Checking for Existence of an Element in Associative Containers" > , Rev< 1u, Arr64< Hash(L"Mikhail Maltsev") >(), L"Checking for Existence of an Element in Associative Containers" > , Rev< 2u, Arr64< Hash(L"Mikhail Maltsev") >(), L"Checking for Existence of an Element in Associative Containers" >  >() },
    {  459u, RevList< Rev< 0u, Arr64< Hash(L"Author1432") >(), L"Working Draft, C++ Extensions for Ranges" >  >() },
    {  460u, RevList< Rev< 0u, Arr64< Hash(L"Sean Middleditch") >(), L"Title1240" >  >() },
    {  461u, RevList< Rev< 0u, Arr64< Hash(L"Author1933") >(), L"Title1494" > , Rev< 1u, Arr64< Hash(L"Author1618") >(), L"Title1254" > , Rev< 2u, Arr64< Hash(L"Author1056") >(), L"Title847" >  >() },
    {  462u, RevList< Rev< 0u, Arr64< Hash(L"Author1340") >(), L"Title1031" > , Rev< 1u, Arr64< Hash(L"Author1944") >(), L"Title1506" >  >() },
    {  463u, RevList< Rev< 0u, Arr64< Hash(L"Author1512") >(), L"endian" > , Rev< 1u, Arr64< Hash(L"Author1477") >(), L"endian" >  >() },
    {  464u, RevList< Rev< 0u, Arr64< Hash(L"Author403") >(), L"Title344" > , Rev< 1u, Arr64< Hash(L"Tony van") >(), L"Revisiting the meaning of foo(ConceptName,ConceptName)" > , Rev< 2u, Arr64< Hash(L"Tony van") >(), L"Revisiting the meaning of foo(ConceptName,ConceptName)" >  >() },
    {  465u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title943" >  >() },
    {  466u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title23" > , Rev< 1u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1303" > , Rev< 2u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title656" > , Rev< 3u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1383" > , Rev< 4u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title198" > , Rev< 5u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1172" >  >() },
    {  467u, RevList< Rev< 0u, Arr64< Hash(L"Author527") >(), L"Iterator Concerns for Parallel Algorithms" > , Rev< 1u, Arr64< Hash(L"Author1701") >(), L"Iterator Concerns for Parallel Algorithms" > , Rev< 2u, Arr64< Hash(L"Author993") >(), L"Iterator Concerns for Parallel Algorithms" >  >() },
    {  468u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"P0468R0 : An Intrusive Smart Pointer" > , Rev< 1u, Arr64< Hash(L"Isabella Muerte") >(), L"An Intrusive Smart Pointer" >  >() },
    {  469u, RevList< Rev< 0u, Arr64< Hash(L"R. Tim") >(), L"Sample in place" >  >() },
    {  471u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title1331" >  >() },
    {  472u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title1691" > , Rev< 1u, Arr64< Hash(L"David Sankel") >(), L"P0472R1 - Put std::monostate in <utility>" > , Rev< 2u, Arr64< Hash(L"David Sankel") >(), L"P0472R2 - Put std::monostate in <utility>" > , Rev< 3u, Arr64< Hash(L"David Sankel") >(), L"P0472R3 - Put std::monostate in <utility>" >  >() },
    {  473u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title342" >  >() },
    {  474u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"Comparison in C++: Basic Facilities" >  >() },
    {  475u, RevList< Rev< 0u, Arr64< Hash(L"Author179") >(), L"LWG 2511: guaranteed copy elision for piecewise construction" > , Rev< 1u, Arr64< Hash(L"Author1038") >(), L"LWG 2511: guaranteed copy elision for piecewise construction (rev. 1)" >  >() },
    {  476u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"P0476r0: Bit-casting object representations" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"P0476r1: Bit-casting object representations" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"p0476r2: Bit-casting object representations" >  >() },
    {  477u, RevList< Rev< 0u, Arr64< Hash(L"Author1110") >(), L"std::monostate_function<>" >  >() },
    {  478u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Manganelli") >(), L"Title1652" >  >() },
    {  479u, RevList< Rev< 0u, Arr64< Hash(L"Clay Trychta") >(), L"Attributes for Likely and Unlikely Branches" > , Rev< 1u, Arr64< Hash(L"Clay Trychta") >(), L"Attributes for Likely and Unlikely Statements" > , Rev< 2u, Arr64< Hash(L"Clay Trychta") >(), L"Attributes for Likely and Unlikely Statements" > , Rev< 4u, Arr64< Hash(L"Clay Trychta") >(), L"Proposed wording for likely and unlikely attributes (Revision 4)" > , Rev< 5u, Arr64< Hash(L"Clay Trychta") >(), L"Proposed wording for likely and unlikely attributes (Revision 5)" >  >() },
    {  480u, RevList< Rev< 0u, Arr64< Hash(L"Author1341") >(), L"Explicit type checking with structured bindings" > , Rev< 1u, Arr64< Hash(L"Author2071") >(), L"Structured bindings with explicit types" >  >() },
    {  481u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title637" >  >() },
    {  482u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 1)" > , Rev< 2u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 2)" > , Rev< 3u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 3)" > , Rev< 4u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 4)" > , Rev< 5u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 5)" > , Rev< 6u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t: A type for UTF-8 characters and strings (Revision 6)" >  >() },
    {  483u, RevList< Rev< 0u, Arr64< Hash(L"Patrice Roy") >(), L"Title1438" >  >() },
    {  484u, RevList< Rev< 0u, Arr64< Hash(L"Patrice Roy") >(), L"Title439" > , Rev< 1u, Arr64< Hash(L"Patrice Roy") >(), L"Title1281" >  >() },
    {  485u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Manganelli") >(), L"Title1234" >  >() },
    {  486u, RevList< Rev< 0u, Arr64< Hash(L"Ildus Nezametdinov") >(), L"Title1108" >  >() },
    {  487u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Fixing operator>>(basic_istream&, CharT*) (LWG 2499)" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Fixing operator>>(basic_istream&, CharT*) (LWG 2499)" >  >() },
    {  488u, RevList< Rev< 0u, Arr64< Hash(L"Author104") >(), L"Title95" >  >() },
    {  489u, RevList< Rev< 0u, Arr64< Hash(L"Author2023") >(), L"Title1565" >  >() },
    {  490u, RevList< Rev< 0u, Arr64< Hash(L"Author1308") >(), L"Core language changes addressing National Body comments for CD C++17" >  >() },
    {  492u, RevList< Rev< 0u, Arr64< Hash(L"Author2134") >(), L"Filesystem NB Comments C++17" > , Rev< 1u, Arr64< Hash(L"Author651") >(), L"Filesystem NB Comments C++17" > , Rev< 2u, Arr64< Hash(L"Author2188") >(), L"Filesystem NB Comments C++17" >  >() },
    {  493u, RevList< Rev< 0u, Arr64< Hash(L"Al Grant") >(), L"Title1231" > , Rev< 1u, Arr64< Hash(L"Al Grant") >(), L"Title1009" > , Rev< 2u, Arr64< Hash(L"Al Grant") >(), L"Title1512" > , Rev< 3u, Arr64< Hash(L"Al Grant") >(), L"Atomic minimum/maximum" > , Rev< 4u, Arr64< Hash(L"Al Grant") >(), L"Atomic minimum/maximum" > , Rev< 5u, Arr64< Hash(L"Al Grant") >(), L"Atomic minimum/maximum" >  >() },
    {  494u, RevList< Rev< 0u, Arr64< Hash(L"Ildus Nezametdinov") >(), L"Title27" >  >() },
    {  495u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"Concurrency Safety in C++ Data Structures" >  >() },
    {  497u, RevList< Rev< 0u, Arr64< Hash(L"Author1597") >(), L"Fixes to shared_ptr support for arrays" >  >() },
    {  500u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title545" >  >() },
    {  501u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title896" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1159" > , Rev< 2u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title753" > , Rev< 3u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title484" >  >() },
    {  502u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"P0502r0: Throwing out of a parallel algorithm terminatesbut how?" >  >() },
    {  503u, RevList< Rev< 0u, Arr64< Hash(L"Author1326") >(), L"Correcting library usage of \"literal type\"" >  >() },
    {  504u, RevList< Rev< 0u, Arr64< Hash(L"Author1460") >(), L"Revisiting in-place tag types for any/optional/variant" >  >() },
    {  505u, RevList< Rev< 0u, Arr64< Hash(L"Author1825") >(), L"Wording for GB 50" >  >() },
    {  506u, RevList< Rev< 0u, Arr64< Hash(L"Author1761") >(), L"Title1367" > , Rev< 1u, Arr64< Hash(L"Author1999") >(), L"Title1546" > , Rev< 2u, Arr64< Hash(L"Author1179") >(), L"Title929" >  >() },
    {  507u, RevList< Rev< 0u, Arr64< Hash(L"Author38") >(), L"Core Issue 1343: Sequencing of non-class initialization" >  >() },
    {  508u, RevList< Rev< 0u, Arr64< Hash(L"Author1885") >(), L"Wording for GB 58" >  >() },
    {  509u, RevList< Rev< 1u, Arr64< Hash(L"Author1610") >(), L"P0509R1" >  >() },
    {  510u, RevList< Rev< 0u, Arr64< Hash(L"Author294") >(), L"Disallowing references, incomplete types, arrays, and Empty Variants" >  >() },
    {  511u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Deduction guide for" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Deduction guide for std::array" >  >() },
    {  512u, RevList< Rev< 0u, Arr64< Hash(L"Author1150") >(), L"Title914" >  >() },
    {  513u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1277" >  >() },
    {  514u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"D0514R0" > , Rev< 1u, Arr64< Hash(L"Olivier Giroux") >(), L"D0514R1" > , Rev< 2u, Arr64< Hash(L"Olivier Giroux") >(), L"D0514R1" > , Rev< 3u, Arr64< Hash(L"Olivier Giroux") >(), L"D0514R1" > , Rev< 4u, Arr64< Hash(L"Olivier Giroux") >(), L"D0514R1" >  >() },
    {  515u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title8" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title1446" > , Rev< 2u, Arr64< Hash(L"Herb Sutter") >(), L"Title571" > , Rev< 3u, Arr64< Hash(L"Herb Sutter") >(), L"Title1012" >  >() },
    {  516u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0516r0: Clarify That shared_futures Copy Operations have Wide Contracts" >  >() },
    {  517u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0517r0: Make future_error Constructible" >  >() },
    {  518u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"p0518r0: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11" > , Rev< 1u, Arr64< Hash(L"David S") >(), L"P0518r1: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11" >  >() },
    {  519u, RevList< Rev< 0u, Arr64< Hash(L"Author1502") >(), L"Core \"ready\" Issues" >  >() },
    {  520u, RevList< Rev< 0u, Arr64< Hash(L"Author249") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  521u, RevList< Rev< 0u, Arr64< Hash(L"Stephan T") >(), L"P0521r0: Proposed Resolution for CA 14 (shared_ptr use_count/unique)" >  >() },
    {  522u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"DR: Matching of template template-arguments excludes compatible templates" >  >() },
    {  523u, RevList< Rev< 0u, Arr64< Hash(L"Detlef Vollmann") >(), L"Wording for CH 10: Complexity of parallel algorithms" > , Rev< 1u, Arr64< Hash(L"Detlef Vollmann") >(), L"Wording for CH 10: Complexity of parallel algorithms" >  >() },
    {  527u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Untitled Document.md" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"Title1419" >  >() },
    {  528u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"P0528r0: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"p0528r1: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"p0528R2: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 3u, Arr64< Hash(L"JF Bastien") >(), L"The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" >  >() },
    {  529u, RevList< Rev< 0u, Arr64< Hash(L"Author758") >(), L"Title615" >  >() },
    {  532u, RevList< Rev< 0u, Arr64< Hash(L"Author86") >(), L"Microsoft Word - P0532R0_onlaunder_170114.docx" >  >() },
    {  533u, RevList< Rev< 0u, Arr64< Hash(L"Author1323") >(), L"Title1020" > , Rev< 1u, Arr64< Hash(L"Author1435") >(), L"Title1115" > , Rev< 2u, Arr64< Hash(L"Author286") >(), L"Title239" > , Rev< 3u, Arr64< Hash(L"Author1714") >(), L"Title1324" > , Rev< 4u, Arr64< Hash(L"Author879") >(), L"Title706" > , Rev< 5u, Arr64< Hash(L"Author1523") >(), L"Title1185" > , Rev< 6u, Arr64< Hash(L"Author793") >(), L"Title642" > , Rev< 7u, Arr64< Hash(L"Author1989") >(), L"Title1540" > , Rev< 8u, Arr64< Hash(L"Author299") >(), L"Title253" > , Rev< 9u, Arr64< Hash(L"Author915") >(), L"Title736" >  >() },
    {  534u, RevList< Rev< 0u, Arr64< Hash(L"Oliver Kowalke") >(), L"call/cc: A low-level API for stackful context switching" > , Rev< 1u, Arr64< Hash(L"Oliver Kowalke") >(), L"call/cc: A low-level API for stackful context switching" > , Rev< 2u, Arr64< Hash(L"Oliver Kowalke") >(), L"call/cc: A low-level API for stackful context switching" > , Rev< 3u, Arr64< Hash(L"Oliver Kowalke") >(), L"call/cc: A low-level API for stackful context switching" >  >() },
    {  535u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Generalized Unpacking and Parameter Pack Slicing" >  >() },
    {  536u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Implicit Return Type and Allowing Anonymous Types as Return Values" >  >() },
    {  537u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Allow Attributes on Template Explicit Instantiations" >  >() },
    {  538u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"A Qualified Replacement for #pragma once" >  >() },
    {  539u, RevList< Rev< 0u, Arr64< Hash(L"Author2082") >(), L"A Proposal to add wide_int Class" > , Rev< 1u, Arr64< Hash(L"Author1620") >(), L"A Proposal to add wide_int Class" > , Rev< 2u, Arr64< Hash(L"Author116") >(), L"A Proposal to add wide_int Class" > , Rev< 3u, Arr64< Hash(L"Author1431") >(), L"A Proposal to add wide_int Class" > , Rev< 4u, Arr64< Hash(L"Author1807") >(), L"A Proposal to add wide_int Class" > , Rev< 5u, Arr64< Hash(L"Author816") >(), L"A Proposal to add wideint Template Class" >  >() },
    {  540u, RevList< Rev< 0u, Arr64< Hash(L"Author1084") >(), L"A Proposal to Add split/join of string/string_view to the Standard Library" > , Rev< 1u, Arr64< Hash(L"Author2062") >(), L"A Proposal to Add split/join of string/string_view to the Standard Library" >  >() },
    {  541u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Ranges TS: Post-Increment on Input and Output Iterators" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Ranges TS: Post-Increment on Input and Output Iterators" >  >() },
    {  542u, RevList< Rev< 0u, Arr64< Hash(L"Author2006") >(), L"Support for contract based programming in C++" > , Rev< 1u, Arr64< Hash(L"Author544") >(), L"Support for contract based programming in C++" > , Rev< 2u, Arr64< Hash(L"Author600") >(), L"Support for contract based programming in C++" > , Rev< 3u, Arr64< Hash(L"Author1586") >(), L"Support for contract based programming in C++" > , Rev< 4u, Arr64< Hash(L"Author463") >(), L"Support for contract based programming in C++" > , Rev< 5u, Arr64< Hash(L"Author441") >(), L"Support for contract based programming in C++" >  >() },
    {  543u, RevList< Rev< 0u, Arr64< Hash(L"Author779") >(), L"Saturation arithmetic" > , Rev< 1u, Arr64< Hash(L"Author1991") >(), L"Saturation arithmetic" > , Rev< 2u, Arr64< Hash(L"Author1003") >(), L"Saturation arithmetic" > , Rev< 3u, Arr64< Hash(L"Author2015") >(), L"Saturation arithmetic" >  >() },
    {  544u, RevList< Rev< 0u, Arr64< Hash(L"Author416") >(), L"User Injection of Filesystems" >  >() },
    {  545u, RevList< Rev< 0u, Arr64< Hash(L"Andrey Semashev") >(), L"Title778" >  >() },
    {  546u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0546r0 : Span - foundation for the future" > , Rev< 1u, Arr64< Hash(L"H. Carter") >(), L"P0546r1 : Span - foundation for the future" > , Rev< 2u, Arr64< Hash(L"H. Carter") >(), L"P0546r2 : Span - foundation for the future" >  >() },
    {  547u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Ranges TS: Assorted Object Concept Fixes" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Ranges TS: Assorted Object Concept Fixes" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Ranges TS: Assorted Object Concept Fixes" >  >() },
    {  548u, RevList< Rev< 0u, Arr64< Hash(L"Author500") >(), L"commontype and duration" > , Rev< 1u, Arr64< Hash(L"Author102") >(), L"commontype and duration" >  >() },
    {  549u, RevList< Rev< 0u, Arr64< Hash(L"Author1158") >(), L"Adjuncts to std::hash" > , Rev< 1u, Arr64< Hash(L"Author858") >(), L"Adjuncts to std::hash" > , Rev< 2u, Arr64< Hash(L"Author1026") >(), L"Adjuncts to std::hash" > , Rev< 3u, Arr64< Hash(L"Author883") >(), L"Adjuncts to std::hash" > , Rev< 4u, Arr64< Hash(L"Author1656") >(), L"Adjuncts to std::hash" > , Rev< 5u, Arr64< Hash(L"Author568") >(), L"Adjuncts to std::hash" > , Rev< 6u, Arr64< Hash(L"Author803") >(), L"Adjuncts to std::hash" > , Rev< 7u, Arr64< Hash(L"Author978") >(), L"Adjuncts to std::hash" >  >() },
    {  550u, RevList< Rev< 0u, Arr64< Hash(L"Author1449") >(), L"Transformation Trait uncvref" > , Rev< 1u, Arr64< Hash(L"Author753") >(), L"Transformation Trait uncvref" > , Rev< 2u, Arr64< Hash(L"Author1576") >(), L"Transformation Trait removecvref" >  >() },
    {  551u, RevList< Rev< 0u, Arr64< Hash(L"Author875") >(), L"Thou Shalt Not Specialize std Function Templates!" > , Rev< 1u, Arr64< Hash(L"Author697") >(), L"Thou Shalt Not Specialize std Function Templates!" > , Rev< 2u, Arr64< Hash(L"Author574") >(), L"Thou Shalt Not Specialize std Function Templates!" > , Rev< 3u, Arr64< Hash(L"Author982") >(), L"Thou Shalt Not Specialize std Function Templates!" >  >() },
    {  552u, RevList< Rev< 0u, Arr64< Hash(L"Author145") >(), L"enableif vs. requires: A Case Study" >  >() },
    {  553u, RevList< Rev< 0u, Arr64< Hash(L"Author45") >(), L"Bit operations" > , Rev< 1u, Arr64< Hash(L"Author150") >(), L"Bit operations" > , Rev< 2u, Arr64< Hash(L"Author626") >(), L"Bit operations" > , Rev< 3u, Arr64< Hash(L"Author1753") >(), L"Bit operations" > , Rev< 4u, Arr64< Hash(L"Author1942") >(), L"Bit operations" >  >() },
    {  554u, RevList< Rev< 0u, Arr64< Hash(L"Author930") >(), L"Title752" > , Rev< 1u, Arr64< Hash(L"Author919") >(), L"p0554r1" >  >() },
    {  555u, RevList< Rev< 0u, Arr64< Hash(L"Axel Naumann") >(), L"string_view for source_location" >  >() },
    {  556u, RevList< Rev< 0u, Arr64< Hash(L"Author1195") >(), L"Integral power-of-2 operations" > , Rev< 1u, Arr64< Hash(L"Author1793") >(), L"Integral power-of-2 operations" > , Rev< 2u, Arr64< Hash(L"Author1537") >(), L"Integral power-of-2 operations" > , Rev< 3u, Arr64< Hash(L"Author601") >(), L"Integral power-of-2 operations" >  >() },
    {  557u, RevList< Rev< 0u, Arr64< Hash(L"Author661") >(), L"Title535" >  >() },
    {  558u, RevList< Rev< 0u, Arr64< Hash(L"Author890") >(), L"Title719" > , Rev< 1u, Arr64< Hash(L"Author359") >(), L"Title303" >  >() },
    {  559u, RevList< Rev< 0u, Arr64< Hash(L"Author1539") >(), L"Title1192" >  >() },
    {  560u, RevList< Rev< 0u, Arr64< Hash(L"Miro Knejp") >(), L"Class template deduction guides for \"diamond operators\"" >  >() },
    {  561u, RevList< Rev< 0u, Arr64< Hash(L"Author2039") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 1u, Arr64< Hash(L"Author2153") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 2u, Arr64< Hash(L"Author1298") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 3u, Arr64< Hash(L"Author2232") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 4u, Arr64< Hash(L"Author176") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 5u, Arr64< Hash(L"Author47") >(), L"An RAII Interface for Deferred Reclamation" > , Rev< 6u, Arr64< Hash(L"Author708") >(), L"An RAII Interface for Deferred Reclamation" >  >() },
    {  562u, RevList< Rev< 0u, Arr64< Hash(L"Author494") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1735") >(), L"Initialization List Symmetry" > , Rev< 2u, Arr64< Hash(L"Author951") >(), L"Initialization List Symmetry" >  >() },
    {  563u, RevList< Rev< 0u, Arr64< Hash(L"Author1947") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {  564u, RevList< Rev< 0u, Arr64< Hash(L"Author929") >(), L"Wording for three-way comparisons" >  >() },
    {  565u, RevList< Rev< 0u, Arr64< Hash(L"Author373") >(), L"P0565" >  >() },
    {  566u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title358" > , Rev< 1u, Arr64< Hash(L"Michael Wong") >(), L"Title1366" > , Rev< 2u, Arr64< Hash(L"Michael Wong") >(), L"Title329" > , Rev< 3u, Arr64< Hash(L"Michael") >(), L"Title361" > , Rev< 4u, Arr64< Hash(L"Michael Wong") >(), L"Title1013" > , Rev< 5u, Arr64< Hash(L"Michael Wong") >(), L"Title1375" >  >() },
    {  567u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"index.html" > , Rev< 1u, Arr64< Hash(L"Gordon Brown") >(), L"P0567r1.html" >  >() },
    {  568u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title866" >  >() },
    {  569u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title350" >  >() },
    {  570u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1174" >  >() },
    {  571u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0571r0: Type Requirements for <numeric> Algorithms" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"p0571r1: Type Requirements for <numeric> Algorithms" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"Type Requirements for `<numeric>` Algorithms" >  >() },
    {  572u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"p0572r0: bit_sizeof and bit_offsetof" > , Rev< 1u, Arr64< Hash(L"Alex Christensen") >(), L"p0572r1: bit_sizeof and bit_offsetof" > , Rev< 2u, Arr64< Hash(L"Alex Christensen") >(), L"p0572R2: Static reflection of bit fields" >  >() },
    {  573u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"abbreviated lambdas" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Abbreviated Lambdas for Fun and Profit" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Abbreviated Lambdas for Fun and Profit" >  >() },
    {  574u, RevList< Rev< 0u, Arr64< Hash(L"Anthony") >(), L"Algorithm Complexity Constraints and Parallel Overloads" > , Rev< 1u, Arr64< Hash(L"Anthony") >(), L"P0574r1: Algorithm Complexity Constraints and Parallel Overloads" >  >() },
    {  575u, RevList< Rev< 0u, Arr64< Hash(L"Author456") >(), L"Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author205") >(), L"Core \"ready\" Issues" > , Rev< 2u, Arr64< Hash(L"Author2195") >(), L"Core \"ready\" Issues" >  >() },
    {  576u, RevList< Rev< 0u, Arr64< Hash(L"Author767") >(), L"Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author748") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  577u, RevList< Rev< 0u, Arr64< Hash(L"Author593") >(), L"Title483" > , Rev< 1u, Arr64< Hash(L"Author1613") >(), L"Title1250" >  >() },
    {  578u, RevList< Rev< 0u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Title1703" > , Rev< 1u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Title1070" >  >() },
    {  579u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Constexpr for <experimental/ranges/iterator>" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Constexpr for <experimental/ranges/iterator>" >  >() },
    {  581u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1457" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1400" >  >() },
    {  582u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title830" >  >() },
    {  583u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title542" >  >() },
    {  584u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1350" >  >() },
    {  586u, RevList< Rev< 0u, Arr64< Hash(L"Federico Kircheis") >(), L"Safe integral comparisons" > , Rev< 1u, Arr64< Hash(L"Federico Kircheis") >(), L"Safe integral comparisons" > , Rev< 2u, Arr64< Hash(L"Federico Kircheis") >(), L"Safe integral comparisons" >  >() },
    {  587u, RevList< Rev< 0u, Arr64< Hash(L"Author470") >(), L"Title395" >  >() },
    {  588u, RevList< Rev< 0u, Arr64< Hash(L"Author75") >(), L"Title76" > , Rev< 1u, Arr64< Hash(L"Author1677") >(), L"Simplifying implicit lambda capture" >  >() },
    {  589u, RevList< Rev< 0u, Arr64< Hash(L"Author1280") >(), L"p0589r0" >  >() },
    {  590u, RevList< Rev< 0u, Arr64< Hash(L"Author1014") >(), L"p0590r0" >  >() },
    {  591u, RevList< Rev< 0u, Arr64< Hash(L"Author1804") >(), L"P0591r0 | Utility functions to implement uses-allocator construction" > , Rev< 1u, Arr64< Hash(L"Author1770") >(), L"P0591r1 | Utility functions to implement uses-allocator construction" > , Rev< 2u, Arr64< Hash(L"Author44") >(), L"P0591r2 | Utility functions to implement uses-allocator construction" > , Rev< 3u, Arr64< Hash(L"Author123") >(), L"P0591r3 | Utility functions to implement uses-allocator construction" > , Rev< 4u, Arr64< Hash(L"Author668") >(), L"P0591r4 | Utility functions to implement uses-allocator construction" >  >() },
    {  592u, RevList< Rev< 0u, Arr64< Hash(L"Author1077") >(), L"To boldly suggest an overall plan for C++20" > , Rev< 1u, Arr64< Hash(L"Author966") >(), L"To boldly suggest an overall plan for C++23" > , Rev< 2u, Arr64< Hash(L"Author1836") >(), L"To boldly suggest an overall plan for C++23" > , Rev< 3u, Arr64< Hash(L"Author2184") >(), L"To boldly suggest an overall plan for C++23" > , Rev< 4u, Arr64< Hash(L"Author1499") >(), L"To boldly suggest an overall plan for C++23" > , Rev< 5u, Arr64< Hash(L"Author2174") >(), L"To boldly suggest an overall plan for C++26" >  >() },
    {  593u, RevList< Rev< 0u, Arr64< Hash(L"Author1283") >(), L"What to do with buffers that are not arrays, and undefined behavior thereof?" > , Rev< 1u, Arr64< Hash(L"Richard Smith") >(), L"p0593r1: Implicit creation of objects for low-level object manipulation" > , Rev< 2u, Arr64< Hash(L"Richard Smith") >(), L"p0593r2: Implicit creation of objects for low-level object manipulation" > , Rev< 3u, Arr64< Hash(L"Richard Smith") >(), L"Implicit creation of objects for low-level object manipulation" > , Rev< 4u, Arr64< Hash(L"Richard Smith") >(), L"Implicit creation of objects for low-level object manipulation" > , Rev< 5u, Arr64< Hash(L"Richard Smith") >(), L"Implicit creation of objects for low-level object manipulation" > , Rev< 6u, Arr64< Hash(L"Richard Smith") >(), L"Implicit creation of objects for low-level object manipulation" >  >() },
    {  594u, RevList< Rev< 0u, Arr64< Hash(L"Author1641") >(), L"Relative comparisons and std::less<T*>" >  >() },
    {  595u, RevList< Rev< 0u, Arr64< Hash(L"Author1281") >(), L"Title994" > , Rev< 1u, Arr64< Hash(L"Author1313") >(), L"std::is_constant_evaluated" > , Rev< 2u, Arr64< Hash(L"Author450") >(), L"std::is_constant_evaluated" >  >() },
    {  596u, RevList< Rev< 0u, Arr64< Hash(L"Author587") >(), L"Title478" > , Rev< 1u, Arr64< Hash(L"Daveed Vandevoorde") >(), L"Title772" >  >() },
    {  597u, RevList< Rev< 0u, Arr64< Hash(L"Author76") >(), L"Title77" >  >() },
    {  598u, RevList< Rev< 0u, Arr64< Hash(L"Author2226") >(), L"Title1702" >  >() },
    {  599u, RevList< Rev< 0u, Arr64< Hash(L"Author291") >(), L"Microsoft Word - P0599R0_hash_noexcept_170206.docx" > , Rev< 1u, Arr64< Hash(L"Author786") >(), L"P0599R1 noexcept for hash functions (US140)" >  >() },
    {  600u, RevList< Rev< 0u, Arr64< Hash(L"Author918") >(), L"Microsoft Word - P0600R0_nodiscard_in_the_library_170206.docx" > , Rev< 1u, Arr64< Hash(L"Author1243") >(), L"P0600R1 [[nodiscard]] in the library" >  >() },
    {  601u, RevList< Rev< 0u, Arr64< Hash(L"Author1389") >(), L"Establishing a direction for SIMD-enabled functions" >  >() },
    {  602u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"variant and optional should propagate copy/move triviality" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"variant and optional should propagate copy/move triviality" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"variant and optional should propagate copy/move triviality" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"variant and optional should propagate copy/move triviality" > , Rev< 4u, Arr64< Hash(L"Zhihao Yuan") >(), L"variant and optional should propagate copy/move triviality" >  >() },
    {  603u, RevList< Rev< 0u, Arr64< Hash(L"Author1920") >(), L"ISO/IEC JTC1/SC22/WG21p0603r0" >  >() },
    {  604u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Resolving GB 55, US 84, US 85, US 86" >  >() },
    {  606u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title498" >  >() },
    {  607u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Inline Variables for the Standard Library" >  >() },
    {  608u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"A sane variant converting constructor (LEWG 227)" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"A sane variant converting constructor - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1089") >(), L"(Foswiki login) Html < Wg21rapperswil2018/StrawPolls < Foswiki" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"A sane variant converting constructor - HackMD" >  >() },
    {  609u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title988" > , Rev< 1u, Arr64< Hash(L"Aaron Ballman") >(), L"Title1029" > , Rev< 2u, Arr64< Hash(L"Aaron Ballman") >(), L"Title1005" > , Rev< 3u, Arr64< Hash(L"Aaron Ballman") >(), L"Title1651" >  >() },
    {  610u, RevList< Rev< 0u, Arr64< Hash(L"Author1476") >(), L"C++ Standard Library \"Review\" Issues Resolved in Kona" >  >() },
    {  611u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"More Better Operators" >  >() },
    {  612u, RevList< Rev< 0u, Arr64< Hash(L"Author457") >(), L"NB comment CH 2: volatile" >  >() },
    {  613u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0") >(), L"GB15: Issue 2011 resolution" >  >() },
    {  614u, RevList< Rev< 0u, Arr64< Hash(L"Author837") >(), L"Range-based for statements with initializer" > , Rev< 1u, Arr64< Hash(L"Author683") >(), L"Range-based for statements with initializer" >  >() },
    {  615u, RevList< Rev< 0u, Arr64< Hash(L"Author1823") >(), L"Renaming for structured bindings" >  >() },
    {  616u, RevList< Rev< 0u, Arr64< Hash(L"Author1030") >(), L"Title825" >  >() },
    {  618u, RevList< Rev< 0u, Arr64< Hash(L"Author1967") >(), L"Deprecating <codecvt>" >  >() },
    {  619u, RevList< Rev< 0u, Arr64< Hash(L"Author591") >(), L"Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 1u, Arr64< Hash(L"Author1746") >(), L"Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 2u, Arr64< Hash(L"Author1669") >(), L"Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 3u, Arr64< Hash(L"Author868") >(), L"Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 4u, Arr64< Hash(L"Author1609") >(), L"Reviewing Deprecated Facilities of C++17 for C++20" >  >() },
    {  620u, RevList< Rev< 0u, Arr64< Hash(L"Author1259") >(), L"Drafting for class template argument deduction issues" >  >() },
    {  621u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Ready Ranges TS Issues" >  >() },
    {  622u, RevList< Rev< 0u, Arr64< Hash(L"Author1627") >(), L"Core \"ready\" Issues" >  >() },
    {  623u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0623r0: Final C++17 Parallel Algorithms Fixes" >  >() },
    {  624u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title422" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title827" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title1085" >  >() },
    {  625u, RevList< Rev< 0u, Arr64< Hash(L"Author1227") >(), L"C++ Standard Library Issues Resolved Directly In Kona" >  >() },
    {  627u, RevList< Rev< 0u, Arr64< Hash(L"Melissa Mears") >(), L"Attribute to mark unreachable code" > , Rev< 1u, Arr64< Hash(L"Melissa Mears") >(), L"Unreachable Attribute R1" > , Rev< 3u, Arr64< Hash(L"Melissa Mears") >(), L"Title1283" > , Rev< 5u, Arr64< Hash(L"Melissa Mears") >(), L"Title449" > , Rev< 6u, Arr64< Hash(L"Melissa Mears") >(), L"Title147" >  >() },
    {  629u, RevList< Rev< 0u, Arr64< Hash(L"Author2157") >(), L"Title1661" >  >() },
    {  630u, RevList< Rev< 0u, Arr64< Hash(L"Author833") >(), L"To boldly suggest a pub crawl for C++ Toronto" >  >() },
    {  631u, RevList< Rev< 0u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title1572" > , Rev< 1u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title761" > , Rev< 2u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title886" > , Rev< 3u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title1602" > , Rev< 4u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title622" > , Rev< 5u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title676" > , Rev< 6u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title923" > , Rev< 7u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title1222" > , Rev< 8u, Arr64< Hash(L"Lev Minkovsky") >(), L"Title1242" >  >() },
    {  632u, RevList< Rev< 0u, Arr64< Hash(L"Author1861") >(), L"Proposal of [[uninitialized]] attribute" >  >() },
    {  633u, RevList< Rev< 0u, Arr64< Hash(L"Daveed Vandevoorde") >(), L"Title710" >  >() },
    {  634u, RevList< Rev< 0u, Arr64< Hash(L"Author364") >(), L"Untitled" > , Rev< 1u, Arr64< Hash(L"Author842") >(), L"Down with typename!" > , Rev< 2u, Arr64< Hash(L"Author1791") >(), L"Down with typename!" > , Rev< 3u, Arr64< Hash(L"Author23") >(), L"Down with typename!" >  >() },
    {  635u, RevList< Rev< 0u, Arr64< Hash(L"Dan Raviv") >(), L"p0635r0 - c_array addition proposal (090617).pages" >  >() },
    {  636u, RevList< Rev< 0u, Arr64< Hash(L"Author1730") >(), L"Changes between C++14 and C++17" > , Rev< 1u, Arr64< Hash(L"Author248") >(), L"Changes between C++14 and C++17" > , Rev< 2u, Arr64< Hash(L"Author451") >(), L"Changes between C++14 and C++17" > , Rev< 3u, Arr64< Hash(L"Author688") >(), L"Changes between C++14 and C++17" >  >() },
    {  637u, RevList< Rev< 0u, Arr64< Hash(L"Author1473") >(), L"Capture *this with initializer" >  >() },
    {  638u, RevList< Rev< 0u, Arr64< Hash(L"Ed Schouten") >(), L"Title859" >  >() },
    {  639u, RevList< Rev< 0u, Arr64< Hash(L"Author1686") >(), L"Changing attack vector of the constexpr_vector" >  >() },
    {  640u, RevList< Rev< 0u, Arr64< Hash(L"Emil Dotchevski") >(), L"Title1133" >  >() },
    {  641u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" > , Rev< 2u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" >  >() },
    {  642u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1249" > , Rev< 1u, Arr64< Hash(L"Mingxin Wang") >(), L"Title530" > , Rev< 2u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1062" > , Rev< 3u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1018" > , Rev< 4u, Arr64< Hash(L"Mingxin Wang") >(), L"Title73" >  >() },
    {  643u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title154" >  >() },
    {  644u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Forward without forward" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Forward without forward" >  >() },
    {  645u, RevList< Rev< 0u, Arr64< Hash(L"Author872") >(), L"Text Formatting" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 5u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 7u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 9u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" > , Rev< 10u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Formatting" >  >() },
    {  646u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title619" > , Rev< 1u, Arr64< Hash(L"Marc Mutz") >(), L"Title1237" >  >() },
    {  647u, RevList< Rev< 0u, Arr64< Hash(L"Author1594") >(), L"Title1235" > , Rev< 1u, Arr64< Hash(L"Author1373") >(), L"Title1065" >  >() },
    {  648u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0648r0" >  >() },
    {  649u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0649r0" >  >() },
    {  650u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0650r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0650r1" > , Rev< 2u, Arr64< Hash(L"Vicente J") >(), L"p0650r2" >  >() },
    {  651u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Switch the Ranges TS to Use Variable Concepts" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Switch the Ranges TS to Use Variable Concepts" >  >() },
    {  652u, RevList< Rev< 0u, Arr64< Hash(L"Author1171") >(), L"Concurrent associative data structure with unsynchronized view" > , Rev< 1u, Arr64< Hash(L"Author888") >(), L"Concurrent associative data structure with unsynchronized view" > , Rev< 2u, Arr64< Hash(L"Author1219") >(), L"Concurrent associative data structure with unsynchronized view" > , Rev< 3u, Arr64< Hash(L"Author2056") >(), L"Concurrent associative data structure with unsynchronized view" >  >() },
    {  653u, RevList< Rev< 0u, Arr64< Hash(L"Glen Joseph") >(), L"pointer_traits utility to convert to raw pointer" > , Rev< 1u, Arr64< Hash(L"Glen Joseph") >(), L"Utility to convert a pointer to a raw pointer" > , Rev< 2u, Arr64< Hash(L"Glen Joseph") >(), L"Utility to convert a pointer to a raw pointer" >  >() },
    {  654u, RevList< Rev< 0u, Arr64< Hash(L"Lo\xEF\x63\x20Joly") >(), L"Title1371" >  >() },
    {  655u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"visit<R>: Explicit Return Type for visit" > , Rev< 1u, Arr64< Hash(L"Michael Park") >(), L"visit<R>: Explicit Return Type for visit" >  >() },
    {  656u, RevList< Rev< 0u, Arr64< Hash(L"Author126") >(), L"Reducing <ratio>" >  >() },
    {  657u, RevList< Rev< 0u, Arr64< Hash(L"Author1918") >(), L"Deprecate Certain Declarations in the Global Namespace" > , Rev< 1u, Arr64< Hash(L"Author1507") >(), L"Deprecate Certain Declarations in the Global Namespace" > , Rev< 2u, Arr64< Hash(L"Author1905") >(), L"Deprecate Certain Declarations in the Global Namespace" >  >() },
    {  658u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"P0658R0 -- Proposal for adding alias declarations to concepts" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"wg21 | For documenting all WG21-related proposals" >  >() },
    {  659u, RevList< Rev< 0u, Arr64< Hash(L"Author2084") >(), L"Microsoft Word - P0659R0_futurestatus_draft_170613.docx" >  >() },
    {  660u, RevList< Rev< 0u, Arr64< Hash(L"Author869") >(), L"P0660R0" > , Rev< 2u, Arr64< Hash(L"Author1349") >(), L"P0660R3" > , Rev< 3u, Arr64< Hash(L"Author276") >(), L"P0660R3" > , Rev< 4u, Arr64< Hash(L"Author1225") >(), L"C++ International Standard" > , Rev< 5u, Arr64< Hash(L"Author479") >(), L"C++ International Standard" > , Rev< 6u, Arr64< Hash(L"Author401") >(), L"P0660R6 A Cooperatively Interruptible Joining Thread, Rev 6" > , Rev< 7u, Arr64< Hash(L"Author1913") >(), L"P0660R7 Interrupt Tokens and a Joining Thread, Rev 7" > , Rev< 8u, Arr64< Hash(L"Author764") >(), L"C++ International Standard" > , Rev< 9u, Arr64< Hash(L"Author13") >(), L"P0660R9" > , Rev< 10u, Arr64< Hash(L"Author68") >(), L"P0660" >  >() },
    {  661u, RevList< Rev< 0u, Arr64< Hash(L"Allan Deutsch") >(), L"Title773" >  >() },
    {  662u, RevList< Rev< 0u, Arr64< Hash(L"Author863") >(), L"Working Draft, C++ Extensions for Ranges" >  >() },
    {  663u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Ready Issues for the July 2017 (Toronto) meeting" >  >() },
    {  664u, RevList< Rev< 0u, Arr64< Hash(L"Author234") >(), L"C++ Coroutine TS Issues" > , Rev< 1u, Arr64< Hash(L"Author2095") >(), L"C++ Coroutine TS Issues" > , Rev< 2u, Arr64< Hash(L"Author51") >(), L"C++ Coroutine TS Issues" > , Rev< 3u, Arr64< Hash(L"Author147") >(), L"C++ Coroutine TS Issues" > , Rev< 4u, Arr64< Hash(L"Author1277") >(), L"C++ Coroutine TS Issues" > , Rev< 5u, Arr64< Hash(L"Author414") >(), L"C++ Coroutine TS Issues" > , Rev< 6u, Arr64< Hash(L"Author864") >(), L"C++ Coroutine TS Issues" > , Rev< 7u, Arr64< Hash(L"Author2102") >(), L"C++ Coroutine TS Issues" > , Rev< 8u, Arr64< Hash(L"Author2234") >(), L"C++ Coroutine TS Issues" >  >() },
    {  665u, RevList< Rev< 0u, Arr64< Hash(L"Tristan Brindle") >(), L"Title41" > , Rev< 1u, Arr64< Hash(L"Tristan Brindle") >(), L"Title878" >  >() },
    {  666u, RevList< Rev< 0u, Arr64< Hash(L"Alasdair Mackintosh") >(), L"C++ Latches and Barriers" > , Rev< 1u, Arr64< Hash(L"Olivier Giroux") >(), L"P0666R1" > , Rev< 2u, Arr64< Hash(L"Olivier Giroux") >(), L"P0666R2" >  >() },
    {  667u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Moving std::future extensions forward" >  >() },
    {  668u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Moving std::future extensions forward" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Revising the C++ memory model" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Revising the C++ memory model" > , Rev< 3u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Revising the C++ memory model" > , Rev< 4u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Revising the C++ memory model" > , Rev< 5u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Revising the C++ memory model" >  >() },
    {  669u, RevList< Rev< 0u, Arr64< Hash(L"Author581") >(), L"Title473" >  >() },
    {  670u, RevList< Rev< 0u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection of functions" > , Rev< 1u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection of functions" > , Rev< 2u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Static reflection of functions" > , Rev< 3u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Function reflection" > , Rev< 4u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Function reflection" >  >() },
    {  671u, RevList< Rev< 0u, Arr64< Hash(L"Axel Naumann") >(), L"Parametric Functions" > , Rev< 1u, Arr64< Hash(L"Axel Naumann") >(), L"Function Arguments That Speak" > , Rev< 2u, Arr64< Hash(L"Axel Naumann") >(), L"Self-explanatory Function Arguments" >  >() },
    {  672u, RevList< Rev< 0u, Arr64< Hash(L"Joel Falcou") >(), L"Title63" >  >() },
    {  673u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title367" >  >() },
    {  674u, RevList< Rev< 0u, Arr64< Hash(L"Author830") >(), L"Extending make_shared to Support Arrays" > , Rev< 1u, Arr64< Hash(L"Author780") >(), L"Extending make_shared to Support Arrays" >  >() },
    {  675u, RevList< Rev< 0u, Arr64< Hash(L"Author2166") >(), L"Title1667" >  >() },
    {  676u, RevList< Rev< 0u, Arr64< Hash(L"Felix Petriconi") >(), L"future_proposal_P0676R0" >  >() },
    {  678u, RevList< Rev< 0u, Arr64< Hash(L"Author1637") >(), L"Title1266" >  >() },
    {  679u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Title607" >  >() },
    {  680u, RevList< Rev< 0u, Arr64< Hash(L"Torvald Riegel") >(), L"Title653" >  >() },
    {  681u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1228" >  >() },
    {  682u, RevList< Rev< 0u, Arr64< Hash(L"Author1799") >(), L"Repairing elementary string conversions (LWG 2955)" > , Rev< 1u, Arr64< Hash(L"Author1257") >(), L"Repairing elementary string conversions (LWG 2955)" >  >() },
    {  683u, RevList< Rev< 0u, Arr64< Hash(L"Author821") >(), L"Default member initializers for bit-fields" > , Rev< 1u, Arr64< Hash(L"Author1727") >(), L"Default member initializers for bit-fields (revision 1)" >  >() },
    {  684u, RevList< Rev< 0u, Arr64< Hash(L"Author224") >(), L"Title182" > , Rev< 1u, Arr64< Hash(L"Author831") >(), L"Title659" > , Rev< 2u, Arr64< Hash(L"Author1416") >(), L"Title1101" >  >() },
    {  685u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title263" >  >() },
    {  686u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title261" >  >() },
    {  687u, RevList< Rev< 0u, Arr64< Hash(L"Ruyman Reyes") >(), L"Title1041" >  >() },
    {  688u, RevList< Rev< 0u, Arr64< Hash(L"Chris Kohlhoff") >(), L"Title1166" >  >() },
    {  689u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1618" >  >() },
    {  690u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"p0690r0: Tearable Atomics" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"p0690r1: Tearable Atomics" >  >() },
    {  691u, RevList< Rev< 0u, Arr64< Hash(L"Author322") >(), L"Title272" >  >() },
    {  692u, RevList< Rev< 0u, Arr64< Hash(L"Author1921") >(), L"Access Checking on Specializations" > , Rev< 1u, Arr64< Hash(L"Author2156") >(), L"Access Checking on Specializations" >  >() },
    {  694u, RevList< Rev< 0u, Arr64< Hash(L"Author1031") >(), L"Title828" >  >() },
    {  695u, RevList< Rev< 0u, Arr64< Hash(L"Author1762") >(), L"Title1368" >  >() },
    {  696u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Remove abbreviated functions and template-introduction syntax from the Concepts TS" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"Remove abbreviated functions and template-introduction syntax from the Concepts TS" >  >() },
    {  697u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title32" >  >() },
    {  698u, RevList< Rev< 0u, Arr64< Hash(L"Author1643") >(), L"C++ Standard Library Issues to be moved in Toronto" >  >() },
    {  699u, RevList< Rev< 0u, Arr64< Hash(L"Author282") >(), L"C++ Standard Library Issues Resolved Directly In Toronto" >  >() },
    {  700u, RevList< Rev< 0u, Arr64< Hash(L"Author331") >(), L"Title277" >  >() },
    {  701u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"P0701r0: Back to the std2::future" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"p0701r1: Back to the std2::future Part II" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"p0701r2: Back to the std2::future Part II" >  >() },
    {  702u, RevList< Rev< 0u, Arr64< Hash(L"Mike Spertus") >(), L"Language support for Constructor Template Argument Deduction" > , Rev< 1u, Arr64< Hash(L"Mike Spertus") >(), L"Language support for Constructor Template Argument Deduction" >  >() },
    {  703u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Title1107" >  >() },
    {  704u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Fixing const-qualified pointers to members" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Fixing const-qualified pointers to members" >  >() },
    {  705u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title1504" >  >() },
    {  706u, RevList< Rev< 0u, Arr64< Hash(L"Author678") >(), L"Efficient headers for modules (or not)" >  >() },
    {  707u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1704" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title1170" > , Rev< 2u, Arr64< Hash(L"Herb Sutter") >(), L"Title206" > , Rev< 3u, Arr64< Hash(L"Herb Sutter") >(), L"Title1360" > , Rev< 4u, Arr64< Hash(L"Herb Sutter") >(), L"Title242" > , Rev< 5u, Arr64< Hash(L"Herb Sutter") >(), L"Title356" >  >() },
    {  709u, RevList< Rev< 0u, Arr64< Hash(L"Outcome is") >(), L"Title970" > , Rev< 1u, Arr64< Hash(L"Outcome is") >(), L"Title755" > , Rev< 2u, Arr64< Hash(L"Outcome is") >(), L"Title1631" > , Rev< 3u, Arr64< Hash(L"Outcome is") >(), L"Title316" > , Rev< 4u, Arr64< Hash(L"Outcome is") >(), L"Title673" >  >() },
    {  710u, RevList< Rev< 0u, Arr64< Hash(L"Author811") >(), L"Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author2077") >(), L"Core \"ready\" Issues" >  >() },
    {  711u, RevList< Rev< 0u, Arr64< Hash(L"Author2219") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  712u, RevList< Rev< 0u, Arr64< Hash(L"Author1982") >(), L"p0712" >  >() },
    {  713u, RevList< Rev< 0u, Arr64< Hash(L"Author2162") >(), L"Untitled" > , Rev< 1u, Arr64< Hash(L"Author1728") >(), L"Title1336" >  >() },
    {  714u, RevList< Rev< 0u, Arr64< Hash(L"Author1017") >(), L"Title812" >  >() },
    {  715u, RevList< Rev< 0u, Arr64< Hash(L"Author1439") >(), L"Title1118" >  >() },
    {  716u, RevList< Rev< 0u, Arr64< Hash(L"Author1720") >(), L"Title1328" >  >() },
    {  717u, RevList< Rev< 0u, Arr64< Hash(L"Author100") >(), L"Title93" > , Rev< 1u, Arr64< Hash(L"Author370") >(), L"Title315" >  >() },
    {  718u, RevList< Rev< 0u, Arr64< Hash(L"Author1745") >(), L"Revising atomic_shared_ptr for C++20" > , Rev< 2u, Arr64< Hash(L"Author1495") >(), L"Revising atomic_shared_ptr for C++20" >  >() },
    {  721u, RevList< Rev< 0u, Arr64< Hash(L"Author1862") >(), L"Title1444" >  >() },
    {  722u, RevList< Rev< 0u, Arr64< Hash(L"Author227") >(), L"ISO/IEC JTC1/SC22/WG21p0722r0" > , Rev< 1u, Arr64< Hash(L"Author1006") >(), L"Title808" > , Rev< 2u, Arr64< Hash(L"Author1304") >(), L"Efficient sized delete for variable sized classes" > , Rev< 3u, Arr64< Hash(L"Author1333") >(), L"Efficient sized delete for variable sized classes" >  >() },
    {  723u, RevList< Rev< 0u, Arr64< Hash(L"Author946") >(), L"Response to Clarifying the status of feature test macros" >  >() },
    {  724u, RevList< Rev< 0u, Arr64< Hash(L"Author828") >(), L"Merge the Concepts TS Working Draft into the C++20 working draft" >  >() },
    {  725u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Remove the requirement for constrained-type-specifiers to be deduced to the same type from the Concepts TS" >  >() },
    {  726u, RevList< Rev< 0u, Arr64< Hash(L"Author1202") >(), L"Does the Concepts TS Improve on C++17?" >  >() },
    {  727u, RevList< Rev< 0u, Arr64< Hash(L"Author2027") >(), L"Core Issue 1299: Temporary objects vs temporary expressions" >  >() },
    {  728u, RevList< Rev< 0u, Arr64< Hash(L"Author482") >(), L"Wording for Networking PDTS ballot comment 005" >  >() },
    {  729u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Proposed wording for Networking TS NB comment GB 9" >  >() },
    {  730u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"Options for addressing requires-clause syntax ambiguities" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"requires-clause syntax ambiguities: wording to apply custom grammar" >  >() },
    {  731u, RevList< Rev< 0u, Arr64< Hash(L"Author1309") >(), L"Title1014" >  >() },
    {  732u, RevList< Rev< 0u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1227" > , Rev< 1u, Arr64< Hash(L"Jeff Snyder") >(), L"Title963" > , Rev< 2u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1645" >  >() },
    {  734u, RevList< Rev< 0u, Arr64< Hash(L"Author1621") >(), L"C++ Technical Specification" >  >() },
    {  735u, RevList< Rev< 0u, Arr64< Hash(L"Will Deacon") >(), L"Interaction of memory_order_consume with release sequences" > , Rev< 1u, Arr64< Hash(L"Will Deacon") >(), L"Interaction of memory_order_consume with release sequences" >  >() },
    {  736u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"Nameless parameters and unutterable specializations" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"Nameless parameters and unutterable specializations" >  >() },
    {  737u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0737r0 : Execution Context of Execution Agents" >  >() },
    {  738u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"I Stream, You Stream, We All Stream for istream_iterator" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"I Stream, You Stream, We All Stream for istream_iterator" > , Rev< 2u, Arr64< Hash(L"Casey Carter") >(), L"I Stream, You Stream, We All Stream for istream_iterator" >  >() },
    {  739u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Some improvements to class template argument deduction integration into the standard library" >  >() },
    {  740u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Ranges TS Immediate Issues from the July 2017 (Toronto) meeting" >  >() },
    {  742u, RevList< Rev< 0u, Arr64< Hash(L"Author346") >(), L"Wording for Networking PDTS ballot comment resolutions" >  >() },
    {  745u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title482" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title1295" >  >() },
    {  746u, RevList< Rev< 0u, Arr64< Hash(L"Author740") >(), L"Wording for Networking PDTS ballot comment 011 (US-10)" >  >() },
    {  747u, RevList< Rev< 0u, Arr64< Hash(L"Author1129") >(), L"Wording for Networking PDTS ballot comments 026 (GB-15) and 027 (GB-16)" > , Rev< 1u, Arr64< Hash(L"Author1951") >(), L"Wording for Networking PDTS ballot comment 026 (GB-15), but not 027 (GB-16)" >  >() },
    {  748u, RevList< Rev< 0u, Arr64< Hash(L"Author711") >(), L"Wording for Networking PDTS ballot comments on reentrancy" >  >() },
    {  749u, RevList< Rev< 0u, Arr64< Hash(L"Author928") >(), L"Title748" >  >() },
    {  750u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"p0750r0: Consume" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"p0750r1: Consume" >  >() },
    {  752u, RevList< Rev< 0u, Arr64< Hash(L"Author1372") >(), L"Title1064" >  >() },
    {  753u, RevList< Rev< 0u, Arr64< Hash(L"Author895") >(), L"Title724" > , Rev< 1u, Arr64< Hash(L"Author1683") >(), L"Title1308" > , Rev< 2u, Arr64< Hash(L"Author1541") >(), L"Title1194" >  >() },
    {  754u, RevList< Rev< 0u, Arr64< Hash(L"Author952") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1994") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash(L"Author662") >(), L"Version Header 06 P0754R2" >  >() },
    {  756u, RevList< Rev< 0u, Arr64< Hash(L"Author1685") >(), L"Lambda syntax should be more liberal in what it accepts" >  >() },
    {  757u, RevList< Rev< 0u, Arr64< Hash(L"Author841") >(), L"regex_iterator should be iterable" >  >() },
    {  758u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Implicit conversion traits and utility functions" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Implicit conversion traits and utility functions" >  >() },
    {  759u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"fpos requirements" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"fpos requirements" >  >() },
    {  761u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"Title1586" > , Rev< 1u, Arr64< Hash(L"Jared Hoberock") >(), L"Title883" > , Rev< 2u, Arr64< Hash(L"Jared Hoberock") >(), L"Title826" >  >() },
    {  762u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title432" >  >() },
    {  766u, RevList< Rev< 0u, Arr64< Hash(L"Author1590") >(), L"Fixing small-ish functionality gaps in constraints" > , Rev< 1u, Arr64< Hash(L"Author1273") >(), L"Fixing small-ish functionality gaps in constraints" >  >() },
    {  767u, RevList< Rev< 0u, Arr64< Hash(L"Author472") >(), L"Expunge POD" > , Rev< 1u, Arr64< Hash(L"Author1050") >(), L"Deprecate POD" >  >() },
    {  768u, RevList< Rev< 0u, Arr64< Hash(L"Author1658") >(), L"Library Support for the Spaceship (Comparison) Operator" > , Rev< 1u, Arr64< Hash(L"Author705") >(), L"Library Support for the Spaceship (Comparison) Operator" >  >() },
    {  769u, RevList< Rev< 0u, Arr64< Hash(L"Dan Raviv") >(), L"shift proposal P0769R0.pages" > , Rev< 1u, Arr64< Hash(L"Dan Raviv") >(), L"shift proposal P0769R1.pages" > , Rev< 2u, Arr64< Hash(L"Dan Raviv") >(), L"shift proposal P0769R2.pages" >  >() },
    {  770u, RevList< Rev< 0u, Arr64< Hash(L"Author1342") >(), L"Title1033" >  >() },
    {  771u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title560" > , Rev< 1u, Arr64< Hash(L"Nevin ") >(), L"Title66" >  >() },
    {  772u, RevList< Rev< 0u, Arr64< Hash(L"Nat Goodspeed") >(), L"Title511" > , Rev< 1u, Arr64< Hash(L"Nat Goodspeed") >(), L"Title1178" >  >() },
    {  773u, RevList< Rev< 0u, Arr64< Hash(L"Author1776") >(), L"Towards meaningful fancy pointers" >  >() },
    {  774u, RevList< Rev< 0u, Arr64< Hash(L"Author1164") >(), L"Module Declaration Location" >  >() },
    {  775u, RevList< Rev< 0u, Arr64< Hash(L"Author332") >(), L"Module Partitions" >  >() },
    {  776u, RevList< Rev< 0u, Arr64< Hash(L"Author486") >(), L"Rebase the Parallelism TS onto the C++17 Standard" > , Rev< 1u, Arr64< Hash(L"Author300") >(), L"Rebase the Parallelism TS onto the C++17 Standard" >  >() },
    {  777u, RevList< Rev< 0u, Arr64< Hash(L"Author498") >(), L"Treating Unnecessary decay" > , Rev< 1u, Arr64< Hash(L"Author2127") >(), L"Treating Unnecessary decay" >  >() },
    {  778u, RevList< Rev< 0u, Arr64< Hash(L"Author723") >(), L"Module Names" >  >() },
    {  779u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title630" >  >() },
    {  780u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Pack expansion in lambda init-capture" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Pack expansion in lambda init-capture" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Pack expansion in lambda init-capture" >  >() },
    {  781u, RevList< Rev< 0u, Arr64< Hash(L"Author896") >(), L"A Modern C++ Signature for Main" >  >() },
    {  782u, RevList< Rev< 0u, Arr64< Hash(L"Author384") >(), L"A Case for Simplifying/Improving Natural Syntax Concepts" > , Rev< 1u, Arr64< Hash(L"Author1380") >(), L"Title1071" > , Rev< 2u, Arr64< Hash(L"Author1910") >(), L"Title1473" >  >() },
    {  783u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"P0783: Continuations without overcomplicating the future" >  >() },
    {  784u, RevList< Rev< 0u, Arr64< Hash(L"Author78") >(), L"Title79" > , Rev< 1u, Arr64< Hash(L"Author63") >(), L"Title67" > , Rev< 2u, Arr64< Hash(L"Author1001") >(), L"Title807" > , Rev< 3u, Arr64< Hash(L"Author867") >(), L"More constexpr containers" > , Rev< 4u, Arr64< Hash(L"Author106") >(), L"More constexpr containers" > , Rev< 5u, Arr64< Hash(L"Author279") >(), L"More constexpr containers" > , Rev< 6u, Arr64< Hash(L"Author1072") >(), L"More constexpr containers" > , Rev< 7u, Arr64< Hash(L"Author2110") >(), L"More constexpr containers" >  >() },
    {  785u, RevList< Rev< 0u, Arr64< Hash(L"Author493") >(), L"Runtime-sized arrays and a C++ wrapper" >  >() },
    {  786u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p0786r0" > , Rev< 1u, Arr64< Hash(L"Vicente J") >(), L"p0786r1" >  >() },
    {  787u, RevList< Rev< 0u, Arr64< Hash(L"Author1470") >(), L"Proclaimed Ownership Declarations" >  >() },
    {  788u, RevList< Rev< 0u, Arr64< Hash(L"Author296") >(), L"Standard Library Specification in a Concepts and Contracts World" > , Rev< 1u, Arr64< Hash(L"Author805") >(), L"Standard Library Specification in a Concepts and Contracts World" > , Rev< 2u, Arr64< Hash(L"Author1141") >(), L"Standard Library Specification in a Concepts and Contracts World" > , Rev< 3u, Arr64< Hash(L"Author1969") >(), L"Standard Library Specification in a Concepts and Contracts World" >  >() },
    {  789u, RevList< Rev< 0u, Arr64< Hash(L"Author769") >(), L"Range Adaptors and Utilities" > , Rev< 1u, Arr64< Hash(L"Author850") >(), L"Range Adaptors and Utilities" > , Rev< 2u, Arr64< Hash(L"Author2005") >(), L"Range Adaptors and Utilities" > , Rev< 3u, Arr64< Hash(L"Author1608") >(), L"Range Adaptors and Utilities" >  >() },
    {  790u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"library-operator-spaceship" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"Title162" > , Rev< 2u, Arr64< Hash(L"David Stone") >(), L"Title1634" >  >() },
    {  791u, RevList< Rev< 0u, Arr64< Hash(L"Author834") >(), L"Title662" >  >() },
    {  792u, RevList< Rev< 0u, Arr64< Hash(L"Author419") >(), L"Title359" > , Rev< 1u, Arr64< Hash(L"Author371") >(), L"Untitled" > , Rev< 2u, Arr64< Hash(L"Author1958") >(), L"Untitled" > , Rev< 3u, Arr64< Hash(L"Author2204") >(), L"Untitled" > , Rev< 4u, Arr64< Hash(L"Author732") >(), L"Untitled" > , Rev< 5u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a non-owning reference to a Callable" > , Rev< 6u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 7u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 8u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 9u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 10u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 11u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 12u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 13u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" > , Rev< 14u, Arr64< Hash(L"Vittorio Romeo") >(), L"function_ref: a type-erased callable reference - HackMD" >  >() },
    {  793u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1566" >  >() },
    {  794u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1666" >  >() },
    {  795u, RevList< Rev< 0u, Arr64< Hash(L"Simon") >(), L"Title42" >  >() },
    {  796u, RevList< Rev< 0u, Arr64< Hash(L"Gordon") >(), L"Title919" > , Rev< 1u, Arr64< Hash(L"Gordon Brown") >(), L"Title14" > , Rev< 2u, Arr64< Hash(L"Gordon Brown") >(), L"Title798" > , Rev< 3u, Arr64< Hash(L"Gordon Brown") >(), L"Title468" >  >() },
    {  797u, RevList< Rev< 0u, Arr64< Hash(L"Matti") >(), L"Title54" > , Rev< 1u, Arr64< Hash(L"Matti Rintala") >(), L"Title262" > , Rev< 2u, Arr64< Hash(L"Matti Rintala") >(), L"Title1298" >  >() },
    {  798u, RevList< Rev< 0u, Arr64< Hash(L"Author1639") >(), L"p0798r0: Monadic operations for std::optional" > , Rev< 2u, Arr64< Hash(L"Simon Brand") >(), L"p0798R2: Monadic operations for std::optional" > , Rev< 3u, Arr64< Hash(L"Simon Brand") >(), L"p0798R3: Monadic operations for std::optional" > , Rev< 4u, Arr64< Hash(L"Simon Brand") >(), L"p0798R4: Monadic operations for std::optional" > , Rev< 6u, Arr64< Hash(L"Sy Brand") >(), L"p0798R6: Monadic operations for std::optional" > , Rev< 8u, Arr64< Hash(L"Sy Brand") >(), L"Monadic operations for std::optional" >  >() },
    {  799u, RevList< Rev< 0u, Arr64< Hash(L"Stephen") >(), L"Title142" > , Rev< 1u, Arr64< Hash(L"Stephen Michel") >(), L"Baseline for Ed 2 of TR 24772" >  >() },
    {  800u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"wg21 | For documenting all WG21-related proposals" >  >() },
    {  801u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title966" >  >() },
    {  802u, RevList< Rev< 0u, Arr64< Hash(L"Beman Dawes") >(), L"Standard Library Concepts -" >  >() },
    {  803u, RevList< Rev< 0u, Arr64< Hash(L"Author1420") >(), L"Endian RFC" >  >() },
    {  804u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Impact of the Modules TS on the C++ tools ecosystem" >  >() },
    {  805u, RevList< Rev< 0u, Arr64< Hash(L"Marshall Clow") >(), L"Title723" > , Rev< 1u, Arr64< Hash(L"Author1868") >(), L"Comparing Containers" > , Rev< 2u, Arr64< Hash(L"Author950") >(), L"Comparing Containers" >  >() },
    {  806u, RevList< Rev< 0u, Arr64< Hash(L"Author2199") >(), L"Deprecate Implicit Capture of this" > , Rev< 1u, Arr64< Hash(L"Author2225") >(), L"Deprecate implicit capture of this via [=]" > , Rev< 2u, Arr64< Hash(L"Author1146") >(), L"Deprecate implicit capture of this via [=]" >  >() },
    {  807u, RevList< Rev< 0u, Arr64< Hash(L"Author2022") >(), L"An Adjective Syntax for Concepts" >  >() },
    {  808u, RevList< Rev< 0u, Arr64< Hash(L"Author2066") >(), L"Title1600" >  >() },
    {  809u, RevList< Rev< 0u, Arr64< Hash(L"Author1616") >(), L"Title1252" >  >() },
    {  810u, RevList< Rev< 0u, Arr64< Hash(L"Ben Deane") >(), L"Title1482" >  >() },
    {  811u, RevList< Rev< 0u, Arr64< Hash(L"Author326") >(), L"Well-behaved interpolation for numbers and pointers" > , Rev< 1u, Arr64< Hash(L"Author1233") >(), L"Well-behaved interpolation for numbers and pointers" > , Rev< 2u, Arr64< Hash(L"Author1919") >(), L"Well-behaved interpolation for numbers and pointers" > , Rev< 3u, Arr64< Hash(L"Author2155") >(), L"Well-behaved interpolation for numbers and pointers" >  >() },
    {  812u, RevList< Rev< 0u, Arr64< Hash(L"Author1375") >(), L"copy-list-initialization is inherently un-=" >  >() },
    {  813u, RevList< Rev< 0u, Arr64< Hash(L"Author1085") >(), L"Microsoft Word - P0813R0_retval_construct.docx" > , Rev< 1u, Arr64< Hash(L"Author1743") >(), L"P0813R1" >  >() },
    {  814u, RevList< Rev< 0u, Arr64< Hash(L"Author2090") >(), L"Microsoft Word - P0814R0_hash_combine.docx" > , Rev< 2u, Arr64< Hash(L"Author1992") >(), L"Microsoft Word - P0814R2_hash_combine.docx" >  >() },
    {  815u, RevList< Rev< 0u, Arr64< Hash(L"Author824") >(), L"C++ Standard Library Issues to be moved in Albuquerque" >  >() },
    {  816u, RevList< Rev< 0u, Arr64< Hash(L"Author262") >(), L"Title221" >  >() },
    {  817u, RevList< Rev< 0u, Arr64< Hash(L"Author1339") >(), L"Core \"ready\" Issues" >  >() },
    {  818u, RevList< Rev< 0u, Arr64< Hash(L"Author2064") >(), L"Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash(L"Author613") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  819u, RevList< Rev< 0u, Arr64< Hash(L"Author2158") >(), L"Microsoft Word - P0819R0_feature_macros.docx" >  >() },
    {  820u, RevList< Rev< 0u, Arr64< Hash(L"Author1122") >(), L"Title895" > , Rev< 1u, Arr64< Hash(L"Author1736") >(), L"Title1340" > , Rev< 2u, Arr64< Hash(L"Author232") >(), L"Title193" > , Rev< 3u, Arr64< Hash(L"Author1998") >(), L"Title1545" > , Rev< 4u, Arr64< Hash(L"Author177") >(), L"Title151" >  >() },
    {  821u, RevList< Rev< 0u, Arr64< Hash(L"Author1712") >(), L"Title1322" >  >() },
    {  822u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title977" >  >() },
    {  824u, RevList< Rev< 0u, Arr64< Hash(L"Arthur") >(), L"Title1038" > , Rev< 1u, Arr64< Hash(L"Author278") >(), L"Summary of SG14 discussion on <system_error>" >  >() },
    {  825u, RevList< Rev< 0u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"A friendlier tuple get" > , Rev< 1u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"A friendlier tuple get" >  >() },
    {  826u, RevList< Rev< 0u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"SFINAE-friendly std::bind" >  >() },
    {  827u, RevList< Rev< 0u, Arr64< Hash(L"Author360") >(), L"Title305" >  >() },
    {  828u, RevList< Rev< 0u, Arr64< Hash(L"Author2123") >(), L"Title1642" > , Rev< 1u, Arr64< Hash(L"John McFarlane") >(), L"Title1309" >  >() },
    {  829u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Title618" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Title959" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Title299" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Title1532" > , Rev< 4u, Arr64< Hash(L"Ben Craig") >(), L"Title1255" >  >() },
    {  830u, RevList< Rev< 0u, Arr64< Hash(L"Author2051") >(), L"Microsoft Word - P0830R0_requires_in_lib.docx" >  >() },
    {  831u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Keep alias syntax extendable" >  >() },
    {  832u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Module TS Wording Does Not Support Intended Use Case" >  >() },
    {  834u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"p0834r0: Lifting overload sets into objects" >  >() },
    {  835u, RevList< Rev< 0u, Arr64< Hash(L"Author395") >(), L"Adopt SD-6 feature macros into the C++20 working draft" >  >() },
    {  836u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"Title1267" > , Rev< 1u, Arr64< Hash(L"Gordon Brown") >(), L"Title1288" >  >() },
    {  837u, RevList< Rev< 0u, Arr64< Hash(L"Author1123") >(), L"Ruminations on modular macros" >  >() },
    {  838u, RevList< Rev< 0u, Arr64< Hash(L"Author272") >(), L"Title226" >  >() },
    {  839u, RevList< Rev< 0u, Arr64< Hash(L"Author924") >(), L"Recursive lambdas" >  >() },
    {  840u, RevList< Rev< 0u, Arr64< Hash(L"Author802") >(), L"Language support for empty objects" > , Rev< 1u, Arr64< Hash(L"Author939") >(), L"Language support for empty objects" > , Rev< 2u, Arr64< Hash(L"Author1201") >(), L"Language support for empty objects" >  >() },
    {  841u, RevList< Rev< 0u, Arr64< Hash(L"Author641") >(), L"ModulesAtScale" >  >() },
    {  842u, RevList< Rev< 0u, Arr64< Hash(L"Author1037") >(), L"Unknown Exports by Example" >  >() },
    {  843u, RevList< Rev< 0u, Arr64< Hash(L"Author212") >(), L"fixed_capacity_vector" > , Rev< 1u, Arr64< Hash(L"Author1752") >(), L"P0843r1: fixed_capacity_vector" > , Rev< 2u, Arr64< Hash(L"Author1566") >(), L"static_vector" > , Rev< 3u, Arr64< Hash(L"Author204") >(), L"README.md - Grip" > , Rev< 4u, Arr64< Hash(L"Author1886") >(), L"README.md - Grip" > , Rev< 5u, Arr64< Hash(L"Author50") >(), L"static_vector" > , Rev< 6u, Arr64< Hash(L"Author2000") >(), L"static_vector" > , Rev< 7u, Arr64< Hash(L"Author1079") >(), L"inplace_vector" > , Rev< 8u, Arr64< Hash(L"Author2138") >(), L"inplace_vector" > , Rev< 9u, Arr64< Hash(L"Author95") >(), L"`inplace_vector`" > , Rev< 10u, Arr64< Hash(L"Author1853") >(), L"inplace_vector" > , Rev< 11u, Arr64< Hash(L"Author1145") >(), L"`inplace_vector`" > , Rev< 12u, Arr64< Hash(L"Author192") >(), L"`inplace_vector`" > , Rev< 13u, Arr64< Hash(L"Author1908") >(), L"`inplace_vector` - HackMD" > , Rev< 14u, Arr64< Hash(L"Author1490") >(), L"`inplace_vector` - HackMD" >  >() },
    {  844u, RevList< Rev< 0u, Arr64< Hash(L"J. Monnon") >(), L"Type functions and beyond" >  >() },
    {  845u, RevList< Rev< 0u, Arr64< Hash(L"Detlef Vollmann") >(), L"Common Subset of C++03 and C++17: Binders" >  >() },
    {  846u, RevList< Rev< 0u, Arr64< Hash(L"Author1667") >(), L"ADL and Function Templates that are not Visible" >  >() },
    {  847u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"p0847R0: Deducing this" > , Rev< 1u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" > , Rev< 2u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" > , Rev< 4u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" > , Rev< 5u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" > , Rev< 6u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" > , Rev< 7u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Deducing this" >  >() },
    {  848u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally Trivial Special Member Functions" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally Trivial Special Member Functions" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally Trivial Special Member Functions" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally Trivial Special Member Functions" >  >() },
    {  849u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): DECAY_COPY in the language - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 4u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 5u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 6u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 7u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" > , Rev< 8u, Arr64< Hash(L"Zhihao Yuan") >(), L"auto(x): decay-copy in the language - HackMD" >  >() },
    {  851u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"simd<T> is neither a product type nor a container type [P0851R0]" >  >() },
    {  856u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"p0856r0: Restrict Access Property for <code>mdspan</code> and <code>span</code>" >  >() },
    {  857u, RevList< Rev< 0u, Arr64< Hash(L"Author1223") >(), L"Wording for functionality gaps in constraints" >  >() },
    {  858u, RevList< Rev< 0u, Arr64< Hash(L"Author829") >(), L"Constexpr iterator requirements" >  >() },
    {  859u, RevList< Rev< 0u, Arr64< Hash(L"Author815") >(), L"Core Issue 1581: When are constexpr member functions defined?" >  >() },
    {  860u, RevList< Rev< 0u, Arr64< Hash(L"H. Carter") >(), L"P0860r0 : Atomic Access Property for span and mdspan" > , Rev< 1u, Arr64< Hash(L"Dan Sunderland") >(), L"p0860R1: Atomic Access Property for mdspan" >  >() },
    {  863u, RevList< Rev< 0u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1439" > , Rev< 1u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1001" >  >() },
    {  864u, RevList< Rev< 0u, Arr64< Hash(L"Author647") >(), L"C++ Standard Library Issues Resolved Directly In Albuquerque" >  >() },
    {  866u, RevList< Rev< 0u, Arr64< Hash(L"Nat Goodspeed") >(), L"Title65" >  >() },
    {  867u, RevList< Rev< 0u, Arr64< Hash(L"Author1760") >(), L"'Module Interface' is Misleading" >  >() },
    {  868u, RevList< Rev< 0u, Arr64< Hash(L"Author25") >(), L"Title19" > , Rev< 1u, Arr64< Hash(L"Author2116") >(), L"Title1635" > , Rev< 2u, Arr64< Hash(L"Author666") >(), L"Title539" >  >() },
    {  870u, RevList< Rev< 0u, Arr64< Hash(L"Author1579") >(), L"A proposal for a type trait to detect narrowing conversions" > , Rev< 1u, Arr64< Hash(L"Author681") >(), L"A proposal for a type trait to detect narrowing conversions" > , Rev< 2u, Arr64< Hash(L"Author252") >(), L"A proposal for a type trait to detect narrowing conversions" > , Rev< 3u, Arr64< Hash(L"Author1962") >(), L"A proposal for a type trait to detect narrowing conversions" > , Rev< 4u, Arr64< Hash(L"Author792") >(), L"A proposal for a type trait to detect narrowing conversions" > , Rev< 5u, Arr64< Hash(L"Author773") >(), L"A proposal for a type trait to detect narrowing conversions" >  >() },
    {  873u, RevList< Rev< 0u, Arr64< Hash(L"Corentin jabot") >(), L"p0873R0: A plea for a consistent, terse and intuitive declaration syntax" > , Rev< 1u, Arr64< Hash(L"Corentin jabot") >(), L"p0873R1: A plea for a consistent, terse and intuitive declaration syntax" >  >() },
    {  874u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"p0874R0: Syntax to anonymously refer to the current declaration contexts" >  >() },
    {  876u, RevList< Rev< 0u, Arr64< Hash(L"Oliver Kowalke") >(), L"fibers without scheduler" > , Rev< 2u, Arr64< Hash(L"Oliver Kowalke") >(), L"fibers without scheduler" > , Rev< 3u, Arr64< Hash(L"Oliver Kowalke") >(), L"fibers without scheduler" > , Rev< 5u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 6u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 8u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 9u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 10u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 11u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 12u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 13u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 14u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 15u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 16u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 17u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 18u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 19u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" > , Rev< 20u, Arr64< Hash(L"Oliver Kowalke") >(), L"fiberswithoutscheduler" >  >() },
    {  877u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"A proposal for modular macros" >  >() },
    {  878u, RevList< Rev< 0u, Arr64< Hash(L"Author1615") >(), L"Copy elision for subobjects" >  >() },
    {  879u, RevList< Rev< 0u, Arr64< Hash(L"Author499") >(), L"Constexpr for swap and swap related functions" >  >() },
    {  880u, RevList< Rev< 0u, Arr64< Hash(L"Author2217") >(), L"Numbers interaction" > , Rev< 1u, Arr64< Hash(L"Author218") >(), L"Numbers interaction" > , Rev< 2u, Arr64< Hash(L"Author1157") >(), L"Numbers interaction" >  >() },
    {  881u, RevList< Rev< 0u, Arr64< Hash(L"Author1487") >(), L"A Proposal to add stack trace library" > , Rev< 1u, Arr64< Hash(L"Author1080") >(), L"A Proposal to add stack trace library" > , Rev< 2u, Arr64< Hash(L"Author1292") >(), L"A Proposal to add stack trace library" > , Rev< 3u, Arr64< Hash(L"Author1288") >(), L"A Proposal to add stacktrace library" > , Rev< 4u, Arr64< Hash(L"Author132") >(), L"A Proposal to add stacktrace library" > , Rev< 5u, Arr64< Hash(L"Author1705") >(), L"A Proposal to add stacktrace library" > , Rev< 6u, Arr64< Hash(L"Author1974") >(), L"A Proposal to add stacktrace library" > , Rev< 7u, Arr64< Hash(L"Author594") >(), L"A Proposal to add stacktrace library" >  >() },
    {  882u, RevList< Rev< 0u, Arr64< Hash(L"Yonggang Li") >(), L"User-defined Literals for std::filesystem::path - HackMD" >  >() },
    {  883u, RevList< Rev< 0u, Arr64< Hash(L"Author1290") >(), L"Microsoft Word - P0883R0_atomicinit.docx" > , Rev< 1u, Arr64< Hash(L"Author1837") >(), L"P0883R1" > , Rev< 2u, Arr64< Hash(L"Author1520") >(), L"P0883R2 Fixing Atomic Initialization" >  >() },
    {  884u, RevList< Rev< 0u, Arr64< Hash(L"Author243") >(), L"Microsoft Word - P0884R0_noexceptpolicy.docx" >  >() },
    {  886u, RevList< Rev< 0u, Arr64< Hash(L"Author876") >(), L"Title702" >  >() },
    {  887u, RevList< Rev< 0u, Arr64< Hash(L"Author2228") >(), L"Title1705" > , Rev< 1u, Arr64< Hash(L"Author288") >(), L"Title241" >  >() },
    {  888u, RevList< Rev< 0u, Arr64< Hash(L"Author2216") >(), L"C++ Standard Library Issues to be moved in Jacksonville" >  >() },
    {  889u, RevList< Rev< 0u, Arr64< Hash(L"Author1364") >(), L"Ultimate copy elision" > , Rev< 1u, Arr64< Hash(L"Author1749") >(), L"Ultimate copy elision" >  >() },
    {  891u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Title227" > , Rev< 1u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Everyone Deserves a Little Order" > , Rev< 2u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Make strong_order a Customization Point!" >  >() },
    {  892u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"explicit(bool)" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"explicit(bool)" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"explicit(bool)" >  >() },
    {  893u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Chaining Comparisons" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Chaining Comparisons" >  >() },
    {  894u, RevList< Rev< 0u, Arr64< Hash(L"Author129") >(), L"Title111" > , Rev< 1u, Arr64< Hash(L"Author96") >(), L"Title92" >  >() },
    {  895u, RevList< Rev< 0u, Arr64< Hash(L"Author608") >(), L"Microsoft Word - P0895R0_renamingcell.docx" >  >() },
    {  896u, RevList< Rev< 0u, Arr64< Hash(L"Author1263") >(), L"Range Adaptors and Utilities" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Standard Library Concepts" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Merge the Ranges TS" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"Merge the Ranges TS" > , Rev< 4u, Arr64< Hash(L"Eric Niebler") >(), L"Merge the Ranges TS" >  >() },
    {  897u, RevList< Rev< 0u, Arr64< Hash(L"Andrey Semashev") >(), L"Title574" >  >() },
    {  898u, RevList< Rev< 0u, Arr64< Hash(L"Author2040") >(), L"Standard Library Concepts" > , Rev< 1u, Arr64< Hash(L"Author759") >(), L"Standard Library Concepts" > , Rev< 2u, Arr64< Hash(L"Casey Carter") >(), L"Standard Library Concepts" > , Rev< 3u, Arr64< Hash(L"Casey Carter") >(), L"Standard Library Concepts" >  >() },
    {  899u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"LWG 3016 is Not a Defect" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"LWG 3016 is Not a Defect" >  >() },
    {  900u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"p0900r0: An Ontology for Properties of <code>mdspan</code>" >  >() },
    {  901u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Hunter") >(), L"p0901r0: Size feedback in operator new" > , Rev< 1u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 2u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 3u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 4u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 5u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 6u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 7u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 8u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 9u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 10u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" > , Rev< 11u, Arr64< Hash(L"Andrew Hunter") >(), L"Size feedback in operator new" >  >() },
    {  902u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Hunter") >(), L"p0902r0: Move-only iterators" >  >() },
    {  903u, RevList< Rev< 0u, Arr64< Hash(L"Author478") >(), L"Title398" > , Rev< 1u, Arr64< Hash(L"Author1425") >(), L"Title1105" > , Rev< 2u, Arr64< Hash(L"Author265") >(), L"Title223" >  >() },
    {  904u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"Title10" >  >() },
    {  905u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Symmetry for spaceship" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Symmetry for spaceship" >  >() },
    {  906u, RevList< Rev< 0u, Arr64< Hash(L"Author131") >(), L"Improvement suggestions for the Modules TS" > , Rev< 1u, Arr64< Hash(L"Author271") >(), L"Improvement suggestions for the Modules TS" >  >() },
    {  907u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"p0907r0: Signed Integers are Twos Complement" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"p0907R1: Signed Integers are Twos Complement" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"p0907R2: Signed Integers are Twos Complement" > , Rev< 3u, Arr64< Hash(L"JF Bastien") >(), L"Signed Integers are Twos Complement" > , Rev< 4u, Arr64< Hash(L"JF Bastien") >(), L"Signed Integers are Twos Complement" >  >() },
    {  908u, RevList< Rev< 0u, Arr64< Hash(L"Eddie Kohler") >(), L"p0908r0: Offsetof for Pointers to Members" >  >() },
    {  909u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Module TS Supports Legacy Integration" >  >() },
    {  911u, RevList< Rev< 0u, Arr64< Hash(L"Author1465") >(), L"Title1140" > , Rev< 1u, Arr64< Hash(L"Author1302") >(), L"Title1006" >  >() },
    {  912u, RevList< Rev< 0u, Arr64< Hash(L"Author1650") >(), L"Title1280" > , Rev< 1u, Arr64< Hash(L"Author2042") >(), L"Title1581" > , Rev< 2u, Arr64< Hash(L"Author153") >(), L"Title129" > , Rev< 3u, Arr64< Hash(L"Author609") >(), L"Title500" > , Rev< 4u, Arr64< Hash(L"Author695") >(), L"Abstract" > , Rev< 5u, Arr64< Hash(L"Author1763") >(), L"P0912R5 - Merge Coroutines TS into C++20 working draft" >  >() },
    {  913u, RevList< Rev< 0u, Arr64< Hash(L"Author798") >(), L"Add symmetric coroutine control transfer" > , Rev< 1u, Arr64< Hash(L"Author2194") >(), L"Add symmetric coroutine control transfer" >  >() },
    {  914u, RevList< Rev< 0u, Arr64< Hash(L"Author880") >(), L"Add parameter preview to coroutine promise constructor" > , Rev< 1u, Arr64< Hash(L"Author1260") >(), L"Add parameter preview to coroutine promise constructor" >  >() },
    {  915u, RevList< Rev< 0u, Arr64< Hash(L"Author1751") >(), L"Untitled" >  >() },
    {  916u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Naming implementation-defined simd_abi tag types [P0916R0]" >  >() },
    {  917u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Making operator?: overloadable [P0917R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Making operator?: overloadable [P0917R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Making operator?: overloadable [P0917R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Making operator?: overloadable [P0917R3]" >  >() },
    {  918u, RevList< Rev< 0u, Arr64< Hash(L"Author509") >(), L"Title420" > , Rev< 1u, Arr64< Hash(L"Author1741") >(), L"Title1347" > , Rev< 2u, Arr64< Hash(L"Author84") >(), L"Title85" >  >() },
    {  919u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"p0919r0: Heterogeneous lookup for unordered containers" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"p0919R1: Heterogeneous lookup for unordered containers" > , Rev< 2u, Arr64< Hash(L"Mateusz Pusz") >(), L"Heterogeneous lookup for unordered containers" > , Rev< 3u, Arr64< Hash(L"Mateusz Pusz") >(), L"Heterogeneous lookup for unordered containers" >  >() },
    {  920u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"Precalculated hash values in lookup" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"Precalculated hash values in lookup" > , Rev< 2u, Arr64< Hash(L"Mateusz Pusz") >(), L"Precalculated hash values in lookup" >  >() },
    {  921u, RevList< Rev< 0u, Arr64< Hash(L"Author956") >(), L"Title776" > , Rev< 2u, Arr64< Hash(L"Titus Winters") >(), L"Title6" >  >() },
    {  922u, RevList< Rev< 0u, Arr64< Hash(L"Author66") >(), L"Title70" >  >() },
    {  923u, RevList< Rev< 0u, Arr64< Hash(L"Author1591") >(), L"Modules:Dependent ADL" > , Rev< 1u, Arr64< Hash(L"Author1053") >(), L"Modules:Dependent ADL" >  >() },
    {  924u, RevList< Rev< 0u, Arr64< Hash(L"Author1856") >(), L"Modules:Context-Sensitive Keyword" > , Rev< 1u, Arr64< Hash(L"Author1501") >(), L"Modules:Context-Sensitive Keyword" >  >() },
    {  925u, RevList< Rev< 0u, Arr64< Hash(L"Author2233") >(), L"Modules:Unqualified Using Declarations" >  >() },
    {  927u, RevList< Rev< 0u, Arr64< Hash(L"Author1013") >(), L"Title811" > , Rev< 1u, Arr64< Hash(L"James Dennett") >(), L"Title145" > , Rev< 2u, Arr64< Hash(L"James Dennett") >(), L"Title764" >  >() },
    {  928u, RevList< Rev< 0u, Arr64< Hash(L"Author2001") >(), L"Title1547" > , Rev< 1u, Arr64< Hash(L"Author1557") >(), L"Title1207" >  >() },
    {  929u, RevList< Rev< 0u, Arr64< Hash(L"Author1314") >(), L"Checking for abstract class types" > , Rev< 1u, Arr64< Hash(L"Author168") >(), L"Checking for abstract class types" > , Rev< 2u, Arr64< Hash(L"Author2024") >(), L"Checking for abstract class types" >  >() },
    {  930u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"Title1292" >  >() },
    {  931u, RevList< Rev< 0u, Arr64< Hash(L"Author747") >(), L"Title605" >  >() },
    {  932u, RevList< Rev< 0u, Arr64< Hash(L"Author1434") >(), L"Title1113" > , Rev< 1u, Arr64< Hash(L"Author766") >(), L"Title625" >  >() },
    {  933u, RevList< Rev< 0u, Arr64< Hash(L"Author1647") >(), L"Title1276" > , Rev< 1u, Arr64< Hash(L"Author646") >(), L"Title526" >  >() },
    {  934u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1464" >  >() },
    {  935u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Eradicating unnecessarily explicit default constructors from the standard library" >  >() },
    {  936u, RevList< Rev< 0u, Arr64< Hash(L"Author1249") >(), L"Microsoft Word - P0936R0_boundparam.docx" >  >() },
    {  937u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title163" >  >() },
    {  938u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title795" >  >() },
    {  939u, RevList< Rev< 0u, Arr64< Hash(L"Author703") >(), L"Title565" > , Rev< 1u, Arr64< Hash(L"Author469") >(), L"Title394" > , Rev< 2u, Arr64< Hash(L"Author927") >(), L"Title747" > , Rev< 3u, Arr64< Hash(L"Author1338") >(), L"Title1030" > , Rev< 4u, Arr64< Hash(L"Author130") >(), L"Title112" >  >() },
    {  940u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1279" > , Rev< 1u, Arr64< Hash(L"Michael Wong") >(), L"Title608" > , Rev< 2u, Arr64< Hash(L"Michael Wong") >(), L"Title1569" > , Rev< 3u, Arr64< Hash(L"Michael Wong") >(), L"Title1598" >  >() },
    {  941u, RevList< Rev< 0u, Arr64< Hash(L"Author1318") >(), L"Integrating feature-test macros into the C++ WD" > , Rev< 1u, Arr64< Hash(L"Author755") >(), L"Integrating feature-test macros into the C++ WD" > , Rev< 2u, Arr64< Hash(L"Author1565") >(), L"Integrating feature-test macros into the C++ WD" >  >() },
    {  942u, RevList< Rev< 0u, Arr64< Hash(L"Author1132") >(), L"Introducing a <smart_ptr> header" >  >() },
    {  943u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 3u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 4u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 5u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" > , Rev< 6u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Support C atomics in C++" >  >() },
    {  944u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Contiguous Ranges" >  >() },
    {  945u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"p0945r0: Generalizing alias declarations" >  >() },
    {  946u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"p0946r0: Towards consistency between <=> and other comparison operators" >  >() },
    {  947u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"p0947R0: Another take on Modules" > , Rev< 1u, Arr64< Hash(L"Richard Smith") >(), L"Another take on Modules" >  >() },
    {  949u, RevList< Rev< 0u, Arr64< Hash(L"Author1717") >(), L"Adding support for type-based metaprogramming to the standard library" >  >() },
    {  952u, RevList< Rev< 0u, Arr64< Hash(L"Author191") >(), L"A new specification for std::generate_canonical" > , Rev< 1u, Arr64< Hash(L"Author93") >(), L"A new specification for std::generate_canonical" > , Rev< 2u, Arr64< Hash(L"Author1563") >(), L"A new specification for std::generate_canonical" >  >() },
    {  953u, RevList< Rev< 0u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"constexpr reflexpr" > , Rev< 1u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"constexpr reflexpr" > , Rev< 2u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"constexpr reflexpr" >  >() },
    {  954u, RevList< Rev< 0u, Arr64< Hash(L"Author847") >(), L"Title667" >  >() },
    {  955u, RevList< Rev< 0u, Arr64< Hash(L"Author1320") >(), L"Title1019" >  >() },
    {  956u, RevList< Rev< 0u, Arr64< Hash(L"Author886") >(), L"Title715" >  >() },
    {  957u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1537" > , Rev< 1u, Arr64< Hash(L"Mingxin Wang") >(), L"WG21 Paper P0957R1" > , Rev< 2u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1629" > , Rev< 3u, Arr64< Hash(L"Mingxin Wang") >(), L"Title264" > , Rev< 4u, Arr64< Hash(L"Mingxin Wang") >(), L"Title671" > , Rev< 5u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1136" > , Rev< 6u, Arr64< Hash(L"Mingxin Wang") >(), L"Title939" > , Rev< 7u, Arr64< Hash(L"Mingxin Wang") >(), L"Title813" > , Rev< 8u, Arr64< Hash(L"Mingxin Wang") >(), L"Title621" > , Rev< 9u, Arr64< Hash(L"Mingxin Wang") >(), L"Title658" >  >() },
    {  958u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to support proposed Executors TS" > , Rev< 1u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to support proposed Executors TS" > , Rev< 2u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to support proposed Executors TS" > , Rev< 3u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to support proposed Executors TS" >  >() },
    {  959u, RevList< Rev< 0u, Arr64< Hash(L"Author1115") >(), L"Title890" > , Rev< 1u, Arr64< Hash(L"Author58") >(), L"Title61" > , Rev< 2u, Arr64< Hash(L"Author657") >(), L"Title532" >  >() },
    {  960u, RevList< Rev< 0u, Arr64< Hash(L"Author1279") >(), L"Allow initializing aggregates from a parenthesized list of values" > , Rev< 1u, Arr64< Hash(L"Author784") >(), L"Allow initializing aggregates from a parenthesized list of values" > , Rev< 2u, Arr64< Hash(L"Author1654") >(), L"Allow initializing aggregates from a parenthesized list of values" > , Rev< 3u, Arr64< Hash(L"Author199") >(), L"Allow initializing aggregates from a parenthesized list of values" >  >() },
    {  961u, RevList< Rev< 0u, Arr64< Hash(L"Author1517") >(), L"Relaxing the structured bindings customization point finding rules" > , Rev< 1u, Arr64< Hash(L"Author1840") >(), L"Relaxing the structured bindings customization point finding rules" >  >() },
    {  962u, RevList< Rev< 0u, Arr64< Hash(L"Author874") >(), L"Relaxing the range-for loop customization point finding rules" > , Rev< 1u, Arr64< Hash(L"Author751") >(), L"Relaxing the range-for loop customization point finding rules" >  >() },
    {  963u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Structured binding declaration as a condition - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Structured binding declaration as a _condition_ - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"Structured binding declaration as a _condition_ - HackMD" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"Structured binding declaration as a _condition_ - HackMD" >  >() },
    {  964u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Finding the right set of traits for simd<T> [P0964R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Finding the right set of traits for simd<T> [P0964R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Finding the right set of traits for simd<T> [P0964R2]" >  >() },
    {  965u, RevList< Rev< 0u, Arr64< Hash(L"Author1649") >(), L"Initializers of objects with automatic and dynamic storage duration have funny inconsistencies" >  >() },
    {  966u, RevList< Rev< 0u, Arr64< Hash(L"Mark Zeren") >(), L"P0966r0: <code>string::reserve</code> Should Not Shrink" > , Rev< 1u, Arr64< Hash(L"Mark Zeren") >(), L"p0966R1: <code>string::reserve</code> Should Not Shrink" >  >() },
    {  968u, RevList< Rev< 0u, Arr64< Hash(L"Author1671") >(), L"Core \"tentatively ready\" Issues" >  >() },
    {  969u, RevList< Rev< 0u, Arr64< Hash(L"Author1644") >(), L"Title1273" >  >() },
    {  970u, RevList< Rev< 0u, Arr64< Hash(L"Author439") >(), L"Better, Safer Range Access Customization Points" > , Rev< 1u, Arr64< Hash(L"Author333") >(), L"Better, Safer Range Access Customization Points" >  >() },
    {  972u, RevList< Rev< 0u, Arr64< Hash(L"Billy Robert") >(), L"Microsoft Word - d0972r0.docx" >  >() },
    {  973u, RevList< Rev< 0u, Arr64< Hash(L"Author1305") >(), L"Title1008" >  >() },
    {  974u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan Ringle") >(), L"A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration" >  >() },
    {  975u, RevList< Rev< 0u, Arr64< Hash(L"Author1240") >(), L"Title968" >  >() },
    {  976u, RevList< Rev< 0u, Arr64< Hash(L"Author237") >(), L"Title197" >  >() },
    {  977u, RevList< Rev< 0u, Arr64< Hash(L"Author1569") >(), L"Title1214" >  >() },
    {  978u, RevList< Rev< 0u, Arr64< Hash(L"the library") >(), L"Title582" >  >() },
    {  980u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title579" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title341" >  >() },
    {  981u, RevList< Rev< 0u, Arr64< Hash(L"Author1551") >(), L"Title1203" >  >() },
    {  982u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Weaken release sequences" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Weaken release sequences" >  >() },
    {  983u, RevList< Rev< 0u, Arr64< Hash(L"Gabriel Dos") >(), L"Title278" >  >() },
    {  984u, RevList< Rev< 0u, Arr64< Hash(L"Author948") >(), L"Title766" >  >() },
    {  985u, RevList< Rev< 0u, Arr64< Hash(L"Author2167") >(), L"LWG Chair post-meeting report" > , Rev< 1u, Arr64< Hash(L"Author521") >(), L"LWG Chair post-meeting report" > , Rev< 2u, Arr64< Hash(L"Author67") >(), L"LWG Chair post-meeting report" > , Rev< 3u, Arr64< Hash(L"Author311") >(), L"LWG Chair post-meeting report" > , Rev< 4u, Arr64< Hash(L"Author1518") >(), L"LWG Chair post-meeting report" >  >() },
    {  986u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Comparison of Modules Proposals" >  >() },
    {  987u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"polymorphic_allocator<byte> instead of type-erasure" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"Microsoft Word - P0987_polyalloc_instead_of_erasure.docx" > , Rev< 2u, Arr64< Hash(L"Pablo Halpern") >(), L"Microsoft Word - P0987R2_polyalloc_instead_of_erasure.docx" >  >() },
    {  988u, RevList< Rev< 0u, Arr64< Hash(L"Author603") >(), L"Title494" >  >() },
    {  989u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title1032" >  >() },
    {  990u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title18" >  >() },
    {  991u, RevList< Rev< 0u, Arr64< Hash(L"Author72") >(), L"Title74" >  >() },
    {  992u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Constexpr" >  >() },
    {  993u, RevList< Rev< 0u, Arr64< Hash(L"Author397") >(), L"Reflection" >  >() },
    {  994u, RevList< Rev< 0u, Arr64< Hash(L"Author2078") >(), L"Title1609" >  >() },
    {  995u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"p0995R0: Improving atomic_flag" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Improving atomic_flag" >  >() },
    {  996u, RevList< Rev< 1u, Arr64< Hash(L"Author2047") >(), L"Rebase Library Fundamentals TS on C++17" >  >() },
    {  997u, RevList< Rev< 0u, Arr64< Hash(L"Nathan Myers") >(), L"Title823" >  >() },
    {  999u, RevList< Rev< 0u, Arr64< Hash(L"Author1740") >(), L"Title1346" >  >() },
    { 1000u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1055" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title993" > , Rev< 2u, Arr64< Hash(L"Herb Sutter") >(), L"Title1655" > , Rev< 3u, Arr64< Hash(L"Herb Sutter") >(), L"Title1433" > , Rev< 4u, Arr64< Hash(L"Herb Sutter") >(), L"Title440" > , Rev< 5u, Arr64< Hash(L"Herb Sutter") >(), L"Title693" > , Rev< 6u, Arr64< Hash(L"Herb Sutter") >(), L"Title1381" >  >() },
    { 1001u, RevList< Rev< 0u, Arr64< Hash(L"Author1580") >(), L"Target Vectorization Policies from Parallelism V2 TS to C++20" > , Rev< 1u, Arr64< Hash(L"Author235") >(), L"Target Vectorization Policies from Parallelism V2 TS to C++20" > , Rev< 2u, Arr64< Hash(L"Author1628") >(), L"Target Vectorization Policies from Parallelism V2 TS to C++20" >  >() },
    { 1002u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title334" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title572" >  >() },
    { 1003u, RevList< Rev< 0u, Arr64< Hash(L"Author15") >(), L"C++ Standard Library Issues Resolved Directly In Jacksonville" >  >() },
    { 1004u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title568" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title346" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title547" >  >() },
    { 1005u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"p1005r0: namespace std { namespace fs = filesystem; }" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"`namespace std { namespace fs = filesystem; }`" >  >() },
    { 1006u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title1264" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title854" >  >() },
    { 1007u, RevList< Rev< 0u, Arr64< Hash(L"Author1217") >(), L"Title954" > , Rev< 1u, Arr64< Hash(L"Author1681") >(), L"Title1306" > , Rev< 2u, Arr64< Hash(L"Author1454") >(), L"Title1132" > , Rev< 3u, Arr64< Hash(L"Author1835") >(), L"Title1426" >  >() },
    { 1008u, RevList< Rev< 0u, Arr64< Hash(L"Author244") >(), L"Title200" > , Rev< 1u, Arr64< Hash(L"Author1269") >(), L"Title983" >  >() },
    { 1009u, RevList< Rev< 0u, Arr64< Hash(L"Author1775") >(), L"Title1379" > , Rev< 1u, Arr64< Hash(L"Author1792") >(), L"Title1393" > , Rev< 2u, Arr64< Hash(L"Author2101") >(), L"Title1628" >  >() },
    { 1010u, RevList< Rev< 0u, Arr64< Hash(L"Mark Zeren") >(), L"p1010R0: Container support for implicit lifetime types" > , Rev< 1u, Arr64< Hash(L"Mark Zeren") >(), L"Container support for implicit lifetime types" >  >() },
    { 1011u, RevList< Rev< 0u, Arr64< Hash(L"Author734") >(), L"Title591" >  >() },
    { 1012u, RevList< Rev< 0u, Arr64< Hash(L"Author2135") >(), L"Title1647" > , Rev< 1u, Arr64< Hash(L"Frank Zingsheim") >(), L"Title1332" >  >() },
    { 1013u, RevList< Rev< 0u, Arr64< Hash(L"Author2176") >(), L"Explicit concept expressions" > , Rev< 1u, Arr64< Hash(L"Author1491") >(), L"Explicit concept expressions" >  >() },
    { 1014u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Unit type" >  >() },
    { 1015u, RevList< Rev< 0u, Arr64< Hash(L"Author567") >(), L"Title460" >  >() },
    { 1016u, RevList< Rev< 0u, Arr64< Hash(L"Author985") >(), L"P1016R0" >  >() },
    { 1017u, RevList< Rev< 0u, Arr64< Hash(L"Hartmut Kaiser") >(), L"Title1692" >  >() },
    { 1018u, RevList< Rev< 0u, Arr64< Hash(L"Author2140") >(), L"Evolution status after Jacksonville 2018" > , Rev< 1u, Arr64< Hash(L"Author547") >(), L"Evolution status after Rapperswil 2018" > , Rev< 2u, Arr64< Hash(L"Author1087") >(), L"Evolution status after San Diego 2018" > , Rev< 3u, Arr64< Hash(L"Author422") >(), L"Evolution status after Kona 2019" > , Rev< 4u, Arr64< Hash(L"Author1832") >(), L"Evolution status after Cologne 2019" > , Rev< 5u, Arr64< Hash(L"JF Bastien") >(), L"Language Evolution status after Belfast 2019" > , Rev< 6u, Arr64< Hash(L"JF Bastien") >(), L"Language Evolution status after Prague 2020" > , Rev< 7u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2020/032020/10" > , Rev< 8u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2020/112021/01" > , Rev< 9u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/012021/03" > , Rev< 10u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/04" > , Rev< 11u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/05" > , Rev< 12u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/062021/08" > , Rev< 13u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/082021/09" > , Rev< 14u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2021/092022/01" > , Rev< 15u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2022/012022/02" > , Rev< 16u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2022/022022/06" > , Rev< 17u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2022/062022/07" > , Rev< 18u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status pandemic edition 2022/072022/11" > , Rev< 19u, Arr64< Hash(L"JF Bastien") >(), L"C++ Language Evolution status" >  >() },
    { 1019u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"Title722" > , Rev< 1u, Arr64< Hash(L"Jared Hoberock") >(), L"Title423" > , Rev< 2u, Arr64< Hash(L"Jared Hoberock") >(), L"Title1391" >  >() },
    { 1020u, RevList< Rev< 0u, Arr64< Hash(L"Glen Joseph") >(), L"Smart pointer creation with default initialization" > , Rev< 1u, Arr64< Hash(L"Glen Joseph") >(), L"Smart pointer creation with default initialization" >  >() },
    { 1021u, RevList< Rev< 0u, Arr64< Hash(L"Author910") >(), L"Extensions to Class Template Argument Deduction" > , Rev< 1u, Arr64< Hash(L"Author1916") >(), L"Filling holes in Class Template Argument Deduction" > , Rev< 2u, Arr64< Hash(L"Author90") >(), L"Filling holes in Class Template Argument Deduction" > , Rev< 3u, Arr64< Hash(L"Author161") >(), L"Filling holes in Class Template Argument Deduction" > , Rev< 4u, Arr64< Hash(L"Author1068") >(), L"Filling holes in Class Template Argument Deduction" > , Rev< 5u, Arr64< Hash(L"Author1112") >(), L"Filling holes in Class Template Argument Deduction" > , Rev< 6u, Arr64< Hash(L"Author944") >(), L"Filling holes in Class Template Argument Deduction" >  >() },
    { 1022u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title699" >  >() },
    { 1023u, RevList< Rev< 0u, Arr64< Hash(L"Author434") >(), L"Title369" >  >() },
    { 1024u, RevList< Rev< 0u, Arr64< Hash(L"Author2151") >(), L"Title1658" > , Rev< 1u, Arr64< Hash(L"Author2181") >(), L"Title1676" > , Rev< 2u, Arr64< Hash(L"Author1474") >(), L"Title1144" > , Rev< 3u, Arr64< Hash(L"Author117") >(), L"Title103" >  >() },
    { 1025u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Update The Reference To The Unicode Standard" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Update The Reference To The Unicode Standard" >  >() },
    { 1026u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title229" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title563" >  >() },
    { 1028u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title1361" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title11" > , Rev< 2u, Arr64< Hash(L"Niall Douglas") >(), L"Title536" > , Rev< 3u, Arr64< Hash(L"Niall Douglas") >(), L"Title91" > , Rev< 4u, Arr64< Hash(L"Niall Douglas") >(), L"Title1049" > , Rev< 5u, Arr64< Hash(L"Niall Douglas") >(), L"Title1325" > , Rev< 6u, Arr64< Hash(L"Niall Douglas") >(), L"Title1522" >  >() },
    { 1029u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title392" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title2" > , Rev< 2u, Arr64< Hash(L"Niall Douglas") >(), L"Title1349" > , Rev< 3u, Arr64< Hash(L"Niall Douglas") >(), L"Title855" >  >() },
    { 1030u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title1429" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title123" > , Rev< 2u, Arr64< Hash(L"Niall Douglas") >(), L"Title283" > , Rev< 3u, Arr64< Hash(L"Niall Douglas") >(), L"Title1605" > , Rev< 4u, Arr64< Hash(L"Niall Douglas") >(), L"Title824" > , Rev< 5u, Arr64< Hash(L"Niall Douglas") >(), L"Title1500" > , Rev< 6u, Arr64< Hash(L"Niall Douglas") >(), L"Title196" > , Rev< 7u, Arr64< Hash(L"Niall Douglas") >(), L"Title537" > , Rev< 8u, Arr64< Hash(L"Niall Douglas") >(), L"Title120" >  >() },
    { 1031u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title287" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title183" > , Rev< 2u, Arr64< Hash(L"Niall Douglas") >(), L"Title592" >  >() },
    { 1032u, RevList< Rev< 0u, Arr64< Hash(L"Author1788") >(), L"Misc constexpr bits" > , Rev< 1u, Arr64< Hash(L"Author1206") >(), L"Misc constexpr bits" >  >() },
    { 1033u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"P1033R0 Rangify the uninitialised memory algorithms!" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"P1033R1 Rangify the uninitialised memory algorithms!" >  >() },
    { 1035u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"p1035R0: Input range adaptors" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"Input range adaptors" > , Rev< 2u, Arr64< Hash(L"Christopher Di") >(), L"Input range adaptors" > , Rev< 3u, Arr64< Hash(L"Christopher Di") >(), L"Input range adaptors" > , Rev< 4u, Arr64< Hash(L"Christopher Di") >(), L"Input range adaptors" > , Rev< 5u, Arr64< Hash(L"Christopher Di") >(), L"Input Range Adaptors" > , Rev< 6u, Arr64< Hash(L"Christopher Di") >(), L"Input Range Adaptors" > , Rev< 7u, Arr64< Hash(L"Christopher Di") >(), L"Input Range Adaptors" >  >() },
    { 1037u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Deep Integration of the Ranges TS" >  >() },
    { 1039u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"I got you, FAM - Flexible Array Members for C++" >  >() },
    { 1040u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"p1040R0: std::embed" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"p1040R1: std::embed" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" > , Rev< 5u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" > , Rev< 6u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" > , Rev< 7u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::embed" >  >() },
    { 1041u, RevList< Rev< 0u, Arr64< Hash(L"Author442") >(), L"Title372" > , Rev< 1u, Arr64< Hash(L"cpp@rmf.io") >(), L"Make char16_t/char32_t string literals be UTF-16/32" > , Rev< 3u, Arr64< Hash(L"cpp@rmf.io") >(), L"Make char16_t/char32_t string literals be UTF-16/32" > , Rev< 4u, Arr64< Hash(L"cpp@rmf.io") >(), L"Make char16_t/char32_t string literals be UTF-16/32" >  >() },
    { 1042u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"__VA_OPT__ wording clarifications" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"__VA_OPT__ wording clarifications" >  >() },
    { 1043u, RevList< Rev< 0u, Arr64< Hash(L"Author1399") >(), L"P1043r0 Narrow contracts in <code>string_view</code> versus P0903R1" >  >() },
    { 1044u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Rodgers") >(), L"p1044R0: std::async() in an Executors World" >  >() },
    { 1045u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title49" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"`constexpr` Function Parameters" >  >() },
    { 1046u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title469" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"Automatically Generate More Operators" > , Rev< 2u, Arr64< Hash(L"David Stone") >(), L"Automatically Generate More Operators" >  >() },
    { 1048u, RevList< Rev< 0u, Arr64< Hash(L"Juan Alday") >(), L"Title194" > , Rev< 1u, Arr64< Hash(L"Juan Alday") >(), L"P1048R1" >  >() },
    { 1050u, RevList< Rev< 0u, Arr64< Hash(L"Author1433") >(), L"Title1112" > , Rev< 1u, Arr64< Hash(L"Author1544") >(), L"p1050r1" >  >() },
    { 1051u, RevList< Rev< 0u, Arr64< Hash(L"Vicente J") >(), L"p1051r0" >  >() },
    { 1052u, RevList< Rev< 0u, Arr64< Hash(L"Author881") >(), L"Modules, Macros, and Build Systems" >  >() },
    { 1053u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"p1053R0: Future-proofing continuations for executors" > , Rev< 1u, Arr64< Hash(L"Lee Howes") >(), L"Future-proofing continuations for executors" >  >() },
    { 1054u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"p1054R0: A Unified Futures Proposal for C++" >  >() },
    { 1055u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"Title281" >  >() },
    { 1056u, RevList< Rev< 0u, Arr64< Hash(L"Author615") >(), L"Add coroutine task type" > , Rev< 1u, Arr64< Hash(L"Author1148") >(), L"Add coroutine lazy type" >  >() },
    { 1059u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Rodgers") >(), L"p1059R0: Adapting Asio to use std::expected" >  >() },
    { 1061u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 5u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 6u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 7u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 8u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 9u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" > , Rev< 10u, Arr64< Hash(L"Barry Revzin") >(), L"Structured Bindings can introduce a Pack" >  >() },
    { 1062u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"p1062R0: Diet Graphics" >  >() },
    { 1063u, RevList< Rev< 0u, Arr64< Hash(L"Author2098") >(), L"Title1626" > , Rev< 1u, Arr64< Hash(L"Author2186") >(), L"Title1680" > , Rev< 2u, Arr64< Hash(L"Author940") >(), L"Title758" >  >() },
    { 1064u, RevList< Rev< 0u, Arr64< Hash(L"Author1048") >(), L"Allowing Virtual Function Calls in Constant Expressions" >  >() },
    { 1065u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr INVOKE" > , Rev< 1u, Arr64< Hash(L"Tomasz Kami\xC5\x84ski") >(), L"constexpr INVOKE" > , Rev< 2u, Arr64< Hash(L"Tomasz Kami\xC5\x84ski") >(), L"constexpr INVOKE" >  >() },
    { 1066u, RevList< Rev< 0u, Arr64< Hash(L"Mathias Stearn") >(), L"p1066R0: How to catch an exception_ptr without even try-ing" > , Rev< 1u, Arr64< Hash(L"Mathias Stearn") >(), L"How to catch an exception_ptr without even try-ing" >  >() },
    { 1067u, RevList< Rev< 0u, Arr64< Hash(L"Author1264") >(), L"C++ Dependency Management: Package Consumption vs Development" >  >() },
    { 1068u, RevList< Rev< 0u, Arr64< Hash(L"Ilya Burylov") >(), L"Title448" > , Rev< 1u, Arr64< Hash(L"Ilya Burylov") >(), L"Title1418" > , Rev< 2u, Arr64< Hash(L"Ilya Burylov") >(), L"Title1696" > , Rev< 3u, Arr64< Hash(L"Ilya Burylov") >(), L"Title228" > , Rev< 4u, Arr64< Hash(L"Ilya Burylov") >(), L"Title1176" > , Rev< 5u, Arr64< Hash(L"Ilya Burylov") >(), L"Title782" > , Rev< 6u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R6.docx" > , Rev< 7u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R7.docx" > , Rev< 8u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R8" > , Rev< 9u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R9" > , Rev< 10u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R10" > , Rev< 11u, Arr64< Hash(L"Ilya Burylov") >(), L"P1068R11" >  >() },
    { 1069u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Refining standard library support for Class Template Argument Deduction" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus") >(), L"Inferencing heap objects" >  >() },
    { 1070u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title270" >  >() },
    { 1071u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1183" >  >() },
    { 1072u, RevList< Rev< 0u, Arr64< Hash(L"Author1553") >(), L"Title1204" > , Rev< 1u, Arr64< Hash(L"Chris Kennelly") >(), L"Optimized Initialization for basic_string and vector" > , Rev< 2u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_default_init" > , Rev< 3u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_default_init" > , Rev< 4u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_default_init" > , Rev< 5u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_default_init" > , Rev< 6u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_and_overwrite" > , Rev< 7u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_and_overwrite" > , Rev< 8u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_and_overwrite" > , Rev< 9u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_and_overwrite" > , Rev< 10u, Arr64< Hash(L"Chris Kennelly") >(), L"basic_string::resize_and_overwrite" >  >() },
    { 1073u, RevList< Rev< 0u, Arr64< Hash(L"Author1883") >(), L"Title1460" > , Rev< 1u, Arr64< Hash(L"Author522") >(), L"Title429" > , Rev< 2u, Arr64< Hash(L"Author1324") >(), L"Title1021" > , Rev< 3u, Arr64< Hash(L"Author1346") >(), L"Title1040" >  >() },
    { 1074u, RevList< Rev< 0u, Arr64< Hash(L"Maged Michael") >(), L"Title1229" >  >() },
    { 1076u, RevList< Rev< 0u, Arr64< Hash(L"Author5") >(), L"Editorial clause reorganization" > , Rev< 1u, Arr64< Hash(L"Author201") >(), L"Editorial clause reorganization" >  >() },
    { 1077u, RevList< Rev< 0u, Arr64< Hash(L"Author1489") >(), L"Allowing Virtual Destructors to be \"Trivial\"" >  >() },
    { 1079u, RevList< Rev< 0u, Arr64< Hash(L"Author916") >(), L"Title737" >  >() },
    { 1080u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2018/03/28 - 2018/04/25" >  >() },
    { 1081u, RevList< Rev< 0u, Arr64< Hash(L"Author1312") >(), L"P1081R0" >  >() },
    { 1082u, RevList< Rev< 0u, Arr64< Hash(L"Author565") >(), L"C++ Standard Library Issues to be moved in Rapperswil" >  >() },
    { 1083u, RevList< Rev< 0u, Arr64< Hash(L"Author1422") >(), L"Title1104" > , Rev< 1u, Arr64< Hash(L"Author19") >(), L"P1083r1 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 2u, Arr64< Hash(L"Author465") >(), L"P1083r2 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 3u, Arr64< Hash(L"Author1581") >(), L"P1083r3 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 4u, Arr64< Hash(L"Author754") >(), L"Title612" > , Rev< 5u, Arr64< Hash(L"Author938") >(), L"Title757" > , Rev< 6u, Arr64< Hash(L"Author11") >(), L"Title13" > , Rev< 7u, Arr64< Hash(L"Author1255") >(), L"Title976" > , Rev< 8u, Arr64< Hash(L"Pablo Halpern") >(), L"Move `resource_adaptor` from Library TS to the C++ WP" >  >() },
    { 1084u, RevList< Rev< 0u, Arr64< Hash(L"Author1321") >(), L"Today's return-type-requirements Are Insufficient" > , Rev< 1u, Arr64< Hash(L"Author435") >(), L"Today's return-type-requirements Are Insufficient" > , Rev< 2u, Arr64< Hash(L"Author1851") >(), L"Today's return-type-requirements Are Insufficient" >  >() },
    { 1085u, RevList< Rev< 0u, Arr64< Hash(L"Author2137") >(), L"Title1648" > , Rev< 1u, Arr64< Hash(L"Author1841") >(), L"Title1427" > , Rev< 2u, Arr64< Hash(L"Author2059") >(), L"Title1597" >  >() },
    { 1086u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title370" >  >() },
    { 1087u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"C++ Modules" >  >() },
    { 1089u, RevList< Rev< 0u, Arr64< Hash(L"Robert Douglas") >(), L"Title660" > , Rev< 2u, Arr64< Hash(L"Robert Douglas") >(), L"Title1456" >  >() },
    { 1090u, RevList< Rev< 0u, Arr64< Hash(L"Author170") >(), L"Aggregate initialization in the presence of deleted constructors" >  >() },
    { 1091u, RevList< Rev< 0u, Arr64< Hash(L"Nicolas Lesser") >(), L"Title816" > , Rev< 1u, Arr64< Hash(L"Nicolas Lesser") >(), L"Title492" > , Rev< 2u, Arr64< Hash(L"Nicolas Lesser") >(), L"Extending structured bindings to be more like variable declarations" > , Rev< 3u, Arr64< Hash(L"Nicolas Lesser") >(), L"Extending structured bindings to be more like variable declarations" >  >() },
    { 1093u, RevList< Rev< 0u, Arr64< Hash(L"Author1542") >(), L"Title1195" >  >() },
    { 1094u, RevList< Rev< 0u, Arr64< Hash(L"Author1744") >(), L"Nested Inline Namespaces" > , Rev< 1u, Arr64< Hash(L"Author2104") >(), L"Nested Inline Namespaces" > , Rev< 2u, Arr64< Hash(L"Author1814") >(), L"Nested Inline Namespaces" >  >() },
    { 1095u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title1499" >  >() },
    { 1096u, RevList< Rev< 0u, Arr64< Hash(L"Author1360") >(), L"Title1057" >  >() },
    { 1097u, RevList< Rev< 0u, Arr64< Hash(L"R. Martinho") >(), L"Named character escapes" > , Rev< 1u, Arr64< Hash(L"R. Martinho") >(), L"Title1171" > , Rev< 2u, Arr64< Hash(L"R. Martinho") >(), L"Named character escapes" >  >() },
    { 1099u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"p1099R0: Using Enum" > , Rev< 2u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"p1099R2: Using Enum" > , Rev< 3u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Using Enum" > , Rev< 4u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Using Enum" > , Rev< 5u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Using Enum" >  >() },
    { 1100u, RevList< Rev< 0u, Arr64< Hash(L"Vinnie Falco") >(), L"Efficient composition with DynamicBuffer" >  >() },
    { 1101u, RevList< Rev< 0u, Arr64< Hash(L"Mikhail Maltsev") >(), L"Vector Length Agnostic SIMD" >  >() },
    { 1102u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"Down with ()!" > , Rev< 1u, Arr64< Hash(L"Alex Christensen") >(), L"Down with <code>()</code>!" > , Rev< 2u, Arr64< Hash(L"Alex Christensen") >(), L"Down with ()!" >  >() },
    { 1103u, RevList< Rev< 0u, Arr64< Hash(L"Author1404") >(), L"C++ Technical Specification" > , Rev< 1u, Arr64< Hash(L"Author2019") >(), L"Merging Modules" > , Rev< 2u, Arr64< Hash(L"Author1529") >(), L"Merging Modules" > , Rev< 3u, Arr64< Hash(L"Author1159") >(), L"Merging Modules" >  >() },
    { 1105u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Leaving no room for a lower-level language: A C++ Subset" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Leaving no room for a lower-level language: A C++ Subset" >  >() },
    { 1108u, RevList< Rev< 0u, Arr64< Hash(L"Hal Finkel") >(), L"web_view" > , Rev< 1u, Arr64< Hash(L"Hal Finkel") >(), L"web_view" > , Rev< 2u, Arr64< Hash(L"Hal Finkel") >(), L"web_view" > , Rev< 3u, Arr64< Hash(L"Hal Finkel") >(), L"web_view" > , Rev< 4u, Arr64< Hash(L"Hal Finkel") >(), L"web_view" >  >() },
    { 1109u, RevList< Rev< 0u, Arr64< Hash(L"Author70") >(), L"P1109" > , Rev< 1u, Arr64< Hash(L"Author1984") >(), L"P1109R1" >  >() },
    { 1110u, RevList< Rev< 0u, Arr64< Hash(L"Jeffrey Yasskin") >(), L"A placeholder with no name" >  >() },
    { 1111u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Resolutions to NB Comments on the Parallelism TS v2" >  >() },
    { 1112u, RevList< Rev< 0u, Arr64< Hash(L"Author947") >(), L"Microsoft Word - cppprop3d.doc" > , Rev< 1u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - p1112r1.doc" > , Rev< 2u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - p1112r2.doc" > , Rev< 3u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - p1112r3.doc" > , Rev< 4u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - p1112r4.doc" > , Rev< 5u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - p1112r5.doc" >  >() },
    { 1113u, RevList< Rev< 0u, Arr64< Hash(L"Author1424") >(), L"Core \"ready\" Issues" >  >() },
    { 1114u, RevList< Rev< 0u, Arr64< Hash(L"Author643") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 1115u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title319" > , Rev< 1u, Arr64< Hash(L"Marc Mutz") >(), L"Title348" > , Rev< 2u, Arr64< Hash(L"Marc Mutz") >(), L"Title872" > , Rev< 3u, Arr64< Hash(L"Marc Mutz") >(), L"Title507" >  >() },
    { 1116u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title1544" >  >() },
    { 1118u, RevList< Rev< 0u, Arr64< Hash(L"Author679") >(), L"Title550" >  >() },
    { 1119u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"ABI for std::hardware_{constructive,destructive}_interference_size" >  >() },
    { 1120u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Consistency improvements for <=> and other comparison operators" >  >() },
    { 1121u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Title832" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Title131" > , Rev< 2u, Arr64< Hash(L"Maged M") >(), L"Title28" > , Rev< 3u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointers" >  >() },
    { 1122u, RevList< Rev< 0u, Arr64< Hash(L"Paul McKenney") >(), L"Title1491" > , Rev< 1u, Arr64< Hash(L"Paul McKenney") >(), L"Title1152" > , Rev< 2u, Arr64< Hash(L"Paul McKenney") >(), L"Title677" > , Rev< 3u, Arr64< Hash(L"Paul McKenney") >(), L"Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)" > , Rev< 4u, Arr64< Hash(L"Paul McKenney") >(), L"Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)" >  >() },
    { 1123u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Sunderland") >(), L"Editorial Guidance for merging P0019r8 and P0528r3" >  >() },
    { 1128u, RevList< Rev< 0u, Arr64< Hash(L"Author1082") >(), L"Summer 2018 WG21 Batavia LWG Meeting Information" >  >() },
    { 1130u, RevList< Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Module Resource Requirement Propagation" >  >() },
    { 1131u, RevList< Rev< 0u, Arr64< Hash(L"Author1827") >(), L"Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" > , Rev< 1u, Arr64< Hash(L"Author1175") >(), L"Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" > , Rev< 2u, Arr64< Hash(L"Author1241") >(), L"Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" >  >() },
    { 1132u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"p1132R0: out_ptr - a scalable output pointer abstraction" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 5u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 6u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 7u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" > , Rev< 8u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"out_ptr - a scalable output pointer abstraction" >  >() },
    { 1133u, RevList< Rev< 0u, Arr64< Hash(L"Vinnie Falco") >(), L"Networking TS Associations For Call Wrappers" >  >() },
    { 1135u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 3u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 4u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 5u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" > , Rev< 6u, Arr64< Hash(L"Bryce Adelstein") >(), L"The C++20 Synchronization Library" >  >() },
    { 1136u, RevList< Rev< 0u, Arr64< Hash(L"Author1549") >(), L"Title1202" >  >() },
    { 1137u, RevList< Rev< 0u, Arr64< Hash(L"maintain consistency") >(), L"SG16: Unicode meeting summaries 2018/05/16 - 2018/06/20" >  >() },
    { 1138u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title805" >  >() },
    { 1139u, RevList< Rev< 0u, Arr64< Hash(L"R. Martinho") >(), L"Address wording issues related to ISO 10646" > , Rev< 1u, Arr64< Hash(L"R. Martinho") >(), L"Address wording issues related to ISO 10646" > , Rev< 2u, Arr64< Hash(L"R. Martinho") >(), L"Address wording issues related to ISO 10646" >  >() },
    { 1141u, RevList< Rev< 0u, Arr64< Hash(L"Author273") >(), L"Yet another approach for constrained declarations" > , Rev< 1u, Arr64< Hash(L"Author226") >(), L"Yet another approach for constrained declarations" > , Rev< 2u, Arr64< Hash(L"Author1370") >(), L"Yet another approach for constrained declarations" >  >() },
    { 1142u, RevList< Rev< 0u, Arr64< Hash(L"Author1099") >(), L"Thoughts on a conservative terse syntax for constraints" >  >() },
    { 1143u, RevList< Rev< 0u, Arr64< Hash(L"Author1521") >(), L"Title1182" > , Rev< 1u, Arr64< Hash(L"Author925") >(), L"Title745" > , Rev< 2u, Arr64< Hash(L"Author649") >(), L"Title529" >  >() },
    { 1144u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 4u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 5u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 6u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Object relocation in terms of move plus destroy" > , Rev< 7u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" > , Rev< 8u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" > , Rev< 9u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" > , Rev< 10u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" > , Rev< 11u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" > , Rev< 12u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_trivially_relocatable" >  >() },
    { 1145u, RevList< Rev< 0u, Arr64< Hash(L"Vinnie Falco") >(), L"Buffer Sequence Adaptors" >  >() },
    { 1147u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Printing `volatile` Pointers" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"Printing `volatile` Pointers" >  >() },
    { 1148u, RevList< Rev< 0u, Arr64< Hash(L"Author1152") >(), L"Cleaning up [strings]" >  >() },
    { 1149u, RevList< Rev< 0u, Arr64< Hash(L"Author507") >(), L"Constexpr regex" >  >() },
    { 1152u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>" > , Rev< 3u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>" > , Rev< 4u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>" >  >() },
    { 1153u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Copying volatile subobjects is not trivial" >  >() },
    { 1154u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Type traits for structural comparison" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Type traits for structural comparison" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Type traits for structural comparison" >  >() },
    { 1155u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"More implicit moves" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"More implicit moves" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"More implicit moves" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"More implicit moves" >  >() },
    { 1156u, RevList< Rev< 0u, Arr64< Hash(L"Author2144") >(), L"Merged Modules and Tooling" >  >() },
    { 1157u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Multi-argument constrained-parameter - HackMD" >  >() },
    { 1158u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Concept-defined placeholder types - HackMD" >  >() },
    { 1159u, RevList< Rev< 0u, Arr64< Hash(L"Author1413") >(), L"Title1100" >  >() },
    { 1160u, RevList< Rev< 0u, Arr64< Hash(L"Attila Feh") >(), L"P1160R0" > , Rev< 1u, Arr64< Hash(L"Author1755") >(), L"Microsoft Word - P1160R1" >  >() },
    { 1161u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Deprecate uses of the comma operator in subscripting expressions" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Deprecate uses of the comma operator in subscripting expressions" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Deprecate uses of the comma operator in subscripting expressions" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Deprecate uses of the comma operator in subscripting expressions" >  >() },
    { 1163u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title211" >  >() },
    { 1164u, RevList< Rev< 0u, Arr64< Hash(L"Author1184") >(), L"Microsoft Word - D1164R0_create_directory_180824.docx" > , Rev< 1u, Arr64< Hash(L"Author1098") >(), L"Microsoft Word - P1164R1R1_create_directory_190222.docx" >  >() },
    { 1165u, RevList< Rev< 0u, Arr64< Hash(L"Author225") >(), L"Title184" > , Rev< 1u, Arr64< Hash(L"Author1950") >(), L"Make stateful allocator propagation more consistent for `operator+(basic_string)`" >  >() },
    { 1166u, RevList< Rev< 0u, Arr64< Hash(L"Author489") >(), L"Title408" >  >() },
    { 1167u, RevList< Rev< 0u, Arr64< Hash(L"Author1964") >(), L"Improving function templates with Class Template Argument Deduction" >  >() },
    { 1168u, RevList< Rev< 0u, Arr64< Hash(L"Author1221") >(), L"How to make Terse Notation soar with Class Template Argument Deduction" >  >() },
    { 1169u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"static operator()" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"static `operator()`" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"static `operator()`" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"static operator()" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"static operator()" >  >() },
    { 1170u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Overload sets as function parameters" >  >() },
    { 1171u, RevList< Rev< 0u, Arr64< Hash(L"Author448") >(), L"Title377" >  >() },
    { 1172u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title569" > , Rev< 1u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1356" >  >() },
    { 1175u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"a simple and practical optional reference for C++" >  >() },
    { 1177u, RevList< Rev< 0u, Arr64< Hash(L"Author1335") >(), L"Title1027" > , Rev< 1u, Arr64< Hash(L"Author1493") >(), L"Title1161" >  >() },
    { 1178u, RevList< Rev< 0u, Arr64< Hash(L"Author1798") >(), L"C++ Compile" >  >() },
    { 1179u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1120" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title327" >  >() },
    { 1180u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Response to P1156" >  >() },
    { 1181u, RevList< Rev< 0u, Arr64< Hash(L"Morwenn") >(), L"Proposing <code>unless</code>" >  >() },
    { 1182u, RevList< Rev< 0u, Arr64< Hash(L"Author551") >(), L"New names for the power-of-2 templates (and their header)" >  >() },
    { 1184u, RevList< Rev< 0u, Arr64< Hash(L"Author548") >(), L"A Module Mapper" > , Rev< 1u, Arr64< Hash(L"Author2169") >(), L"A Module Mapper" > , Rev< 2u, Arr64< Hash(L"Author2004") >(), L"A Module Mapper" >  >() },
    { 1185u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"<=> != ==" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"<=> != ==" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"<=> != ==" >  >() },
    { 1186u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"When do you actually use <=>?" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"When do you actually use <=>?" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"When do you actually use <=>?" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"When do you actually use <=>?" >  >() },
    { 1187u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"A type trait for std::compare_3way()'s type" >  >() },
    { 1188u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Library utilities for <=>" >  >() },
    { 1189u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Adding <=> to library" >  >() },
    { 1190u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title386" >  >() },
    { 1191u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title1260" >  >() },
    { 1192u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Rodgers") >(), L"p1192R0: Experience report - integrating Executors with Parallel Algorithms" > , Rev< 1u, Arr64< Hash(L"Thomas Rodgers") >(), L"p1192R1: Experience report - integrating Executors with Parallel Algorithms" >  >() },
    { 1193u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Explicitly Specified Returns for (Implicit) Conversions" >  >() },
    { 1194u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"P1194: The Compromise Executors Proposal: A lazy simplification of P0443" >  >() },
    { 1195u, RevList< Rev< 0u, Arr64< Hash(L"Author1421") >(), L"Making <system_error> constexpr" >  >() },
    { 1196u, RevList< Rev< 0u, Arr64< Hash(L"Author1773") >(), L"Value-based std::error_category comparison" >  >() },
    { 1197u, RevList< Rev< 0u, Arr64< Hash(L"Author2142") >(), L"A non-allocating overload of error_category::message()" >  >() },
    { 1198u, RevList< Rev< 0u, Arr64< Hash(L"Author297") >(), L"Adding error_category::failed()" >  >() },
    { 1199u, RevList< Rev< 0u, Arr64< Hash(L"Author974") >(), L"A simple proposal for unifying generic and object-oriented programming" >  >() },
    { 1200u, RevList< Rev< 0u, Arr64< Hash(L"Author2122") >(), L"Title1641" >  >() },
    { 1201u, RevList< Rev< 0u, Arr64< Hash(L"Author1764") >(), L"variant direct comparisons with held types" >  >() },
    { 1202u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title415" > , Rev< 1u, Arr64< Hash(L"David Goldblatt") >(), L"Title213" > , Rev< 2u, Arr64< Hash(L"David Goldblatt") >(), L"Title178" > , Rev< 3u, Arr64< Hash(L"David Goldblatt") >(), L"Asymmetric Fences" > , Rev< 4u, Arr64< Hash(L"David Goldblatt") >(), L"P1202R4" > , Rev< 5u, Arr64< Hash(L"David Goldblatt") >(), L"P1202R5" >  >() },
    { 1203u, RevList< Rev< 0u, Arr64< Hash(L"Author1981") >(), L"Modular main()" >  >() },
    { 1204u, RevList< Rev< 0u, Arr64< Hash(L"Author1218") >(), L"Canonical Project Structure" >  >() },
    { 1205u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"Teleportation via <code>co_await</code>" >  >() },
    { 1206u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title509" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title137" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1374" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title680" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title962" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title804" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1543" > , Rev< 7u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1387" >  >() },
    { 1207u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Movability of Single-pass Iterators" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Movability of Single-pass Iterators" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1660" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title553" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title304" >  >() },
    { 1208u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Adopt source_location from Library Fundamentals V3 for C++20" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Adopt source_location from Library Fundamentals V3 for C++20" > , Rev< 3u, Arr64< Hash(L"Author2190") >(), L"Title1682" > , Rev< 4u, Arr64< Hash(L"Author1252") >(), L"Title972" > , Rev< 5u, Arr64< Hash(L"Author1091") >(), L"Title877" > , Rev< 6u, Arr64< Hash(L"Author29") >(), L"Title22" >  >() },
    { 1209u, RevList< Rev< 0u, Arr64< Hash(L"Author1703") >(), L"Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20" >  >() },
    { 1210u, RevList< Rev< 0u, Arr64< Hash(L"Author2168") >(), L"Completing the Rebase of Library Fundamentals, Version 3, Working Draft" >  >() },
    { 1212u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Modules and Freestanding" >  >() },
    { 1213u, RevList< Rev< 0u, Arr64< Hash(L"Author625") >(), L"Global Module Fragment is Unnecessary" > , Rev< 1u, Arr64< Hash(L"Author1634") >(), L"Global Module Fragment is Unnecessary" >  >() },
    { 1214u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Pointer to Member Functions and Member Objects are just Callables!" >  >() },
    { 1217u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Out-of-thin-air, revisited, again" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Out-of-thin-air, revisited, again" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Out-of-thin-air, revisited, again" >  >() },
    { 1218u, RevList< Rev< 0u, Arr64< Hash(L"Author89") >(), L"Redefinitions in Legacy Imports" >  >() },
    { 1219u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Homogeneous variadic function parameters" > , Rev< 1u, Arr64< Hash(L"James Touton") >(), L"Homogeneous variadic function parameters" > , Rev< 2u, Arr64< Hash(L"James Touton") >(), L"Homogeneous variadic function parameters" >  >() },
    { 1220u, RevList< Rev< 0u, Arr64< Hash(L"Chris Kennelly") >(), L"Controlling When Inline Functions are Emitted" >  >() },
    { 1221u, RevList< Rev< 0u, Arr64< Hash(L"Author1663") >(), L"Title1293" > , Rev< 1u, Arr64< Hash(L"Author2126") >(), L"Title1643" >  >() },
    { 1222u, RevList< Rev< 0u, Arr64< Hash(L"Author597") >(), L"Title488" > , Rev< 1u, Arr64< Hash(L"Author605") >(), L"A Standard flatset" > , Rev< 2u, Arr64< Hash(L"Author1350") >(), L"A Standard flatset" > , Rev< 3u, Arr64< Hash(L"Author255") >(), L"A Standard flatset" > , Rev< 4u, Arr64< Hash(L"Author1301") >(), L"A Standard flatset" >  >() },
    { 1223u, RevList< Rev< 0u, Arr64< Hash(L"Author1430") >(), L"Title1110" > , Rev< 1u, Arr64< Hash(L"Author1562") >(), L"Title1210" > , Rev< 2u, Arr64< Hash(L"Author894") >(), L"findast" > , Rev< 3u, Arr64< Hash(L"Author588") >(), L"findlast" > , Rev< 4u, Arr64< Hash(L"Author445") >(), L"findlast" > , Rev< 5u, Arr64< Hash(L"Author1865") >(), L"findlast" >  >() },
    { 1224u, RevList< Rev< 0u, Arr64< Hash(L"Author736") >(), L"C++ Standard Library Issues to be moved in San Diego" >  >() },
    { 1225u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Feedback on 2D Graphics" >  >() },
    { 1227u, RevList< Rev< 0u, Arr64< Hash(L"Jorg Brown") >(), L"p1227R0: Signed size() functions" > , Rev< 1u, Arr64< Hash(L"Jorg Brown") >(), L"p1227R1: Signed ssize() functions, unsigned size() functions" > , Rev< 2u, Arr64< Hash(L"Author843") >(), L"Signed ssize() functions, unsigned size() functions" >  >() },
    { 1228u, RevList< Rev< 1u, Arr64< Hash(L"Author2136") >(), L"A proposal to add an efficient string concatenation routine to the Standard Library (P1228)" >  >() },
    { 1229u, RevList< Rev< 0u, Arr64< Hash(L"Jorg Brown") >(), L"p1229R0: Labelled Parameters" >  >() },
    { 1230u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1409" >  >() },
    { 1231u, RevList< Rev< 0u, Arr64< Hash(L"Author533") >(), L"Title434" >  >() },
    { 1232u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"p1232_integrating_executors_with_the_standard_library.md - Grip" >  >() },
    { 1233u, RevList< Rev< 0u, Arr64< Hash(L"Ashley Hedberg") >(), L"Title906" > , Rev< 1u, Arr64< Hash(L"Ashley Hedberg") >(), L"Shift-by-negative in `shift_left` and `shift_right`" >  >() },
    { 1235u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Title1103" >  >() },
    { 1236u, RevList< Rev< 0u, Arr64< Hash(L"Author183") >(), L"Alternative Wording for P0907R4 Signed Integers are Two's Complement" > , Rev< 1u, Arr64< Hash(L"Author2185") >(), L"Alternative Wording for P0907R4 Signed Integers are Two's Complement" >  >() },
    { 1237u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2018/07/11 - 2018/10/03" >  >() },
    { 1238u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode Direction" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode Direction" >  >() },
    { 1239u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Lustig") >(), L"Placed Before" >  >() },
    { 1240u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Title1380" > , Rev< 1u, Arr64< Hash(L"Wyatt Childers") >(), L"Title1056" > , Rev< 2u, Arr64< Hash(L"Wyatt Childers") >(), L"Scalable Reflection" >  >() },
    { 1241u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"p1241_in_support_of_coroutines.md - Grip" >  >() },
    { 1242u, RevList< Rev< 0u, Arr64< Hash(L"Jeff Snyder") >(), L"Title1327" > , Rev< 1u, Arr64< Hash(L"Jeff Snyder") >(), L"Title915" >  >() },
    { 1243u, RevList< Rev< 0u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R0 - Rangify New Algorithms" > , Rev< 1u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R1 - Rangify New Algorithms" > , Rev< 2u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R2 - Rangify New Algorithms" > , Rev< 3u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R3 - Rangify New Algorithms" > , Rev< 4u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R4" >  >() },
    { 1244u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"Title1474" >  >() },
    { 1245u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"<code>export module containing [[attribute]];</code>" >  >() },
    { 1246u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"The <code>no_float</code> function attribute" >  >() },
    { 1247u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"Disabling static destructors: introducing <code>no_destroy</code> and <code>always_destroy</code> attributes" >  >() },
    { 1248u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixing 'Relation's" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Remove 'CommonReference' requirement from 'StrictWeakOrdering'" >  >() },
    { 1249u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"std::forward from std::initializer_list" >  >() },
    { 1250u, RevList< Rev< 0u, Arr64< Hash(L"Titus Winters") >(), L"Title433" >  >() },
    { 1251u, RevList< Rev< 0u, Arr64< Hash(L"Author378") >(), L"Title321" > , Rev< 1u, Arr64< Hash(L"Author103") >(), L"Title94" >  >() },
    { 1252u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Merge the Ranges TS" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Merge the Ranges TS" > , Rev< 2u, Arr64< Hash(L"Casey Carter") >(), L"Merge the Ranges TS" >  >() },
    { 1253u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Title956" >  >() },
    { 1254u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Notes on C++ Package Management" >  >() },
    { 1255u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 2u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 3u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 4u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 5u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: views::maybe" > , Rev< 6u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements:" > , Rev< 7u, Arr64< Hash(L"Steve Downey") >(), L"A view of 0 or 1 elements: `views::maybe`" > , Rev< 8u, Arr64< Hash(L"Author325") >(), L"Title275" > , Rev< 9u, Arr64< Hash(L"Author704") >(), L"Title566" > , Rev< 10u, Arr64< Hash(L"Author82") >(), L"Title82" > , Rev< 11u, Arr64< Hash(L"Author1796") >(), L"Title1396" > , Rev< 12u, Arr64< Hash(L"Author1395") >(), L"Title1086" > , Rev< 13u, Arr64< Hash(L"Author1012") >(), L"Title810" > , Rev< 14u, Arr64< Hash(L"Author1559") >(), L"Title1209" >  >() },
    { 1256u, RevList< Rev< 0u, Arr64< Hash(L"Author1737") >(), L"Title1341" >  >() },
    { 1257u, RevList< Rev< 0u, Arr64< Hash(L"Author171") >(), L"Implementation experience on trying to implement concurrent data and control structures with executors" >  >() },
    { 1258u, RevList< Rev< 0u, Arr64< Hash(L"Author1170") >(), L"Title927" >  >() },
    { 1259u, RevList< Rev< 0u, Arr64< Hash(L"Author905") >(), L"Title732" > , Rev< 1u, Arr64< Hash(L"Author22") >(), L"Merge most of Networking TS into C++ Working Draft" >  >() },
    { 1260u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"Pattern Matching" >  >() },
    { 1261u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title454" >  >() },
    { 1263u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title1657" >  >() },
    { 1264u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title100" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Title1416" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Title1129" >  >() },
    { 1267u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"Title201" >  >() },
    { 1269u, RevList< Rev< 0u, Arr64< Hash(L"Jason Carey") >(), L"Three Years with the Networking TS" >  >() },
    { 1271u, RevList< Rev< 0u, Arr64< Hash(L"Author885") >(), L"P1271r0 | Move resource_adaptor from Library TS to the C++ WP" >  >() },
    { 1272u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Byteswapping for fun&&nuf" > , Rev< 1u, Arr64< Hash(L"Isabella Muerte") >(), L"Byteswapping for fun&&nuf" > , Rev< 2u, Arr64< Hash(L"Isabella Muerte") >(), L"Byteswapping for fun&&nuf" > , Rev< 3u, Arr64< Hash(L"Isabella Muerte") >(), L"Byteswapping for fun&&nuf" > , Rev< 4u, Arr64< Hash(L"Isabella Muerte") >(), L"Byteswapping for fun&&nuf" >  >() },
    { 1273u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"86 The Absurd (From Exceptions)" >  >() },
    { 1274u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Bang For The Buck" >  >() },
    { 1275u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Desert Sessions: Improving hostile environment interactions" >  >() },
    { 1276u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Void Main" >  >() },
    { 1277u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Subscripts On Parade" >  >() },
    { 1278u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"offsetof For the Modern Era" >  >() },
    { 1279u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"std::breakpoint" >  >() },
    { 1280u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Integer Width Literals" > , Rev< 1u, Arr64< Hash(L"Isabella Muerte") >(), L"Integer Width Literals" > , Rev< 2u, Arr64< Hash(L"Isabella Muerte") >(), L"Integer Width Literals" >  >() },
    { 1281u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Feature Presentation" >  >() },
    { 1282u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Ceci Nest Pas Une Pipe: Adding a workflow operator to C++" >  >() },
    { 1283u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Sharing is Caring" >  >() },
    { 1284u, RevList< Rev< 0u, Arr64< Hash(L"Chris Kennelly") >(), L"Allowing Inlining of Replaceable Functions" >  >() },
    { 1285u, RevList< Rev< 0u, Arr64< Hash(L"Author250") >(), L"Improving Completeness Requirements for Type Traits" >  >() },
    { 1286u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Contra CWG DR1778" > , Rev< 1u, Arr64< Hash(L"Richard Smith") >(), L"Contra CWG DR1778" > , Rev< 2u, Arr64< Hash(L"Richard Smith") >(), L"Contra CWG DR1778" >  >() },
    { 1287u, RevList< Rev< 0u, Arr64< Hash(L"Author1448") >(), L"Title1124" >  >() },
    { 1288u, RevList< Rev< 0u, Arr64< Hash(L"Author2178") >(), L"Title1673" >  >() },
    { 1289u, RevList< Rev< 0u, Arr64< Hash(L"Author111") >(), L"Title99" > , Rev< 1u, Arr64< Hash(L"Author1801") >(), L"Title1397" >  >() },
    { 1290u, RevList< Rev< 0u, Arr64< Hash(L"Author1932") >(), L"Title1493" > , Rev< 1u, Arr64< Hash(L"Author141") >(), L"Title121" > , Rev< 2u, Arr64< Hash(L"Author2035") >(), L"Title1573" > , Rev< 3u, Arr64< Hash(L"Author897") >(), L"Title726" >  >() },
    { 1291u, RevList< Rev< 0u, Arr64< Hash(L"Author1059") >(), L"std::ranges::less<> Should Be More!" >  >() },
    { 1292u, RevList< Rev< 0u, Arr64< Hash(L"Matt Calabrese") >(), L"Customization Point Functions" >  >() },
    { 1293u, RevList< Rev< 0u, Arr64< Hash(L"Author1626") >(), L"ostream_joiner" > , Rev< 1u, Arr64< Hash(L"Author2072") >(), L"ostream_joiner" > , Rev< 2u, Arr64< Hash(L"Author1614") >(), L"ostream_joiner" >  >() },
    { 1294u, RevList< Rev< 0u, Arr64< Hash(L"Author1632") >(), L"Microsoft Word - N3254.docx" >  >() },
    { 1295u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Spaceship library update" >  >() },
    { 1296u, RevList< Rev< 0u, Arr64< Hash(L"Phil Miller") >(), L"Title862" >  >() },
    { 1298u, RevList< Rev< 0u, Arr64< Hash(L"Olivier Giroux") >(), L"Reserve more freedom for atomic_ref implementers" >  >() },
    { 1299u, RevList< Rev< 0u, Arr64< Hash(L"Author1354") >(), L"Module Preamble is Unnecessary" > , Rev< 1u, Arr64< Hash(L"Author961") >(), L"Module Preamble is Unnecessarily Fragile" > , Rev< 3u, Arr64< Hash(L"Author287") >(), L"Module Preamble is Unnecessarily Fragile" >  >() },
    { 1300u, RevList< Rev< 0u, Arr64< Hash(L"Author2093") >(), L"Remember the FORTRAN" >  >() },
    { 1301u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"nodiscard should have a reason" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"[[nodiscard(\"should have a reason\")]]" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"[[nodiscard(\"should have a reason\")]]" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"[[nodiscard(\"should have a reason\")]]" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"[[nodiscard(\"should have a reason\")]]" >  >() },
    { 1302u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Implicit Module Partition Lookup" > , Rev< 1u, Arr64< Hash(L"Isabella Muerte") >(), L"Implicit Module Partition Lookup" >  >() },
    { 1303u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Inline Module Partitions" >  >() },
    { 1304u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Simplifying Extern Template" >  >() },
    { 1305u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Deprecate The Addressof Operator" >  >() },
    { 1306u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Title351" > , Rev< 1u, Arr64< Hash(L"Andrew Sutton") >(), L"Title1531" > , Rev< 2u, Arr64< Hash(L"Andrew Sutton") >(), L"Expansion statements r2" > , Rev< 3u, Arr64< Hash(L"Andrew Sutton") >(), L"P1306 (Expansion statements)" >  >() },
    { 1307u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title1023" >  >() },
    { 1308u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"pattern_matching" >  >() },
    { 1310u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title88" >  >() },
    { 1312u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title425" >  >() },
    { 1313u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Woehlke") >(), L"Let's Talk About Package Specification" >  >() },
    { 1314u, RevList< Rev< 0u, Arr64< Hash(L"Miguel Ojeda") >(), L"unique_val" > , Rev< 1u, Arr64< Hash(L"Miguel Ojeda") >(), L"unique_val" >  >() },
    { 1315u, RevList< Rev< 0u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_val" > , Rev< 1u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_val" > , Rev< 2u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear" > , Rev< 3u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear" > , Rev< 4u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear" > , Rev< 5u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear" > , Rev< 6u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear (update to N2599)" > , Rev< 7u, Arr64< Hash(L"Miguel Ojeda") >(), L"secure_clear" >  >() },
    { 1316u, RevList< Rev< 0u, Arr64< Hash(L"Author1954") >(), L"Title1517" >  >() },
    { 1317u, RevList< Rev< 0u, Arr64< Hash(L"Author977") >(), L"Title785" > , Rev< 1u, Arr64< Hash(L"Author618") >(), L"Title504" >  >() },
    { 1318u, RevList< Rev< 0u, Arr64< Hash(L"Author1104") >(), L"Title885" >  >() },
    { 1319u, RevList< Rev< 0u, Arr64< Hash(L"Author1015") >(), L"Changes between C++11 and C++14" >  >() },
    { 1320u, RevList< Rev< 0u, Arr64< Hash(L"Author270") >(), L"Allowing contract predicates on non-first declarations" > , Rev< 1u, Arr64< Hash(L"Author213") >(), L"Allowing contract predicates on non-first declarations" > , Rev< 2u, Arr64< Hash(L"Author762") >(), L"Allowing contract predicates on non-first declarations" >  >() },
    { 1321u, RevList< Rev< 0u, Arr64< Hash(L"Author1555") >(), L"UB in contract violations" >  >() },
    { 1322u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS enhancement to enable custom I/O executors" > , Rev< 1u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS enhancement to enable custom I/O executors" > , Rev< 2u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS enhancement to enable custom I/O executors" > , Rev< 3u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS enhancement to enable custom I/O executors" >  >() },
    { 1323u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"Contract postconditions and return type deduction" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"Contract postconditions and return type deduction" > , Rev< 2u, Arr64< Hash(L"Hubert S.K") >(), L"Contract postconditions and return type deduction" >  >() },
    { 1324u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"[RE] Yet another" > , Rev< 1u, Arr64< Hash(L"Mihail Naydenov") >(), L"[RE]YetAnother" >  >() },
    { 1327u, RevList< Rev< 0u, Arr64< Hash(L"Author1875") >(), L"Allowing dynamic_cast, polymorphic typeid in Constant Expressions" > , Rev< 1u, Arr64< Hash(L"Author1254") >(), L"Allowing dynamic_cast, polymorphic typeid in Constant Expressions" >  >() },
    { 1328u, RevList< Rev< 0u, Arr64< Hash(L"Author790") >(), L"Making std::type_info::operator== constexpr" > , Rev< 1u, Arr64< Hash(L"Author554") >(), L"Making std::type_info::operator== constexpr" >  >() },
    { 1329u, RevList< Rev< 0u, Arr64< Hash(L"Author984") >(), L"Title793" >  >() },
    { 1330u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Title679" >  >() },
    { 1331u, RevList< Rev< 0u, Arr64< Hash(L"Author1850") >(), L"Title1437" > , Rev< 1u, Arr64< Hash(L"Author81") >(), L"Title80" > , Rev< 2u, Arr64< Hash(L"Author2133") >(), L"Title1646" >  >() },
    { 1332u, RevList< Rev< 0u, Arr64< Hash(L"Author877") >(), L"Title703" >  >() },
    { 1333u, RevList< Rev< 0u, Arr64< Hash(L"Author1896") >(), L"Title1466" >  >() },
    { 1334u, RevList< Rev< 0u, Arr64< Hash(L"Author502") >(), L"Title413" >  >() },
    { 1335u, RevList< Rev< 0u, Arr64< Hash(L"Author722") >(), L"Title581" >  >() },
    { 1337u, RevList< Rev< 0u, Arr64< Hash(L"Author1821") >(), L"Title1413" >  >() },
    { 1338u, RevList< Rev< 0u, Arr64< Hash(L"Author809") >(), L"P1338" > , Rev< 1u, Arr64< Hash(L"Author2079") >(), L"P1338R1" >  >() },
    { 1339u, RevList< Rev< 0u, Arr64< Hash(L"Author1790") >(), L"Title1392" > , Rev< 1u, Arr64< Hash(L"Author878") >(), L"Title704" >  >() },
    { 1341u, RevList< Rev< 0u, Arr64< Hash(L"Author315") >(), L"Microsoft Word - Unifying asynchronous APIs in C++ standard library.docx" >  >() },
    { 1342u, RevList< Rev< 0u, Arr64< Hash(L"Author933") >(), L"Microsoft Word - Unified Coroutines.docx" >  >() },
    { 1344u, RevList< Rev< 0u, Arr64< Hash(L"Author1379") >(), L"Title1069" > , Rev< 1u, Arr64< Hash(L"Author251") >(), L"Title208" >  >() },
    { 1347u, RevList< Rev< 0u, Arr64< Hash(L"Author1890") >(), L"Modules: ADL & Internal Linkage" > , Rev< 1u, Arr64< Hash(L"Author1204") >(), L"Modules: ADL & Internal Linkage" >  >() },
    { 1348u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"An Executor Property for Occupancy of Execution Agents" >  >() },
    { 1349u, RevList< Rev< 0u, Arr64< Hash(L"Vinnie Falco") >(), L"Better Integration of Sender Executors" >  >() },
    { 1350u, RevList< Rev< 0u, Arr64< Hash(L"Author1185") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 1351u, RevList< Rev< 0u, Arr64< Hash(L"Mark Zeren") >(), L"Intrusive smart pointer feedback" >  >() },
    { 1353u, RevList< Rev< 0u, Arr64< Hash(L"Author1940") >(), L"Missing Feature Test Macros" >  >() },
    { 1354u, RevList< Rev< 0u, Arr64< Hash(L"Chandler Carruth") >(), L"SG7 Guidelines for Review of Proposals" >  >() },
    { 1355u, RevList< Rev< 0u, Arr64< Hash(L"Chris Kennelly") >(), L"Exposing a narrow contract for ceil2" > , Rev< 1u, Arr64< Hash(L"Chris Kennelly") >(), L"Exposing a narrow contract for ceil2" > , Rev< 2u, Arr64< Hash(L"Chris Kennelly") >(), L"Exposing a narrow contract for ceil2" >  >() },
    { 1356u, RevList< Rev< 0u, Arr64< Hash(L"Author1032") >(), L"C++ Coroutine TS Issues" >  >() },
    { 1357u, RevList< Rev< 0u, Arr64< Hash(L"Author617") >(), L"Traits for [Un]bounded Arrays" > , Rev< 1u, Arr64< Hash(L"Author1978") >(), L"Traits for [Un]bounded Arrays" >  >() },
    { 1358u, RevList< Rev< 0u, Arr64< Hash(L"Author1582") >(), L"Core \"ready\" Issues" >  >() },
    { 1359u, RevList< Rev< 0u, Arr64< Hash(L"Author292") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 1360u, RevList< Rev< 0u, Arr64< Hash(L"Author1300") >(), L"Title1004" >  >() },
    { 1361u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Integration of chrono with text formatting" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Integration of chrono with text formatting" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Integration of chrono with text formatting" >  >() },
    { 1362u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title1338" >  >() },
    { 1364u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title247" >  >() },
    { 1365u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title1507" >  >() },
    { 1367u, RevList< Rev< 0u, Arr64< Hash(L"ogiroux@nvidia.com") >(), L"Title1699" > , Rev< 1u, Arr64< Hash(L"ogiroux@nvidia.com") >(), L"Title105" >  >() },
    { 1368u, RevList< Rev< 0u, Arr64< Hash(L"Author854") >(), L"Multiplication and division of fixed-point numbers" > , Rev< 1u, Arr64< Hash(L"Author1457") >(), L"Multiplication and division of fixed-point numbers" >  >() },
    { 1369u, RevList< Rev< 0u, Arr64< Hash(L"Author654") >(), L"Guidelines for Formulating Library Semantics Specifications" >  >() },
    { 1370u, RevList< Rev< 0u, Arr64< Hash(L"Author459") >(), L"Title387" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Generic numerical algorithm development with(out) <code>numeric_limits</code>" >  >() },
    { 1371u, RevList< Rev< 0u, Arr64< Hash(L"Sergei Murzin") >(), L"Pattern Matching" > , Rev< 1u, Arr64< Hash(L"Sergei Murzin") >(), L"Pattern Matching" > , Rev< 2u, Arr64< Hash(L"Sergei Murzin") >(), L"Pattern Matching" > , Rev< 3u, Arr64< Hash(L"Bruno Cardoso") >(), L"Pattern Matching" >  >() },
    { 1372u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"Giving <code>atomic_ref</code> implementers more flexibility by providing customization points for non-lock-free implementation" >  >() },
    { 1373u, RevList< Rev< 0u, Arr64< Hash(L"Author1034") >(), L"Title833" >  >() },
    { 1374u, RevList< Rev< 0u, Arr64< Hash(L"Author515") >(), L"Resolving LWG #2307 for C++20: Consistently Explicit Constructors" >  >() },
    { 1375u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"More Constrained: Apples or Oranges? On the road to semantic constraint matching" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"More Constrained: Apples or Oranges? On the road to semantic constraint matching" > , Rev< 2u, Arr64< Hash(L"Hubert S.K") >(), L"More Constrained: Apples or Oranges? On the road to semantic constraint matching" >  >() },
    { 1376u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Summary of freestanding evening session discussions" >  >() },
    { 1377u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Summary of Dec 2018 SG14 freestanding discussions" >  >() },
    { 1378u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::string_literal" >  >() },
    { 1380u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"Ambiguity and Insecurities with Three-Way Comparison" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"Ambiguity and Insecurities with Three-Way Comparison" >  >() },
    { 1381u, RevList< Rev< 0u, Arr64< Hash(L"Nicolas Lesser") >(), L"Reference capture of structured bindings" > , Rev< 1u, Arr64< Hash(L"Nicolas Lesser") >(), L"Reference capture of structured bindings" >  >() },
    { 1382u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Title1226" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Title944" >  >() },
    { 1383u, RevList< Rev< 0u, Arr64< Hash(L"Author2088") >(), L"Title1620" > , Rev< 1u, Arr64< Hash(L"Author1828") >(), L"Title1420" > , Rev< 2u, Arr64< Hash(L"Author385") >(), L"Title330" >  >() },
    { 1385u, RevList< Rev< 0u, Arr64< Hash(L"Guy Davidson") >(), L"[linear.algebra]R0: A proposal to add linear algebra support to the C++ standard library" > , Rev< 1u, Arr64< Hash(L"Guy Davidson") >(), L"[linear.algebra]R1: A proposal to add linear algebra support to the C++ standard library" > , Rev< 2u, Arr64< Hash(L"Guy Davidson") >(), L"[linear.algebra]R2: A proposal to add linear algebra support to the C++ standard library" > , Rev< 3u, Arr64< Hash(L"Guy Davidson") >(), L"A proposal to add linear algebra support to the C++ standard library" > , Rev< 4u, Arr64< Hash(L"Guy Davidson") >(), L"A proposal to add linear algebra support to the C++ standard library" > , Rev< 5u, Arr64< Hash(L"Guy Davidson") >(), L"A proposal to add linear algebra support to the C++ standard library" > , Rev< 6u, Arr64< Hash(L"Guy Davidson") >(), L"A proposal to add linear algebra support to the C++ standard library" > , Rev< 7u, Arr64< Hash(L"Guy Davidson") >(), L"Untitled document" >  >() },
    { 1386u, RevList< Rev< 0u, Arr64< Hash(L"Author1365") >(), L"Title1059" > , Rev< 1u, Arr64< Hash(L"Author2017") >(), L"Title1557" > , Rev< 2u, Arr64< Hash(L"Author724") >(), L"Title584" >  >() },
    { 1388u, RevList< Rev< 0u, Arr64< Hash(L"Author1936") >(), L"Title1497" >  >() },
    { 1389u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"Standing Document for SG20: Guidelines for Teaching C++ to Beginners" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"Standing Document for SG20: Guidelines for Teaching C++ to Beginners" >  >() },
    { 1390u, RevList< Rev< 0u, Arr64< Hash(L"Mata Chochl") >(), L"Suggested Reflection TS NB Resolutions" > , Rev< 1u, Arr64< Hash(L"Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk") >(), L"Reflection TS NB comment resolutions: summary and rationale" >  >() },
    { 1391u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1388" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title768" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title185" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1216" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1621" >  >() },
    { 1392u, RevList< Rev< 0u, Arr64< Hash(L"Author672") >(), L"Differences Between Functions and Function Templates" >  >() },
    { 1393u, RevList< Rev< 0u, Arr64< Hash(L"David Hollman") >(), L"properties" >  >() },
    { 1394u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title846" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title251" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1639" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title117" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title599" >  >() },
    { 1395u, RevList< Rev< 0u, Arr64< Hash(L"Author2124") >(), L"Modules: Partitions Are Not a Panacea" >  >() },
    { 1401u, RevList< Rev< 0u, Arr64< Hash(L"Author1319") >(), L"Title1017" > , Rev< 1u, Arr64< Hash(L"Andrzej Krzemie\xC5\x84ski") >(), L"constexpr_bool_conv_r1" > , Rev< 2u, Arr64< Hash(L"Author917") >(), L"Title738" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Narrowing contextual conversions to bool" > , Rev< 4u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Narrowing contextual conversions to bool" > , Rev< 5u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Narrowing contextual conversions to bool" >  >() },
    { 1402u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title897" >  >() },
    { 1403u, RevList< Rev< 0u, Arr64< Hash(L"David S") >(), L"Experience Report: Implementing a Coroutines TS Frontend to an Existing Tasking Library" >  >() },
    { 1404u, RevList< Rev< 0u, Arr64< Hash(L"Author412") >(), L"Title354" > , Rev< 1u, Arr64< Hash(L"Andrzej Krzemie\xC5\x84ski") >(), L"bad_alloc_r1" >  >() },
    { 1405u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"C++20 Executors are Resilient to ABI Breakage | P1405R0" >  >() },
    { 1406u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Add more std::hash specializations" > , Rev< 1u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title1236" >  >() },
    { 1407u, RevList< Rev< 0u, Arr64< Hash(L"Scott Schurr") >(), L"P1407R0_SignedIntOverflow" > , Rev< 1u, Arr64< Hash(L"Scott Schurr") >(), L"P1407R1_SignedIntOverflow" >  >() },
    { 1408u, RevList< Rev< 0u, Arr64< Hash(L"Author182") >(), L"Title157" >  >() },
    { 1410u, RevList< Rev< 0u, Arr64< Hash(L"Author2164") >(), L"Title1665" >  >() },
    { 1411u, RevList< Rev< 0u, Arr64< Hash(L"Author164") >(), L"Title139" >  >() },
    { 1412u, RevList< Rev< 0u, Arr64< Hash(L"Author1410") >(), L"Title1098" >  >() },
    { 1413u, RevList< Rev< 0u, Arr64< Hash(L"Author728") >(), L"Title587" > , Rev< 1u, Arr64< Hash(L"Author508") >(), L"Title419" > , Rev< 2u, Arr64< Hash(L"Author1140") >(), L"Title907" > , Rev< 3u, Arr64< Hash(L"Author1966") >(), L"Title1528" >  >() },
    { 1415u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title158" > , Rev< 1u, Arr64< Hash(L"Michael Wong") >(), L"Title1092" >  >() },
    { 1416u, RevList< Rev< 0u, Arr64< Hash(L"Author1765") >(), L"Title1369" >  >() },
    { 1417u, RevList< Rev< 0u, Arr64< Hash(L"Author407") >(), L"Title347" >  >() },
    { 1419u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title118" >  >() },
    { 1421u, RevList< Rev< 0u, Arr64< Hash(L"Author1083") >(), L"Title873" >  >() },
    { 1422u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2018/10/17 - 2019/01/09" >  >() },
    { 1423u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t backward compatibility remediation" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t backward compatibility remediation" > , Rev< 2u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t backward compatibility remediation" > , Rev< 3u, Arr64< Hash(L"Tom Honermann") >(), L"char8_t backward compatibility remediation" >  >() },
    { 1424u, RevList< Rev< 0u, Arr64< Hash(L"Author1275") >(), L"'constexpr' feature macro concerns" > , Rev< 1u, Arr64< Hash(L"Author1548") >(), L"'constexpr' feature macro concerns" >  >() },
    { 1425u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title380" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1011" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title561" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title600" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1689" >  >() },
    { 1426u, RevList< Rev< 0u, Arr64< Hash(L"Author1500") >(), L"Title1165" >  >() },
    { 1427u, RevList< Rev< 0u, Arr64< Hash(L"Author1995") >(), L"Title1542" >  >() },
    { 1428u, RevList< Rev< 0u, Arr64< Hash(L"Author787") >(), L"Title639" >  >() },
    { 1429u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title25" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1650" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title1550" > , Rev< 3u, Arr64< Hash(L"Joshua Berne") >(), L"Title888" >  >() },
    { 1430u, RevList< Rev< 0u, Arr64< Hash(L"Author402") >(), L"Title343" > , Rev< 1u, Arr64< Hash(L"Author1833") >(), L"Title1423" >  >() },
    { 1433u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"Title1587" >  >() },
    { 1434u, RevList< Rev< 0u, Arr64< Hash(L"Author584") >(), L"Discussing Pointer Provenance" >  >() },
    { 1436u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"d1436r0.html" > , Rev< 1u, Arr64< Hash(L"Gordon Brown") >(), L"d1436r1.html" > , Rev< 2u, Arr64< Hash(L"Gordon Brown") >(), L"d1436r2.html" > , Rev< 3u, Arr64< Hash(L"Gordon Brown") >(), L"Title431" >  >() },
    { 1438u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0") >(), L"P1438R0 - A Rational Number Library for C++" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0") >(), L"P1438R1 - A Rational Number Library for C++" >  >() },
    { 1439u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Charset Transcoding, Transformation, and Transliteration" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Charset Transcoding, Transformation, and Transliteration" >  >() },
    { 1440u, RevList< Rev< 0u, Arr64< Hash(L"Johel Guerrero") >(), L"is_clamped" >  >() },
    { 1441u, RevList< Rev< 0u, Arr64< Hash(L"Author1074") >(), L"Title865" > , Rev< 1u, Arr64< Hash(L"Author1961") >(), L"Title1526" >  >() },
    { 1442u, RevList< Rev< 0u, Arr64< Hash(L"Author1892") >(), L"A Medley of Networking TS improvements" >  >() },
    { 1443u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title762" >  >() },
    { 1444u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1153" >  >() },
    { 1445u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1670" >  >() },
    { 1446u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"html5 Reconsider the Networking TS for inclusion in C++20" >  >() },
    { 1447u, RevList< Rev< 0u, Arr64< Hash(L"Mata Chochl") >(), L"constexpr C++ is not constexpr C" >  >() },
    { 1448u, RevList< Rev< 0u, Arr64< Hash(L"Nathan Burgers") >(), L"Title1404" >  >() },
    { 1449u, RevList< Rev< 0u, Arr64< Hash(L"Author1437") >(), L"Title1117" >  >() },
    { 1450u, RevList< Rev< 0u, Arr64< Hash(L"Author242") >(), L"P1450R0" > , Rev< 1u, Arr64< Hash(L"Author2179") >(), L"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r1.pdfP1450R1" > , Rev< 2u, Arr64< Hash(L"Author1794") >(), L"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r2.pdfP1450R2" > , Rev< 3u, Arr64< Hash(L"Author1270") >(), L"P1450R3" >  >() },
    { 1452u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"On the non-uniform semantics of return-type-requirements" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"On the non-uniform semantics of return-type-requirements" > , Rev< 2u, Arr64< Hash(L"Hubert S.K") >(), L"On the non-uniform semantics of return-type-requirements" >  >() },
    { 1453u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Modularizing the Standard Library is a Reorganization Opportunity" >  >() },
    { 1456u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Move-only views" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Move-only views" >  >() },
    { 1457u, RevList< Rev< 0u, Arr64< Hash(L"Author426") >(), L"C++ Standard Library Issues to be moved in Kona" >  >() },
    { 1458u, RevList< Rev< 0u, Arr64< Hash(L"Author1412") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author1036") >(), L"C++ International Standard" >  >() },
    { 1459u, RevList< Rev< 0u, Arr64< Hash(L"Author245") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author409") >(), L"C++ International Standard" >  >() },
    { 1460u, RevList< Rev< 0u, Arr64< Hash(L"Author746") >(), L"Mandating the Standard Library: Clause 20" > , Rev< 1u, Arr64< Hash(L"Author1196") >(), L"Mandating the Standard Library: Clause 20" >  >() },
    { 1462u, RevList< Rev< 0u, Arr64< Hash(L"Author136") >(), L"Mandating the Standard Library: Clause 20 - Strings library" > , Rev< 1u, Arr64< Hash(L"Author611") >(), L"Mandating the Standard Library: Clause 20 - Strings library" >  >() },
    { 1463u, RevList< Rev< 0u, Arr64< Hash(L"Author1822") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author307") >(), L"C++ International Standard" >  >() },
    { 1464u, RevList< Rev< 0u, Arr64< Hash(L"Author379") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author1854") >(), L"C++ International Standard" >  >() },
    { 1465u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title573" >  >() },
    { 1466u, RevList< Rev< 0u, Arr64< Hash(L"Author902") >(), L"chrono fixes" > , Rev< 1u, Arr64< Hash(L"Author2222") >(), L"chrono fixes" > , Rev< 2u, Arr64< Hash(L"Author1583") >(), L"chrono fixes" > , Rev< 3u, Arr64< Hash(L"Author1222") >(), L"chrono fixes" >  >() },
    { 1467u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Extended floating-point types" > , Rev< 1u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Extended floating-point types" > , Rev< 2u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Extended floating-point types" > , Rev< 3u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types" > , Rev< 4u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" > , Rev< 5u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" > , Rev< 6u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" > , Rev< 7u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" > , Rev< 8u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" > , Rev< 9u, Arr64< Hash(L"David Olsen") >(), L"Extended floating-point types and standard names" >  >() },
    { 1468u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Fixed-layout floating-point type aliases" > , Rev< 1u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Fixed-layout floating-point type aliases" > , Rev< 2u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Fixed-layout floating-point type aliases" > , Rev< 3u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Fixed-layout floating-point type aliases" > , Rev< 4u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Fixed-layout floating-point type aliases" >  >() },
    { 1469u, RevList< Rev< 0u, Arr64< Hash(L"Sergei Murzin") >(), L"Disallow _ Usage in C++20 for Pattern Matching in C++23" >  >() },
    { 1470u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title1365" >  >() },
    { 1471u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"html5 The trouble with coroutine_traits" >  >() },
    { 1472u, RevList< Rev< 0u, Arr64< Hash(L"SG5 minutes") >(), L"Title1501" >  >() },
    { 1473u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Move-only views" >  >() },
    { 1474u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Move-only views" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Amazing Stuff" >  >() },
    { 1477u, RevList< Rev< 0u, Arr64< Hash(L"Author1390") >(), L"Title1080" > , Rev< 1u, Arr64< Hash(L"Author230") >(), L"Title190" >  >() },
    { 1478u, RevList< Rev< 0u, Arr64< Hash(L"Hans-J. Boehm") >(), L"P1478: Byte-wise atomic memcpy" > , Rev< 1u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 2u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 3u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 4u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 5u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 6u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 7u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" > , Rev< 8u, Arr64< Hash(L"Hans-J. Boehm") >(), L"Byte-wise atomic memcpy" >  >() },
    { 1479u, RevList< Rev< 0u, Arr64< Hash(L"Robert Kawulak") >(), L"ostringstream wrapper" >  >() },
    { 1481u, RevList< Rev< 0u, Arr64< Hash(L"Nicolas Lesser") >(), L"constexpr structured bindings" >  >() },
    { 1482u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"Modules Feedback" >  >() },
    { 1484u, RevList< Rev< 1u, Arr64< Hash(L"Peter Bindels") >(), L"Title1198" >  >() },
    { 1485u, RevList< Rev< 0u, Arr64< Hash(L"Author1900") >(), L"Better keywords for the Coroutines TS" > , Rev< 1u, Arr64< Hash(L"Author1789") >(), L"Better keywords for the Coroutines" >  >() },
    { 1486u, RevList< Rev< 0u, Arr64< Hash(L"Author1093") >(), L"Title880" > , Rev< 1u, Arr64< Hash(L"Author1689") >(), L"Title1312" >  >() },
    { 1487u, RevList< Rev< 0u, Arr64< Hash(L"Author899") >(), L"Title728" >  >() },
    { 1490u, RevList< Rev< 0u, Arr64< Hash(L"Andrzej Krzemie\xC5\x84ski") >(), L"P1490r0 Contract-Related Issues" >  >() },
    { 1491u, RevList< Rev< 0u, Arr64< Hash(L"Author1955") >(), L"Title1520" >  >() },
    { 1492u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Title714" >  >() },
    { 1493u, RevList< Rev< 0u, Arr64< Hash(L"Geoffrey Romer") >(), L"Title96" >  >() },
    { 1494u, RevList< Rev< 0u, Arr64< Hash(L"Author1784") >(), L"Partial program correctness" > , Rev< 1u, Arr64< Hash(L"Author415") >(), L"Partial program correctness" > , Rev< 2u, Arr64< Hash(L"Author1139") >(), L"Partial program correctness" > , Rev< 3u, Arr64< Hash(L"Author1209") >(), L"Partial program correctness" > , Rev< 4u, Arr64< Hash(L"Author794") >(), L"Partial program correctness" > , Rev< 5u, Arr64< Hash(L"Author1575") >(), L"Partial program correctness" >  >() },
    { 1496u, RevList< Rev< 0u, Arr64< Hash(L"Alan Talbot") >(), L"Formatting of negative zero" > , Rev< 1u, Arr64< Hash(L"Author54") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash(L"Author1400") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    { 1498u, RevList< Rev< 0u, Arr64< Hash(L"Chandler Carruth") >(), L"Constrained Internal Linkage for Modules" > , Rev< 1u, Arr64< Hash(L"Chandler Carruth") >(), L"Constrained Internal Linkage for Modules" >  >() },
    { 1502u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Standard library header units for C++20" > , Rev< 1u, Arr64< Hash(L"Richard Smith") >(), L"Standard library header units for C++20" >  >() },
    { 1505u, RevList< Rev< 0u, Arr64< Hash(L"Author945") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author530") >(), L"C++ International Standard" >  >() },
    { 1510u, RevList< Rev< 0u, Arr64< Hash(L"Author1768") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 1517u, RevList< Rev< 0u, Arr64< Hash(L"Ryan McDougall") >(), L"Contract Requirements for Iterative High-Assurance Systems" >  >() },
    { 1518u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Stop overconstraining allocators in container deduction guides" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Stop overconstraining allocators in container deduction guides" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Stop overconstraining allocators in container deduction guides" >  >() },
    { 1520u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title1125" >  >() },
    { 1522u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Iterator Difference Type and Integer Overflow" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Iterator Difference Type and Integer Overflow" >  >() },
    { 1523u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Views and Size Types" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Views and Size Types" >  >() },
    { 1525u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"One-Way execute is a Poor Basis Operation" > , Rev< 1u, Arr64< Hash(L"Gaaper A~man") >(), L"One-Way is a Poor Basis Operation" >  >() },
    { 1601u, RevList< Rev< 0u, Arr64< Hash(L"Author1708") >(), L"Recommendations for Specifying ``Hidden Friends''" >  >() },
    { 1602u, RevList< Rev< 0u, Arr64< Hash(L"Author710") >(), L"Make Me A Module" >  >() },
    { 1604u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"The inline keyword is not in line with the design of modules." > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"The inline keyword is not in line with the design of modules." >  >() },
    { 1605u, RevList< Rev< 0u, Arr64< Hash(L"Author745") >(), L"Member Layout Control" >  >() },
    { 1606u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title29" >  >() },
    { 1607u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title50" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title763" >  >() },
    { 1609u, RevList< Rev< 0u, Arr64< Hash(L"Hal Finkel") >(), L"C++ Should Support Just-in-Time Compilation" > , Rev< 1u, Arr64< Hash(L"Hal Finkel") >(), L"C++ Should Support Just-in-Time Compilation" > , Rev< 2u, Arr64< Hash(L"Hal Finkel") >(), L"C++ Should Support Just-in-Time Compilation" > , Rev< 3u, Arr64< Hash(L"Hal Finkel") >(), L"C++ Should Support Just-in-Time Compilation" >  >() },
    { 1610u, RevList< Rev< 0u, Arr64< Hash(L"Author1230") >(), L"D1610 Rename await_resume() to await_result().md" >  >() },
    { 1611u, RevList< Rev< 0u, Arr64< Hash(L"Author392") >(), L"Rod-Kona-P1611" >  >() },
    { 1612u, RevList< Rev< 0u, Arr64< Hash(L"Author413") >(), L"Relocate Endian's Specification" > , Rev< 1u, Arr64< Hash(L"Author2143") >(), L"Relocate Endian's Specification" >  >() },
    { 1614u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"The Mothership Has Landed Adding <=> to the Library" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"The Mothership has Landed" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"The Mothership has Landed" >  >() },
    { 1616u, RevList< Rev< 0u, Arr64< Hash(L"Mike Spertus") >(), L"Using unconstrained template template parameters with constrained templates" > , Rev< 1u, Arr64< Hash(L"Mike Spertus") >(), L"Using unconstrained template template parameters with constrained templates" >  >() },
    { 1619u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1694" > , Rev< 1u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title291" > , Rev< 2u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1348" >  >() },
    { 1622u, RevList< Rev< 0u, Arr64< Hash(L"Author1187") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author181") >(), L"C++ International Standard" > , Rev< 2u, Arr64< Hash(L"Author337") >(), L"P1622R2" > , Rev< 3u, Arr64< Hash(L"Author1528") >(), L"P1622R3" >  >() },
    { 1624u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"Resolving technical issues in parameter mapping equivalence and related problems" > , Rev< 1u, Arr64< Hash(L"Hubert S.K") >(), L"Resolving technical issues in parameter mapping equivalence and related problems" >  >() },
    { 1625u, RevList< Rev< 0u, Arr64< Hash(L"Author1311") >(), L"Contracts: why the house is not on fire (i.e. why the status quo is tolerable)" >  >() },
    { 1628u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title524" >  >() },
    { 1629u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Standard Text Encoding" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Transcoding the - Standard Text Encoding" >  >() },
    { 1630u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Spaceship needs a tune-up" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Spaceship needs a tune-up" >  >() },
    { 1631u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title1126" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title1503" >  >() },
    { 1633u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Amendments to the C++20 Synchronization Library" > , Rev< 1u, Arr64< Hash(L"David Olsen") >(), L"Amendments to the C++20 Synchronization Library" >  >() },
    { 1634u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Naming guidelines for modules" >  >() },
    { 1635u, RevList< Rev< 0u, Arr64< Hash(L"Author490") >(), L"Title409" >  >() },
    { 1636u, RevList< Rev< 0u, Arr64< Hash(L"Lars Gullik") >(), L"Formatters for library types" > , Rev< 1u, Arr64< Hash(L"Lars Gullik") >(), L"Formatters for library types" > , Rev< 2u, Arr64< Hash(L"Lars Gullik") >(), L"Formatters for library types" >  >() },
    { 1638u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1685" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title441" >  >() },
    { 1639u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title83" >  >() },
    { 1640u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Error size benchmarking" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Error size benchmarking: Redux" >  >() },
    { 1641u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Rewording the Status Quo" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"D1641R1.0: Freestanding Library: Rewording the Status Quo" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Rewording the Status Quo" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Rewording the Status Quo" >  >() },
    { 1642u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities]" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 4u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 5u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 6u, Arr64< Hash(L"Ben Craig") >(), L"P1642R6 Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 7u, Arr64< Hash(L"Ben Craig") >(), L"P1642R7 Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 8u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 9u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 10u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 11u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Easy [utilities], [ranges], and [iterators]" >  >() },
    { 1643u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Add wait/notify to atomic_ref<T>" > , Rev< 1u, Arr64< Hash(L"David Olsen") >(), L"Add wait/notify to atomic_ref<T>" >  >() },
    { 1644u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Add wait/notify to atomic<shared_ptr<T>>" >  >() },
    { 1645u, RevList< Rev< 0u, Arr64< Hash(L"Ben Deane") >(), L"constexpr for <numeric> algorithms" > , Rev< 1u, Arr64< Hash(L"Ben Deane") >(), L"constexpr for <numeric> algorithms" >  >() },
    { 1648u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1359" > , Rev< 1u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1428" > , Rev< 2u, Arr64< Hash(L"Mingxin Wang") >(), L"Title266" >  >() },
    { 1649u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title447" >  >() },
    { 1650u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Output std::chrono::days with 'd' suffix" >  >() },
    { 1651u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"bind_front should not unwrap reference_wrapper" >  >() },
    { 1652u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Printf corner cases in std::format - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Printf corner cases in std::format - HackMD" >  >() },
    { 1654u, RevList< Rev< 0u, Arr64< Hash(L"Author1511") >(), L"ABI breakage - summary of initial comments" > , Rev< 1u, Arr64< Hash(L"Author511") >(), L"ABI breakage - summary of initial comments" >  >() },
    { 1655u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"LEWG Omnibus Design Policy Paper" >  >() },
    { 1656u, RevList< Rev< 0u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"\"Throws: Nothing\" should be noexcept" > , Rev< 1u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"\"Throws: Nothing\" should be noexcept" > , Rev< 2u, Arr64< Hash(L"Agust\xC3\xADn Berg\xC3\xA9") >(), L"\"Throws: Nothing\" should be noexcept" >  >() },
    { 1657u, RevList< Rev< 0u, Arr64< Hash(L"Paul Fee") >(), L"Title257" >  >() },
    { 1658u, RevList< Rev< 0u, Arr64< Hash(L"Author3") >(), L"Suggestions for Consensus on Executors | P1658" >  >() },
    { 1659u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"starts_with and ends_with" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"starts_with and ends_with" > , Rev< 2u, Arr64< Hash(L"Christopher Di") >(), L"starts_with and ends_with" > , Rev< 3u, Arr64< Hash(L"Christopher Di") >(), L"starts_with and ends_with" >  >() },
    { 1660u, RevList< Rev< 0u, Arr64< Hash(L"Jared Hoberock") >(), L"A Compromise Executor Design Sketch" >  >() },
    { 1661u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Remove dedicated precalculated hash lookup interface" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Remove dedicated precalculated hash lookup interface" >  >() },
    { 1662u, RevList< Rev< 0u, Arr64< Hash(L"Author1483") >(), L"Title1155" >  >() },
    { 1663u, RevList< Rev< 0u, Arr64< Hash(L"Author146") >(), L"Title125" >  >() },
    { 1664u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 5u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 6u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" > , Rev< 7u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"reconstructible_range - a concept for putting ranges back together" >  >() },
    { 1665u, RevList< Rev< 0u, Arr64< Hash(L"John Bandela") >(), L"Title324" >  >() },
    { 1666u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2019/01/23 - 2019/05/22" >  >() },
    { 1667u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"Concept-aware `noexcept` specifiers" >  >() },
    { 1668u, RevList< Rev< 0u, Arr64< Hash(L"Erich Keane") >(), L"Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions" > , Rev< 1u, Arr64< Hash(L"Erich Keane") >(), L"Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions" >  >() },
    { 1669u, RevList< Rev< 0u, Arr64< Hash(L"Erich Keane") >(), L"Callsite Based Inlining Hints: [[always_inline]] and [[never_inline]]" >  >() },
    { 1670u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Title224" >  >() },
    { 1671u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title850" >  >() },
    { 1672u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1490" >  >() },
    { 1673u, RevList< Rev< 0u, Arr64< Hash(L"Author576") >(), L"Title467" > , Rev< 1u, Arr64< Hash(L"Author377") >(), L"Title320" > , Rev< 2u, Arr64< Hash(L"Author1666") >(), L"Title1296" > , Rev< 3u, Arr64< Hash(L"Author1570") >(), L"Title1217" > , Rev< 4u, Arr64< Hash(L"Mark Hoemmen") >(), L"D1673R4R4: D1673R4: A free function linear algebra interface based on the BLAS" > , Rev< 5u, Arr64< Hash(L"Mark Hoemmen") >(), L"P1673R5R5: P1673R5: A free function linear algebra interface based on the BLAS" > , Rev< 6u, Arr64< Hash(L"Mark Hoemmen") >(), L"P1673R6: A free function linear algebra interface based on the BLAS" > , Rev< 7u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 8u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 9u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 10u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 11u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 12u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" > , Rev< 13u, Arr64< Hash(L"Mark Hoemmen") >(), L"A free function linear algebra interface based on the BLAS" >  >() },
    { 1674u, RevList< Rev< 0u, Arr64< Hash(L"Author1445") >(), L"Title1122" > , Rev< 1u, Arr64< Hash(L"Author1829") >(), L"Title1421" > , Rev< 2u, Arr64< Hash(L"Author1997") >(), L"Evolving a Standard C++ Linear Algebra Library from the BLAS" >  >() },
    { 1675u, RevList< Rev< 0u, Arr64< Hash(L"Author737") >(), L"Title594" > , Rev< 1u, Arr64< Hash(L"Author353") >(), L"rethrow_exception must be allowed to copy" > , Rev< 2u, Arr64< Hash(L"Author1629") >(), L"rethrow_exception must be allowed to copy" >  >() },
    { 1676u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title1462" >  >() },
    { 1677u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"Cancellation is not an Error" > , Rev< 1u, Arr64< Hash(L"Kirk Shoop") >(), L"Cancellation is not an Error" > , Rev< 2u, Arr64< Hash(L"Kirk Shoop") >(), L"Cancellation is serendipitous-success" >  >() },
    { 1678u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"Callbacks and Composition" > , Rev< 1u, Arr64< Hash(L"Kirk Shoop") >(), L"Callbacks and Composition" > , Rev< 2u, Arr64< Hash(L"Kirk Shoop") >(), L"Callbacks and Composition" >  >() },
    { 1679u, RevList< Rev< 0u, Arr64< Hash(L"Wim Leflere") >(), L"String Contains function" > , Rev< 1u, Arr64< Hash(L"Wim Leflere") >(), L"String Contains function" > , Rev< 2u, Arr64< Hash(L"Wim Leflere") >(), L"string contains function" > , Rev< 3u, Arr64< Hash(L"Wim Leflere") >(), L"string contains function" >  >() },
    { 1680u, RevList< Rev< 0u, Arr64< Hash(L"Author1023") >(), L"p1680r0" >  >() },
    { 1681u, RevList< Rev< 0u, Arr64< Hash(L"Gor Nishanov") >(), L"Title1116" >  >() },
    { 1682u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::to_underlying for enumerations" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::to_underlying for enumerations" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::to_underlying for enumerations" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"std::to_underlying for enumerations" >  >() },
    { 1683u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"References for Standard Library Vocabulary Types - an optional<> case study" >  >() },
    { 1684u, RevList< Rev< 0u, Arr64< Hash(L"David Hollman") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 1u, Arr64< Hash(L"Christian Trott") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 2u, Arr64< Hash(L"Christian Trott") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 3u, Arr64< Hash(L"Christian Trott") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 4u, Arr64< Hash(L"Christian Trott") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 5u, Arr64< Hash(L"Christian Trott") >(), L"mdarray: An Owning Multidimensional Array Analog of mdspan" >  >() },
    { 1685u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Microsoft Word - P1685_replaceable_default_resource.docx" >  >() },
    { 1686u, RevList< Rev< 0u, Arr64< Hash(L"Author1111") >(), L"C++ International Standard" > , Rev< 1u, Arr64< Hash(L"Author187") >(), L"C++ International Standard" > , Rev< 2u, Arr64< Hash(L"Author523") >(), L"Mandating the Standard Library: Clause 27 - Time library" >  >() },
    { 1687u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Summary of the Tooling Study Groups Pre-Cologne Telecons on Modules Tooling Interactions" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"Summary of the Tooling Study Groups Modules Ecosystem Technical Report Telecons" >  >() },
    { 1688u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Towards a C++ Ecosystem Technical Report" >  >() },
    { 1689u, RevList< Rev< 0u, Arr64< Hash(L"Author1516") >(), L"Format for describing dependencies of source files" > , Rev< 1u, Arr64< Hash(L"Author1120") >(), L"Format for describing dependencies of source files" > , Rev< 2u, Arr64< Hash(L"Author321") >(), L"Format for describing dependencies of source files" > , Rev< 3u, Arr64< Hash(L"Author908") >(), L"Format for describing dependencies of source files" > , Rev< 4u, Arr64< Hash(L"Author343") >(), L"Format for describing dependencies of source files" > , Rev< 5u, Arr64< Hash(L"Author614") >(), L"Format for describing dependencies of source files" >  >() },
    { 1690u, RevList< Rev< 0u, Arr64< Hash(L"Xiao Shi") >(), L"Refinement Proposal for P0919 Heterogeneous lookup for unordered containers" > , Rev< 1u, Arr64< Hash(L"Xiao Shi") >(), L"Refinement Proposal for P0919 Heterogeneous lookup for unordered containers" >  >() },
    { 1696u, RevList< Rev< 0u, Arr64< Hash(L"Xiao Shi") >(), L"Refinement proposal for P0920 Precalculated hash values in lookup" >  >() },
    { 1697u, RevList< Rev< 0u, Arr64< Hash(L"Botond Ballo") >(), L"Require a diagnostic for \"declaration changes meaning\"" >  >() },
    { 1700u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"Audience Tables" >  >() },
    { 1701u, RevList< Rev< 0u, Arr64< Hash(L"Author1192") >(), L"Inline Namespaces: Fragility Bites" > , Rev< 1u, Arr64< Hash(L"Author264") >(), L"Inline Namespaces: Fragility Bites" > , Rev< 2u, Arr64< Hash(L"Author808") >(), L"Inline Namespaces: Fragility Bites" >  >() },
    { 1702u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title783" >  >() },
    { 1703u, RevList< Rev< 0u, Arr64< Hash(L"Author1029") >(), L"Recognizing Header Unit Imports Requires Full Preprocessing" > , Rev< 1u, Arr64< Hash(L"Author1160") >(), L"Recognizing Header Unit Imports Requires Full Preprocessing" >  >() },
    { 1704u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"axiom_level_contract_statements" >  >() },
    { 1705u, RevList< Rev< 0u, Arr64< Hash(L"Shafik Yaghmour") >(), L"Enumerating Core Undefined Behavior" > , Rev< 1u, Arr64< Hash(L"Shafik Yaghmour") >(), L"Enumerating Core Undefined Behavior" >  >() },
    { 1706u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1435" > , Rev< 1u, Arr64< Hash(L"Michael Wong") >(), L"Title631" > , Rev< 2u, Arr64< Hash(L"Michael Wong") >(), L"Title735" > , Rev< 3u, Arr64< Hash(L"Michael Wong") >(), L"Programming Language Vulnerabilities for Safety Critical C++" >  >() },
    { 1708u, RevList< Rev< 0u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title1422" > , Rev< 1u, Arr64< Hash(L"Author2150") >(), L"Title1656" > , Rev< 2u, Arr64< Hash(L"Author156") >(), L"Title132" > , Rev< 3u, Arr64< Hash(L"Author345") >(), L"Title289" > , Rev< 4u, Arr64< Hash(L"Author942") >(), L"Title760" > , Rev< 5u, Arr64< Hash(L"Author73") >(), L"Title75" > , Rev< 6u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title1321" > , Rev< 7u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title442" > , Rev< 8u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title1058" > , Rev< 9u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title1099" >  >() },
    { 1709u, RevList< Rev< 0u, Arr64< Hash(L"Phillip Ratzloff") >(), L"Title538" > , Rev< 1u, Arr64< Hash(L"Phillip Ratzloff") >(), L"Title451" > , Rev< 2u, Arr64< Hash(L"Phillip Ratzloff") >(), L"Title946" > , Rev< 3u, Arr64< Hash(L"Phillip Ratzloff") >(), L"Graph Proposal" > , Rev< 4u, Arr64< Hash(L"Author1161") >(), L"Title921" > , Rev< 5u, Arr64< Hash(L"Author1194") >(), L"Title936" >  >() },
    { 1710u, RevList< Rev< 0u, Arr64< Hash(L"Author1880") >(), L"Adding a global contract assumption mode" >  >() },
    { 1711u, RevList< Rev< 0u, Arr64< Hash(L"Author37") >(), L"Title33" >  >() },
    { 1713u, RevList< Rev< 0u, Arr64< Hash(L"Author404") >(), L"Title345" >  >() },
    { 1714u, RevList< Rev< 0u, Arr64< Hash(L"Author1725") >(), L"NTTP are incomplete without float, double, and long double!" > , Rev< 1u, Arr64< Hash(L"Author1830") >(), L"NTTP are incomplete without float, double, and long double!" >  >() },
    { 1715u, RevList< Rev< 0u, Arr64< Hash(L"Author400") >(), L"Loosen restrictions on \"_t\" typedefs." > , Rev< 1u, Arr64< Hash(L"Author2170") >(), L"Loosen restrictions on \"_t\" typedefs." >  >() },
    { 1716u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"ranges compare algorithm are over-constrained" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"ranges compare algorithm are over-constrained" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"ranges compare algorithm are over-constrained" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"ranges compare algorithm are over-constrained" >  >() },
    { 1717u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Title750" >  >() },
    { 1718u, RevList< Rev< 0u, Arr64< Hash(L"Author1011") >(), L"Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash(L"Author334") >(), L"Mandating the Standard Library: Clause 25" > , Rev< 2u, Arr64< Hash(L"Author1979") >(), L"Mandating the Standard Library: Clause 25" >  >() },
    { 1719u, RevList< Rev< 0u, Arr64< Hash(L"Author1173") >(), L"Mandating the Standard Library: Clause 26" > , Rev< 1u, Arr64< Hash(L"Author2171") >(), L"Mandating the Standard Library: Clause 26" > , Rev< 2u, Arr64< Hash(L"Author32") >(), L"Mandating the Standard Library: Clause 26" >  >() },
    { 1720u, RevList< Rev< 0u, Arr64< Hash(L"Author1108") >(), L"Mandating the Standard Library: Clause 28" > , Rev< 1u, Arr64< Hash(L"Author356") >(), L"Mandating the Standard Library: Clause 28" > , Rev< 2u, Arr64< Hash(L"Author79") >(), L"Mandating the Standard Library: Clause 28" >  >() },
    { 1721u, RevList< Rev< 0u, Arr64< Hash(L"Author1687") >(), L"Mandating the Standard Library: Clause 29" > , Rev< 1u, Arr64< Hash(L"Author2120") >(), L"Mandating the Standard Library: Clause 29" > , Rev< 2u, Arr64< Hash(L"Author202") >(), L"Mandating the Standard Library: Clause 29" >  >() },
    { 1722u, RevList< Rev< 0u, Arr64< Hash(L"Author440") >(), L"Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash(L"Author92") >(), L"Mandating the Standard Library: Clause 30" > , Rev< 2u, Arr64< Hash(L"Author2193") >(), L"Mandating the Standard Library: Clause 30" >  >() },
    { 1723u, RevList< Rev< 0u, Arr64< Hash(L"Author1787") >(), L"Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash(L"Author128") >(), L"Mandating the Standard Library: Clause 31" > , Rev< 2u, Arr64< Hash(L"Author386") >(), L"Mandating the Standard Library: Clause 31" >  >() },
    { 1724u, RevList< Rev< 0u, Arr64< Hash(L"Author1327") >(), L"C++ Standard Library Issues to be moved in Cologne" >  >() },
    { 1725u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"Modular Topic Design" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"Modular Topic Design" >  >() },
    { 1726u, RevList< Rev< 0u, Arr64< Hash(L"Author1044") >(), L"Title836" > , Rev< 1u, Arr64< Hash(L"Author1771") >(), L"Title1377" > , Rev< 2u, Arr64< Hash(L"Author714") >(), L"Title576" > , Rev< 3u, Arr64< Hash(L"Author1624") >(), L"Title1258" > , Rev< 4u, Arr64< Hash(L"Author305") >(), L"Title259" > , Rev< 5u, Arr64< Hash(L"Paul E") >(), L"P1726R5 Pointer lifetime-end zap" >  >() },
    { 1727u, RevList< Rev< 0u, Arr64< Hash(L"Denis Yaroshevskiy") >(), L"Issues with current flat_map proposal" >  >() },
    { 1728u, RevList< Rev< 0u, Arr64< Hash(L"Andrzej Krzemie\xC5\x84ski") >(), L"contracts_explained" >  >() },
    { 1729u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Parsing" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Text Parsing" > , Rev< 2u, Arr64< Hash(L"Elias Kosunen") >(), L"Text Parsing" > , Rev< 3u, Arr64< Hash(L"Elias Kosunen") >(), L"Text Parsing" > , Rev< 4u, Arr64< Hash(L"Elias Kosunen") >(), L"Text Parsing" > , Rev< 5u, Arr64< Hash(L"Elias Kosunen") >(), L"Text Parsing" >  >() },
    { 1730u, RevList< Rev< 0u, Arr64< Hash(L"Author849") >(), L"Title668" >  >() },
    { 1731u, RevList< Rev< 0u, Arr64< Hash(L"Ilya Burylov") >(), L"Microsoft Word - P1731R0_memory_helpers.docx" > , Rev< 1u, Arr64< Hash(L"Ilya Burylov") >(), L"Title1390" >  >() },
    { 1732u, RevList< Rev< 0u, Arr64< Hash(L"Author48") >(), L"Title51" > , Rev< 1u, Arr64< Hash(L"Author210") >(), L"Title174" > , Rev< 2u, Arr64< Hash(L"Author1211") >(), L"Title950" > , Rev< 3u, Arr64< Hash(L"Author27") >(), L"Title21" > , Rev< 4u, Arr64< Hash(L"Author1215") >(), L"Title952" >  >() },
    { 1733u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"User-friendly and Evolution-friendly Reflection: A Compromise" >  >() },
    { 1734u, RevList< Rev< 0u, Arr64< Hash(L"Author449") >(), L"Title378" >  >() },
    { 1735u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title682" >  >() },
    { 1736u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title774" >  >() },
    { 1737u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title1614" >  >() },
    { 1738u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"The Executor Concept Hierarchy Needs a Single Root" >  >() },
    { 1739u, RevList< Rev< 0u, Arr64< Hash(L"Author390") >(), L"Title333" > , Rev< 1u, Arr64< Hash(L"Author606") >(), L"Title496" > , Rev< 2u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Avoid template bloat for forwarding ranges in combination with subrange-y view adaptors." > , Rev< 3u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Avoid template bloat for safe_ranges in combination with subrange-y view adaptors." > , Rev< 4u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Avoid template bloat for s in combination with subrange-y view adaptors." >  >() },
    { 1743u, RevList< Rev< 0u, Arr64< Hash(L"Author1382") >(), L"Title1074" >  >() },
    { 1744u, RevList< Rev< 0u, Arr64< Hash(L"Author1593") >(), L"Title1233" >  >() },
    { 1745u, RevList< Rev< 0u, Arr64< Hash(L"Author254") >(), L"Title214" >  >() },
    { 1746u, RevList< Rev< 0u, Arr64< Hash(L"Richard Powell") >(), L"Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio" > , Rev< 1u, Arr64< Hash(L"Richard Powell") >(), L"D1746R1: Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio" >  >() },
    { 1747u, RevList< Rev< 0u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Dont use `char8_t` and `std::u8string` yet in P1389" >  >() },
    { 1748u, RevList< Rev< 0u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Fill in [delay.cpp] TODO in P1389" > , Rev< 1u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Fill in [delay.cpp] TODO in P1389" >  >() },
    { 1749u, RevList< Rev< 0u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Access control for reflection" >  >() },
    { 1750u, RevList< Rev< 0u, Arr64< Hash(L"Author1697") >(), L"D1750R0 A Proposal to Add Process Management to the C++ Standard Library" > , Rev< 1u, Arr64< Hash(L"Author503") >(), L"P1750R1 A Proposal to Add Process Management to the C++ Standard Library" >  >() },
    { 1751u, RevList< Rev< 0u, Arr64< Hash(L"Author973") >(), L"p1751r0" >  >() },
    { 1753u, RevList< Rev< 0u, Arr64< Hash(L"Author682") >(), L"Name Lookup Should ``Find the First Thing of That Name''" >  >() },
    { 1754u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1672" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title310" >  >() },
    { 1759u, RevList< Rev< 0u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handle from file streams" > , Rev< 1u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handle from file streams" > , Rev< 2u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handle from file streams" > , Rev< 3u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handles and file streams" > , Rev< 4u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handles and file streams" > , Rev< 5u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handles and file streams" > , Rev< 6u, Arr64< Hash(L"Elias Kosunen") >(), L"Native handles and file streams" >  >() },
    { 1760u, RevList< Rev< 0u, Arr64< Hash(L"Author2160") >(), L"Title1662" >  >() },
    { 1761u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title156" >  >() },
    { 1762u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title967" >  >() },
    { 1764u, RevList< Rev< 0u, Arr64< Hash(L"Tony Van") >(), L"Title543" >  >() },
    { 1766u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Mitigating minor modules maladies" > , Rev< 1u, Arr64< Hash(L"Richard Smith") >(), L"Mitigating minor modules maladies" >  >() },
    { 1767u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Packaging C++ Modules" >  >() },
    { 1768u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title97" >  >() },
    { 1769u, RevList< Rev< 0u, Arr64< Hash(L"Author2175") >(), L"The \"default\" contract build-level and continuation-mode should be implementation-defined" >  >() },
    { 1770u, RevList< Rev< 0u, Arr64< Hash(L"Author848") >(), L"On vectors, tensors, matrices, and hypermatrices" >  >() },
    { 1771u, RevList< Rev< 0u, Arr64< Hash(L"Author676") >(), L"Title548" > , Rev< 1u, Arr64< Hash(L"Author399") >(), L"Title340" >  >() },
    { 1772u, RevList< Rev< 0u, Arr64< Hash(L"Author557") >(), L"P1772R0" > , Rev< 1u, Arr64< Hash(L"Author2211") >(), L"P1772R1" >  >() },
    { 1773u, RevList< Rev< 0u, Arr64< Hash(L"Author424") >(), L"Title363" >  >() },
    { 1774u, RevList< Rev< 0u, Arr64< Hash(L"Author707") >(), L"Title570" > , Rev< 1u, Arr64< Hash(L"Author367") >(), L"Title313" > , Rev< 2u, Arr64< Hash(L"Author853") >(), L"Title672" > , Rev< 3u, Arr64< Hash(L"Author599") >(), L"Title491" > , Rev< 4u, Arr64< Hash(L"Author2075") >(), L"Title1607" > , Rev< 5u, Arr64< Hash(L"Author852") >(), L"Title670" > , Rev< 6u, Arr64< Hash(L"Author2213") >(), L"Title1693" > , Rev< 7u, Arr64< Hash(L"Author110") >(), L"Title98" > , Rev< 8u, Arr64< Hash(L"Author907") >(), L"Title733" >  >() },
    { 1779u, RevList< Rev< 0u, Arr64< Hash(L"Author1366") >(), L"ABI isolation for member functions" > , Rev< 1u, Arr64< Hash(L"Author882") >(), L"ABI isolation for member functions" > , Rev< 2u, Arr64< Hash(L"Author1262") >(), L"ABI isolation for member functions" > , Rev< 3u, Arr64< Hash(L"Author1723") >(), L"ABI isolation for member functions" >  >() },
    { 1780u, RevList< Rev< 0u, Arr64< Hash(L"Mark Batty") >(), L"D1780R0: Modular Relaxed Dependencies: A new approach to the Out-Of-Thin-Air Problem" >  >() },
    { 1782u, RevList< Rev< 0u, Arr64< Hash(L"Author382") >(), L"Local contract restrictions" > , Rev< 1u, Arr64< Hash(L"Author290") >(), L"Local contract restrictions" >  >() },
    { 1786u, RevList< Rev< 0u, Arr64< Hash(L"Author1612") >(), L"Title1247" >  >() },
    { 1787u, RevList< Rev< 0u, Arr64< Hash(L"Author1695") >(), L"Declarations and where to find them" > , Rev< 1u, Arr64< Hash(L"Author1922") >(), L"Declarations and where to find them" > , Rev< 2u, Arr64< Hash(L"Author430") >(), L"Declarations and where to find them" > , Rev< 3u, Arr64< Hash(L"Author1005") >(), L"Declarations and where to find them" > , Rev< 4u, Arr64< Hash(L"Author394") >(), L"Declarations and where to find them" > , Rev< 5u, Arr64< Hash(L"Author194") >(), L"Declarations and where to find them" > , Rev< 6u, Arr64< Hash(L"Author1556") >(), L"Declarations and where to find them" >  >() },
    { 1788u, RevList< Rev< 0u, Arr64< Hash(L"Author1578") >(), L"Title1223" > , Rev< 2u, Arr64< Hash(L"Author1393") >(), L"Title1082" > , Rev< 3u, Arr64< Hash(L"Author776") >(), L"Title633" >  >() },
    { 1789u, RevList< Rev< 0u, Arr64< Hash(L"Author328") >(), L"Library Support for Expansion Statements" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Library Support for Expansion Statements" >  >() },
    { 1790u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to enable better DynamicBuffer composition" > , Rev< 1u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to enable better DynamicBuffer composition" >  >() },
    { 1791u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Evolution of the P0443 Unified Executors Proposal to accommodate new requirements" >  >() },
    { 1792u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Simplifying and generalising Sender/Receiver for asynchronous operations" >  >() },
    { 1793u, RevList< Rev< 0u, Arr64< Hash(L"Author965") >(), L"Proposal Template" >  >() },
    { 1795u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"p1795r0.html" > , Rev< 1u, Arr64< Hash(L"Gordon Brown") >(), L"d1795r1.html" > , Rev< 2u, Arr64< Hash(L"Gordon Brown") >(), L"Title243" >  >() },
    { 1796u, RevList< Rev< 0u, Arr64< Hash(L"Author660") >(), L"Effective types: examples (P1796R0)" >  >() },
    { 1797u, RevList< Rev< 0u, Arr64< Hash(L"Author765") >(), L"C/C++ Memory Object Model Papers - Introduction (P1797R0)" >  >() },
    { 1798u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title986" >  >() },
    { 1801u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1241" >  >() },
    { 1803u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"packexpr(args, I) -- compile-time friendly pack inspection" >  >() },
    { 1807u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title38" >  >() },
    { 1808u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Contra P0339 \"`polymorphic_allocator<>` as a vocabulary type\"" >  >() },
    { 1810u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"A Quick Look at What P1754 Will Change" >  >() },
    { 1811u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Relaxing redefinition restrictions for re-exportation robustness" >  >() },
    { 1812u, RevList< Rev< 0u, Arr64< Hash(L"Author1535") >(), L"Title1190" >  >() },
    { 1813u, RevList< Rev< 0u, Arr64< Hash(L"Author1715") >(), L"A Concept Design for the Numeric Algorithms" >  >() },
    { 1814u, RevList< Rev< 0u, Arr64< Hash(L"Author336") >(), L"Wording for Class Template Argument Deduction for Alias Templates" >  >() },
    { 1815u, RevList< Rev< 0u, Arr64< Hash(L"Author763") >(), L"Translation-unit-local entities" > , Rev< 1u, Arr64< Hash(L"Author1027") >(), L"Translation-unit-local entities" > , Rev< 2u, Arr64< Hash(L"Author178") >(), L"Translation-unit-local entities" >  >() },
    { 1816u, RevList< Rev< 0u, Arr64< Hash(L"Author980") >(), L"Title791" >  >() },
    { 1818u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"Narrowing and Widening Conversions" > , Rev< 1u, Arr64< Hash(L"Lawrence Crowl") >(), L"Narrowing and Widening Conversions" >  >() },
    { 1819u, RevList< Rev< 0u, Arr64< Hash(L"Author173") >(), L"Untitled" >  >() },
    { 1820u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"p1820r0.html" >  >() },
    { 1823u, RevList< Rev< 0u, Arr64< Hash(L"Author1816") >(), L"d1823r0" >  >() },
    { 1825u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title314" >  >() },
    { 1830u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"Title514" > , Rev< 1u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"Title1575" >  >() },
    { 1831u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>: library" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Deprecating <code>volatile</code>: library" >  >() },
    { 1832u, RevList< Rev< 0u, Arr64< Hash(L"Author1587") >(), L"p1832r0" >  >() },
    { 1837u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Remove NTTPs of class type from C++20" >  >() },
    { 1838u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Title1479" >  >() },
    { 1839u, RevList< Rev< 0u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Accessing Object Representations" > , Rev< 1u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Accessing Object Representations" > , Rev< 2u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Accessing Object Representations" > , Rev< 3u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Accessing Object Representations" > , Rev< 4u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Accessing Object Representations" > , Rev< 5u, Arr64< Hash(L"Author1396") >(), L"Title1087" > , Rev< 6u, Arr64< Hash(L"Timur Doumler") >(), L"Accessing object representations" > , Rev< 7u, Arr64< Hash(L"Timur Doumler") >(), L"Accessing object representations" >  >() },
    { 1840u, RevList< Rev< 0u, Arr64< Hash(L"Author2106") >(), L"Rod-Cologne" >  >() },
    { 1841u, RevList< Rev< 0u, Arr64< Hash(L"Author186") >(), L"Wording for Individually Specializable Numeric Traits" > , Rev< 1u, Arr64< Hash(L"Author1442") >(), L"Wording for Individually Specializable Numeric Traits" > , Rev< 2u, Arr64< Hash(L"Author497") >(), L"Wording for Individually Specializable Numeric Traits" > , Rev< 3u, Arr64< Hash(L"Author1975") >(), L"Wording for Individually Specializable Numeric Traits" >  >() },
    { 1842u, RevList< Rev< 0u, Arr64< Hash(L"Author1598") >(), L"Generalized Module (Dependency?) Mapper" >  >() },
    { 1843u, RevList< Rev< 0u, Arr64< Hash(L"Author1526") >(), L"comparison and hasher requirements" >  >() },
    { 1844u, RevList< Rev< 0u, Arr64< Hash(L"Author240") >(), L"Enhancement of regex" > , Rev< 1u, Arr64< Hash(L"Author1567") >(), L"Enhancement of regex" >  >() },
    { 1845u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2019-09-21 Denver Tooling Meeting" >  >() },
    { 1846u, RevList< Rev< 0u, Arr64< Hash(L"Author1008") >(), L"p1846r0" >  >() },
    { 1847u, RevList< Rev< 0u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1847R0.doc" > , Rev< 1u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1847R1.doc" > , Rev< 2u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1847R2.doc" > , Rev< 3u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1847R3.doc" > , Rev< 4u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1847R4.doc" >  >() },
    { 1848u, RevList< Rev< 0u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - P1848R0.doc" >  >() },
    { 1851u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"Guidelines For snake_case Concept Naming" >  >() },
    { 1854u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1443" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title869" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title602" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title58" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1131" >  >() },
    { 1855u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0Ben Craig") >(), L"Make <compare> freestanding" >  >() },
    { 1856u, RevList< Rev< 0u, Arr64< Hash(L"Author1458") >(), L"P1856R0" >  >() },
    { 1857u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"<code>remove.dots.in.module.names</code>" > , Rev< 1u, Arr64< Hash(L"Michael Spencer") >(), L"Modules Dependency Discovery" > , Rev< 2u, Arr64< Hash(L"Michael Spencer") >(), L"Modules Dependency Discovery" > , Rev< 3u, Arr64< Hash(L"Michael Spencer") >(), L"Modules Dependency Discovery" >  >() },
    { 1858u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Generalized pack declaration and usage" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Generalized pack declaration and usage" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Generalized pack declaration and usage" >  >() },
    { 1859u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Standard terminology character sets and encodings" >  >() },
    { 1860u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"C++ Networking Must Be Secure By Default" >  >() },
    { 1861u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"D1861R0: Secure Connections in Networking TS" > , Rev< 1u, Arr64< Hash(L"Alex Christensen") >(), L"Secure Networking in C++" >  >() },
    { 1862u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title301" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1344" >  >() },
    { 1863u, RevList< Rev< 0u, Arr64< Hash(L"Author1285") >(), L"Title996" > , Rev< 1u, Arr64< Hash(L"Author1884") >(), L"Title1461" >  >() },
    { 1864u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Defining Target Tuplets" >  >() },
    { 1865u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Add max() to latch and barrier" > , Rev< 1u, Arr64< Hash(L"David Olsen") >(), L"Add max() to latch and barrier" >  >() },
    { 1868u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"width: clarifying units of width and precision in std::format" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"width: clarifying units of width and precision in std::format" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"width: clarifying units of width and precision in std::format" >  >() },
    { 1869u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Rename 'condition_variable_any' interruptible wait methods" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Rename 'condition_variable_any' interruptible wait methods" >  >() },
    { 1870u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"forwarding-range<T> is too subtle" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"forwarding-range<T> is too subtle" >  >() },
    { 1871u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Should concepts be enabled or disabled?" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Concept traits should be named after concepts" >  >() },
    { 1872u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title1486" >  >() },
    { 1873u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"<code>remove.dots.in.module.names</code>" > , Rev< 1u, Arr64< Hash(L"Michael Spencer") >(), L"<code>remove.dots.in.module.names</code>" >  >() },
    { 1874u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"Dynamic Initialization Order of Non-Local Variables in Modules" > , Rev< 1u, Arr64< Hash(L"Michael Spencer") >(), L"Dynamic Initialization Order of Non-Local Variables in Modules" >  >() },
    { 1875u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spear") >(), L"Title1604" > , Rev< 1u, Arr64< Hash(L"Michael Spear") >(), L"Title689" > , Rev< 2u, Arr64< Hash(L"Michael Spear") >(), L"Title650" >  >() },
    { 1876u, RevList< Rev< 0u, Arr64< Hash(L"Author1530") >(), L"All The Module Names" > , Rev< 1u, Arr64< Hash(L"Author2087") >(), L"All The Module Names" >  >() },
    { 1877u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Saving Private Ranges: Recovering Lost Information from Comparison and Predicate Algorithms" >  >() },
    { 1878u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Constraining Readable Types" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Constraining Readable Types" >  >() },
    { 1879u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Please Don't Rewrite My String Literals" >  >() },
    { 1880u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"uNstring Arguments Shall Be UTF-N Encoded" >  >() },
    { 1881u, RevList< Rev< 0u, Arr64< Hash(L"Vittorio Romeo") >(), L"Epochs: a backward-compatible language evolution mechanism" > , Rev< 1u, Arr64< Hash(L"Vittorio Romeo") >(), L"Epochs: a backward-compatible language evolution mechanism" >  >() },
    { 1882u, RevList< Rev< 0u, Arr64< Hash(L"Noel Tchidjo") >(), L"Title604" >  >() },
    { 1883u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title942" > , Rev< 1u, Arr64< Hash(L"Niall Douglas") >(), L"Title797" > , Rev< 2u, Arr64< Hash(L"Niall Douglas") >(), L"Title1574" >  >() },
    { 1884u, RevList< Rev< 0u, Arr64< Hash(L"Author1463") >(), L"Private Module Fragment: An Inconsistent Boundary" >  >() },
    { 1885u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title849" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1206" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title437" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title209" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title558" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1590" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title965" > , Rev< 7u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1044" > , Rev< 8u, Arr64< Hash(L"Corentin Jabot") >(), L"Title794" > , Rev< 9u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1289" > , Rev< 10u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1239" > , Rev< 11u, Arr64< Hash(L"Corentin Jabot") >(), L"Title694" > , Rev< 12u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1410" >  >() },
    { 1886u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Error speed benchmarking" >  >() },
    { 1887u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title169" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1372" >  >() },
    { 1888u, RevList< Rev< 0u, Arr64< Hash(L"Matti Rintala") >(), L"Title1160" >  >() },
    { 1889u, RevList< Rev< 0u, Arr64< Hash(L"Author1428") >(), L"C++ Numerics Work In Progress" > , Rev< 1u, Arr64< Hash(L"Author97") >(), L"C++ Numerics Work In Progress" >  >() },
    { 1890u, RevList< Rev< 0u, Arr64< Hash(L"Author1109") >(), L"C++ Numerics Work In Progress Issues" >  >() },
    { 1891u, RevList< Rev< 0u, Arr64< Hash(L"Guy Davidson") >(), L"Title53" >  >() },
    { 1892u, RevList< Rev< 0u, Arr64< Hash(L"Author374") >(), L"Title317" > , Rev< 1u, Arr64< Hash(L"Author2229") >(), L"Title1706" >  >() },
    { 1893u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1053" >  >() },
    { 1894u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1688" >  >() },
    { 1895u, RevList< Rev< 0u, Arr64< Hash(L"Author689") >(), L"Title555" >  >() },
    { 1896u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2019/06/12 - 2019/09/25" >  >() },
    { 1897u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 1u, Arr64< Hash(L"Lee Howes") >(), L"Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 2u, Arr64< Hash(L"Lee Howes") >(), L"Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 3u, Arr64< Hash(L"Lee Howes") >(), L"Towards C++23 executors: A proposal for an initial set of algorithms" >  >() },
    { 1898u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"Forward progress delegation for executors" > , Rev< 1u, Arr64< Hash(L"Lee Howes") >(), L"Forward progress delegation for executors" >  >() },
    { 1899u, RevList< Rev< 0u, Arr64< Hash(L"Author1678") >(), L"strideview" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"`stride_view`" > , Rev< 2u, Arr64< Hash(L"Christopher Di") >(), L"stride_view" > , Rev< 3u, Arr64< Hash(L"Christopher Di") >(), L"stride_view" >  >() },
    { 1900u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Concepts-Adjacent Problems" >  >() },
    { 1901u, RevList< Rev< 0u, Arr64< Hash(L"Daryl Haresign") >(), L"P1901R0 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" > , Rev< 1u, Arr64< Hash(L"Daryl Haresign") >(), L"P1901R1 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" > , Rev< 2u, Arr64< Hash(L"Daryl Haresign") >(), L"P1901R2 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" >  >() },
    { 1902u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Missing feature-test macros 2018-2019" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Missing feature-test macros 2017-2019" >  >() },
    { 1905u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title999" >  >() },
    { 1906u, RevList< Rev< 0u, Arr64< Hash(L"Author1571") >(), L"Title1219" >  >() },
    { 1907u, RevList< Rev< 0u, Arr64< Hash(L"Author475") >(), L"Inconsistencies with non-type template parameters" > , Rev< 1u, Arr64< Hash(L"Author1293") >(), L"Inconsistencies with non-type template parameters" >  >() },
    { 1908u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title379" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1583" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1180" >  >() },
    { 1909u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1149" >  >() },
    { 1910u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1442" >  >() },
    { 1911u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1189" >  >() },
    { 1912u, RevList< Rev< 0u, Arr64< Hash(L"Author873") >(), L"Title700" > , Rev< 1u, Arr64< Hash(L"Author340") >(), L"Title286" >  >() },
    { 1913u, RevList< Rev< 0u, Arr64< Hash(L"Author140") >(), L"Comments on Audio Devices" >  >() },
    { 1914u, RevList< Rev< 0u, Arr64< Hash(L"Author1510") >(), L"P1914R0" >  >() },
    { 1915u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Expected Feedback from simd in the Parallelism TS 2 [P1915R0]" >  >() },
    { 1916u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Title106" >  >() },
    { 1917u, RevList< Rev< 0u, Arr64< Hash(L"Author1706") >(), L"C++ Standard Library Issues to be moved in Belfast" >  >() },
    { 1919u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title255" > , Rev< 1u, Arr64< Hash(L"Nevin ") >(), L"Title396" > , Rev< 2u, Arr64< Hash(L"Nevin ") >(), L"Title554" > , Rev< 3u, Arr64< Hash(L"Nevin ") >(), L"Title1335" >  >() },
    { 1920u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Title1259" >  >() },
    { 1921u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title508" >  >() },
    { 1922u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title908" >  >() },
    { 1923u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title853" >  >() },
    { 1924u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title801" >  >() },
    { 1925u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title551" >  >() },
    { 1926u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title1668" >  >() },
    { 1927u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title244" >  >() },
    { 1928u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Merge data-parallel types from the Parallelism TS 2 [P1928R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Merge data-parallel types from the Parallelism TS 2 [P1928R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Merge data-parallel types from the Parallelism TS 2 [P1928R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Merge data-parallel types from the Parallelism TS 2 [P1928R3]" > , Rev< 4u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R4]" > , Rev< 5u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R5]" > , Rev< 6u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R6]" > , Rev< 7u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R7]" > , Rev< 8u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R8]" > , Rev< 9u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R9]" > , Rev< 10u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R10]" > , Rev< 11u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R11]" > , Rev< 12u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R12]" > , Rev< 13u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R13]" > , Rev< 14u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R14]" > , Rev< 15u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd merge data-parallel types from the Parallelism TS 2 [P1928R15]" >  >() },
    { 1929u, RevList< Rev< 0u, Arr64< Hash(L"Alexander Zaitsev") >(), L"Title307" >  >() },
    { 1930u, RevList< Rev< 0u, Arr64< Hash(L"Author807") >(), L"Title648" >  >() },
    { 1932u, RevList< Rev< 0u, Arr64< Hash(L"Pavel Dyakov") >(), L"Title711" >  >() },
    { 1933u, RevList< Rev< 0u, Arr64< Hash(L"Author1662") >(), L"Suggestions for bulk_execute | P1933" >  >() },
    { 1934u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Amazing Stuff" >  >() },
    { 1935u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"A C++ Approach to Physical Units" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"A C++ Approach to Physical Units" > , Rev< 2u, Arr64< Hash(L"Mateusz Pusz") >(), L"A C++ Approach to Physical Units" >  >() },
    { 1936u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"Title1294" >  >() },
    { 1937u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Fixing inconsistencies between `constexpr` and `consteval` functions" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"Fixing inconsistencies between `constexpr` and `consteval` functions" > , Rev< 2u, Arr64< Hash(L"David Stone") >(), L"Fixing inconsistencies between `constexpr` and `consteval` functions" >  >() },
    { 1938u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"if consteval" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"if-consteval" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"`if consteval`" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"`if consteval`" >  >() },
    { 1943u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"Networking TS changes to improve completion token flexibility and performance" >  >() },
    { 1944u, RevList< Rev< 0u, Arr64< Hash(L"Author1088") >(), L"Title875" > , Rev< 1u, Arr64< Hash(L"Author677") >(), L"Title549" >  >() },
    { 1945u, RevList< Rev< 0u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Making More Objects Contiguous" >  >() },
    { 1946u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Allow defaulting comparisons by value" >  >() },
    { 1947u, RevList< Rev< 0u, Arr64< Hash(L"Author2121") >(), L"Title1640" >  >() },
    { 1948u, RevList< Rev< 0u, Arr64< Hash(L"Author236") >(), L"Title195" >  >() },
    { 1949u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 2u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 3u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 4u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 5u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 6u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 7u, Arr64< Hash(L"Steve Downey") >(), L"C++ Identifier Syntax using Unicode Standard Annex 31" >  >() },
    { 1950u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan B") >(), L"<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" > , Rev< 1u, Arr64< Hash(L"Jonathan B") >(), L"<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" > , Rev< 2u, Arr64< Hash(L"Jonathan B") >(), L"<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" >  >() },
    { 1951u, RevList< Rev< 0u, Arr64< Hash(L"Logan R") >(), L"Default Arguments for pair's Forwarding Constructor" > , Rev< 1u, Arr64< Hash(L"Logan R") >(), L"Default Arguments for pair's Forwarding Constructor" >  >() },
    { 1953u, RevList< Rev< 0u, Arr64< Hash(L"Author997") >(), L"Title806" >  >() },
    { 1955u, RevList< Rev< 0u, Arr64< Hash(L"Author1802") >(), L"Top Level Is Constant Evaluated" > , Rev< 1u, Arr64< Hash(L"Author428") >(), L"Top Level Is Constant Evaluated" >  >() },
    { 1956u, RevList< Rev< 0u, Arr64< Hash(L"Author1282") >(), L"P1956R0" > , Rev< 1u, Arr64< Hash(L"Author921") >(), L"P1956R1" >  >() },
    { 1957u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" >  >() },
    { 1958u, RevList< Rev< 0u, Arr64< Hash(L"Lawrence Crowl") >(), L"C++ Concurrent Buffer Queue" >  >() },
    { 1959u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Remove std::weak_equality and std::strong_equality" >  >() },
    { 1960u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"NB Comment Changes Reviewed by SG1" >  >() },
    { 1961u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Harmonizing the definitions of total order for pointers" >  >() },
    { 1962u, RevList< Rev< 0u, Arr64< Hash(L"Author1971") >(), L"Title1533" >  >() },
    { 1963u, RevList< Rev< 0u, Arr64< Hash(L"Author49") >(), L"P1963R0 Fixing US 313" >  >() },
    { 1964u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Casting convertible_to<bool> considered harmful" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Wording for boolean-testable" > , Rev< 2u, Arr64< Hash(L"Tim Song") >(), L"Wording for boolean-testable" >  >() },
    { 1965u, RevList< Rev< 0u, Arr64< Hash(L"Author1805") >(), L"Blanket Wording for Specifying ``Hidden Friends''" >  >() },
    { 1967u, RevList< Rev< 0u, Arr64< Hash(L"Author1700") >(), L"Preprocessor embed" > , Rev< 1u, Arr64< Hash(L"Author433") >(), L"Preprocessor embed - Binary Resource Inclusion" > , Rev< 2u, Arr64< Hash(L"Author295") >(), L"Preprocessor embed - Binary Resource Inclusion" > , Rev< 3u, Arr64< Hash(L"Author680") >(), L"Preprocessor embed - Binary Resource Inclusion | r4" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 5u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 6u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 7u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 8u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 9u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 10u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 11u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 12u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 13u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 14u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed - a scannable, tooling-friendly binary resource inclusion mechanism" >  >() },
    { 1968u, RevList< Rev< 0u, Arr64< Hash(L"Author2230") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 1969u, RevList< Rev< 0u, Arr64< Hash(L"Author266") >(), L"Core \"ready\" Issues" >  >() },
    { 1970u, RevList< Rev< 0u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Consistency for size() functions" > , Rev< 1u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Consistency for size() functions" > , Rev< 2u, Arr64< Hash(L"Hannes Hauswedell") >(), L"Consistency for size() functions: Add ranges::ssize" >  >() },
    { 1971u, RevList< Rev< 0u, Arr64< Hash(L"Author1383") >(), L"Core NB Comment Resolutions" >  >() },
    { 1972u, RevList< Rev< 0u, Arr64< Hash(L"Author175") >(), L"US105 Check satisfaction of constraints for non-templates when forming pointer to function" >  >() },
    { 1973u, RevList< Rev< 0u, Arr64< Hash(L"Author2145") >(), L"Rename _default_init Functions" > , Rev< 1u, Arr64< Hash(L"Author528") >(), L"Rename _default_init Functions" >  >() },
    { 1974u, RevList< Rev< 0u, Arr64< Hash(L"Jeff Snyder") >(), L"Non-transient constexpr allocation using" >  >() },
    { 1975u, RevList< Rev< 0u, Arr64< Hash(L"Author1568") >(), L"Fixing the wording of parenthesized aggregate-initialization" >  >() },
    { 1976u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixed-size 'span' construction from dynamic-size range" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixed-size 'span' construction from dynamic-size range" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Fixed-size 'span' construction from dynamic-size range" >  >() },
    { 1978u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Rename `_default_init` functions and do nothing more" >  >() },
    { 1979u, RevList< Rev< 0u, Arr64< Hash(L"Mathias Stearn") >(), L"Title87" >  >() },
    { 1980u, RevList< Rev< 0u, Arr64< Hash(L"Jason Merrill") >(), L"Drafting for CA096: Declaration matching for non-dependent requires-clauses" >  >() },
    { 1981u, RevList< Rev< 0u, Arr64< Hash(L"Author1466") >(), L"Rename leap to leap_second" >  >() },
    { 1982u, RevList< Rev< 0u, Arr64< Hash(L"Author362") >(), L"Rename link to time_zone_link" >  >() },
    { 1983u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Wording for GB301, US296, US292, US291, and US283" >  >() },
    { 1985u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"Universal Template Parameters" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"Universal Template Parameters" > , Rev< 3u, Arr64< Hash(L"Mateusz Pusz") >(), L"Universal Template Parameters" >  >() },
    { 1988u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Allow Templates in Local Classes" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Allow Templates in Local Classes" >  >() },
    { 1989u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title138" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title472" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title161" >  >() },
    { 1990u, RevList< Rev< 0u, Arr64< Hash(L"Author612") >(), L"Title502" > , Rev< 1u, Arr64< Hash(L"Author628") >(), L"Title510" >  >() },
    { 1991u, RevList< Rev< 0u, Arr64< Hash(L"Author1534") >(), L"Rod-Belfast-P1991" >  >() },
    { 1993u, RevList< Rev< 0u, Arr64< Hash(L"Author1276") >(), L"Restore factories to bulk_execute | P1993R0" > , Rev< 1u, Arr64< Hash(L"Author1296") >(), L"Restore shared state to bulk_execute | P1993R1" >  >() },
    { 1994u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"elements_view needs its own sentinel" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"elements_view needs its own sentinel" >  >() },
    { 1995u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"P1995R0 Contract Use Cases" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"P1995R1 Contract Use Cases" >  >() },
    { 1996u, RevList< Rev< 0u, Arr64< Hash(L"Dmitry Sokolov") >(), L"Title1555" >  >() },
    { 1997u, RevList< Rev< 0u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Relaxing Restrictions on Arrays" > , Rev< 1u, Arr64< Hash(L"Krystian Stasiowski") >(), L"Relaxing Restrictions on Arrays" >  >() },
    { 1998u, RevList< Rev< 0u, Arr64< Hash(L"Ryan McDougall") >(), L"Title616" > , Rev< 1u, Arr64< Hash(L"Ryan McDougall") >(), L"Title1224" >  >() },
    { 1999u, RevList< Rev< 0u, Arr64< Hash(L"Author1690") >(), L"Process proposal: double-check evolutionary material via a Tentatively Ready status" >  >() },
    { 2000u, RevList< Rev< 0u, Arr64< Hash(L"Author1251") >(), L"Title971" > , Rev< 1u, Arr64< Hash(L"Author2100") >(), L"Title1627" > , Rev< 2u, Arr64< Hash(L"Author281") >(), L"Title232" > , Rev< 3u, Arr64< Hash(L"Author1113") >(), L"P2000r3: Direction for ISO C++" > , Rev< 4u, Arr64< Hash(L"Author1336") >(), L"P2000r4: Direction for ISO C++" >  >() },
    { 2002u, RevList< Rev< 0u, Arr64< Hash(L"Author1889") >(), L"Defaulted comparison specification fixes" > , Rev< 1u, Arr64< Hash(L"Author549") >(), L"Defaulted comparison specification fixes" >  >() },
    { 2003u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"Fixing Internal and External Linkage Entities in Header Units" >  >() },
    { 2004u, RevList< Rev< 0u, Arr64< Hash(L"Author1100") >(), L"Numbers and their Scopes" >  >() },
    { 2005u, RevList< Rev< 0u, Arr64< Hash(L"James Berrow") >(), L"2D Graphics: A Brief Review" >  >() },
    { 2006u, RevList< Rev< 0u, Arr64< Hash(L"Author487") >(), L"Title407" > , Rev< 1u, Arr64< Hash(L"Lewis Baker") >(), L"Eliminating heap-allocations in sender/receiver with connect()/start() as basis operations" >  >() },
    { 2007u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"std::from_chars should work with std::string_view" >  >() },
    { 2008u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"Enable variable template template parameters" >  >() },
    { 2009u, RevList< Rev< 0u, Arr64< Hash(L"The proposal") >(), L"SG16: Unicode meeting summaries 2019-10-09 through 2019-12-11" >  >() },
    { 2010u, RevList< Rev< 0u, Arr64< Hash(L"Author1956") >(), L"Markdown To PDF" >  >() },
    { 2011u, RevList< Rev< 0u, Arr64< Hash(L"Colby Pike") >(), L"A pipeline-rewrite operator" > , Rev< 1u, Arr64< Hash(L"Colby Pike") >(), L"A pipeline-rewrite operator" >  >() },
    { 2012u, RevList< Rev< 0u, Arr64< Hash(L"Author1707") >(), L"P2012R0" > , Rev< 1u, Arr64< Hash(L"Author1440") >(), L"Fix the rangebased for loop, Rev1" > , Rev< 2u, Arr64< Hash(L"Author357") >(), L"Fix the range-based for loop, Rev 2" >  >() },
    { 2013u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" > , Rev< 4u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" > , Rev< 5u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Language: Optional <code>::operator new</code>" >  >() },
    { 2014u, RevList< Rev< 0u, Arr64< Hash(L"Author1351") >(), L"Title1046" > , Rev< 1u, Arr64< Hash(L"Author1747") >(), L"Title1354" > , Rev< 2u, Arr64< Hash(L"Author1295") >(), L"Proposed resolution for US061+US063 - aligned allocation of coroutine frames" >  >() },
    { 2016u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title603" >  >() },
    { 2017u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally safe ranges" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Conditionally borrowed ranges" >  >() },
    { 2019u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1484" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title974" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1568" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title843" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1154" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1529" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title958" > , Rev< 7u, Arr64< Hash(L"Corentin Jabot") >(), L"Title749" > , Rev< 8u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1215" >  >() },
    { 2020u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title308" >  >() },
    { 2021u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Negative zero strikes again" >  >() },
    { 2022u, RevList< Rev< 0u, Arr64< Hash(L"Ran Regev") >(), L"Rangified version of lexicographical_compare_three_way" > , Rev< 1u, Arr64< Hash(L"Ran Regev") >(), L"Rangified version of lexicographical_compare_three_way" > , Rev< 2u, Arr64< Hash(L"Ran Regev") >(), L"Rangified version of lexicographical_compare_three_way" > , Rev< 3u, Arr64< Hash(L"Alex Dathskovsky") >(), L"P2022R3 - Rangified version of lexicographical_compare_three_way" >  >() },
    { 2024u, RevList< Rev< 0u, Arr64< Hash(L"Dietmar Khl") >(), L"Bloomberg Analysis of Unified Executors" >  >() },
    { 2025u, RevList< Rev< 0u, Arr64< Hash(L"Anton Zhilin") >(), L"Guaranteed copy elision for named return objects" > , Rev< 1u, Arr64< Hash(L"Anton Zhilin") >(), L"Guaranteed copy elision for return variables" > , Rev< 2u, Arr64< Hash(L"Anton Zhilin") >(), L"Guaranteed copy elision for return variables" >  >() },
    { 2026u, RevList< Rev< 0u, Arr64< Hash(L"Ryan McDougall") >(), L"Title789" >  >() },
    { 2027u, RevList< Rev< 0u, Arr64< Hash(L"Author1266") >(), L"Title980" >  >() },
    { 2028u, RevList< Rev< 0u, Arr64< Hash(L"Author575") >(), L"Title465" >  >() },
    { 2029u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 2u, Arr64< Hash(L"Tom Honermann") >(), L"Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 3u, Arr64< Hash(L"Tom Honermann") >(), L"Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 4u, Arr64< Hash(L"Tom Honermann") >(), L"Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" >  >() },
    { 2030u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1395" >  >() },
    { 2031u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1683" >  >() },
    { 2032u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"P2032R0 Contract Use Cases" >  >() },
    { 2033u, RevList< Rev< 0u, Arr64< Hash(L"Author411") >(), L"Title352" >  >() },
    { 2034u, RevList< Rev< 0u, Arr64< Hash(L"Ryan McDougall") >(), L"Title418" > , Rev< 1u, Arr64< Hash(L"Ryan McDougall") >(), L"Title337" > , Rev< 2u, Arr64< Hash(L"Ryan McDougall") >(), L"Title990" > , Rev< 3u, Arr64< Hash(L"Ryan McDougall") >(), L"Partially Mutable Lambda Captures" > , Rev< 4u, Arr64< Hash(L"Ryan McDougall") >(), L"Partially Mutable Lambda Captures" >  >() },
    { 2035u, RevList< Rev< 0u, Arr64< Hash(L"Author219") >(), L"Microsoft Word - AP0_value_prop.docx" >  >() },
    { 2036u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Change scope of lambda trailing-return-type" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Change scope of lambda *trailing-return-type*" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Change scope of lambda *trailing-return-type*" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Change scope of lambda trailing-return-type" >  >() },
    { 2037u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"P2037R0 String's gratuitous assignment" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"P2037R1 String's gratuitous assignment" >  >() },
    { 2038u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"P2038R0 Proposed nomenclature for contract-related proposals" >  >() },
    { 2039u, RevList< Rev< 0u, Arr64< Hash(L"Menashe Rosemberg") >(), L"Title934" >  >() },
    { 2040u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title424" >  >() },
    { 2041u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Deleting variable templates" > , Rev< 1u, Arr64< Hash(L"David Stone") >(), L"Title647" >  >() },
    { 2042u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"P2042R0 Alternate names for make_shared_default_init" >  >() },
    { 2043u, RevList< Rev< 0u, Arr64< Hash(L"David Sankel") >(), L"Don't constexpr All The Things" >  >() },
    { 2044u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Title503" > , Rev< 1u, Arr64< Hash(L"Robert Leahy") >(), L"Title955" > , Rev< 2u, Arr64< Hash(L"Robert Leahy") >(), L"Title152" >  >() },
    { 2045u, RevList< Rev< 0u, Arr64< Hash(L"Author844") >(), L"Missing Mandates for the standard library" > , Rev< 1u, Arr64< Hash(L"Author85") >(), L"Missing Mandates for the standard library" >  >() },
    { 2046u, RevList< Rev< 0u, Arr64< Hash(L"Dan Raviv") >(), L"P1243R3 - Rangify New Algorithms" >  >() },
    { 2047u, RevList< Rev< 0u, Arr64< Hash(L"Author727") >(), L"An allocator-aware optional type" > , Rev< 1u, Arr64< Hash(L"Author624") >(), L"An allocator-aware optional type" > , Rev< 2u, Arr64< Hash(L"Author306") >(), L"An allocator-aware optional type" > , Rev< 3u, Arr64< Hash(L"Author1897") >(), L"An allocator-aware optional type" > , Rev< 4u, Arr64< Hash(L"Author2118") >(), L"An allocator-aware optional type" > , Rev< 5u, Arr64< Hash(L"Author1887") >(), L"An allocator-aware optional type" > , Rev< 6u, Arr64< Hash(L"Author1718") >(), L"An allocator-aware optional type" > , Rev< 7u, Arr64< Hash(L"Author604") >(), L"An allocator-aware optional type" >  >() },
    { 2048u, RevList< Rev< 0u, Arr64< Hash(L"Vittorio Romeo") >(), L"Prohibit zero and NULL from being used as null pointer literals" >  >() },
    { 2049u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Title292" >  >() },
    { 2050u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Sutton") >(), L"Title721" >  >() },
    { 2051u, RevList< Rev< 0u, Arr64< Hash(L"Author369") >(), L"C++ Standard Library Issues to be moved in Prague" >  >() },
    { 2052u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title678" >  >() },
    { 2053u, RevList< Rev< 0u, Arr64< Hash(L"Author1455") >(), L"Title1134" > , Rev< 1u, Arr64< Hash(L"Author2067") >(), L"Title1601" >  >() },
    { 2054u, RevList< Rev< 0u, Arr64< Hash(L"Author258") >(), L"Title215" > , Rev< 1u, Arr64< Hash(L"Author142") >(), L"Title122" >  >() },
    { 2055u, RevList< Rev< 0u, Arr64< Hash(L"Author1118") >(), L"Title892" >  >() },
    { 2057u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title274" >  >() },
    { 2058u, RevList< Rev< 0u, Arr64< Hash(L"Martin HoYeHovsk") >(), L"Title110" >  >() },
    { 2059u, RevList< Rev< 0u, Arr64< Hash(L"Martin HoYeHovsk") >(), L"Title456" >  >() },
    { 2060u, RevList< Rev< 0u, Arr64< Hash(L"Martin HoYeHovsk") >(), L"Title1130" >  >() },
    { 2061u, RevList< Rev< 0u, Arr64< Hash(L"Author467") >(), L"Title391" >  >() },
    { 2062u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"Title834" >  >() },
    { 2064u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1577" >  >() },
    { 2065u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"naming and aliases" >  >() },
    { 2066u, RevList< Rev< 0u, Arr64< Hash(L"Michael L") >(), L"Suggested draft TS for C++ Extensions for Transaction Memory Light" > , Rev< 1u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 2u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 3u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 4u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 5u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 6u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 7u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 8u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 9u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 10u, Arr64< Hash(L"Hans Boehm") >(), L"Suggested draft TS for C++ Extensions for Minimal Transactional Memory" >  >() },
    { 2067u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title817" >  >() },
    { 2068u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title207" >  >() },
    { 2069u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title815" >  >() },
    { 2070u, RevList< Rev< 0u, Arr64< Hash(L"Peter Sommerlad") >(), L"Title727" >  >() },
    { 2071u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Named universal character escapes" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"Named universal character escapes" > , Rev< 2u, Arr64< Hash(L"Tom Honermann") >(), L"Named universal character escapes" >  >() },
    { 2072u, RevList< Rev< 0u, Arr64< Hash(L"Marco Foco") >(), L"Title191" > , Rev< 1u, Arr64< Hash(L"Marco Foco") >(), L"Title353" >  >() },
    { 2073u, RevList< Rev< 0u, Arr64< Hash(L"Author30") >(), L"Title24" >  >() },
    { 2074u, RevList< Rev< 0u, Arr64< Hash(L"Author640") >(), L"Title522" >  >() },
    { 2075u, RevList< Rev< 0u, Arr64< Hash(L"Pavel Dyakov") >(), L"Title941" > , Rev< 1u, Arr64< Hash(L"Pavel Dyakov") >(), L"Title917" > , Rev< 2u, Arr64< Hash(L"Pavel Dyakov") >(), L"P2075R2.docx" > , Rev< 3u, Arr64< Hash(L"Ilya Burylov") >(), L"P2075R3.docx" > , Rev< 4u, Arr64< Hash(L"Ilya Burylov") >(), L"P2075R4.docx" > , Rev< 5u, Arr64< Hash(L"Ilya Burylov") >(), L"P2075R5.docx" > , Rev< 6u, Arr64< Hash(L"Ilya Burylov") >(), L"P2075R6.docx" >  >() },
    { 2076u, RevList< Rev< 0u, Arr64< Hash(L"Author1453") >(), L"Previous disagreements on Contracts" >  >() },
    { 2077u, RevList< Rev< 0u, Arr64< Hash(L"Boyarinov, Konstantin") >(), L"Title282" > , Rev< 1u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Heterogeneous erasure overloads for associative containers" > , Rev< 2u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Heterogeneous erasure overloads for associative containers" > , Rev< 3u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Heterogeneous erasure overloads for associative containers" >  >() },
    { 2078u, RevList< Rev< 0u, Arr64< Hash(L"Bob Steagall") >(), L"Add new traits type std::is_complex<T>" >  >() },
    { 2079u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan") >(), L"Title1330" > , Rev< 1u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"Parallel Executor" > , Rev< 2u, Arr64< Hash(L"Lee Howes") >(), L"System execution context" > , Rev< 3u, Arr64< Hash(L"Lee Howes") >(), L"System execution context" > , Rev< 4u, Arr64< Hash(L"Lee Howes") >(), L"System execution context" > , Rev< 5u, Arr64< Hash(L"Lucian Radu") >(), L"System execution context" > , Rev< 6u, Arr64< Hash(L"Lucian Radu") >(), L"System execution context" > , Rev< 7u, Arr64< Hash(L"Lucian Radu") >(), L"Parallel scheduler" >  >() },
    { 2080u, RevList< Rev< 0u, Arr64< Hash(L"Author410") >(), L"Polymorphic allocators: There is no such thing as One True Vocabulary Type" >  >() },
    { 2081u, RevList< Rev< 0u, Arr64< Hash(L"Author1533") >(), L"Rebase the Library Fundamentals v3 TS on C++20" > , Rev< 1u, Arr64< Hash(L"Author717") >(), L"Rebase the Library Fundamentals v3 TS on C++20" >  >() },
    { 2082u, RevList< Rev< 0u, Arr64< Hash(L"Author381") >(), L"Title326" > , Rev< 1u, Arr64< Hash(L"Author2097") >(), L"Title1625" >  >() },
    { 2085u, RevList< Rev< 0u, Arr64< Hash(L"Author914") >(), L"Consistent defaulted comparisons" >  >() },
    { 2087u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Reflection Naming: fix reflexpr" >  >() },
    { 2088u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Reflection Naming: Reification" >  >() },
    { 2089u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Function parameter constraints are fragile" >  >() },
    { 2091u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Issues with range access CPOs" >  >() },
    { 2092u, RevList< Rev< 0u, Arr64< Hash(L"Daveed Vandevoorde") >(), L"Title373" >  >() },
    { 2093u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 5u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 6u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 7u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 8u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 9u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 10u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 11u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 12u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 13u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" > , Rev< 14u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatted output" >  >() },
    { 2095u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Resolve lambda init-capture pack grammar (CWG2378)" >  >() },
    { 2096u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Generalized wording for partial specializations" > , Rev< 1u, Arr64< Hash(L"James Touton") >(), L"Generalized wording for partial specializations" > , Rev< 2u, Arr64< Hash(L"James Touton") >(), L"Generalized wording for partial specializations" >  >() },
    { 2098u, RevList< Rev< 0u, Arr64< Hash(L"Author437") >(), L"Proposing std::isspecializationof" > , Rev< 1u, Arr64< Hash(L"Author517") >(), L"Proposing std::isspecializationof" >  >() },
    { 2100u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"D2100R0: Keep unhandled_exception of a promise type mandatory - a response to US062 and FR066" >  >() },
    { 2101u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Models subsumes satisfies (Wording for US298 and US300)" >  >() },
    { 2102u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Make implicit expression variations more explicit (Wording for US185)" >  >() },
    { 2103u, RevList< Rev< 0u, Arr64< Hash(L"Author1574") >(), L"Core NB Comment Resolutions" >  >() },
    { 2104u, RevList< Rev< 0u, Arr64< Hash(L"Author962") >(), L"Resolution for GB046 - Disallow changing concept values" >  >() },
    { 2106u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Alternative wording for GB315 and GB316" >  >() },
    { 2107u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Core Issue 2436: US064 Copy semantics of coroutine parameters" >  >() },
    { 2108u, RevList< Rev< 0u, Arr64< Hash(L"Author504") >(), L"Core \"ready\" Issues" >  >() },
    { 2109u, RevList< Rev< 0u, Arr64< Hash(L"Author542") >(), L"US084: Disallow \"export import foo\" outside of module interface" >  >() },
    { 2113u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"Proposed resolution for 2019 comment CA 112" >  >() },
    { 2114u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"P2114R0 Minimal Contract Use Cases" >  >() },
    { 2115u, RevList< Rev< 0u, Arr64< Hash(L"Author585") >(), L"US069: Merging of multiple definitionsfor unnamed unscoped enumerations" >  >() },
    { 2116u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Remove tuple-like protocol support from fixed-extent span" >  >() },
    { 2117u, RevList< Rev< 0u, Arr64< Hash(L"Author1911") >(), L"C++ Standard Library Issues Resolved Directly In Prague" >  >() },
    { 2119u, RevList< Rev< 0u, Arr64< Hash(L"Jolanta Opara") >(), L"Feedback on P1708: Simple Statistical Functions" >  >() },
    { 2120u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Simplified structured bindings protocol with pack aliases" >  >() },
    { 2123u, RevList< Rev< 0u, Arr64< Hash(L"Hal Finkel") >(), L"Extending the Type System to Provide API and ABI Flexibility" >  >() },
    { 2125u, RevList< Rev< 0u, Arr64< Hash(L"Titus Winters") >(), L"Title1562" >  >() },
    { 2126u, RevList< Rev< 0u, Arr64< Hash(L"Author423") >(), L"Microsoft Word - AP1_unleashing.docx" >  >() },
    { 2127u, RevList< Rev< 0u, Arr64< Hash(L"Author610") >(), L"Title501" >  >() },
    { 2128u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title101" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title519" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title627" > , Rev< 3u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title664" > , Rev< 4u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title684" > , Rev< 5u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title1167" > , Rev< 6u, Arr64< Hash(L"Mark Hoemmen") >(), L"Title1525" >  >() },
    { 2130u, RevList< Rev< 0u, Arr64< Hash(L"Author1256") >(), L"P2130-Rod-Prague" >  >() },
    { 2131u, RevList< Rev< 0u, Arr64< Hash(L"Author2089") >(), L"Changes between C++17 and C++20" >  >() },
    { 2133u, RevList< Rev< 0u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - incu.doc" >  >() },
    { 2134u, RevList< Rev< 0u, Arr64< Hash(L"Balog, Pal") >(), L"Microsoft Word - kaizen.doc" >  >() },
    { 2135u, RevList< Rev< 1u, Arr64< Hash(L"Author2068") >(), L"Title1603" >  >() },
    { 2136u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"invoke<R> - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"invoke_r - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"invoke_r - HackMD" > , Rev< 3u, Arr64< Hash(L"Zhihao Yuan") >(), L"invoke_r - HackMD" >  >() },
    { 2137u, RevList< Rev< 0u, Arr64< Hash(L"Chandler Carruth") >(), L"Goals and priorities for C++" >  >() },
    { 2138u, RevList< Rev< 0u, Arr64< Hash(L"Author771") >(), L"Rules of Design<=>Wording engagement" > , Rev< 1u, Arr64< Hash(L"Author1990") >(), L"Rules of Design<=>Wording engagement" > , Rev< 2u, Arr64< Hash(L"Author804") >(), L"Rules of Design<=>Specification engagement" > , Rev< 3u, Arr64< Hash(L"Author425") >(), L"Rules of Design<=>Specification engagement" > , Rev< 4u, Arr64< Hash(L"Author34") >(), L"Rules of Design<=>Specification engagement" >  >() },
    { 2139u, RevList< Rev< 0u, Arr64< Hash(L"Author1329") >(), L"Reviewing Deprecated Facilities of C++20 for C++23" > , Rev< 1u, Arr64< Hash(L"Author1785") >(), L"Reviewing Deprecated Facilities of C++20 for C++23" > , Rev< 2u, Arr64< Hash(L"Author2132") >(), L"Reviewing Deprecated Facilities of C++20 for C++23" >  >() },
    { 2141u, RevList< Rev< 0u, Arr64< Hash(L"Author28") >(), L"Aggregates are named tuples" > , Rev< 1u, Arr64< Hash(L"Author2210") >(), L"Aggregates are named tuples" > , Rev< 2u, Arr64< Hash(L"Author514") >(), L"Aggregates are named tuples" >  >() },
    { 2142u, RevList< Rev< 1u, Arr64< Hash(L"Author970") >(), L"Markdown To PDF" >  >() },
    { 2145u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Evolving C++ Remotely" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"Evolving C++ Remotely" >  >() },
    { 2146u, RevList< Rev< 0u, Arr64< Hash(L"Amanda Kornoushenko") >(), L"Modern std::byte stream IO for C++" > , Rev< 1u, Arr64< Hash(L"Amanda Kornoushenko") >(), L"Modern std::byte stream IO for C++" > , Rev< 2u, Arr64< Hash(L"Amanda Kornoushenko") >(), L"Modern std::byte stream IO for C++" >  >() },
    { 2148u, RevList< Rev< 0u, Arr64< Hash(L"Author453") >(), L"Title381" >  >() },
    { 2149u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Title1097" >  >() },
    { 2150u, RevList< Rev< 0u, Arr64< Hash(L"Author209") >(), L"Down with typename in the Library!" >  >() },
    { 2152u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"Title160" > , Rev< 1u, Arr64< Hash(L"Inbal Levi") >(), L"Title1157" >  >() },
    { 2155u, RevList< Rev< 0u, Arr64< Hash(L"Gordon Brown") >(), L"Title238" >  >() },
    { 2156u, RevList< Rev< 0u, Arr64< Hash(L"Erich Keane") >(), L"Title709" > , Rev< 1u, Arr64< Hash(L"Erich Keane") >(), L"Title754" >  >() },
    { 2159u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0") >(), L"Unbounded Decimal" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0") >(), L"P2159R1, A Big Decimal" >  >() },
    { 2160u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Locks lock lockables" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Locks lock lockables" >  >() },
    { 2161u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Title1679" > , Rev< 1u, Arr64< Hash(L"Robert Leahy") >(), L"Title1016" > , Rev< 2u, Arr64< Hash(L"Robert Leahy") >(), L"Title254" >  >() },
    { 2162u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Inheriting from std::variant" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Inheriting from `std::variant`" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Inheriting from `std::variant`" >  >() },
    { 2163u, RevList< Rev< 0u, Arr64< Hash(L"Author659") >(), L"nativetuple/draft2.md at master accelerated/nativetuple GitHub" >  >() },
    { 2164u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title245" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title534" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1513" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1563" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1708" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title495" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title499" > , Rev< 7u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1043" > , Rev< 8u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1050" > , Rev< 9u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1199" >  >() },
    { 2165u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title279" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title893" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title851" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1402" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title205" >  >() },
    { 2166u, RevList< Rev< 0u, Arr64< Hash(L"Author2161") >(), L"Title1663" > , Rev< 1u, Arr64< Hash(L"Author960") >(), L"Title779" >  >() },
    { 2167u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Proposed wording for LWG 2114" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" > , Rev< 2u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" > , Rev< 3u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" >  >() },
    { 2168u, RevList< Rev< 0u, Arr64< Hash(L"Lewis Baker") >(), L"Title1483" > , Rev< 1u, Arr64< Hash(L"Lewis Baker") >(), L"Title1181" > , Rev< 2u, Arr64< Hash(L"Lewis Baker") >(), L"Title383" > , Rev< 3u, Arr64< Hash(L"Lewis Baker") >(), L"Title172" >  >() },
    { 2169u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1412" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1039" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title428" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title322" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title520" >  >() },
    { 2170u, RevList< Rev< 0u, Arr64< Hash(L"Charles Salvia") >(), L"Feedback on designing the proposed `std::error` type" >  >() },
    { 2171u, RevList< Rev< 0u, Arr64< Hash(L"Author2205") >(), L"Rebasing the Networking TS on C++20" > , Rev< 1u, Arr64< Hash(L"Author1898") >(), L"Rebasing the Networking TS on C++20" > , Rev< 2u, Arr64< Hash(L"Author1963") >(), L"Rebasing the Networking TS on C++20" >  >() },
    { 2172u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1114" >  >() },
    { 2173u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"Title759" > , Rev< 1u, Arr64< Hash(L"Inbal Levi") >(), L"Attributes on Lambda-Expressions" >  >() },
    { 2174u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Compound Literals - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Compound Literals - HackMD" >  >() },
    { 2175u, RevList< Rev< 0u, Arr64< Hash(L"Lewis Baker") >(), L"Composable cancellation for sender-based async operations" >  >() },
    { 2176u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"A different take on inexpressible conditions" >  >() },
    { 2178u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title155" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1311" >  >() },
    { 2179u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2020-01-08 through 2020-05-27" >  >() },
    { 2181u, RevList< Rev< 0u, Arr64< Hash(L"Author1154") >(), L"Correcting the Design of Bulk Execution" > , Rev< 1u, Arr64< Hash(L"Author943") >(), L"Correcting the Design of Bulk Execution" >  >() },
    { 2182u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract Support: Defining the Minimum Viable Feature Set" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract Support: Defining the Minimum Viable Feature Set" >  >() },
    { 2183u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Executors Review: Properties" >  >() },
    { 2184u, RevList< Rev< 0u, Arr64< Hash(L"Author1675") >(), L"Title1301" >  >() },
    { 2185u, RevList< Rev< 0u, Arr64< Hash(L"Author2044") >(), L"Contracts Use Case Categorization - HackMD" >  >() },
    { 2186u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Removing Garbage Collection Support" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Removing Garbage Collection Support" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"Removing Garbage Collection Support" >  >() },
    { 2187u, RevList< Rev< 0u, Arr64< Hash(L"Nathan Myers") >(), L"Title294" > , Rev< 3u, Arr64< Hash(L"Nathan Myers") >(), L"Title767" > , Rev< 4u, Arr64< Hash(L"Nathan Myers") >(), L"Title1287" > , Rev< 5u, Arr64< Hash(L"Nathan Myers") >(), L"Title1527" >  >() },
    { 2188u, RevList< Rev< 0u, Arr64< Hash(L"Anthony") >(), L"DXXXX: Zap the Zap: Pointers should just be bags of bits" > , Rev< 1u, Arr64< Hash(L"Anthony") >(), L"Zap the Zap: Pointers are sometimes just bags of bits" >  >() },
    { 2191u, RevList< Rev< 0u, Arr64< Hash(L"Author2003") >(), L"Modules: ADL & GMFs do not play together well (anymore)" >  >() },
    { 2192u, RevList< Rev< 0u, Arr64< Hash(L"Author56") >(), L"Title57" > , Rev< 1u, Arr64< Hash(L"Author1405") >(), L"Title1094" > , Rev< 2u, Arr64< Hash(L"Author429") >(), L"Title368" > , Rev< 3u, Arr64< Hash(L"Author2092") >(), L"Title1623" >  >() },
    { 2193u, RevList< Rev< 0u, Arr64< Hash(L"Author845") >(), L"Title666" > , Rev< 1u, Arr64< Hash(L"Author484") >(), L"Title404" >  >() },
    { 2194u, RevList< Rev< 0u, Arr64< Hash(L"Author2050") >(), L"Title1592" >  >() },
    { 2195u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Electronic Straw Polls" > , Rev< 1u, Arr64< Hash(L"Author303") >(), L"Electronic Straw Polls" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"Electronic Straw Polls" >  >() },
    { 2196u, RevList< Rev< 0u, Arr64< Hash(L"Author1462") >(), L"P2196R0" >  >() },
    { 2197u, RevList< Rev< 0u, Arr64< Hash(L"Michael Tesch") >(), L"Formatting for std::complex" >  >() },
    { 2198u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 4u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 5u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 6u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 7u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Feature-Test Macros and Implementation-Defined Extensions" >  >() },
    { 2199u, RevList< Rev< 0u, Arr64< Hash(L"Isabella Muerte") >(), L"Concepts to Differentiate Types" >  >() },
    { 2201u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Mixed string literal concatenation" > , Rev< 1u, Arr64< Hash(L"Jens Maurer") >(), L"Mixed string literal concatenation" >  >() },
    { 2202u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Executors review Senders and Receivers" >  >() },
    { 2203u, RevList< Rev< 0u, Arr64< Hash(L"Tomasz KamiDski") >(), L"Title860" >  >() },
    { 2205u, RevList< Rev< 0u, Arr64< Hash(L"Chris Kohlhoff") >(), L"Executors Review - Polymorphic Executor" >  >() },
    { 2206u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"Executors Thread Pool review report" >  >() },
    { 2207u, RevList< Rev< 0u, Arr64< Hash(L"- name") >(), L"Title1175" >  >() },
    { 2209u, RevList< Rev< 0u, Arr64< Hash(L"Lee Howes") >(), L"Bulk schedule" >  >() },
    { 2210u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Superior String Splitting" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Superior String Splitting" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Superior String Splitting" >  >() },
    { 2211u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"Exhaustiveness Checking for Pattern Matching" >  >() },
    { 2212u, RevList< Rev< 0u, Arr64< Hash(L"Alexey Dmitriev") >(), L"Relax Requirements for time_point::clock" > , Rev< 1u, Arr64< Hash(L"Alexey Dmitriev") >(), L"Relax Requirements for time_point::clock" > , Rev< 2u, Arr64< Hash(L"Alexey Dmitriev") >(), L"Relax Requirements for time_point::clock" >  >() },
    { 2213u, RevList< Rev< 0u, Arr64< Hash(L"Amir Kirsh") >(), L"Title786" > , Rev< 1u, Arr64< Hash(L"Amir Kirsh") >(), L"Title1119" >  >() },
    { 2214u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"A Plan for C++23 Ranges" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"A Plan for C++23 Ranges" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"A Plan for C++23 Ranges" >  >() },
    { 2215u, RevList< Rev< 0u, Arr64< Hash(L"Author2189") >(), L"Title1681" > , Rev< 1u, Arr64< Hash(L"Author741") >(), L"Title597" >  >() },
    { 2216u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"std::format improvements" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"std::format improvements" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"std::format improvements" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"std::format improvements" >  >() },
    { 2217u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2020-06-10 through 2020-08-26" >  >() },
    { 2218u, RevList< Rev< 0u, Arr64< Hash(L"value") >(), L"Title1212" >  >() },
    { 2219u, RevList< Rev< 0u, Arr64< Hash(L"Author2053") >(), L"P0433 Executors Issues Needing Resolution | P2219R0" >  >() },
    { 2220u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"redefine properties in P0443" >  >() },
    { 2221u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"define P0443 cpos with tag_invoke" >  >() },
    { 2223u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title410" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title459" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title629" >  >() },
    { 2224u, RevList< Rev< 0u, Arr64< Hash(L"Author1812") >(), L"A Better bulk_schedule" >  >() },
    { 2226u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"A proposal for an idiom to move from an object and reset it to its default constructed state" >  >() },
    { 2227u, RevList< Rev< 0u, Arr64< Hash(L"Author1560") >(), L"Update normative reference to POSIX" >  >() },
    { 2228u, RevList< Rev< 0u, Arr64< Hash(L"Author1267") >(), L"Title982" >  >() },
    { 2231u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Missing `constexpr` in `std::optional` and `std::variant`" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Missing `constexpr` in `std::optional` and `std::variant`" >  >() },
    { 2232u, RevList< Rev< 0u, Arr64< Hash(L"Emil Dotchevski") >(), L"Zero-Overhead Deterministic Exceptions: Catching Values" >  >() },
    { 2233u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2020 Fall Library Evolution Polls" > , Rev< 1u, Arr64< Hash(L"Author59") >(), L"2020 Fall Library Evolution Polls" > , Rev< 2u, Arr64< Hash(L"Author1297") >(), L"D2233R2: 2020 Fall Library Evolution Polls" > , Rev< 3u, Arr64< Hash(L"Author2109") >(), L"2020 Fall Library Evolution Polls" >  >() },
    { 2234u, RevList< Rev< 0u, Arr64< Hash(L"Scott Schurr") >(), L"P2234R0-UB_and_IF-NDR_Audit" > , Rev< 1u, Arr64< Hash(L"Scott Schurr") >(), L"P2234R1-UB_and_IF-NDR_Audit" >  >() },
    { 2235u, RevList< Rev< 0u, Arr64< Hash(L"Author1193") >(), L"Disentangling schedulers and executors" >  >() },
    { 2236u, RevList< Rev< 0u, Arr64< Hash(L"Author1316") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, Nov. 2020" >  >() },
    { 2237u, RevList< Rev< 0u, Arr64< Hash(L"Author350") >(), L"Title296" >  >() },
    { 2238u, RevList< Rev< 0u, Arr64< Hash(L"Author355") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 2242u, RevList< Rev< 0u, Arr64< Hash(L"Author2221") >(), L"Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 1u, Arr64< Hash(L"Author827") >(), L"Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 2u, Arr64< Hash(L"Author911") >(), L"Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 3u, Arr64< Hash(L"Author1199") >(), L"Non-literal variables (and labels and gotos) in constexpr functions" >  >() },
    { 2244u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1291" >  >() },
    { 2245u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1554" >  >() },
    { 2246u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title891" > , Rev< 1u, Arr64< Hash(L"Aaron Ballman") >(), L"Title414" >  >() },
    { 2247u, RevList< Rev< 0u, Arr64< Hash(L"Author1504") >(), L"2020 Library Evolution Report" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"2020 Library Evolution Report" >  >() },
    { 2248u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 2u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 3u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 4u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 5u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 6u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 7u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" > , Rev< 8u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Enabling list-initialization for algorithms" >  >() },
    { 2249u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 2u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 3u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 4u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 5u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" > , Rev< 6u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Mixed comparisons for smart pointers" >  >() },
    { 2250u, RevList< Rev< 0u, Arr64< Hash(L"Author1043") >(), L"Scheduler_Vs_Executor" >  >() },
    { 2251u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title1414" > , Rev< 1u, Arr64< Hash(L"1") >(), L"Title1205" >  >() },
    { 2253u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2020-09-09 through 2020-11-11" >  >() },
    { 2254u, RevList< Rev< 0u, Arr64< Hash(L"Author1527") >(), L"Title1187" >  >() },
    { 2255u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"A type trait to detect reference binding to temporary" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"A type trait to detect reference binding to temporary" > , Rev< 2u, Arr64< Hash(L"Tim Song") >(), L"A type trait to detect reference binding to temporary" >  >() },
    { 2257u, RevList< Rev< 0u, Arr64< Hash(L"Dalton M") >(), L"Title839" >  >() },
    { 2259u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Repairing input range adaptors and counted_iterator" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Repairing input range adaptors and counted_iterator" >  >() },
    { 2260u, RevList< Rev< 0u, Arr64< Hash(L"Author602") >(), L"Title493" >  >() },
    { 2262u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2020 Fall Library Evolution Poll Outcomes" >  >() },
    { 2263u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"A call for a WG21 managed chat service" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"A call for a WG21 managed chat service" >  >() },
    { 2264u, RevList< Rev< 0u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 1u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 2u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 3u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 4u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 5u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 6u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" > , Rev< 7u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make assert() macro user friendly for C and C++" >  >() },
    { 2265u, RevList< Rev< 0u, Arr64< Hash(L"Kevlin Henney") >(), L"Title325" > , Rev< 1u, Arr64< Hash(L"Kevlin Henney") >(), L"Title1436" >  >() },
    { 2266u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Simpler implicit move" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Simpler implicit move" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Simpler implicit move" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Simpler implicit move" >  >() },
    { 2267u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"Library Evolution Policies" > , Rev< 1u, Arr64< Hash(L"Inbal Levi") >(), L"Library Evolution Policies" >  >() },
    { 2268u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Roadmap" >  >() },
    { 2272u, RevList< Rev< 0u, Arr64< Hash(L"Author1052") >(), L"Title844" >  >() },
    { 2273u, RevList< Rev< 0u, Arr64< Hash(L"Author1423") >(), L"Making std::unique_ptr constexpr" > , Rev< 1u, Arr64< Hash(L"Author1869") >(), L"Making std::unique_ptr constexpr" > , Rev< 2u, Arr64< Hash(L"Author785") >(), L"Making std::unique_ptr constexpr" > , Rev< 3u, Arr64< Hash(L"Author1019") >(), L"Making std::unique_ptr constexpr" >  >() },
    { 2274u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title1109" >  >() },
    { 2276u, RevList< Rev< 0u, Arr64< Hash(L"Author2206") >(), L"Fix std::cbegin(), ranges::cbegin, and provide const_iterator support for std::span" > , Rev< 1u, Arr64< Hash(L"Author285") >(), L"Microsoft Word - P2276R1_fix_cbegin_210909.docx" >  >() },
    { 2277u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Packs outside of Templates" >  >() },
    { 2278u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"`cbegin` should always return a constant iterator" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"cbegin should always return a constant iterator" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"cbegin should always return a constant iterator" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"cbegin should always return a constant iterator" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"cbegin should always return a constant iterator" >  >() },
    { 2279u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"We need a language mechanism for customization points" >  >() },
    { 2280u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Using unknown references in constant expressions" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Using unknown references in constant expressions" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Using unknown pointers and references in constant expressions" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Using unknown pointers and references in constant expressions" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Using unknown pointers and references in constant expressions" >  >() },
    { 2281u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Clarifying range adaptor objects" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Clarifying range adaptor objects" >  >() },
    { 2283u, RevList< Rev< 0u, Arr64< Hash(L"Michael Schellenberger") >(), L"constexpr for specialized memory algorithms" > , Rev< 1u, Arr64< Hash(L"Michael Schellenberger") >(), L"constexpr for specialized memory algorithms" > , Rev< 2u, Arr64< Hash(L"Michael Schellenberger") >(), L"constexpr for specialized memory algorithms" >  >() },
    { 2285u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Are default function arguments in the immediate context?" >  >() },
    { 2286u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 5u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 6u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 7u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" > , Rev< 8u, Arr64< Hash(L"Barry Revzin") >(), L"Formatting Ranges" >  >() },
    { 2287u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Designated-initializers for Base Classes" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Designated-initializers for Base Classes" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Designated-initializers for Base Classes" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Designated-initializers for Base Classes" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Designated-initializers for Base Classes" >  >() },
    { 2289u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Winter Library Evolution Polls" >  >() },
    { 2290u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1357" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title546" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1373" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title444" >  >() },
    { 2291u, RevList< Rev< 0u, Arr64< Hash(L"Author967") >(), L"Title781" > , Rev< 1u, Arr64< Hash(L"Daniil Goncharov") >(), L"Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" > , Rev< 2u, Arr64< Hash(L"Daniil Goncharov") >(), L"Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" > , Rev< 3u, Arr64< Hash(L"Daniil Goncharov") >(), L"Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" >  >() },
    { 2295u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1351" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title204" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1148" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title466" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title730" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1269" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1401" >  >() },
    { 2297u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title443" >  >() },
    { 2299u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"`mdspan` and CTAD" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"`mdspan` and CTAD" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"`mdspan` and CTAD" > , Rev< 3u, Arr64< Hash(L"Bryce Adelstein") >(), L"`mdspan`s of All Dynamic Extents" > , Rev< 4u, Arr64< Hash(L"Bryce Adelstein") >(), L"mdspans of All Dynamic Extents" >  >() },
    { 2300u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 1u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 2u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 3u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 4u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 5u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 6u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 7u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 8u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 9u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" > , Rev< 10u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`std::execution`" >  >() },
    { 2301u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Add a `pmr` alias for `std::stacktrace`" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Add a `pmr` alias for `std::stacktrace`" >  >() },
    { 2302u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"Prefer std::ranges::contains over std::basic_string_view::contains" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"`std::ranges::contains`" > , Rev< 2u, Arr64< Hash(L"Christopher Di") >(), L"`std::ranges::contains`" > , Rev< 3u, Arr64< Hash(L"Christopher Di") >(), L"`std::ranges::contains`" > , Rev< 4u, Arr64< Hash(L"Christopher Di") >(), L"`std::ranges::contains`" >  >() },
    { 2303u, RevList< Rev< 0u, Arr64< Hash(L"Author2081") >(), L"Title1613" > , Rev< 1u, Arr64< Hash(L"Author443") >(), L"Title374" > , Rev< 2u, Arr64< Hash(L"Author468") >(), L"Title393" > , Rev< 3u, Arr64< Hash(L"Author1515") >(), L"Title1177" > , Rev< 4u, Arr64< Hash(L"Author607") >(), L"Title497" >  >() },
    { 2304u, RevList< Rev< 0u, Arr64< Hash(L"Author1780") >(), L"Title1382" > , Rev< 1u, Arr64< Hash(L"Author358") >(), L"Title302" > , Rev< 2u, Arr64< Hash(L"Author700") >(), L"Title562" > , Rev< 3u, Arr64< Hash(L"Author485") >(), L"Title405" >  >() },
    { 2305u, RevList< Rev< 0u, Arr64< Hash(L"Author1709") >(), L"Title1320" > , Rev< 1u, Arr64< Hash(L"Author1611") >(), L"Title1246" > , Rev< 2u, Arr64< Hash(L"Author862") >(), L"Title687" > , Rev< 3u, Arr64< Hash(L"Author800") >(), L"Title645" > , Rev< 4u, Arr64< Hash(L"Author166") >(), L"Title143" > , Rev< 5u, Arr64< Hash(L"Author983") >(), L"Type inference for object definitions" >  >() },
    { 2306u, RevList< Rev< 0u, Arr64< Hash(L"Author768") >(), L"Title626" > , Rev< 1u, Arr64< Hash(L"Author1024") >(), L"Title818" > , Rev< 2u, Arr64< Hash(L"Author2016") >(), L"Title1556" > , Rev< 3u, Arr64< Hash(L"Author247") >(), L"Title203" >  >() },
    { 2307u, RevList< Rev< 0u, Arr64< Hash(L"Author822") >(), L"Title654" > , Rev< 1u, Arr64< Hash(L"Author1197") >(), L"Title938" > , Rev< 2u, Arr64< Hash(L"Author1668") >(), L"Title1297" >  >() },
    { 2308u, RevList< Rev< 0u, Arr64< Hash(L"Author598") >(), L"Template parameter initialization" > , Rev< 1u, Arr64< Hash(L"Author1244") >(), L"Template parameter initialization" >  >() },
    { 2309u, RevList< Rev< 0u, Arr64< Hash(L"Author329") >(), L"CORE:202101" >  >() },
    { 2310u, RevList< Rev< 0u, Arr64< Hash(L"Author1278") >(), L"Title989" > , Rev< 1u, Arr64< Hash(L"Author2202") >(), L"Title1687" >  >() },
    { 2311u, RevList< Rev< 0u, Arr64< Hash(L"Author901") >(), L"Title729" > , Rev< 1u, Arr64< Hash(L"Author2141") >(), L"Title1649" > , Rev< 2u, Arr64< Hash(L"Author1894") >(), L"Title1463" >  >() },
    { 2312u, RevList< Rev< 0u, Arr64< Hash(L"Author2113") >(), L"Title1632" > , Rev< 1u, Arr64< Hash(L"Author1904") >(), L"Title1470" >  >() },
    { 2313u, RevList< Rev< 0u, Arr64< Hash(L"Author2125") >(), L"Core \"tentatively ready\" Issues" >  >() },
    { 2314u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Character sets and encodings" > , Rev< 1u, Arr64< Hash(L"Jens Maurer") >(), L"Character sets and encodings" > , Rev< 2u, Arr64< Hash(L"Jens Maurer") >(), L"Character sets and encodings" > , Rev< 3u, Arr64< Hash(L"Jens Maurer") >(), L"Character sets and encodings" > , Rev< 4u, Arr64< Hash(L"Jens Maurer") >(), L"Character sets and encodings" >  >() },
    { 2315u, RevList< Rev< 0u, Arr64< Hash(L"Author744") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2021" >  >() },
    { 2316u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title176" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title72" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title40" >  >() },
    { 2317u, RevList< Rev< 0u, Arr64< Hash(L"Author1216") >(), L"Title953" >  >() },
    { 2318u, RevList< Rev< 0u, Arr64< Hash(L"Author198") >(), L"Title167" > , Rev< 1u, Arr64< Hash(L"Author2013") >(), L"Title1553" >  >() },
    { 2319u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Prevent path presentation problems" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Prevent path presentation problems" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Prevent path presentation problems" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Prevent path presentation problems" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Prevent path presentation problems" >  >() },
    { 2320u, RevList< Rev< 0u, Arr64< Hash(L"Author955") >(), L"The Syntax of Static Reflection" >  >() },
    { 2321u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"zip" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"zip" > , Rev< 2u, Arr64< Hash(L"Tim Song") >(), L"zip" >  >() },
    { 2322u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"`ranges::fold`" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"`ranges::fold`" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"`ranges::fold`" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"`ranges::fold`" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"ranges::fold" > , Rev< 5u, Arr64< Hash(L"Barry Revzin") >(), L"ranges::fold" > , Rev< 6u, Arr64< Hash(L"Barry Revzin") >(), L"ranges::fold" >  >() },
    { 2323u, RevList< Rev< 0u, Arr64< Hash(L"Martin Uecker") >(), L"Title1121" >  >() },
    { 2324u, RevList< Rev< 0u, Arr64< Hash(L"Martin Uecker") >(), L"Title150" > , Rev< 1u, Arr64< Hash(L"Martin Uecker") >(), L"Title293" > , Rev< 2u, Arr64< Hash(L"Martin Uecker") >(), L"Title964" >  >() },
    { 2325u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Views should not be required to be default constructible" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Views should not be required to be default constructible" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Views should not be required to be default constructible" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Views should not be required to be default constructible" >  >() },
    { 2327u, RevList< Rev< 0u, Arr64< Hash(L"Paul M") >(), L"Title771" > , Rev< 1u, Arr64< Hash(L"Paul M") >(), L"Title240" >  >() },
    { 2328u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"join_view should join all views of ranges" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"join_view should join all views of ranges" >  >() },
    { 2329u, RevList< Rev< 0u, Arr64< Hash(L"Author564") >(), L"Title457" >  >() },
    { 2330u, RevList< Rev< 0u, Arr64< Hash(L"Author1882") >(), L"Title1459" >  >() },
    { 2331u, RevList< Rev< 0u, Arr64< Hash(L"Author26") >(), L"Title20" >  >() },
    { 2332u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Bentley") >(), L"Establishing std::hive as replacement name for the proposed std::colony container" >  >() },
    { 2333u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Winter Library Evolution Poll Outcomes" >  >() },
    { 2334u, RevList< Rev< 0u, Arr64< Hash(L"Melanie Blower") >(), L"Title1606" > , Rev< 1u, Arr64< Hash(L"Melanie Blower") >(), L"Title490" >  >() },
    { 2337u, RevList< Rev< 0u, Arr64< Hash(L"Author1623") >(), L"Title1257" >  >() },
    { 2338u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Character primitives and the C library" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Character primitives and the C library" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Character primitives and the C library" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Character primitives and the C library" > , Rev< 4u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: Character primitives and the C library" >  >() },
    { 2339u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract violation handlers" >  >() },
    { 2340u, RevList< Rev< 0u, Arr64< Hash(L"Author616") >(), L"Clarifying the status of the C headers" > , Rev< 1u, Arr64< Hash(L"Author1061") >(), L"Clarifying the status of the C headers" >  >() },
    { 2342u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title71" >  >() },
    { 2345u, RevList< Rev< 0u, Arr64< Hash(L"Sean Parent") >(), L"Relaxing Requirements of Moved-From Objects" >  >() },
    { 2347u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1146" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title362" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1201" >  >() },
    { 2348u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title37" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title516" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title913" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title45" >  >() },
    { 2350u, RevList< Rev< 0u, Arr64< Hash(L"Author71") >(), L"constexpr class" > , Rev< 1u, Arr64< Hash(L"Author318") >(), L"constexpr class" > , Rev< 2u, Arr64< Hash(L"Author1369") >(), L"constexpr class" >  >() },
    { 2351u, RevList< Rev< 0u, Arr64< Hash(L"hana.dusikova@avast.com") >(), L"nodiscard casts" >  >() },
    { 2352u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2020-12-09 through 2021-03-24" >  >() },
    { 2353u, RevList< Rev< 0u, Arr64< Hash(L"David Rector") >(), L"Title814" >  >() },
    { 2355u, RevList< Rev< 0u, Arr64< Hash(L"Author87") >(), L"Postfix fold expressions" > , Rev< 1u, Arr64< Hash(L"Author903") >(), L"Postfix fold expressions" > , Rev< 2u, Arr64< Hash(L"Author730") >(), L"Postfix fold expressions" >  >() },
    { 2356u, RevList< Rev< 0u, Arr64< Hash(L"Author1870") >(), L"Title1449" >  >() },
    { 2358u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Defining Contracts" >  >() },
    { 2360u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Extend init-statement to allow alias-declaration" >  >() },
    { 2361u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title688" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1078" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1480" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title349" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title609" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title188" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1653" >  >() },
    { 2362u, RevList< Rev< 0u, Arr64< Hash(L"Author644") >(), L"Title523" > , Rev< 1u, Arr64< Hash(L"Author159") >(), L"Title136" > , Rev< 2u, Arr64< Hash(L"Author207") >(), L"Title171" > , Rev< 3u, Arr64< Hash(L"Author1935") >(), L"Title1495" >  >() },
    { 2363u, RevList< Rev< 0u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" > , Rev< 1u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" > , Rev< 2u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" > , Rev< 3u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" > , Rev< 4u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" > , Rev< 5u, Arr64< Hash(L"Konstantin Boyarinov") >(), L"Extending associative containers with the remaining heterogeneous overloads" >  >() },
    { 2367u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Remove misuses of list-initialization from Clause 24" >  >() },
    { 2368u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Spring Library Evolution Polls" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Spring Library Evolution Polls" >  >() },
    { 2370u, RevList< Rev< 0u, Arr64< Hash(L"Author2086") >(), L"Stacktrace from exception" > , Rev< 1u, Arr64< Hash(L"Author16") >(), L"Stacktrace from exception" > , Rev< 2u, Arr64< Hash(L"Author2220") >(), L"Stacktrace from exception" >  >() },
    { 2372u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Fixing locale handling in chrono formatters" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Fixing locale handling in chrono formatters" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Fixing locale handling in chrono formatters" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Fixing locale handling in chrono formatters" >  >() },
    { 2374u, RevList< Rev< 0u, Arr64< Hash(L"Sy Brand") >(), L"XXXXR0: views::cartesian_product" > , Rev< 1u, Arr64< Hash(L"Sy Brand") >(), L"views::cartesian_product" > , Rev< 2u, Arr64< Hash(L"Sy Brand") >(), L"views::cartesian_product" > , Rev< 3u, Arr64< Hash(L"Sy Brand") >(), L"`views::cartesian_product`" > , Rev< 4u, Arr64< Hash(L"Sy Brand") >(), L"`views::cartesian_product`" >  >() },
    { 2375u, RevList< Rev< 0u, Arr64< Hash(L"Author383") >(), L"Title328" > , Rev< 1u, Arr64< Hash(L"Author631") >(), L"Title512" >  >() },
    { 2376u, RevList< Rev< 0u, Arr64< Hash(L"Author462") >(), L"Title388" >  >() },
    { 2377u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"[[nodiscard]] in the Standard Library: Clause 23 Iterators library" >  >() },
    { 2378u, RevList< Rev< 0u, Arr64< Hash(L"Author211") >(), L"Title175" > , Rev< 1u, Arr64< Hash(L"Author690") >(), L"Title556" >  >() },
    { 2380u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Paper" > , Rev< 1u, Arr64< Hash(L"Robert Leahy") >(), L"Paper R1" >  >() },
    { 2381u, RevList< Rev< 0u, Arr64< Hash(L"Jarrad J") >(), L"Pattern Matching with Exception Handling" >  >() },
    { 2382u, RevList< Rev< 0u, Arr64< Hash(L"Author214") >(), L"Bright Blue" >  >() },
    { 2384u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Spring Library Evolution Poll Outcomes" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Spring Library Evolution Poll Outcomes" >  >() },
    { 2385u, RevList< Rev< 0u, Arr64< Hash(L"Author2010") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, June 2021" >  >() },
    { 2386u, RevList< Rev< 0u, Arr64< Hash(L"Author1352") >(), L"Core \"ready\" Issues" >  >() },
    { 2387u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Pipe support for user-defined range adaptors" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Pipe support for user-defined range adaptors" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Pipe support for user-defined range adaptors" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Pipe support for user-defined range adaptors" >  >() },
    { 2388u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Abort-only contract support" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Minimum Contract Support: either Ignore or Check_and_abort" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Minimum Contract Support: either Ignore or Check_and_abort" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Minimum Contract Support: either No_eval or Eval_and_abort" > , Rev< 4u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Minimum Contract Support: either No_eval or Eval_and_abort" >  >() },
    { 2389u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"dextents Index Type Parameter" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"dextents Index Type Parameter" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"dextents Index Type Parameter" >  >() },
    { 2390u, RevList< Rev< 0u, Arr64< Hash(L"Author1914") >(), L"Title1478" > , Rev< 1u, Arr64< Hash(L"Author1049") >(), L"Title842" > , Rev< 2u, Arr64< Hash(L"Author208") >(), L"Title173" >  >() },
    { 2391u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title1541" >  >() },
    { 2392u, RevList< Rev< 0u, Arr64< Hash(L"structure_map") >(), L"Title234" > , Rev< 1u, Arr64< Hash(L"structure_map") >(), L"Title1256" > , Rev< 2u, Arr64< Hash(L"structure_map") >(), L"Title744" > , Rev< 3u, Arr64< Hash(L"structure_map") >(), L"Title1091" >  >() },
    { 2393u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Cleaning up integer-class types" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Cleaning up integer-class types" >  >() },
    { 2395u, RevList< Rev< 0u, Arr64< Hash(L"Author1929") >(), L"WG21 2021-06 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2396u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"Concurrency TS 2 fixes" > , Rev< 1u, Arr64< Hash(L"David Goldblatt") >(), L"P2396R1" >  >() },
    { 2397u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2021-04-14 through 2021-05-26" >  >() },
    { 2400u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Library Evolution Report: 2020-10-27 to 2021-02-16" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"Library Evolution Report: 2021-02-23 to 2021-05-25" > , Rev< 2u, Arr64< Hash(L"Bryce Adelstein") >(), L"Library Evolution Report: 2021-06-01 to 2021-09-20" > , Rev< 3u, Arr64< Hash(L"Bryce Adelstein") >(), L"Library Evolution Report: 2021-09-28 to 2022-01-25" >  >() },
    { 2401u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Add a conditional noexcept specification to std::exchange" >  >() },
    { 2402u, RevList< Rev< 0u, Arr64< Hash(L"Author432") >(), L"PowerPoint Presentation" >  >() },
    { 2403u, RevList< Rev< 0u, Arr64< Hash(L"Author1676") >(), L"Slide 1" >  >() },
    { 2404u, RevList< Rev< 0u, Arr64< Hash(L"Justin Bassett") >(), L"Title382" > , Rev< 1u, Arr64< Hash(L"Justin Bassett") >(), L"Title1218" > , Rev< 2u, Arr64< Hash(L"Justin Bassett") >(), L"Title1238" > , Rev< 3u, Arr64< Hash(L"Justin Bassett") >(), L"Title124" >  >() },
    { 2405u, RevList< Rev< 0u, Arr64< Hash(L"Justin Bassett") >(), L"Title46" >  >() },
    { 2406u, RevList< Rev< 0u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Fix `counted_iterator` interaction with input iterators" > , Rev< 1u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Fix `counted_iterator` interaction with input iterators" > , Rev< 2u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Add `lazy_counted_iterator`" > , Rev< 3u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Add `lazy_counted_iterator`" > , Rev< 4u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Add `lazy_counted_iterator`" > , Rev< 5u, Arr64< Hash(L"Yehezkel Bernat") >(), L"Add `lazy_counted_iterator`" >  >() },
    { 2407u, RevList< Rev< 0u, Arr64< Hash(L"Emil Meissner") >(), L"Freestanding Library: Partial Classes" > , Rev< 1u, Arr64< Hash(L"Emil Meissner") >(), L"Freestanding Library: Partial Classes" > , Rev< 2u, Arr64< Hash(L"\xE2\x80\x83\xE2\x80\x83Emil Meissner") >(), L"Freestanding Library: Partial Classes" > , Rev< 3u, Arr64< Hash(L"\xE2\x80\x83\xE2\x80\x83Ben Craig") >(), L"Freestanding Library: Partial Classes" > , Rev< 4u, Arr64< Hash(L"\xE2\x80\x83\xE2\x80\x83Ben Craig") >(), L"Freestanding Library: Partial Classes" > , Rev< 5u, Arr64< Hash(L"\xE2\x80\x83\xE2\x80\x83Ben Craig") >(), L"Freestanding Library: Partial Classes" >  >() },
    { 2408u, RevList< Rev< 0u, Arr64< Hash(L"David Olsen") >(), L"Ranges views as inputs to non-Ranges algorithms" > , Rev< 1u, Arr64< Hash(L"David Olsen") >(), L"Ranges views as inputs to non-Ranges algorithms" > , Rev< 2u, Arr64< Hash(L"David Olsen") >(), L"Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 3u, Arr64< Hash(L"David Olsen") >(), L"Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 4u, Arr64< Hash(L"David Olsen") >(), L"Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 5u, Arr64< Hash(L"David Olsen") >(), L"Ranges iterators as inputs to non-Ranges algorithms" >  >() },
    { 2409u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Requirements for Usage of C++ Modules at Bloomberg" >  >() },
    { 2410u, RevList< Rev< 0u, Arr64< Hash(L"Author1782") >(), L"Title1384" >  >() },
    { 2411u, RevList< Rev< 0u, Arr64< Hash(L"Author856") >(), L"Title681" >  >() },
    { 2412u, RevList< Rev< 0u, Arr64< Hash(L"Author1536") >(), L"Title1191" >  >() },
    { 2413u, RevList< Rev< 0u, Arr64< Hash(L"L\xC3\xA9n\xC3\xA1rd Szolnoki") >(), L"Remove unsafe conversions of unique_ptr<T>" > , Rev< 1u, Arr64< Hash(L"L\xC3\xA9n\xC3\xA1rd Szolnoki") >(), L"Remove unsafe conversions of unique_ptr<T>" >  >() },
    { 2414u, RevList< Rev< 0u, Arr64< Hash(L"Paul E") >(), L"P2414R0 Pointer lifetime-end zap proposed solutions" > , Rev< 1u, Arr64< Hash(L"Paul E") >(), L"P2414R1 Pointer lifetime-end zap proposed solutions" > , Rev< 2u, Arr64< Hash(L"Paul E") >(), L"P2414R2 Pointer lifetime-end zap proposed solutions" > , Rev< 3u, Arr64< Hash(L"Paul E") >(), L"P2414R3 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 4u, Arr64< Hash(L"Paul E") >(), L"P2414R4 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 5u, Arr64< Hash(L"Paul E") >(), L"P2414R5 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 6u, Arr64< Hash(L"Paul E") >(), L"P2414R6 Pointer lifetime-end zap proposed solutions: atomics and volatile" >  >() },
    { 2415u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"What is a `view`?" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"What is a `view`?" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"What is a view?" >  >() },
    { 2416u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Title1559" > , Rev< 1u, Arr64< Hash(L"Jens Maurer") >(), L"Title871" > , Rev< 2u, Arr64< Hash(L"Jens Maurer") >(), L"Title1659" >  >() },
    { 2417u, RevList< Rev< 0u, Arr64< Hash(L"Author1877") >(), L"Title1453" > , Rev< 1u, Arr64< Hash(L"Author221") >(), L"Title180" > , Rev< 2u, Arr64< Hash(L"Author1757") >(), L"Title1363" >  >() },
    { 2418u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Add support for <code>std::generator</code>-like types to <code>std::format</code>" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Add support for <code>std::generator</code>-like types to <code>std::format</code>" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Add support for <code>std::generator</code>-like types to <code>std::format</code>" >  >() },
    { 2419u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Clarify handling of encodings in localized formatting of chrono types" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Clarify handling of encodings in localized formatting of chrono types" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Clarify handling of encodings in localized formatting of chrono types" >  >() },
    { 2420u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Summer Library Evolution Polls" >  >() },
    { 2422u, RevList< Rev< 0u, Arr64< Hash(L"Author203") >(), L"Remove nodiscard annotations from the standard library specification" > , Rev< 1u, Arr64< Hash(L"Author1831") >(), L"Remove nodiscard annotations from the standard library specification" >  >() },
    { 2423u, RevList< Rev< 0u, Arr64< Hash(L"Author1672") >(), L"C++ Liaison CFP C Summary" >  >() },
    { 2424u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Abbreviated Parameters" >  >() },
    { 2425u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Expression Function Body" >  >() },
    { 2428u, RevList< Rev< 0u, Arr64< Hash(L"Author2032") >(), L"Title1570" >  >() },
    { 2429u, RevList< Rev< 0u, Arr64< Hash(L"Author1503") >(), L"Title1168" >  >() },
    { 2430u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"SenderReceiverPartial" >  >() },
    { 2431u, RevList< Rev< 0u, Arr64< Hash(L"Author1258") >(), L"Slide 1" >  >() },
    { 2432u, RevList< Rev< 0u, Arr64< Hash(L"Author375") >(), L"P2432R0" > , Rev< 1u, Arr64< Hash(L"Author1635") >(), L"Fix istream_view, Rev 1" >  >() },
    { 2434u, RevList< Rev< 0u, Arr64< Hash(L"Author589") >(), L"Nondeterministic pointer provenance" > , Rev< 1u, Arr64< Hash(L"Author1106") >(), L"Nondeterministic pointer provenance" > , Rev< 2u, Arr64< Hash(L"Author1041") >(), L"Nondeterministic pointer provenance" > , Rev< 3u, Arr64< Hash(L"Author1738") >(), L"Nondeterministic pointer provenance" >  >() },
    { 2435u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Summer Library Evolution Poll Outcomes" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 Summer Library Evolution Poll Outcomes" >  >() },
    { 2436u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 September Library Evolution Polls" >  >() },
    { 2437u, RevList< Rev< 0u, Arr64< Hash(L"Aaron Ballman") >(), L"Title705" > , Rev< 1u, Arr64< Hash(L"Aaron Ballman") >(), L"Title829" >  >() },
    { 2438u, RevList< Rev< 0u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::string::substr() &&" > , Rev< 1u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::string::substr() &&" > , Rev< 2u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::string::substr() &&" >  >() },
    { 2439u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"What is a view?" >  >() },
    { 2440u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"ranges::iota, ranges::shift_left, and ranges::shift_right" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"ranges::iota, ranges::shift_left, and ranges::shift_right" >  >() },
    { 2441u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"views::join_with" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"views::join_with" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"views::join_with" >  >() },
    { 2442u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Windowing range adaptors: views::chunk and views::slide" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Windowing range adaptors: views::chunk and views::slide" >  >() },
    { 2443u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"views::chunk_by" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"views::chunk_by" >  >() },
    { 2444u, RevList< Rev< 0u, Arr64< Hash(L"Author2052") >(), L"TheAsioAsyncModel" >  >() },
    { 2445u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"std::forward_like" > , Rev< 1u, Arr64< Hash(L"Gaaper A~man") >(), L"std::forward_like" >  >() },
    { 2446u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"views::move" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"views::all_move" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"views::as_rvalue" >  >() },
    { 2447u, RevList< Rev< 0u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::span and the missing constructor" > , Rev< 1u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::span and the missing constructor" > , Rev< 2u, Arr64< Hash(L"federico.kircheis@gmail.com") >(), L"std::span and the missing constructor" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"<code>std::span</code> over an initializer list" > , Rev< 4u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"<code>std::span</code> over an initializer list" > , Rev< 5u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"<code>std::span</code> over an initializer list" > , Rev< 6u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"<code>std::span</code> over an initializer list" >  >() },
    { 2448u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Relaxing some constexpr restrictions" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Relaxing some constexpr restrictions" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Relaxing some constexpr restrictions" >  >() },
    { 2450u, RevList< Rev< 0u, Arr64< Hash(L"Author1357") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021" >  >() },
    { 2451u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 September Library Evolution Poll Outcomes" >  >() },
    { 2452u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 October Library Evolution and Concurrency Polls on Networking and Executors" >  >() },
    { 2453u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 October Library Evolution and Concurrency Networking and Executors Poll Outcomes" >  >() },
    { 2454u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 November Library Evolution Polls" >  >() },
    { 2455u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 November Library Evolution Poll Outcomes" >  >() },
    { 2456u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 December Library Evolution Polls" >  >() },
    { 2457u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2021 December Library Evolution Poll Outcomes" >  >() },
    { 2458u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022 January Library Evolution Polls" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022 January Library Evolution Polls" >  >() },
    { 2459u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022 January Library Evolution Poll Outcomes" >  >() },
    { 2460u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title165" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1508" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1" >  >() },
    { 2461u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Closure-Based Syntax for Contracts" > , Rev< 1u, Arr64< Hash(L"Gaaper A~man") >(), L"Closure-Based Syntax for Contracts" >  >() },
    { 2462u, RevList< Rev< 0u, Arr64< Hash(L"Author114") >(), L"Core \"ready\" Issues" >  >() },
    { 2463u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Kohlhoff") >(), L"AsioAsyncModel" >  >() },
    { 2464u, RevList< Rev< 0u, Arr64< Hash(L"Author813") >(), L"Ruminations on networking and executors" >  >() },
    { 2465u, RevList< Rev< 0u, Arr64< Hash(L"Author572") >(), L"Title463" > , Rev< 1u, Arr64< Hash(L"Author64") >(), L"Title68" > , Rev< 2u, Arr64< Hash(L"Author239") >(), L"Title199" > , Rev< 3u, Arr64< Hash(L"Author185") >(), L"Title159" >  >() },
    { 2466u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"The notes on contract annotations" >  >() },
    { 2467u, RevList< Rev< 0u, Arr64< Hash(L"Author216") >(), L"Support exclusive mode for fstreams" > , Rev< 1u, Arr64< Hash(L"Author2073") >(), L"Support exclusive mode for fstreams" >  >() },
    { 2468u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"The Equality Operator You Are Looking For" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"P2468R1R1: The Equality Operator You Are Looking For" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"The Equality Operator You Are Looking For" >  >() },
    { 2469u, RevList< Rev< 0u, Arr64< Hash(L"Jamie Allsop") >(), L"Response to P2464" >  >() },
    { 2470u, RevList< Rev< 0u, Arr64< Hash(L"Author685") >(), L"Slide 1" >  >() },
    { 2471u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"NetTS, ASIO and Sender Library Design Comparison" > , Rev< 1u, Arr64< Hash(L"Kirk Shoop") >(), L"NetTS, ASIO and Sender Library Design Comparison" >  >() },
    { 2472u, RevList< Rev< 0u, Arr64< Hash(L"Jarrad J") >(), L"make_function_ref: A More Functional function_ref" > , Rev< 1u, Arr64< Hash(L"Author941") >(), L"make_function_ref_more_functional" > , Rev< 2u, Arr64< Hash(L"Author342") >(), L"make_function_ref_more_functional" > , Rev< 3u, Arr64< Hash(L"Author1783") >(), L"make function_ref more functional - HackMD" >  >() },
    { 2473u, RevList< Rev< 0u, Arr64< Hash(L"Daniel") >(), L"Title1084" > , Rev< 1u, Arr64< Hash(L"Daniel Ruoso") >(), L"Distributing C++ Module Libraries" >  >() },
    { 2474u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`views::repeat`" > , Rev< 1u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`views::repeat`" > , Rev< 2u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"`views::repeat`" >  >() },
    { 2475u, RevList< Rev< 0u, Arr64< Hash(L"Author675") >(), L"WG21 2021-10 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2477u, RevList< Rev< 0u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow programmer to control and detect coroutine elision by static constexpr bool should_elide() and coroutine_handle::elided()" > , Rev< 1u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow programmer to control and detect coroutine elision by static constexpr bool must_elide() and coroutine_handle::elided()" > , Rev< 2u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow programmer to control and detect coroutine elision" > , Rev< 3u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow programmers to control coroutine elision" >  >() },
    { 2478u, RevList< Rev< 0u, Arr64< Hash(L"Hubert S.K") >(), L"_Thread_local for better C++ interoperability with C" >  >() },
    { 2479u, RevList< Rev< 0u, Arr64< Hash(L"Author41") >(), L"Title36" >  >() },
    { 2480u, RevList< Rev< 0u, Arr64< Hash(L"Jamie Allsop") >(), L"Response to P2471" >  >() },
    { 2481u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Forwarding reference to specific type/template" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Forwarding reference to specific type/template" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Forwarding reference to specific type/template" >  >() },
    { 2483u, RevList< Rev< 0u, Arr64< Hash(L"Hui Xie") >(), L"Support Non-copyable Types for `single_view`" >  >() },
    { 2484u, RevList< Rev< 0u, Arr64< Hash(L"Richard Smith") >(), L"Extending support for class types as non-type template parameters" >  >() },
    { 2485u, RevList< Rev< 0u, Arr64< Hash(L"Author1214") >(), L"Do not add value_exists and value_or to C++23" >  >() },
    { 2486u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"Structured naming for function object and CPO values" > , Rev< 1u, Arr64< Hash(L"Kirk Shoop") >(), L"Structured naming for function object and CPO values" >  >() },
    { 2487u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Attribute-like syntax for contract annotations" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Is attribute-like syntax adequate for contract annotations?" >  >() },
    { 2489u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Library Evolution Plan for Completing C++23" >  >() },
    { 2490u, RevList< Rev< 0u, Arr64< Hash(L"Ed Catmur") >(), L"Zero-overhead exception stacktraces" > , Rev< 3u, Arr64< Hash(L"Ed Catmur") >(), L"Zero-overhead exception stacktraces" >  >() },
    { 2491u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Text encodings follow-up" >  >() },
    { 2492u, RevList< Rev< 0u, Arr64< Hash(L"Author976") >(), L"Attending C++ Standards Committee Meetings During a Pandemic" >  >() },
    { 2493u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Missing feature test macros for C++20 core papers" >  >() },
    { 2494u, RevList< Rev< 0u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Relaxing range adaptors to allow for move only types" > , Rev< 1u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Relaxing range adaptors to allow for move only types" > , Rev< 2u, Arr64< Hash(L"Micha\xC5\x82 Dominiak") >(), L"Relaxing range adaptors to allow for move only types" >  >() },
    { 2495u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"Title1669" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"Title366" > , Rev< 2u, Arr64< Hash(L"Michael Florian") >(), L"Title1485" > , Rev< 3u, Arr64< Hash(L"Michael Florian") >(), L"Title1137" >  >() },
    { 2497u, RevList< Rev< 0u, Arr64< Hash(L"Author109") >(), L"Testing for success or failure of <charconv> functions" >  >() },
    { 2498u, RevList< Rev< 0u, Arr64< Hash(L"Author1367") >(), L"Title1060" > , Rev< 1u, Arr64< Hash(L"Author1976") >(), L"Title1536" >  >() },
    { 2499u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"`string_view` range constructor should be `explicit`" >  >() },
    { 2500u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++17 parallel algorithms and P2300" > , Rev< 1u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel algorithms and P2300" > , Rev< 2u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel algorithms and P2300" >  >() },
    { 2501u, RevList< Rev< 0u, Arr64< Hash(L"Author65") >(), L"Undo the rename of views::move and views::as_const" >  >() },
    { 2502u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"Title725" > , Rev< 1u, Arr64< Hash(L"Casey Carter") >(), L"Title1163" > , Rev< 2u, Arr64< Hash(L"Casey Carter") >(), L"Title3" >  >() },
    { 2504u, RevList< Rev< 0u, Arr64< Hash(L"Lucian Radu") >(), L"Computations as a global solution to concurrency" >  >() },
    { 2505u, RevList< Rev< 0u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R0 Monadic Functions for <code>std::expected</code>" > , Rev< 1u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R1 Monadic Functions for <code>std::expected</code>" > , Rev< 2u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R2 Monadic Functions for <code>std::expected</code>" > , Rev< 3u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R3 Monadic Functions for <code>std::expected</code>" > , Rev< 4u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R4 Monadic Functions for <code>std::expected</code>" > , Rev< 5u, Arr64< Hash(L"Jeff Garland") >(), L"P2505R5 Monadic Functions for <code>std::expected</code>" >  >() },
    { 2506u, RevList< Rev< 0u, Arr64< Hash(L"Casey Carter") >(), L"P2506" >  >() },
    { 2507u, RevList< Rev< 0u, Arr64< Hash(L"Author438") >(), L"Title371" > , Rev< 1u, Arr64< Hash(L"Author1265") >(), L"Title978" >  >() },
    { 2508u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Expose std::$basic-format-string$<charT, Args...>" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Expose std::$basic-format-string$<charT, Args...>" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Expose std::$basic-format-string$<charT, Args...>" >  >() },
    { 2509u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"A proposal for a type trait to detect value-preserving conversions" >  >() },
    { 2510u, RevList< Rev< 0u, Arr64< Hash(L"Mark de") >(), L"Title531" > , Rev< 1u, Arr64< Hash(L"Mark de") >(), L"Title1677" > , Rev< 2u, Arr64< Hash(L"Mark de") >(), L"Title336" > , Rev< 3u, Arr64< Hash(L"Mark de") >(), L"Title1615" >  >() },
    { 2511u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" >  >() },
    { 2512u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2021-06-09 through 2021-12-15" >  >() },
    { 2513u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"char8_t Compatibility and Portability Fixes" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"char8_t Compatibility and Portability Fix" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"char8_t Compatibility and Portability Fix" > , Rev< 3u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"D2513R3: char8_t Compatibility and Portability Fix" > , Rev< 4u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"char8_t Compatibility and Portability Fix" >  >() },
    { 2514u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"std::breakpoint" >  >() },
    { 2515u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"std::is_debugger_present" >  >() },
    { 2516u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"<code>string_view</code> is implicitly convertible from what?" >  >() },
    { 2517u, RevList< Rev< 0u, Arr64< Hash(L"Author1065") >(), L"Add a conditional noexcept specification to std::apply" > , Rev< 1u, Arr64< Hash(L"Author1377") >(), L"Add a conditional noexcept specification to std::apply" >  >() },
    { 2520u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"move_iterator<T*> should be a random access iterator" >  >() },
    { 2521u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Working Paper" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Working Paper" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Working Paper" > , Rev< 3u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Record of SG21 consensus" > , Rev< 4u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Record of SG21 consensus" > , Rev< 5u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract support Record of SG21 consensus" >  >() },
    { 2523u, RevList< Rev< 0u, Arr64< Hash(L"This was") >(), L"Request for re-inclusion of std::hive proposal in C++23" >  >() },
    { 2524u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1102" >  >() },
    { 2525u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title848" >  >() },
    { 2527u, RevList< Rev< 0u, Arr64< Hash(L"Alex Christensen") >(), L"std::variant_alternative_index and std::variant_alternative_index_v" > , Rev< 1u, Arr64< Hash(L"Alex Christensen") >(), L"std::variant_alternative_index and std::tuple_element_index" > , Rev< 2u, Arr64< Hash(L"Alex Christensen") >(), L"std::variant_alternative_index and std::tuple_element_index" > , Rev< 3u, Arr64< Hash(L"Alex Christensen") >(), L"std::variant_alternative_index and std::tuple_element_index" >  >() },
    { 2528u, RevList< Rev< 0u, Arr64< Hash(L"Reini Urban") >(), L"P2528R0" >  >() },
    { 2529u, RevList< Rev< 0u, Arr64< Hash(L"Mathias Stearn") >(), L"generator<T> should have T&& reference_type" >  >() },
    { 2530u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Why Hazard Pointers Should be in C++26" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Why Hazard Pointers Should be in C++26" > , Rev< 2u, Arr64< Hash(L"Maged M") >(), L"Why Hazard Pointers Should be in C++26" > , Rev< 3u, Arr64< Hash(L"Maged M") >(), L"Why Hazard Pointers Should be in C++26" >  >() },
    { 2531u, RevList< Rev< 0u, Arr64< Hash(L"Author1546") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2022" >  >() },
    { 2532u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Removing exception_ptr from the Receiver Concepts" >  >() },
    { 2533u, RevList< Rev< 0u, Arr64< Hash(L"Author2065") >(), L"Core \"ready\" Issues" >  >() },
    { 2534u, RevList< Rev< 0u, Arr64< Hash(L"Author314") >(), L"function_ref in the wild" >  >() },
    { 2535u, RevList< Rev< 0u, Arr64< Hash(L"dlustig@nvidia.com, ogiroux@nvidia.com") >(), L"Title458" >  >() },
    { 2536u, RevList< Rev< 0u, Arr64< Hash(L"Olga Arkhipova") >(), L"Microsoft Word - Distributing C++ Module Libraries with dependencies json files.docx" >  >() },
    { 2537u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Relax va_start Requirements to Match C" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Relax va_start Requirements to Match C" > , Rev< 2u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"Relax va_start Requirements to Match C" >  >() },
    { 2538u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"ADL-proof std::projected" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"ADL-proof std::projected" >  >() },
    { 2539u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Should the output of std::print to a terminal be synchronized with the underlying stream?" >  >() },
    { 2540u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Empty Product for certain Views" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Empty Product for certain Views" >  >() },
    { 2541u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Consider renaming remove_quals.docx" >  >() },
    { 2542u, RevList< Rev< 0u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 1u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 2u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 3u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 4u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 5u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 6u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 7u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" > , Rev< 8u, Arr64< Hash(L"Hui Xie") >(), L"`views::concat`" >  >() },
    { 2544u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Neumann") >(), L"C++ exceptions are becoming more and more problematic" >  >() },
    { 2545u, RevList< Rev< 0u, Arr64< Hash(L"Paul McKenney") >(), L"Why RCU Should be in C++26" > , Rev< 1u, Arr64< Hash(L"Paul McKenney") >(), L"Why RCU Should be in C++26" > , Rev< 2u, Arr64< Hash(L"Paul McKenney") >(), L"Why RCU Should be in C++26" > , Rev< 3u, Arr64< Hash(L"Paul McKenney") >(), L"Why RCU Should be in C++26" > , Rev< 4u, Arr64< Hash(L"Paul McKenney") >(), L"Read-Copy Update (RCU)" >  >() },
    { 2546u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Debugging Support" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Debugging Support" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Debugging Support" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Debugging Support" > , Rev< 4u, Arr64< Hash(L"1") >(), L"Debugging Support" > , Rev< 5u, Arr64< Hash(L"1") >(), L"Debugging Support" >  >() },
    { 2547u, RevList< Rev< 0u, Arr64< Hash(L"Author99") >(), L"P2547R0 - Language support for customisable functions" > , Rev< 1u, Arr64< Hash(L"Lewis Baker") >(), L"Language Support for Customisable Functions" >  >() },
    { 2548u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"Title528" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"Title790" > , Rev< 2u, Arr64< Hash(L"Michael Florian") >(), L"Title1455" > , Rev< 3u, Arr64< Hash(L"Michael Florian") >(), L"Title48" > , Rev< 4u, Arr64< Hash(L"Michael Florian") >(), L"Title1315" > , Rev< 5u, Arr64< Hash(L"Michael Florian") >(), L"Title1026" > , Rev< 6u, Arr64< Hash(L"Michael Florian") >(), L"Title1034" >  >() },
    { 2549u, RevList< Rev< 0u, Arr64< Hash(L"Yihe Li") >(), L"std::unexpected<E> should have error() as member accessor" > , Rev< 1u, Arr64< Hash(L"Yihe Li") >(), L"std::unexpected<E> should have error() as member accessor" >  >() },
    { 2550u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"ranges::copy should say output_iterator somewhere" >  >() },
    { 2551u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Clarify intent of P1841 numeric traits [P2551R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Clarify intent of P1841 numeric traits [P2551R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Clarify intent of P1841 numeric traits [P2551R2]" >  >() },
    { 2552u, RevList< Rev< 0u, Arr64< Hash(L"Author1169") >(), L"Title925" > , Rev< 1u, Arr64< Hash(L"Author733") >(), L"Title590" > , Rev< 2u, Arr64< Hash(L"Author483") >(), L"Title403" > , Rev< 3u, Arr64< Hash(L"Author538") >(), L"Title436" >  >() },
    { 2553u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"Make mdspan size_type controllable" > , Rev< 1u, Arr64< Hash(L"Christian Trott") >(), L"Make mdspan size_type controllable" >  >() },
    { 2554u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"C-Array Interoperability of MDSpan" >  >() },
    { 2555u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"DxxxxR0: Naming improvements for std::execution" > , Rev< 1u, Arr64< Hash(L"Jens Maurer") >(), L"Naming improvements for std::execution" >  >() },
    { 2557u, RevList< Rev< 0u, Arr64< Hash(L"Author1547") >(), L"WG21 2022-02 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2558u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Add @, $, and ` to the basic character set" > , Rev< 1u, Arr64< Hash(L"Steve Downey") >(), L"Add @, $, and ` to the basic character set" > , Rev< 2u, Arr64< Hash(L"Steve Downey") >(), L"Add @, $, and ` to the basic character set" >  >() },
    { 2559u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"Plan for Concurrency Technical Specification Version 2" > , Rev< 1u, Arr64< Hash(L"Bryce Adelstein") >(), L"Plan for Concurrency Technical Specification Version 2" >  >() },
    { 2560u, RevList< Rev< 0u, Arr64< Hash(L"Author633") >(), L"Title515" >  >() },
    { 2561u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"operator??" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"An error propagation operator" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"A control flow operator" >  >() },
    { 2562u, RevList< Rev< 0u, Arr64< Hash(L"Author1758") >(), L"Title1364" > , Rev< 1u, Arr64< Hash(L"Author220") >(), L"Title179" >  >() },
    { 2564u, RevList< Rev< 0u, Arr64< Hash(L"Barry \xE2\x80\x9CPatch\xE2\x80\x9D") >(), L"consteval needs to propagate up" > , Rev< 1u, Arr64< Hash(L"Barry \xE2\x80\x9CPatch\xE2\x80\x9D") >(), L"consteval needs to propagate up" > , Rev< 2u, Arr64< Hash(L"Barry \xE2\x80\x9CPatch\xE2\x80\x9D") >(), L"consteval needs to propagate up" > , Rev< 3u, Arr64< Hash(L"Barry \xE2\x80\x9CPatch\xE2\x80\x9D") >(), L"consteval needs to propagate up" >  >() },
    { 2565u, RevList< Rev< 0u, Arr64< Hash(L"Bret Brown") >(), L"D2565R0_Supporting_User-Defined_Attributes" >  >() },
    { 2568u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"P2568R0 Proposal of std::map::at_ptr" >  >() },
    { 2569u, RevList< Rev< 0u, Arr64< Hash(L"Author1114") >(), L"N2797: *_HAS_SUBNORM==0 implies what?" >  >() },
    { 2570u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"On side effects in contract annotations" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract predicates that are not predicates" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract predicates that are not predicates" >  >() },
    { 2572u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639" > , Rev< 1u, Arr64< Hash(L"Tom Honermann") >(), L"std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639" >  >() },
    { 2573u, RevList< Rev< 0u, Arr64< Hash(L"Yihe Li") >(), L"<code>= delete(\"should have a reason\");</code>" > , Rev< 1u, Arr64< Hash(L"Yihe Li") >(), L"= delete(\"should have a reason\");" > , Rev< 2u, Arr64< Hash(L"Yihe Li") >(), L"= delete(\"should have a reason\");" >  >() },
    { 2574u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-05 Library Evolution Polls" >  >() },
    { 2575u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-05 Library Evolution Poll Outcomes" >  >() },
    { 2576u, RevList< Rev< 0u, Arr64< Hash(L"Author446") >(), L"The constexpr specifier for object definitions" >  >() },
    { 2577u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Discovering C++ modules in pre-built library releases" > , Rev< 1u, Arr64< Hash(L"Daniel Ruoso") >(), L"Discovering C++ modules in pre-built library releases" > , Rev< 2u, Arr64< Hash(L"Daniel Ruoso") >(), L"Discovering C++ modules in pre-built library releases" >  >() },
    { 2579u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1599" >  >() },
    { 2580u, RevList< Rev< 0u, Arr64< Hash(L"Paolo Di") >(), L"Tuple protocol for C-style arrays T[N]" >  >() },
    { 2581u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Specifying the Interoperability of Binary Module Interface Files" > , Rev< 1u, Arr64< Hash(L"Daniel Ruoso") >(), L"Specifying the Interoperability of Built Module Interface Files" > , Rev< 2u, Arr64< Hash(L"Daniel Ruoso") >(), L"Specifying the Interoperability of Built Module Interface Files" >  >() },
    { 2582u, RevList< Rev< 0u, Arr64< Hash(L"Author1543") >(), L"Title1196" > , Rev< 1u, Arr64< Hash(L"Author1047") >(), L"Title841" >  >() },
    { 2584u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1211" >  >() },
    { 2585u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Improve default container formatting" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Improve default container formatting" >  >() },
    { 2586u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title931" >  >() },
    { 2587u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"<code>to_string</code> or not <code>to_string</code>" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"D2587R1: <code>to_string</code> or not <code>to_string</code>" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"<code>to_string</code> or not <code>to_string</code>" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"<code>to_string</code> or not <code>to_string</code>" >  >() },
    { 2588u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"barriers phase completion guarantees - HackMD" > , Rev< 1u, Arr64< Hash(L"Gonzalo Brito") >(), L"barriers phase completion guarantees" > , Rev< 2u, Arr64< Hash(L"Gonzalo Brito") >(), L"barriers phase completion guarantees" > , Rev< 3u, Arr64< Hash(L"Gonzalo Brito") >(), L"barriers phase completion guarantees - HackMD" >  >() },
    { 2589u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title1477" > , Rev< 1u, Arr64< Hash(L"Nevin ") >(), L"Title1633" >  >() },
    { 2590u, RevList< Rev< 0u, Arr64< Hash(L"Author949") >(), L"Title769" > , Rev< 1u, Arr64< Hash(L"Author546") >(), L"Title445" > , Rev< 2u, Arr64< Hash(L"Author621") >(), L"Title506" >  >() },
    { 2591u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" > , Rev< 2u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" > , Rev< 3u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" > , Rev< 4u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" > , Rev< 5u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Concatenation of strings and string views" >  >() },
    { 2592u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Hashing support for std::chrono value classes" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Hashing support for std::chrono value classes" > , Rev< 2u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Hashing support for std::chrono value classes" > , Rev< 3u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Hashing support for std::chrono value classes" >  >() },
    { 2593u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Allowing static_assert(false)" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Allowing static_assert(false)" >  >() },
    { 2594u, RevList< Rev< 0u, Arr64< Hash(L"Author1638") >(), L"Title1270" > , Rev< 1u, Arr64< Hash(L"Author1060") >(), L"Title852" >  >() },
    { 2596u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Improve std::hive::reshape" >  >() },
    { 2598u, RevList< Rev< 0u, Arr64< Hash(L"Author1509") >(), L"\"Changing scope for lambda trailing-return-type\" (P2036) should not be a DR" >  >() },
    { 2599u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title480" > , Rev< 1u, Arr64< Hash(L"__ 1") >(), L"Title1111" > , Rev< 2u, Arr64< Hash(L"__ 1") >(), L"Title1142" >  >() },
    { 2600u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"A minimal ADL restriction to avoid ill-formed template instantiation [P2600R0]" >  >() },
    { 2601u, RevList< Rev< 0u, Arr64< Hash(L"Justin Cooke") >(), L"Title1290" > , Rev< 1u, Arr64< Hash(L"Justin Cooke") >(), L"Title295" >  >() },
    { 2602u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Poison Pills are Too Toxic" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Poison Pills are Too Toxic" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Poison Pills are Too Toxic" >  >() },
    { 2603u, RevList< Rev< 0u, Arr64< Hash(L"Author1419") >(), L"member function pointer to function pointer - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1693") >(), L"member function pointer to function pointer - HackMD" >  >() },
    { 2604u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"mdspan: rename pointer and contiguous" >  >() },
    { 2605u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2022-01-12 through 2022-06-08" >  >() },
    { 2607u, RevList< Rev< 0u, Arr64< Hash(L"Author596") >(), L"Title487" >  >() },
    { 2608u, RevList< Rev< 0u, Arr64< Hash(L"Justin Cooke") >(), L"Title961" >  >() },
    { 2609u, RevList< Rev< 0u, Arr64< Hash(L"John Eivind") >(), L"Relaxing Ranges Just A Smidge" > , Rev< 1u, Arr64< Hash(L"John Eivind") >(), L"Relaxing Ranges Just A Smidge" > , Rev< 2u, Arr64< Hash(L"John Eivind") >(), L"Relaxing Ranges Just A Smidge" > , Rev< 3u, Arr64< Hash(L"John Eivind") >(), L"Relaxing Ranges Just A Smidge" >  >() },
    { 2610u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-07 Library Evolution Polls" >  >() },
    { 2611u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-07 Library Evolution Poll Outcomes" >  >() },
    { 2613u, RevList< Rev< 0u, Arr64< Hash(L"Yihe Li") >(), L"Add the missing empty to mdspan" > , Rev< 1u, Arr64< Hash(L"Yihe Li") >(), L"Add the missing empty to mdspan" >  >() },
    { 2614u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Deprecate numeric_limits::has_denorm [P2614R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Deprecate numeric_limits::has_denorm [P2614R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Deprecate numeric_limits::has_denorm [P2614R2]" >  >() },
    { 2615u, RevList< Rev< 0u, Arr64< Hash(L"Author1845") >(), L"Meaningful exports" > , Rev< 1u, Arr64< Hash(L"Author1126") >(), L"Meaningful exports" >  >() },
    { 2616u, RevList< Rev< 0u, Arr64< Hash(L"Author846") >(), L"Making std::atomic notification/wait operations usable in more situations" > , Rev< 1u, Arr64< Hash(L"Author893") >(), L"Revision History" > , Rev< 2u, Arr64< Hash(L"Author630") >(), L"Making std::atomic notification/wait operations usable in more situations" > , Rev< 3u, Arr64< Hash(L"Author62") >(), L"Making std::atomic notification/wait operations usable in more situations" > , Rev< 4u, Arr64< Hash(L"Author77") >(), L"Making std::atomic notification/wait operations usable in more situations" >  >() },
    { 2617u, RevList< Rev< 0u, Arr64< Hash(L"Jens Maurer") >(), L"Responses to NB comments on DTS 12907 \"Extensions to C++ forTransactional Memory Version 2\"" >  >() },
    { 2618u, RevList< Rev< 0u, Arr64< Hash(L"Author1010") >(), L"C++ Standard Library Issues to be moved in Virtual Plenary, Jul. 2022" >  >() },
    { 2620u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1318" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1519" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1035" >  >() },
    { 2621u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1467" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title355" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1045" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title249" >  >() },
    { 2622u, RevList< Rev< 0u, Arr64< Hash(L"Author1800") >(), L"Core \"ready\" Issues" >  >() },
    { 2623u, RevList< Rev< 0u, Arr64< Hash(L"Author1210") >(), L"implicit constant initialization - HackMD" > , Rev< 1u, Arr64< Hash(L"Author2173") >(), L"implicit constant initialization - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1022") >(), L"implicit constant initialization - HackMD" >  >() },
    { 2624u, RevList< Rev< 0u, Arr64< Hash(L"Justin Cooke") >(), L"Title220" >  >() },
    { 2625u, RevList< Rev< 0u, Arr64< Hash(L"Author2154") >(), L"Life without operator()" >  >() },
    { 2626u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1173" >  >() },
    { 2627u, RevList< Rev< 0u, Arr64< Hash(L"Author1401") >(), L"P2627 WG21 2022-07 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2628u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"Extend barrier APIs with memory_order" >  >() },
    { 2629u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"barrier token-less split arrive/wait" >  >() },
    { 2630u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"Submdspan" > , Rev< 1u, Arr64< Hash(L"Christian Trott") >(), L"Submdspan" > , Rev< 2u, Arr64< Hash(L"Christian Trott") >(), L"Submdspan" > , Rev< 3u, Arr64< Hash(L"Christian Trott") >(), L"Submdspan" > , Rev< 4u, Arr64< Hash(L"Christian Trott") >(), L"Submdspan" >  >() },
    { 2631u, RevList< Rev< 0u, Arr64< Hash(L"Author1438") >(), L"Publish TS Library Fundamentals 3 Now!" >  >() },
    { 2632u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title792" >  >() },
    { 2633u, RevList< Rev< 0u, Arr64< Hash(L"Justin Cooke") >(), L"Title230" >  >() },
    { 2634u, RevList< Rev< 0u, Arr64< Hash(L"Author447") >(), L"Title376" >  >() },
    { 2635u, RevList< Rev< 0u, Arr64< Hash(L"Author1803") >(), L"Title1399" >  >() },
    { 2636u, RevList< Rev< 0u, Arr64< Hash(L"Hannes Hauswedell") >(), L"References to ranges should always be viewable" > , Rev< 1u, Arr64< Hash(L"Hannes Hauswedell") >(), L"References to ranges should always be viewable" > , Rev< 2u, Arr64< Hash(L"Hannes Hauswedell") >(), L"References to ranges should always be viewable" >  >() },
    { 2637u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Member visit and apply" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Member visit" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Member visit" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Member visit" >  >() },
    { 2638u, RevList< Rev< 0u, Arr64< Hash(L"Author1842") >(), L"Title1430" >  >() },
    { 2639u, RevList< Rev< 0u, Arr64< Hash(L"Torben Thaysen") >(), L"Title1158" >  >() },
    { 2640u, RevList< Rev< 0u, Arr64< Hash(L"Author913") >(), L"Modules: Inner-scope Namespace Entities: Exported or Not?" > , Rev< 1u, Arr64< Hash(L"Author789") >(), L"Modules: Inner-scope Namespace Entities: Exported or Not?" > , Rev< 2u, Arr64< Hash(L"Author1772") >(), L"Modules: Inner-scope Namespace Entities: Exported or Not?" >  >() },
    { 2641u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Checking if a union alternative is active" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Checking if a union alternative is active" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Checking if a union alternative is active" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Checking if a union alternative is active" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Checking if a union alternative is active" >  >() },
    { 2642u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Padded mdspan layouts" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Padded mdspan layouts" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"Padded mdspan layouts" > , Rev< 3u, Arr64< Hash(L"Mark Hoemmen") >(), L"Padded mdspan layouts" > , Rev< 4u, Arr64< Hash(L"Christian Trott") >(), L"Padded mdspan layouts" > , Rev< 5u, Arr64< Hash(L"Christian Trott") >(), L"Padded mdspan layouts" > , Rev< 6u, Arr64< Hash(L"Christian Trott") >(), L"Title1619" >  >() },
    { 2643u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"Improving C++ concurrency features" > , Rev< 1u, Arr64< Hash(L"Gonzalo Brito") >(), L"Improving C++ concurrency features" > , Rev< 2u, Arr64< Hash(L"Gonzalo Brito") >(), L"Improving C++ concurrency features" >  >() },
    { 2644u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Final Fix of Broken Range-based for Loop" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Final Fix of Broken Range-Based for Loop" >  >() },
    { 2645u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"path_view: a design that took a wrong turn" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"path_view: a design that took a wrong turn" >  >() },
    { 2646u, RevList< Rev< 0u, Arr64< Hash(L"Parsa Amini") >(), L"Title624" >  >() },
    { 2647u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Permitting static constexpr variables in constexpr functions" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Permitting static constexpr variables in constexpr functions" >  >() },
    { 2648u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-10 Library Evolution Polls" >  >() },
    { 2649u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-10 Library Evolution Poll Outcomes" >  >() },
    { 2650u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2022-11 Library Evolution Polls" >  >() },
    { 2652u, RevList< Rev< 0u, Arr64< Hash(L"Author2009") >(), L"Disallow user specialization of allocator_traits" > , Rev< 1u, Arr64< Hash(L"Author190") >(), L"Disallow User Specialization of allocator_traits" > , Rev< 2u, Arr64< Hash(L"Author61") >(), L"Disallow User Specialization of allocator_traits" >  >() },
    { 2653u, RevList< Rev< 0u, Arr64< Hash(L"Author2048") >(), L"Title1589" > , Rev< 1u, Arr64< Hash(L"Author1881") >(), L"Title1458" >  >() },
    { 2654u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Macros And Standard Library Modules" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Macros And Standard Library Modules" >  >() },
    { 2655u, RevList< Rev< 0u, Arr64< Hash(L"Hui Xie") >(), L"`common_reference_t` of `reference_wrapper` Should Be a Reference Type" > , Rev< 1u, Arr64< Hash(L"Hui Xie") >(), L"`common_reference_t` of `reference_wrapper` Should Be a Reference Type" > , Rev< 2u, Arr64< Hash(L"Hui Xie") >(), L"`common_reference_t` of `reference_wrapper` Should Be aReference Type" > , Rev< 3u, Arr64< Hash(L"Hui Xie") >(), L"`common_reference_t` of `reference_wrapper` Should Be aReference Type" >  >() },
    { 2656u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"C++ Ecosystem International Standard" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"C++ Ecosystem International Standard" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"C++ Ecosystem International Standard" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"C++ Ecosystem International Standard" > , Rev< 4u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: C++ Ecosystem International Standard" >  >() },
    { 2657u, RevList< Rev< 0u, Arr64< Hash(L"Author101") >(), L"C++ is the next C++ - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1") >(), L"C++ is the next C++ - HackMD" >  >() },
    { 2658u, RevList< Rev< 0u, Arr64< Hash(L"Author1042") >(), L"temporary storage class specifiers - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1095") >(), L"temporary storage class specifiers - HackMD" >  >() },
    { 2659u, RevList< Rev< 0u, Arr64< Hash(L"Author1545") >(), L"A Proposal to Publish a Technical Specification for Contracts" > , Rev< 1u, Arr64< Hash(L"Author444") >(), L"A Proposal to Publish a Technical Specificationfor Contracts" > , Rev< 2u, Arr64< Hash(L"Author471") >(), L"A Proposal to Publish a Technical Specificationfor Contracts" >  >() },
    { 2660u, RevList< Rev< 0u, Arr64< Hash(L"Author909") >(), L"C++ Information technology Extensions for contracts" >  >() },
    { 2661u, RevList< Rev< 0u, Arr64< Hash(L"Author206") >(), L"Miscellaneous amendments to the Contracts TS" >  >() },
    { 2662u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title933" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title113" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title235" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1450" >  >() },
    { 2663u, RevList< Rev< 0u, Arr64< Hash(L"Author83") >(), L"Title" > , Rev< 1u, Arr64< Hash(L"Author107") >(), L"Title" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" > , Rev< 3u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" > , Rev< 4u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" > , Rev< 5u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" > , Rev< 6u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" > , Rev< 7u, Arr64< Hash(L"Daniel Towner") >(), L"Interleaved complex values support in std::simd" >  >() },
    { 2664u, RevList< Rev< 0u, Arr64< Hash(L"Author149") >(), L"Title" > , Rev< 1u, Arr64< Hash(L"Author1391") >(), L"Title" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend std::simd with permutation API" > , Rev< 3u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend std::simd with permutation API" > , Rev< 4u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend std::simd with permutation API" > , Rev< 5u, Arr64< Hash(L"Daniel Towner") >(), L"Extend std::simd with permutation API" > , Rev< 6u, Arr64< Hash(L"Daniel Towner") >(), L"Extend std::simd with permutation API" > , Rev< 7u, Arr64< Hash(L"Daniel Towner") >(), L"Extend std::simd with permutation API" > , Rev< 8u, Arr64< Hash(L"Daniel Towner") >(), L"Extend std::simd with permutation API" > , Rev< 9u, Arr64< Hash(L"Daniel Towner") >(), L"Extend std::simd with permutation API" >  >() },
    { 2665u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Title364" >  >() },
    { 2666u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Title740" >  >() },
    { 2667u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Title1326" >  >() },
    { 2668u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Title485" >  >() },
    { 2669u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Title518" >  >() },
    { 2670u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Non-transient constexpr allocation" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Non-transient constexpr allocation" >  >() },
    { 2671u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Syntax Choices for Generalized Pack Declaration and Usage" >  >() },
    { 2672u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Exploring the Design Space for a Pipeline Operator" >  >() },
    { 2673u, RevList< Rev< 0u, Arr64< Hash(L"Author713") >(), L"Title575" >  >() },
    { 2674u, RevList< Rev< 0u, Arr64< Hash(L"Author2057") >(), L"Title1595" > , Rev< 1u, Arr64< Hash(L"Author1480") >(), L"Title1151" >  >() },
    { 2675u, RevList< Rev< 0u, Arr64< Hash(L"Author1607") >(), L"LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)" > , Rev< 1u, Arr64< Hash(L"Author674") >(), L"LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)" >  >() },
    { 2676u, RevList< Rev< 0u, Arr64< Hash(L"Dave Abrahams") >(), L"The Val Object Model" >  >() },
    { 2677u, RevList< Rev< 0u, Arr64< Hash(L"Mike Spertus") >(), L"Title701" > , Rev< 2u, Arr64< Hash(L"Mike Spertus") >(), L"Title957" >  >() },
    { 2678u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2022-06-22 through 2022-09-28" >  >() },
    { 2679u, RevList< Rev< 0u, Arr64< Hash(L"Author1456") >(), L"Title1135" > , Rev< 1u, Arr64< Hash(L"Author135") >(), L"Title116" > , Rev< 2u, Arr64< Hash(L"Author1125") >(), L"Title898" >  >() },
    { 2680u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title1248" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title870" >  >() },
    { 2681u, RevList< Rev< 0u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title1286" > , Rev< 1u, Arr64< Hash(L"Richard Dosselmann") >(), L"Title170" >  >() },
    { 2682u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title489" >  >() },
    { 2683u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title649" >  >() },
    { 2684u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1451" >  >() },
    { 2685u, RevList< Rev< 0u, Arr64< Hash(L"Author1778") >(), L"Language Support For Scoped Allocators" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Language Support For Scoped Objects" >  >() },
    { 2686u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title39" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title935" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title707" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1143" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1048" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title746" >  >() },
    { 2687u, RevList< Rev< 0u, Arr64< Hash(L"Author1630") >(), L"Title1263" >  >() },
    { 2688u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"Pattern Matching Discussion for Kona 2022" > , Rev< 1u, Arr64< Hash(L"structure_map") >(), L"Pattern Matching: Expression" > , Rev< 2u, Arr64< Hash(L"structure_map") >(), L"Pattern Matching: `match` Expression" > , Rev< 3u, Arr64< Hash(L"structure_map") >(), L"Pattern Matching: `match` Expression" > , Rev< 4u, Arr64< Hash(L"structure_map") >(), L"Pattern Matching: `match` Expression" > , Rev< 5u, Arr64< Hash(L"structure_map") >(), L"Pattern Matching: `match` Expression" >  >() },
    { 2689u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"atomic_accessor" > , Rev< 1u, Arr64< Hash(L"Christian Trott") >(), L"Atomic Refs Bounded to Memory Orderings & Atomic Accessors" > , Rev< 2u, Arr64< Hash(L"Christian Trott") >(), L"Atomic Refs Bound to Memory Orderings & Atomic Accessors" > , Rev< 3u, Arr64< Hash(L"Christian Trott") >(), L"Atomic Refs Bound to Memory Orderings & Atomic Accessors" >  >() },
    { 2690u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++17 parallel algorithms and P2300" > , Rev< 1u, Arr64< Hash(L"Author1988") >(), L"Corporate PowerPoint Template Use Intel Clear For All Text (General Employee Usage)" >  >() },
    { 2691u, RevList< Rev< 0u, Arr64< Hash(L"Author284") >(), L"Title236" >  >() },
    { 2692u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Generic Programming is just Programming" >  >() },
    { 2693u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1186" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title765" >  >() },
    { 2695u, RevList< Rev< 0u, Arr64< Hash(L"Author160") >(), L"A proposed plan for contracts in C++" > , Rev< 1u, Arr64< Hash(L"Author580") >(), L"A proposed plan for contracts in C++" >  >() },
    { 2696u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"Introduce Cpp17Swappable as additional convenience requirements" >  >() },
    { 2697u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"Title1305" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"Title1162" >  >() },
    { 2698u, RevList< Rev< 0u, Arr64< Hash(L"Author2131") >(), L"Title1644" >  >() },
    { 2700u, RevList< Rev< 0u, Arr64< Hash(L"Author1893") >(), L"Questions on P2680 Contracts for C++: Prioritizing Safety" > , Rev< 1u, Arr64< Hash(L"Author431") >(), L"Questions on P2680 Contracts for C++: Prioritizing Safety" >  >() },
    { 2701u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Translating Linker Input Files to Module Metadata Files" >  >() },
    { 2702u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Specifying Importable Headers" >  >() },
    { 2703u, RevList< Rev< 0u, Arr64< Hash(L"Author1810") >(), L"C++ Standard Library Issues to be moved in Kona" >  >() },
    { 2704u, RevList< Rev< 0u, Arr64< Hash(L"Author560") >(), L"C++ Standard Library Immediate Issues to be moved in Kona, Nov. 2022" >  >() },
    { 2705u, RevList< Rev< 0u, Arr64< Hash(L"Author1359") >(), L"C++ Library Fundamentals TS Issues to be moved in Kona" >  >() },
    { 2706u, RevList< Rev< 0u, Arr64< Hash(L"Author857") >(), L"Drafting for US 26-061" >  >() },
    { 2708u, RevList< Rev< 0u, Arr64< Hash(L"Author1734") >(), L"No Further Fundamentals TSes" > , Rev< 1u, Arr64< Hash(L"Author501") >(), L"No Further Fundamentals TSes" >  >() },
    { 2709u, RevList< Rev< 0u, Arr64< Hash(L"Author80") >(), L"Core \"ready\" Issues" >  >() },
    { 2710u, RevList< Rev< 0u, Arr64< Hash(L"Author1876") >(), L"Core \"NB\" Issues" >  >() },
    { 2711u, RevList< Rev< 0u, Arr64< Hash(L"Author267") >(), L"Making multi-param (and other converting) constructors of views explicit" > , Rev< 1u, Arr64< Hash(L"Author731") >(), L"Making multi-param constructors of views explicit" >  >() },
    { 2712u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title665" >  >() },
    { 2713u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Escaping improvements in std::format" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Escaping improvements in std::format" >  >() },
    { 2714u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Bind front and back to NTTP callables - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Bind front and back to NTTP callables - HackMD" >  >() },
    { 2717u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 4u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 5u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Tool Introspection" > , Rev< 6u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: Tool Introspection" >  >() },
    { 2718u, RevList< Rev< 0u, Arr64< Hash(L"Nicolai Josuttis") >(), L"D2718R0: Wording for P2644R1 Fix for Range-based for Loop" >  >() },
    { 2719u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Type-aware allocation and deallocation functions" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Type-aware allocation and deallocation functions" > , Rev< 2u, Arr64< Hash(L"Louis Dionne") >(), L"Type-aware allocation and deallocation functions" > , Rev< 3u, Arr64< Hash(L"Louis Dionne") >(), L"Type-aware allocation and deallocation functions" > , Rev< 4u, Arr64< Hash(L"Louis Dionne") >(), L"Type-aware allocation and deallocation functions" >  >() },
    { 2721u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"P2721R0" >  >() },
    { 2722u, RevList< Rev< 0u, Arr64< Hash(L"Author14") >(), L"Beyond operator()" >  >() },
    { 2723u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Zero-initialize objects of automatic storage duration" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Zero-initialize objects of automatic storage duration" >  >() },
    { 2724u, RevList< Rev< 0u, Arr64< Hash(L"Author629") >(), L"constant dangling - HackMD" > , Rev< 1u, Arr64< Hash(L"Author2008") >(), L"constant dangling - HackMD" >  >() },
    { 2725u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"`std::integral_constant` Literals" > , Rev< 1u, Arr64< Hash(L"Zach Laine") >(), L"`std::integral_constant` Literals" >  >() },
    { 2726u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Better `std::tuple` Indexing" >  >() },
    { 2727u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"`std::iterator_interface`" > , Rev< 1u, Arr64< Hash(L"Zach Laine") >(), L"`std::iterator_interface`" > , Rev< 2u, Arr64< Hash(L"Zach Laine") >(), L"`std::iterator_interface`" > , Rev< 3u, Arr64< Hash(L"Zach Laine") >(), L"`std::iterator_interface`" > , Rev< 4u, Arr64< Hash(L"Zach Laine") >(), L"`std::iterator_interface`" >  >() },
    { 2728u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 1u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 2u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 3u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 4u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 5u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 6u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 7u, Arr64< Hash(L"1") >(), L"Unicode in the Library, Part 1: UTF Transcoding" >  >() },
    { 2729u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Unicode in the Library, Part 2: Normalization" >  >() },
    { 2730u, RevList< Rev< 0u, Arr64< Hash(L"Author692") >(), L"variable scope - HackMD" > , Rev< 1u, Arr64< Hash(L"Author119") >(), L"variable scope - HackMD" >  >() },
    { 2732u, RevList< Rev< 0u, Arr64< Hash(L"Author1648") >(), L"P2732 WG21 2022-11 Kona Record of Discussion.docx" >  >() },
    { 2733u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix handling of empty specifiers in std::format" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix handling of empty specifiers in std::format" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix handling of empty specifiers in std::format" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix handling of empty specifiers in std::format" >  >() },
    { 2734u, RevList< Rev< 0u, Arr64< Hash(L"Marc Mutz") >(), L"Title140" >  >() },
    { 2735u, RevList< Rev< 0u, Arr64< Hash(L"Author775") >(), L"Title632" >  >() },
    { 2736u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title78" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title464" >  >() },
    { 2737u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Proposal of Condition-centric Contracts Syntax" >  >() },
    { 2738u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title638" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title135" >  >() },
    { 2739u, RevList< Rev< 0u, Arr64< Hash(L"Author583") >(), L"Title476" >  >() },
    { 2740u, RevList< Rev< 0u, Arr64< Hash(L"Author693") >(), L"Simpler implicit dangling resolution - HackMD" > , Rev< 1u, Arr64< Hash(L"Author552") >(), L"Simpler implicit dangling resolution - HackMD" > , Rev< 2u, Arr64< Hash(L"Author2196") >(), L"Simpler implicit dangling resolution - HackMD" >  >() },
    { 2741u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title863" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title416" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1197" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title149" >  >() },
    { 2742u, RevList< Rev< 0u, Arr64< Hash(L"Author327") >(), L"indirect dangling identification - HackMD" > , Rev< 1u, Arr64< Hash(L"Author427") >(), L"indirect dangling identification - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1228") >(), L"indirect dangling identification - HackMD" >  >() },
    { 2743u, RevList< Rev< 0u, Arr64< Hash(L"Author1055") >(), L"Contracts for C++: Priorotizing Safety" >  >() },
    { 2746u, RevList< Rev< 0u, Arr64< Hash(L"Author981") >(), L"Fenv rounding" > , Rev< 1u, Arr64< Hash(L"Author968") >(), L"Fenv rounding" > , Rev< 2u, Arr64< Hash(L"Author1176") >(), L"Fenv rounding" > , Rev< 3u, Arr64< Hash(L"Author1957") >(), L"Fenv rounding" > , Rev< 4u, Arr64< Hash(L"Author512") >(), L"Fenv rounding" > , Rev< 5u, Arr64< Hash(L"Author1135") >(), L"Fenv rounding" > , Rev< 6u, Arr64< Hash(L"Author1655") >(), L"Fenv rounding" > , Rev< 7u, Arr64< Hash(L"Author1467") >(), L"Fenv rounding" >  >() },
    { 2747u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Limited support for constexpr void*" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr placement new" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr placement new" >  >() },
    { 2748u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned glvalue to a Temporary" > , Rev< 1u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 2u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 3u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 4u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 5u, Arr64< Hash(L"Brian Bi") >(), L"Disallow Binding a Returned Glvalue to a Temporary" >  >() },
    { 2749u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1686" >  >() },
    { 2750u, RevList< Rev< 0u, Arr64< Hash(L"Author1361") >(), L"C Dangling Reduction - HackMD" > , Rev< 1u, Arr64< Hash(L"Author2055") >(), L"C Dangling Reduction - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1642") >(), L"C Dangling Reduction - HackMD" >  >() },
    { 2751u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title620" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1638" >  >() },
    { 2752u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Static storage for braced initializers" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Static storage for braced initializers" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Static storage for braced initializers" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Static storage for braced initializers" >  >() },
    { 2754u, RevList< Rev< 0u, Arr64< Hash(L"Jake Fevold") >(), L"Deconstructing the Avoidance of Uninitialized Reads of AutoVariables" >  >() },
    { 2755u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1282" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title309" >  >() },
    { 2756u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"D2756R0 Proposal of Simple Contract Side Effect Semantics" >  >() },
    { 2757u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Type-checking format args" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Type-checking format args" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Type-checking format args" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Type-checking format args" >  >() },
    { 2758u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" > , Rev< 5u, Arr64< Hash(L"Barry Revzin") >(), L"Emitting messages at compile time" >  >() },
    { 2759u, RevList< Rev< 0u, Arr64< Hash(L"Author818") >(), L"D2759R0: DG Opinion on Safety for ISO C++" > , Rev< 1u, Arr64< Hash(L"Author1843") >(), L"DG Opinion on Safety for ISO C++" >  >() },
    { 2760u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"A Plan for C++26 Ranges" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"A Plan for C++26 Ranges" >  >() },
    { 2761u, RevList< Rev< 0u, Arr64< Hash(L"Author996") >(), L"If structured binding" > , Rev< 1u, Arr64< Hash(L"Author1631") >(), L"If structured binding" > , Rev< 2u, Arr64< Hash(L"Author1552") >(), L"Evaluating structured binding as a condition" > , Rev< 3u, Arr64< Hash(L"Author1287") >(), L"Title998" >  >() },
    { 2762u, RevList< Rev< 0u, Arr64< Hash(L"Dietmar Khl") >(), L"Sender/Receiver Interface For Networking" > , Rev< 1u, Arr64< Hash(L"Dietmar Khl") >(), L"Sender/Receiver Interface For Networking" > , Rev< 2u, Arr64< Hash(L"Dietmar Khl") >(), L"Sender/Receiver Interface For Networking" >  >() },
    { 2763u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"layout_stride static extents default constructor fix" > , Rev< 1u, Arr64< Hash(L"Christian Trott") >(), L"layout_stride static extents default constructor fix" >  >() },
    { 2764u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1593" >  >() },
    { 2765u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Title1342" >  >() },
    { 2766u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2022-10-12 through 2022-12-14" >  >() },
    { 2767u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"flat_map/flat_set omnibus" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"flat_map/flat_set omnibus" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"flat_map/flat_set omnibus" >  >() },
    { 2769u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"get_element customization point object" > , Rev< 1u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"get_element customization point object" > , Rev< 2u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"get_element customization point object" > , Rev< 3u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"get_element customization point object" >  >() },
    { 2770u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Stashing stashing iterators for proper flattening" >  >() },
    { 2771u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Neumann") >(), L"Towards memory safety in C++" > , Rev< 1u, Arr64< Hash(L"Thomas Neumann") >(), L"R2771R1: Towards memory safety in C++" >  >() },
    { 2772u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"std::integral_constant literals do not suffice constexpr_t? [P2772R0]" >  >() },
    { 2773u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1068" >  >() },
    { 2774u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"D2774 - Scoped thread-local storage" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"D2774 - Concurrent object pool" >  >() },
    { 2775u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2023-05 Library Evolution Polls" >  >() },
    { 2776u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"2023-05 Library Evolution Poll Outcomes" >  >() },
    { 2779u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Make basic_string_views range construction conditionally explicit" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"D2779R1: Make basic_string_views range construction conditionally explicit" >  >() },
    { 2780u, RevList< Rev< 0u, Arr64< Hash(L"Author990") >(), L"Caller-side precondition checking, and Eval_and_throw" >  >() },
    { 2781u, RevList< Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"`std::constexpr_v`" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"`std::constexpr_v`" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"`std::constexpr_v`" > , Rev< 4u, Arr64< Hash(L"Matthias Kretz") >(), L"`std::constant_wrapper`" > , Rev< 5u, Arr64< Hash(L"Hana Dusikova") >(), L"`std::constant_wrapper`" > , Rev< 6u, Arr64< Hash(L"Hana Dusikova") >(), L"`std::constant_wrapper`" > , Rev< 7u, Arr64< Hash(L"Hana Dusikova") >(), L"`std::constant_wrapper`" > , Rev< 8u, Arr64< Hash(L"Hana Dusikova") >(), L"`std::constant_wrapper`" >  >() },
    { 2782u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"A proposal for a type trait to detect if value initialization can be achieved by zero-filling" >  >() },
    { 2784u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Not halting the program after detected contract violation" >  >() },
    { 2785u, RevList< Rev< 0u, Arr64< Hash(L"S\xC3\xA9bastien Bini") >(), L"D2785R1: Relocating prvalues" > , Rev< 1u, Arr64< Hash(L"S\xC3\xA9bastien Bini") >(), L"Relocating prvalues" > , Rev< 2u, Arr64< Hash(L"S\xC3\xA9bastien Bini") >(), L"D2785R2: Relocating prvalues" > , Rev< 3u, Arr64< Hash(L"S\xC3\xA9bastien Bini") >(), L"Relocating prvalues" >  >() },
    { 2786u, RevList< Rev< 0u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial relocatability options" > , Rev< 1u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial relocatability options" > , Rev< 2u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial relocatability options" > , Rev< 3u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 4u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 5u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 6u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 7u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 8u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 9u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 10u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 11u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 12u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability For C++26" > , Rev< 13u, Arr64< Hash(L"Alisdair Meredith") >(), L"Trivial Relocatability For C++26" >  >() },
    { 2787u, RevList< Rev< 0u, Arr64< Hash(L"Author1679") >(), L"Title1304" > , Rev< 1u, Arr64< Hash(L"Author619") >(), L"Title505" >  >() },
    { 2788u, RevList< Rev< 0u, Arr64< Hash(L"Author835") >(), L"Linkage for modular constants" >  >() },
    { 2789u, RevList< Rev< 0u, Arr64< Hash(L"Author1858") >(), L"C++ Standard Library Issues to be moved in Issaquah, Feb. 2023" >  >() },
    { 2790u, RevList< Rev< 0u, Arr64< Hash(L"Author686") >(), L"C++ Standard Library Immediate Issues to be moved in Issaquah, Feb. 2023" >  >() },
    { 2791u, RevList< Rev< 0u, Arr64< Hash(L"Ran Regev") >(), L"P2791R0" >  >() },
    { 2795u, RevList< Rev< 0u, Arr64< Hash(L"Author1344") >(), L"Correct and incorrect code, and erroneous behaviour" > , Rev< 1u, Arr64< Hash(L"Author963") >(), L"Erroneous behaviour for uninitialized reads" > , Rev< 2u, Arr64< Hash(L"Author1417") >(), L"Erroneous behaviour for uninitialized reads" > , Rev< 3u, Arr64< Hash(L"Author363") >(), L"Erroneous behaviour for uninitialized reads" > , Rev< 4u, Arr64< Hash(L"Author53") >(), L"Erroneous behaviour for uninitialized reads" > , Rev< 5u, Arr64< Hash(L"Author158") >(), L"Erroneous behaviour for uninitialized reads" >  >() },
    { 2796u, RevList< Rev< 0u, Arr64< Hash(L"Author719") >(), L"Core \"ready\" Issues" >  >() },
    { 2797u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Proposed resolution for CWG2692 Static and explicit objectmember functions with the same parameter-type-lists" >  >() },
    { 2798u, RevList< Rev< 0u, Arr64< Hash(L"Christian Trott") >(), L"Fix layout mappings all static extent default constructor" >  >() },
    { 2799u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Closed ranges may be a problem; breaking counted_iterator is not the solution" >  >() },
    { 2800u, RevList< Rev< 0u, Arr64< Hash(L"Author1124") >(), L"Dependency flag soup needs some fiber" >  >() },
    { 2802u, RevList< Rev< 0u, Arr64< Hash(L"Guy Davidson") >(), L"P1385R7" >  >() },
    { 2803u, RevList< Rev< 0u, Arr64< Hash(L"Author1779") >(), L"std::simd" >  >() },
    { 2805u, RevList< Rev< 0u, Arr64< Hash(L"Author671") >(), L"Slide 1" >  >() },
    { 2806u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"do expressions" > , Rev< 1u, Arr64< Hash(L"Bruno Cardoso") >(), L"do expressions" > , Rev< 2u, Arr64< Hash(L"Bruno Cardoso") >(), L"do expressions" > , Rev< 3u, Arr64< Hash(L"Bruno Cardoso") >(), L"do expressions" >  >() },
    { 2807u, RevList< Rev< 0u, Arr64< Hash(L"Author8") >(), L"Title9" >  >() },
    { 2808u, RevList< Rev< 0u, Arr64< Hash(L"Author118") >(), L"Internal linkage in the global module" >  >() },
    { 2809u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"Trivial infinite loops are not Undefined Behavior" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"Trivial infinite loops are not Undefined Behavior" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"Trivial infinite loops are not Undefined Behavior" > , Rev< 3u, Arr64< Hash(L"JF Bastien") >(), L"Trivial infinite loops are not Undefined Behavior" >  >() },
    { 2810u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"is_debugger_present is_replaceable" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"is_debugger_present is_replaceable" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"is_debugger_present is_replaceable" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"is_debugger_present is_replaceable" > , Rev< 4u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"is_debugger_present is_replaceable" >  >() },
    { 2811u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title471" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title623" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title141" > , Rev< 3u, Arr64< Hash(L"Joshua Berne") >(), L"Title134" > , Rev< 4u, Arr64< Hash(L"Joshua Berne") >(), L"Title412" > , Rev< 5u, Arr64< Hash(L"Joshua Berne") >(), L"Title975" > , Rev< 6u, Arr64< Hash(L"Joshua Berne") >(), L"Title248" > , Rev< 7u, Arr64< Hash(L"Joshua Berne") >(), L"Title268" >  >() },
    { 2812u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"P2812: P1673R11 LEWG presentation" >  >() },
    { 2814u, RevList< Rev< 0u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability Comparing P1144 with P2786" > , Rev< 1u, Arr64< Hash(L"Mungo Gill") >(), L"Trivial Relocatability Comparing P1144 with P2786" >  >() },
    { 2815u, RevList< Rev< 0u, Arr64< Hash(L"Author2029") >(), L"Pointers are sometimes just bags of bits" >  >() },
    { 2816u, RevList< Rev< 0u, Arr64< Hash(L"Author810") >(), L"Upcoming Changes to C++" >  >() },
    { 2817u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"The idea behind the contracts MVP" >  >() },
    { 2818u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Uniform Call Syntax for explicit-object memberfunctions" >  >() },
    { 2819u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"D2819 - Add tuple protocol to complex" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"D2819 - Add tuple protocol to complex" > , Rev< 2u, Arr64< Hash(L"Michael Florian") >(), L"D2819 - Add tuple protocol to complex" >  >() },
    { 2821u, RevList< Rev< 0u, Arr64< Hash(L"Author1235") >(), L"span.at() - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1103") >(), L"span.at() - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1116") >(), L"span.at() - HackMD" > , Rev< 3u, Arr64< Hash(L"Author535") >(), L"span.at() - HackMD" > , Rev< 4u, Arr64< Hash(L"Author304") >(), L"span.at() - HackMD" > , Rev< 5u, Arr64< Hash(L"Author2192") >(), L"span.at() - HackMD" >  >() },
    { 2822u, RevList< Rev< 0u, Arr64< Hash(L"Author184") >(), L"Providing user control of associated entities of class types" > , Rev< 1u, Arr64< Hash(L"Author1402") >(), L"Providing user control of associated entities of class types" > , Rev< 2u, Arr64< Hash(L"Author274") >(), L"Providing user control of associated entities of class types" >  >() },
    { 2824u, RevList< Rev< 0u, Arr64< Hash(L"Author200") >(), L"P2824 WG21 2023-02 Issaquah Record of Discussion.docx" >  >() },
    { 2825u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"calltarget(unevaluated-call-expression)" > , Rev< 1u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"declcall(unevaluated-postfix-expression)" > , Rev< 2u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"declcall(unevaluated-postfix-expression)" > , Rev< 3u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Overload resolution hook: declcall( unevaluated-call-expression)" > , Rev< 4u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Overload resolution hook: declcall( unevaluated-call-expression)" > , Rev< 5u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Overload resolution hook: declcall( unevaluated-call-expression)" >  >() },
    { 2826u, RevList< Rev< 0u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Replacement function" > , Rev< 1u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Replacement function" > , Rev< 2u, Arr64< Hash(L"Ga\xC5\xA1per A\xC5\xBEman") >(), L"Replacement function" >  >() },
    { 2827u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Floating-point overflow and underflow in from_chars (LWG 3081) - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Floating-point overflow and underflow in `from_chars` (LWG 3081) - HackMD" >  >() },
    { 2828u, RevList< Rev< 0u, Arr64< Hash(L"Author653") >(), L"Copy elision for direct-initialization with a conversion function (Coreissue 2327)" > , Rev< 1u, Arr64< Hash(L"Author466") >(), L"Copy elision for direct-initialization with a conversion function (Coreissue 2327)" > , Rev< 2u, Arr64< Hash(L"Author994") >(), L"Copy elision for direct-initialization with a conversion function (Coreissue 2327)" >  >() },
    { 2829u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"Proposal of Contracts Supporting Const-On-Definition Style" >  >() },
    { 2830u, RevList< Rev< 0u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Type Ordering" > , Rev< 1u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Type Ordering" > , Rev< 2u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 3u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 4u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 5u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 6u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 7u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 8u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 9u, Arr64< Hash(L"Nate Nichols") >(), L"Standardized Constexpr Type Ordering" > , Rev< 10u, Arr64< Hash(L"Nate Nichols") >(), L"Constexpr Type Ordering" >  >() },
    { 2831u, RevList< Rev< 0u, Arr64< Hash(L"Author756") >(), L"Title613" >  >() },
    { 2833u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: inout expected span" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: inout expected span" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: inout expected span" >  >() },
    { 2834u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1362" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1454" >  >() },
    { 2835u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose std::atomic_ref 's object address" > , Rev< 1u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 2u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 3u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 4u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 5u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 6u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" > , Rev< 7u, Arr64< Hash(L"Gonzalo Brito") >(), L"Expose `std::atomic_ref` 's object address" >  >() },
    { 2836u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"`std::const_iterator` often produces an unexpected type" > , Rev< 1u, Arr64< Hash(L"Christopher Di") >(), L"`std::basic_const_iterator` should follow its underlying type'sconvertibility" >  >() },
    { 2837u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Planning to Revisit the Lakos Rule" >  >() },
    { 2838u, RevList< Rev< 0u, Arr64< Hash(L"Author699") >(), L"Unconditional contract violation handling of any kind is a serious problem" >  >() },
    { 2839u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Nontrivial Relocation via a New *owning reference* Type" >  >() },
    { 2841u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1505" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1179" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1128" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title831" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title585" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title446" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1552" > , Rev< 7u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1003" >  >() },
    { 2842u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Destructor Semantics Do Not Affect Constructible Traits" >  >() },
    { 2843u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Preprocessing is never undefined" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Preprocessing is never undefined" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Preprocessing is never undefined" >  >() },
    { 2845u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"D2845R4: Formatting of std::filesystem::path" > , Rev< 5u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 6u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 7u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" > , Rev< 8u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::filesystem::path" >  >() },
    { 2846u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title237" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title312" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1345" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1376" > , Rev< 4u, Arr64< Hash(L"Corentin Jabot") >(), L"Title365" > , Rev< 5u, Arr64< Hash(L"Corentin Jabot") >(), L"Title981" > , Rev< 6u, Arr64< Hash(L"Corentin Jabot") >(), L"Title5" >  >() },
    { 2848u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_uniqued" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"std::is_uniqued" >  >() },
    { 2849u, RevList< Rev< 0u, Arr64< Hash(L"Kirk Shoop") >(), L"async-object - aka async-RAII" >  >() },
    { 2850u, RevList< Rev< 0u, Arr64< Hash(L"2.6") >(), L"Title104" >  >() },
    { 2852u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Contract violation handling semantics for the contracts MVP" >  >() },
    { 2853u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"P2853R0 Proposal of std::contract_violation" >  >() },
    { 2855u, RevList< Rev< 0u, Arr64< Hash(L"Author884") >(), L"Member customization points for Senders and Receivers" > , Rev< 1u, Arr64< Hash(L"Author1387") >(), L"Member customization points for Senders and Receivers" >  >() },
    { 2857u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Bentley") >(), L"Improve std::hive::reshape" >  >() },
    { 2858u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Noexcept vs contract violations" >  >() },
    { 2861u, RevList< Rev< 0u, Arr64< Hash(L"Author1766") >(), L"Title1370" >  >() },
    { 2862u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"text_encoding::name() should never return null values" > , Rev< 1u, Arr64< Hash(L"Daniel Kr\xC3\xBCgler") >(), L"text_encoding::name() should never return null values" >  >() },
    { 2863u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 4u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 5u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 6u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 7u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 8u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" > , Rev< 9u, Arr64< Hash(L"Alisdair Meredith") >(), L"Review Annex D for C++26" >  >() },
    { 2864u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Arithmetic Conversion on Enumerations From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Arithmetic Conversion on Enumerations From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Arithmetic Conversion on Enumerations From C++26" >  >() },
    { 2865u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 4u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 5u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" > , Rev< 6u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Array Comparisons from C++26" >  >() },
    { 2866u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features from C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features from C++26" > , Rev< 4u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features from C++26" > , Rev< 5u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Volatile Features from C++26" >  >() },
    { 2867u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated strstreams From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated strstreams From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated strstreams From C++26" >  >() },
    { 2868u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Typedef From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Typedef From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Typedef From C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Typedef From C++26" >  >() },
    { 2869u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Access APIs From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Access APIs From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Access APIs From C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Access APIs from C++26" > , Rev< 4u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Access APIs from C++26" >  >() },
    { 2870u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" >  >() },
    { 2871u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Unicode Conversion Facets From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Unicode Conversion Facets From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Unicode Conversion Facets from C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Unicode Conversion Facets from C++26" >  >() },
    { 2872u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove From C++26" >  >() },
    { 2873u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Locale Category Facets For Unicode from C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Locale Category Facets For Unicode from C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Locale-Category Facets for Unicode from C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Locale-Category Facets for Unicode from C++26" >  >() },
    { 2874u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Mandating Annex D" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Mandating Annex D" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Mandating Annex D" >  >() },
    { 2875u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Undeprecate For C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Undeprecate `polymorphic_allocator::destroy` For C++26" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Undeprecate for C++26" > , Rev< 3u, Arr64< Hash(L"Alisdair Meredith") >(), L"Undeprecate for C++26" > , Rev< 4u, Arr64< Hash(L"Alisdair Meredith") >(), L"Undeprecate for C++26" >  >() },
    { 2876u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"D2876R0: Proposal to extend <code>std::simd</code> with more constructors and accessors" > , Rev< 1u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend <code>std::simd</code> with more constructors and accessors" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend <code>std::simd</code> with more constructors and accessors" >  >() },
    { 2877u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1610" >  >() },
    { 2878u, RevList< Rev< 0u, Arr64< Hash(L"Author582") >(), L"Reference checking - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1180") >(), L"Reference checking - HackMD" > , Rev< 2u, Arr64< Hash(L"Author1212") >(), L"Reference checking - HackMD" > , Rev< 3u, Arr64< Hash(L"Author637") >(), L"Reference checking - HackMD" > , Rev< 4u, Arr64< Hash(L"Author1016") >(), L"Reference checking - HackMD" > , Rev< 5u, Arr64< Hash(L"Author814") >(), L"Reference checking - HackMD" > , Rev< 6u, Arr64< Hash(L"Author2034") >(), L"Reference checking - HackMD" >  >() },
    { 2879u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"P2879R0 Proposal of std::dump" >  >() },
    { 2880u, RevList< Rev< 0u, Arr64< Hash(L"Ilya Burylov") >(), L"Algorithm-like vs std::simd based RNG API" >  >() },
    { 2881u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"Generator-based for loop" >  >() },
    { 2882u, RevList< Rev< 0u, Arr64< Hash(L"Author1033") >(), L"An Event Model for C++ Executors" >  >() },
    { 2883u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Should Be A Keyword In C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Should Be a Keyword in C++26" >  >() },
    { 2884u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Should Be A Keyword In C++26" >  >() },
    { 2885u, RevList< Rev< 0u, Arr64< Hash(L"Author2025") >(), L"Requirements for a Contracts syntax" > , Rev< 1u, Arr64< Hash(L"Author1673") >(), L"Requirements for a Contracts syntax" > , Rev< 2u, Arr64< Hash(L"Author60") >(), L"Requirements for a Contracts syntax" > , Rev< 3u, Arr64< Hash(L"Author1938") >(), L"Requirements for a Contracts syntax" >  >() },
    { 2886u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"p2886r0: concurrency ts2 editor's report" >  >() },
    { 2887u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"P2887r0.docx" >  >() },
    { 2888u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"P2888r0.docx" >  >() },
    { 2889u, RevList< Rev< 0u, Arr64< Hash(L"Lauri Vasama") >(), L"Distributed Arrays" >  >() },
    { 2890u, RevList< Rev< 0u, Arr64< Hash(L"Author1284") >(), L"Title995" > , Rev< 1u, Arr64< Hash(L"Author667") >(), L"Title540" > , Rev< 2u, Arr64< Hash(L"Author308") >(), L"Title260" >  >() },
    { 2891u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2023-01-11 through 2023-05-10" >  >() },
    { 2892u, RevList< Rev< 0u, Arr64< Hash(L"Joe Jevnik") >(), L"Types Should be Regular" >  >() },
    { 2893u, RevList< Rev< 0u, Arr64< Hash(L"Jody Hagins") >(), L"Variadic Friends" > , Rev< 1u, Arr64< Hash(L"Author1051") >(), L"Untitled" > , Rev< 2u, Arr64< Hash(L"Jody Hagins") >(), L"Variadic friends" > , Rev< 3u, Arr64< Hash(L"Jody Hagins") >(), L"Variadic friends" >  >() },
    { 2894u, RevList< Rev< 0u, Arr64< Hash(L"Author46") >(), L"Title44" > , Rev< 1u, Arr64< Hash(L"Author595") >(), L"Title486" > , Rev< 2u, Arr64< Hash(L"Author1310") >(), L"Title1015" >  >() },
    { 2895u, RevList< Rev< 0u, Arr64< Hash(L"Sebastian Theophil") >(), L"noncopyable and nonmovable utility classes" >  >() },
    { 2896u, RevList< Rev< 0u, Arr64< Hash(L"Author2099") >(), L"Outstanding design questions for the Contracts MVP" >  >() },
    { 2897u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 3u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 4u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 5u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 6u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer over-alignment" > , Rev< 7u, Arr64< Hash(L"Mark Hoemmen") >(), L"aligned_accessor: An mdspan accessor expressing pointer over-alignment" >  >() },
    { 2898u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Importable Headers are Not Universally Implementable" > , Rev< 1u, Arr64< Hash(L"Daniel Ruoso") >(), L"Build System Requirements for Importable Headers" >  >() },
    { 2899u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title644" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title696" >  >() },
    { 2900u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1415" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1674" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title390" > , Rev< 3u, Arr64< Hash(L"Joshua Berne") >(), L"Title1389" > , Rev< 4u, Arr64< Hash(L"Joshua Berne") >(), L"Title474" > , Rev< 5u, Arr64< Hash(L"Joshua Berne") >(), L"Title911" > , Rev< 6u, Arr64< Hash(L"Joshua Berne") >(), L"Title1147" > , Rev< 7u, Arr64< Hash(L"Joshua Berne") >(), L"Title1028" > , Rev< 8u, Arr64< Hash(L"Joshua Berne") >(), L"Title1253" > , Rev< 9u, Arr64< Hash(L"Joshua Berne") >(), L"Title1535" > , Rev< 10u, Arr64< Hash(L"Joshua Berne") >(), L"Title1302" > , Rev< 11u, Arr64< Hash(L"Joshua Berne") >(), L"Title1406" > , Rev< 12u, Arr64< Hash(L"Joshua Berne") >(), L"Title130" > , Rev< 13u, Arr64< Hash(L"Joshua Berne") >(), L"Title357" > , Rev< 14u, Arr64< Hash(L"Joshua Berne") >(), L"Title1549" >  >() },
    { 2901u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Extending Linear Algebra Support to Batched Operations" >  >() },
    { 2902u, RevList< Rev< 0u, Arr64< Hash(L"Author1653") >(), L"Title1285" > , Rev< 1u, Arr64< Hash(L"Author891") >(), L"Title720" >  >() },
    { 2904u, RevList< Rev< 0u, Arr64< Hash(L"Anoop Rana") >(), L"Title731" >  >() },
    { 2905u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings" >  >() },
    { 2906u, RevList< Rev< 0u, Arr64< Hash(L"Bernhard Manfred") >(), L"Structured bindings for <code>std::extents</code>" >  >() },
    { 2909u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Dude, wheres my char?" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix formatting of code units as integers<br>(Dude, wheres my char?)" >  >() },
    { 2910u, RevList< Rev< 0u, Arr64< Hash(L"Author532") >(), L"C++ Standard Library Issues to be moved in Varna 2023" >  >() },
    { 2911u, RevList< Rev< 0u, Arr64< Hash(L"Adam Lach") >(), L"Title661" > , Rev< 1u, Arr64< Hash(L"Author1303") >(), L"Title1007" >  >() },
    { 2912u, RevList< Rev< 0u, Arr64< Hash(L"Author1242") >(), L"p2912r0: Concurrent queues and sender/receivers" >  >() },
    { 2915u, RevList< Rev< 0u, Arr64< Hash(L"Author1660") >(), L"Proposed resolution to CWG1223" >  >() },
    { 2917u, RevList< Rev< 0u, Arr64< Hash(L"Author2096") >(), L"An in-line defaulted destructor should keep the copy- and move-operations" > , Rev< 1u, Arr64< Hash(L"Author836") >(), L"An in-line defaulted destructor should keep the copy- and move-operations" >  >() },
    { 2918u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings II" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings II" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Runtime format strings II" >  >() },
    { 2920u, RevList< Rev< 0u, Arr64< Hash(L"Author543") >(), L"2023_06__iso_cpp_varna__library_evolution_leadership_understanding_of_narrow_noexcept_policy_history__r4" >  >() },
    { 2921u, RevList< Rev< 0u, Arr64< Hash(L"Author1774") >(), L"p2921r0: Exploring std::expected based API alternatives for buffer_queue" >  >() },
    { 2922u, RevList< Rev< 0u, Arr64< Hash(L"Author505") >(), L"Core \"ready\" Issues" >  >() },
    { 2925u, RevList< Rev< 0u, Arr64< Hash(L"Author1447") >(), L"inplace_vector D0843R7" >  >() },
    { 2926u, RevList< Rev< 0u, Arr64< Hash(L"Author586") >(), L"Title477" >  >() },
    { 2927u, RevList< Rev< 0u, Arr64< Hash(L"Author36") >(), L"Inspecting exception_ptr" > , Rev< 1u, Arr64< Hash(L"Author1584") >(), L"Inspecting exception_ptr" > , Rev< 2u, Arr64< Hash(L"Author665") >(), L"Inspecting exception_ptr" >  >() },
    { 2929u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to add simd_invoke to std::simd" >  >() },
    { 2930u, RevList< Rev< 0u, Arr64< Hash(L"Mark de") >(), L"Formatter specializations for the standard library" >  >() },
    { 2931u, RevList< Rev< 0u, Arr64< Hash(L"Author460") >(), L"P2931 WG21 2023-06 Varna Record of Discussion.docx" >  >() },
    { 2932u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title920" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title674" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title544" > , Rev< 3u, Arr64< Hash(L"Joshua Berne") >(), L"Title589" >  >() },
    { 2933u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to allow simd overloads for standard C++ <bit> header" > , Rev< 1u, Arr64< Hash(L"Daniel Towner") >(), L"Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 3u, Arr64< Hash(L"Daniel Towner") >(), L"Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 4u, Arr64< Hash(L"Daniel Towner") >(), L"Extend <bit> header function with overloads for std::simd" >  >() },
    { 2935u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title788" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1475" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title1145" > , Rev< 3u, Arr64< Hash(L"Joshua Berne") >(), L"Title1081" > , Rev< 4u, Arr64< Hash(L"Joshua Berne") >(), L"Title1278" >  >() },
    { 2937u, RevList< Rev< 0u, Arr64< Hash(L"\xE2\x80\x83\xE2\x80\x83Ben Craig") >(), L"Freestanding: Remove <code>strtok</code>" >  >() },
    { 2940u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"switch for Pattern Matching" >  >() },
    { 2941u, RevList< Rev< 0u, Arr64< Hash(L"Mihail Naydenov") >(), L"Identifiers for Pattern Matching" >  >() },
    { 2944u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Comparisons for reference_wrapper" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Comparisons for reference_wrapper" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Comparisons for reference_wrapper" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"Comparisons for reference_wrapper" >  >() },
    { 2945u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Additional format specifiers for time_point" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Additional format specifiers for time_point" >  >() },
    { 2946u, RevList< Rev< 0u, Arr64< Hash(L"Author912") >(), L"A Flexible Solution to the Problems of noexcept" > , Rev< 1u, Arr64< Hash(L"Author1928") >(), L"A Flexible Solution to the Problems of noexcept" >  >() },
    { 2947u, RevList< Rev< 0u, Arr64< Hash(L"Andrei Zissu") >(), L"D2947R0" >  >() },
    { 2949u, RevList< Rev< 0u, Arr64< Hash(L"John Lakos") >(), L"Microsoft Word - PxxxxR0.docx" >  >() },
    { 2950u, RevList< Rev< 0u, Arr64< Hash(L"Christopher Di") >(), L"P2836R1 Slides" >  >() },
    { 2951u, RevList< Rev< 0u, Arr64< Hash(L"Author138") >(), L"Shadowing is good for safety - HackMD" > , Rev< 1u, Arr64< Hash(L"Author556") >(), L"Shadowing is good for safety - HackMD" > , Rev< 2u, Arr64< Hash(L"Author2152") >(), L"Shadowing is good for safety - HackMD" > , Rev< 3u, Arr64< Hash(L"Author1769") >(), L"Shadowing is good for safety - HackMD" >  >() },
    { 2952u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"auto& operator=(X&&) = default" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"auto& operator=(X&&) = default" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"auto& operator=(X&&) = default" >  >() },
    { 2953u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Forbid defaulting operator=(X&&) &&" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Forbid defaulting operator=(X&&) &&" >  >() },
    { 2954u, RevList< Rev< 0u, Arr64< Hash(L"Author1451") >(), L"Contracts and virtual functions for the Contracts MVP" >  >() },
    { 2955u, RevList< Rev< 0u, Arr64< Hash(L"Author998") >(), L"Safer Range Access - HackMD" > , Rev< 1u, Arr64< Hash(L"Author2108") >(), L"Safer Range Access - HackMD" >  >() },
    { 2956u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Allow <code>std::simd</code> overloads for saturating operations" >  >() },
    { 2957u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contracts and coroutines" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contracts and coroutines" > , Rev< 2u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contracts and coroutines" >  >() },
    { 2958u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"typeof and typeof_unqual for C++" >  >() },
    { 2959u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Relocation Within Containers" >  >() },
    { 2960u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"P2960R0 Concurrency TS2 Editors report for N4953" >  >() },
    { 2961u, RevList< Rev< 0u, Arr64< Hash(L"Author791") >(), L"Title641" > , Rev< 1u, Arr64< Hash(L"Author1859") >(), L"Title1441" > , Rev< 2u, Arr64< Hash(L"Author687") >(), L"Title552" >  >() },
    { 2962u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Communicating the Baseline Compile Command for C++ Modules support" >  >() },
    { 2963u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title250" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title475" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1664" > , Rev< 3u, Arr64< Hash(L"Corentin Jabot") >(), L"Title979" >  >() },
    { 2964u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Adding support for user-defined element types in std::simd" > , Rev< 1u, Arr64< Hash(L"Daniel Towner") >(), L"Adding support for user-defined element types (UDT) in <code>std::simd</code>" >  >() },
    { 2966u, RevList< Rev< 0u, Arr64< Hash(L"Patrice Roy") >(), L"Title960" > , Rev< 1u, Arr64< Hash(L"Patrice Roy") >(), L"Title940" >  >() },
    { 2967u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Relocation Has A Library Interface" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Relocation Has A Library Interface" >  >() },
    { 2968u, RevList< Rev< 0u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make std::ignore a first-class object" > , Rev< 1u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make std::ignore a first-class object" > , Rev< 2u, Arr64< Hash(L"Peter Sommerlad") >(), L"Make std::ignore a first-class object" >  >() },
    { 2969u, RevList< Rev< 0u, Arr64< Hash(L"Author1698") >(), L"Title1316" >  >() },
    { 2971u, RevList< Rev< 0u, Arr64< Hash(L"Author2165") >(), L"Implication for C++" > , Rev< 1u, Arr64< Hash(L"Author729") >(), L"Implication for C++" > , Rev< 2u, Arr64< Hash(L"Author1067") >(), L"Implication for C++" > , Rev< 3u, Arr64< Hash(L"Author215") >(), L"Implication for C++" >  >() },
    { 2972u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2023-09 Library Evolution Polls" >  >() },
    { 2973u, RevList< Rev< 0u, Arr64< Hash(L"Author2198") >(), L"Erroneous behaviour for missing return from assignment" >  >() },
    { 2976u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: algorithm, numeric, and random" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding Library: algorithm, numeric, and random" >  >() },
    { 2977u, RevList< Rev< 0u, Arr64< Hash(L"Author1972") >(), L"Module configuration files" > , Rev< 1u, Arr64< Hash(L"Author223") >(), L"Build database files" > , Rev< 2u, Arr64< Hash(L"Author620") >(), L"Build database files" >  >() },
    { 2978u, RevList< Rev< 0u, Arr64< Hash(L"HassanSajjad") >(), L"A New Approach For Compiling C++" >  >() },
    { 2979u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"The Need for Design Policies in WG21" >  >() },
    { 2980u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"A motivation, scope, and plan for a physical quantities andunits library" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"A motivation, scope, and plan for a quantities and unitslibrary" >  >() },
    { 2981u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"Improving our safety with a physical quantities and unitslibrary" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"Improving our safety with a physical quantities and unitslibrary" >  >() },
    { 2982u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::quantity` as a numeric type" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::quantity` as a numeric type" >  >() },
    { 2984u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Reconsider Redeclaring static constexpr Data Members" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Reconsider Redeclaring static constexpr Data Members" >  >() },
    { 2985u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"A type trait for detecting virtual base classes" >  >() },
    { 2986u, RevList< Rev< 0u, Arr64< Hash(L"Lauri Vasama") >(), L"Generic Function Pointer" >  >() },
    { 2988u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"std::optional<T&>" > , Rev< 1u, Arr64< Hash(L"Author2020") >(), L"Title1561" > , Rev< 2u, Arr64< Hash(L"Author839") >(), L"Title663" > , Rev< 3u, Arr64< Hash(L"Author958") >(), L"Title777" > , Rev< 4u, Arr64< Hash(L"Author715") >(), L"Title577" > , Rev< 5u, Arr64< Hash(L"Author319") >(), L"Title269" > , Rev< 6u, Arr64< Hash(L"Author1162") >(), L"Title922" > , Rev< 7u, Arr64< Hash(L"Author1505") >(), L"Title1169" > , Rev< 8u, Arr64< Hash(L"Author474") >(), L"Title397" > , Rev< 9u, Arr64< Hash(L"Author1092") >(), L"Title879" > , Rev< 10u, Arr64< Hash(L"Author261") >(), L"Title219" > , Rev< 11u, Arr64< Hash(L"Author35") >(), L"Title31" > , Rev< 12u, Arr64< Hash(L"Author778") >(), L"Title634" >  >() },
    { 2989u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title596" > , Rev< 1u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1323" > , Rev< 2u, Arr64< Hash(L"Corentin Jabot") >(), L"Title34" >  >() },
    { 2990u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"C++ Modules Roadmap" >  >() },
    { 2991u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Stop Forcing `std::move` to Pessimize" >  >() },
    { 2992u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Attribute [[discard]] and attributes on expressions" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Attribute [[discard(\"reason\")]]" >  >() },
    { 2993u, RevList< Rev< 0u, Arr64< Hash(L"Luke Valenty") >(), L"Constrained Numbers" >  >() },
    { 2994u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"On the Naming of Packs" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"On the Naming of Packs" >  >() },
    { 2995u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2023-05-24 through 2023-09-27" >  >() },
    { 2996u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 1u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 2u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 3u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 4u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 5u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 6u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 7u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 8u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 9u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 10u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" > , Rev< 11u, Arr64< Hash(L"Wyatt Childers") >(), L"Reflection for C++26" >  >() },
    { 2997u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Removing the common reference requirement from the indirectly invocable concepts" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Removing the common reference requirement from the indirectly invocable concepts" >  >() },
    { 2998u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Deducing function parameter types using alias templateCTAD" >  >() },
    { 2999u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Sender Algorithm Customization" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Sender Algorithm Customization" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Sender Algorithm Customization" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"Sender Algorithm Customization" >  >() },
    { 3001u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"std::hive and containers like it are not a good fit for thestandard library" >  >() },
    { 3002u, RevList< Rev< 0u, Arr64< Hash(L"Author1231") >(), L"Guidelines for Allocators in New Library Classes" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"Policies for Using Allocators in Library Classes" >  >() },
    { 3003u, RevList< Rev< 0u, Arr64< Hash(L"Author1987") >(), L"P3003R0 The design of a library of number concepts" >  >() },
    { 3004u, RevList< Rev< 0u, Arr64< Hash(L"John Lakos") >(), L"Principled Design for WG21" >  >() },
    { 3005u, RevList< Rev< 0u, Arr64< Hash(L"John Lakos") >(), L"Memorializing Principled-Design Policies for WG21" >  >() },
    { 3006u, RevList< Rev< 0u, Arr64< Hash(L"Author799") >(), L"Launder less" > , Rev< 1u, Arr64< Hash(L"Author1680") >(), L"Launder less" >  >() },
    { 3007u, RevList< Rev< 0u, Arr64< Hash(L"Author1274") >(), L"Title987" >  >() },
    { 3008u, RevList< Rev< 0u, Arr64< Hash(L"Author1781") >(), L"Atomic floating-point min/max semantics" > , Rev< 1u, Arr64< Hash(L"Author1191") >(), L"Atomic floating-point min/max semantics" > , Rev< 2u, Arr64< Hash(L"Author555") >(), L"Atomic floating-point min/max semantics" > , Rev< 3u, Arr64< Hash(L"Author233") >(), L"Atomic floating-point min/max" > , Rev< 4u, Arr64< Hash(L"Author851") >(), L"Atomic floating-point min/max" >  >() },
    { 3009u, RevList< Rev< 0u, Arr64< Hash(L"Joe Jevnik") >(), L"Injected class name in the base specifier list" >  >() },
    { 3010u, RevList< Rev< 0u, Arr64< Hash(L"Dan Katz") >(), L"P3010R0 - Using Reflection to Replace a Metalanguage for Generating JS Bindings" >  >() },
    { 3011u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Bentley") >(), L"Title1385" >  >() },
    { 3012u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Bentley") >(), L"Title1530" >  >() },
    { 3014u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"Customizing std::expected's exception" >  >() },
    { 3015u, RevList< Rev< 0u, Arr64< Hash(L"Howard E") >(), L"Rebuttal to Additional format specifiers for time_point" >  >() },
    { 3016u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists" > , Rev< 2u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 3u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 4u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 5u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 6u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve inconsistencies in begin/end for valarray and braced initializer lists" >  >() },
    { 3018u, RevList< Rev< 0u, Arr64< Hash(L"Andreas Weis") >(), L"Title945" >  >() },
    { 3019u, RevList< Rev< 0u, Arr64< Hash(L"Author2026") >(), L"Title1567" > , Rev< 1u, Arr64< Hash(L"Author347") >(), L"Title290" > , Rev< 2u, Arr64< Hash(L"Author366") >(), L"Title311" > , Rev< 3u, Arr64< Hash(L"Author743") >(), L"Title601" > , Rev< 4u, Arr64< Hash(L"Author420") >(), L"Title360" > , Rev< 5u, Arr64< Hash(L"Author691") >(), L"Title557" > , Rev< 6u, Arr64< Hash(L"Author115") >(), L"Title102" > , Rev< 7u, Arr64< Hash(L"Author991") >(), L"Title802" > , Rev< 8u, Arr64< Hash(L"Author1847") >(), L"Title1432" > , Rev< 9u, Arr64< Hash(L"Author2085") >(), L"Title1617" > , Rev< 10u, Arr64< Hash(L"Author259") >(), L"Title216" > , Rev< 11u, Arr64< Hash(L"Author1973") >(), L"Title1534" > , Rev< 12u, Arr64< Hash(L"Author6") >(), L"Title4" > , Rev< 13u, Arr64< Hash(L"Author1461") >(), L"Title1139" > , Rev< 14u, Arr64< Hash(L"Author1636") >(), L"Title1265" >  >() },
    { 3020u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2023-09 Library Evolution Poll Outcomes" >  >() },
    { 3021u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title690" >  >() },
    { 3022u, RevList< Rev< 0u, Arr64< Hash(L"Author495") >(), L"A Boring Thread Attributes Interface - HackMD" > , Rev< 1u, Arr64< Hash(L"Darius Neau") >(), L"A Boring Thread Attributes Interface" >  >() },
    { 3023u, RevList< Rev< 0u, Arr64< Hash(L"Author24") >(), L"C++ Should Be C++ - HackMD" > , Rev< 1u, Arr64< Hash(L"Author2112") >(), L"C++ Should Be C++ - HackMD" >  >() },
    { 3024u, RevList< Rev< 0u, Arr64< Hash(L"Author1009") >(), L"Title809" >  >() },
    { 3025u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"P3025R0.docx" >  >() },
    { 3026u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"P3026R0.docx" >  >() },
    { 3027u, RevList< Rev< 0u, Arr64< Hash(L"Author349") >(), L"UFCS is a breaking change, of the absolutely worst kind" >  >() },
    { 3028u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1075" >  >() },
    { 3029u, RevList< Rev< 0u, Arr64< Hash(L"Author189") >(), L"Better <code>mdspan</code>'s CTAD" > , Rev< 1u, Arr64< Hash(L"Author1208") >(), L"Better <code>mdspan</code>'s CTAD" >  >() },
    { 3031u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Resolve CWG2561, conversion function for lambda with explicit object parameter" >  >() },
    { 3032u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Less transient constexpr allocation" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Less transient constexpr allocation" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"Less transient constexpr allocation (and more constevalrelaxation)" >  >() },
    { 3033u, RevList< Rev< 0u, Arr64< Hash(L"Chuanqi Xu") >(), L"Should we import function bodies to get the better optimizations?" >  >() },
    { 3034u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"Module Declarations Shouldnt be Macros" > , Rev< 1u, Arr64< Hash(L"Michael Spencer") >(), L"Module Declarations Shouldnt be Macros" >  >() },
    { 3037u, RevList< Rev< 0u, Arr64< Hash(L"Paul Keir") >(), L"Title427" > , Rev< 1u, Arr64< Hash(L"Paul Keir") >(), L"Title739" > , Rev< 2u, Arr64< Hash(L"Paul Keir") >(), L"Title62" > , Rev< 3u, Arr64< Hash(L"Paul Keir") >(), L"Title202" > , Rev< 4u, Arr64< Hash(L"Paul Keir") >(), L"Title1594" > , Rev< 5u, Arr64< Hash(L"Paul Keir") >(), L"Title15" >  >() },
    { 3038u, RevList< Rev< 0u, Arr64< Hash(L"Author1820") >(), L"Title1407" >  >() },
    { 3039u, RevList< Rev< 0u, Arr64< Hash(L"David Stone") >(), L"Title1088" >  >() },
    { 3040u, RevList< Rev< 0u, Arr64< Hash(L"Author391") >(), L"C++ Standard Library Issues to be moved in Kona, Nov. 2023" >  >() },
    { 3041u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com") >(), L"Title1684" >  >() },
    { 3042u, RevList< Rev< 0u, Arr64< Hash(L"Author39") >(), L"Title35" >  >() },
    { 3043u, RevList< Rev< 0u, Arr64< Hash(L"Author2209") >(), L"Using variable template template without meta programming" >  >() },
    { 3044u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"P3044R0" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"P3044R1" >  >() },
    { 3045u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" > , Rev< 2u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" > , Rev< 3u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" > , Rev< 4u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" > , Rev< 5u, Arr64< Hash(L"Mateusz Pusz") >(), L"Quantities and units library" >  >() },
    { 3046u, RevList< Rev< 0u, Arr64< Hash(L"Author361") >(), L"Core \"ready\" Issues" >  >() },
    { 3047u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Namespace relops From C++26" >  >() },
    { 3049u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"P3049R0" > , Rev< 1u, Arr64< Hash(L"Michael Florian") >(), L"P3049R1" >  >() },
    { 3050u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Optimize linalg::conjugated for noncomplex value types" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by optimizing linalg::conjugated for noncomplex value types" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by optimizing linalg::conjugated for noncomplex value types" > , Rev< 3u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by optimizing linalg::conjugated for noncomplex value types" >  >() },
    { 3051u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Response Files" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Response Files" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Response Files" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: Structured Response Files" >  >() },
    { 3052u, RevList< Rev< 0u, Arr64< Hash(L"Author1748") >(), L"<code>view_interface::at</code>" > , Rev< 1u, Arr64< Hash(L"Author1472") >(), L"<code>view_interface::at</code>" >  >() },
    { 3053u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2023-12 Library Evolution Polls" >  >() },
    { 3054u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2023-12 Library Evolution Poll Outcomes" >  >() },
    { 3055u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Relax wording to permit relocation optimizations in the STL" > , Rev< 1u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Relax wording to permit relocation optimizations in the STL" >  >() },
    { 3056u, RevList< Rev< 0u, Arr64< Hash(L"Author1891") >(), L"what ostream exception - HackMD" >  >() },
    { 3057u, RevList< Rev< 0u, Arr64< Hash(L"Chuanqi Xu") >(), L"Two finer-grained compilation model for named modules" >  >() },
    { 3059u, RevList< Rev< 0u, Arr64< Hash(L"Author2159") >(), L"Making user-defined constructors of view iterators/sentinels private" > , Rev< 1u, Arr64< Hash(L"Author1716") >(), L"Making user-defined constructors of view iterators/sentinels private" >  >() },
    { 3060u, RevList< Rev< 0u, Arr64< Hash(L"Weile Wei") >(), L"std::ranges::upto(n) - HackMD" > , Rev< 1u, Arr64< Hash(L"Weile Wei") >(), L"Add std::views::upto(n) - HackMD" > , Rev< 2u, Arr64< Hash(L"Weile Wei") >(), L"Add std::views::indices(n) - HackMD" >  >() },
    { 3061u, RevList< Rev< 0u, Arr64< Hash(L"Author1682") >(), L"P3061 WG21 2023-11 Kona Record of Discussion.docx" >  >() },
    { 3062u, RevList< Rev< 0u, Arr64< Hash(L"Author1952") >(), L"Title1514" >  >() },
    { 3064u, RevList< Rev< 0u, Arr64< Hash(L"Author323") >(), L"Title273" > , Rev< 1u, Arr64< Hash(L"Author2045") >(), L"Title1584" > , Rev< 2u, Arr64< Hash(L"Author860") >(), L"Title685" >  >() },
    { 3066u, RevList< Rev< 0u, Arr64< Hash(L"Author1143") >(), L"Title910" >  >() },
    { 3067u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Named permutation functions for `std::simd`" >  >() },
    { 3068u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr-throw" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr-throw R2" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"Allowing exception throwing in constant-evaluation" > , Rev< 3u, Arr64< Hash(L"Hana Dusikova") >(), L"Allowing exception throwing in constant-evaluation" > , Rev< 4u, Arr64< Hash(L"Hana Dusikova") >(), L"Allowing exception throwing in constant-evaluation" > , Rev< 5u, Arr64< Hash(L"Hana Dusikova") >(), L"D3068R5: Allowing exception throwing in constant-evaluation" > , Rev< 6u, Arr64< Hash(L"Hana Dusikova") >(), L"Allowing exception throwing in constant-evaluation" >  >() },
    { 3070u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting enums" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting enums" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting enums" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting enums" >  >() },
    { 3071u, RevList< Rev< 0u, Arr64< Hash(L"Author1348") >(), L"Protection against modifications in contracts" > , Rev< 1u, Arr64< Hash(L"Author1550") >(), L"Protection against modifications in contracts" >  >() },
    { 3072u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Hassle-free thread attributes - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Hassle-free thread attributes - HackMD" > , Rev< 2u, Arr64< Hash(L"Zhihao Yuan") >(), L"Hassle-free thread attributes - HackMD" >  >() },
    { 3073u, RevList< Rev< 0u, Arr64< Hash(L"Author1286") >(), L"Title997" >  >() },
    { 3074u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr union lifetime" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"std::uninitialized<T>" > , Rev< 2u, Arr64< Hash(L"Barry Revzin") >(), L"std::uninitialized<T>" > , Rev< 3u, Arr64< Hash(L"Barry Revzin") >(), L"trivial union (was std::uninitialized<T>)" > , Rev< 4u, Arr64< Hash(L"Barry Revzin") >(), L"trivial unions (was std::uninitialized<T>)" > , Rev< 5u, Arr64< Hash(L"Barry Revzin") >(), L"trivial unions (was std::uninitialized<T>)" > , Rev< 6u, Arr64< Hash(L"Barry Revzin") >(), L"trivial unions (was std::uninitialized<T>)" > , Rev< 7u, Arr64< Hash(L"Barry Revzin") >(), L"trivial unions (was std::uninitialized<T>)" >  >() },
    { 3075u, RevList< Rev< 0u, Arr64< Hash(L"Shafik Yaghmour") >(), L"Title775" >  >() },
    { 3079u, RevList< Rev< 0u, Arr64< Hash(L"Author1564") >(), L"Should ignore and observe exist for constant evaluation of contracts?" >  >() },
    { 3081u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title187" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title1061" > , Rev< 2u, Arr64< Hash(L"Herb Sutter") >(), L"Title1317" >  >() },
    { 3084u, RevList< Rev< 0u, Arr64< Hash(L"Author180") >(), L"Title153" >  >() },
    { 3085u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"noexcept policy for SD-9 (throws nothing)" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"noexcept policy for SD-9 (throws nothing)" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"noexcept policy for SD-9 (throws nothing)" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"noexcept policy for SD-9 (throws nothing)" >  >() },
    { 3086u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title525" > , Rev< 1u, Arr64< Hash(L"Mingxin Wang") >(), L"Title177" > , Rev< 2u, Arr64< Hash(L"Mingxin Wang") >(), L"Title903" > , Rev< 3u, Arr64< Hash(L"Mingxin Wang") >(), L"Title1523" >  >() },
    { 3087u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"Make direct-initialization for enumeration types at least as permissive as direct-list-initialization" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"Make direct-initialization for enumeration types at least as permissive as direct-list-initialization" >  >() },
    { 3088u, RevList< Rev< 0u, Arr64< Hash(L"Author148") >(), L"Title127" > , Rev< 1u, Arr64< Hash(L"Author455") >(), L"Title384" >  >() },
    { 3090u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"std::execution Introduction" >  >() },
    { 3091u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"Better lookups for `map` and `unordered_map`" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"Better Lookups for `map` and `unordered_map`" > , Rev< 2u, Arr64< Hash(L"Pablo Halpern") >(), L"Better Lookups for `map` and `unordered_map`" > , Rev< 3u, Arr64< Hash(L"Pablo Halpern") >(), L"Better Lookups for `map` and `unordered_map`" >  >() },
    { 3092u, RevList< Rev< 0u, Arr64< Hash(L"Chuanqi Xu") >(), L"Modules ABI Requirement" >  >() },
    { 3093u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Attributes on expressions" >  >() },
    { 3094u, RevList< Rev< 0u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 1u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 2u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 3u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 4u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 5u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" > , Rev< 6u, Arr64< Hash(L"Mateusz Pusz") >(), L"`std::basic_fixed_string`" >  >() },
    { 3095u, RevList< Rev< 0u, Arr64< Hash(L"Saksham Sharma") >(), L"P3095R0" >  >() },
    { 3096u, RevList< Rev< 0u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 1u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 2u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 3u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 4u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 5u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 6u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 7u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" > , Rev< 8u, Arr64< Hash(L"Adam Lach") >(), L"Function Parameter Reflection in Reflection for C++26" >  >() },
    { 3097u, RevList< Rev< 0u, Arr64< Hash(L"Timur Doumler") >(), L"Title1468" >  >() },
    { 3098u, RevList< Rev< 0u, Arr64< Hash(L"Author709") >(), L"Contracts for C++: Postcondition captures" > , Rev< 1u, Arr64< Hash(L"Author553") >(), L"Contracts for C++: Postcondition captures" >  >() },
    { 3100u, RevList< Rev< 0u, Arr64< Hash(L"Author1381") >(), L"Title1073" > , Rev< 1u, Arr64< Hash(L"Author480") >(), L"Title399" >  >() },
    { 3101u, RevList< Rev< 0u, Arr64< Hash(L"Ran Regev") >(), L"Differentiating potentially throwing and non throwing violation handlers" >  >() },
    { 3102u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title86" >  >() },
    { 3103u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"More bitset operations" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"More bitset operations" > , Rev< 2u, Arr64< Hash(L"Jan Schultke") >(), L"More bitset operations" >  >() },
    { 3104u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"Bit permutations" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"Bit permutations" > , Rev< 2u, Arr64< Hash(L"Jan Schultke") >(), L"Bit permutations" > , Rev< 3u, Arr64< Hash(L"Jan Schultke") >(), L"Bit permutations" >  >() },
    { 3105u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"constexpr std::uncaught_exceptions()" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"constexpr std::uncaught_exceptions()" > , Rev< 2u, Arr64< Hash(L"Jan Schultke") >(), L"constexpr std::uncaught_exceptions()" >  >() },
    { 3106u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Clarifying rules for brace elision in aggregateinitialization" > , Rev< 1u, Arr64< Hash(L"James Touton") >(), L"Clarifying rules for brace elision in aggregateinitialization" >  >() },
    { 3107u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" > , Rev< 4u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" > , Rev< 5u, Arr64< Hash(L"Victor Zverovich") >(), L"Permit an efficient implementation of std::print" >  >() },
    { 3109u, RevList< Rev< 0u, Arr64< Hash(L"Author1289") >(), L"Title1000" >  >() },
    { 3110u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Array element initialization via pattern expansion" >  >() },
    { 3111u, RevList< Rev< 0u, Arr64< Hash(L"Author1492") >(), L"Atomic Reduction Operations" > , Rev< 1u, Arr64< Hash(L"Author1238") >(), L"Atomic Reduction Operations" > , Rev< 2u, Arr64< Hash(L"Author372") >(), L"Atomic Reduction Operations" > , Rev< 3u, Arr64< Hash(L"Author393") >(), L"Atomic Reduction Operations" > , Rev< 4u, Arr64< Hash(L"Author330") >(), L"Atomic Reduction Operations" > , Rev< 5u, Arr64< Hash(L"Author1977") >(), L"Atomic Reduction Operations" >  >() },
    { 3112u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Specify Constructor of `std::nullopt_t`" >  >() },
    { 3113u, RevList< Rev< 0u, Arr64< Hash(L"Author761") >(), L"2024-02-01 telecon" >  >() },
    { 3114u, RevList< Rev< 0u, Arr64< Hash(L"Author1599") >(), L"dwdwedwed" >  >() },
    { 3115u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title838" >  >() },
    { 3116u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Policy for `explicit`" >  >() },
    { 3117u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Extending Conditionally Borrowed" > , Rev< 1u, Arr64< Hash(L"Zach Laine") >(), L"Extending Conditionally Borrowed" >  >() },
    { 3119u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1037" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1408" >  >() },
    { 3122u, RevList< Rev< 0u, Arr64< Hash(L"Author421") >(), L"Using [[nodiscard]] should be Recommended Practice" > , Rev< 1u, Arr64< Hash(L"Author320") >(), L"Using [[nodiscard]] should be Recommended Practice" >  >() },
    { 3123u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-02 Library Evolution Polls" >  >() },
    { 3124u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-02 Library Evolution Poll Outcomes" >  >() },
    { 3125u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"D3125R0: Pointer Tagging" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr pointer tagging" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr pointer tagging" > , Rev< 3u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr pointer tagging" >  >() },
    { 3126u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3126r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3126r1" > , Rev< 2u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3126r2" > , Rev< 3u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3126r3" >  >() },
    { 3127u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3127r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3127r1" >  >() },
    { 3128u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3128r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3128r1" > , Rev< 2u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3128r2" > , Rev< 3u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3128r3" >  >() },
    { 3129u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3129r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3129r2" >  >() },
    { 3130u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3130r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3130r1" > , Rev< 2u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3130r2" > , Rev< 3u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3130r3" >  >() },
    { 3131u, RevList< Rev< 0u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3131r0" > , Rev< 1u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3131r1" > , Rev< 2u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3131r2" > , Rev< 3u, Arr64< Hash(L"Phil Ratzloff") >(), L"Test document for P3131r3" >  >() },
    { 3133u, RevList< Rev< 0u, Arr64< Hash(L"Chip Hogg") >(), L"Fast first-factor finding function" >  >() },
    { 3135u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Extensions" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Extensions" >  >() },
    { 3136u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"Retiring niebloids" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"Retiring niebloids" >  >() },
    { 3137u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"views::to_input" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"views::to_input" > , Rev< 2u, Arr64< Hash(L"Tim Song") >(), L"views::to_input" > , Rev< 3u, Arr64< Hash(L"Tim Song") >(), L"views::to_input" >  >() },
    { 3138u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"views::cache_last" > , Rev< 1u, Arr64< Hash(L"Tim Song") >(), L"views::cache_last" > , Rev< 2u, Arr64< Hash(L"Tim Song") >(), L"views::cache_last" > , Rev< 3u, Arr64< Hash(L"Tim Song") >(), L"views::cache_latest" > , Rev< 4u, Arr64< Hash(L"Tim Song") >(), L"views::cache_latest" > , Rev< 5u, Arr64< Hash(L"Tim Song") >(), L"views::cache_latest" >  >() },
    { 3139u, RevList< Rev< 0u, Arr64< Hash(L"Zhihao Yuan") >(), L"Pointer cast for unique_ptr - HackMD" > , Rev< 1u, Arr64< Hash(L"Zhihao Yuan") >(), L"Pointer cast for unique_ptr - HackMD" >  >() },
    { 3140u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"std::int_least128_t" >  >() },
    { 3142u, RevList< Rev< 0u, Arr64< Hash(L"Author1166") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    { 3143u, RevList< Rev< 0u, Arr64< Hash(L"Author1888") >(), L"An in-depth walk-through of the example in P3090R0" >  >() },
    { 3144u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Deprecate Delete of a Pointer to an Incomplete Type" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Deprecate Delete of a Pointer to an Incomplete Type" > , Rev< 2u, Arr64< Hash(L"Alisdair Meredith") >(), L"Deleting a Pointer to an Incomplete Type Should be Ill-formed" >  >() },
    { 3146u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Clarifying std::variant converting construction" > , Rev< 1u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Clarifying std::variant converting construction" > , Rev< 2u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Clarifying std::variant converting construction" >  >() },
    { 3147u, RevList< Rev< 0u, Arr64< Hash(L"Author1577") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1926") >(), L"A Direction for Vector" >  >() },
    { 3148u, RevList< Rev< 0u, Arr64< Hash(L"Author312") >(), L"Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash(L"Author1848") >(), L"Formatting of chrono Time Values" >  >() },
    { 3149u, RevList< Rev< 0u, Arr64< Hash(L"Ian Petersen") >(), L"Creating scopes for non-sequential concurrency" > , Rev< 1u, Arr64< Hash(L"Ian Petersen") >(), L"Creating scopes for non-sequential concurrency" > , Rev< 2u, Arr64< Hash(L"Ian Petersen") >(), L"Creating scopes for non-sequential concurrency" > , Rev< 3u, Arr64< Hash(L"Ian Petersen") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 4u, Arr64< Hash(L"Ian Petersen") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 5u, Arr64< Hash(L"Ian Petersen") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 6u, Arr64< Hash(L"2") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 7u, Arr64< Hash(L"2") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 8u, Arr64< Hash(L"2") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 9u, Arr64< Hash(L"2") >(), L"`async_scope` -- Creating scopes for non-sequentialconcurrency" >  >() },
    { 3150u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG14 2024/02/15 P3150R0.docx" >  >() },
    { 3151u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG19 2024/02/15 P3151R0.docx" >  >() },
    { 3152u, RevList< Rev< 0u, Arr64< Hash(L"Author781") >(), L"Title635" > , Rev< 1u, Arr64< Hash(L"Author1138") >(), L"Title905" >  >() },
    { 3153u, RevList< Rev< 0u, Arr64< Hash(L"Author1119") >(), L"An allocator-aware optional type" >  >() },
    { 3154u, RevList< Rev< 0u, Arr64< Hash(L"Elias Kosunen") >(), L"Deprecating signed character types in iostreams" > , Rev< 1u, Arr64< Hash(L"Elias Kosunen") >(), L"Deprecating signed character types in iostreams" >  >() },
    { 3155u, RevList< Rev< 0u, Arr64< Hash(L"Author1371") >(), L"Title1063" >  >() },
    { 3156u, RevList< Rev< 0u, Arr64< Hash(L"Author122") >(), L"<tt>empty_checkable_range</tt>" >  >() },
    { 3157u, RevList< Rev< 0u, Arr64< Hash(L"Author1924") >(), L"Title1488" > , Rev< 1u, Arr64< Hash(L"Andrei Alexandrescu") >(), L"Generative Extensions for Reflection" >  >() },
    { 3158u, RevList< Rev< 0u, Arr64< Hash(L"James Touton") >(), L"Headless Template Template Parameters" >  >() },
    { 3159u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"C++ Range Adaptors and Parallel Algorithms" >  >() },
    { 3160u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"An Allocator-aware `inplace_vector`" > , Rev< 1u, Arr64< Hash(L"Pablo Halpern") >(), L"An Allocator-Aware `inplace_vector`" > , Rev< 2u, Arr64< Hash(L"Pablo Halpern") >(), L"An Allocator-Aware `inplace_vector`" >  >() },
    { 3161u, RevList< Rev< 0u, Arr64< Hash(L"Tiago Freire") >(), L"P3161R0 - Unified integer overflow arithmetic" > , Rev< 1u, Arr64< Hash(L"Tiago Freire") >(), L"D3161R1 - Unified integer overflow arithmetic" > , Rev< 2u, Arr64< Hash(L"Tiago Freire") >(), L"R3161R2 - Unified integer overflow arithmetic" > , Rev< 3u, Arr64< Hash(L"Tiago Freire") >(), L"R3161R3 - Unified integer overflow arithmetic" > , Rev< 4u, Arr64< Hash(L"Tiago Freire") >(), L"R3161R4 - Unified integer overflow arithmetic" >  >() },
    { 3162u, RevList< Rev< 0u, Arr64< Hash(L"Author1397") >(), L"LEWG [[nodiscard]] policy - HackMD" >  >() },
    { 3164u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Improving diagnostics for sender expressions" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Improving diagnostics for sender expressions" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Improving diagnostics for sender expressions" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"Early Diagnostics for Sender Expressions" >  >() },
    { 3165u, RevList< Rev< 0u, Arr64< Hash(L"Author1640") >(), L"Contracts on virtual functions for the Contracts MVP" >  >() },
    { 3166u, RevList< Rev< 0u, Arr64< Hash(L"Lewis Baker") >(), L"Static Exception Specifications" >  >() },
    { 3167u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Attributes for the result name in a postcondition assertion" >  >() },
    { 3168u, RevList< Rev< 0u, Arr64< Hash(L"Author788") >(), L"Give std::optional range support - HackMD" > , Rev< 1u, Arr64< Hash(L"4") >(), L"Give std::optional range support - HackMD" > , Rev< 2u, Arr64< Hash(L"4") >(), L"Give std::optional range support - HackMD" >  >() },
    { 3169u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"Inherited contracts" >  >() },
    { 3170u, RevList< Rev< 0u, Arr64< Hash(L"Author566") >(), L"sinkable exception error message - HackMD" >  >() },
    { 3171u, RevList< Rev< 0u, Arr64< Hash(L"Peter Dimov") >(), L"Adding functionality to placeholder types" >  >() },
    { 3172u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Using `this` in constructor preconditions" >  >() },
    { 3173u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title1434" >  >() },
    { 3174u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21" >  >() },
    { 3175u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Reconsidering the std::execution::on algorithm" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Reconsidering the std::execution::on algorithm" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"Reconsidering the std::execution::on algorithm" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"Reconsidering the std::execution::on algorithm" >  >() },
    { 3176u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"The Oxford variadic comma" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"The Oxford variadic comma" >  >() },
    { 3177u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"const prvalues in the conditional operator" >  >() },
    { 3178u, RevList< Rev< 0u, Arr64< Hash(L"TPK Healy") >(), L"PxxxxR0: std::exception_typeid" > , Rev< 1u, Arr64< Hash(L"Thomas PK") >(), L"Retrieval of Exception Information" >  >() },
    { 3179u, RevList< Rev< 0u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 1u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 2u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 3u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 4u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 5u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 6u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" > , Rev< 7u, Arr64< Hash(L"Ruslan Arutyunyan") >(), L"C++ parallel range algorithms" >  >() },
    { 3180u, RevList< Rev< 0u, Arr64< Hash(L"Author1482") >(), L"C++ Standard Library Issues to be moved in Tokyo, Mar. 2024" >  >() },
    { 3181u, RevList< Rev< 0u, Arr64< Hash(L"Hans Boehm") >(), L"Atomic stores and object lifetimes" >  >() },
    { 3182u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Add `pop_value` methods to container adaptors" > , Rev< 1u, Arr64< Hash(L"Brian Bi") >(), L"Add container pop methods that return the popped value" >  >() },
    { 3183u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Contract testing support" > , Rev< 1u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Contract testing support" >  >() },
    { 3185u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Rodgers") >(), L"A proposed direction for C++ Standard Networking based on IETF TAPS" >  >() },
    { 3187u, RevList< Rev< 1u, Arr64< Hash(L"Kirk Shoop") >(), L"remove ensure_started and start_detached from P2300" >  >() },
    { 3188u, RevList< Rev< 0u, Arr64< Hash(L"Author121") >(), L"Proxy: A Pointer-Semantics-Based Polymorphism Library" >  >() },
    { 3189u, RevList< Rev< 0u, Arr64< Hash(L"Author1750") >(), L"P3189R0" >  >() },
    { 3190u, RevList< Rev< 0u, Arr64< Hash(L"Author2139") >(), L"talk_ewg" >  >() },
    { 3191u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Feedback on the scalability of contract violation handlers in P2900" >  >() },
    { 3192u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"PowerPoint-Prsentation" >  >() },
    { 3194u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"PowerPoint-Prsentation" >  >() },
    { 3196u, RevList< Rev< 0u, Arr64< Hash(L"Author971") >(), L"Core \"ready\" Issues" >  >() },
    { 3197u, RevList< Rev< 0u, Arr64< Hash(L"Author1102") >(), L"A response to the Tokyo EWG polls on the Contracts MVP" >  >() },
    { 3198u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"A takeaway from the Tokyo LEWG meeting on Contracts MVP" >  >() },
    { 3199u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Choices for ~make_optional~ and ~value_or()~" >  >() },
    { 3201u, RevList< Rev< 0u, Arr64< Hash(L"Author69") >(), L"LEWG [[nodiscard]] policy - HackMD" > , Rev< 1u, Arr64< Hash(L"Author1970") >(), L"LEWG [[nodiscard]] policy - HackMD" >  >() },
    { 3203u, RevList< Rev< 0u, Arr64< Hash(L"name") >(), L"Title640" >  >() },
    { 3204u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title332" >  >() },
    { 3205u, RevList< Rev< 0u, Arr64< Hash(L"Gaaper A~man") >(), L"Throwing from a function should be a contract violation." >  >() },
    { 3206u, RevList< Rev< 0u, Arr64< Hash(L"Maikel Nadolski") >(), L"A sender query for completion behaviour" >  >() },
    { 3207u, RevList< Rev< 0u, Arr64< Hash(L"Author1178") >(), L"More & like - HackMD" >  >() },
    { 3208u, RevList< Rev< 0u, Arr64< Hash(L"Sunghyun Min") >(), L"Title1671" >  >() },
    { 3210u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"P3210R0 A Postcondition *is* a Pattern Match" > , Rev< 1u, Arr64< Hash(L"Andrew Tomazos") >(), L"P3210R1 A Postcondition *is* a Pattern Match" > , Rev< 2u, Arr64< Hash(L"Andrew Tomazos") >(), L"P3210R2 A Postcondition *is* a Pattern Match" >  >() },
    { 3211u, RevList< Rev< 0u, Arr64< Hash(L"Author648") >(), L"<code>views::transform_join</code>" >  >() },
    { 3212u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"The contract of sort()" >  >() },
    { 3213u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-04 Library Evolution Polls" >  >() },
    { 3214u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-04 Library Evolution Poll Outcomes" >  >() },
    { 3215u, RevList< Rev< 0u, Arr64< Hash(L"Author1699") >(), L"Using variable template template without meta programming" >  >() },
    { 3216u, RevList< Rev< 0u, Arr64< Hash(L"Author144") >(), L"<code>views::slice</code>" >  >() },
    { 3217u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Adjoints to \"Enabling list-initialization for algorithms\": find_last" >  >() },
    { 3218u, RevList< Rev< 0u, Arr64< Hash(L"Author1062") >(), L"const references to constexpr variables - HackMD" >  >() },
    { 3220u, RevList< Rev< 0u, Arr64< Hash(L"Author1756") >(), L"<code>views::delimit</code>" >  >() },
    { 3221u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"Disable pointers to contracted functions" >  >() },
    { 3222u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by adding transposed special cases for P2642 layouts" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by adding transposed special cases for P2642 layouts" >  >() },
    { 3223u, RevList< Rev< 0u, Arr64< Hash(L"Author1496") >(), L"Making std::basic_istream::ignore less surprising" > , Rev< 1u, Arr64< Hash(L"Author1021") >(), L"Making std::istream::ignore less surprising" >  >() },
    { 3224u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"PowerPoint-Prsentation" >  >() },
    { 3225u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"PowerPoint-Prsentation" >  >() },
    { 3226u, RevList< Rev< 0u, Arr64< Hash(L"Author1818") >(), L"Title1405" >  >() },
    { 3227u, RevList< Rev< 0u, Arr64< Hash(L"Author1186") >(), L"Fixing the library API for contract violation handling" > , Rev< 1u, Arr64< Hash(L"Author1415") >(), L"Fixing the library API for contract violation handling" >  >() },
    { 3228u, RevList< Rev< 0u, Arr64< Hash(L"Author2080") >(), L"Title1612" > , Rev< 1u, Arr64< Hash(L"Author2094") >(), L"Title1624" >  >() },
    { 3229u, RevList< Rev< 0u, Arr64< Hash(L"Author1347") >(), L"Title1042" > , Rev< 1u, Arr64< Hash(L"Author1645") >(), L"Title1274" >  >() },
    { 3230u, RevList< Rev< 0u, Arr64< Hash(L"Author2018") >(), L"<code>views::(take|drop)_exactly</code>" > , Rev< 1u, Arr64< Hash(L"Author1874") >(), L"<code>views::unchecked_(take|drop)</code>" > , Rev< 2u, Arr64< Hash(L"Author365") >(), L"<code>views::unchecked_(take|drop)</code>" >  >() },
    { 3232u, RevList< Rev< 0u, Arr64< Hash(L"Author155") >(), L"User-defined erroneous behaviour" > , Rev< 1u, Arr64< Hash(L"Author1443") >(), L"User-defined erroneous behaviour" >  >() },
    { 3233u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Issues with P2786 (\"Trivial Relocatability For C++26\")" >  >() },
    { 3234u, RevList< Rev< 0u, Arr64< Hash(L"Glen Joseph") >(), L"Utility to check if a pointer is in a given range" > , Rev< 1u, Arr64< Hash(L"Glen Joseph") >(), L"Utility to check if a pointer is in a given range" >  >() },
    { 3235u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"std::print more types faster with less memory" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"std::print more types faster with less memory" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"std::print more types faster with less memory" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"std::print more types faster with less memory" >  >() },
    { 3236u, RevList< Rev< 0u, Arr64< Hash(L"Alan de") >(), L"Please reject P2786 and adopt P1144" > , Rev< 1u, Arr64< Hash(L"Alan de") >(), L"Please reject P2786 and adopt P1144" >  >() },
    { 3237u, RevList< Rev< 0u, Arr64< Hash(L"Andrei Zissu") >(), L"Matrix Representation of Contract Semantics" > , Rev< 1u, Arr64< Hash(L"Andrei Zissu") >(), L"P3237 - Matrix Representation of Contract Semantics" > , Rev< 2u, Arr64< Hash(L"Andrei Zissu") >(), L"P3237 - Matrix Representation of Contract Semantics" >  >() },
    { 3238u, RevList< Rev< 0u, Arr64< Hash(L"Author518") >(), L"An alternate proposal for naming contract semantics" >  >() },
    { 3239u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"A Relocating Swap" >  >() },
    { 3240u, RevList< Rev< 0u, Arr64< Hash(L"Author1902") >(), L"p3240" >  >() },
    { 3241u, RevList< Rev< 0u, Arr64< Hash(L"Author1200") >(), L"P3241" >  >() },
    { 3242u, RevList< Rev< 0u, Arr64< Hash(L"Nicolas Morales") >(), L"Copy and fill for mdspan" > , Rev< 1u, Arr64< Hash(L"Nicolas Morales") >(), L"Copy and fill for mdspan" >  >() },
    { 3243u, RevList< Rev< 0u, Arr64< Hash(L"Author1294") >(), L"Give <code>std::optional</code> Range Support" >  >() },
    { 3244u, RevList< Rev< 0u, Arr64< Hash(L"Author269") >(), L"<code>[[nodiscard]]</code> Policy" >  >() },
    { 3245u, RevList< Rev< 0u, Arr64< Hash(L"Xavier Bonaventura") >(), L"Allow `[[nodiscard]]` in type alias declarations" > , Rev< 1u, Arr64< Hash(L"Xavier Bonaventura") >(), L"Allow `[[nodiscard]]` in type alias declarations" > , Rev< 2u, Arr64< Hash(L"Xavier Bonaventura") >(), L"Allow `[[nodiscard]]` in type alias declarations" >  >() },
    { 3247u, RevList< Rev< 0u, Arr64< Hash(L"Author1872") >(), L"Deprecate the notion of trivial types" > , Rev< 1u, Arr64< Hash(L"Author188") >(), L"Deprecate the notion of trivial types" > , Rev< 2u, Arr64< Hash(L"Author1696") >(), L"Deprecate the notion of trivial types" >  >() },
    { 3248u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"Require [u]intptr_t" > , Rev< 1u, Arr64< Hash(L"Gonzalo Brito") >(), L"Require [u]intptr_t" > , Rev< 2u, Arr64< Hash(L"Gonzalo Brito") >(), L"Require [u]intptr_t" > , Rev< 3u, Arr64< Hash(L"Gonzalo Brito") >(), L"Require [u]intptr_t" >  >() },
    { 3249u, RevList< Rev< 0u, Arr64< Hash(L"Ran Regev") >(), L"P3249R0 - unified pattern matching and contracts syntax" >  >() },
    { 3250u, RevList< Rev< 0u, Arr64< Hash(L"Author642") >(), L"C++ contracts with regards to function pointers" >  >() },
    { 3251u, RevList< Rev< 0u, Arr64< Hash(L"Author1906") >(), L"C++ Contracts and Coroutines" >  >() },
    { 3253u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Distinguishing between member and free coroutines" >  >() },
    { 3254u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Reserve identifiers preceded by `@` for non-ignorableannotation tokens" >  >() },
    { 3255u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Expose whether atomic notifying operations are lockfree" > , Rev< 1u, Arr64< Hash(L"Brian Bi") >(), L"Expose whether atomic notifying operations are lockfree" >  >() },
    { 3257u, RevList< Rev< 0u, Arr64< Hash(L"Author1691") >(), L"Make the predicate of <TT>contract_assert</TT> more regular" >  >() },
    { 3258u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title402" >  >() },
    { 3259u, RevList< Rev< 0u, Arr64< Hash(L"Author2187") >(), L"const by default - HackMD" >  >() },
    { 3261u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title114" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title606" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title1580" >  >() },
    { 3263u, RevList< Rev< 0u, Arr64< Hash(L"Tiago Freire") >(), L"P3263R0 - Encoding annotated char" >  >() },
    { 3264u, RevList< Rev< 0u, Arr64< Hash(L"Author701") >(), L"Double-evaluation of preconditions" > , Rev< 1u, Arr64< Hash(L"Author953") >(), L"Double-evaluation of preconditions" >  >() },
    { 3265u, RevList< Rev< 0u, Arr64< Hash(L"Author1392") >(), L"Ship Contracts in a TS" > , Rev< 1u, Arr64< Hash(L"Author124") >(), L"Ship Contracts in a TS" > , Rev< 2u, Arr64< Hash(L"Author491") >(), L"Ship Contracts in a TS" > , Rev< 3u, Arr64< Hash(L"Author645") >(), L"Ship Contracts in a TS" >  >() },
    { 3266u, RevList< Rev< 0u, Arr64< Hash(L"Author817") >(), L"non referenceable types - HackMD" >  >() },
    { 3267u, RevList< Rev< 0u, Arr64< Hash(L"Author477") >(), L"C++ contracts implementation strategies" > , Rev< 1u, Arr64< Hash(L"Author964") >(), L"C++ contracts implementation strategies" >  >() },
    { 3268u, RevList< Rev< 0u, Arr64< Hash(L"Author1867") >(), L"C++ Contracts Constification Challenges Concerning Current Code" >  >() },
    { 3269u, RevList< Rev< 0u, Arr64< Hash(L"Author228") >(), L"Do Not Ship Contracts as a TS" >  >() },
    { 3270u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1036" >  >() },
    { 3271u, RevList< Rev< 0u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title60" > , Rev< 1u, Arr64< Hash(L"Lisa Lippincott") >(), L"Title1284" >  >() },
    { 3273u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Introspection of Closure Types" >  >() },
    { 3274u, RevList< Rev< 0u, Arr64< Hash(L"Author1692") >(), L"Title1313" >  >() },
    { 3275u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Replace simd operator[] with getter and setter functions or not [P3275R0]" >  >() },
    { 3276u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title59" >  >() },
    { 3278u, RevList< Rev< 0u, Arr64< Hash(L"Nina Ranns") >(), L"P3278R0" >  >() },
    { 3279u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"CWG2463: What \"trivially fooable\" should mean" >  >() },
    { 3281u, RevList< Rev< 0u, Arr64< Hash(L"Author545") >(), L"Contract Checks Should be Regular C++" >  >() },
    { 3282u, RevList< Rev< 0u, Arr64< Hash(L"Detlef Vollmann") >(), L"Static Storage for C++ Concurrent <tt>bounded_queue</tt>" >  >() },
    { 3283u, RevList< Rev< 0u, Arr64< Hash(L"Author1824") >(), L"P3283. Adding .first() and .last() to strings" >  >() },
    { 3284u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"`finally`, `write_env`, and `unstoppable` SenderAdaptors" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"`finally`, `write_env`, and `unstoppable` SenderAdaptors" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"`write_env` and `unstoppable` Sender Adaptors" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"`write_env` and `unstoppable` Sender Adaptors" >  >() },
    { 3285u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title108" >  >() },
    { 3286u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Module Metadata Distributed With Pre-Built Libraries" >  >() },
    { 3287u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Exploration of namespaces for std::simd [P3287R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Exploration of namespaces for std::simd [P3287R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Exploration of namespaces for std::simd [P3287R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Exploration of namespaces for std::simd [P3287R3]" >  >() },
    { 3288u, RevList< Rev< 0u, Arr64< Hash(L"TPK Healy") >(), L"std::elide" > , Rev< 1u, Arr64< Hash(L"Thomas PK") >(), L"std::elide" > , Rev< 2u, Arr64< Hash(L"Thomas PK") >(), L"std::elide" > , Rev< 3u, Arr64< Hash(L"Thomas PK") >(), L"std::elide" >  >() },
    { 3289u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"consteval blocks" > , Rev< 1u, Arr64< Hash(L"Wyatt Childers") >(), L"consteval blocks" >  >() },
    { 3290u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title192" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1334" > , Rev< 2u, Arr64< Hash(L"Joshua Berne") >(), L"Title1072" >  >() },
    { 3292u, RevList< Rev< 0u, Arr64< Hash(L"David Goldblatt") >(), L"P3292R0R0: Provenance and Concurrency" >  >() },
    { 3293u, RevList< Rev< 0u, Arr64< Hash(L"Peter Dimov") >(), L"Splicing a base class subobject" > , Rev< 1u, Arr64< Hash(L"Peter Dimov") >(), L"Splicing a base class subobject" >  >() },
    { 3294u, RevList< Rev< 0u, Arr64< Hash(L"Andrei Alexandrescu") >(), L"Code Injection with Token Sequences" > , Rev< 1u, Arr64< Hash(L"Andrei Alexandrescu") >(), L"Code Injection with Token Sequences" > , Rev< 2u, Arr64< Hash(L"Andrei Alexandrescu") >(), L"Code Injection with Token Sequences" >  >() },
    { 3295u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding constexpr containers and constexpr exception types" > , Rev< 1u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding constexpr containers and constexpr exception types" > , Rev< 2u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding constexpr containers and constexpr exception types" > , Rev< 3u, Arr64< Hash(L"Ben Craig") >(), L"Freestanding constexpr containers and constexpr exception types" >  >() },
    { 3296u, RevList< Rev< 0u, Arr64< Hash(L"Anthony Williams") >(), L"let_async_scope.html" > , Rev< 1u, Arr64< Hash(L"Anthony Williams") >(), L"let_async_scope.html" > , Rev< 2u, Arr64< Hash(L"Anthony Williams") >(), L"let_async_scope.html" > , Rev< 3u, Arr64< Hash(L"Anthony Williams") >(), L"let_async_scope.html" > , Rev< 4u, Arr64< Hash(L"Anthony Williams") >(), L"let_async_scope.html" >  >() },
    { 3297u, RevList< Rev< 0u, Arr64< Hash(L"Author1236") >(), L"C++26 Needs Contract Checking" > , Rev< 1u, Arr64< Hash(L"Author1481") >(), L"C++26 Needs Contract Checking" >  >() },
    { 3298u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Implicit user-defined conversion functions as operator.()" > , Rev< 1u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Implicit user-defined conversion functions as operator.()" >  >() },
    { 3299u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 1u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 3u, Arr64< Hash(L"Daniel Towner") >(), L"Proposal to extend std::simd with range constructors" >  >() },
    { 3300u, RevList< Rev< 0u, Arr64< Hash(L"Bryce Adelstein") >(), L"C++ Asynchronous Parallel Algorithms" >  >() },
    { 3301u, RevList< Rev< 0u, Arr64< Hash(L"Lauri Vasama") >(), L"inplace_stoppable_base" >  >() },
    { 3302u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"SG16: Unicode meeting summaries 2024-03-13 through 2024-05-08" >  >() },
    { 3303u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"Fixing Lazy Sender Algorithm Customization" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"Fixing Lazy Sender Algorithm Customization" >  >() },
    { 3304u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG14 2024/02/15 P3304R0.docx" >  >() },
    { 3305u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG19 2024/05/22 P3305R0.docx" >  >() },
    { 3306u, RevList< Rev< 0u, Arr64< Hash(L"Author2049") >(), L"Atomic Read-Modify-Write Improvements" >  >() },
    { 3307u, RevList< Rev< 0u, Arr64< Hash(L"Author1871") >(), L"Floating-Point Maximum/Minimum Function Objects" >  >() },
    { 3308u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"mdarray design questions and answers" >  >() },
    { 3309u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr atomic<T> and atomic_ref<T>" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr atomic<T> and atomic_ref<T>" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr atomic<T> and atomic_ref<T>" > , Rev< 3u, Arr64< Hash(L"Hana Dusikova") >(), L"atomic<T> and atomic_ref<T>" >  >() },
    { 3310u, RevList< Rev< 0u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving partial ordering issues introduced by P0522R0" > , Rev< 1u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving partial ordering issues introduced by P0522R0" > , Rev< 2u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving partial ordering issues introduced by P0522R0" > , Rev< 3u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving partial ordering issues introduced by P0522R0" > , Rev< 4u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving issues introduced by P0522R0" > , Rev< 5u, Arr64< Hash(L"Matheus Izvekov") >(), L"Solving issues introduced by relaxed template templateparameter matching" >  >() },
    { 3311u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"An opt-in approach for integration of traditional assert facilities in C++ contracts" >  >() },
    { 3312u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Overload Set Types" > , Rev< 1u, Arr64< Hash(L"Bengt Gustafsson") >(), L"Overload Set Types" >  >() },
    { 3313u, RevList< Rev< 0u, Arr64< Hash(L"Khalil Estell") >(), L"Impacts of noexept on ARM table based exception metadata" >  >() },
    { 3314u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-07 Library Evolution Polls" >  >() },
    { 3315u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-07 Library Evolution Poll Outcomes" >  >() },
    { 3316u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"A more predictable unchecked semantic" >  >() },
    { 3317u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"Compile time resolved contracts" >  >() },
    { 3318u, RevList< Rev< 0u, Arr64< Hash(L"Author529") >(), L"Throwing violation handlers, from an application programming perspective" >  >() },
    { 3319u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R3]" > , Rev< 4u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R4]" > , Rev< 5u, Arr64< Hash(L"Matthias Kretz") >(), L"Add an iota object for simd (and more) [P3319R5]" >  >() },
    { 3320u, RevList< Rev< 0u, Arr64< Hash(L"Author1444") >(), L"DeleteIfIncomplete" >  >() },
    { 3321u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title89" >  >() },
    { 3323u, RevList< Rev< 0u, Arr64< Hash(L"Gonzalo Brito") >(), L"cv-qualified types in atomic and atomic_ref" > , Rev< 1u, Arr64< Hash(L"Gonzalo Brito") >(), L"cv-qualified types in atomic and atomic_ref" >  >() },
    { 3324u, RevList< Rev< 0u, Arr64< Hash(L"Tom Honermann") >(), L"Attributes for namespace aliases, template parameters, and lambda captures" >  >() },
    { 3325u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" > , Rev< 2u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" > , Rev< 3u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" > , Rev< 4u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" > , Rev< 5u, Arr64< Hash(L"Eric Niebler") >(), L"A Utility for Creating Execution Environments" >  >() },
    { 3326u, RevList< Rev< 0u, Arr64< Hash(L"Author1684") >(), L"favor ease of use - HackMD" >  >() },
    { 3327u, RevList< Rev< 0u, Arr64< Hash(L"Author1073") >(), L"Title864" >  >() },
    { 3328u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title756" >  >() },
    { 3329u, RevList< Rev< 0u, Arr64< Hash(L"Audience") >(), L"P3329R0 Healing the Filter View" >  >() },
    { 3330u, RevList< Rev< 0u, Arr64< Hash(L"Author222") >(), L"User-defined Atomic Read-Modify-Write Operations" >  >() },
    { 3331u, RevList< Rev< 0u, Arr64< Hash(L"Author819") >(), L"Title652" > , Rev< 1u, Arr64< Hash(L"Author1358") >(), L"Title1054" >  >() },
    { 3332u, RevList< Rev< 0u, Arr64< Hash(L"Author1923") >(), L"Title1487" >  >() },
    { 3334u, RevList< Rev< 0u, Arr64< Hash(L"Coral Kashri") >(), L"Cross Static Variables" >  >() },
    { 3335u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Core Options" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Core Options" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Core Options" > , Rev< 3u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"Structured Core Options" > , Rev< 4u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: Structured Core Options" >  >() },
    { 3336u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title992" >  >() },
    { 3338u, RevList< Rev< 0u, Arr64< Hash(L"Author516") >(), L"Observe and ignore semantics in constant evaluation" >  >() },
    { 3339u, RevList< Rev< 0u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"C++ Ecosystem IS Open License" > , Rev< 1u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: C++ Ecosystem IS Open License" >  >() },
    { 3340u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"A Consistent Grammar for Sequences" >  >() },
    { 3341u, RevList< Rev< 0u, Arr64< Hash(L"Author1657") >(), L"C++ Standard Library Issues to be moved in St. Louis" >  >() },
    { 3342u, RevList< Rev< 0u, Arr64< Hash(L"Author1063") >(), L"C++ Ecosystem Working Draft" > , Rev< 1u, Arr64< Hash(L"Author812") >(), L"C++ Ecosystem Working Draft" > , Rev< 2u, Arr64< Hash(L"Ren\xC3\xA9 Ferdinand") >(), L"WITHDRAWN: Working Draft, Standard for C++ Ecosystem" >  >() },
    { 3343u, RevList< Rev< 0u, Arr64< Hash(L"Author1909") >(), L"Contracts: What we are doing here - P3343R0" >  >() },
    { 3344u, RevList< Rev< 0u, Arr64< Hash(L"Author1879") >(), L"Contracts on Virtual Functions - P3343R0 - Presentation on P3097R0" >  >() },
    { 3345u, RevList< Rev< 0u, Arr64< Hash(L"Author1721") >(), L"Core \"ready\" Issues" >  >() },
    { 3346u, RevList< Rev< 0u, Arr64< Hash(L"Nat Goodspeed") >(), L"threadlocalmeansfiber-specific" >  >() },
    { 3347u, RevList< Rev< 0u, Arr64< Hash(L"Paul E") >(), L"P3347R0 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers" > , Rev< 1u, Arr64< Hash(L"Paul E") >(), L"P3347R1 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers" >  >() },
    { 3348u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan Wakely") >(), L"C++26 should refer to C23 not C17" > , Rev< 1u, Arr64< Hash(L"Jonathan Wakely") >(), L"Title884" > , Rev< 2u, Arr64< Hash(L"Jonathan Wakely") >(), L"Title64" > , Rev< 3u, Arr64< Hash(L"Jonathan Wakely") >(), L"Title1127" >  >() },
    { 3349u, RevList< Rev< 0u, Arr64< Hash(L"Author277") >(), L"Converting contiguous iterators to pointers" > , Rev< 1u, Arr64< Hash(L"Author197") >(), L"Converting contiguous iterators to pointers" >  >() },
    { 3351u, RevList< Rev< 0u, Arr64< Hash(L"Yihe Li") >(), L"views::scan" > , Rev< 1u, Arr64< Hash(L"Yihe Li") >(), L"views::scan" > , Rev< 2u, Arr64< Hash(L"Yihe Li") >(), L"views::scan" >  >() },
    { 3352u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"P3352R0 Taming the Demons (C++ version) Undefined Behavior and Partial Program Correctness" >  >() },
    { 3354u, RevList< Rev< 0u, Arr64< Hash(L"Author1226") >(), L"Issues with P2786 (\"Trivial Relocatability For C++26\")" >  >() },
    { 3355u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix submdspan for C++26" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix submdspan for C++26" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix submdspan for C++26" >  >() },
    { 3356u, RevList< Rev< 0u, Arr64< Hash(L"Author1163") >(), L"non_invalidating_vector - HackMD" >  >() },
    { 3357u, RevList< Rev< 0u, Arr64< Hash(L"Thomas PK") >(), L"NRVO with factory and after_factory" >  >() },
    { 3358u, RevList< Rev< 0u, Arr64< Hash(L"Sy Brand") >(), L"SARIF for Structured Diagnostics" >  >() },
    { 3359u, RevList< Rev< 0u, Arr64< Hash(L"Author293") >(), L"P2667R0++" >  >() },
    { 3360u, RevList< Rev< 0u, Arr64< Hash(L"Author1151") >(), L"P2667R0++" >  >() },
    { 3361u, RevList< Rev< 0u, Arr64< Hash(L"Author1844") >(), L"contracts.dvi" > , Rev< 1u, Arr64< Hash(L"Author1020") >(), L"contracts.dvi" >  >() },
    { 3362u, RevList< Rev< 0u, Arr64< Hash(L"Author94") >(), L"Static analysis and 'safety' of Contracts, P2900 vs. P2680/P3285" >  >() },
    { 3364u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated u8path overloads From C++26" >  >() },
    { 3365u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove the Deprecated Class Template from C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove the Deprecated Class Template from C++26" >  >() },
    { 3366u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Initialization API from C++26" > , Rev< 1u, Arr64< Hash(L"Alisdair Meredith") >(), L"Remove Deprecated Atomic Initialization API from C++26" >  >() },
    { 3367u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr coroutines" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr coroutines" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr coroutines" > , Rev< 3u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr coroutines" > , Rev< 4u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr coroutines" >  >() },
    { 3369u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"constexpr for uninitialized_default_construct" >  >() },
    { 3370u, RevList< Rev< 0u, Arr64< Hash(L"Author1475") >(), L"Add new library headers from C23" > , Rev< 1u, Arr64< Hash(L"Author1018") >(), L"Add new library headers from C23" >  >() },
    { 3371u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by making the symmetric and Hermitian rank-k and rank-2k updates consistent with the BLAS" > , Rev< 1u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 2u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 3u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 4u, Arr64< Hash(L"Mark Hoemmen") >(), L"Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" >  >() },
    { 3372u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr containers" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr containers" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr containers" > , Rev< 3u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr containers" >  >() },
    { 3373u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Paper" > , Rev< 1u, Arr64< Hash(L"1") >(), L"Paper R1" >  >() },
    { 3374u, RevList< Rev< 0u, Arr64< Hash(L"Liang Jiaming") >(), L"Adding formatter for fpos<mbstate_t>" > , Rev< 1u, Arr64< Hash(L"Liang Jiaming") >(), L"Adding formatter for fpos<mbstate_t>" >  >() },
    { 3375u, RevList< Rev< 0u, Arr64< Hash(L"Guy Davidson") >(), L"Reproducible floating-point results" > , Rev< 1u, Arr64< Hash(L"Guy Davidson") >(), L"Reproducible floating-point results" > , Rev< 2u, Arr64< Hash(L"Guy Davidson") >(), L"Reproducible floating-point results" >  >() },
    { 3376u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Contract assertions versus static analysis and 'safety'" >  >() },
    { 3378u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr exception types" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr exception types" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr exception types" >  >() },
    { 3379u, RevList< Rev< 0u, Arr64< Hash(L"Author684") >(), L"Constrain std::expected equality operators" >  >() },
    { 3380u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Extending support for class types as non-type templateparameters" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Extending support for class types as non-type templateparameters" >  >() },
    { 3381u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"Syntax for Reflection" >  >() },
    { 3382u, RevList< Rev< 0u, Arr64< Hash(L"Author1866") >(), L"Coarse clocks and resolutions" >  >() },
    { 3383u, RevList< Rev< 0u, Arr64< Hash(L"Stephan Lachnit") >(), L"mdspan.at()" > , Rev< 1u, Arr64< Hash(L"Stephan Lachnit") >(), L"mdspan.at()" > , Rev< 2u, Arr64< Hash(L"Stephan Lachnit") >(), L"mdspan.at()" >  >() },
    { 3384u, RevList< Rev< 0u, Arr64< Hash(L"Jeremy Rifkin") >(), L"__COUNTER__" >  >() },
    { 3385u, RevList< Rev< 0u, Arr64< Hash(L"Aurelien Cassagnes") >(), L"Attributes reflection" > , Rev< 1u, Arr64< Hash(L"Aurelien Cassagnes") >(), L"Attributes reflection" > , Rev< 2u, Arr64< Hash(L"Aurelien Cassagnes") >(), L"Attributes reflection" > , Rev< 3u, Arr64< Hash(L"Aurelien Cassagnes") >(), L"Attributes reflection" > , Rev< 4u, Arr64< Hash(L"Aurelien Cassagnes") >(), L"Attributes reflection" >  >() },
    { 3386u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title708" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title1193" >  >() },
    { 3387u, RevList< Rev< 0u, Arr64< Hash(L"Author174") >(), L"Title148" >  >() },
    { 3388u, RevList< Rev< 0u, Arr64< Hash(L"Robert Leahy") >(), L"Paper" > , Rev< 1u, Arr64< Hash(L"1 Authors") >(), L"Paper R1" > , Rev< 2u, Arr64< Hash(L"1") >(), L"Paper R2" >  >() },
    { 3389u, RevList< Rev< 0u, Arr64< Hash(L"Author750") >(), L"Slides" >  >() },
    { 3390u, RevList< Rev< 0u, Arr64< Hash(L"Sean Baxter") >(), L"Safe C++" >  >() },
    { 3391u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr std::format" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"constexpr std::format" >  >() },
    { 3392u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Do not promise support for function syntax of operators" >  >() },
    { 3394u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"Annotations for Reflection" > , Rev< 1u, Arr64< Hash(L"Wyatt Childers") >(), L"Annotations for Reflection" > , Rev< 2u, Arr64< Hash(L"Wyatt Childers") >(), L"Annotations for Reflection" >  >() },
    { 3395u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Formatting of std::error_code" > , Rev< 1u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix encoding issues and add a formatter for std::error_code" > , Rev< 2u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix encoding issues and add a formatter for std::error_code" > , Rev< 3u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix encoding issues and add a formatter for std::error_code" >  >() },
    { 3396u, RevList< Rev< 0u, Arr64< Hash(L"Author2183") >(), L"Title1678" > , Rev< 1u, Arr64< Hash(L"Author1731") >(), L"Title1337" >  >() },
    { 3397u, RevList< Rev< 0u, Arr64< Hash(L"Author2007") >(), L"Clarify requirements on extended floating point types" >  >() },
    { 3398u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"User specified type decay" >  >() },
    { 3399u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"Title1090" >  >() },
    { 3400u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title628" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title210" >  >() },
    { 3401u, RevList< Rev< 0u, Arr64< Hash(L"Tian Liao") >(), L"Title69" >  >() },
    { 3402u, RevList< Rev< 0u, Arr64< Hash(L"Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re") >(), L"A Safety Profile Verifying Class Initialization" > , Rev< 1u, Arr64< Hash(L"Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re") >(), L"A Safety Profile Verifying Class Initialization" > , Rev< 2u, Arr64< Hash(L"Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re") >(), L"A Safety Profile Verifying Initialization" >  >() },
    { 3403u, RevList< Rev< 0u, Arr64< Hash(L"Andrew Tomazos") >(), L"The Undefined Behavior Question" >  >() },
    { 3404u, RevList< Rev< 0u, Arr64< Hash(L"Andre Kostur") >(), L"std::at : Range-checked accesses to arbitrary containers" >  >() },
    { 3405u, RevList< Rev< 0u, Arr64< Hash(L"Elias Kosunen") >(), L"Out-of-order designated initializers" >  >() },
    { 3406u, RevList< Rev< 0u, Arr64< Hash(L"Author861") >(), L"Title686" >  >() },
    { 3407u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Make idiomatic usage of `offsetof` well-defined" > , Rev< 1u, Arr64< Hash(L"Brian Bi") >(), L"Make idiomatic usage of `offsetof` well-defined" >  >() },
    { 3409u, RevList< Rev< 0u, Arr64< Hash(L"Author1795") >(), L"Enabling more efficient stop-token based cancellation of senders" > , Rev< 1u, Arr64< Hash(L"Author1452") >(), L"Enabling more efficient stop-token based cancellation of senders" >  >() },
    { 3411u, RevList< Rev< 0u, Arr64< Hash(L"Hui Xie") >(), L"`any_view`" > , Rev< 1u, Arr64< Hash(L"Hui Xie") >(), L"`any_view`" >  >() },
    { 3412u, RevList< Rev< 0u, Arr64< Hash(L"Bengt Gustafsson") >(), L"String interpolation" > , Rev< 1u, Arr64< Hash(L"Bengt Gustafsson") >(), L"String interpolation" >  >() },
    { 3413u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1596" >  >() },
    { 3415u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Range interface in std::optional breaks code!" >  >() },
    { 3416u, RevList< Rev< 0u, Arr64< Hash(L"Author561") >(), L"exception_ptr_cast: Add && = delete overload" >  >() },
    { 3417u, RevList< Rev< 0u, Arr64< Hash(L"Author2014") >(), L"Improve the handling of exceptions thrown from contract predicates" > , Rev< 1u, Arr64< Hash(L"Author354") >(), L"Improve the handling of exceptions thrown from contract predicates" >  >() },
    { 3419u, RevList< Rev< 0u, Arr64< Hash(L"Michael Levine") >(), L"Reflection Syntax Options Summary" >  >() },
    { 3420u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Reflection of Templates" > , Rev< 1u, Arr64< Hash(L"Barry Revzin") >(), L"Reflection of Templates" >  >() },
    { 3421u, RevList< Rev< 0u, Arr64< Hash(L"Ben Craig") >(), L"Consteval destructors" >  >() },
    { 3422u, RevList< Rev< 0u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow main function in named modules" > , Rev< 1u, Arr64< Hash(L"Chuanqi Xu") >(), L"Allow main function in named modules" >  >() },
    { 3423u, RevList< Rev< 0u, Arr64< Hash(L"Yihe Li") >(), L"Extending User-Generated Diagnostic Messages" > , Rev< 1u, Arr64< Hash(L"Yihe Li") >(), L"Extending User-Generated Diagnostic Messages" >  >() },
    { 3424u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Define Delete With Throwing Exception Specification" >  >() },
    { 3425u, RevList< Rev< 0u, Arr64< Hash(L"Author1985") >(), L"Reducing operation-state sizes for subobject child operations" > , Rev< 1u, Arr64< Hash(L"Author1494") >(), L"D3425R1: Reducing operation-state sizes for subobject child operations" >  >() },
    { 3427u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Synchronous Reclamation" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Synchronous Reclamation" >  >() },
    { 3428u, RevList< Rev< 0u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Batches" > , Rev< 1u, Arr64< Hash(L"Maged M") >(), L"Hazard Pointer Batches" >  >() },
    { 3429u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"<meta> should minimize standard librarydependencies" > , Rev< 1u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"<meta> should minimize standard librarydependencies" >  >() },
    { 3430u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R3]" >  >() },
    { 3431u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"Deprecate `const`-qualifier on begin/end of views" >  >() },
    { 3433u, RevList< Rev< 0u, Arr64< Hash(L"Dietmar Khl") >(), L"Allocator Support for Operation States" >  >() },
    { 3435u, RevList< Rev< 0u, Arr64< Hash(L"Jean-Baptiste VALLON") >(), L"Reflection and meta-programming" >  >() },
    { 3436u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title837" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title1319" >  >() },
    { 3437u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title770" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title246" >  >() },
    { 3438u, RevList< Rev< 0u, Arr64< Hash(L"Andreas Fertig") >(), L"Make integral overloads of std::to_string constexpr" >  >() },
    { 3439u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1611" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title109" >  >() },
    { 3440u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Add n_elements named constructor to std::simd" >  >() },
    { 3441u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Rename <code>simd_split</code> to <code>simd_chunk</code>" > , Rev< 1u, Arr64< Hash(L"Daniel Towner") >(), L"Rename <code>simd_split</code> to <code>simd_chunk</code>" > , Rev< 2u, Arr64< Hash(L"Daniel Towner") >(), L"Rename <code>simd_split</code> to <code>simd_chunk</code>" >  >() },
    { 3442u, RevList< Rev< 0u, Arr64< Hash(L"Author796") >(), L"Title643" > , Rev< 1u, Arr64< Hash(L"Author738") >(), L"Title595" >  >() },
    { 3443u, RevList< Rev< 0u, Arr64< Hash(L"Ran Regev") >(), L"P3443R0 - Reflection on SG21s 2024 Process" >  >() },
    { 3444u, RevList< Rev< 0u, Arr64< Hash(L"Sean Baxter") >(), L"Memory Safety without Lifetime Parameters" >  >() },
    { 3445u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Towner") >(), L"Add utilities for easier type/bit casting in std::simd" >  >() },
    { 3446u, RevList< Rev< 0u, Arr64< Hash(L"Author1497") >(), L"Title1164" >  >() },
    { 3447u, RevList< Rev< 0u, Arr64< Hash(L"Author335") >(), L"Title284" >  >() },
    { 3449u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr std::generator" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr generator" >  >() },
    { 3450u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Extend std::is_within_lifetime" >  >() },
    { 3451u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"A Suggestion for Reflection Access Control" >  >() },
    { 3454u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"Revising Atomic Max/Min Operations" >  >() },
    { 3455u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG14 2024/05/22 P3455R0.docx" >  >() },
    { 3456u, RevList< Rev< 0u, Arr64< Hash(L"Author1968") >(), L"system_scheduler on Win32, Darwin and Linux" >  >() },
    { 3457u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG19 2024/10/15 P3457R0.docx" >  >() },
    { 3460u, RevList< Rev< 0u, Arr64< Hash(L"Author658") >(), L"Implementors Notes" >  >() },
    { 3465u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title874" >  >() },
    { 3466u, RevList< Rev< 0u, Arr64< Hash(L"Herb Sutter") >(), L"Title1518" > , Rev< 1u, Arr64< Hash(L"Herb Sutter") >(), L"Title751" >  >() },
    { 3467u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"P3467R0R0: 2024-10 Library Evolution Polls" >  >() },
    { 3468u, RevList< Rev< 0u, Arr64< Hash(L"Inbal Levi") >(), L"2024-10 Library Evolution Poll Outcomes" >  >() },
    { 3469u, RevList< Rev< 0u, Arr64< Hash(L"Mike Spertus") >(), L"Virtual deducing" >  >() },
    { 3470u, RevList< Rev< 0u, Arr64< Hash(L"Daniel Ruoso") >(), L"Interface-Unit-Only Module Library Support" >  >() },
    { 3471u, RevList< Rev< 0u, Arr64< Hash(L"Konstantin Varlamov") >(), L"Standard library hardening" > , Rev< 1u, Arr64< Hash(L"Konstantin Varlamov") >(), L"Standard library hardening" > , Rev< 2u, Arr64< Hash(L"Konstantin Varlamov") >(), L"Standard library hardening" > , Rev< 3u, Arr64< Hash(L"Konstantin Varlamov") >(), L"Standard library hardening" > , Rev< 4u, Arr64< Hash(L"Konstantin Varlamov") >(), L"Standard library hardening" >  >() },
    { 3472u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Make fiber_context::can_resume() const" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Make fiber_context::can_resume() const" >  >() },
    { 3473u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"Splicing Should Respect Access Control" >  >() },
    { 3474u, RevList< Rev< 0u, Arr64< Hash(L"Jeremy Rifkin") >(), L"std::arguments" >  >() },
    { 3475u, RevList< Rev< 0u, Arr64< Hash(L"Author2038") >(), L"Defang and deprecate memory_order::consume" > , Rev< 1u, Arr64< Hash(L"Author1081") >(), L"Defang and deprecate memory_order::consume" > , Rev< 2u, Arr64< Hash(L"Author1000") >(), L"Defang and deprecate memory_order::consume" >  >() },
    { 3476u, RevList< Rev< 0u, Arr64< Hash(L"Author163") >(), L"p2688r2" >  >() },
    { 3477u, RevList< Rev< 0u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" > , Rev< 1u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" > , Rev< 2u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" > , Rev< 3u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" > , Rev< 4u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" > , Rev< 5u, Arr64< Hash(L"JF Bastien") >(), L"There are exactly 8 bits in a byte" >  >() },
    { 3478u, RevList< Rev< 0u, Arr64< Hash(L"Author1860") >(), L"p3478r0" >  >() },
    { 3479u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Cranmer") >(), L"Enabling C pragma support in C++" >  >() },
    { 3480u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd is a range [P3480R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd is a range [P3480R1]" > , Rev< 2u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd is a range [P3480R2]" > , Rev< 3u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd is a range [P3480R3]" > , Rev< 4u, Arr64< Hash(L"Matthias Kretz") >(), L"std::simd is a range [P3480R4]" >  >() },
    { 3481u, RevList< Rev< 0u, Arr64< Hash(L"Author1907") >(), L"Title1471" > , Rev< 1u, Arr64< Hash(L"Lucian Radu") >(), L"std::execution::bulk() issues" > , Rev< 2u, Arr64< Hash(L"Lucian Radu") >(), L"std::execution::bulk() issues" > , Rev< 3u, Arr64< Hash(L"Lucian Radu") >(), L"std::execution::bulk() issues" >  >() },
    { 3482u, RevList< Rev< 0u, Arr64< Hash(L"Thomas Rodgers") >(), L"Design for C++ networking based on IETF TAPS" > , Rev< 1u, Arr64< Hash(L"Thomas Rodgers") >(), L"Design for C++ networking based on IETF TAPS" >  >() },
    { 3483u, RevList< Rev< 0u, Arr64< Hash(L"Author1213") >(), L"Title951" > , Rev< 1u, Arr64< Hash(L"Author2231") >(), L"Title1707" >  >() },
    { 3484u, RevList< Rev< 0u, Arr64< Hash(L"Author1384") >(), L"Title1076" > , Rev< 1u, Arr64< Hash(L"Author865") >(), L"Title691" > , Rev< 2u, Arr64< Hash(L"Author870") >(), L"Title695" >  >() },
    { 3485u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Grouping using declarations with braces" >  >() },
    { 3487u, RevList< Rev< 0u, Arr64< Hash(L"Author1786") >(), L"Title1386" >  >() },
    { 3488u, RevList< Rev< 0u, Arr64< Hash(L"Matthias Kretz") >(), L"Floating-Point Excess Precision [P3488R0]" > , Rev< 1u, Arr64< Hash(L"Matthias Kretz") >(), L"Floating-Point Excess Precision [P3488R1]" >  >() },
    { 3489u, RevList< Rev< 0u, Arr64< Hash(L"Author1895") >(), L"Title1465" >  >() },
    { 3490u, RevList< Rev< 0u, Arr64< Hash(L"Alexey Kukanov") >(), L"Justification for ranges as the output of parallel rangealgorithms" >  >() },
    { 3491u, RevList< Rev< 0u, Arr64< Hash(L"Wyatt Childers") >(), L"define_static_{string,object,array}" > , Rev< 1u, Arr64< Hash(L"Wyatt Childers") >(), L"define_static_{string,object,array}" > , Rev< 2u, Arr64< Hash(L"Wyatt Childers") >(), L"define_static_{string,object,array}" >  >() },
    { 3492u, RevList< Rev< 0u, Arr64< Hash(L"Lauri Vasama") >(), L"Sized deallocation for placement new" > , Rev< 1u, Arr64< Hash(L"Lauri Vasama") >(), L"Sized deallocation for placement new" > , Rev< 2u, Arr64< Hash(L"Lauri Vasama") >(), L"Sized deallocation for placement new" >  >() },
    { 3493u, RevList< Rev< 0u, Arr64< Hash(L"Author1414") >(), L"Ruminations on reflection and access" >  >() },
    { 3495u, RevList< Rev< 0u, Arr64< Hash(L"Author1147") >(), L"Title912" >  >() },
    { 3496u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Immediate-Escalating Expressions" >  >() },
    { 3497u, RevList< Rev< 0u, Arr64< Hash(L"Jan Wilmans") >(), L"Title1394" >  >() },
    { 3498u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title335" >  >() },
    { 3499u, RevList< Rev< 0u, Arr64< Hash(L"Author1573") >(), L"Title1220" > , Rev< 1u, Arr64< Hash(L"Author338") >(), L"Title285" >  >() },
    { 3500u, RevList< Rev< 0u, Arr64< Hash(L"Author105") >(), L"P3500 v2" > , Rev< 1u, Arr64< Hash(L"Author241") >(), L"P3500 Are Contracts \"safe\"?" >  >() },
    { 3501u, RevList< Rev< 0u, Arr64< Hash(L"Author2031") >(), L"The ad-dressing of cats" >  >() },
    { 3502u, RevList< Rev< 0u, Arr64< Hash(L"Author488") >(), L"p3502r0" >  >() },
    { 3503u, RevList< Rev< 0u, Arr64< Hash(L"Nicolas Morales") >(), L"Make type-erased allocator use in promise and packaged_taskconsistent" > , Rev< 1u, Arr64< Hash(L"Nicolas Morales") >(), L"Make type-erased allocator use in `promise` and `packaged_task`consistent" > , Rev< 2u, Arr64< Hash(L"Nicolas Morales") >(), L"Make type-erased allocator use in `promise` and `packaged_task`consistent" >  >() },
    { 3504u, RevList< Rev< 0u, Arr64< Hash(L"Author172") >(), L"C++ Standard Library Issues to be moved in Wrocaw, Nov. 2024" >  >() },
    { 3505u, RevList< Rev< 0u, Arr64< Hash(L"Victor Zverovich") >(), L"Fix the default floating-point representation in std::format" >  >() },
    { 3506u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title583" >  >() },
    { 3508u, RevList< Rev< 0u, Arr64< Hash(L"Giuseppe D'Angelo") >(), L"Wording for \"constexpr for specialized memory algorithms\"" >  >() },
    { 3510u, RevList< Rev< 0u, Arr64< Hash(L"Nathan Myers") >(), L"Leftover properties of `this` in constructorpreconditions" > , Rev< 1u, Arr64< Hash(L"Nathan Myers") >(), L"Leftover properties of `this` in constructorpreconditions" > , Rev< 2u, Arr64< Hash(L"Nathan Myers") >(), L"Leftover properties of `this` in constructorpreconditions" >  >() },
    { 3514u, RevList< Rev< 0u, Arr64< Hash(L"Steve Downey") >(), L"\"RFC 3514: The Security Flag\" for C++" >  >() },
    { 3516u, RevList< Rev< 0u, Arr64< Hash(L"Louis Dionne") >(), L"Uninitialized algorithms for relocation" > , Rev< 1u, Arr64< Hash(L"Louis Dionne") >(), L"Uninitialized algorithms for relocation" >  >() },
    { 3517u, RevList< Rev< 0u, Arr64< Hash(L"Author1368") >(), L"P3517R0" >  >() },
    { 3518u, RevList< Rev< 0u, Arr64< Hash(L"Author1479") >(), L"constexpr type ordering (P2830R4)" >  >() },
    { 3519u, RevList< Rev< 0u, Arr64< Hash(L"Author1343") >(), L"P3425 Reducing operation-state sizes for sub-object child operations" >  >() },
    { 3520u, RevList< Rev< 0u, Arr64< Hash(L"Author1353") >(), L"Title1047" >  >() },
    { 3521u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"Pattern Matching: Customization Point for Open SumTypes" >  >() },
    { 3524u, RevList< Rev< 0u, Arr64< Hash(L"Author774") >(), L"Core \"ready\" Issues" >  >() },
    { 3525u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Explicit Implicit Template Regions" >  >() },
    { 3526u, RevList< Rev< 0u, Arr64< Hash(L"Author1096") >(), L"Container truncation" >  >() },
    { 3527u, RevList< Rev< 0u, Arr64< Hash(L"Michael Park") >(), L"Pattern Matching: *variant-like* and `std::expected`" > , Rev< 1u, Arr64< Hash(L"Michael Park") >(), L"Pattern Matching: *variant-like* and `std::expected`" >  >() },
    { 3530u, RevList< Rev< 0u, Arr64< Hash(L"Boleyn Su") >(), L"Intrinsic for reading uninitialized memory" >  >() },
    { 3533u, RevList< Rev< 0u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr virtual inheritance" > , Rev< 1u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr virtual inheritance" > , Rev< 2u, Arr64< Hash(L"Hana Dusikova") >(), L"constexpr virtual inheritance" >  >() },
    { 3534u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Avoid UB When Compiling Code That Violates Library Specification" >  >() },
    { 3537u, RevList< Rev< 0u, Arr64< Hash(L"Author2191") >(), L"Concurrent Queues API - P0260R13" > , Rev< 1u, Arr64< Hash(L"Author1237") >(), L"Concurrent Queues API - P0260R15 / P3537R1" >  >() },
    { 3539u, RevList< Rev< 1u, Arr64< Hash(L"PaweB Benetkiewicz") >(), L"Consistent Function Label Naming for Sections" >  >() },
    { 3540u, RevList< Rev< 0u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed offset parameter" > , Rev< 1u, Arr64< Hash(L"JeanHeyd Meneide") >(), L"#embed offset parameter" >  >() },
    { 3541u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Violation handlers vs `noexcept`" > , Rev< 1u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Violation handlers vs `noexcept`" >  >() },
    { 3542u, RevList< Rev< 0u, Arr64< Hash(L"Author1356") >(), L"Abolish the term \"converting constructor\"" >  >() },
    { 3543u, RevList< Rev< 0u, Arr64< Hash(L"Mungo Gill") >(), L"Response to Core Safety Profiles (P3081)" >  >() },
    { 3544u, RevList< Rev< 0u, Arr64< Hash(L"Author436") >(), L"<code>ranges::to<view></code>" >  >() },
    { 3546u, RevList< Rev< 0u, Arr64< Hash(L"Author1306") >(), L"Title1010" >  >() },
    { 3547u, RevList< Rev< 0u, Arr64< Hash(L"Dan Katz") >(), L"Modeling Access Control With Reflection" > , Rev< 1u, Arr64< Hash(L"Dan Katz") >(), L"Modeling Access Control With Reflection" >  >() },
    { 3548u, RevList< Rev< 0u, Arr64< Hash(L"Niall Douglas") >(), L"Title876" >  >() },
    { 3549u, RevList< Rev< 0u, Arr64< Hash(L"Bruno Cardoso") >(), L"Diverging Expressions" >  >() },
    { 3550u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Imports cannot &" >  >() },
    { 3552u, RevList< Rev< 0u, Arr64< Hash(L"Dietmar Khl") >(), L"Add a Coroutine Lazy Type" > , Rev< 1u, Arr64< Hash(L"Dietmar Khl") >(), L"Add a Coroutine Task Type" >  >() },
    { 3554u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Non-transient allocation with std::vector andstd::basic_string" >  >() },
    { 3555u, RevList< Rev< 0u, Arr64< Hash(L"Jonathan M\xC3\xBCller") >(), L"An infinite range concept" >  >() },
    { 3556u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"Input Files Are Source Files" >  >() },
    { 3557u, RevList< Rev< 0u, Arr64< Hash(L"Eric Niebler") >(), L"High-Quality Sender Diagnostics with ConstexprExceptions" > , Rev< 1u, Arr64< Hash(L"Eric Niebler") >(), L"High-Quality Sender Diagnostics with ConstexprExceptions" >  >() },
    { 3558u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1213" > , Rev< 1u, Arr64< Hash(L"Joshua Berne") >(), L"Title217" >  >() },
    { 3559u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"is_trivially_relocatable: One trait or two?" >  >() },
    { 3560u, RevList< Rev< 0u, Arr64< Hash(L"Peter Dimov") >(), L"Error Handling in Reflection" >  >() },
    { 3561u, RevList< Rev< 0u, Arr64< Hash(L"Author622") >(), L"coproducts.dvi" > , Rev< 1u, Arr64< Hash(L"Author2200") >(), L"coproducts.dvi" > , Rev< 2u, Arr64< Hash(L"Author1198") >(), L"coproducts.dvi" >  >() },
    { 3564u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Make the concurrent forward progress guarantee usable in bulk" >  >() },
    { 3565u, RevList< Rev< 0u, Arr64< Hash(L"Author2177") >(), L"Virtual floating-point values" >  >() },
    { 3566u, RevList< Rev< 0u, Arr64< Hash(L"Author256") >(), L"P3566R0 - You shall not pass `char*` - Google Docs" >  >() },
    { 3567u, RevList< Rev< 0u, Arr64< Hash(L"Hui Xie") >(), L"flat_meow Fixes" >  >() },
    { 3568u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"break label; and continue label;" > , Rev< 1u, Arr64< Hash(L"Jan Schultke") >(), L"break label; and continue label;" >  >() },
    { 3569u, RevList< Rev< 0u, Arr64< Hash(L"Shafik Yaghmour") >(), L"SplitOutDefineAggregate" >  >() },
    { 3570u, RevList< Rev< 0u, Arr64< Hash(L"Fabio Fracassi") >(), L"optional variants in sender/receiver" >  >() },
    { 3572u, RevList< Rev< 0u, Arr64< Hash(L"Bjarne Stroustrup") >(), L"Title1521" >  >() },
    { 3573u, RevList< Rev< 0u, Arr64< Hash(L"Michael Hava") >(), L"Title894" >  >() },
    { 3574u, RevList< Rev< 0u, Arr64< Hash(L"Author1724") >(), L"Title1329" >  >() },
    { 3575u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG14 2025/01/13 P3575R0.docx" >  >() },
    { 3576u, RevList< Rev< 0u, Arr64< Hash(L"Michael Wong") >(), L"SG19 2025/1/13 P3576R0.docx" >  >() },
    { 3577u, RevList< Rev< 0u, Arr64< Hash(L"Author1133") >(), L"Title902" >  >() },
    { 3578u, RevList< Rev< 0u, Arr64< Hash(L"Author1525") >(), L"The \"Grandma Safety\" Paper" >  >() },
    { 3579u, RevList< Rev< 0u, Arr64< Hash(L"Matheus Izvekov") >(), L"Fix matching of non-type template parameters when matchingtemplate template parameters" > , Rev< 1u, Arr64< Hash(L"Matheus Izvekov") >(), L"Fix matching of non-type template parameters when matchingtemplate template parameters" >  >() },
    { 3580u, RevList< Rev< 0u, Arr64< Hash(L"Author1857") >(), L"The Naming of Things" >  >() },
    { 3581u, RevList< Rev< 0u, Arr64< Hash(L"1") >(), L"Title1025" >  >() },
    { 3582u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Observed a contract violation? Skip subsequent assertions!" >  >() },
    { 3583u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"Contracts, Types & Functions" >  >() },
    { 3584u, RevList< Rev< 0u, Arr64< Hash(L"Mingxin Wang") >(), L"Title375" >  >() },
    { 3585u, RevList< Rev< 0u, Arr64< Hash(L"Pablo Halpern") >(), L"`allocator_traits::is_internally_relocatable`" >  >() },
    { 3586u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"The Plethora of Problems With Profiles" >  >() },
    { 3587u, RevList< Rev< 0u, Arr64< Hash(L"Lauri Vasama") >(), L"Reconsider reflection access for C++26" >  >() },
    { 3588u, RevList< Rev< 0u, Arr64< Hash(L"Brian Bi") >(), L"Allow static data members in local and unnamed classes" >  >() },
    { 3589u, RevList< Rev< 0u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title1579" > , Rev< 1u, Arr64< Hash(L"gdr@microsoft.com Audience") >(), L"Title181" >  >() },
    { 3590u, RevList< Rev< 0u, Arr64< Hash(L"Daveed Vandevoorde") >(), L"Constexpr Coroutine Burdens" >  >() },
    { 3591u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title339" >  >() },
    { 3592u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title1452" >  >() },
    { 3599u, RevList< Rev< 0u, Arr64< Hash(L"Joshua Berne") >(), L"Title900" >  >() },
    { 3603u, RevList< Rev< 0u, Arr64< Hash(L"Barry Revzin") >(), L"Consteval-only Values and Consteval Variables" >  >() },
    { 3605u, RevList< Rev< 0u, Arr64< Hash(L"Author1131") >(), L"Title901" >  >() },
    { 3606u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"On Overload Resolution, Exact Matches, and CleverImplementations" >  >() },
    { 3608u, RevList< Rev< 0u, Arr64< Hash(L"Author1980") >(), L"Contracts and profiles: what can we reasonably ship in C++26" >  >() },
    { 3611u, RevList< Rev< 0u, Arr64< Hash(L"Author2180") >(), L"Title1675" >  >() },
    { 3613u, RevList< Rev< 0u, Arr64< Hash(L"Tim Song") >(), L"On the beating of horses, and other matters" >  >() },
    { 3614u, RevList< Rev< 0u, Arr64< Hash(L"Author231") >(), L"Do not remove nor postpone access_context::unchecked" >  >() },
    { 3615u, RevList< Rev< 0u, Arr64< Hash(L"Author1722") >(), L"C++ Standard Library Issues to be moved in Hagenberg, Feb. 2025" >  >() },
    { 3616u, RevList< Rev< 0u, Arr64< Hash(L"Author1759") >(), L"Remove contracts on virtual functions for now" >  >() },
    { 3618u, RevList< Rev< 0u, Arr64< Hash(L"Michael Spencer") >(), L"Allow attaching main to the global module" >  >() },
    { 3619u, RevList< Rev< 0u, Arr64< Hash(L"Author2030") >(), L"Counter-examples for P2688R5" > , Rev< 1u, Arr64< Hash(L"Author246") >(), L"Counter-examples for P2688R5" >  >() },
    { 3620u, RevList< Rev< 0u, Arr64< Hash(L"Author1953") >(), L"Title1516" >  >() },
    { 3623u, RevList< Rev< 0u, Arr64< Hash(L"Arthur O'Dwyer") >(), L"Add noexcept to [iterator.range] (LWG 3537)" >  >() },
    { 3625u, RevList< Rev< 0u, Arr64< Hash(L"Michael Florian") >(), L"D3625 - either neither" >  >() },
    { 3626u, RevList< Rev< 0u, Arr64< Hash(L"Author388") >(), L"Title331" >  >() },
    { 3627u, RevList< Rev< 0u, Arr64< Hash(L"Author125") >(), L"RCE-defense security profiles for existing C++ code" >  >() },
    { 3628u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"break label; and continue label;, tl; dr" >  >() },
    { 3630u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"PowerPoint-Prsentation" >  >() },
    { 3632u, RevList< Rev< 0u, Arr64< Hash(L"Author1136") >(), L"Title904" > , Rev< 1u, Arr64< Hash(L"Author2218") >(), L"Title1698" >  >() },
    { 3633u, RevList< Rev< 0u, Arr64< Hash(L"Author1107") >(), L"A Byte is a Byte" >  >() },
    { 3635u, RevList< Rev< 0u, Arr64< Hash(L"Nevin ") >(), L"Title1469" >  >() },
    { 3636u, RevList< Rev< 0u, Arr64< Hash(L"Author268") >(), L"P3636 No, inplace_vector shouldn't have an Allocator" >  >() },
    { 3637u, RevList< Rev< 0u, Arr64< Hash(L"Author2114") >(), L"Inherit std::meta::exception from std::exception - Google Docs" >  >() },
    { 3638u, RevList< Rev< 0u, Arr64< Hash(L"Author541") >(), L"Core \"ready\" Issues" >  >() },
    { 3639u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"The _BitInt Debate" >  >() },
    { 3640u, RevList< Rev< 0u, Arr64< Hash(L"Jonas Persson") >(), L"Make contracts reliable by default" >  >() },
    { 3641u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"Rename std::observable to std::observable_checkpoint, and add a feature-test macro" >  >() },
    { 3642u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"Carry-less product: std::clmul" >  >() },
    { 3643u, RevList< Rev< 0u, Arr64< Hash(L"Jan Schultke") >(), L"std::to_signed and std::to_unsigned" >  >() },
    { 3650u, RevList< Rev< 0u, Arr64< Hash(L"Bjarne Stroustrup") >(), L"Title1307" >  >() },
    { 3651u, RevList< Rev< 0u, Arr64< Hash(L"Bjarne Stroustrup") >(), L"Title697" >  >() },
    { 3652u, RevList< Rev< 0u, Arr64< Hash(L"L\xC3\xA9n\xC3\xA1rd Szolnoki") >(), L"Constexpr floating-point <charconv> functions" > , Rev< 1u, Arr64< Hash(L"L\xC3\xA9n\xC3\xA1rd Szolnoki") >(), L"Constexpr floating-point <charconv> functions" >  >() },
    { 3654u, RevList< Rev< 0u, Arr64< Hash(L"Author2111") >(), L"Title1630" >  >() },
    { 3655u, RevList< Rev< 0u, Arr64< Hash(L"Author1418") >(), L"std::zstring_view" >  >() },
    { 3656u, RevList< Rev< 0u, Arr64< Hash(L"Author1078") >(), L"Title868" > , Rev< 1u, Arr64< Hash(L"Author1054") >(), L"Title845" >  >() },
    { 3657u, RevList< Rev< 0u, Arr64< Hash(L"Alisdair Meredith") >(), L"A Grammar for Whitespace Characters" >  >() },
    { 3658u, RevList< Rev< 0u, Arr64< Hash(L"Author376") >(), L"Title318" >  >() },
    { 3660u, RevList< Rev< 0u, Arr64< Hash(L"Jeremy Rifkin") >(), L"Improve reference_wrapper Ergonomics" >  >() },
    { 3661u, RevList< Rev< 0u, Arr64< Hash(L"\xC2\xA0\xC2\xA0") >(), L"Attributes, annotations, labels" >  >() },
    { 3662u, RevList< Rev< 0u, Arr64< Hash(L"Jeremy Rifkin") >(), L"Improve Increment and Decrement Operator Syntax" >  >() },
    { 3663u, RevList< Rev< 0u, Arr64< Hash(L"Mark Hoemmen") >(), L"Future-proof submdspan_mapping?" >  >() },
    { 3664u, RevList< Rev< 0u, Arr64< Hash(L"Zach Laine") >(), L"Make `variant_size` SFINAE friendly" >  >() },
    { 3665u, RevList< Rev< 0u, Arr64< Hash(L"Jeremy Rifkin") >(), L"Vertical Text Processing" >  >() },
    { 3667u, RevList< Rev< 0u, Arr64< Hash(L"Author317") >(), L"Title267" >  >() },
    { 3668u, RevList< Rev< 0u, Arr64< Hash(L"Matthew Taylor") >(), L"Defaulting Postfix Increment and Decrement Operations" >  >() },
    { 3669u, RevList< Rev< 0u, Arr64< Hash(L"Detlef Vollmann") >(), L"Non-Blocking Support for `std::execution`" >  >() },
    { 3670u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1489" >  >() },
    { 3671u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1358" >  >() },
    { 3672u, RevList< Rev< 0u, Arr64< Hash(L"Corentin Jabot") >(), L"Title1509" >  >() },
    { 4000u, RevList< Rev< 0u, Arr64< Hash(L"Author623") >(), L"TS or not TS" >  >() },
}
