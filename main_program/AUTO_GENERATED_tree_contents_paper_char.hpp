{
    {    1u, RevList< Rev< 0u, Arr64< Hash< "Author1903">() >(),  "Remove Deprecated Use of the register Keyword" > , Rev< 1u, Arr64< Hash< "Author2074">() >(),  "Remove Deprecated Use of the register Keyword" >  >() },
    {    2u, RevList< Rev< 0u, Arr64< Hash< "Author632">() >(),  "Remove Deprecated operator++(bool)" > , Rev< 1u, Arr64< Hash< "Author1450">() >(),  "Remove Deprecated operator++(bool)" >  >() },
    {    3u, RevList< Rev< 0u, Arr64< Hash< "Author1811">() >(),  "Removing Deprecated Exception Specifications from C++17" > , Rev< 1u, Arr64< Hash< "Author1513">() >(),  "Removing Deprecated Exception Specifications from C++17" > , Rev< 2u, Arr64< Hash< "Author217">() >(),  "Removing Deprecated Exception Specifications from C++17" > , Rev< 3u, Arr64< Hash< "Author112">() >(),  "Removing Deprecated Exception Specifications from C++17" > , Rev< 4u, Arr64< Hash< "Author496">() >(),  "Removing Deprecated Exception Specifications from C++17" > , Rev< 5u, Arr64< Hash< "Author1429">() >(),  "Removing Deprecated Exception Specifications from C++17" >  >() },
    {    4u, RevList< Rev< 0u, Arr64< Hash< "Author1167">() >(),  "Remove Deprecated iostreams aliases" > , Rev< 1u, Arr64< Hash< "Author1592">() >(),  "Remove Deprecated iostreams aliases" >  >() },
    {    5u, RevList< Rev< 0u, Arr64< Hash< "Author520">() >(),  "Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 1u, Arr64< Hash< "Author387">() >(),  "Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 2u, Arr64< Hash< "Author310">() >(),  "Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 3u, Arr64< Hash< "Author143">() >(),  "Adopt 'not_fn' from Library Fundamentals 2 for C++17" > , Rev< 4u, Arr64< Hash< "Author539">() >(),  "Adopt 'not_fn' from Library Fundamentals 2 for C++17" >  >() },
    {    6u, RevList< Rev< 0u, Arr64< Hash< "Author638">() >(),  "Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17" >  >() },
    {    7u, RevList< Rev< 0u, Arr64< Hash< "Author1149">() >(),  "Constant View: A proposal for a 'std::as_const' helper function template" > , Rev< 1u, Arr64< Hash< "Author935">() >(),  "Constant View: A proposal for a 'std::as_const' helper function template" >  >() },
    {    8u, RevList< Rev< 0u, Arr64< Hash< "Author2091">() >(),  "Title1622" >  >() },
    {    9u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0009r00 : Polymorphic Multidimensional Array View" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0009r1 : Polymorphic Multidimensional Array Reference" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "P0009r2 : Polymorphic Multidimensional Array Reference" > , Rev< 3u, Arr64< Hash< "H. Carter">() >(),  "P0009r3 : Polymorphic Multidimensional Array Reference" > , Rev< 4u, Arr64< Hash< "H. Carter">() >(),  "P0009r4 : Polymorphic Multidimensional Array Reference" > , Rev< 5u, Arr64< Hash< "H. Carter">() >(),  "P0009r5 : Polymorphic Multidimensional Array Reference" > , Rev< 8u, Arr64< Hash< "H. Carter">() >(),  "<code>mdspan</code>: A Non-Owning Multidimensional Array Reference" > , Rev< 9u, Arr64< Hash< "H. Carter">() >(),  "<code>mdspan</code>: A Non-Owning Multidimensional Array Reference" > , Rev< 10u, Arr64< Hash< "Christian Trott">() >(),  "MDSPAN" > , Rev< 11u, Arr64< Hash< "Christian Trott">() >(),  "MDSPAN" > , Rev< 12u, Arr64< Hash< "Christian Trott">() >(),  "MDSPAN" > , Rev< 13u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" > , Rev< 14u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" > , Rev< 15u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" > , Rev< 16u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" > , Rev< 17u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" > , Rev< 18u, Arr64< Hash< "1 [presumably">() >(),  "MDSPAN" >  >() },
    {   10u, RevList< Rev< 0u, Arr64< Hash< "Author975">() >(),  "concurrent random number" >  >() },
    {   11u, RevList< Rev< 0u, Arr64< Hash< "Jamie Allsop">() >(),  "papers/P0011R0.md - Grip" >  >() },
    {   12u, RevList< Rev< 0u, Arr64< Hash< "Author21">() >(),  "Make exception-specifications be part of the type system, version 4" > , Rev< 1u, Arr64< Hash< "Author655">() >(),  "Make exception-specifications be part of the type system, version 5" >  >() },
    {   13u, RevList< Rev< 0u, Arr64< Hash< "Jonathan Wakely">() >(),  "Logical Operator Type Traits" > , Rev< 1u, Arr64< Hash< "Jonathan Wakely">() >(),  "Logical Operator Type Traits (revision 1)" >  >() },
    {   14u, RevList< Rev< 0u, Arr64< Hash< "Nozomu KatM">() >(),  "Multiline Optiion" > , Rev< 1u, Arr64< Hash< "Author650">() >(),  "Proposal to add the multiline option to std::regex for its ECMAScript engine" >  >() },
    {   15u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "ISO/IEC JTC1/SC22/WG21p0015r0" >  >() },
    {   17u, RevList< Rev< 0u, Arr64< Hash< "Oleg Smolsky">() >(),  "Extension to aggregate initialization" > , Rev< 1u, Arr64< Hash< "Oleg Smolsky">() >(),  "Extension to aggregate initialization" >  >() },
    {   18u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0018r00 : Lambda Capture of *this by Value" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0018r1 : Lambda Capture of *this by Value" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "Capturing <tt>*this</tt>" > , Rev< 3u, Arr64< Hash< "H. Carter">() >(),  "Capturing <tt>*this</tt>" >  >() },
    {   19u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0019r00 : Atomic View" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0019R1 : Atomic View" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "P0019r2 : Atomic View" > , Rev< 3u, Arr64< Hash< "H. Carter">() >(),  "P0019r3 : Atomic View" > , Rev< 4u, Arr64< Hash< "H. Carter">() >(),  "P0019r4 : Atomic View" > , Rev< 5u, Arr64< Hash< "H. Carter">() >(),  "P0019r5 : Atomic View" >  >() },
    {   20u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0020r00 : Floating Point Atomic View" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0020r1 : Floating Point Atomic" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "P0020r2 : Floating Point Atomic" > , Rev< 3u, Arr64< Hash< "H. Carter">() >(),  "P0020r3 : Floating Point Atomic" > , Rev< 4u, Arr64< Hash< "H. Carter">() >(),  "P0020r4 : Floating Point Atomic" > , Rev< 5u, Arr64< Hash< "H. Carter">() >(),  "P0020r5 : Floating Point Atomic" >  >() },
    {   21u, RevList< Rev< 0u, Arr64< Hash< "Author1538">() >(),  "C++ Technical Specification" >  >() },
    {   22u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Proxy Iterators for the Ranges Extensions" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Proxy Iterators for the Ranges Extensions" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Proxy Iterators for the Ranges Extensions" >  >() },
    {   23u, RevList< Rev< 0u, Arr64< Hash< "Author1948">() >(),  "Title1510" >  >() },
    {   24u, RevList< Rev< 0u, Arr64< Hash< "Author134">() >(),  "Title115" > , Rev< 1u, Arr64< Hash< "Author2083">() >(),  "Title1616" > , Rev< 2u, Arr64< Hash< "Author2224">() >(),  "Title1701" >  >() },
    {   25u, RevList< Rev< 0u, Arr64< Hash< "Author1524">() >(),  "clamp: An algorithm to 'clamp' a value between a pair of boundary values (Draft) -" > , Rev< 1u, Arr64< Hash< "Author1572">() >(),  "clamp: An algorithm to 'clamp' a value between a pair of boundary values -" >  >() },
    {   26u, RevList< Rev< 0u, Arr64< Hash< "Matthew McAtamney-Greenwood">() >(),  "P0026 - MultiRange-Based For Loop Proposal - v1.1.0" >  >() },
    {   27u, RevList< Rev< 0u, Arr64< Hash< "Troy Korjuslommi">() >(),  "named_template" >  >() },
    {   28u, RevList< Rev< 0u, Arr64< Hash< "Author513">() >(),  "Title421" > , Rev< 1u, Arr64< Hash< "Author43">() >(),  "Title43" > , Rev< 2u, Arr64< Hash< "Author2046">() >(),  "Title1588" > , Rev< 3u, Arr64< Hash< "Author906">() >(),  "Using scoped attributes" > , Rev< 4u, Arr64< Hash< "Author2147">() >(),  "Using attribute namespaces without repetition" >  >() },
    {   29u, RevList< Rev< 0u, Arr64< Hash< "Author1943">() >(),  "A Unified Proposal for Composable Hashing" >  >() },
    {   30u, RevList< Rev< 0u, Arr64< Hash< "Benson Ma">() >(),  "Microsoft Word - P0030R0.docx" > , Rev< 1u, Arr64< Hash< "Benson Ma">() >(),  "Title128" >  >() },
    {   31u, RevList< Rev< 0u, Arr64< Hash< "Author1165">() >(),  "A Proposal to Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access" >  >() },
    {   32u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "Title1411" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "Title1548" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "P0032R2" > , Rev< 3u, Arr64< Hash< "Vicente J">() >(),  "Title1571" >  >() },
    {   33u, RevList< Rev< 0u, Arr64< Hash< "Jonathan Wakely">() >(),  "Re-enabling shared_from_this" > , Rev< 1u, Arr64< Hash< "Jonathan Wakely">() >(),  "Re-enabling shared_from_this" >  >() },
    {   34u, RevList< Rev< 0u, Arr64< Hash< "Author1128">() >(),  "P0034 Civil Time" >  >() },
    {   35u, RevList< Rev< 0u, Arr64< Hash< "Author12">() >(),  "Dynamic memory allocation for over-aligned data" > , Rev< 1u, Arr64< Hash< "Author656">() >(),  "Dynamic memory allocation for over-aligned data" > , Rev< 2u, Arr64< Hash< "Author98">() >(),  "Dynamic memory allocation for over-aligned data" > , Rev< 3u, Arr64< Hash< "Author1039">() >(),  "Dynamic memory allocation for over-aligned data" > , Rev< 4u, Arr64< Hash< "Author1665">() >(),  "Dynamic memory allocation for over-aligned data" >  >() },
    {   36u, RevList< Rev< 0u, Arr64< Hash< "Thibaut Le">() >(),  "Title119" >  >() },
    {   37u, RevList< Rev< 0u, Arr64< Hash< "Author1232">() >(),  "Fixed_Point_Library_Proposal" > , Rev< 1u, Arr64< Hash< "Author590">() >(),  "Title479" > , Rev< 2u, Arr64< Hash< "Author193">() >(),  "Title164" > , Rev< 3u, Arr64< Hash< "Author7">() >(),  "Title7" > , Rev< 4u, Arr64< Hash< "Author1694">() >(),  "Title1314" > , Rev< 5u, Arr64< Hash< "Author1207">() >(),  "Title948" > , Rev< 6u, Arr64< Hash< "Author1248">() >(),  "Title969" > , Rev< 7u, Arr64< Hash< "Author1925">() >(),  "p0037r7" >  >() },
    {   38u, RevList< Rev< 0u, Arr64< Hash< "Sean Middleditch">() >(),  "Untitled Document.md" >  >() },
    {   39u, RevList< Rev< 0u, Arr64< Hash< "Author2212">() >(),  "Untitled Document.md" >  >() },
    {   40u, RevList< Rev< 0u, Arr64< Hash< "Author324">() >(),  "Untitled Document.md" > , Rev< 1u, Arr64< Hash< "Author1315">() >(),  "P0040R1" > , Rev< 2u, Arr64< Hash< "Author1508">() >(),  "P0040R2" > , Rev< 3u, Arr64< Hash< "Author770">() >(),  "P0040R3" >  >() },
    {   41u, RevList< Rev< 0u, Arr64< Hash< "Author840">() >(),  "Untitled Document.md" >  >() },
    {   42u, RevList< Rev< 0u, Arr64< Hash< "Author898">() >(),  "recover_cast.pages" >  >() },
    {   43u, RevList< Rev< 0u, Arr64< Hash< "Author1595">() >(),  "function_container.pages" >  >() },
    {   44u, RevList< Rev< 0u, Arr64< Hash< "Author932">() >(),  "unwinding_state.pages" >  >() },
    {   45u, RevList< Rev< 0u, Arr64< Hash< "Author558">() >(),  "function.pages" > , Rev< 1u, Arr64< Hash< "Author1363">() >(),  "function.pages" >  >() },
    {   46u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Change is_transparent to metafunction" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Change is_transparent to metafunction (Revision 1)" >  >() },
    {   47u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title453" >  >() },
    {   48u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title646" >  >() },
    {   50u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "Title186" >  >() },
    {   51u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "Title1476" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "Title168" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "P0051R2" > , Rev< 3u, Arr64< Hash< "Vicente J">() >(),  "p0051r3" >  >() },
    {   52u, RevList< Rev< 0u, Arr64< Hash< "Author1398">() >(),  "Title1089" > , Rev< 1u, Arr64< Hash< "Author1040">() >(),  "Title835" > , Rev< 2u, Arr64< Hash< "Author1299">() >(),  "Title1002" > , Rev< 3u, Arr64< Hash< "Author820">() >(),  "C++ International Standard" > , Rev< 4u, Arr64< Hash< "Author757">() >(),  "Title614" > , Rev< 5u, Arr64< Hash< "Author887">() >(),  "Title716" > , Rev< 9u, Arr64< Hash< "Author559">() >(),  "Title452" > , Rev< 10u, Arr64< Hash< "Author260">() >(),  "Title218" >  >() },
    {   53u, RevList< Rev< 0u, Arr64< Hash< "Author2105">() >(),  "C++ Synchronized Buffered Ostream" > , Rev< 1u, Arr64< Hash< "Author579">() >(),  "C++ Synchronized Buffered Ostream" > , Rev< 2u, Arr64< Hash< "Author1561">() >(),  "C++ Synchronized Buffered Ostream" > , Rev< 3u, Arr64< Hash< "Author452">() >(),  "DRAFT C++ Synchronized Buffered Ostream" > , Rev< 4u, Arr64< Hash< "Author1729">() >(),  "DRAFT C++ Synchronized Buffered Ostream" > , Rev< 5u, Arr64< Hash< "Author1864">() >(),  "Title1445" >  >() },
    {   54u, RevList< Rev< 0u, Arr64< Hash< "Author826">() >(),  "D0054_ReportsFromTheField" >  >() },
    {   55u, RevList< Rev< 0u, Arr64< Hash< "Author473">() >(),  "D0055_BetterTogether" > , Rev< 1u, Arr64< Hash< "Author1253">() >(),  "D0055_BetterTogether" >  >() },
    {   56u, RevList< Rev< 0u, Arr64< Hash< "Author1519">() >(),  "D0056_SoftKeywords" >  >() },
    {   57u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" > , Rev< 1u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" > , Rev< 2u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" > , Rev< 3u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" > , Rev< 4u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" > , Rev< 5u, Arr64< Hash< "Gor Nishanov">() >(),  "C++ Technical Specification" >  >() },
    {   58u, RevList< Rev< 0u, Arr64< Hash< "Author1334">() >(),  "An Interface for Abstracting Execution | P0058R0" > , Rev< 1u, Arr64< Hash< "Author571">() >(),  "An Interface for Abstracting Execution | P0058R1" >  >() },
    {   59u, RevList< Rev< 0u, Arr64< Hash< "Author742">() >(),  "Title598" > , Rev< 1u, Arr64< Hash< "Author1094">() >(),  "Title881" > , Rev< 2u, Arr64< Hash< "Author1459">() >(),  "Title1138" > , Rev< 3u, Arr64< Hash< "Author1172">() >(),  "Title928" > , Rev< 4u, Arr64< Hash< "Author1485">() >(),  "Title1156" >  >() },
    {   60u, RevList< Rev< 0u, Arr64< Hash< "Author2">() >(),  "Function Object-Based Overloading of Operator Dot" >  >() },
    {   61u, RevList< Rev< 0u, Arr64< Hash< "Author1996">() >(),  "Feature-testing preprocessor predicates for C++17" > , Rev< 1u, Arr64< Hash< "Author1127">() >(),  "Feature-testing preprocessor predicates for C++17" >  >() },
    {   62u, RevList< Rev< 0u, Arr64< Hash< "Author1177">() >(),  "When should compilers optimize atomics?" > , Rev< 1u, Arr64< Hash< "Author1960">() >(),  "When should compilers optimize atomics?" >  >() },
    {   63u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "C++17 should refer to C11 instead of C99" > , Rev< 1u, Arr64< Hash< "Author139">() >(),  "C++17 should refer to C11 instead of C99" > , Rev< 2u, Arr64< Hash< "Author855">() >(),  "C++17 should refer to C11 instead of C99" > , Rev< 3u, Arr64< Hash< "Author1931">() >(),  "C++17 should refer to C11 instead of C99" >  >() },
    {   65u, RevList< Rev< 0u, Arr64< Hash< "Author664">() >(),  "movable-il.pages" >  >() },
    {   66u, RevList< Rev< 0u, Arr64< Hash< "Author1589">() >(),  "values.pages" >  >() },
    {   67u, RevList< Rev< 0u, Arr64< Hash< "Author1337">() >(),  "Elementary string conversions" > , Rev< 1u, Arr64< Hash< "Author1540">() >(),  "Elementary string conversions, revision 1" > , Rev< 2u, Arr64< Hash< "Author1035">() >(),  "Elementary string conversions, revision 2" > , Rev< 3u, Arr64< Hash< "Author2214">() >(),  "Elementary string conversions, revision 2" > , Rev< 4u, Arr64< Hash< "Author550">() >(),  "Elementary string conversions, revision 4" > , Rev< 5u, Arr64< Hash< "Author1406">() >(),  "Elementary string conversions, revision 5" >  >() },
    {   68u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1268" >  >() },
    {   69u, RevList< Rev< 0u, Arr64< Hash< "Ben Sander">() >(),  "Title1067" >  >() },
    {   70u, RevList< Rev< 0u, Arr64< Hash< "Author1808">() >(),  "D0070_ReturnBeforeAwait" >  >() },
    {   71u, RevList< Rev< 0u, Arr64< Hash< "Author40">() >(),  "D0071_KeywordsForCoroutines" >  >() },
    {   72u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Title1472" > , Rev< 1u, Arr64< Hash< "Torvald Riegel">() >(),  "Title1496" >  >() },
    {   73u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Title675" > , Rev< 1u, Arr64< Hash< "Torvald Riegel">() >(),  "Title973" > , Rev< 2u, Arr64< Hash< "Torvald Riegel">() >(),  "Title937" >  >() },
    {   74u, RevList< Rev< 0u, Arr64< Hash< "Author1378">() >(),  "Making std::owner_less more flexible" >  >() },
    {   75u, RevList< Rev< 0u, Arr64< Hash< "Author1915">() >(),  "Title1481" > , Rev< 1u, Arr64< Hash< "Author934">() >(),  "Template Library for Parallel For Loops" > , Rev< 2u, Arr64< Hash< "Arch D">() >(),  "Template Library for Parallel For Loops" >  >() },
    {   76u, RevList< Rev< 0u, Arr64< Hash< "Author280">() >(),  "Title231" > , Rev< 1u, Arr64< Hash< "Author42">() >(),  "Vector and Wavefront Policies" > , Rev< 2u, Arr64< Hash< "Author1863">() >(),  "Vector and Wavefront Policies" > , Rev< 3u, Arr64< Hash< "Author55">() >(),  "Vector and Wavefront Policies" > , Rev< 4u, Arr64< Hash< "Author783">() >(),  "Vector and Wavefront Policies" >  >() },
    {   77u, RevList< Rev< 0u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "is_callable, the missing INVOKE related trait" > , Rev< 1u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "is_callable, the missing INVOKE related trait" > , Rev< 2u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "is_callable, the missing INVOKE related trait" >  >() },
    {   78u, RevList< Rev< 0u, Arr64< Hash< "Author398">() >(),  "Title338" >  >() },
    {   79u, RevList< Rev< 0u, Arr64< Hash< "Author923">() >(),  "Title743" >  >() },
    {   80u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "Title991" >  >() },
    {   81u, RevList< Rev< 0u, Arr64< Hash< "Author1355">() >(),  "Title1051" >  >() },
    {   82u, RevList< Rev< 0u, Arr64< Hash< "Author1993">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1498">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash< "Author1849">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   83u, RevList< Rev< 0u, Arr64< Hash< "Author309">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author739">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash< "Author1664">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 3u, Arr64< Hash< "Author526">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   84u, RevList< Rev< 0u, Arr64< Hash< "Author1229">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1090">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash< "Author417">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {   85u, RevList< Rev< 0u, Arr64< Hash< "Author1069">() >(),  "Oo... adding a coherent character sequence to start octal-literals" >  >() },
    {   86u, RevList< Rev< 0u, Arr64< Hash< "Author627">() >(),  "Variant design review." >  >() },
    {   87u, RevList< Rev< 0u, Arr64< Hash< "Author1246">() >(),  "Variant: a type-safe union without undefined behavior (v2)." >  >() },
    {   88u, RevList< Rev< 0u, Arr64< Hash< "Author1601">() >(),  "Variant: a type-safe union that is rarely invalid (v5)." > , Rev< 1u, Arr64< Hash< "Axel Naumann">() >(),  "Variant: a type-safe union (v6)." > , Rev< 2u, Arr64< Hash< "Axel Naumann">() >(),  "Variant: a type-safe union for C++17 (v7)." > , Rev< 3u, Arr64< Hash< "Axel Naumann">() >(),  "Variant: a type-safe union for C++17 (v8)." >  >() },
    {   89u, RevList< Rev< 0u, Arr64< Hash< "John Lakos">() >(),  "On the Effective Use Of Memory Allocators" > , Rev< 1u, Arr64< Hash< "John Lakos">() >(),  "On Quantifying Memory-Allocation Strategies (Revision 2)" >  >() },
    {   90u, RevList< Rev< 0u, Arr64< Hash< "Stephan T">() >(),  "ISO/IEC JTC1/SC22/WG21p0090r0" >  >() },
    {   91u, RevList< Rev< 0u, Arr64< Hash< "Author1156">() >(),  "Template parameter deduction for constructors (Rev. 2)" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Template argument deduction for class templates (Rev. 4)" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Template argument deduction for class templates (Rev. 5)" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Template argument deduction for class templates (Rev. 6)" > , Rev< 4u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Template argument deduction for class templates (Rev. 7)" >  >() },
    {   92u, RevList< Rev< 0u, Arr64< Hash< "Author406">() >(),  "Polishing chrono" > , Rev< 1u, Arr64< Hash< "Author1901">() >(),  "Polishing chrono" >  >() },
    {   93u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title1251" >  >() },
    {   94u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title280" >  >() },
    {   95u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title1591" > , Rev< 1u, Arr64< Hash< "David Sankel">() >(),  "Title1447" > , Rev< 2u, Arr64< Hash< "David Sankel">() >(),  "language_variant" >  >() },
    {   96u, RevList< Rev< 0u, Arr64< Hash< "Author721">() >(),  "Feature-testing recommendations for C++" > , Rev< 1u, Arr64< Hash< "Author1121">() >(),  "Feature-testing recommendations for C++" > , Rev< 2u, Arr64< Hash< "Author712">() >(),  "Feature-testing recommendations for C++" > , Rev< 3u, Arr64< Hash< "Author838">() >(),  "Feature-testing recommendations for C++" > , Rev< 4u, Arr64< Hash< "Author926">() >(),  "Feature-testing recommendations for C++" > , Rev< 5u, Arr64< Hash< "Author2115">() >(),  "Feature-testing recommendations for C++" >  >() },
    {   97u, RevList< Rev< 0u, Arr64< Hash< "Author936">() >(),  "Use Cases for Thread-Local Storage" >  >() },
    {   98u, RevList< Rev< 0u, Arr64< Hash< "Author1388">() >(),  "Title1079" > , Rev< 1u, Arr64< Hash< "Author782">() >(),  "Title636" >  >() },
    {   99u, RevList< Rev< 0u, Arr64< Hash< "Oliver Kowalke">() >(),  "A low-level API for stackful context switching" > , Rev< 1u, Arr64< Hash< "Oliver Kowalke">() >(),  "A low-level API for stackful context switching" >  >() },
    {  100u, RevList< Rev< 0u, Arr64< Hash< "Author348">() >(),  "Comparison in C++" > , Rev< 1u, Arr64< Hash< "Author772">() >(),  "Comparison in C++" > , Rev< 2u, Arr64< Hash< "Lawrence Crowl">() >(),  "Comparison in C++" >  >() },
    {  101u, RevList< Rev< 0u, Arr64< Hash< "Author592">() >(),  "An Outline of a C++ Numbers Technical Specification" >  >() },
    {  102u, RevList< Rev< 0u, Arr64< Hash< "Author344">() >(),  "C++ Parametric Number Type Aliases" >  >() },
    {  103u, RevList< Rev< 0u, Arr64< Hash< "Author1838">() >(),  "Overflow-Detecting and Double-Wide Arithmetic Operations" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "Overflow-Detecting and Double-Wide Arithmetic Operations" >  >() },
    {  104u, RevList< Rev< 0u, Arr64< Hash< "Author1268">() >(),  "Multi-Word Integer Operations and Types" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "Multi-Word Integer Operations and Types" >  >() },
    {  105u, RevList< Rev< 0u, Arr64< Hash< "Author113">() >(),  "Rounding and Overflow in C++" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "Rounding and Overflow in C++" >  >() },
    {  106u, RevList< Rev< 0u, Arr64< Hash< "Author1101">() >(),  "C++ Binary Fixed-Point Arithmetic" >  >() },
    {  107u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title926" >  >() },
    {  108u, RevList< Rev< 0u, Arr64< Hash< "Author537">() >(),  "Skeleton Proposal for Thread-Local Storage (TLS)" > , Rev< 1u, Arr64< Hash< "Author1057">() >(),  "Skeleton Proposal for Thread-Local Storage (TLS)" >  >() },
    {  109u, RevList< Rev< 0u, Arr64< Hash< "Author634">() >(),  "Function Aliases + Extended Inheritance = Opaque Typedefs" >  >() },
    {  110u, RevList< Rev< 0u, Arr64< Hash< "Anthony">() >(),  "P0110: Implementing the strong guarantee for variant<> assignment" >  >() },
    {  112u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking Library (Revision 6)" > , Rev< 1u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking Library (Revision 7)" >  >() },
    {  113u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Executors and Asynchronous Operations, Revision 2" >  >() },
    {  114u, RevList< Rev< 0u, Arr64< Hash< "Author1464">() >(),  "Microsoft Word - Resumable Expressions rev 2.docm" >  >() },
    {  116u, RevList< Rev< 0u, Arr64< Hash< "Robert Kawulak">() >(),  "Boolean conversion for Standard Library types" >  >() },
    {  117u, RevList< Rev< 0u, Arr64< Hash< "Robert Kawulak">() >(),  "Generic to_string/to_wstring functions" >  >() },
    {  118u, RevList< Rev< 0u, Arr64< Hash< "Author702">() >(),  "Title564" >  >() },
    {  119u, RevList< Rev< 0u, Arr64< Hash< "Author157">() >(),  "Title133" > , Rev< 1u, Arr64< Hash< "Author253">() >(),  "Title212" > , Rev< 2u, Arr64< Hash< "Author1374">() >(),  "Title1066" >  >() },
    {  120u, RevList< Rev< 0u, Arr64< Hash< "Anthony">() >(),  "constexpr unions and common initial sequences" >  >() },
    {  121u, RevList< Rev< 0u, Arr64< Hash< "Author1604">() >(),  "C++ Technical Specification" >  >() },
    {  122u, RevList< Rev< 0u, Arr64< Hash< "Neil MacIntosh">() >(),  "Title256" > , Rev< 1u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0122R1" > , Rev< 2u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0122R2.docx" > , Rev< 3u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - D0122R3.docx" > , Rev< 4u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0122R3" > , Rev< 5u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0122R3" >  >() },
    {  123u, RevList< Rev< 0u, Arr64< Hash< "Neil MacIntosh">() >(),  "Title1230" > , Rev< 1u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0123R1" > , Rev< 2u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0123R2.docx" >  >() },
    {  124u, RevList< Rev< 0u, Arr64< Hash< "Author2069">() >(),  "Linux-Kernel Memory Model" > , Rev< 1u, Arr64< Hash< "Author1809">() >(),  "Linux-Kernel Memory Model" > , Rev< 2u, Arr64< Hash< "Author133">() >(),  "Linux-Kernel Memory Model" > , Rev< 3u, Arr64< Hash< "Author2012">() >(),  "Linux-Kernel Memory Model" > , Rev< 4u, Arr64< Hash< "Author986">() >(),  "Linux-Kernel Memory Model" > , Rev< 5u, Arr64< Hash< "Author1004">() >(),  "Linux-Kernel Memory Model" > , Rev< 6u, Arr64< Hash< "Author238">() >(),  "Linux-Kernel Memory Model" > , Rev< 7u, Arr64< Hash< "Author1633">() >(),  "Linux-Kernel Memory Model" > , Rev< 8u, Arr64< Hash< "Author1239">() >(),  "Linux-Kernel Memory Model" >  >() },
    {  125u, RevList< Rev< 0u, Arr64< Hash< "Author1878">() >(),  "Untitled Document.md" >  >() },
    {  126u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "Title288" > , Rev< 1u, Arr64< Hash< "Olivier Giroux">() >(),  "Untitled" > , Rev< 2u, Arr64< Hash< "Olivier Giroux">() >(),  "synchronic" >  >() },
    {  127u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Declaring non-type template arguments with auto" > , Rev< 1u, Arr64< Hash< "James Touton">() >(),  "Declaring non-type template arguments with auto" > , Rev< 2u, Arr64< Hash< "James Touton">() >(),  "Declaring non-type template parameters with auto" >  >() },
    {  128u, RevList< Rev< 0u, Arr64< Hash< "Author1261">() >(),  "constexpr_if" > , Rev< 1u, Arr64< Hash< "Author2203">() >(),  "constexpr if" >  >() },
    {  129u, RevList< Rev< 0u, Arr64< Hash< "Author368">() >(),  "We cannot (realistically) get rid of throwing moves" >  >() },
    {  130u, RevList< Rev< 0u, Arr64< Hash< "Author20">() >(),  "Title17" >  >() },
    {  131u, RevList< Rev< 0u, Arr64< Hash< "Author1025">() >(),  "Title819" >  >() },
    {  132u, RevList< Rev< 0u, Arr64< Hash< "Author1488">() >(),  "Non-throwing container operations" > , Rev< 1u, Arr64< Hash< "Author1331">() >(),  "Non-throwing container operations" >  >() },
    {  133u, RevList< Rev< 0u, Arr64< Hash< "Author1486">() >(),  "Putting noexcept(auto) on hold, again" >  >() },
    {  134u, RevList< Rev< 0u, Arr64< Hash< "Author1007">() >(),  "Introducing a name for brace-or-equal-initializers for non-static data members" >  >() },
    {  135u, RevList< Rev< 0u, Arr64< Hash< "Author663">() >(),  "Guaranteed copy elision through simplified value categories" > , Rev< 1u, Arr64< Hash< "Author1247">() >(),  "Wording for guaranteed copy elision through simplified value categories" >  >() },
    {  136u, RevList< Rev< 0u, Arr64< Hash< "Author698">() >(),  "N4429: Rewording inheriting constructors (core issue 1941 et al)" > , Rev< 1u, Arr64< Hash< "Author289">() >(),  "Rewording inheriting constructors (core issue 1941 et al)" >  >() },
    {  137u, RevList< Rev< 0u, Arr64< Hash< "Author154">() >(),  "Core Issue 1776: Replacement of class objects containing reference members" > , Rev< 1u, Arr64< Hash< "Author2227">() >(),  "Core Issue 1776: Replacement of class objects containing reference members (et al)" >  >() },
    {  138u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title717" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title126" > , Rev< 2u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title513" >  >() },
    {  141u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1353" >  >() },
    {  142u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1244" >  >() },
    {  143u, RevList< Rev< 0u, Arr64< Hash< "Author562">() >(),  "Title455" > , Rev< 1u, Arr64< Hash< "Author2011">() >(),  "Title1551" > , Rev< 2u, Arr64< Hash< "Author2037">() >(),  "Title1576" >  >() },
    {  144u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title481" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title258" > , Rev< 2u, Arr64< Hash< "Herb Sutter">() >(),  "Title533" >  >() },
    {  145u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1271" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title84" > , Rev< 2u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1052" > , Rev< 3u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1515" >  >() },
    {  146u, RevList< Rev< 0u, Arr64< Hash< "Author1742">() >(),  "Regular Void" > , Rev< 1u, Arr64< Hash< "Author1332">() >(),  "Regular Void (Revision 1)" >  >() },
    {  147u, RevList< Rev< 0u, Arr64< Hash< "Author988">() >(),  "The Use and Implementation of Contracts" >  >() },
    {  148u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Title669" >  >() },
    {  149u, RevList< Rev< 0u, Arr64< Hash< "Author481">() >(),  "Title400" > , Rev< 1u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1261" >  >() },
    {  151u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title81" >  >() },
    {  152u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "P0152R0 constexpr atomic<T>::is_always_lock_free" > , Rev< 1u, Arr64< Hash< "Olivier Giroux">() >(),  "P0152R1 constexpr atomic<T>::is_always_lock_free" >  >() },
    {  153u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "P0153R0 std::atomic_object_fence(mo, T&&...)" >  >() },
    {  154u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "P0154R0 constexpr std::hardware_{constructive,destructive}_interference_size" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "P0154R1 constexpr std::hardware_{constructive,destructive}_interference_size" >  >() },
    {  155u, RevList< Rev< 0u, Arr64< Hash< "Author752">() >(),  "P0155R0 | Task Block R5" >  >() },
    {  156u, RevList< Rev< 0u, Arr64< Hash< "Author1939">() >(),  "Variadic lock_guard (Rev. 2)" > , Rev< 1u, Arr64< Hash< "Author1291">() >(),  "Variadic lock_guard (Rev. 4)" > , Rev< 2u, Arr64< Hash< "Author2036">() >(),  "Variadic lock_guard (Rev. 5)" >  >() },
    {  157u, RevList< Rev< 0u, Arr64< Hash< "Author2128">() >(),  "Handling Disappointment in C++" >  >() },
    {  158u, RevList< Rev< 0u, Arr64< Hash< "Jamie Allsop">() >(),  "papers/P0158R0.md - Grip" >  >() },
    {  159u, RevList< Rev< 0u, Arr64< Hash< "Author797">() >(),  "Technical Specification for C++ Extensions for Concurrency, DTS" >  >() },
    {  160u, RevList< Rev< 0u, Arr64< Hash< "Author1777">() >(),  "Wording for removing defaults for unary folds" >  >() },
    {  161u, RevList< Rev< 0u, Arr64< Hash< "Author1986">() >(),  "Title1539" >  >() },
    {  162u, RevList< Rev< 0u, Arr64< Hash< "Author995">() >(),  "Microsoft Word - Response to P0055R0.docm" >  >() },
    {  163u, RevList< Rev< 0u, Arr64< Hash< "Author519">() >(),  "shared_ptr::weak_type" >  >() },
    {  164u, RevList< Rev< 0u, Arr64< Hash< "Author2119">() >(),  "Core Motions" >  >() },
    {  165u, RevList< Rev< 0u, Arr64< Hash< "Author1514">() >(),  "C++ Standard Library Issues to be moved in Kona" > , Rev< 1u, Arr64< Hash< "Author1946">() >(),  "C++ Standard Library Issues to be moved in Jacksonville" > , Rev< 2u, Arr64< Hash< "Author1385">() >(),  "C++ Standard Library Issues to be moved in Oulu" > , Rev< 3u, Arr64< Hash< "Author1153">() >(),  "C++ Standard Library Issues to be moved in Issaquah" > , Rev< 4u, Arr64< Hash< "Author1652">() >(),  "C++ Standard Library Issues to be moved in Kona" >  >() },
    {  166u, RevList< Rev< 0u, Arr64< Hash< "Author167">() >(),  "Title144" >  >() },
    {  167u, RevList< Rev< 0u, Arr64< Hash< "Author2054">() >(),  "Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author1328">() >(),  "Core \"ready\" Issues" > , Rev< 2u, Arr64< Hash< "Author1471">() >(),  "Core \"ready\" Issues" >  >() },
    {  169u, RevList< Rev< 0u, Arr64< Hash< "Author1661">() >(),  "regex with Unicode character types" >  >() },
    {  170u, RevList< Rev< 0u, Arr64< Hash< "Author1028">() >(),  "Title822" > , Rev< 1u, Arr64< Hash< "Author1739">() >(),  "Title1343" >  >() },
    {  171u, RevList< Rev< 0u, Arr64< Hash< "Author1362">() >(),  "P0171_ResponseToP0114" >  >() },
    {  172u, RevList< Rev< 0u, Arr64< Hash< "Author577">() >(),  "Abominable Function Types" >  >() },
    {  174u, RevList< Rev< 0u, Arr64< Hash< "Author777">() >(),  "Deprecating Vestigial Library Parts in C++17" > , Rev< 1u, Arr64< Hash< "Author1469">() >(),  "Deprecating Vestigial Library Parts in C++17" > , Rev< 2u, Arr64< Hash< "Author1754">() >(),  "Deprecating Vestigial Library Parts in C++17" >  >() },
    {  175u, RevList< Rev< 0u, Arr64< Hash< "Author88">() >(),  "Synopses for the C library" > , Rev< 1u, Arr64< Hash< "Author1596">() >(),  "Synopses for the C library" >  >() },
    {  177u, RevList< Rev< 0u, Arr64< Hash< "Author1168">() >(),  "Cleaning up allocator_traits" > , Rev< 1u, Arr64< Hash< "Author1619">() >(),  "Cleaning up allocator_traits" > , Rev< 2u, Arr64< Hash< "Author972">() >(),  "Cleaning up allocator_traits" >  >() },
    {  178u, RevList< Rev< 0u, Arr64< Hash< "Author1409">() >(),  "Allocators and swap" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Allocators and swap" >  >() },
    {  180u, RevList< Rev< 0u, Arr64< Hash< "Author1250">() >(),  "Reserve a New Library Namespace Future Standardization" > , Rev< 1u, Arr64< Hash< "Author1839">() >(),  "Reserve a New Library Namespace Future Standardization" > , Rev< 2u, Arr64< Hash< "Author937">() >(),  "Reserve a New Library Namespace for Future Standardization" >  >() },
    {  181u, RevList< Rev< 0u, Arr64< Hash< "Author1930">() >(),  "Ordered By Default" > , Rev< 1u, Arr64< Hash< "Author2197">() >(),  "Ordered By Default" >  >() },
    {  184u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Generalizing the Range-Based For Loop" >  >() },
    {  185u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Adding [nothrow-]swappable traits (Revision 2)" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Adding [nothrow-]swappable traits (Revision 3)" >  >() },
    {  186u, RevList< Rev< 0u, Arr64< Hash< "Author1852">() >(),  "Iterator Facade -" >  >() },
    {  187u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title470" > , Rev< 1u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1024" >  >() },
    {  188u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title611" > , Rev< 1u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1352" >  >() },
    {  189u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1333" > , Rev< 1u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1690" >  >() },
    {  190u, RevList< Rev< 0u, Arr64< Hash< "Author492">() >(),  "Title411" > , Rev< 1u, Arr64< Hash< "Author120">() >(),  "Title107" > , Rev< 2u, Arr64< Hash< "Author726">() >(),  "Title586" > , Rev< 3u, Arr64< Hash< "Author987">() >(),  "Title799" > , Rev< 4u, Arr64< Hash< "Author639">() >(),  "Title521" >  >() },
    {  191u, RevList< Rev< 1u, Arr64< Hash< "Daniel Markus">() >(),  "VirtualMemberFunctionPointerComparison" >  >() },
    {  192u, RevList< Rev< 0u, Arr64< Hash< "Author464">() >(),  "Title389" > , Rev< 1u, Arr64< Hash< "Boris Fomitchev">() >(),  "Title867" > , Rev< 4u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`short float` and fixed-size floating point types" >  >() },
    {  193u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "P0193R0 Where is Vectorization in C++" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "P0193R1 Where is Vectorization in C++" >  >() },
    {  194u, RevList< Rev< 0u, Arr64< Hash< "Matus">() >(),  "Title1448" > , Rev< 1u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "P0194R1 Static reflection" > , Rev< 2u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "P0194R2 Static reflection" > , Rev< 3u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection" > , Rev< 4u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection" > , Rev< 5u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection" >  >() },
    {  195u, RevList< Rev< 0u, Arr64< Hash< "Author2076">() >(),  "Title1608" > , Rev< 1u, Arr64< Hash< "Author283">() >(),  "Title233" > , Rev< 2u, Arr64< Hash< "Author999">() >(),  "Pack expansions in using-declarations" >  >() },
    {  196u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "P0196R0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "P0196R1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "P0196R2" > , Rev< 3u, Arr64< Hash< "Vicente J">() >(),  "p0196r3" > , Rev< 4u, Arr64< Hash< "Vicente J">() >(),  "p0196r4" > , Rev< 5u, Arr64< Hash< "Vicente J">() >(),  "p0196r5" >  >() },
    {  197u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "P0197R0" >  >() },
    {  198u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "P0198R0" >  >() },
    {  199u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "P0199R0" >  >() },
    {  200u, RevList< Rev< 0u, Arr64< Hash< "Author670">() >(),  "A Proposal to Add YCombinator to the Standard Library" >  >() },
    {  201u, RevList< Rev< 0u, Arr64< Hash< "Author1606">() >(),  "Title1245" > , Rev< 1u, Arr64< Hash< "Author569">() >(),  "Title461" > , Rev< 2u, Arr64< Hash< "Author196">() >(),  "Title166" > , Rev< 3u, Arr64< Hash< "Author1937">() >(),  "Title1498" > , Rev< 4u, Arr64< Hash< "Author1182">() >(),  "Title930" > , Rev< 5u, Arr64< Hash< "Author351">() >(),  "Title297" > , Rev< 6u, Arr64< Hash< "Jonathan B">() >(),  "<code>polymorphic_value</code>: A Polymorphic Value Type for C++" >  >() },
    {  202u, RevList< Rev< 0u, Arr64< Hash< "Author1137">() >(),  "A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers" > , Rev< 1u, Arr64< Hash< "Author2149">() >(),  "A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" > , Rev< 2u, Arr64< Hash< "Author137">() >(),  "A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" > , Rev< 3u, Arr64< Hash< "Author694">() >(),  "A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers" >  >() },
    {  203u, RevList< Rev< 0u, Arr64< Hash< "Author1174">() >(),  "Considerations for the design of expressive portable SIMD vectors" >  >() },
    {  205u, RevList< Rev< 0u, Arr64< Hash< "Moritz Klammler">() >(),  "P0205R0 Allow Seeding Random Number Engines with std::random_device" > , Rev< 1u, Arr64< Hash< "Moritz Klammler">() >(),  "P0205R1 Efficient Seeding of Random Number Engines" >  >() },
    {  206u, RevList< Rev< 0u, Arr64< Hash< "Author534">() >(),  "Discussion about std::thread and RAII" > , Rev< 1u, Arr64< Hash< "Author127">() >(),  "A joining thread" >  >() },
    {  207u, RevList< Rev< 0u, Arr64< Hash< "Author57">() >(),  "Ruminations on lambda captures" >  >() },
    {  208u, RevList< Rev< 0u, Arr64< Hash< "Author706">() >(),  "Copy-Swap Helper" > , Rev< 1u, Arr64< Hash< "Author806">() >(),  "Copy-Swap Transaction" >  >() },
    {  209u, RevList< Rev< 0u, Arr64< Hash< "Author2061">() >(),  "P0209r0 | make_from_tuple: apply for construction" > , Rev< 1u, Arr64< Hash< "Author302">() >(),  "P0209r1 | make_from_tuple: apply for construction" > , Rev< 2u, Arr64< Hash< "Author957">() >(),  "P0209r2 | make_from_tuple: apply for construction" >  >() },
    {  210u, RevList< Rev< 0u, Arr64< Hash< "Author1625">() >(),  "A light-weight, compact dynamic array" >  >() },
    {  211u, RevList< Rev< 0u, Arr64< Hash< "Author1726">() >(),  "Allocator-aware library wrappers for dynamic allocation" > , Rev< 1u, Arr64< Hash< "Author1826">() >(),  "Allocator-aware library wrappers for dynamic allocation" > , Rev< 2u, Arr64< Hash< "Author461">() >(),  "Allocator-aware library wrappers for dynamic allocation" > , Rev< 3u, Arr64< Hash< "Author725">() >(),  "Allocator-aware library wrappers for dynamic allocation" >  >() },
    {  212u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title780" > , Rev< 1u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title385" >  >() },
    {  213u, RevList< Rev< 0u, Arr64< Hash< "Graham Bleaney">() >(),  "On the Effective Use Of Memory Allocators" >  >() },
    {  214u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R3]" > , Rev< 4u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R4]" > , Rev< 5u, Arr64< Hash< "Matthias Kretz">() >(),  "Data-Parallel Vector Types & Operations [P0214R5]" >  >() },
    {  215u, RevList< Rev< 0u, Arr64< Hash< "Greg Miller">() >(),  "Title889" >  >() },
    {  216u, RevList< Rev< 0u, Arr64< Hash< "Greg Miller">() >(),  "Title462" >  >() },
    {  217u, RevList< Rev< 0u, Arr64< Hash< "Author652">() >(),  "Wording for structured bindings" > , Rev< 1u, Arr64< Hash< "Author1710">() >(),  "Wording for structured bindings" > , Rev< 2u, Arr64< Hash< "Author866">() >(),  "Wording for structured bindings" > , Rev< 3u, Arr64< Hash< "Author563">() >(),  "Wording for structured bindings" >  >() },
    {  218u, RevList< Rev< 0u, Arr64< Hash< "Author1097">() >(),  "C++17 Filesystem -" > , Rev< 1u, Arr64< Hash< "Author931">() >(),  "C++17 Filesystem -" >  >() },
    {  219u, RevList< Rev< 0u, Arr64< Hash< "Author2129">() >(),  "Relative Paths" > , Rev< 1u, Arr64< Hash< "Author1190">() >(),  "Relative Paths" >  >() },
    {  220u, RevList< Rev< 0u, Arr64< Hash< "Author573">() >(),  "C++17 Fundamentals -" > , Rev< 1u, Arr64< Hash< "Author749">() >(),  "C++17 Fundamentals -" >  >() },
    {  221u, RevList< Rev< 0u, Arr64< Hash< "Author2208">() >(),  "Default comparisons" > , Rev< 1u, Arr64< Hash< "Author2107">() >(),  "Proposed wording for default comparisons, revision 3" > , Rev< 2u, Arr64< Hash< "Author1086">() >(),  "Proposed wording for default comparisons, revision 4" >  >() },
    {  222u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Allowing Anonymous Structs as Return Values" >  >() },
    {  223u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Class Namespace" >  >() },
    {  224u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Implicit Return Type" >  >() },
    {  225u, RevList< Rev< 0u, Arr64< Hash< "Author1965">() >(),  "Why I want Concepts, and why I want them sooner rather than later" >  >() },
    {  226u, RevList< Rev< 0u, Arr64< Hash< "Author1704">() >(),  "Mathematical Special Functions for C++17, v4" > , Rev< 1u, Arr64< Hash< "Author33">() >(),  "Mathematical Special Functions for C++17, v5" >  >() },
    {  227u, RevList< Rev< 0u, Arr64< Hash< "Thibaut Le">() >(),  "Title1440" >  >() },
    {  228u, RevList< Rev< 0u, Arr64< Hash< "Robert Ramey">() >(),  "Java Printing.pdf" > , Rev< 3u, Arr64< Hash< "Ryan McDougall">() >(),  "unique_function: a move-only std::function" >  >() },
    {  229u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title426" >  >() },
    {  230u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1272" >  >() },
    {  231u, RevList< Rev< 0u, Arr64< Hash< "Victor Luchangco">() >(),  "Title909" >  >() },
    {  232u, RevList< Rev< 0u, Arr64< Hash< "Paul McKenney">() >(),  "Title1262" >  >() },
    {  233u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Title1403" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Title276" > , Rev< 2u, Arr64< Hash< "Maged M">() >(),  "Title306" > , Rev< 3u, Arr64< Hash< "Maged M">() >(),  "Title651" > , Rev< 4u, Arr64< Hash< "Maged M">() >(),  "Title1637" > , Rev< 5u, Arr64< Hash< "Maged M">() >(),  "Title1564" >  >() },
    {  234u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title610" >  >() },
    {  235u, RevList< Rev< 0u, Arr64< Hash< "Author2223">() >(),  "Title1700" >  >() },
    {  236u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1538" >  >() },
    {  237u, RevList< Rev< 0u, Arr64< Hash< "Author1155">() >(),  "Title918" > , Rev< 1u, Arr64< Hash< "Author1927">() >(),  "Wording for fundamental bit manipulation utilities" > , Rev< 2u, Arr64< Hash< "Author1066">() >(),  "Wording for fundamental bit manipulation utilities" > , Rev< 3u, Arr64< Hash< "Author162">() >(),  "Wording for fundamental bit manipulation utilities" > , Rev< 4u, Arr64< Hash< "Author1317">() >(),  "Wording for fundamental bit manipulation utilities" > , Rev< 5u, Arr64< Hash< "Author476">() >(),  "Wording for fundamental bit manipulation utilities" > , Rev< 9u, Arr64< Hash< "Author2058">() >(),  "P0237R9" > , Rev< 10u, Arr64< Hash< "Author1651">() >(),  "P0237R10" >  >() },
    {  238u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Return type deduction and SFINAE" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Return type deduction and SFINAE" >  >() },
    {  239u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title1585" >  >() },
    {  240u, RevList< Rev< 0u, Arr64< Hash< "Author2163">() >(),  "Why I want Concepts, but why they should come later rather than sooner" >  >() },
    {  241u, RevList< Rev< 0u, Arr64< Hash< "Author1713">() >(),  "Remove Future-Related Explicit Specializations for Void" >  >() },
    {  242u, RevList< Rev< 0u, Arr64< Hash< "Author1307">() >(),  "Standard Library Support for Void" >  >() },
    {  244u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Text_view: A C++ concepts and range based character encoding and code point enumeration library" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "Text_view: A C++ concepts and range based character encoding and code point enumeration library" > , Rev< 2u, Arr64< Hash< "Tom Honermann">() >(),  "Text_view: A C++ concepts and range based character encoding and code point enumeration library" >  >() },
    {  245u, RevList< Rev< 0u, Arr64< Hash< "Author1532">() >(),  "Hexadecimal floating literals for C++" > , Rev< 1u, Arr64< Hash< "Author1806">() >(),  "Hexadecimal floating literals for C++" >  >() },
    {  246u, RevList< Rev< 0u, Arr64< Hash< "John Lakos">() >(),  "Title712" >  >() },
    {  247u, RevList< Rev< 0u, Arr64< Hash< "Author1603">() >(),  "Title1243" >  >() },
    {  248u, RevList< Rev< 0u, Arr64< Hash< "Author2201">() >(),  "Untitled" >  >() },
    {  249u, RevList< Rev< 0u, Arr64< Hash< "Michael McLaughlin">() >(),  "Input Devices for 2d GraPhics" > , Rev< 2u, Arr64< Hash< "Michael McLaughlin">() >(),  "Input Devices for 2d GraPhics" >  >() },
    {  250u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Wording improvements for initialization and thread ids (CWG 2046)" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Wording improvements for initialization and thread ids (CWG 2046)" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Wording improvements for initialization and thread ids (CWG 2046, 1784)" > , Rev< 3u, Arr64< Hash< "Hans-J. Boehm">() >(),  "D0250R3: Wording improvements for initialization and thread ids (CWG 2046, 1784)" >  >() },
    {  251u, RevList< Rev< 0u, Arr64< Hash< "Author735">() >(),  "Title593" >  >() },
    {  252u, RevList< Rev< 0u, Arr64< Hash< "Author229">() >(),  "Title189" > , Rev< 1u, Arr64< Hash< "Author1403">() >(),  "Title1093" > , Rev< 2u, Arr64< Hash< "Author1834">() >(),  "Title1425" >  >() },
    {  253u, RevList< Rev< 0u, Arr64< Hash< "Author458">() >(),  "BMH Wording" > , Rev< 1u, Arr64< Hash< "Author1945">() >(),  "P0253R1" >  >() },
    {  254u, RevList< Rev< 0u, Arr64< Hash< "Author2117">() >(),  "Integrating string_view" > , Rev< 1u, Arr64< Hash< "Author1426">() >(),  "Integrating string_viewR1" > , Rev< 2u, Arr64< Hash< "Author2063">() >(),  "Integrating string_viewR2" >  >() },
    {  255u, RevList< Rev< 0u, Arr64< Hash< "Cleiton Santoia">() >(),  "C++ International Standard" >  >() },
    {  256u, RevList< Rev< 0u, Arr64< Hash< "Cleiton Santoia">() >(),  "C++ International Standard" >  >() },
    {  257u, RevList< Rev< 0u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0257R0" > , Rev< 1u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0257R1.docx" >  >() },
    {  258u, RevList< Rev< 0u, Arr64< Hash< "Author2021">() >(),  "is_contiguous_layout" > , Rev< 1u, Arr64< Hash< "Author1436">() >(),  "is_contiguous_layout" > , Rev< 2u, Arr64< Hash< "Author2207">() >(),  "P0258R2 has_unique_object_representations - wording" >  >() },
    {  259u, RevList< Rev< 0u, Arr64< Hash< "Michael Price">() >(),  "Title1560" >  >() },
    {  260u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 2u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 3u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 4u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 5u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 6u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 7u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 8u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 9u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 10u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 11u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 12u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 13u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 14u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 15u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 16u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" > , Rev< 17u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Queues" >  >() },
    {  261u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Distributed Counters" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Distributed Counters" > , Rev< 2u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Distributed Counters" > , Rev< 3u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Distributed Counters" > , Rev< 4u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Distributed Counters" >  >() },
    {  262u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "A Class for Status and Optional Value" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "A Class for Status and Optional Value" >  >() },
    {  263u, RevList< Rev< 0u, Arr64< Hash< "Author1478">() >(),  "Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author1205">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  264u, RevList< Rev< 0u, Arr64< Hash< "Author531">() >(),  "auto operator= considered dangerous" >  >() },
    {  265u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title821" >  >() },
    {  266u, RevList< Rev< 0u, Arr64< Hash< "Author1873">() >(),  "Lifting Restrictions on requires-Expressions" > , Rev< 1u, Arr64< Hash< "Author1130">() >(),  "Lifting Restrictions on requires-Expressions" > , Rev< 2u, Arr64< Hash< "Author1617">() >(),  "Lifting Restrictions on requires-Expressions" >  >() },
    {  267u, RevList< Rev< 0u, Arr64< Hash< "Author1934">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 1u, Arr64< Hash< "Author1602">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 2u, Arr64< Hash< "Author1117">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 3u, Arr64< Hash< "Author1142">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 4u, Arr64< Hash< "Author341">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 5u, Arr64< Hash< "Author892">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 8u, Arr64< Hash< "Author1188">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 9u, Arr64< Hash< "Author1767">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" > , Rev< 10u, Arr64< Hash< "Author801">() >(),  "A Proposal to Add 2D Graphics Rendering and Display to C++" >  >() },
    {  268u, RevList< Rev< 0u, Arr64< Hash< "Author540">() >(),  "Title438" >  >() },
    {  269u, RevList< Rev< 0u, Arr64< Hash< "mike_spertus@symantec.com Authors">() >(),  "Title406" >  >() },
    {  270u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Removing C dependencies from signal handler wording" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Removing C dependencies from signal handler wording" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Removing C dependencies from signal handler wording" > , Rev< 3u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Removing C dependencies from signal handler wording" >  >() },
    {  271u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Title949" >  >() },
    {  272u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title784" > , Rev< 1u, Arr64< Hash< "David Sankel">() >(),  "Title887" >  >() },
    {  273u, RevList< Rev< 0u, Arr64< Hash< "Author1468">() >(),  "Title1141" > , Rev< 1u, Arr64< Hash< "Author1070">() >(),  "Title861" >  >() },
    {  274u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "P0274R0 Clump - A Vector-like Contiguous Sequence Container with Embedded Storage.pages" >  >() },
    {  275u, RevList< Rev< 0u, Arr64< Hash< "Author301">() >(),  "A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 1u, Arr64< Hash< "Author1105">() >(),  "A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 2u, Arr64< Hash< "Author1659">() >(),  "A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 3u, Arr64< Hash< "Author2060">() >(),  "A Proposal to add Classes and Functions Required for Dynamic Library Load" > , Rev< 4u, Arr64< Hash< "Author1719">() >(),  "A Proposal to add Classes and Functions Required for Dynamic Library Load" >  >() },
    {  276u, RevList< Rev< 0u, Arr64< Hash< "Author1732">() >(),  "A Proposal to add Attribute [[visible]]" >  >() },
    {  277u, RevList< Rev< 0u, Arr64< Hash< "Author298">() >(),  "Title252" > , Rev< 1u, Arr64< Hash< "Author920">() >(),  "Title741" >  >() },
    {  278u, RevList< Rev< 0u, Arr64< Hash< "Jon Kalb">() >(),  "P0278r0 - volatile solutions" >  >() },
    {  279u, RevList< Rev< 0u, Arr64< Hash< "Author959">() >(),  "Read-Copy Update (RCU) for C++" > , Rev< 1u, Arr64< Hash< "Author716">() >(),  "Title578" >  >() },
    {  280u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Initialize unspecified aggregate members with direct list initialization" >  >() },
    {  281u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Remove comma elision in variadic function declarations" >  >() },
    {  282u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Const-preserving overloads for the strtox family of functions" >  >() },
    {  283u, RevList< Rev< 0u, Arr64< Hash< "Author2043">() >(),  "Title1582" > , Rev< 1u, Arr64< Hash< "Author1670">() >(),  "Title1299" > , Rev< 2u, Arr64< Hash< "Author1797">() >(),  "Standard and non-standard attributes" >  >() },
    {  284u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Unqualified enumerators in case labels" >  >() },
    {  285u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Using customization points to unify executors" >  >() },
    {  286u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "A networking library extension to support co_await-based coroutines" >  >() },
    {  287u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1188" >  >() },
    {  288u, RevList< Rev< 0u, Arr64< Hash< "Author1220">() >(),  "unique_function.pages" > , Rev< 1u, Arr64< Hash< "Author1376">() >(),  "unique_function.pages" > , Rev< 4u, Arr64< Hash< "Ryan McDougall">() >(),  "any_invocable" > , Rev< 5u, Arr64< Hash< "Ryan McDougall">() >(),  "any_invocable" > , Rev< 6u, Arr64< Hash< "Matt Calabrese">() >(),  "any_invocable" > , Rev< 7u, Arr64< Hash< "Matt Calabrese">() >(),  "any_invocable" > , Rev< 8u, Arr64< Hash< "Matt Calabrese">() >(),  "move_only_function" > , Rev< 9u, Arr64< Hash< "Matt Calabrese">() >(),  "move_only_function" >  >() },
    {  289u, RevList< Rev< 0u, Arr64< Hash< "Author18">() >(),  "Title16" >  >() },
    {  290u, RevList< Rev< 0u, Arr64< Hash< "Anthony">() >(),  "apply() for synchronized_value<T>" > , Rev< 1u, Arr64< Hash< "Anthony">() >(),  "apply() for synchronized_value<T>" > , Rev< 2u, Arr64< Hash< "Anthony">() >(),  "apply() for synchronized_value<T>" > , Rev< 3u, Arr64< Hash< "Anthony">() >(),  "apply() for synchronized_value<T>" > , Rev< 4u, Arr64< Hash< "Anthony">() >(),  "apply() for synchronized_value<T>" >  >() },
    {  292u, RevList< Rev< 0u, Arr64< Hash< "Author1322">() >(),  "constexpr if: A slightly different syntax" > , Rev< 1u, Arr64< Hash< "Author1407">() >(),  "constexpr if: A slightly different syntax" > , Rev< 2u, Arr64< Hash< "Author165">() >(),  "constexpr if: A slightly different syntax" >  >() },
    {  293u, RevList< Rev< 0u, Arr64< Hash< "Author1386">() >(),  "Title1077" >  >() },
    {  295u, RevList< Rev< 0u, Arr64< Hash< "Author418">() >(),  "Adopt Selected Library Fundamentals V2 Components for C++17" >  >() },
    {  296u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Forward progress guarantees: Base definitions" > , Rev< 1u, Arr64< Hash< "Torvald Riegel">() >(),  "Forward progress guarantees: Base definitions" > , Rev< 2u, Arr64< Hash< "Torvald Riegel">() >(),  "Forward progress guarantees: Base definitions" >  >() },
    {  298u, RevList< Rev< 0u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0298R0.docx" > , Rev< 1u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - D0298R1.docx" > , Rev< 2u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - P0298R2.docx" > , Rev< 3u, Arr64< Hash< "Neil MacIntosh">() >(),  "Microsoft Word - D0298R3" >  >() },
    {  299u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Forward progress guarantees for the Parallelism TS v2" > , Rev< 1u, Arr64< Hash< "Torvald Riegel">() >(),  "Forward progress guarantees for Parallelism TS features" >  >() },
    {  301u, RevList< Rev< 0u, Arr64< Hash< "Author1917">() >(),  "Wording for Unified Call Syntax" > , Rev< 1u, Arr64< Hash< "Author720">() >(),  "Wording for Unified Call Syntax (revision 1)" >  >() },
    {  302u, RevList< Rev< 0u, Arr64< Hash< "Author1411">() >(),  "Deprecating Allocator Support in std::function" > , Rev< 1u, Arr64< Hash< "Author1144">() >(),  "Removing Allocator Support in std::function (rev 1)" >  >() },
    {  303u, RevList< Rev< 0u, Arr64< Hash< "Boris Fomitchev">() >(),  "C++ International Standard" >  >() },
    {  304u, RevList< Rev< 0u, Arr64< Hash< "Author904">() >(),  "C++ Standard Library Issues Resolved Directly" > , Rev< 1u, Arr64< Hash< "Author389">() >(),  "C++ Standard Library Issues Resolved Directly In Issaquah" >  >() },
    {  305u, RevList< Rev< 0u, Arr64< Hash< "Author1441">() >(),  "If statement with initializer" > , Rev< 1u, Arr64< Hash< "Author1134">() >(),  "Selection statements with initializer" >  >() },
    {  306u, RevList< Rev< 0u, Arr64< Hash< "Author900">() >(),  "Comma omission and comma deletion" > , Rev< 1u, Arr64< Hash< "Author195">() >(),  "Comma omission and comma deletion" > , Rev< 2u, Arr64< Hash< "Author969">() >(),  "Comma omission and comma deletion" > , Rev< 3u, Arr64< Hash< "Author1064">() >(),  "Comma omission and comma deletion" > , Rev< 4u, Arr64< Hash< "Author1899">() >(),  "Comma omission and comma deletion" >  >() },
    {  307u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title713" > , Rev< 2u, Arr64< Hash< "Tony Van">() >(),  "Title856" >  >() },
    {  308u, RevList< Rev< 0u, Arr64< Hash< "Author1646">() >(),  "Title1275" >  >() },
    {  309u, RevList< Rev< 0u, Arr64< Hash< "Daniele Bordes">() >(),  "Title300" >  >() },
    {  310u, RevList< Rev< 0u, Arr64< Hash< "Author1245">() >(),  "Node allocators" >  >() },
    {  311u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "A Unified Vision for Manipulating Tuple-like Objects" >  >() },
    {  312u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Microsoft Word - Pointers to Members.docx" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Make Pointers to Members Callable" >  >() },
    {  313u, RevList< Rev< 0u, Arr64< Hash< "Author2002">() >(),  "Comparison operators in fold-expressions" >  >() },
    {  314u, RevList< Rev< 0u, Arr64< Hash< "Author536">() >(),  "Title435" >  >() },
    {  315u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title1636" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title787" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title55" > , Rev< 3u, Arr64< Hash< "Louis Dionne">() >(),  "Title985" > , Rev< 4u, Arr64< Hash< "Louis Dionne">() >(),  "Title1492" >  >() },
    {  316u, RevList< Rev< 0u, Arr64< Hash< "Miro Knejp">() >(),  "allocate_unique and allocator_delete" >  >() },
    {  317u, RevList< Rev< 0u, Arr64< Hash< "Author1855">() >(),  "Directory Entry Caching" > , Rev< 1u, Arr64< Hash< "Author1076">() >(),  "Directory Entry Caching" >  >() },
    {  318u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0318r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0318r1" >  >() },
    {  319u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0319r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0319r1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "p0319r2" >  >() },
    {  320u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0320r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0320r1" >  >() },
    {  322u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0322r0 : exception_list" >  >() },
    {  323u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0323r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0323r1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "p0323r2" > , Rev< 3u, Arr64< Hash< "Make bad_expected_access">() >(),  "p0323r3" > , Rev< 4u, Arr64< Hash< "Vicente Botet">() >(),  "p0323r4: std::expected" > , Rev< 5u, Arr64< Hash< "Vicente Botet">() >(),  "p0323r5: std::expected" > , Rev< 7u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" > , Rev< 8u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" > , Rev< 9u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" > , Rev< 10u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" > , Rev< 11u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" > , Rev< 12u, Arr64< Hash< "Vicente Botet">() >(),  "std::expected" >  >() },
    {  324u, RevList< Rev< 0u, Arr64< Hash< "Author1183">() >(),  "One Concept Definition Syntax" >  >() },
    {  325u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Propose to adopt make_array in C++17" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Propose to adopt make_array into the IS" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "to_array from LFTS with updates - HackMD" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "to_array from LFTS with updates - HackMD" > , Rev< 4u, Arr64< Hash< "Zhihao Yuan">() >(),  "to_array from LFTS with updates - HackMD" >  >() },
    {  326u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0326r0" >  >() },
    {  327u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0327r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0327r1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "p0327r2" > , Rev< 3u, Arr64< Hash< "Vicente J">() >(),  "p0327r3" >  >() },
    {  329u, RevList< Rev< 0u, Arr64< Hash< "Author2215">() >(),  "Title1695" > , Rev< 1u, Arr64< Hash< "Author1446">() >(),  "Title1123" > , Rev< 2u, Arr64< Hash< "Author1203">() >(),  "Title947" > , Rev< 3u, Arr64< Hash< "Author871">() >(),  "Title698" > , Rev< 4u, Arr64< Hash< "Author31">() >(),  "Title26" >  >() },
    {  330u, RevList< Rev< 0u, Arr64< Hash< "Rein Halbersma">() >(),  "Title225" > , Rev< 1u, Arr64< Hash< "Rein Halbersma">() >(),  "Title56" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffixes for ptrdiff_t and size_t" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffixes for ptrdiff_t and size_t" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffixes for ptrdiff_t and size_t" > , Rev< 6u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffixes for ptrdiff_t and size_t" > , Rev< 7u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffixes for ptrdiff_t and size_t" > , Rev< 8u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Literal Suffix for (signed) size_t" >  >() },
    {  331u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0331r0 : Motivation and Examples for Multidimensional Array" >  >() },
    {  332u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0332r0 : Relaxed Incomplete Multidimensional Array Type Declaration" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0332r1 : Relaxed Incomplete Multidimensional Array Type Declaration" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "p0332R2: Relaxed Incomplete Multidimensional Array Type Declaration" >  >() },
    {  333u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0333r0 : Improving Parallel Algorithm Exception Handling" >  >() },
    {  334u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0334r0 : Immutable Persistent Containers" >  >() },
    {  335u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Context Tokens for Parallel Algorithms" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "Context Tokens for Parallel Algorithms" >  >() },
    {  336u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Better Names for Parallel Execution Policies in C++17" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "Better Names for Parallel Execution Policies in C++17" >  >() },
    {  337u, RevList< Rev< 0u, Arr64< Hash< "Author408">() >(),  "P0337r0 | Delete operator= for polymorphic_allocator" >  >() },
    {  338u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0338r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0338r1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "p0338r2" > , Rev< 3u, Arr64< Hash< "Vicente J">() >(),  "p0338r3" >  >() },
    {  339u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<void> as a vocabulary type" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" > , Rev< 2u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" > , Rev< 3u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" > , Rev< 4u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" > , Rev< 5u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" > , Rev< 6u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<> as a vocabulary type" >  >() },
    {  340u, RevList< Rev< 0u, Arr64< Hash< "Author4">() >(),  "P0340R0" > , Rev< 1u, Arr64< Hash< "Author823">() >(),  "Making std::underlying_type SFINAE-friendly" > , Rev< 2u, Arr64< Hash< "Author1506">() >(),  "D0340R2: Making std::underlying_type SFINAE-friendly" > , Rev< 3u, Arr64< Hash< "Author10">() >(),  "Making std::underlying_type SFINAE-friendly" >  >() },
    {  341u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Leveraging parameter packs outside of templates" >  >() },
    {  342u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Timing barriers" > , Rev< 1u, Arr64< Hash< "Mike Spertus">() >(),  "Title1502" > , Rev< 2u, Arr64< Hash< "Gonzalo Brito">() >(),  "pessimize_hint" >  >() },
    {  343u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0343r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0343r1" >  >() },
    {  345u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Allowing any unsigned integral type as parameter type for literal operators" >  >() },
    {  346u, RevList< Rev< 0u, Arr64< Hash< "Author91">() >(),  "A <random> Nomenclature Tweak" > , Rev< 1u, Arr64< Hash< "Author2148">() >(),  "A <random> Nomenclature Tweak" >  >() },
    {  347u, RevList< Rev< 0u, Arr64< Hash< "R. Tim">() >(),  "P0347R0" > , Rev< 1u, Arr64< Hash< "R. Tim">() >(),  "Simplifying simple uses of <random>" >  >() },
    {  348u, RevList< Rev< 0u, Arr64< Hash< "Andrzej Krzemienski">() >(),  "Validity testing issues" >  >() },
    {  349u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Assumptions about the size of datapar [P0349R0]" >  >() },
    {  350u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Integrating datapar with parallel algorithms and executors [P0350R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Integrating simd with parallel algorithms [P0350R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Integrating simd with parallel algorithms [P0350R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Integrating simd with parallel algorithms [P0350R3]" > , Rev< 4u, Arr64< Hash< "Ma hias">() >(),  "Integrating simd with parallel algorithms [P0350R4]" >  >() },
    {  352u, RevList< Rev< 0u, Arr64< Hash< "Author1733">() >(),  "Title1339" > , Rev< 1u, Arr64< Hash< "Author1394">() >(),  "Title1083" >  >() },
    {  353u, RevList< Rev< 0u, Arr64< Hash< "Author1605">() >(),  "Unicode Encoding conversions" > , Rev< 1u, Arr64< Hash< "Author1189">() >(),  "Unicode Encoding conversions" >  >() },
    {  354u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title924" >  >() },
    {  355u, RevList< Rev< 0u, Arr64< Hash< "Author1815">() >(),  "Extending <chrono> to Calendars and Time Zones" > , Rev< 1u, Arr64< Hash< "Author2070">() >(),  "Extending <chrono> to Calendars and Time Zones" > , Rev< 2u, Arr64< Hash< "Author1345">() >(),  "Extending <chrono> to Calendars and Time Zones" > , Rev< 3u, Arr64< Hash< "Author1002">() >(),  "Extending <chrono> to Calendars and Time Zones" > , Rev< 4u, Arr64< Hash< "Author316">() >(),  "Extending <chrono> to Calendars and Time Zones" > , Rev< 5u, Arr64< Hash< "Author1531">() >(),  "Extending <chrono> to Calendars and Time Zones" >  >() },
    {  356u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" > , Rev< 4u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" > , Rev< 5u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Simplified partial function application" >  >() },
    {  357u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "'reference_wrapper' for incomplete types" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "'reference_wrapper' for incomplete types" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "'reference_wrapper' for incomplete types" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "'reference_wrapper' for incomplete types" >  >() },
    {  358u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixes for 'not_fn'" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixes for 'not_fn'" >  >() },
    {  359u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title588" >  >() },
    {  360u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title916" >  >() },
    {  361u, RevList< Rev< 0u, Arr64< Hash< "Hartmut Kaiser">() >(),  "Title1424" > , Rev< 1u, Arr64< Hash< "Hartmut Kaiser">() >(),  "Title1417" >  >() },
    {  362u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title796" >  >() },
    {  363u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1096" >  >() },
    {  364u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1200" >  >() },
    {  365u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1558" >  >() },
    {  366u, RevList< Rev< 0u, Arr64< Hash< "Victor Luchangco">() >(),  "Title1398" >  >() },
    {  367u, RevList< Rev< 0u, Arr64< Hash< "Author1688">() >(),  "Title1310" >  >() },
    {  369u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1221" >  >() },
    {  370u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Design Updates Omnibus" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Design Updates Omnibus" > , Rev< 2u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Design Updates Omnibus" > , Rev< 3u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Design Updates Omnibus" >  >() },
    {  371u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Temporarily deprecate memory_order_consume" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Temporarily discourage memory_order_consume" >  >() },
    {  372u, RevList< Rev< 0u, Arr64< Hash< "Author1224">() >(),  "P0372R0 - A type for utf-8 data" >  >() },
    {  373u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title899" >  >() },
    {  374u, RevList< Rev< 0u, Arr64< Hash< "Author1045">() >(),  "Title840" >  >() },
    {  375u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title803" >  >() },
    {  376u, RevList< Rev< 0u, Arr64< Hash< "Author635">() >(),  "A Single Generalization of std::invoke, std::apply, and std::visit" >  >() },
    {  377u, RevList< Rev< 0u, Arr64< Hash< "Author1058">() >(),  "std::integral_constant with a Deduced Value Type" >  >() },
    {  379u, RevList< Rev< 0u, Arr64< Hash< "Author405">() >(),  "Why a joining thread from P0206 is a Bad Idea" >  >() },
    {  380u, RevList< Rev< 0u, Arr64< Hash< "Author380">() >(),  "Title323" > , Rev< 1u, Arr64< Hash< "Author696">() >(),  "Title559" >  >() },
    {  381u, RevList< Rev< 0u, Arr64< Hash< "Author1949">() >(),  "Title1511" > , Rev< 1u, Arr64< Hash< "Author859">() >(),  "Title683" >  >() },
    {  382u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Comments on P0119: Overload sets as function arguments" >  >() },
    {  384u, RevList< Rev< 0u, Arr64< Hash< "Author1702">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  385u, RevList< Rev< 0u, Arr64< Hash< "Matus">() >(),  "Title1697" > , Rev< 1u, Arr64< Hash< "Axel Naumann">() >(),  "Title1378" > , Rev< 2u, Arr64< Hash< "Axel Naumann">() >(),  "Title932" >  >() },
    {  386u, RevList< Rev< 0u, Arr64< Hash< "Author169">() >(),  "Title146" > , Rev< 2u, Arr64< Hash< "Author669">() >(),  "Title541" >  >() },
    {  387u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Memory Model Issues for Concurrent Data Structures" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Memory Model Issues for Concurrent Data Structures" >  >() },
    {  388u, RevList< Rev< 0u, Arr64< Hash< "Author2172">() >(),  "Proposal: conversions to arrays of unknown bound" > , Rev< 1u, Arr64< Hash< "Author1622">() >(),  "Proposal: conversions to arrays of unknown bound" > , Rev< 2u, Arr64< Hash< "Author570">() >(),  "Proposal: conversions to arrays of unknown bound" > , Rev< 3u, Arr64< Hash< "Author832">() >(),  "Proposal: conversions to arrays of unknown bound" > , Rev< 4u, Arr64< Hash< "Author2130">() >(),  "Proposal: conversions to arrays of unknown bound" >  >() },
    {  389u, RevList< Rev< 0u, Arr64< Hash< "Author1554">() >(),  "Proposal: template keyword in unqualified-ids" >  >() },
    {  390u, RevList< Rev< 0u, Arr64< Hash< "Nickolas Pokhylets">() >(),  "ISO/IEC JTC1/SC22/WG21p0390r0" >  >() },
    {  391u, RevList< Rev< 0u, Arr64< Hash< "Author2182">() >(),  "Introducing the term \"templated entity\"" >  >() },
    {  392u, RevList< Rev< 0u, Arr64< Hash< "Author979">() >(),  "Microsoft Word - P0392_stringview4path_160623.docx" >  >() },
    {  393u, RevList< Rev< 3u, Arr64< Hash< "Tony Van">() >(),  "Variant: relational operators." >  >() },
    {  394u, RevList< Rev< 4u, Arr64< Hash< "JF Bastien">() >(),  "Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling" >  >() },
    {  396u, RevList< Rev< 0u, Arr64< Hash< "Author1071">() >(),  "C++ Concepts Active Issues List (Snapshot of Revision 4)" >  >() },
    {  397u, RevList< Rev< 0u, Arr64< Hash< "Author1046">() >(),  "C++ Standard Library Priority 1 Issues Resolved Directly In Oulu" >  >() },
    {  398u, RevList< Rev< 0u, Arr64< Hash< "Author673">() >(),  "Core issue 1518: Explicit default constructors and copy-list-initialization" >  >() },
    {  399u, RevList< Rev< 0u, Arr64< Hash< "Author1558">() >(),  "Networking TS & Threadpool" >  >() },
    {  400u, RevList< Rev< 0u, Arr64< Hash< "Author1330">() >(),  "P0400R0 2016-06-25" >  >() },
    {  401u, RevList< Rev< 0u, Arr64< Hash< "Author510">() >(),  "Extensions to the Allocator interface" > , Rev< 1u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" > , Rev< 2u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" > , Rev< 3u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" > , Rev< 4u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" > , Rev< 5u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" > , Rev< 6u, Arr64< Hash< "Jonathan Wakely">() >(),  "Providing size feedback in the Allocator interface" >  >() },
    {  403u, RevList< Rev< 0u, Arr64< Hash< "Author1234">() >(),  "Literal suffixes for basic_string_view" > , Rev< 1u, Arr64< Hash< "Author795">() >(),  "Literal suffixes for basic_string_view" >  >() },
    {  404u, RevList< Rev< 0u, Arr64< Hash< "Hubert Tong">() >(),  "Matching Types: 404 Syntax Not found" >  >() },
    {  405u, RevList< Rev< 0u, Arr64< Hash< "Author578">() >(),  "Wording for Networking TS changes discussed in Kona" >  >() },
    {  406u, RevList< Rev< 1u, Arr64< Hash< "Hal Finkel">() >(),  "Intrusive Containers" >  >() },
    {  407u, RevList< Rev< 0u, Arr64< Hash< "Author1325">() >(),  "Title1022" > , Rev< 1u, Arr64< Hash< "Author1427">() >(),  "Title1106" > , Rev< 2u, Arr64< Hash< "Author525">() >(),  "Title430" >  >() },
    {  408u, RevList< Rev< 0u, Arr64< Hash< "Author313">() >(),  "Title265" > , Rev< 1u, Arr64< Hash< "Author1846">() >(),  "Title1431" > , Rev< 2u, Arr64< Hash< "Author52">() >(),  "Title52" > , Rev< 3u, Arr64< Hash< "Author922">() >(),  "Title742" > , Rev< 4u, Arr64< Hash< "Author2146">() >(),  "Title1654" > , Rev< 5u, Arr64< Hash< "Author1522">() >(),  "Title1184" > , Rev< 6u, Arr64< Hash< "Author1408">() >(),  "Title1095" > , Rev< 7u, Arr64< Hash< "Author352">() >(),  "Title298" >  >() },
    {  409u, RevList< Rev< 0u, Arr64< Hash< "Author2103">() >(),  "Allow lambda capture [=, this]" > , Rev< 1u, Arr64< Hash< "Author1819">() >(),  "Allow lambda capture [=, this]" > , Rev< 2u, Arr64< Hash< "Author275">() >(),  "Allow lambda capture [=, this]" >  >() },
    {  411u, RevList< Rev< 0u, Arr64< Hash< "Author1912">() >(),  "Separating Library Requirements and Preconditions" >  >() },
    {  412u, RevList< Rev< 0u, Arr64< Hash< "Mikhail Maltsev">() >(),  "Benchmarking Primitives" >  >() },
    {  413u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Updating Parallel Execution Policy Names in the Parallelism TS" >  >() },
    {  414u, RevList< Rev< 0u, Arr64< Hash< "Author1272">() >(),  "Merging shared_ptr changes from Library Fundamentals to C++17" > , Rev< 1u, Arr64< Hash< "Author954">() >(),  "Merging shared_ptr changes from Library Fundamentals to C++17" > , Rev< 2u, Arr64< Hash< "Author396">() >(),  "Merging shared_ptr changes from Library Fundamentals to C++17" >  >() },
    {  415u, RevList< Rev< 0u, Arr64< Hash< "Author152">() >(),  "Constexpr for std::complex" > , Rev< 1u, Arr64< Hash< "Author1585">() >(),  "Constexpr for std::complex" >  >() },
    {  416u, RevList< Rev< 0u, Arr64< Hash< "Author2028">() >(),  "dot P0416" > , Rev< 1u, Arr64< Hash< "Author825">() >(),  "Title657" >  >() },
    {  417u, RevList< Rev< 0u, Arr64< Hash< "Author1075">() >(),  "ISO 10646:2014" > , Rev< 1u, Arr64< Hash< "Author339">() >(),  "ISO 10646:2014" >  >() },
    {  418u, RevList< Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "P0418r1: Fail or succeed: there is no atomic lattice" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "P0418r2: Fail or succeed: there is no atomic lattice" >  >() },
    {  421u, RevList< Rev< 0u, Arr64< Hash< "Mariusz Moczala">() >(),  "Title401" >  >() },
    {  422u, RevList< Rev< 0u, Arr64< Hash< "Author2033">() >(),  "Out-of-Thin-Air Execution is Vacuous" >  >() },
    {  423u, RevList< Rev< 0u, Arr64< Hash< "Author1711">() >(),  "Variable templates for Networking TS traits" >  >() },
    {  424u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title450" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title47" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title527" >  >() },
    {  425u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title1225" >  >() },
    {  426u, RevList< Rev< 0u, Arr64< Hash< "Author1600">() >(),  "Constexpr for std::char_traits" > , Rev< 1u, Arr64< Hash< "Author1181">() >(),  "Constexpr for std::char_traits" >  >() },
    {  428u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title567" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title1150" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title858" >  >() },
    {  429u, RevList< Rev< 0u, Arr64< Hash< "Author1588">() >(),  "Title1232" > , Rev< 1u, Arr64< Hash< "Author1674">() >(),  "Title1300" > , Rev< 2u, Arr64< Hash< "Author889">() >(),  "Title718" > , Rev< 3u, Arr64< Hash< "Author718">() >(),  "Title580" > , Rev< 4u, Arr64< Hash< "Author1484">() >(),  "A Standard flatmap" > , Rev< 5u, Arr64< Hash< "Author1817">() >(),  "A Standard flatmap" > , Rev< 6u, Arr64< Hash< "Author257">() >(),  "A Standard flatmap" > , Rev< 7u, Arr64< Hash< "Author454">() >(),  "A Standard flatmap" > , Rev< 8u, Arr64< Hash< "Author636">() >(),  "A Standard flatmap" > , Rev< 9u, Arr64< Hash< "Author1983">() >(),  "A Standard flatmap" >  >() },
    {  430u, RevList< Rev< 0u, Arr64< Hash< "Jason Liu">() >(),  "Microsoft Word - open LWG issue (Autosaved).docx" > , Rev< 1u, Arr64< Hash< "Jason Liu">() >(),  "Microsoft Word - P0430R1.docx" > , Rev< 2u, Arr64< Hash< "Jason Liu">() >(),  "Title1208" >  >() },
    {  431u, RevList< Rev< 0u, Arr64< Hash< "Hyman Rosen">() >(),  "ISO/IEC JTC1/SC22/WG21p0431r0" >  >() },
    {  432u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title857" >  >() },
    {  433u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library" >  >() },
    {  434u, RevList< Rev< 0u, Arr64< Hash< "BRETT SEARLES">() >(),  "P0434 Portable Interrupt Library" >  >() },
    {  435u, RevList< Rev< 0u, Arr64< Hash< "Author524">() >(),  "Resolving LWG Issues re common_type" > , Rev< 1u, Arr64< Hash< "Author74">() >(),  "Resolving LWG Issues re common_type" >  >() },
    {  436u, RevList< Rev< 0u, Arr64< Hash< "Author1941">() >(),  "An Extensible Approach to Obtaining Selected Operators" > , Rev< 1u, Arr64< Hash< "Author992">() >(),  "An Extensible Approach to Obtaining Selected Operators" >  >() },
    {  437u, RevList< Rev< 0u, Arr64< Hash< "Author17">() >(),  "Numeric Traits for the Next Standard Library" > , Rev< 1u, Arr64< Hash< "Author151">() >(),  "Numeric Traits for the Standard Library" >  >() },
    {  438u, RevList< Rev< 0u, Arr64< Hash< "Author1813">() >(),  "Toward a <random> Technical Specification" >  >() },
    {  439u, RevList< Rev< 0u, Arr64< Hash< "Author108">() >(),  "Make std::memory_order a scoped enumeration" >  >() },
    {  440u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0440r0 : Floating Point Atomic View" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0440r1 : Floating Point Atomic View" >  >() },
    {  441u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Ranges: Merging Writable and MoveWritable" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Ranges: Merging Writable and MoveWritable" >  >() },
    {  443u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "Title517" > , Rev< 1u, Arr64< Hash< "Jared Hoberock">() >(),  "Title655" > , Rev< 2u, Arr64< Hash< "Jared Hoberock">() >(),  "Title90" > , Rev< 3u, Arr64< Hash< "Jared Hoberock">() >(),  "Title692" > , Rev< 4u, Arr64< Hash< "Jared Hoberock">() >(),  "Title882" > , Rev< 5u, Arr64< Hash< "Jared Hoberock">() >(),  "Title30" > , Rev< 9u, Arr64< Hash< "Jared Hoberock">() >(),  "Title734" > , Rev< 10u, Arr64< Hash< "Jared Hoberock">() >(),  "Title820" > , Rev< 11u, Arr64< Hash< "Jared Hoberock">() >(),  "A Unified Executors Proposal for C++ | P0443R11" > , Rev< 12u, Arr64< Hash< "Jared Hoberock">() >(),  "A Unified Executors Proposal for C++ | P0443R12" > , Rev< 13u, Arr64< Hash< "Jared Hoberock">() >(),  "A Unified Executors Proposal for C++ | P0443R13" > , Rev< 14u, Arr64< Hash< "Jared Hoberock">() >(),  "A Unified Executors Proposal for C++ | P0443R14" >  >() },
    {  444u, RevList< Rev< 0u, Arr64< Hash< "Nat Goodspeed">() >(),  "P0444" >  >() },
    {  445u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1355" >  >() },
    {  446u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title271" >  >() },
    {  447u, RevList< Rev< 0u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 1u, Arr64< Hash< "Author263">() >(),  "Title222" > , Rev< 2u, Arr64< Hash< "Author989">() >(),  "Title800" > , Rev< 3u, Arr64< Hash< "Author1959">() >(),  "Title1524" > , Rev< 4u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 8u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 9u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 10u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 11u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 12u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 13u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 14u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::colony to the standard library" > , Rev< 15u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 16u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 17u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 18u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 19u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 20u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 21u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 22u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 23u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 24u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 25u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 26u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 27u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" > , Rev< 28u, Arr64< Hash< "Matthew Bentley">() >(),  "Introduction of std::hive to the standard library" >  >() },
    {  448u, RevList< Rev< 0u, Arr64< Hash< "Author506">() >(),  "Title417" > , Rev< 1u, Arr64< Hash< "Author2041">() >(),  "Title1578" > , Rev< 2u, Arr64< Hash< "Author9">() >(),  "Title12" > , Rev< 3u, Arr64< Hash< "Author760">() >(),  "Title617" > , Rev< 4u, Arr64< Hash< "Author1271">() >(),  "Title984" >  >() },
    {  451u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0451r0: Future-Proofing Parallel Algorithms Exception Handling" >  >() },
    {  452u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0452r0: Binary-Binary transform_reduce(): The Missing Overload" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0452r1: Unifying <numeric> Parallel Algorithms" >  >() },
    {  454u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0454r0: Wording for a Minimal mdspan<>" >  >() },
    {  457u, RevList< Rev< 0u, Arr64< Hash< "Mikhail Maltsev">() >(),  "String Prefix and Suffix Checking" > , Rev< 1u, Arr64< Hash< "Mikhail Maltsev">() >(),  "String Prefix and Suffix Checking" > , Rev< 2u, Arr64< Hash< "Mikhail Maltsev">() >(),  "String Prefix and Suffix Checking" >  >() },
    {  458u, RevList< Rev< 0u, Arr64< Hash< "Mikhail Maltsev">() >(),  "Checking for Existence of an Element in Associative Containers" > , Rev< 1u, Arr64< Hash< "Mikhail Maltsev">() >(),  "Checking for Existence of an Element in Associative Containers" > , Rev< 2u, Arr64< Hash< "Mikhail Maltsev">() >(),  "Checking for Existence of an Element in Associative Containers" >  >() },
    {  459u, RevList< Rev< 0u, Arr64< Hash< "Author1432">() >(),  "Working Draft, C++ Extensions for Ranges" >  >() },
    {  460u, RevList< Rev< 0u, Arr64< Hash< "Sean Middleditch">() >(),  "Title1240" >  >() },
    {  461u, RevList< Rev< 0u, Arr64< Hash< "Author1933">() >(),  "Title1494" > , Rev< 1u, Arr64< Hash< "Author1618">() >(),  "Title1254" > , Rev< 2u, Arr64< Hash< "Author1056">() >(),  "Title847" >  >() },
    {  462u, RevList< Rev< 0u, Arr64< Hash< "Author1340">() >(),  "Title1031" > , Rev< 1u, Arr64< Hash< "Author1944">() >(),  "Title1506" >  >() },
    {  463u, RevList< Rev< 0u, Arr64< Hash< "Author1512">() >(),  "endian" > , Rev< 1u, Arr64< Hash< "Author1477">() >(),  "endian" >  >() },
    {  464u, RevList< Rev< 0u, Arr64< Hash< "Author403">() >(),  "Title344" > , Rev< 1u, Arr64< Hash< "Tony van">() >(),  "Revisiting the meaning of foo(ConceptName,ConceptName)" > , Rev< 2u, Arr64< Hash< "Tony van">() >(),  "Revisiting the meaning of foo(ConceptName,ConceptName)" >  >() },
    {  465u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title943" >  >() },
    {  466u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title23" > , Rev< 1u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1303" > , Rev< 2u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title656" > , Rev< 3u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1383" > , Rev< 4u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title198" > , Rev< 5u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1172" >  >() },
    {  467u, RevList< Rev< 0u, Arr64< Hash< "Author527">() >(),  "Iterator Concerns for Parallel Algorithms" > , Rev< 1u, Arr64< Hash< "Author1701">() >(),  "Iterator Concerns for Parallel Algorithms" > , Rev< 2u, Arr64< Hash< "Author993">() >(),  "Iterator Concerns for Parallel Algorithms" >  >() },
    {  468u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "P0468R0 : An Intrusive Smart Pointer" > , Rev< 1u, Arr64< Hash< "Isabella Muerte">() >(),  "An Intrusive Smart Pointer" >  >() },
    {  469u, RevList< Rev< 0u, Arr64< Hash< "R. Tim">() >(),  "Sample in place" >  >() },
    {  471u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title1331" >  >() },
    {  472u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title1691" > , Rev< 1u, Arr64< Hash< "David Sankel">() >(),  "P0472R1 - Put std::monostate in <utility>" > , Rev< 2u, Arr64< Hash< "David Sankel">() >(),  "P0472R2 - Put std::monostate in <utility>" > , Rev< 3u, Arr64< Hash< "David Sankel">() >(),  "P0472R3 - Put std::monostate in <utility>" >  >() },
    {  473u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title342" >  >() },
    {  474u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "Comparison in C++: Basic Facilities" >  >() },
    {  475u, RevList< Rev< 0u, Arr64< Hash< "Author179">() >(),  "LWG 2511: guaranteed copy elision for piecewise construction" > , Rev< 1u, Arr64< Hash< "Author1038">() >(),  "LWG 2511: guaranteed copy elision for piecewise construction (rev. 1)" >  >() },
    {  476u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "P0476r0: Bit-casting object representations" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "P0476r1: Bit-casting object representations" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "p0476r2: Bit-casting object representations" >  >() },
    {  477u, RevList< Rev< 0u, Arr64< Hash< "Author1110">() >(),  "std::monostate_function<>" >  >() },
    {  478u, RevList< Rev< 0u, Arr64< Hash< "Bruno Manganelli">() >(),  "Title1652" >  >() },
    {  479u, RevList< Rev< 0u, Arr64< Hash< "Clay Trychta">() >(),  "Attributes for Likely and Unlikely Branches" > , Rev< 1u, Arr64< Hash< "Clay Trychta">() >(),  "Attributes for Likely and Unlikely Statements" > , Rev< 2u, Arr64< Hash< "Clay Trychta">() >(),  "Attributes for Likely and Unlikely Statements" > , Rev< 4u, Arr64< Hash< "Clay Trychta">() >(),  "Proposed wording for likely and unlikely attributes (Revision 4)" > , Rev< 5u, Arr64< Hash< "Clay Trychta">() >(),  "Proposed wording for likely and unlikely attributes (Revision 5)" >  >() },
    {  480u, RevList< Rev< 0u, Arr64< Hash< "Author1341">() >(),  "Explicit type checking with structured bindings" > , Rev< 1u, Arr64< Hash< "Author2071">() >(),  "Structured bindings with explicit types" >  >() },
    {  481u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title637" >  >() },
    {  482u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 1)" > , Rev< 2u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 2)" > , Rev< 3u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 3)" > , Rev< 4u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 4)" > , Rev< 5u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 5)" > , Rev< 6u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t: A type for UTF-8 characters and strings (Revision 6)" >  >() },
    {  483u, RevList< Rev< 0u, Arr64< Hash< "Patrice Roy">() >(),  "Title1438" >  >() },
    {  484u, RevList< Rev< 0u, Arr64< Hash< "Patrice Roy">() >(),  "Title439" > , Rev< 1u, Arr64< Hash< "Patrice Roy">() >(),  "Title1281" >  >() },
    {  485u, RevList< Rev< 0u, Arr64< Hash< "Bruno Manganelli">() >(),  "Title1234" >  >() },
    {  486u, RevList< Rev< 0u, Arr64< Hash< "Ildus Nezametdinov">() >(),  "Title1108" >  >() },
    {  487u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Fixing operator>>(basic_istream&, CharT*) (LWG 2499)" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Fixing operator>>(basic_istream&, CharT*) (LWG 2499)" >  >() },
    {  488u, RevList< Rev< 0u, Arr64< Hash< "Author104">() >(),  "Title95" >  >() },
    {  489u, RevList< Rev< 0u, Arr64< Hash< "Author2023">() >(),  "Title1565" >  >() },
    {  490u, RevList< Rev< 0u, Arr64< Hash< "Author1308">() >(),  "Core language changes addressing National Body comments for CD C++17" >  >() },
    {  492u, RevList< Rev< 0u, Arr64< Hash< "Author2134">() >(),  "Filesystem NB Comments C++17" > , Rev< 1u, Arr64< Hash< "Author651">() >(),  "Filesystem NB Comments C++17" > , Rev< 2u, Arr64< Hash< "Author2188">() >(),  "Filesystem NB Comments C++17" >  >() },
    {  493u, RevList< Rev< 0u, Arr64< Hash< "Al Grant">() >(),  "Title1231" > , Rev< 1u, Arr64< Hash< "Al Grant">() >(),  "Title1009" > , Rev< 2u, Arr64< Hash< "Al Grant">() >(),  "Title1512" > , Rev< 3u, Arr64< Hash< "Al Grant">() >(),  "Atomic minimum/maximum" > , Rev< 4u, Arr64< Hash< "Al Grant">() >(),  "Atomic minimum/maximum" > , Rev< 5u, Arr64< Hash< "Al Grant">() >(),  "Atomic minimum/maximum" >  >() },
    {  494u, RevList< Rev< 0u, Arr64< Hash< "Ildus Nezametdinov">() >(),  "Title27" >  >() },
    {  495u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "Concurrency Safety in C++ Data Structures" >  >() },
    {  497u, RevList< Rev< 0u, Arr64< Hash< "Author1597">() >(),  "Fixes to shared_ptr support for arrays" >  >() },
    {  500u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title545" >  >() },
    {  501u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title896" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1159" > , Rev< 2u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title753" > , Rev< 3u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title484" >  >() },
    {  502u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "P0502r0: Throwing out of a parallel algorithm terminatesbut how?" >  >() },
    {  503u, RevList< Rev< 0u, Arr64< Hash< "Author1326">() >(),  "Correcting library usage of \"literal type\"" >  >() },
    {  504u, RevList< Rev< 0u, Arr64< Hash< "Author1460">() >(),  "Revisiting in-place tag types for any/optional/variant" >  >() },
    {  505u, RevList< Rev< 0u, Arr64< Hash< "Author1825">() >(),  "Wording for GB 50" >  >() },
    {  506u, RevList< Rev< 0u, Arr64< Hash< "Author1761">() >(),  "Title1367" > , Rev< 1u, Arr64< Hash< "Author1999">() >(),  "Title1546" > , Rev< 2u, Arr64< Hash< "Author1179">() >(),  "Title929" >  >() },
    {  507u, RevList< Rev< 0u, Arr64< Hash< "Author38">() >(),  "Core Issue 1343: Sequencing of non-class initialization" >  >() },
    {  508u, RevList< Rev< 0u, Arr64< Hash< "Author1885">() >(),  "Wording for GB 58" >  >() },
    {  509u, RevList< Rev< 1u, Arr64< Hash< "Author1610">() >(),  "P0509R1" >  >() },
    {  510u, RevList< Rev< 0u, Arr64< Hash< "Author294">() >(),  "Disallowing references, incomplete types, arrays, and Empty Variants" >  >() },
    {  511u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Deduction guide for" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Deduction guide for std::array" >  >() },
    {  512u, RevList< Rev< 0u, Arr64< Hash< "Author1150">() >(),  "Title914" >  >() },
    {  513u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1277" >  >() },
    {  514u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "D0514R0" > , Rev< 1u, Arr64< Hash< "Olivier Giroux">() >(),  "D0514R1" > , Rev< 2u, Arr64< Hash< "Olivier Giroux">() >(),  "D0514R1" > , Rev< 3u, Arr64< Hash< "Olivier Giroux">() >(),  "D0514R1" > , Rev< 4u, Arr64< Hash< "Olivier Giroux">() >(),  "D0514R1" >  >() },
    {  515u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title8" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title1446" > , Rev< 2u, Arr64< Hash< "Herb Sutter">() >(),  "Title571" > , Rev< 3u, Arr64< Hash< "Herb Sutter">() >(),  "Title1012" >  >() },
    {  516u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0516r0: Clarify That shared_futures Copy Operations have Wide Contracts" >  >() },
    {  517u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0517r0: Make future_error Constructible" >  >() },
    {  518u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "p0518r0: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11" > , Rev< 1u, Arr64< Hash< "David S">() >(),  "P0518r1: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11" >  >() },
    {  519u, RevList< Rev< 0u, Arr64< Hash< "Author1502">() >(),  "Core \"ready\" Issues" >  >() },
    {  520u, RevList< Rev< 0u, Arr64< Hash< "Author249">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  521u, RevList< Rev< 0u, Arr64< Hash< "Stephan T">() >(),  "P0521r0: Proposed Resolution for CA 14 (shared_ptr use_count/unique)" >  >() },
    {  522u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "DR: Matching of template template-arguments excludes compatible templates" >  >() },
    {  523u, RevList< Rev< 0u, Arr64< Hash< "Detlef Vollmann">() >(),  "Wording for CH 10: Complexity of parallel algorithms" > , Rev< 1u, Arr64< Hash< "Detlef Vollmann">() >(),  "Wording for CH 10: Complexity of parallel algorithms" >  >() },
    {  527u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Untitled Document.md" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "Title1419" >  >() },
    {  528u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "P0528r0: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "p0528r1: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "p0528R2: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" > , Rev< 3u, Arr64< Hash< "JF Bastien">() >(),  "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange" >  >() },
    {  529u, RevList< Rev< 0u, Arr64< Hash< "Author758">() >(),  "Title615" >  >() },
    {  532u, RevList< Rev< 0u, Arr64< Hash< "Author86">() >(),  "Microsoft Word - P0532R0_onlaunder_170114.docx" >  >() },
    {  533u, RevList< Rev< 0u, Arr64< Hash< "Author1323">() >(),  "Title1020" > , Rev< 1u, Arr64< Hash< "Author1435">() >(),  "Title1115" > , Rev< 2u, Arr64< Hash< "Author286">() >(),  "Title239" > , Rev< 3u, Arr64< Hash< "Author1714">() >(),  "Title1324" > , Rev< 4u, Arr64< Hash< "Author879">() >(),  "Title706" > , Rev< 5u, Arr64< Hash< "Author1523">() >(),  "Title1185" > , Rev< 6u, Arr64< Hash< "Author793">() >(),  "Title642" > , Rev< 7u, Arr64< Hash< "Author1989">() >(),  "Title1540" > , Rev< 8u, Arr64< Hash< "Author299">() >(),  "Title253" > , Rev< 9u, Arr64< Hash< "Author915">() >(),  "Title736" >  >() },
    {  534u, RevList< Rev< 0u, Arr64< Hash< "Oliver Kowalke">() >(),  "call/cc: A low-level API for stackful context switching" > , Rev< 1u, Arr64< Hash< "Oliver Kowalke">() >(),  "call/cc: A low-level API for stackful context switching" > , Rev< 2u, Arr64< Hash< "Oliver Kowalke">() >(),  "call/cc: A low-level API for stackful context switching" > , Rev< 3u, Arr64< Hash< "Oliver Kowalke">() >(),  "call/cc: A low-level API for stackful context switching" >  >() },
    {  535u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Generalized Unpacking and Parameter Pack Slicing" >  >() },
    {  536u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Implicit Return Type and Allowing Anonymous Types as Return Values" >  >() },
    {  537u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Allow Attributes on Template Explicit Instantiations" >  >() },
    {  538u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "A Qualified Replacement for #pragma once" >  >() },
    {  539u, RevList< Rev< 0u, Arr64< Hash< "Author2082">() >(),  "A Proposal to add wide_int Class" > , Rev< 1u, Arr64< Hash< "Author1620">() >(),  "A Proposal to add wide_int Class" > , Rev< 2u, Arr64< Hash< "Author116">() >(),  "A Proposal to add wide_int Class" > , Rev< 3u, Arr64< Hash< "Author1431">() >(),  "A Proposal to add wide_int Class" > , Rev< 4u, Arr64< Hash< "Author1807">() >(),  "A Proposal to add wide_int Class" > , Rev< 5u, Arr64< Hash< "Author816">() >(),  "A Proposal to add wideint Template Class" >  >() },
    {  540u, RevList< Rev< 0u, Arr64< Hash< "Author1084">() >(),  "A Proposal to Add split/join of string/string_view to the Standard Library" > , Rev< 1u, Arr64< Hash< "Author2062">() >(),  "A Proposal to Add split/join of string/string_view to the Standard Library" >  >() },
    {  541u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Ranges TS: Post-Increment on Input and Output Iterators" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Ranges TS: Post-Increment on Input and Output Iterators" >  >() },
    {  542u, RevList< Rev< 0u, Arr64< Hash< "Author2006">() >(),  "Support for contract based programming in C++" > , Rev< 1u, Arr64< Hash< "Author544">() >(),  "Support for contract based programming in C++" > , Rev< 2u, Arr64< Hash< "Author600">() >(),  "Support for contract based programming in C++" > , Rev< 3u, Arr64< Hash< "Author1586">() >(),  "Support for contract based programming in C++" > , Rev< 4u, Arr64< Hash< "Author463">() >(),  "Support for contract based programming in C++" > , Rev< 5u, Arr64< Hash< "Author441">() >(),  "Support for contract based programming in C++" >  >() },
    {  543u, RevList< Rev< 0u, Arr64< Hash< "Author779">() >(),  "Saturation arithmetic" > , Rev< 1u, Arr64< Hash< "Author1991">() >(),  "Saturation arithmetic" > , Rev< 2u, Arr64< Hash< "Author1003">() >(),  "Saturation arithmetic" > , Rev< 3u, Arr64< Hash< "Author2015">() >(),  "Saturation arithmetic" >  >() },
    {  544u, RevList< Rev< 0u, Arr64< Hash< "Author416">() >(),  "User Injection of Filesystems" >  >() },
    {  545u, RevList< Rev< 0u, Arr64< Hash< "Andrey Semashev">() >(),  "Title778" >  >() },
    {  546u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0546r0 : Span - foundation for the future" > , Rev< 1u, Arr64< Hash< "H. Carter">() >(),  "P0546r1 : Span - foundation for the future" > , Rev< 2u, Arr64< Hash< "H. Carter">() >(),  "P0546r2 : Span - foundation for the future" >  >() },
    {  547u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Ranges TS: Assorted Object Concept Fixes" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Ranges TS: Assorted Object Concept Fixes" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Ranges TS: Assorted Object Concept Fixes" >  >() },
    {  548u, RevList< Rev< 0u, Arr64< Hash< "Author500">() >(),  "commontype and duration" > , Rev< 1u, Arr64< Hash< "Author102">() >(),  "commontype and duration" >  >() },
    {  549u, RevList< Rev< 0u, Arr64< Hash< "Author1158">() >(),  "Adjuncts to std::hash" > , Rev< 1u, Arr64< Hash< "Author858">() >(),  "Adjuncts to std::hash" > , Rev< 2u, Arr64< Hash< "Author1026">() >(),  "Adjuncts to std::hash" > , Rev< 3u, Arr64< Hash< "Author883">() >(),  "Adjuncts to std::hash" > , Rev< 4u, Arr64< Hash< "Author1656">() >(),  "Adjuncts to std::hash" > , Rev< 5u, Arr64< Hash< "Author568">() >(),  "Adjuncts to std::hash" > , Rev< 6u, Arr64< Hash< "Author803">() >(),  "Adjuncts to std::hash" > , Rev< 7u, Arr64< Hash< "Author978">() >(),  "Adjuncts to std::hash" >  >() },
    {  550u, RevList< Rev< 0u, Arr64< Hash< "Author1449">() >(),  "Transformation Trait uncvref" > , Rev< 1u, Arr64< Hash< "Author753">() >(),  "Transformation Trait uncvref" > , Rev< 2u, Arr64< Hash< "Author1576">() >(),  "Transformation Trait removecvref" >  >() },
    {  551u, RevList< Rev< 0u, Arr64< Hash< "Author875">() >(),  "Thou Shalt Not Specialize std Function Templates!" > , Rev< 1u, Arr64< Hash< "Author697">() >(),  "Thou Shalt Not Specialize std Function Templates!" > , Rev< 2u, Arr64< Hash< "Author574">() >(),  "Thou Shalt Not Specialize std Function Templates!" > , Rev< 3u, Arr64< Hash< "Author982">() >(),  "Thou Shalt Not Specialize std Function Templates!" >  >() },
    {  552u, RevList< Rev< 0u, Arr64< Hash< "Author145">() >(),  "enableif vs. requires: A Case Study" >  >() },
    {  553u, RevList< Rev< 0u, Arr64< Hash< "Author45">() >(),  "Bit operations" > , Rev< 1u, Arr64< Hash< "Author150">() >(),  "Bit operations" > , Rev< 2u, Arr64< Hash< "Author626">() >(),  "Bit operations" > , Rev< 3u, Arr64< Hash< "Author1753">() >(),  "Bit operations" > , Rev< 4u, Arr64< Hash< "Author1942">() >(),  "Bit operations" >  >() },
    {  554u, RevList< Rev< 0u, Arr64< Hash< "Author930">() >(),  "Title752" > , Rev< 1u, Arr64< Hash< "Author919">() >(),  "p0554r1" >  >() },
    {  555u, RevList< Rev< 0u, Arr64< Hash< "Axel Naumann">() >(),  "string_view for source_location" >  >() },
    {  556u, RevList< Rev< 0u, Arr64< Hash< "Author1195">() >(),  "Integral power-of-2 operations" > , Rev< 1u, Arr64< Hash< "Author1793">() >(),  "Integral power-of-2 operations" > , Rev< 2u, Arr64< Hash< "Author1537">() >(),  "Integral power-of-2 operations" > , Rev< 3u, Arr64< Hash< "Author601">() >(),  "Integral power-of-2 operations" >  >() },
    {  557u, RevList< Rev< 0u, Arr64< Hash< "Author661">() >(),  "Title535" >  >() },
    {  558u, RevList< Rev< 0u, Arr64< Hash< "Author890">() >(),  "Title719" > , Rev< 1u, Arr64< Hash< "Author359">() >(),  "Title303" >  >() },
    {  559u, RevList< Rev< 0u, Arr64< Hash< "Author1539">() >(),  "Title1192" >  >() },
    {  560u, RevList< Rev< 0u, Arr64< Hash< "Miro Knejp">() >(),  "Class template deduction guides for \"diamond operators\"" >  >() },
    {  561u, RevList< Rev< 0u, Arr64< Hash< "Author2039">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 1u, Arr64< Hash< "Author2153">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 2u, Arr64< Hash< "Author1298">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 3u, Arr64< Hash< "Author2232">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 4u, Arr64< Hash< "Author176">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 5u, Arr64< Hash< "Author47">() >(),  "An RAII Interface for Deferred Reclamation" > , Rev< 6u, Arr64< Hash< "Author708">() >(),  "An RAII Interface for Deferred Reclamation" >  >() },
    {  562u, RevList< Rev< 0u, Arr64< Hash< "Author494">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1735">() >(),  "Initialization List Symmetry" > , Rev< 2u, Arr64< Hash< "Author951">() >(),  "Initialization List Symmetry" >  >() },
    {  563u, RevList< Rev< 0u, Arr64< Hash< "Author1947">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    {  564u, RevList< Rev< 0u, Arr64< Hash< "Author929">() >(),  "Wording for three-way comparisons" >  >() },
    {  565u, RevList< Rev< 0u, Arr64< Hash< "Author373">() >(),  "P0565" >  >() },
    {  566u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title358" > , Rev< 1u, Arr64< Hash< "Michael Wong">() >(),  "Title1366" > , Rev< 2u, Arr64< Hash< "Michael Wong">() >(),  "Title329" > , Rev< 3u, Arr64< Hash< "Michael">() >(),  "Title361" > , Rev< 4u, Arr64< Hash< "Michael Wong">() >(),  "Title1013" > , Rev< 5u, Arr64< Hash< "Michael Wong">() >(),  "Title1375" >  >() },
    {  567u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "index.html" > , Rev< 1u, Arr64< Hash< "Gordon Brown">() >(),  "P0567r1.html" >  >() },
    {  568u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title866" >  >() },
    {  569u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title350" >  >() },
    {  570u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1174" >  >() },
    {  571u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0571r0: Type Requirements for <numeric> Algorithms" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "p0571r1: Type Requirements for <numeric> Algorithms" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "Type Requirements for `<numeric>` Algorithms" >  >() },
    {  572u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "p0572r0: bit_sizeof and bit_offsetof" > , Rev< 1u, Arr64< Hash< "Alex Christensen">() >(),  "p0572r1: bit_sizeof and bit_offsetof" > , Rev< 2u, Arr64< Hash< "Alex Christensen">() >(),  "p0572R2: Static reflection of bit fields" >  >() },
    {  573u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "abbreviated lambdas" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Abbreviated Lambdas for Fun and Profit" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Abbreviated Lambdas for Fun and Profit" >  >() },
    {  574u, RevList< Rev< 0u, Arr64< Hash< "Anthony">() >(),  "Algorithm Complexity Constraints and Parallel Overloads" > , Rev< 1u, Arr64< Hash< "Anthony">() >(),  "P0574r1: Algorithm Complexity Constraints and Parallel Overloads" >  >() },
    {  575u, RevList< Rev< 0u, Arr64< Hash< "Author456">() >(),  "Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author205">() >(),  "Core \"ready\" Issues" > , Rev< 2u, Arr64< Hash< "Author2195">() >(),  "Core \"ready\" Issues" >  >() },
    {  576u, RevList< Rev< 0u, Arr64< Hash< "Author767">() >(),  "Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author748">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  577u, RevList< Rev< 0u, Arr64< Hash< "Author593">() >(),  "Title483" > , Rev< 1u, Arr64< Hash< "Author1613">() >(),  "Title1250" >  >() },
    {  578u, RevList< Rev< 0u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Title1703" > , Rev< 1u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Title1070" >  >() },
    {  579u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Constexpr for <experimental/ranges/iterator>" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Constexpr for <experimental/ranges/iterator>" >  >() },
    {  581u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1457" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1400" >  >() },
    {  582u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title830" >  >() },
    {  583u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title542" >  >() },
    {  584u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1350" >  >() },
    {  586u, RevList< Rev< 0u, Arr64< Hash< "Federico Kircheis">() >(),  "Safe integral comparisons" > , Rev< 1u, Arr64< Hash< "Federico Kircheis">() >(),  "Safe integral comparisons" > , Rev< 2u, Arr64< Hash< "Federico Kircheis">() >(),  "Safe integral comparisons" >  >() },
    {  587u, RevList< Rev< 0u, Arr64< Hash< "Author470">() >(),  "Title395" >  >() },
    {  588u, RevList< Rev< 0u, Arr64< Hash< "Author75">() >(),  "Title76" > , Rev< 1u, Arr64< Hash< "Author1677">() >(),  "Simplifying implicit lambda capture" >  >() },
    {  589u, RevList< Rev< 0u, Arr64< Hash< "Author1280">() >(),  "p0589r0" >  >() },
    {  590u, RevList< Rev< 0u, Arr64< Hash< "Author1014">() >(),  "p0590r0" >  >() },
    {  591u, RevList< Rev< 0u, Arr64< Hash< "Author1804">() >(),  "P0591r0 | Utility functions to implement uses-allocator construction" > , Rev< 1u, Arr64< Hash< "Author1770">() >(),  "P0591r1 | Utility functions to implement uses-allocator construction" > , Rev< 2u, Arr64< Hash< "Author44">() >(),  "P0591r2 | Utility functions to implement uses-allocator construction" > , Rev< 3u, Arr64< Hash< "Author123">() >(),  "P0591r3 | Utility functions to implement uses-allocator construction" > , Rev< 4u, Arr64< Hash< "Author668">() >(),  "P0591r4 | Utility functions to implement uses-allocator construction" >  >() },
    {  592u, RevList< Rev< 0u, Arr64< Hash< "Author1077">() >(),  "To boldly suggest an overall plan for C++20" > , Rev< 1u, Arr64< Hash< "Author966">() >(),  "To boldly suggest an overall plan for C++23" > , Rev< 2u, Arr64< Hash< "Author1836">() >(),  "To boldly suggest an overall plan for C++23" > , Rev< 3u, Arr64< Hash< "Author2184">() >(),  "To boldly suggest an overall plan for C++23" > , Rev< 4u, Arr64< Hash< "Author1499">() >(),  "To boldly suggest an overall plan for C++23" > , Rev< 5u, Arr64< Hash< "Author2174">() >(),  "To boldly suggest an overall plan for C++26" >  >() },
    {  593u, RevList< Rev< 0u, Arr64< Hash< "Author1283">() >(),  "What to do with buffers that are not arrays, and undefined behavior thereof?" > , Rev< 1u, Arr64< Hash< "Richard Smith">() >(),  "p0593r1: Implicit creation of objects for low-level object manipulation" > , Rev< 2u, Arr64< Hash< "Richard Smith">() >(),  "p0593r2: Implicit creation of objects for low-level object manipulation" > , Rev< 3u, Arr64< Hash< "Richard Smith">() >(),  "Implicit creation of objects for low-level object manipulation" > , Rev< 4u, Arr64< Hash< "Richard Smith">() >(),  "Implicit creation of objects for low-level object manipulation" > , Rev< 5u, Arr64< Hash< "Richard Smith">() >(),  "Implicit creation of objects for low-level object manipulation" > , Rev< 6u, Arr64< Hash< "Richard Smith">() >(),  "Implicit creation of objects for low-level object manipulation" >  >() },
    {  594u, RevList< Rev< 0u, Arr64< Hash< "Author1641">() >(),  "Relative comparisons and std::less<T*>" >  >() },
    {  595u, RevList< Rev< 0u, Arr64< Hash< "Author1281">() >(),  "Title994" > , Rev< 1u, Arr64< Hash< "Author1313">() >(),  "std::is_constant_evaluated" > , Rev< 2u, Arr64< Hash< "Author450">() >(),  "std::is_constant_evaluated" >  >() },
    {  596u, RevList< Rev< 0u, Arr64< Hash< "Author587">() >(),  "Title478" > , Rev< 1u, Arr64< Hash< "Daveed Vandevoorde">() >(),  "Title772" >  >() },
    {  597u, RevList< Rev< 0u, Arr64< Hash< "Author76">() >(),  "Title77" >  >() },
    {  598u, RevList< Rev< 0u, Arr64< Hash< "Author2226">() >(),  "Title1702" >  >() },
    {  599u, RevList< Rev< 0u, Arr64< Hash< "Author291">() >(),  "Microsoft Word - P0599R0_hash_noexcept_170206.docx" > , Rev< 1u, Arr64< Hash< "Author786">() >(),  "P0599R1 noexcept for hash functions (US140)" >  >() },
    {  600u, RevList< Rev< 0u, Arr64< Hash< "Author918">() >(),  "Microsoft Word - P0600R0_nodiscard_in_the_library_170206.docx" > , Rev< 1u, Arr64< Hash< "Author1243">() >(),  "P0600R1 [[nodiscard]] in the library" >  >() },
    {  601u, RevList< Rev< 0u, Arr64< Hash< "Author1389">() >(),  "Establishing a direction for SIMD-enabled functions" >  >() },
    {  602u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "variant and optional should propagate copy/move triviality" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "variant and optional should propagate copy/move triviality" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "variant and optional should propagate copy/move triviality" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "variant and optional should propagate copy/move triviality" > , Rev< 4u, Arr64< Hash< "Zhihao Yuan">() >(),  "variant and optional should propagate copy/move triviality" >  >() },
    {  603u, RevList< Rev< 0u, Arr64< Hash< "Author1920">() >(),  "ISO/IEC JTC1/SC22/WG21p0603r0" >  >() },
    {  604u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Resolving GB 55, US 84, US 85, US 86" >  >() },
    {  606u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title498" >  >() },
    {  607u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Inline Variables for the Standard Library" >  >() },
    {  608u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "A sane variant converting constructor (LEWG 227)" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "A sane variant converting constructor - HackMD" > , Rev< 2u, Arr64< Hash< "Author1089">() >(),  "(Foswiki login) Html < Wg21rapperswil2018/StrawPolls < Foswiki" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "A sane variant converting constructor - HackMD" >  >() },
    {  609u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title988" > , Rev< 1u, Arr64< Hash< "Aaron Ballman">() >(),  "Title1029" > , Rev< 2u, Arr64< Hash< "Aaron Ballman">() >(),  "Title1005" > , Rev< 3u, Arr64< Hash< "Aaron Ballman">() >(),  "Title1651" >  >() },
    {  610u, RevList< Rev< 0u, Arr64< Hash< "Author1476">() >(),  "C++ Standard Library \"Review\" Issues Resolved in Kona" >  >() },
    {  611u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "More Better Operators" >  >() },
    {  612u, RevList< Rev< 0u, Arr64< Hash< "Author457">() >(),  "NB comment CH 2: volatile" >  >() },
    {  613u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0">() >(),  "GB15: Issue 2011 resolution" >  >() },
    {  614u, RevList< Rev< 0u, Arr64< Hash< "Author837">() >(),  "Range-based for statements with initializer" > , Rev< 1u, Arr64< Hash< "Author683">() >(),  "Range-based for statements with initializer" >  >() },
    {  615u, RevList< Rev< 0u, Arr64< Hash< "Author1823">() >(),  "Renaming for structured bindings" >  >() },
    {  616u, RevList< Rev< 0u, Arr64< Hash< "Author1030">() >(),  "Title825" >  >() },
    {  618u, RevList< Rev< 0u, Arr64< Hash< "Author1967">() >(),  "Deprecating <codecvt>" >  >() },
    {  619u, RevList< Rev< 0u, Arr64< Hash< "Author591">() >(),  "Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 1u, Arr64< Hash< "Author1746">() >(),  "Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 2u, Arr64< Hash< "Author1669">() >(),  "Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 3u, Arr64< Hash< "Author868">() >(),  "Reviewing Deprecated Facilities of C++17 for C++20" > , Rev< 4u, Arr64< Hash< "Author1609">() >(),  "Reviewing Deprecated Facilities of C++17 for C++20" >  >() },
    {  620u, RevList< Rev< 0u, Arr64< Hash< "Author1259">() >(),  "Drafting for class template argument deduction issues" >  >() },
    {  621u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Ready Ranges TS Issues" >  >() },
    {  622u, RevList< Rev< 0u, Arr64< Hash< "Author1627">() >(),  "Core \"ready\" Issues" >  >() },
    {  623u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0623r0: Final C++17 Parallel Algorithms Fixes" >  >() },
    {  624u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title422" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title827" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title1085" >  >() },
    {  625u, RevList< Rev< 0u, Arr64< Hash< "Author1227">() >(),  "C++ Standard Library Issues Resolved Directly In Kona" >  >() },
    {  627u, RevList< Rev< 0u, Arr64< Hash< "Melissa Mears">() >(),  "Attribute to mark unreachable code" > , Rev< 1u, Arr64< Hash< "Melissa Mears">() >(),  "Unreachable Attribute R1" > , Rev< 3u, Arr64< Hash< "Melissa Mears">() >(),  "Title1283" > , Rev< 5u, Arr64< Hash< "Melissa Mears">() >(),  "Title449" > , Rev< 6u, Arr64< Hash< "Melissa Mears">() >(),  "Title147" >  >() },
    {  629u, RevList< Rev< 0u, Arr64< Hash< "Author2157">() >(),  "Title1661" >  >() },
    {  630u, RevList< Rev< 0u, Arr64< Hash< "Author833">() >(),  "To boldly suggest a pub crawl for C++ Toronto" >  >() },
    {  631u, RevList< Rev< 0u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title1572" > , Rev< 1u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title761" > , Rev< 2u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title886" > , Rev< 3u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title1602" > , Rev< 4u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title622" > , Rev< 5u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title676" > , Rev< 6u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title923" > , Rev< 7u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title1222" > , Rev< 8u, Arr64< Hash< "Lev Minkovsky">() >(),  "Title1242" >  >() },
    {  632u, RevList< Rev< 0u, Arr64< Hash< "Author1861">() >(),  "Proposal of [[uninitialized]] attribute" >  >() },
    {  633u, RevList< Rev< 0u, Arr64< Hash< "Daveed Vandevoorde">() >(),  "Title710" >  >() },
    {  634u, RevList< Rev< 0u, Arr64< Hash< "Author364">() >(),  "Untitled" > , Rev< 1u, Arr64< Hash< "Author842">() >(),  "Down with typename!" > , Rev< 2u, Arr64< Hash< "Author1791">() >(),  "Down with typename!" > , Rev< 3u, Arr64< Hash< "Author23">() >(),  "Down with typename!" >  >() },
    {  635u, RevList< Rev< 0u, Arr64< Hash< "Dan Raviv">() >(),  "p0635r0 - c_array addition proposal (090617).pages" >  >() },
    {  636u, RevList< Rev< 0u, Arr64< Hash< "Author1730">() >(),  "Changes between C++14 and C++17" > , Rev< 1u, Arr64< Hash< "Author248">() >(),  "Changes between C++14 and C++17" > , Rev< 2u, Arr64< Hash< "Author451">() >(),  "Changes between C++14 and C++17" > , Rev< 3u, Arr64< Hash< "Author688">() >(),  "Changes between C++14 and C++17" >  >() },
    {  637u, RevList< Rev< 0u, Arr64< Hash< "Author1473">() >(),  "Capture *this with initializer" >  >() },
    {  638u, RevList< Rev< 0u, Arr64< Hash< "Ed Schouten">() >(),  "Title859" >  >() },
    {  639u, RevList< Rev< 0u, Arr64< Hash< "Author1686">() >(),  "Changing attack vector of the constexpr_vector" >  >() },
    {  640u, RevList< Rev< 0u, Arr64< Hash< "Emil Dotchevski">() >(),  "Title1133" >  >() },
    {  641u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" > , Rev< 2u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)" >  >() },
    {  642u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1249" > , Rev< 1u, Arr64< Hash< "Mingxin Wang">() >(),  "Title530" > , Rev< 2u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1062" > , Rev< 3u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1018" > , Rev< 4u, Arr64< Hash< "Mingxin Wang">() >(),  "Title73" >  >() },
    {  643u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title154" >  >() },
    {  644u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Forward without forward" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Forward without forward" >  >() },
    {  645u, RevList< Rev< 0u, Arr64< Hash< "Author872">() >(),  "Text Formatting" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 5u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 7u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 9u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" > , Rev< 10u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Formatting" >  >() },
    {  646u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title619" > , Rev< 1u, Arr64< Hash< "Marc Mutz">() >(),  "Title1237" >  >() },
    {  647u, RevList< Rev< 0u, Arr64< Hash< "Author1594">() >(),  "Title1235" > , Rev< 1u, Arr64< Hash< "Author1373">() >(),  "Title1065" >  >() },
    {  648u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0648r0" >  >() },
    {  649u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0649r0" >  >() },
    {  650u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0650r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0650r1" > , Rev< 2u, Arr64< Hash< "Vicente J">() >(),  "p0650r2" >  >() },
    {  651u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Switch the Ranges TS to Use Variable Concepts" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Switch the Ranges TS to Use Variable Concepts" >  >() },
    {  652u, RevList< Rev< 0u, Arr64< Hash< "Author1171">() >(),  "Concurrent associative data structure with unsynchronized view" > , Rev< 1u, Arr64< Hash< "Author888">() >(),  "Concurrent associative data structure with unsynchronized view" > , Rev< 2u, Arr64< Hash< "Author1219">() >(),  "Concurrent associative data structure with unsynchronized view" > , Rev< 3u, Arr64< Hash< "Author2056">() >(),  "Concurrent associative data structure with unsynchronized view" >  >() },
    {  653u, RevList< Rev< 0u, Arr64< Hash< "Glen Joseph">() >(),  "pointer_traits utility to convert to raw pointer" > , Rev< 1u, Arr64< Hash< "Glen Joseph">() >(),  "Utility to convert a pointer to a raw pointer" > , Rev< 2u, Arr64< Hash< "Glen Joseph">() >(),  "Utility to convert a pointer to a raw pointer" >  >() },
    {  654u, RevList< Rev< 0u, Arr64< Hash< "Lo\xEF\x63\x20Joly">() >(),  "Title1371" >  >() },
    {  655u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "visit<R>: Explicit Return Type for visit" > , Rev< 1u, Arr64< Hash< "Michael Park">() >(),  "visit<R>: Explicit Return Type for visit" >  >() },
    {  656u, RevList< Rev< 0u, Arr64< Hash< "Author126">() >(),  "Reducing <ratio>" >  >() },
    {  657u, RevList< Rev< 0u, Arr64< Hash< "Author1918">() >(),  "Deprecate Certain Declarations in the Global Namespace" > , Rev< 1u, Arr64< Hash< "Author1507">() >(),  "Deprecate Certain Declarations in the Global Namespace" > , Rev< 2u, Arr64< Hash< "Author1905">() >(),  "Deprecate Certain Declarations in the Global Namespace" >  >() },
    {  658u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "P0658R0 -- Proposal for adding alias declarations to concepts" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "wg21 | For documenting all WG21-related proposals" >  >() },
    {  659u, RevList< Rev< 0u, Arr64< Hash< "Author2084">() >(),  "Microsoft Word - P0659R0_futurestatus_draft_170613.docx" >  >() },
    {  660u, RevList< Rev< 0u, Arr64< Hash< "Author869">() >(),  "P0660R0" > , Rev< 2u, Arr64< Hash< "Author1349">() >(),  "P0660R3" > , Rev< 3u, Arr64< Hash< "Author276">() >(),  "P0660R3" > , Rev< 4u, Arr64< Hash< "Author1225">() >(),  "C++ International Standard" > , Rev< 5u, Arr64< Hash< "Author479">() >(),  "C++ International Standard" > , Rev< 6u, Arr64< Hash< "Author401">() >(),  "P0660R6 A Cooperatively Interruptible Joining Thread, Rev 6" > , Rev< 7u, Arr64< Hash< "Author1913">() >(),  "P0660R7 Interrupt Tokens and a Joining Thread, Rev 7" > , Rev< 8u, Arr64< Hash< "Author764">() >(),  "C++ International Standard" > , Rev< 9u, Arr64< Hash< "Author13">() >(),  "P0660R9" > , Rev< 10u, Arr64< Hash< "Author68">() >(),  "P0660" >  >() },
    {  661u, RevList< Rev< 0u, Arr64< Hash< "Allan Deutsch">() >(),  "Title773" >  >() },
    {  662u, RevList< Rev< 0u, Arr64< Hash< "Author863">() >(),  "Working Draft, C++ Extensions for Ranges" >  >() },
    {  663u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Ready Issues for the July 2017 (Toronto) meeting" >  >() },
    {  664u, RevList< Rev< 0u, Arr64< Hash< "Author234">() >(),  "C++ Coroutine TS Issues" > , Rev< 1u, Arr64< Hash< "Author2095">() >(),  "C++ Coroutine TS Issues" > , Rev< 2u, Arr64< Hash< "Author51">() >(),  "C++ Coroutine TS Issues" > , Rev< 3u, Arr64< Hash< "Author147">() >(),  "C++ Coroutine TS Issues" > , Rev< 4u, Arr64< Hash< "Author1277">() >(),  "C++ Coroutine TS Issues" > , Rev< 5u, Arr64< Hash< "Author414">() >(),  "C++ Coroutine TS Issues" > , Rev< 6u, Arr64< Hash< "Author864">() >(),  "C++ Coroutine TS Issues" > , Rev< 7u, Arr64< Hash< "Author2102">() >(),  "C++ Coroutine TS Issues" > , Rev< 8u, Arr64< Hash< "Author2234">() >(),  "C++ Coroutine TS Issues" >  >() },
    {  665u, RevList< Rev< 0u, Arr64< Hash< "Tristan Brindle">() >(),  "Title41" > , Rev< 1u, Arr64< Hash< "Tristan Brindle">() >(),  "Title878" >  >() },
    {  666u, RevList< Rev< 0u, Arr64< Hash< "Alasdair Mackintosh">() >(),  "C++ Latches and Barriers" > , Rev< 1u, Arr64< Hash< "Olivier Giroux">() >(),  "P0666R1" > , Rev< 2u, Arr64< Hash< "Olivier Giroux">() >(),  "P0666R2" >  >() },
    {  667u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Moving std::future extensions forward" >  >() },
    {  668u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Moving std::future extensions forward" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Revising the C++ memory model" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Revising the C++ memory model" > , Rev< 3u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Revising the C++ memory model" > , Rev< 4u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Revising the C++ memory model" > , Rev< 5u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Revising the C++ memory model" >  >() },
    {  669u, RevList< Rev< 0u, Arr64< Hash< "Author581">() >(),  "Title473" >  >() },
    {  670u, RevList< Rev< 0u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection of functions" > , Rev< 1u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection of functions" > , Rev< 2u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Static reflection of functions" > , Rev< 3u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Function reflection" > , Rev< 4u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Function reflection" >  >() },
    {  671u, RevList< Rev< 0u, Arr64< Hash< "Axel Naumann">() >(),  "Parametric Functions" > , Rev< 1u, Arr64< Hash< "Axel Naumann">() >(),  "Function Arguments That Speak" > , Rev< 2u, Arr64< Hash< "Axel Naumann">() >(),  "Self-explanatory Function Arguments" >  >() },
    {  672u, RevList< Rev< 0u, Arr64< Hash< "Joel Falcou">() >(),  "Title63" >  >() },
    {  673u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title367" >  >() },
    {  674u, RevList< Rev< 0u, Arr64< Hash< "Author830">() >(),  "Extending make_shared to Support Arrays" > , Rev< 1u, Arr64< Hash< "Author780">() >(),  "Extending make_shared to Support Arrays" >  >() },
    {  675u, RevList< Rev< 0u, Arr64< Hash< "Author2166">() >(),  "Title1667" >  >() },
    {  676u, RevList< Rev< 0u, Arr64< Hash< "Felix Petriconi">() >(),  "future_proposal_P0676R0" >  >() },
    {  678u, RevList< Rev< 0u, Arr64< Hash< "Author1637">() >(),  "Title1266" >  >() },
    {  679u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Title607" >  >() },
    {  680u, RevList< Rev< 0u, Arr64< Hash< "Torvald Riegel">() >(),  "Title653" >  >() },
    {  681u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1228" >  >() },
    {  682u, RevList< Rev< 0u, Arr64< Hash< "Author1799">() >(),  "Repairing elementary string conversions (LWG 2955)" > , Rev< 1u, Arr64< Hash< "Author1257">() >(),  "Repairing elementary string conversions (LWG 2955)" >  >() },
    {  683u, RevList< Rev< 0u, Arr64< Hash< "Author821">() >(),  "Default member initializers for bit-fields" > , Rev< 1u, Arr64< Hash< "Author1727">() >(),  "Default member initializers for bit-fields (revision 1)" >  >() },
    {  684u, RevList< Rev< 0u, Arr64< Hash< "Author224">() >(),  "Title182" > , Rev< 1u, Arr64< Hash< "Author831">() >(),  "Title659" > , Rev< 2u, Arr64< Hash< "Author1416">() >(),  "Title1101" >  >() },
    {  685u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title263" >  >() },
    {  686u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title261" >  >() },
    {  687u, RevList< Rev< 0u, Arr64< Hash< "Ruyman Reyes">() >(),  "Title1041" >  >() },
    {  688u, RevList< Rev< 0u, Arr64< Hash< "Chris Kohlhoff">() >(),  "Title1166" >  >() },
    {  689u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1618" >  >() },
    {  690u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "p0690r0: Tearable Atomics" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "p0690r1: Tearable Atomics" >  >() },
    {  691u, RevList< Rev< 0u, Arr64< Hash< "Author322">() >(),  "Title272" >  >() },
    {  692u, RevList< Rev< 0u, Arr64< Hash< "Author1921">() >(),  "Access Checking on Specializations" > , Rev< 1u, Arr64< Hash< "Author2156">() >(),  "Access Checking on Specializations" >  >() },
    {  694u, RevList< Rev< 0u, Arr64< Hash< "Author1031">() >(),  "Title828" >  >() },
    {  695u, RevList< Rev< 0u, Arr64< Hash< "Author1762">() >(),  "Title1368" >  >() },
    {  696u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Remove abbreviated functions and template-introduction syntax from the Concepts TS" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "Remove abbreviated functions and template-introduction syntax from the Concepts TS" >  >() },
    {  697u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title32" >  >() },
    {  698u, RevList< Rev< 0u, Arr64< Hash< "Author1643">() >(),  "C++ Standard Library Issues to be moved in Toronto" >  >() },
    {  699u, RevList< Rev< 0u, Arr64< Hash< "Author282">() >(),  "C++ Standard Library Issues Resolved Directly In Toronto" >  >() },
    {  700u, RevList< Rev< 0u, Arr64< Hash< "Author331">() >(),  "Title277" >  >() },
    {  701u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "P0701r0: Back to the std2::future" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "p0701r1: Back to the std2::future Part II" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "p0701r2: Back to the std2::future Part II" >  >() },
    {  702u, RevList< Rev< 0u, Arr64< Hash< "Mike Spertus">() >(),  "Language support for Constructor Template Argument Deduction" > , Rev< 1u, Arr64< Hash< "Mike Spertus">() >(),  "Language support for Constructor Template Argument Deduction" >  >() },
    {  703u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Title1107" >  >() },
    {  704u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Fixing const-qualified pointers to members" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Fixing const-qualified pointers to members" >  >() },
    {  705u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title1504" >  >() },
    {  706u, RevList< Rev< 0u, Arr64< Hash< "Author678">() >(),  "Efficient headers for modules (or not)" >  >() },
    {  707u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1704" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title1170" > , Rev< 2u, Arr64< Hash< "Herb Sutter">() >(),  "Title206" > , Rev< 3u, Arr64< Hash< "Herb Sutter">() >(),  "Title1360" > , Rev< 4u, Arr64< Hash< "Herb Sutter">() >(),  "Title242" > , Rev< 5u, Arr64< Hash< "Herb Sutter">() >(),  "Title356" >  >() },
    {  709u, RevList< Rev< 0u, Arr64< Hash< "Outcome is">() >(),  "Title970" > , Rev< 1u, Arr64< Hash< "Outcome is">() >(),  "Title755" > , Rev< 2u, Arr64< Hash< "Outcome is">() >(),  "Title1631" > , Rev< 3u, Arr64< Hash< "Outcome is">() >(),  "Title316" > , Rev< 4u, Arr64< Hash< "Outcome is">() >(),  "Title673" >  >() },
    {  710u, RevList< Rev< 0u, Arr64< Hash< "Author811">() >(),  "Core \"ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author2077">() >(),  "Core \"ready\" Issues" >  >() },
    {  711u, RevList< Rev< 0u, Arr64< Hash< "Author2219">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  712u, RevList< Rev< 0u, Arr64< Hash< "Author1982">() >(),  "p0712" >  >() },
    {  713u, RevList< Rev< 0u, Arr64< Hash< "Author2162">() >(),  "Untitled" > , Rev< 1u, Arr64< Hash< "Author1728">() >(),  "Title1336" >  >() },
    {  714u, RevList< Rev< 0u, Arr64< Hash< "Author1017">() >(),  "Title812" >  >() },
    {  715u, RevList< Rev< 0u, Arr64< Hash< "Author1439">() >(),  "Title1118" >  >() },
    {  716u, RevList< Rev< 0u, Arr64< Hash< "Author1720">() >(),  "Title1328" >  >() },
    {  717u, RevList< Rev< 0u, Arr64< Hash< "Author100">() >(),  "Title93" > , Rev< 1u, Arr64< Hash< "Author370">() >(),  "Title315" >  >() },
    {  718u, RevList< Rev< 0u, Arr64< Hash< "Author1745">() >(),  "Revising atomic_shared_ptr for C++20" > , Rev< 2u, Arr64< Hash< "Author1495">() >(),  "Revising atomic_shared_ptr for C++20" >  >() },
    {  721u, RevList< Rev< 0u, Arr64< Hash< "Author1862">() >(),  "Title1444" >  >() },
    {  722u, RevList< Rev< 0u, Arr64< Hash< "Author227">() >(),  "ISO/IEC JTC1/SC22/WG21p0722r0" > , Rev< 1u, Arr64< Hash< "Author1006">() >(),  "Title808" > , Rev< 2u, Arr64< Hash< "Author1304">() >(),  "Efficient sized delete for variable sized classes" > , Rev< 3u, Arr64< Hash< "Author1333">() >(),  "Efficient sized delete for variable sized classes" >  >() },
    {  723u, RevList< Rev< 0u, Arr64< Hash< "Author946">() >(),  "Response to Clarifying the status of feature test macros" >  >() },
    {  724u, RevList< Rev< 0u, Arr64< Hash< "Author828">() >(),  "Merge the Concepts TS Working Draft into the C++20 working draft" >  >() },
    {  725u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Remove the requirement for constrained-type-specifiers to be deduced to the same type from the Concepts TS" >  >() },
    {  726u, RevList< Rev< 0u, Arr64< Hash< "Author1202">() >(),  "Does the Concepts TS Improve on C++17?" >  >() },
    {  727u, RevList< Rev< 0u, Arr64< Hash< "Author2027">() >(),  "Core Issue 1299: Temporary objects vs temporary expressions" >  >() },
    {  728u, RevList< Rev< 0u, Arr64< Hash< "Author482">() >(),  "Wording for Networking PDTS ballot comment 005" >  >() },
    {  729u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Proposed wording for Networking TS NB comment GB 9" >  >() },
    {  730u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "Options for addressing requires-clause syntax ambiguities" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "requires-clause syntax ambiguities: wording to apply custom grammar" >  >() },
    {  731u, RevList< Rev< 0u, Arr64< Hash< "Author1309">() >(),  "Title1014" >  >() },
    {  732u, RevList< Rev< 0u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1227" > , Rev< 1u, Arr64< Hash< "Jeff Snyder">() >(),  "Title963" > , Rev< 2u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1645" >  >() },
    {  734u, RevList< Rev< 0u, Arr64< Hash< "Author1621">() >(),  "C++ Technical Specification" >  >() },
    {  735u, RevList< Rev< 0u, Arr64< Hash< "Will Deacon">() >(),  "Interaction of memory_order_consume with release sequences" > , Rev< 1u, Arr64< Hash< "Will Deacon">() >(),  "Interaction of memory_order_consume with release sequences" >  >() },
    {  736u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "Nameless parameters and unutterable specializations" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "Nameless parameters and unutterable specializations" >  >() },
    {  737u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0737r0 : Execution Context of Execution Agents" >  >() },
    {  738u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "I Stream, You Stream, We All Stream for istream_iterator" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "I Stream, You Stream, We All Stream for istream_iterator" > , Rev< 2u, Arr64< Hash< "Casey Carter">() >(),  "I Stream, You Stream, We All Stream for istream_iterator" >  >() },
    {  739u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Some improvements to class template argument deduction integration into the standard library" >  >() },
    {  740u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Ranges TS Immediate Issues from the July 2017 (Toronto) meeting" >  >() },
    {  742u, RevList< Rev< 0u, Arr64< Hash< "Author346">() >(),  "Wording for Networking PDTS ballot comment resolutions" >  >() },
    {  745u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title482" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title1295" >  >() },
    {  746u, RevList< Rev< 0u, Arr64< Hash< "Author740">() >(),  "Wording for Networking PDTS ballot comment 011 (US-10)" >  >() },
    {  747u, RevList< Rev< 0u, Arr64< Hash< "Author1129">() >(),  "Wording for Networking PDTS ballot comments 026 (GB-15) and 027 (GB-16)" > , Rev< 1u, Arr64< Hash< "Author1951">() >(),  "Wording for Networking PDTS ballot comment 026 (GB-15), but not 027 (GB-16)" >  >() },
    {  748u, RevList< Rev< 0u, Arr64< Hash< "Author711">() >(),  "Wording for Networking PDTS ballot comments on reentrancy" >  >() },
    {  749u, RevList< Rev< 0u, Arr64< Hash< "Author928">() >(),  "Title748" >  >() },
    {  750u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "p0750r0: Consume" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "p0750r1: Consume" >  >() },
    {  752u, RevList< Rev< 0u, Arr64< Hash< "Author1372">() >(),  "Title1064" >  >() },
    {  753u, RevList< Rev< 0u, Arr64< Hash< "Author895">() >(),  "Title724" > , Rev< 1u, Arr64< Hash< "Author1683">() >(),  "Title1308" > , Rev< 2u, Arr64< Hash< "Author1541">() >(),  "Title1194" >  >() },
    {  754u, RevList< Rev< 0u, Arr64< Hash< "Author952">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1994">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash< "Author662">() >(),  "Version Header 06 P0754R2" >  >() },
    {  756u, RevList< Rev< 0u, Arr64< Hash< "Author1685">() >(),  "Lambda syntax should be more liberal in what it accepts" >  >() },
    {  757u, RevList< Rev< 0u, Arr64< Hash< "Author841">() >(),  "regex_iterator should be iterable" >  >() },
    {  758u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Implicit conversion traits and utility functions" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Implicit conversion traits and utility functions" >  >() },
    {  759u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "fpos requirements" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "fpos requirements" >  >() },
    {  761u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "Title1586" > , Rev< 1u, Arr64< Hash< "Jared Hoberock">() >(),  "Title883" > , Rev< 2u, Arr64< Hash< "Jared Hoberock">() >(),  "Title826" >  >() },
    {  762u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title432" >  >() },
    {  766u, RevList< Rev< 0u, Arr64< Hash< "Author1590">() >(),  "Fixing small-ish functionality gaps in constraints" > , Rev< 1u, Arr64< Hash< "Author1273">() >(),  "Fixing small-ish functionality gaps in constraints" >  >() },
    {  767u, RevList< Rev< 0u, Arr64< Hash< "Author472">() >(),  "Expunge POD" > , Rev< 1u, Arr64< Hash< "Author1050">() >(),  "Deprecate POD" >  >() },
    {  768u, RevList< Rev< 0u, Arr64< Hash< "Author1658">() >(),  "Library Support for the Spaceship (Comparison) Operator" > , Rev< 1u, Arr64< Hash< "Author705">() >(),  "Library Support for the Spaceship (Comparison) Operator" >  >() },
    {  769u, RevList< Rev< 0u, Arr64< Hash< "Dan Raviv">() >(),  "shift proposal P0769R0.pages" > , Rev< 1u, Arr64< Hash< "Dan Raviv">() >(),  "shift proposal P0769R1.pages" > , Rev< 2u, Arr64< Hash< "Dan Raviv">() >(),  "shift proposal P0769R2.pages" >  >() },
    {  770u, RevList< Rev< 0u, Arr64< Hash< "Author1342">() >(),  "Title1033" >  >() },
    {  771u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title560" > , Rev< 1u, Arr64< Hash< "Nevin ">() >(),  "Title66" >  >() },
    {  772u, RevList< Rev< 0u, Arr64< Hash< "Nat Goodspeed">() >(),  "Title511" > , Rev< 1u, Arr64< Hash< "Nat Goodspeed">() >(),  "Title1178" >  >() },
    {  773u, RevList< Rev< 0u, Arr64< Hash< "Author1776">() >(),  "Towards meaningful fancy pointers" >  >() },
    {  774u, RevList< Rev< 0u, Arr64< Hash< "Author1164">() >(),  "Module Declaration Location" >  >() },
    {  775u, RevList< Rev< 0u, Arr64< Hash< "Author332">() >(),  "Module Partitions" >  >() },
    {  776u, RevList< Rev< 0u, Arr64< Hash< "Author486">() >(),  "Rebase the Parallelism TS onto the C++17 Standard" > , Rev< 1u, Arr64< Hash< "Author300">() >(),  "Rebase the Parallelism TS onto the C++17 Standard" >  >() },
    {  777u, RevList< Rev< 0u, Arr64< Hash< "Author498">() >(),  "Treating Unnecessary decay" > , Rev< 1u, Arr64< Hash< "Author2127">() >(),  "Treating Unnecessary decay" >  >() },
    {  778u, RevList< Rev< 0u, Arr64< Hash< "Author723">() >(),  "Module Names" >  >() },
    {  779u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title630" >  >() },
    {  780u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Pack expansion in lambda init-capture" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Pack expansion in lambda init-capture" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Pack expansion in lambda init-capture" >  >() },
    {  781u, RevList< Rev< 0u, Arr64< Hash< "Author896">() >(),  "A Modern C++ Signature for Main" >  >() },
    {  782u, RevList< Rev< 0u, Arr64< Hash< "Author384">() >(),  "A Case for Simplifying/Improving Natural Syntax Concepts" > , Rev< 1u, Arr64< Hash< "Author1380">() >(),  "Title1071" > , Rev< 2u, Arr64< Hash< "Author1910">() >(),  "Title1473" >  >() },
    {  783u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "P0783: Continuations without overcomplicating the future" >  >() },
    {  784u, RevList< Rev< 0u, Arr64< Hash< "Author78">() >(),  "Title79" > , Rev< 1u, Arr64< Hash< "Author63">() >(),  "Title67" > , Rev< 2u, Arr64< Hash< "Author1001">() >(),  "Title807" > , Rev< 3u, Arr64< Hash< "Author867">() >(),  "More constexpr containers" > , Rev< 4u, Arr64< Hash< "Author106">() >(),  "More constexpr containers" > , Rev< 5u, Arr64< Hash< "Author279">() >(),  "More constexpr containers" > , Rev< 6u, Arr64< Hash< "Author1072">() >(),  "More constexpr containers" > , Rev< 7u, Arr64< Hash< "Author2110">() >(),  "More constexpr containers" >  >() },
    {  785u, RevList< Rev< 0u, Arr64< Hash< "Author493">() >(),  "Runtime-sized arrays and a C++ wrapper" >  >() },
    {  786u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p0786r0" > , Rev< 1u, Arr64< Hash< "Vicente J">() >(),  "p0786r1" >  >() },
    {  787u, RevList< Rev< 0u, Arr64< Hash< "Author1470">() >(),  "Proclaimed Ownership Declarations" >  >() },
    {  788u, RevList< Rev< 0u, Arr64< Hash< "Author296">() >(),  "Standard Library Specification in a Concepts and Contracts World" > , Rev< 1u, Arr64< Hash< "Author805">() >(),  "Standard Library Specification in a Concepts and Contracts World" > , Rev< 2u, Arr64< Hash< "Author1141">() >(),  "Standard Library Specification in a Concepts and Contracts World" > , Rev< 3u, Arr64< Hash< "Author1969">() >(),  "Standard Library Specification in a Concepts and Contracts World" >  >() },
    {  789u, RevList< Rev< 0u, Arr64< Hash< "Author769">() >(),  "Range Adaptors and Utilities" > , Rev< 1u, Arr64< Hash< "Author850">() >(),  "Range Adaptors and Utilities" > , Rev< 2u, Arr64< Hash< "Author2005">() >(),  "Range Adaptors and Utilities" > , Rev< 3u, Arr64< Hash< "Author1608">() >(),  "Range Adaptors and Utilities" >  >() },
    {  790u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "library-operator-spaceship" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "Title162" > , Rev< 2u, Arr64< Hash< "David Stone">() >(),  "Title1634" >  >() },
    {  791u, RevList< Rev< 0u, Arr64< Hash< "Author834">() >(),  "Title662" >  >() },
    {  792u, RevList< Rev< 0u, Arr64< Hash< "Author419">() >(),  "Title359" > , Rev< 1u, Arr64< Hash< "Author371">() >(),  "Untitled" > , Rev< 2u, Arr64< Hash< "Author1958">() >(),  "Untitled" > , Rev< 3u, Arr64< Hash< "Author2204">() >(),  "Untitled" > , Rev< 4u, Arr64< Hash< "Author732">() >(),  "Untitled" > , Rev< 5u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a non-owning reference to a Callable" > , Rev< 6u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 7u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 8u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 9u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 10u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 11u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 12u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 13u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" > , Rev< 14u, Arr64< Hash< "Vittorio Romeo">() >(),  "function_ref: a type-erased callable reference - HackMD" >  >() },
    {  793u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1566" >  >() },
    {  794u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1666" >  >() },
    {  795u, RevList< Rev< 0u, Arr64< Hash< "Simon">() >(),  "Title42" >  >() },
    {  796u, RevList< Rev< 0u, Arr64< Hash< "Gordon">() >(),  "Title919" > , Rev< 1u, Arr64< Hash< "Gordon Brown">() >(),  "Title14" > , Rev< 2u, Arr64< Hash< "Gordon Brown">() >(),  "Title798" > , Rev< 3u, Arr64< Hash< "Gordon Brown">() >(),  "Title468" >  >() },
    {  797u, RevList< Rev< 0u, Arr64< Hash< "Matti">() >(),  "Title54" > , Rev< 1u, Arr64< Hash< "Matti Rintala">() >(),  "Title262" > , Rev< 2u, Arr64< Hash< "Matti Rintala">() >(),  "Title1298" >  >() },
    {  798u, RevList< Rev< 0u, Arr64< Hash< "Author1639">() >(),  "p0798r0: Monadic operations for std::optional" > , Rev< 2u, Arr64< Hash< "Simon Brand">() >(),  "p0798R2: Monadic operations for std::optional" > , Rev< 3u, Arr64< Hash< "Simon Brand">() >(),  "p0798R3: Monadic operations for std::optional" > , Rev< 4u, Arr64< Hash< "Simon Brand">() >(),  "p0798R4: Monadic operations for std::optional" > , Rev< 6u, Arr64< Hash< "Sy Brand">() >(),  "p0798R6: Monadic operations for std::optional" > , Rev< 8u, Arr64< Hash< "Sy Brand">() >(),  "Monadic operations for std::optional" >  >() },
    {  799u, RevList< Rev< 0u, Arr64< Hash< "Stephen">() >(),  "Title142" > , Rev< 1u, Arr64< Hash< "Stephen Michel">() >(),  "Baseline for Ed 2 of TR 24772" >  >() },
    {  800u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "wg21 | For documenting all WG21-related proposals" >  >() },
    {  801u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title966" >  >() },
    {  802u, RevList< Rev< 0u, Arr64< Hash< "Beman Dawes">() >(),  "Standard Library Concepts -" >  >() },
    {  803u, RevList< Rev< 0u, Arr64< Hash< "Author1420">() >(),  "Endian RFC" >  >() },
    {  804u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Impact of the Modules TS on the C++ tools ecosystem" >  >() },
    {  805u, RevList< Rev< 0u, Arr64< Hash< "Marshall Clow">() >(),  "Title723" > , Rev< 1u, Arr64< Hash< "Author1868">() >(),  "Comparing Containers" > , Rev< 2u, Arr64< Hash< "Author950">() >(),  "Comparing Containers" >  >() },
    {  806u, RevList< Rev< 0u, Arr64< Hash< "Author2199">() >(),  "Deprecate Implicit Capture of this" > , Rev< 1u, Arr64< Hash< "Author2225">() >(),  "Deprecate implicit capture of this via [=]" > , Rev< 2u, Arr64< Hash< "Author1146">() >(),  "Deprecate implicit capture of this via [=]" >  >() },
    {  807u, RevList< Rev< 0u, Arr64< Hash< "Author2022">() >(),  "An Adjective Syntax for Concepts" >  >() },
    {  808u, RevList< Rev< 0u, Arr64< Hash< "Author2066">() >(),  "Title1600" >  >() },
    {  809u, RevList< Rev< 0u, Arr64< Hash< "Author1616">() >(),  "Title1252" >  >() },
    {  810u, RevList< Rev< 0u, Arr64< Hash< "Ben Deane">() >(),  "Title1482" >  >() },
    {  811u, RevList< Rev< 0u, Arr64< Hash< "Author326">() >(),  "Well-behaved interpolation for numbers and pointers" > , Rev< 1u, Arr64< Hash< "Author1233">() >(),  "Well-behaved interpolation for numbers and pointers" > , Rev< 2u, Arr64< Hash< "Author1919">() >(),  "Well-behaved interpolation for numbers and pointers" > , Rev< 3u, Arr64< Hash< "Author2155">() >(),  "Well-behaved interpolation for numbers and pointers" >  >() },
    {  812u, RevList< Rev< 0u, Arr64< Hash< "Author1375">() >(),  "copy-list-initialization is inherently un-=" >  >() },
    {  813u, RevList< Rev< 0u, Arr64< Hash< "Author1085">() >(),  "Microsoft Word - P0813R0_retval_construct.docx" > , Rev< 1u, Arr64< Hash< "Author1743">() >(),  "P0813R1" >  >() },
    {  814u, RevList< Rev< 0u, Arr64< Hash< "Author2090">() >(),  "Microsoft Word - P0814R0_hash_combine.docx" > , Rev< 2u, Arr64< Hash< "Author1992">() >(),  "Microsoft Word - P0814R2_hash_combine.docx" >  >() },
    {  815u, RevList< Rev< 0u, Arr64< Hash< "Author824">() >(),  "C++ Standard Library Issues to be moved in Albuquerque" >  >() },
    {  816u, RevList< Rev< 0u, Arr64< Hash< "Author262">() >(),  "Title221" >  >() },
    {  817u, RevList< Rev< 0u, Arr64< Hash< "Author1339">() >(),  "Core \"ready\" Issues" >  >() },
    {  818u, RevList< Rev< 0u, Arr64< Hash< "Author2064">() >(),  "Core \"tentatively ready\" Issues" > , Rev< 1u, Arr64< Hash< "Author613">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  819u, RevList< Rev< 0u, Arr64< Hash< "Author2158">() >(),  "Microsoft Word - P0819R0_feature_macros.docx" >  >() },
    {  820u, RevList< Rev< 0u, Arr64< Hash< "Author1122">() >(),  "Title895" > , Rev< 1u, Arr64< Hash< "Author1736">() >(),  "Title1340" > , Rev< 2u, Arr64< Hash< "Author232">() >(),  "Title193" > , Rev< 3u, Arr64< Hash< "Author1998">() >(),  "Title1545" > , Rev< 4u, Arr64< Hash< "Author177">() >(),  "Title151" >  >() },
    {  821u, RevList< Rev< 0u, Arr64< Hash< "Author1712">() >(),  "Title1322" >  >() },
    {  822u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title977" >  >() },
    {  824u, RevList< Rev< 0u, Arr64< Hash< "Arthur">() >(),  "Title1038" > , Rev< 1u, Arr64< Hash< "Author278">() >(),  "Summary of SG14 discussion on <system_error>" >  >() },
    {  825u, RevList< Rev< 0u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "A friendlier tuple get" > , Rev< 1u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "A friendlier tuple get" >  >() },
    {  826u, RevList< Rev< 0u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "SFINAE-friendly std::bind" >  >() },
    {  827u, RevList< Rev< 0u, Arr64< Hash< "Author360">() >(),  "Title305" >  >() },
    {  828u, RevList< Rev< 0u, Arr64< Hash< "Author2123">() >(),  "Title1642" > , Rev< 1u, Arr64< Hash< "John McFarlane">() >(),  "Title1309" >  >() },
    {  829u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Title618" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Title959" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Title299" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Title1532" > , Rev< 4u, Arr64< Hash< "Ben Craig">() >(),  "Title1255" >  >() },
    {  830u, RevList< Rev< 0u, Arr64< Hash< "Author2051">() >(),  "Microsoft Word - P0830R0_requires_in_lib.docx" >  >() },
    {  831u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Keep alias syntax extendable" >  >() },
    {  832u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Module TS Wording Does Not Support Intended Use Case" >  >() },
    {  834u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "p0834r0: Lifting overload sets into objects" >  >() },
    {  835u, RevList< Rev< 0u, Arr64< Hash< "Author395">() >(),  "Adopt SD-6 feature macros into the C++20 working draft" >  >() },
    {  836u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "Title1267" > , Rev< 1u, Arr64< Hash< "Gordon Brown">() >(),  "Title1288" >  >() },
    {  837u, RevList< Rev< 0u, Arr64< Hash< "Author1123">() >(),  "Ruminations on modular macros" >  >() },
    {  838u, RevList< Rev< 0u, Arr64< Hash< "Author272">() >(),  "Title226" >  >() },
    {  839u, RevList< Rev< 0u, Arr64< Hash< "Author924">() >(),  "Recursive lambdas" >  >() },
    {  840u, RevList< Rev< 0u, Arr64< Hash< "Author802">() >(),  "Language support for empty objects" > , Rev< 1u, Arr64< Hash< "Author939">() >(),  "Language support for empty objects" > , Rev< 2u, Arr64< Hash< "Author1201">() >(),  "Language support for empty objects" >  >() },
    {  841u, RevList< Rev< 0u, Arr64< Hash< "Author641">() >(),  "ModulesAtScale" >  >() },
    {  842u, RevList< Rev< 0u, Arr64< Hash< "Author1037">() >(),  "Unknown Exports by Example" >  >() },
    {  843u, RevList< Rev< 0u, Arr64< Hash< "Author212">() >(),  "fixed_capacity_vector" > , Rev< 1u, Arr64< Hash< "Author1752">() >(),  "P0843r1: fixed_capacity_vector" > , Rev< 2u, Arr64< Hash< "Author1566">() >(),  "static_vector" > , Rev< 3u, Arr64< Hash< "Author204">() >(),  "README.md - Grip" > , Rev< 4u, Arr64< Hash< "Author1886">() >(),  "README.md - Grip" > , Rev< 5u, Arr64< Hash< "Author50">() >(),  "static_vector" > , Rev< 6u, Arr64< Hash< "Author2000">() >(),  "static_vector" > , Rev< 7u, Arr64< Hash< "Author1079">() >(),  "inplace_vector" > , Rev< 8u, Arr64< Hash< "Author2138">() >(),  "inplace_vector" > , Rev< 9u, Arr64< Hash< "Author95">() >(),  "`inplace_vector`" > , Rev< 10u, Arr64< Hash< "Author1853">() >(),  "inplace_vector" > , Rev< 11u, Arr64< Hash< "Author1145">() >(),  "`inplace_vector`" > , Rev< 12u, Arr64< Hash< "Author192">() >(),  "`inplace_vector`" > , Rev< 13u, Arr64< Hash< "Author1908">() >(),  "`inplace_vector` - HackMD" > , Rev< 14u, Arr64< Hash< "Author1490">() >(),  "`inplace_vector` - HackMD" >  >() },
    {  844u, RevList< Rev< 0u, Arr64< Hash< "J. Monnon">() >(),  "Type functions and beyond" >  >() },
    {  845u, RevList< Rev< 0u, Arr64< Hash< "Detlef Vollmann">() >(),  "Common Subset of C++03 and C++17: Binders" >  >() },
    {  846u, RevList< Rev< 0u, Arr64< Hash< "Author1667">() >(),  "ADL and Function Templates that are not Visible" >  >() },
    {  847u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "p0847R0: Deducing this" > , Rev< 1u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" > , Rev< 2u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" > , Rev< 4u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" > , Rev< 5u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" > , Rev< 6u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" > , Rev< 7u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Deducing this" >  >() },
    {  848u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally Trivial Special Member Functions" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally Trivial Special Member Functions" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally Trivial Special Member Functions" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally Trivial Special Member Functions" >  >() },
    {  849u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): DECAY_COPY in the language - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 4u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 5u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 6u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 7u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" > , Rev< 8u, Arr64< Hash< "Zhihao Yuan">() >(),  "auto(x): decay-copy in the language - HackMD" >  >() },
    {  851u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "simd<T> is neither a product type nor a container type [P0851R0]" >  >() },
    {  856u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "p0856r0: Restrict Access Property for <code>mdspan</code> and <code>span</code>" >  >() },
    {  857u, RevList< Rev< 0u, Arr64< Hash< "Author1223">() >(),  "Wording for functionality gaps in constraints" >  >() },
    {  858u, RevList< Rev< 0u, Arr64< Hash< "Author829">() >(),  "Constexpr iterator requirements" >  >() },
    {  859u, RevList< Rev< 0u, Arr64< Hash< "Author815">() >(),  "Core Issue 1581: When are constexpr member functions defined?" >  >() },
    {  860u, RevList< Rev< 0u, Arr64< Hash< "H. Carter">() >(),  "P0860r0 : Atomic Access Property for span and mdspan" > , Rev< 1u, Arr64< Hash< "Dan Sunderland">() >(),  "p0860R1: Atomic Access Property for mdspan" >  >() },
    {  863u, RevList< Rev< 0u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1439" > , Rev< 1u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1001" >  >() },
    {  864u, RevList< Rev< 0u, Arr64< Hash< "Author647">() >(),  "C++ Standard Library Issues Resolved Directly In Albuquerque" >  >() },
    {  866u, RevList< Rev< 0u, Arr64< Hash< "Nat Goodspeed">() >(),  "Title65" >  >() },
    {  867u, RevList< Rev< 0u, Arr64< Hash< "Author1760">() >(),  "'Module Interface' is Misleading" >  >() },
    {  868u, RevList< Rev< 0u, Arr64< Hash< "Author25">() >(),  "Title19" > , Rev< 1u, Arr64< Hash< "Author2116">() >(),  "Title1635" > , Rev< 2u, Arr64< Hash< "Author666">() >(),  "Title539" >  >() },
    {  870u, RevList< Rev< 0u, Arr64< Hash< "Author1579">() >(),  "A proposal for a type trait to detect narrowing conversions" > , Rev< 1u, Arr64< Hash< "Author681">() >(),  "A proposal for a type trait to detect narrowing conversions" > , Rev< 2u, Arr64< Hash< "Author252">() >(),  "A proposal for a type trait to detect narrowing conversions" > , Rev< 3u, Arr64< Hash< "Author1962">() >(),  "A proposal for a type trait to detect narrowing conversions" > , Rev< 4u, Arr64< Hash< "Author792">() >(),  "A proposal for a type trait to detect narrowing conversions" > , Rev< 5u, Arr64< Hash< "Author773">() >(),  "A proposal for a type trait to detect narrowing conversions" >  >() },
    {  873u, RevList< Rev< 0u, Arr64< Hash< "Corentin jabot">() >(),  "p0873R0: A plea for a consistent, terse and intuitive declaration syntax" > , Rev< 1u, Arr64< Hash< "Corentin jabot">() >(),  "p0873R1: A plea for a consistent, terse and intuitive declaration syntax" >  >() },
    {  874u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "p0874R0: Syntax to anonymously refer to the current declaration contexts" >  >() },
    {  876u, RevList< Rev< 0u, Arr64< Hash< "Oliver Kowalke">() >(),  "fibers without scheduler" > , Rev< 2u, Arr64< Hash< "Oliver Kowalke">() >(),  "fibers without scheduler" > , Rev< 3u, Arr64< Hash< "Oliver Kowalke">() >(),  "fibers without scheduler" > , Rev< 5u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 6u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 8u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 9u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 10u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 11u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 12u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 13u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 14u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 15u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 16u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 17u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 18u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 19u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" > , Rev< 20u, Arr64< Hash< "Oliver Kowalke">() >(),  "fiberswithoutscheduler" >  >() },
    {  877u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "A proposal for modular macros" >  >() },
    {  878u, RevList< Rev< 0u, Arr64< Hash< "Author1615">() >(),  "Copy elision for subobjects" >  >() },
    {  879u, RevList< Rev< 0u, Arr64< Hash< "Author499">() >(),  "Constexpr for swap and swap related functions" >  >() },
    {  880u, RevList< Rev< 0u, Arr64< Hash< "Author2217">() >(),  "Numbers interaction" > , Rev< 1u, Arr64< Hash< "Author218">() >(),  "Numbers interaction" > , Rev< 2u, Arr64< Hash< "Author1157">() >(),  "Numbers interaction" >  >() },
    {  881u, RevList< Rev< 0u, Arr64< Hash< "Author1487">() >(),  "A Proposal to add stack trace library" > , Rev< 1u, Arr64< Hash< "Author1080">() >(),  "A Proposal to add stack trace library" > , Rev< 2u, Arr64< Hash< "Author1292">() >(),  "A Proposal to add stack trace library" > , Rev< 3u, Arr64< Hash< "Author1288">() >(),  "A Proposal to add stacktrace library" > , Rev< 4u, Arr64< Hash< "Author132">() >(),  "A Proposal to add stacktrace library" > , Rev< 5u, Arr64< Hash< "Author1705">() >(),  "A Proposal to add stacktrace library" > , Rev< 6u, Arr64< Hash< "Author1974">() >(),  "A Proposal to add stacktrace library" > , Rev< 7u, Arr64< Hash< "Author594">() >(),  "A Proposal to add stacktrace library" >  >() },
    {  882u, RevList< Rev< 0u, Arr64< Hash< "Yonggang Li">() >(),  "User-defined Literals for std::filesystem::path - HackMD" >  >() },
    {  883u, RevList< Rev< 0u, Arr64< Hash< "Author1290">() >(),  "Microsoft Word - P0883R0_atomicinit.docx" > , Rev< 1u, Arr64< Hash< "Author1837">() >(),  "P0883R1" > , Rev< 2u, Arr64< Hash< "Author1520">() >(),  "P0883R2 Fixing Atomic Initialization" >  >() },
    {  884u, RevList< Rev< 0u, Arr64< Hash< "Author243">() >(),  "Microsoft Word - P0884R0_noexceptpolicy.docx" >  >() },
    {  886u, RevList< Rev< 0u, Arr64< Hash< "Author876">() >(),  "Title702" >  >() },
    {  887u, RevList< Rev< 0u, Arr64< Hash< "Author2228">() >(),  "Title1705" > , Rev< 1u, Arr64< Hash< "Author288">() >(),  "Title241" >  >() },
    {  888u, RevList< Rev< 0u, Arr64< Hash< "Author2216">() >(),  "C++ Standard Library Issues to be moved in Jacksonville" >  >() },
    {  889u, RevList< Rev< 0u, Arr64< Hash< "Author1364">() >(),  "Ultimate copy elision" > , Rev< 1u, Arr64< Hash< "Author1749">() >(),  "Ultimate copy elision" >  >() },
    {  891u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Title227" > , Rev< 1u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Everyone Deserves a Little Order" > , Rev< 2u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Make strong_order a Customization Point!" >  >() },
    {  892u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "explicit(bool)" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "explicit(bool)" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "explicit(bool)" >  >() },
    {  893u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Chaining Comparisons" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Chaining Comparisons" >  >() },
    {  894u, RevList< Rev< 0u, Arr64< Hash< "Author129">() >(),  "Title111" > , Rev< 1u, Arr64< Hash< "Author96">() >(),  "Title92" >  >() },
    {  895u, RevList< Rev< 0u, Arr64< Hash< "Author608">() >(),  "Microsoft Word - P0895R0_renamingcell.docx" >  >() },
    {  896u, RevList< Rev< 0u, Arr64< Hash< "Author1263">() >(),  "Range Adaptors and Utilities" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Standard Library Concepts" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Merge the Ranges TS" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "Merge the Ranges TS" > , Rev< 4u, Arr64< Hash< "Eric Niebler">() >(),  "Merge the Ranges TS" >  >() },
    {  897u, RevList< Rev< 0u, Arr64< Hash< "Andrey Semashev">() >(),  "Title574" >  >() },
    {  898u, RevList< Rev< 0u, Arr64< Hash< "Author2040">() >(),  "Standard Library Concepts" > , Rev< 1u, Arr64< Hash< "Author759">() >(),  "Standard Library Concepts" > , Rev< 2u, Arr64< Hash< "Casey Carter">() >(),  "Standard Library Concepts" > , Rev< 3u, Arr64< Hash< "Casey Carter">() >(),  "Standard Library Concepts" >  >() },
    {  899u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "LWG 3016 is Not a Defect" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "LWG 3016 is Not a Defect" >  >() },
    {  900u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "p0900r0: An Ontology for Properties of <code>mdspan</code>" >  >() },
    {  901u, RevList< Rev< 0u, Arr64< Hash< "Andrew Hunter">() >(),  "p0901r0: Size feedback in operator new" > , Rev< 1u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 2u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 3u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 4u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 5u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 6u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 7u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 8u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 9u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 10u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" > , Rev< 11u, Arr64< Hash< "Andrew Hunter">() >(),  "Size feedback in operator new" >  >() },
    {  902u, RevList< Rev< 0u, Arr64< Hash< "Andrew Hunter">() >(),  "p0902r0: Move-only iterators" >  >() },
    {  903u, RevList< Rev< 0u, Arr64< Hash< "Author478">() >(),  "Title398" > , Rev< 1u, Arr64< Hash< "Author1425">() >(),  "Title1105" > , Rev< 2u, Arr64< Hash< "Author265">() >(),  "Title223" >  >() },
    {  904u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "Title10" >  >() },
    {  905u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Symmetry for spaceship" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Symmetry for spaceship" >  >() },
    {  906u, RevList< Rev< 0u, Arr64< Hash< "Author131">() >(),  "Improvement suggestions for the Modules TS" > , Rev< 1u, Arr64< Hash< "Author271">() >(),  "Improvement suggestions for the Modules TS" >  >() },
    {  907u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "p0907r0: Signed Integers are Twos Complement" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "p0907R1: Signed Integers are Twos Complement" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "p0907R2: Signed Integers are Twos Complement" > , Rev< 3u, Arr64< Hash< "JF Bastien">() >(),  "Signed Integers are Twos Complement" > , Rev< 4u, Arr64< Hash< "JF Bastien">() >(),  "Signed Integers are Twos Complement" >  >() },
    {  908u, RevList< Rev< 0u, Arr64< Hash< "Eddie Kohler">() >(),  "p0908r0: Offsetof for Pointers to Members" >  >() },
    {  909u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Module TS Supports Legacy Integration" >  >() },
    {  911u, RevList< Rev< 0u, Arr64< Hash< "Author1465">() >(),  "Title1140" > , Rev< 1u, Arr64< Hash< "Author1302">() >(),  "Title1006" >  >() },
    {  912u, RevList< Rev< 0u, Arr64< Hash< "Author1650">() >(),  "Title1280" > , Rev< 1u, Arr64< Hash< "Author2042">() >(),  "Title1581" > , Rev< 2u, Arr64< Hash< "Author153">() >(),  "Title129" > , Rev< 3u, Arr64< Hash< "Author609">() >(),  "Title500" > , Rev< 4u, Arr64< Hash< "Author695">() >(),  "Abstract" > , Rev< 5u, Arr64< Hash< "Author1763">() >(),  "P0912R5 - Merge Coroutines TS into C++20 working draft" >  >() },
    {  913u, RevList< Rev< 0u, Arr64< Hash< "Author798">() >(),  "Add symmetric coroutine control transfer" > , Rev< 1u, Arr64< Hash< "Author2194">() >(),  "Add symmetric coroutine control transfer" >  >() },
    {  914u, RevList< Rev< 0u, Arr64< Hash< "Author880">() >(),  "Add parameter preview to coroutine promise constructor" > , Rev< 1u, Arr64< Hash< "Author1260">() >(),  "Add parameter preview to coroutine promise constructor" >  >() },
    {  915u, RevList< Rev< 0u, Arr64< Hash< "Author1751">() >(),  "Untitled" >  >() },
    {  916u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Naming implementation-defined simd_abi tag types [P0916R0]" >  >() },
    {  917u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Making operator?: overloadable [P0917R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Making operator?: overloadable [P0917R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Making operator?: overloadable [P0917R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Making operator?: overloadable [P0917R3]" >  >() },
    {  918u, RevList< Rev< 0u, Arr64< Hash< "Author509">() >(),  "Title420" > , Rev< 1u, Arr64< Hash< "Author1741">() >(),  "Title1347" > , Rev< 2u, Arr64< Hash< "Author84">() >(),  "Title85" >  >() },
    {  919u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "p0919r0: Heterogeneous lookup for unordered containers" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "p0919R1: Heterogeneous lookup for unordered containers" > , Rev< 2u, Arr64< Hash< "Mateusz Pusz">() >(),  "Heterogeneous lookup for unordered containers" > , Rev< 3u, Arr64< Hash< "Mateusz Pusz">() >(),  "Heterogeneous lookup for unordered containers" >  >() },
    {  920u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "Precalculated hash values in lookup" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "Precalculated hash values in lookup" > , Rev< 2u, Arr64< Hash< "Mateusz Pusz">() >(),  "Precalculated hash values in lookup" >  >() },
    {  921u, RevList< Rev< 0u, Arr64< Hash< "Author956">() >(),  "Title776" > , Rev< 2u, Arr64< Hash< "Titus Winters">() >(),  "Title6" >  >() },
    {  922u, RevList< Rev< 0u, Arr64< Hash< "Author66">() >(),  "Title70" >  >() },
    {  923u, RevList< Rev< 0u, Arr64< Hash< "Author1591">() >(),  "Modules:Dependent ADL" > , Rev< 1u, Arr64< Hash< "Author1053">() >(),  "Modules:Dependent ADL" >  >() },
    {  924u, RevList< Rev< 0u, Arr64< Hash< "Author1856">() >(),  "Modules:Context-Sensitive Keyword" > , Rev< 1u, Arr64< Hash< "Author1501">() >(),  "Modules:Context-Sensitive Keyword" >  >() },
    {  925u, RevList< Rev< 0u, Arr64< Hash< "Author2233">() >(),  "Modules:Unqualified Using Declarations" >  >() },
    {  927u, RevList< Rev< 0u, Arr64< Hash< "Author1013">() >(),  "Title811" > , Rev< 1u, Arr64< Hash< "James Dennett">() >(),  "Title145" > , Rev< 2u, Arr64< Hash< "James Dennett">() >(),  "Title764" >  >() },
    {  928u, RevList< Rev< 0u, Arr64< Hash< "Author2001">() >(),  "Title1547" > , Rev< 1u, Arr64< Hash< "Author1557">() >(),  "Title1207" >  >() },
    {  929u, RevList< Rev< 0u, Arr64< Hash< "Author1314">() >(),  "Checking for abstract class types" > , Rev< 1u, Arr64< Hash< "Author168">() >(),  "Checking for abstract class types" > , Rev< 2u, Arr64< Hash< "Author2024">() >(),  "Checking for abstract class types" >  >() },
    {  930u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "Title1292" >  >() },
    {  931u, RevList< Rev< 0u, Arr64< Hash< "Author747">() >(),  "Title605" >  >() },
    {  932u, RevList< Rev< 0u, Arr64< Hash< "Author1434">() >(),  "Title1113" > , Rev< 1u, Arr64< Hash< "Author766">() >(),  "Title625" >  >() },
    {  933u, RevList< Rev< 0u, Arr64< Hash< "Author1647">() >(),  "Title1276" > , Rev< 1u, Arr64< Hash< "Author646">() >(),  "Title526" >  >() },
    {  934u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1464" >  >() },
    {  935u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Eradicating unnecessarily explicit default constructors from the standard library" >  >() },
    {  936u, RevList< Rev< 0u, Arr64< Hash< "Author1249">() >(),  "Microsoft Word - P0936R0_boundparam.docx" >  >() },
    {  937u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title163" >  >() },
    {  938u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title795" >  >() },
    {  939u, RevList< Rev< 0u, Arr64< Hash< "Author703">() >(),  "Title565" > , Rev< 1u, Arr64< Hash< "Author469">() >(),  "Title394" > , Rev< 2u, Arr64< Hash< "Author927">() >(),  "Title747" > , Rev< 3u, Arr64< Hash< "Author1338">() >(),  "Title1030" > , Rev< 4u, Arr64< Hash< "Author130">() >(),  "Title112" >  >() },
    {  940u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1279" > , Rev< 1u, Arr64< Hash< "Michael Wong">() >(),  "Title608" > , Rev< 2u, Arr64< Hash< "Michael Wong">() >(),  "Title1569" > , Rev< 3u, Arr64< Hash< "Michael Wong">() >(),  "Title1598" >  >() },
    {  941u, RevList< Rev< 0u, Arr64< Hash< "Author1318">() >(),  "Integrating feature-test macros into the C++ WD" > , Rev< 1u, Arr64< Hash< "Author755">() >(),  "Integrating feature-test macros into the C++ WD" > , Rev< 2u, Arr64< Hash< "Author1565">() >(),  "Integrating feature-test macros into the C++ WD" >  >() },
    {  942u, RevList< Rev< 0u, Arr64< Hash< "Author1132">() >(),  "Introducing a <smart_ptr> header" >  >() },
    {  943u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 3u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 4u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 5u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" > , Rev< 6u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Support C atomics in C++" >  >() },
    {  944u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Contiguous Ranges" >  >() },
    {  945u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "p0945r0: Generalizing alias declarations" >  >() },
    {  946u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "p0946r0: Towards consistency between <=> and other comparison operators" >  >() },
    {  947u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "p0947R0: Another take on Modules" > , Rev< 1u, Arr64< Hash< "Richard Smith">() >(),  "Another take on Modules" >  >() },
    {  949u, RevList< Rev< 0u, Arr64< Hash< "Author1717">() >(),  "Adding support for type-based metaprogramming to the standard library" >  >() },
    {  952u, RevList< Rev< 0u, Arr64< Hash< "Author191">() >(),  "A new specification for std::generate_canonical" > , Rev< 1u, Arr64< Hash< "Author93">() >(),  "A new specification for std::generate_canonical" > , Rev< 2u, Arr64< Hash< "Author1563">() >(),  "A new specification for std::generate_canonical" >  >() },
    {  953u, RevList< Rev< 0u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "constexpr reflexpr" > , Rev< 1u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "constexpr reflexpr" > , Rev< 2u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "constexpr reflexpr" >  >() },
    {  954u, RevList< Rev< 0u, Arr64< Hash< "Author847">() >(),  "Title667" >  >() },
    {  955u, RevList< Rev< 0u, Arr64< Hash< "Author1320">() >(),  "Title1019" >  >() },
    {  956u, RevList< Rev< 0u, Arr64< Hash< "Author886">() >(),  "Title715" >  >() },
    {  957u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1537" > , Rev< 1u, Arr64< Hash< "Mingxin Wang">() >(),  "WG21 Paper P0957R1" > , Rev< 2u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1629" > , Rev< 3u, Arr64< Hash< "Mingxin Wang">() >(),  "Title264" > , Rev< 4u, Arr64< Hash< "Mingxin Wang">() >(),  "Title671" > , Rev< 5u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1136" > , Rev< 6u, Arr64< Hash< "Mingxin Wang">() >(),  "Title939" > , Rev< 7u, Arr64< Hash< "Mingxin Wang">() >(),  "Title813" > , Rev< 8u, Arr64< Hash< "Mingxin Wang">() >(),  "Title621" > , Rev< 9u, Arr64< Hash< "Mingxin Wang">() >(),  "Title658" >  >() },
    {  958u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to support proposed Executors TS" > , Rev< 1u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to support proposed Executors TS" > , Rev< 2u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to support proposed Executors TS" > , Rev< 3u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to support proposed Executors TS" >  >() },
    {  959u, RevList< Rev< 0u, Arr64< Hash< "Author1115">() >(),  "Title890" > , Rev< 1u, Arr64< Hash< "Author58">() >(),  "Title61" > , Rev< 2u, Arr64< Hash< "Author657">() >(),  "Title532" >  >() },
    {  960u, RevList< Rev< 0u, Arr64< Hash< "Author1279">() >(),  "Allow initializing aggregates from a parenthesized list of values" > , Rev< 1u, Arr64< Hash< "Author784">() >(),  "Allow initializing aggregates from a parenthesized list of values" > , Rev< 2u, Arr64< Hash< "Author1654">() >(),  "Allow initializing aggregates from a parenthesized list of values" > , Rev< 3u, Arr64< Hash< "Author199">() >(),  "Allow initializing aggregates from a parenthesized list of values" >  >() },
    {  961u, RevList< Rev< 0u, Arr64< Hash< "Author1517">() >(),  "Relaxing the structured bindings customization point finding rules" > , Rev< 1u, Arr64< Hash< "Author1840">() >(),  "Relaxing the structured bindings customization point finding rules" >  >() },
    {  962u, RevList< Rev< 0u, Arr64< Hash< "Author874">() >(),  "Relaxing the range-for loop customization point finding rules" > , Rev< 1u, Arr64< Hash< "Author751">() >(),  "Relaxing the range-for loop customization point finding rules" >  >() },
    {  963u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Structured binding declaration as a condition - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Structured binding declaration as a _condition_ - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "Structured binding declaration as a _condition_ - HackMD" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "Structured binding declaration as a _condition_ - HackMD" >  >() },
    {  964u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Finding the right set of traits for simd<T> [P0964R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Finding the right set of traits for simd<T> [P0964R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Finding the right set of traits for simd<T> [P0964R2]" >  >() },
    {  965u, RevList< Rev< 0u, Arr64< Hash< "Author1649">() >(),  "Initializers of objects with automatic and dynamic storage duration have funny inconsistencies" >  >() },
    {  966u, RevList< Rev< 0u, Arr64< Hash< "Mark Zeren">() >(),  "P0966r0: <code>string::reserve</code> Should Not Shrink" > , Rev< 1u, Arr64< Hash< "Mark Zeren">() >(),  "p0966R1: <code>string::reserve</code> Should Not Shrink" >  >() },
    {  968u, RevList< Rev< 0u, Arr64< Hash< "Author1671">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    {  969u, RevList< Rev< 0u, Arr64< Hash< "Author1644">() >(),  "Title1273" >  >() },
    {  970u, RevList< Rev< 0u, Arr64< Hash< "Author439">() >(),  "Better, Safer Range Access Customization Points" > , Rev< 1u, Arr64< Hash< "Author333">() >(),  "Better, Safer Range Access Customization Points" >  >() },
    {  972u, RevList< Rev< 0u, Arr64< Hash< "Billy Robert">() >(),  "Microsoft Word - d0972r0.docx" >  >() },
    {  973u, RevList< Rev< 0u, Arr64< Hash< "Author1305">() >(),  "Title1008" >  >() },
    {  974u, RevList< Rev< 0u, Arr64< Hash< "Jonathan Ringle">() >(),  "A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration" >  >() },
    {  975u, RevList< Rev< 0u, Arr64< Hash< "Author1240">() >(),  "Title968" >  >() },
    {  976u, RevList< Rev< 0u, Arr64< Hash< "Author237">() >(),  "Title197" >  >() },
    {  977u, RevList< Rev< 0u, Arr64< Hash< "Author1569">() >(),  "Title1214" >  >() },
    {  978u, RevList< Rev< 0u, Arr64< Hash< "the library">() >(),  "Title582" >  >() },
    {  980u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title579" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title341" >  >() },
    {  981u, RevList< Rev< 0u, Arr64< Hash< "Author1551">() >(),  "Title1203" >  >() },
    {  982u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Weaken release sequences" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Weaken release sequences" >  >() },
    {  983u, RevList< Rev< 0u, Arr64< Hash< "Gabriel Dos">() >(),  "Title278" >  >() },
    {  984u, RevList< Rev< 0u, Arr64< Hash< "Author948">() >(),  "Title766" >  >() },
    {  985u, RevList< Rev< 0u, Arr64< Hash< "Author2167">() >(),  "LWG Chair post-meeting report" > , Rev< 1u, Arr64< Hash< "Author521">() >(),  "LWG Chair post-meeting report" > , Rev< 2u, Arr64< Hash< "Author67">() >(),  "LWG Chair post-meeting report" > , Rev< 3u, Arr64< Hash< "Author311">() >(),  "LWG Chair post-meeting report" > , Rev< 4u, Arr64< Hash< "Author1518">() >(),  "LWG Chair post-meeting report" >  >() },
    {  986u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Comparison of Modules Proposals" >  >() },
    {  987u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "polymorphic_allocator<byte> instead of type-erasure" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "Microsoft Word - P0987_polyalloc_instead_of_erasure.docx" > , Rev< 2u, Arr64< Hash< "Pablo Halpern">() >(),  "Microsoft Word - P0987R2_polyalloc_instead_of_erasure.docx" >  >() },
    {  988u, RevList< Rev< 0u, Arr64< Hash< "Author603">() >(),  "Title494" >  >() },
    {  989u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title1032" >  >() },
    {  990u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title18" >  >() },
    {  991u, RevList< Rev< 0u, Arr64< Hash< "Author72">() >(),  "Title74" >  >() },
    {  992u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Constexpr" >  >() },
    {  993u, RevList< Rev< 0u, Arr64< Hash< "Author397">() >(),  "Reflection" >  >() },
    {  994u, RevList< Rev< 0u, Arr64< Hash< "Author2078">() >(),  "Title1609" >  >() },
    {  995u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "p0995R0: Improving atomic_flag" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Improving atomic_flag" >  >() },
    {  996u, RevList< Rev< 1u, Arr64< Hash< "Author2047">() >(),  "Rebase Library Fundamentals TS on C++17" >  >() },
    {  997u, RevList< Rev< 0u, Arr64< Hash< "Nathan Myers">() >(),  "Title823" >  >() },
    {  999u, RevList< Rev< 0u, Arr64< Hash< "Author1740">() >(),  "Title1346" >  >() },
    { 1000u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1055" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title993" > , Rev< 2u, Arr64< Hash< "Herb Sutter">() >(),  "Title1655" > , Rev< 3u, Arr64< Hash< "Herb Sutter">() >(),  "Title1433" > , Rev< 4u, Arr64< Hash< "Herb Sutter">() >(),  "Title440" > , Rev< 5u, Arr64< Hash< "Herb Sutter">() >(),  "Title693" > , Rev< 6u, Arr64< Hash< "Herb Sutter">() >(),  "Title1381" >  >() },
    { 1001u, RevList< Rev< 0u, Arr64< Hash< "Author1580">() >(),  "Target Vectorization Policies from Parallelism V2 TS to C++20" > , Rev< 1u, Arr64< Hash< "Author235">() >(),  "Target Vectorization Policies from Parallelism V2 TS to C++20" > , Rev< 2u, Arr64< Hash< "Author1628">() >(),  "Target Vectorization Policies from Parallelism V2 TS to C++20" >  >() },
    { 1002u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title334" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title572" >  >() },
    { 1003u, RevList< Rev< 0u, Arr64< Hash< "Author15">() >(),  "C++ Standard Library Issues Resolved Directly In Jacksonville" >  >() },
    { 1004u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title568" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title346" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title547" >  >() },
    { 1005u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "p1005r0: namespace std { namespace fs = filesystem; }" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "`namespace std { namespace fs = filesystem; }`" >  >() },
    { 1006u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title1264" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title854" >  >() },
    { 1007u, RevList< Rev< 0u, Arr64< Hash< "Author1217">() >(),  "Title954" > , Rev< 1u, Arr64< Hash< "Author1681">() >(),  "Title1306" > , Rev< 2u, Arr64< Hash< "Author1454">() >(),  "Title1132" > , Rev< 3u, Arr64< Hash< "Author1835">() >(),  "Title1426" >  >() },
    { 1008u, RevList< Rev< 0u, Arr64< Hash< "Author244">() >(),  "Title200" > , Rev< 1u, Arr64< Hash< "Author1269">() >(),  "Title983" >  >() },
    { 1009u, RevList< Rev< 0u, Arr64< Hash< "Author1775">() >(),  "Title1379" > , Rev< 1u, Arr64< Hash< "Author1792">() >(),  "Title1393" > , Rev< 2u, Arr64< Hash< "Author2101">() >(),  "Title1628" >  >() },
    { 1010u, RevList< Rev< 0u, Arr64< Hash< "Mark Zeren">() >(),  "p1010R0: Container support for implicit lifetime types" > , Rev< 1u, Arr64< Hash< "Mark Zeren">() >(),  "Container support for implicit lifetime types" >  >() },
    { 1011u, RevList< Rev< 0u, Arr64< Hash< "Author734">() >(),  "Title591" >  >() },
    { 1012u, RevList< Rev< 0u, Arr64< Hash< "Author2135">() >(),  "Title1647" > , Rev< 1u, Arr64< Hash< "Frank Zingsheim">() >(),  "Title1332" >  >() },
    { 1013u, RevList< Rev< 0u, Arr64< Hash< "Author2176">() >(),  "Explicit concept expressions" > , Rev< 1u, Arr64< Hash< "Author1491">() >(),  "Explicit concept expressions" >  >() },
    { 1014u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Unit type" >  >() },
    { 1015u, RevList< Rev< 0u, Arr64< Hash< "Author567">() >(),  "Title460" >  >() },
    { 1016u, RevList< Rev< 0u, Arr64< Hash< "Author985">() >(),  "P1016R0" >  >() },
    { 1017u, RevList< Rev< 0u, Arr64< Hash< "Hartmut Kaiser">() >(),  "Title1692" >  >() },
    { 1018u, RevList< Rev< 0u, Arr64< Hash< "Author2140">() >(),  "Evolution status after Jacksonville 2018" > , Rev< 1u, Arr64< Hash< "Author547">() >(),  "Evolution status after Rapperswil 2018" > , Rev< 2u, Arr64< Hash< "Author1087">() >(),  "Evolution status after San Diego 2018" > , Rev< 3u, Arr64< Hash< "Author422">() >(),  "Evolution status after Kona 2019" > , Rev< 4u, Arr64< Hash< "Author1832">() >(),  "Evolution status after Cologne 2019" > , Rev< 5u, Arr64< Hash< "JF Bastien">() >(),  "Language Evolution status after Belfast 2019" > , Rev< 6u, Arr64< Hash< "JF Bastien">() >(),  "Language Evolution status after Prague 2020" > , Rev< 7u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2020/032020/10" > , Rev< 8u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2020/112021/01" > , Rev< 9u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/012021/03" > , Rev< 10u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/04" > , Rev< 11u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/05" > , Rev< 12u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/062021/08" > , Rev< 13u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/082021/09" > , Rev< 14u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2021/092022/01" > , Rev< 15u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2022/012022/02" > , Rev< 16u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2022/022022/06" > , Rev< 17u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2022/062022/07" > , Rev< 18u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status pandemic edition 2022/072022/11" > , Rev< 19u, Arr64< Hash< "JF Bastien">() >(),  "C++ Language Evolution status" >  >() },
    { 1019u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "Title722" > , Rev< 1u, Arr64< Hash< "Jared Hoberock">() >(),  "Title423" > , Rev< 2u, Arr64< Hash< "Jared Hoberock">() >(),  "Title1391" >  >() },
    { 1020u, RevList< Rev< 0u, Arr64< Hash< "Glen Joseph">() >(),  "Smart pointer creation with default initialization" > , Rev< 1u, Arr64< Hash< "Glen Joseph">() >(),  "Smart pointer creation with default initialization" >  >() },
    { 1021u, RevList< Rev< 0u, Arr64< Hash< "Author910">() >(),  "Extensions to Class Template Argument Deduction" > , Rev< 1u, Arr64< Hash< "Author1916">() >(),  "Filling holes in Class Template Argument Deduction" > , Rev< 2u, Arr64< Hash< "Author90">() >(),  "Filling holes in Class Template Argument Deduction" > , Rev< 3u, Arr64< Hash< "Author161">() >(),  "Filling holes in Class Template Argument Deduction" > , Rev< 4u, Arr64< Hash< "Author1068">() >(),  "Filling holes in Class Template Argument Deduction" > , Rev< 5u, Arr64< Hash< "Author1112">() >(),  "Filling holes in Class Template Argument Deduction" > , Rev< 6u, Arr64< Hash< "Author944">() >(),  "Filling holes in Class Template Argument Deduction" >  >() },
    { 1022u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title699" >  >() },
    { 1023u, RevList< Rev< 0u, Arr64< Hash< "Author434">() >(),  "Title369" >  >() },
    { 1024u, RevList< Rev< 0u, Arr64< Hash< "Author2151">() >(),  "Title1658" > , Rev< 1u, Arr64< Hash< "Author2181">() >(),  "Title1676" > , Rev< 2u, Arr64< Hash< "Author1474">() >(),  "Title1144" > , Rev< 3u, Arr64< Hash< "Author117">() >(),  "Title103" >  >() },
    { 1025u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Update The Reference To The Unicode Standard" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Update The Reference To The Unicode Standard" >  >() },
    { 1026u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title229" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title563" >  >() },
    { 1028u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title1361" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title11" > , Rev< 2u, Arr64< Hash< "Niall Douglas">() >(),  "Title536" > , Rev< 3u, Arr64< Hash< "Niall Douglas">() >(),  "Title91" > , Rev< 4u, Arr64< Hash< "Niall Douglas">() >(),  "Title1049" > , Rev< 5u, Arr64< Hash< "Niall Douglas">() >(),  "Title1325" > , Rev< 6u, Arr64< Hash< "Niall Douglas">() >(),  "Title1522" >  >() },
    { 1029u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title392" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title2" > , Rev< 2u, Arr64< Hash< "Niall Douglas">() >(),  "Title1349" > , Rev< 3u, Arr64< Hash< "Niall Douglas">() >(),  "Title855" >  >() },
    { 1030u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title1429" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title123" > , Rev< 2u, Arr64< Hash< "Niall Douglas">() >(),  "Title283" > , Rev< 3u, Arr64< Hash< "Niall Douglas">() >(),  "Title1605" > , Rev< 4u, Arr64< Hash< "Niall Douglas">() >(),  "Title824" > , Rev< 5u, Arr64< Hash< "Niall Douglas">() >(),  "Title1500" > , Rev< 6u, Arr64< Hash< "Niall Douglas">() >(),  "Title196" > , Rev< 7u, Arr64< Hash< "Niall Douglas">() >(),  "Title537" > , Rev< 8u, Arr64< Hash< "Niall Douglas">() >(),  "Title120" >  >() },
    { 1031u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title287" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title183" > , Rev< 2u, Arr64< Hash< "Niall Douglas">() >(),  "Title592" >  >() },
    { 1032u, RevList< Rev< 0u, Arr64< Hash< "Author1788">() >(),  "Misc constexpr bits" > , Rev< 1u, Arr64< Hash< "Author1206">() >(),  "Misc constexpr bits" >  >() },
    { 1033u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "P1033R0 Rangify the uninitialised memory algorithms!" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "P1033R1 Rangify the uninitialised memory algorithms!" >  >() },
    { 1035u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "p1035R0: Input range adaptors" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "Input range adaptors" > , Rev< 2u, Arr64< Hash< "Christopher Di">() >(),  "Input range adaptors" > , Rev< 3u, Arr64< Hash< "Christopher Di">() >(),  "Input range adaptors" > , Rev< 4u, Arr64< Hash< "Christopher Di">() >(),  "Input range adaptors" > , Rev< 5u, Arr64< Hash< "Christopher Di">() >(),  "Input Range Adaptors" > , Rev< 6u, Arr64< Hash< "Christopher Di">() >(),  "Input Range Adaptors" > , Rev< 7u, Arr64< Hash< "Christopher Di">() >(),  "Input Range Adaptors" >  >() },
    { 1037u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Deep Integration of the Ranges TS" >  >() },
    { 1039u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "I got you, FAM - Flexible Array Members for C++" >  >() },
    { 1040u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "p1040R0: std::embed" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "p1040R1: std::embed" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" > , Rev< 5u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" > , Rev< 6u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" > , Rev< 7u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::embed" >  >() },
    { 1041u, RevList< Rev< 0u, Arr64< Hash< "Author442">() >(),  "Title372" > , Rev< 1u, Arr64< Hash< "cpp@rmf.io">() >(),  "Make char16_t/char32_t string literals be UTF-16/32" > , Rev< 3u, Arr64< Hash< "cpp@rmf.io">() >(),  "Make char16_t/char32_t string literals be UTF-16/32" > , Rev< 4u, Arr64< Hash< "cpp@rmf.io">() >(),  "Make char16_t/char32_t string literals be UTF-16/32" >  >() },
    { 1042u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "__VA_OPT__ wording clarifications" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "__VA_OPT__ wording clarifications" >  >() },
    { 1043u, RevList< Rev< 0u, Arr64< Hash< "Author1399">() >(),  "P1043r0 Narrow contracts in <code>string_view</code> versus P0903R1" >  >() },
    { 1044u, RevList< Rev< 0u, Arr64< Hash< "Thomas Rodgers">() >(),  "p1044R0: std::async() in an Executors World" >  >() },
    { 1045u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title49" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "`constexpr` Function Parameters" >  >() },
    { 1046u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title469" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "Automatically Generate More Operators" > , Rev< 2u, Arr64< Hash< "David Stone">() >(),  "Automatically Generate More Operators" >  >() },
    { 1048u, RevList< Rev< 0u, Arr64< Hash< "Juan Alday">() >(),  "Title194" > , Rev< 1u, Arr64< Hash< "Juan Alday">() >(),  "P1048R1" >  >() },
    { 1050u, RevList< Rev< 0u, Arr64< Hash< "Author1433">() >(),  "Title1112" > , Rev< 1u, Arr64< Hash< "Author1544">() >(),  "p1050r1" >  >() },
    { 1051u, RevList< Rev< 0u, Arr64< Hash< "Vicente J">() >(),  "p1051r0" >  >() },
    { 1052u, RevList< Rev< 0u, Arr64< Hash< "Author881">() >(),  "Modules, Macros, and Build Systems" >  >() },
    { 1053u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "p1053R0: Future-proofing continuations for executors" > , Rev< 1u, Arr64< Hash< "Lee Howes">() >(),  "Future-proofing continuations for executors" >  >() },
    { 1054u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "p1054R0: A Unified Futures Proposal for C++" >  >() },
    { 1055u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "Title281" >  >() },
    { 1056u, RevList< Rev< 0u, Arr64< Hash< "Author615">() >(),  "Add coroutine task type" > , Rev< 1u, Arr64< Hash< "Author1148">() >(),  "Add coroutine lazy type" >  >() },
    { 1059u, RevList< Rev< 0u, Arr64< Hash< "Thomas Rodgers">() >(),  "p1059R0: Adapting Asio to use std::expected" >  >() },
    { 1061u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 5u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 6u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 7u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 8u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 9u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" > , Rev< 10u, Arr64< Hash< "Barry Revzin">() >(),  "Structured Bindings can introduce a Pack" >  >() },
    { 1062u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "p1062R0: Diet Graphics" >  >() },
    { 1063u, RevList< Rev< 0u, Arr64< Hash< "Author2098">() >(),  "Title1626" > , Rev< 1u, Arr64< Hash< "Author2186">() >(),  "Title1680" > , Rev< 2u, Arr64< Hash< "Author940">() >(),  "Title758" >  >() },
    { 1064u, RevList< Rev< 0u, Arr64< Hash< "Author1048">() >(),  "Allowing Virtual Function Calls in Constant Expressions" >  >() },
    { 1065u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr INVOKE" > , Rev< 1u, Arr64< Hash< "Tomasz Kami\xC5\x84ski">() >(),  "constexpr INVOKE" > , Rev< 2u, Arr64< Hash< "Tomasz Kami\xC5\x84ski">() >(),  "constexpr INVOKE" >  >() },
    { 1066u, RevList< Rev< 0u, Arr64< Hash< "Mathias Stearn">() >(),  "p1066R0: How to catch an exception_ptr without even try-ing" > , Rev< 1u, Arr64< Hash< "Mathias Stearn">() >(),  "How to catch an exception_ptr without even try-ing" >  >() },
    { 1067u, RevList< Rev< 0u, Arr64< Hash< "Author1264">() >(),  "C++ Dependency Management: Package Consumption vs Development" >  >() },
    { 1068u, RevList< Rev< 0u, Arr64< Hash< "Ilya Burylov">() >(),  "Title448" > , Rev< 1u, Arr64< Hash< "Ilya Burylov">() >(),  "Title1418" > , Rev< 2u, Arr64< Hash< "Ilya Burylov">() >(),  "Title1696" > , Rev< 3u, Arr64< Hash< "Ilya Burylov">() >(),  "Title228" > , Rev< 4u, Arr64< Hash< "Ilya Burylov">() >(),  "Title1176" > , Rev< 5u, Arr64< Hash< "Ilya Burylov">() >(),  "Title782" > , Rev< 6u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R6.docx" > , Rev< 7u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R7.docx" > , Rev< 8u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R8" > , Rev< 9u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R9" > , Rev< 10u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R10" > , Rev< 11u, Arr64< Hash< "Ilya Burylov">() >(),  "P1068R11" >  >() },
    { 1069u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Refining standard library support for Class Template Argument Deduction" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0\xC2\xA0Mike Spertus">() >(),  "Inferencing heap objects" >  >() },
    { 1070u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title270" >  >() },
    { 1071u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1183" >  >() },
    { 1072u, RevList< Rev< 0u, Arr64< Hash< "Author1553">() >(),  "Title1204" > , Rev< 1u, Arr64< Hash< "Chris Kennelly">() >(),  "Optimized Initialization for basic_string and vector" > , Rev< 2u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_default_init" > , Rev< 3u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_default_init" > , Rev< 4u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_default_init" > , Rev< 5u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_default_init" > , Rev< 6u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_and_overwrite" > , Rev< 7u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_and_overwrite" > , Rev< 8u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_and_overwrite" > , Rev< 9u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_and_overwrite" > , Rev< 10u, Arr64< Hash< "Chris Kennelly">() >(),  "basic_string::resize_and_overwrite" >  >() },
    { 1073u, RevList< Rev< 0u, Arr64< Hash< "Author1883">() >(),  "Title1460" > , Rev< 1u, Arr64< Hash< "Author522">() >(),  "Title429" > , Rev< 2u, Arr64< Hash< "Author1324">() >(),  "Title1021" > , Rev< 3u, Arr64< Hash< "Author1346">() >(),  "Title1040" >  >() },
    { 1074u, RevList< Rev< 0u, Arr64< Hash< "Maged Michael">() >(),  "Title1229" >  >() },
    { 1076u, RevList< Rev< 0u, Arr64< Hash< "Author5">() >(),  "Editorial clause reorganization" > , Rev< 1u, Arr64< Hash< "Author201">() >(),  "Editorial clause reorganization" >  >() },
    { 1077u, RevList< Rev< 0u, Arr64< Hash< "Author1489">() >(),  "Allowing Virtual Destructors to be \"Trivial\"" >  >() },
    { 1079u, RevList< Rev< 0u, Arr64< Hash< "Author916">() >(),  "Title737" >  >() },
    { 1080u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2018/03/28 - 2018/04/25" >  >() },
    { 1081u, RevList< Rev< 0u, Arr64< Hash< "Author1312">() >(),  "P1081R0" >  >() },
    { 1082u, RevList< Rev< 0u, Arr64< Hash< "Author565">() >(),  "C++ Standard Library Issues to be moved in Rapperswil" >  >() },
    { 1083u, RevList< Rev< 0u, Arr64< Hash< "Author1422">() >(),  "Title1104" > , Rev< 1u, Arr64< Hash< "Author19">() >(),  "P1083r1 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 2u, Arr64< Hash< "Author465">() >(),  "P1083r2 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 3u, Arr64< Hash< "Author1581">() >(),  "P1083r3 | Move resource_adaptor from Library TS to the C++ WP" > , Rev< 4u, Arr64< Hash< "Author754">() >(),  "Title612" > , Rev< 5u, Arr64< Hash< "Author938">() >(),  "Title757" > , Rev< 6u, Arr64< Hash< "Author11">() >(),  "Title13" > , Rev< 7u, Arr64< Hash< "Author1255">() >(),  "Title976" > , Rev< 8u, Arr64< Hash< "Pablo Halpern">() >(),  "Move `resource_adaptor` from Library TS to the C++ WP" >  >() },
    { 1084u, RevList< Rev< 0u, Arr64< Hash< "Author1321">() >(),  "Today's return-type-requirements Are Insufficient" > , Rev< 1u, Arr64< Hash< "Author435">() >(),  "Today's return-type-requirements Are Insufficient" > , Rev< 2u, Arr64< Hash< "Author1851">() >(),  "Today's return-type-requirements Are Insufficient" >  >() },
    { 1085u, RevList< Rev< 0u, Arr64< Hash< "Author2137">() >(),  "Title1648" > , Rev< 1u, Arr64< Hash< "Author1841">() >(),  "Title1427" > , Rev< 2u, Arr64< Hash< "Author2059">() >(),  "Title1597" >  >() },
    { 1086u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title370" >  >() },
    { 1087u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "C++ Modules" >  >() },
    { 1089u, RevList< Rev< 0u, Arr64< Hash< "Robert Douglas">() >(),  "Title660" > , Rev< 2u, Arr64< Hash< "Robert Douglas">() >(),  "Title1456" >  >() },
    { 1090u, RevList< Rev< 0u, Arr64< Hash< "Author170">() >(),  "Aggregate initialization in the presence of deleted constructors" >  >() },
    { 1091u, RevList< Rev< 0u, Arr64< Hash< "Nicolas Lesser">() >(),  "Title816" > , Rev< 1u, Arr64< Hash< "Nicolas Lesser">() >(),  "Title492" > , Rev< 2u, Arr64< Hash< "Nicolas Lesser">() >(),  "Extending structured bindings to be more like variable declarations" > , Rev< 3u, Arr64< Hash< "Nicolas Lesser">() >(),  "Extending structured bindings to be more like variable declarations" >  >() },
    { 1093u, RevList< Rev< 0u, Arr64< Hash< "Author1542">() >(),  "Title1195" >  >() },
    { 1094u, RevList< Rev< 0u, Arr64< Hash< "Author1744">() >(),  "Nested Inline Namespaces" > , Rev< 1u, Arr64< Hash< "Author2104">() >(),  "Nested Inline Namespaces" > , Rev< 2u, Arr64< Hash< "Author1814">() >(),  "Nested Inline Namespaces" >  >() },
    { 1095u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title1499" >  >() },
    { 1096u, RevList< Rev< 0u, Arr64< Hash< "Author1360">() >(),  "Title1057" >  >() },
    { 1097u, RevList< Rev< 0u, Arr64< Hash< "R. Martinho">() >(),  "Named character escapes" > , Rev< 1u, Arr64< Hash< "R. Martinho">() >(),  "Title1171" > , Rev< 2u, Arr64< Hash< "R. Martinho">() >(),  "Named character escapes" >  >() },
    { 1099u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "p1099R0: Using Enum" > , Rev< 2u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "p1099R2: Using Enum" > , Rev< 3u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Using Enum" > , Rev< 4u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Using Enum" > , Rev< 5u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Using Enum" >  >() },
    { 1100u, RevList< Rev< 0u, Arr64< Hash< "Vinnie Falco">() >(),  "Efficient composition with DynamicBuffer" >  >() },
    { 1101u, RevList< Rev< 0u, Arr64< Hash< "Mikhail Maltsev">() >(),  "Vector Length Agnostic SIMD" >  >() },
    { 1102u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "Down with ()!" > , Rev< 1u, Arr64< Hash< "Alex Christensen">() >(),  "Down with <code>()</code>!" > , Rev< 2u, Arr64< Hash< "Alex Christensen">() >(),  "Down with ()!" >  >() },
    { 1103u, RevList< Rev< 0u, Arr64< Hash< "Author1404">() >(),  "C++ Technical Specification" > , Rev< 1u, Arr64< Hash< "Author2019">() >(),  "Merging Modules" > , Rev< 2u, Arr64< Hash< "Author1529">() >(),  "Merging Modules" > , Rev< 3u, Arr64< Hash< "Author1159">() >(),  "Merging Modules" >  >() },
    { 1105u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Leaving no room for a lower-level language: A C++ Subset" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Leaving no room for a lower-level language: A C++ Subset" >  >() },
    { 1108u, RevList< Rev< 0u, Arr64< Hash< "Hal Finkel">() >(),  "web_view" > , Rev< 1u, Arr64< Hash< "Hal Finkel">() >(),  "web_view" > , Rev< 2u, Arr64< Hash< "Hal Finkel">() >(),  "web_view" > , Rev< 3u, Arr64< Hash< "Hal Finkel">() >(),  "web_view" > , Rev< 4u, Arr64< Hash< "Hal Finkel">() >(),  "web_view" >  >() },
    { 1109u, RevList< Rev< 0u, Arr64< Hash< "Author70">() >(),  "P1109" > , Rev< 1u, Arr64< Hash< "Author1984">() >(),  "P1109R1" >  >() },
    { 1110u, RevList< Rev< 0u, Arr64< Hash< "Jeffrey Yasskin">() >(),  "A placeholder with no name" >  >() },
    { 1111u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Resolutions to NB Comments on the Parallelism TS v2" >  >() },
    { 1112u, RevList< Rev< 0u, Arr64< Hash< "Author947">() >(),  "Microsoft Word - cppprop3d.doc" > , Rev< 1u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - p1112r1.doc" > , Rev< 2u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - p1112r2.doc" > , Rev< 3u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - p1112r3.doc" > , Rev< 4u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - p1112r4.doc" > , Rev< 5u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - p1112r5.doc" >  >() },
    { 1113u, RevList< Rev< 0u, Arr64< Hash< "Author1424">() >(),  "Core \"ready\" Issues" >  >() },
    { 1114u, RevList< Rev< 0u, Arr64< Hash< "Author643">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 1115u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title319" > , Rev< 1u, Arr64< Hash< "Marc Mutz">() >(),  "Title348" > , Rev< 2u, Arr64< Hash< "Marc Mutz">() >(),  "Title872" > , Rev< 3u, Arr64< Hash< "Marc Mutz">() >(),  "Title507" >  >() },
    { 1116u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title1544" >  >() },
    { 1118u, RevList< Rev< 0u, Arr64< Hash< "Author679">() >(),  "Title550" >  >() },
    { 1119u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "ABI for std::hardware_{constructive,destructive}_interference_size" >  >() },
    { 1120u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Consistency improvements for <=> and other comparison operators" >  >() },
    { 1121u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Title832" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Title131" > , Rev< 2u, Arr64< Hash< "Maged M">() >(),  "Title28" > , Rev< 3u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointers" >  >() },
    { 1122u, RevList< Rev< 0u, Arr64< Hash< "Paul McKenney">() >(),  "Title1491" > , Rev< 1u, Arr64< Hash< "Paul McKenney">() >(),  "Title1152" > , Rev< 2u, Arr64< Hash< "Paul McKenney">() >(),  "Title677" > , Rev< 3u, Arr64< Hash< "Paul McKenney">() >(),  "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)" > , Rev< 4u, Arr64< Hash< "Paul McKenney">() >(),  "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)" >  >() },
    { 1123u, RevList< Rev< 0u, Arr64< Hash< "Daniel Sunderland">() >(),  "Editorial Guidance for merging P0019r8 and P0528r3" >  >() },
    { 1128u, RevList< Rev< 0u, Arr64< Hash< "Author1082">() >(),  "Summer 2018 WG21 Batavia LWG Meeting Information" >  >() },
    { 1130u, RevList< Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Module Resource Requirement Propagation" >  >() },
    { 1131u, RevList< Rev< 0u, Arr64< Hash< "Author1827">() >(),  "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" > , Rev< 1u, Arr64< Hash< "Author1175">() >(),  "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" > , Rev< 2u, Arr64< Hash< "Author1241">() >(),  "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name" >  >() },
    { 1132u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "p1132R0: out_ptr - a scalable output pointer abstraction" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 5u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 6u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 7u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" > , Rev< 8u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "out_ptr - a scalable output pointer abstraction" >  >() },
    { 1133u, RevList< Rev< 0u, Arr64< Hash< "Vinnie Falco">() >(),  "Networking TS Associations For Call Wrappers" >  >() },
    { 1135u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 3u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 4u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 5u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" > , Rev< 6u, Arr64< Hash< "Bryce Adelstein">() >(),  "The C++20 Synchronization Library" >  >() },
    { 1136u, RevList< Rev< 0u, Arr64< Hash< "Author1549">() >(),  "Title1202" >  >() },
    { 1137u, RevList< Rev< 0u, Arr64< Hash< "maintain consistency">() >(),  "SG16: Unicode meeting summaries 2018/05/16 - 2018/06/20" >  >() },
    { 1138u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title805" >  >() },
    { 1139u, RevList< Rev< 0u, Arr64< Hash< "R. Martinho">() >(),  "Address wording issues related to ISO 10646" > , Rev< 1u, Arr64< Hash< "R. Martinho">() >(),  "Address wording issues related to ISO 10646" > , Rev< 2u, Arr64< Hash< "R. Martinho">() >(),  "Address wording issues related to ISO 10646" >  >() },
    { 1141u, RevList< Rev< 0u, Arr64< Hash< "Author273">() >(),  "Yet another approach for constrained declarations" > , Rev< 1u, Arr64< Hash< "Author226">() >(),  "Yet another approach for constrained declarations" > , Rev< 2u, Arr64< Hash< "Author1370">() >(),  "Yet another approach for constrained declarations" >  >() },
    { 1142u, RevList< Rev< 0u, Arr64< Hash< "Author1099">() >(),  "Thoughts on a conservative terse syntax for constraints" >  >() },
    { 1143u, RevList< Rev< 0u, Arr64< Hash< "Author1521">() >(),  "Title1182" > , Rev< 1u, Arr64< Hash< "Author925">() >(),  "Title745" > , Rev< 2u, Arr64< Hash< "Author649">() >(),  "Title529" >  >() },
    { 1144u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 4u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 5u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 6u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Object relocation in terms of move plus destroy" > , Rev< 7u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" > , Rev< 8u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" > , Rev< 9u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" > , Rev< 10u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" > , Rev< 11u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" > , Rev< 12u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_trivially_relocatable" >  >() },
    { 1145u, RevList< Rev< 0u, Arr64< Hash< "Vinnie Falco">() >(),  "Buffer Sequence Adaptors" >  >() },
    { 1147u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Printing `volatile` Pointers" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "Printing `volatile` Pointers" >  >() },
    { 1148u, RevList< Rev< 0u, Arr64< Hash< "Author1152">() >(),  "Cleaning up [strings]" >  >() },
    { 1149u, RevList< Rev< 0u, Arr64< Hash< "Author507">() >(),  "Constexpr regex" >  >() },
    { 1152u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>" > , Rev< 3u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>" > , Rev< 4u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>" >  >() },
    { 1153u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Copying volatile subobjects is not trivial" >  >() },
    { 1154u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Type traits for structural comparison" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Type traits for structural comparison" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Type traits for structural comparison" >  >() },
    { 1155u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "More implicit moves" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "More implicit moves" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "More implicit moves" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "More implicit moves" >  >() },
    { 1156u, RevList< Rev< 0u, Arr64< Hash< "Author2144">() >(),  "Merged Modules and Tooling" >  >() },
    { 1157u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Multi-argument constrained-parameter - HackMD" >  >() },
    { 1158u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Concept-defined placeholder types - HackMD" >  >() },
    { 1159u, RevList< Rev< 0u, Arr64< Hash< "Author1413">() >(),  "Title1100" >  >() },
    { 1160u, RevList< Rev< 0u, Arr64< Hash< "Attila Feh">() >(),  "P1160R0" > , Rev< 1u, Arr64< Hash< "Author1755">() >(),  "Microsoft Word - P1160R1" >  >() },
    { 1161u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Deprecate uses of the comma operator in subscripting expressions" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Deprecate uses of the comma operator in subscripting expressions" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Deprecate uses of the comma operator in subscripting expressions" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Deprecate uses of the comma operator in subscripting expressions" >  >() },
    { 1163u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title211" >  >() },
    { 1164u, RevList< Rev< 0u, Arr64< Hash< "Author1184">() >(),  "Microsoft Word - D1164R0_create_directory_180824.docx" > , Rev< 1u, Arr64< Hash< "Author1098">() >(),  "Microsoft Word - P1164R1R1_create_directory_190222.docx" >  >() },
    { 1165u, RevList< Rev< 0u, Arr64< Hash< "Author225">() >(),  "Title184" > , Rev< 1u, Arr64< Hash< "Author1950">() >(),  "Make stateful allocator propagation more consistent for `operator+(basic_string)`" >  >() },
    { 1166u, RevList< Rev< 0u, Arr64< Hash< "Author489">() >(),  "Title408" >  >() },
    { 1167u, RevList< Rev< 0u, Arr64< Hash< "Author1964">() >(),  "Improving function templates with Class Template Argument Deduction" >  >() },
    { 1168u, RevList< Rev< 0u, Arr64< Hash< "Author1221">() >(),  "How to make Terse Notation soar with Class Template Argument Deduction" >  >() },
    { 1169u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "static operator()" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "static `operator()`" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "static `operator()`" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "static operator()" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "static operator()" >  >() },
    { 1170u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Overload sets as function parameters" >  >() },
    { 1171u, RevList< Rev< 0u, Arr64< Hash< "Author448">() >(),  "Title377" >  >() },
    { 1172u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title569" > , Rev< 1u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1356" >  >() },
    { 1175u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "a simple and practical optional reference for C++" >  >() },
    { 1177u, RevList< Rev< 0u, Arr64< Hash< "Author1335">() >(),  "Title1027" > , Rev< 1u, Arr64< Hash< "Author1493">() >(),  "Title1161" >  >() },
    { 1178u, RevList< Rev< 0u, Arr64< Hash< "Author1798">() >(),  "C++ Compile" >  >() },
    { 1179u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1120" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title327" >  >() },
    { 1180u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Response to P1156" >  >() },
    { 1181u, RevList< Rev< 0u, Arr64< Hash< "Morwenn">() >(),  "Proposing <code>unless</code>" >  >() },
    { 1182u, RevList< Rev< 0u, Arr64< Hash< "Author551">() >(),  "New names for the power-of-2 templates (and their header)" >  >() },
    { 1184u, RevList< Rev< 0u, Arr64< Hash< "Author548">() >(),  "A Module Mapper" > , Rev< 1u, Arr64< Hash< "Author2169">() >(),  "A Module Mapper" > , Rev< 2u, Arr64< Hash< "Author2004">() >(),  "A Module Mapper" >  >() },
    { 1185u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "<=> != ==" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "<=> != ==" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "<=> != ==" >  >() },
    { 1186u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "When do you actually use <=>?" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "When do you actually use <=>?" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "When do you actually use <=>?" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "When do you actually use <=>?" >  >() },
    { 1187u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "A type trait for std::compare_3way()'s type" >  >() },
    { 1188u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Library utilities for <=>" >  >() },
    { 1189u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Adding <=> to library" >  >() },
    { 1190u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title386" >  >() },
    { 1191u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title1260" >  >() },
    { 1192u, RevList< Rev< 0u, Arr64< Hash< "Thomas Rodgers">() >(),  "p1192R0: Experience report - integrating Executors with Parallel Algorithms" > , Rev< 1u, Arr64< Hash< "Thomas Rodgers">() >(),  "p1192R1: Experience report - integrating Executors with Parallel Algorithms" >  >() },
    { 1193u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Explicitly Specified Returns for (Implicit) Conversions" >  >() },
    { 1194u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "P1194: The Compromise Executors Proposal: A lazy simplification of P0443" >  >() },
    { 1195u, RevList< Rev< 0u, Arr64< Hash< "Author1421">() >(),  "Making <system_error> constexpr" >  >() },
    { 1196u, RevList< Rev< 0u, Arr64< Hash< "Author1773">() >(),  "Value-based std::error_category comparison" >  >() },
    { 1197u, RevList< Rev< 0u, Arr64< Hash< "Author2142">() >(),  "A non-allocating overload of error_category::message()" >  >() },
    { 1198u, RevList< Rev< 0u, Arr64< Hash< "Author297">() >(),  "Adding error_category::failed()" >  >() },
    { 1199u, RevList< Rev< 0u, Arr64< Hash< "Author974">() >(),  "A simple proposal for unifying generic and object-oriented programming" >  >() },
    { 1200u, RevList< Rev< 0u, Arr64< Hash< "Author2122">() >(),  "Title1641" >  >() },
    { 1201u, RevList< Rev< 0u, Arr64< Hash< "Author1764">() >(),  "variant direct comparisons with held types" >  >() },
    { 1202u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title415" > , Rev< 1u, Arr64< Hash< "David Goldblatt">() >(),  "Title213" > , Rev< 2u, Arr64< Hash< "David Goldblatt">() >(),  "Title178" > , Rev< 3u, Arr64< Hash< "David Goldblatt">() >(),  "Asymmetric Fences" > , Rev< 4u, Arr64< Hash< "David Goldblatt">() >(),  "P1202R4" > , Rev< 5u, Arr64< Hash< "David Goldblatt">() >(),  "P1202R5" >  >() },
    { 1203u, RevList< Rev< 0u, Arr64< Hash< "Author1981">() >(),  "Modular main()" >  >() },
    { 1204u, RevList< Rev< 0u, Arr64< Hash< "Author1218">() >(),  "Canonical Project Structure" >  >() },
    { 1205u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "Teleportation via <code>co_await</code>" >  >() },
    { 1206u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title509" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title137" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1374" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title680" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title962" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title804" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1543" > , Rev< 7u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1387" >  >() },
    { 1207u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Movability of Single-pass Iterators" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Movability of Single-pass Iterators" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1660" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title553" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title304" >  >() },
    { 1208u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Adopt source_location from Library Fundamentals V3 for C++20" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Adopt source_location from Library Fundamentals V3 for C++20" > , Rev< 3u, Arr64< Hash< "Author2190">() >(),  "Title1682" > , Rev< 4u, Arr64< Hash< "Author1252">() >(),  "Title972" > , Rev< 5u, Arr64< Hash< "Author1091">() >(),  "Title877" > , Rev< 6u, Arr64< Hash< "Author29">() >(),  "Title22" >  >() },
    { 1209u, RevList< Rev< 0u, Arr64< Hash< "Author1703">() >(),  "Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20" >  >() },
    { 1210u, RevList< Rev< 0u, Arr64< Hash< "Author2168">() >(),  "Completing the Rebase of Library Fundamentals, Version 3, Working Draft" >  >() },
    { 1212u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Modules and Freestanding" >  >() },
    { 1213u, RevList< Rev< 0u, Arr64< Hash< "Author625">() >(),  "Global Module Fragment is Unnecessary" > , Rev< 1u, Arr64< Hash< "Author1634">() >(),  "Global Module Fragment is Unnecessary" >  >() },
    { 1214u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Pointer to Member Functions and Member Objects are just Callables!" >  >() },
    { 1217u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Out-of-thin-air, revisited, again" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Out-of-thin-air, revisited, again" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Out-of-thin-air, revisited, again" >  >() },
    { 1218u, RevList< Rev< 0u, Arr64< Hash< "Author89">() >(),  "Redefinitions in Legacy Imports" >  >() },
    { 1219u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Homogeneous variadic function parameters" > , Rev< 1u, Arr64< Hash< "James Touton">() >(),  "Homogeneous variadic function parameters" > , Rev< 2u, Arr64< Hash< "James Touton">() >(),  "Homogeneous variadic function parameters" >  >() },
    { 1220u, RevList< Rev< 0u, Arr64< Hash< "Chris Kennelly">() >(),  "Controlling When Inline Functions are Emitted" >  >() },
    { 1221u, RevList< Rev< 0u, Arr64< Hash< "Author1663">() >(),  "Title1293" > , Rev< 1u, Arr64< Hash< "Author2126">() >(),  "Title1643" >  >() },
    { 1222u, RevList< Rev< 0u, Arr64< Hash< "Author597">() >(),  "Title488" > , Rev< 1u, Arr64< Hash< "Author605">() >(),  "A Standard flatset" > , Rev< 2u, Arr64< Hash< "Author1350">() >(),  "A Standard flatset" > , Rev< 3u, Arr64< Hash< "Author255">() >(),  "A Standard flatset" > , Rev< 4u, Arr64< Hash< "Author1301">() >(),  "A Standard flatset" >  >() },
    { 1223u, RevList< Rev< 0u, Arr64< Hash< "Author1430">() >(),  "Title1110" > , Rev< 1u, Arr64< Hash< "Author1562">() >(),  "Title1210" > , Rev< 2u, Arr64< Hash< "Author894">() >(),  "findast" > , Rev< 3u, Arr64< Hash< "Author588">() >(),  "findlast" > , Rev< 4u, Arr64< Hash< "Author445">() >(),  "findlast" > , Rev< 5u, Arr64< Hash< "Author1865">() >(),  "findlast" >  >() },
    { 1224u, RevList< Rev< 0u, Arr64< Hash< "Author736">() >(),  "C++ Standard Library Issues to be moved in San Diego" >  >() },
    { 1225u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Feedback on 2D Graphics" >  >() },
    { 1227u, RevList< Rev< 0u, Arr64< Hash< "Jorg Brown">() >(),  "p1227R0: Signed size() functions" > , Rev< 1u, Arr64< Hash< "Jorg Brown">() >(),  "p1227R1: Signed ssize() functions, unsigned size() functions" > , Rev< 2u, Arr64< Hash< "Author843">() >(),  "Signed ssize() functions, unsigned size() functions" >  >() },
    { 1228u, RevList< Rev< 1u, Arr64< Hash< "Author2136">() >(),  "A proposal to add an efficient string concatenation routine to the Standard Library (P1228)" >  >() },
    { 1229u, RevList< Rev< 0u, Arr64< Hash< "Jorg Brown">() >(),  "p1229R0: Labelled Parameters" >  >() },
    { 1230u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1409" >  >() },
    { 1231u, RevList< Rev< 0u, Arr64< Hash< "Author533">() >(),  "Title434" >  >() },
    { 1232u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "p1232_integrating_executors_with_the_standard_library.md - Grip" >  >() },
    { 1233u, RevList< Rev< 0u, Arr64< Hash< "Ashley Hedberg">() >(),  "Title906" > , Rev< 1u, Arr64< Hash< "Ashley Hedberg">() >(),  "Shift-by-negative in `shift_left` and `shift_right`" >  >() },
    { 1235u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Title1103" >  >() },
    { 1236u, RevList< Rev< 0u, Arr64< Hash< "Author183">() >(),  "Alternative Wording for P0907R4 Signed Integers are Two's Complement" > , Rev< 1u, Arr64< Hash< "Author2185">() >(),  "Alternative Wording for P0907R4 Signed Integers are Two's Complement" >  >() },
    { 1237u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2018/07/11 - 2018/10/03" >  >() },
    { 1238u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode Direction" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode Direction" >  >() },
    { 1239u, RevList< Rev< 0u, Arr64< Hash< "Daniel Lustig">() >(),  "Placed Before" >  >() },
    { 1240u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Title1380" > , Rev< 1u, Arr64< Hash< "Wyatt Childers">() >(),  "Title1056" > , Rev< 2u, Arr64< Hash< "Wyatt Childers">() >(),  "Scalable Reflection" >  >() },
    { 1241u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "p1241_in_support_of_coroutines.md - Grip" >  >() },
    { 1242u, RevList< Rev< 0u, Arr64< Hash< "Jeff Snyder">() >(),  "Title1327" > , Rev< 1u, Arr64< Hash< "Jeff Snyder">() >(),  "Title915" >  >() },
    { 1243u, RevList< Rev< 0u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R0 - Rangify New Algorithms" > , Rev< 1u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R1 - Rangify New Algorithms" > , Rev< 2u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R2 - Rangify New Algorithms" > , Rev< 3u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R3 - Rangify New Algorithms" > , Rev< 4u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R4" >  >() },
    { 1244u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "Title1474" >  >() },
    { 1245u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "<code>export module containing [[attribute]];</code>" >  >() },
    { 1246u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "The <code>no_float</code> function attribute" >  >() },
    { 1247u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "Disabling static destructors: introducing <code>no_destroy</code> and <code>always_destroy</code> attributes" >  >() },
    { 1248u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixing 'Relation's" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Remove 'CommonReference' requirement from 'StrictWeakOrdering'" >  >() },
    { 1249u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "std::forward from std::initializer_list" >  >() },
    { 1250u, RevList< Rev< 0u, Arr64< Hash< "Titus Winters">() >(),  "Title433" >  >() },
    { 1251u, RevList< Rev< 0u, Arr64< Hash< "Author378">() >(),  "Title321" > , Rev< 1u, Arr64< Hash< "Author103">() >(),  "Title94" >  >() },
    { 1252u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Merge the Ranges TS" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Merge the Ranges TS" > , Rev< 2u, Arr64< Hash< "Casey Carter">() >(),  "Merge the Ranges TS" >  >() },
    { 1253u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Title956" >  >() },
    { 1254u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Notes on C++ Package Management" >  >() },
    { 1255u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 2u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 3u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 4u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: <code>view::maybe</code>" > , Rev< 5u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: views::maybe" > , Rev< 6u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements:" > , Rev< 7u, Arr64< Hash< "Steve Downey">() >(),  "A view of 0 or 1 elements: `views::maybe`" > , Rev< 8u, Arr64< Hash< "Author325">() >(),  "Title275" > , Rev< 9u, Arr64< Hash< "Author704">() >(),  "Title566" > , Rev< 10u, Arr64< Hash< "Author82">() >(),  "Title82" > , Rev< 11u, Arr64< Hash< "Author1796">() >(),  "Title1396" > , Rev< 12u, Arr64< Hash< "Author1395">() >(),  "Title1086" > , Rev< 13u, Arr64< Hash< "Author1012">() >(),  "Title810" > , Rev< 14u, Arr64< Hash< "Author1559">() >(),  "Title1209" >  >() },
    { 1256u, RevList< Rev< 0u, Arr64< Hash< "Author1737">() >(),  "Title1341" >  >() },
    { 1257u, RevList< Rev< 0u, Arr64< Hash< "Author171">() >(),  "Implementation experience on trying to implement concurrent data and control structures with executors" >  >() },
    { 1258u, RevList< Rev< 0u, Arr64< Hash< "Author1170">() >(),  "Title927" >  >() },
    { 1259u, RevList< Rev< 0u, Arr64< Hash< "Author905">() >(),  "Title732" > , Rev< 1u, Arr64< Hash< "Author22">() >(),  "Merge most of Networking TS into C++ Working Draft" >  >() },
    { 1260u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "Pattern Matching" >  >() },
    { 1261u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title454" >  >() },
    { 1263u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title1657" >  >() },
    { 1264u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title100" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Title1416" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Title1129" >  >() },
    { 1267u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "Title201" >  >() },
    { 1269u, RevList< Rev< 0u, Arr64< Hash< "Jason Carey">() >(),  "Three Years with the Networking TS" >  >() },
    { 1271u, RevList< Rev< 0u, Arr64< Hash< "Author885">() >(),  "P1271r0 | Move resource_adaptor from Library TS to the C++ WP" >  >() },
    { 1272u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Byteswapping for fun&&nuf" > , Rev< 1u, Arr64< Hash< "Isabella Muerte">() >(),  "Byteswapping for fun&&nuf" > , Rev< 2u, Arr64< Hash< "Isabella Muerte">() >(),  "Byteswapping for fun&&nuf" > , Rev< 3u, Arr64< Hash< "Isabella Muerte">() >(),  "Byteswapping for fun&&nuf" > , Rev< 4u, Arr64< Hash< "Isabella Muerte">() >(),  "Byteswapping for fun&&nuf" >  >() },
    { 1273u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "86 The Absurd (From Exceptions)" >  >() },
    { 1274u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Bang For The Buck" >  >() },
    { 1275u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Desert Sessions: Improving hostile environment interactions" >  >() },
    { 1276u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Void Main" >  >() },
    { 1277u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Subscripts On Parade" >  >() },
    { 1278u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "offsetof For the Modern Era" >  >() },
    { 1279u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "std::breakpoint" >  >() },
    { 1280u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Integer Width Literals" > , Rev< 1u, Arr64< Hash< "Isabella Muerte">() >(),  "Integer Width Literals" > , Rev< 2u, Arr64< Hash< "Isabella Muerte">() >(),  "Integer Width Literals" >  >() },
    { 1281u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Feature Presentation" >  >() },
    { 1282u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Ceci Nest Pas Une Pipe: Adding a workflow operator to C++" >  >() },
    { 1283u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Sharing is Caring" >  >() },
    { 1284u, RevList< Rev< 0u, Arr64< Hash< "Chris Kennelly">() >(),  "Allowing Inlining of Replaceable Functions" >  >() },
    { 1285u, RevList< Rev< 0u, Arr64< Hash< "Author250">() >(),  "Improving Completeness Requirements for Type Traits" >  >() },
    { 1286u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Contra CWG DR1778" > , Rev< 1u, Arr64< Hash< "Richard Smith">() >(),  "Contra CWG DR1778" > , Rev< 2u, Arr64< Hash< "Richard Smith">() >(),  "Contra CWG DR1778" >  >() },
    { 1287u, RevList< Rev< 0u, Arr64< Hash< "Author1448">() >(),  "Title1124" >  >() },
    { 1288u, RevList< Rev< 0u, Arr64< Hash< "Author2178">() >(),  "Title1673" >  >() },
    { 1289u, RevList< Rev< 0u, Arr64< Hash< "Author111">() >(),  "Title99" > , Rev< 1u, Arr64< Hash< "Author1801">() >(),  "Title1397" >  >() },
    { 1290u, RevList< Rev< 0u, Arr64< Hash< "Author1932">() >(),  "Title1493" > , Rev< 1u, Arr64< Hash< "Author141">() >(),  "Title121" > , Rev< 2u, Arr64< Hash< "Author2035">() >(),  "Title1573" > , Rev< 3u, Arr64< Hash< "Author897">() >(),  "Title726" >  >() },
    { 1291u, RevList< Rev< 0u, Arr64< Hash< "Author1059">() >(),  "std::ranges::less<> Should Be More!" >  >() },
    { 1292u, RevList< Rev< 0u, Arr64< Hash< "Matt Calabrese">() >(),  "Customization Point Functions" >  >() },
    { 1293u, RevList< Rev< 0u, Arr64< Hash< "Author1626">() >(),  "ostream_joiner" > , Rev< 1u, Arr64< Hash< "Author2072">() >(),  "ostream_joiner" > , Rev< 2u, Arr64< Hash< "Author1614">() >(),  "ostream_joiner" >  >() },
    { 1294u, RevList< Rev< 0u, Arr64< Hash< "Author1632">() >(),  "Microsoft Word - N3254.docx" >  >() },
    { 1295u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Spaceship library update" >  >() },
    { 1296u, RevList< Rev< 0u, Arr64< Hash< "Phil Miller">() >(),  "Title862" >  >() },
    { 1298u, RevList< Rev< 0u, Arr64< Hash< "Olivier Giroux">() >(),  "Reserve more freedom for atomic_ref implementers" >  >() },
    { 1299u, RevList< Rev< 0u, Arr64< Hash< "Author1354">() >(),  "Module Preamble is Unnecessary" > , Rev< 1u, Arr64< Hash< "Author961">() >(),  "Module Preamble is Unnecessarily Fragile" > , Rev< 3u, Arr64< Hash< "Author287">() >(),  "Module Preamble is Unnecessarily Fragile" >  >() },
    { 1300u, RevList< Rev< 0u, Arr64< Hash< "Author2093">() >(),  "Remember the FORTRAN" >  >() },
    { 1301u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "nodiscard should have a reason" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "[[nodiscard(\"should have a reason\")]]" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "[[nodiscard(\"should have a reason\")]]" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "[[nodiscard(\"should have a reason\")]]" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "[[nodiscard(\"should have a reason\")]]" >  >() },
    { 1302u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Implicit Module Partition Lookup" > , Rev< 1u, Arr64< Hash< "Isabella Muerte">() >(),  "Implicit Module Partition Lookup" >  >() },
    { 1303u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Inline Module Partitions" >  >() },
    { 1304u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Simplifying Extern Template" >  >() },
    { 1305u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Deprecate The Addressof Operator" >  >() },
    { 1306u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Title351" > , Rev< 1u, Arr64< Hash< "Andrew Sutton">() >(),  "Title1531" > , Rev< 2u, Arr64< Hash< "Andrew Sutton">() >(),  "Expansion statements r2" > , Rev< 3u, Arr64< Hash< "Andrew Sutton">() >(),  "P1306 (Expansion statements)" >  >() },
    { 1307u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title1023" >  >() },
    { 1308u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "pattern_matching" >  >() },
    { 1310u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title88" >  >() },
    { 1312u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title425" >  >() },
    { 1313u, RevList< Rev< 0u, Arr64< Hash< "Matthew Woehlke">() >(),  "Let's Talk About Package Specification" >  >() },
    { 1314u, RevList< Rev< 0u, Arr64< Hash< "Miguel Ojeda">() >(),  "unique_val" > , Rev< 1u, Arr64< Hash< "Miguel Ojeda">() >(),  "unique_val" >  >() },
    { 1315u, RevList< Rev< 0u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_val" > , Rev< 1u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_val" > , Rev< 2u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear" > , Rev< 3u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear" > , Rev< 4u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear" > , Rev< 5u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear" > , Rev< 6u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear (update to N2599)" > , Rev< 7u, Arr64< Hash< "Miguel Ojeda">() >(),  "secure_clear" >  >() },
    { 1316u, RevList< Rev< 0u, Arr64< Hash< "Author1954">() >(),  "Title1517" >  >() },
    { 1317u, RevList< Rev< 0u, Arr64< Hash< "Author977">() >(),  "Title785" > , Rev< 1u, Arr64< Hash< "Author618">() >(),  "Title504" >  >() },
    { 1318u, RevList< Rev< 0u, Arr64< Hash< "Author1104">() >(),  "Title885" >  >() },
    { 1319u, RevList< Rev< 0u, Arr64< Hash< "Author1015">() >(),  "Changes between C++11 and C++14" >  >() },
    { 1320u, RevList< Rev< 0u, Arr64< Hash< "Author270">() >(),  "Allowing contract predicates on non-first declarations" > , Rev< 1u, Arr64< Hash< "Author213">() >(),  "Allowing contract predicates on non-first declarations" > , Rev< 2u, Arr64< Hash< "Author762">() >(),  "Allowing contract predicates on non-first declarations" >  >() },
    { 1321u, RevList< Rev< 0u, Arr64< Hash< "Author1555">() >(),  "UB in contract violations" >  >() },
    { 1322u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS enhancement to enable custom I/O executors" > , Rev< 1u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS enhancement to enable custom I/O executors" > , Rev< 2u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS enhancement to enable custom I/O executors" > , Rev< 3u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS enhancement to enable custom I/O executors" >  >() },
    { 1323u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "Contract postconditions and return type deduction" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "Contract postconditions and return type deduction" > , Rev< 2u, Arr64< Hash< "Hubert S.K">() >(),  "Contract postconditions and return type deduction" >  >() },
    { 1324u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "[RE] Yet another" > , Rev< 1u, Arr64< Hash< "Mihail Naydenov">() >(),  "[RE]YetAnother" >  >() },
    { 1327u, RevList< Rev< 0u, Arr64< Hash< "Author1875">() >(),  "Allowing dynamic_cast, polymorphic typeid in Constant Expressions" > , Rev< 1u, Arr64< Hash< "Author1254">() >(),  "Allowing dynamic_cast, polymorphic typeid in Constant Expressions" >  >() },
    { 1328u, RevList< Rev< 0u, Arr64< Hash< "Author790">() >(),  "Making std::type_info::operator== constexpr" > , Rev< 1u, Arr64< Hash< "Author554">() >(),  "Making std::type_info::operator== constexpr" >  >() },
    { 1329u, RevList< Rev< 0u, Arr64< Hash< "Author984">() >(),  "Title793" >  >() },
    { 1330u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Title679" >  >() },
    { 1331u, RevList< Rev< 0u, Arr64< Hash< "Author1850">() >(),  "Title1437" > , Rev< 1u, Arr64< Hash< "Author81">() >(),  "Title80" > , Rev< 2u, Arr64< Hash< "Author2133">() >(),  "Title1646" >  >() },
    { 1332u, RevList< Rev< 0u, Arr64< Hash< "Author877">() >(),  "Title703" >  >() },
    { 1333u, RevList< Rev< 0u, Arr64< Hash< "Author1896">() >(),  "Title1466" >  >() },
    { 1334u, RevList< Rev< 0u, Arr64< Hash< "Author502">() >(),  "Title413" >  >() },
    { 1335u, RevList< Rev< 0u, Arr64< Hash< "Author722">() >(),  "Title581" >  >() },
    { 1337u, RevList< Rev< 0u, Arr64< Hash< "Author1821">() >(),  "Title1413" >  >() },
    { 1338u, RevList< Rev< 0u, Arr64< Hash< "Author809">() >(),  "P1338" > , Rev< 1u, Arr64< Hash< "Author2079">() >(),  "P1338R1" >  >() },
    { 1339u, RevList< Rev< 0u, Arr64< Hash< "Author1790">() >(),  "Title1392" > , Rev< 1u, Arr64< Hash< "Author878">() >(),  "Title704" >  >() },
    { 1341u, RevList< Rev< 0u, Arr64< Hash< "Author315">() >(),  "Microsoft Word - Unifying asynchronous APIs in C++ standard library.docx" >  >() },
    { 1342u, RevList< Rev< 0u, Arr64< Hash< "Author933">() >(),  "Microsoft Word - Unified Coroutines.docx" >  >() },
    { 1344u, RevList< Rev< 0u, Arr64< Hash< "Author1379">() >(),  "Title1069" > , Rev< 1u, Arr64< Hash< "Author251">() >(),  "Title208" >  >() },
    { 1347u, RevList< Rev< 0u, Arr64< Hash< "Author1890">() >(),  "Modules: ADL & Internal Linkage" > , Rev< 1u, Arr64< Hash< "Author1204">() >(),  "Modules: ADL & Internal Linkage" >  >() },
    { 1348u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "An Executor Property for Occupancy of Execution Agents" >  >() },
    { 1349u, RevList< Rev< 0u, Arr64< Hash< "Vinnie Falco">() >(),  "Better Integration of Sender Executors" >  >() },
    { 1350u, RevList< Rev< 0u, Arr64< Hash< "Author1185">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 1351u, RevList< Rev< 0u, Arr64< Hash< "Mark Zeren">() >(),  "Intrusive smart pointer feedback" >  >() },
    { 1353u, RevList< Rev< 0u, Arr64< Hash< "Author1940">() >(),  "Missing Feature Test Macros" >  >() },
    { 1354u, RevList< Rev< 0u, Arr64< Hash< "Chandler Carruth">() >(),  "SG7 Guidelines for Review of Proposals" >  >() },
    { 1355u, RevList< Rev< 0u, Arr64< Hash< "Chris Kennelly">() >(),  "Exposing a narrow contract for ceil2" > , Rev< 1u, Arr64< Hash< "Chris Kennelly">() >(),  "Exposing a narrow contract for ceil2" > , Rev< 2u, Arr64< Hash< "Chris Kennelly">() >(),  "Exposing a narrow contract for ceil2" >  >() },
    { 1356u, RevList< Rev< 0u, Arr64< Hash< "Author1032">() >(),  "C++ Coroutine TS Issues" >  >() },
    { 1357u, RevList< Rev< 0u, Arr64< Hash< "Author617">() >(),  "Traits for [Un]bounded Arrays" > , Rev< 1u, Arr64< Hash< "Author1978">() >(),  "Traits for [Un]bounded Arrays" >  >() },
    { 1358u, RevList< Rev< 0u, Arr64< Hash< "Author1582">() >(),  "Core \"ready\" Issues" >  >() },
    { 1359u, RevList< Rev< 0u, Arr64< Hash< "Author292">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 1360u, RevList< Rev< 0u, Arr64< Hash< "Author1300">() >(),  "Title1004" >  >() },
    { 1361u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Integration of chrono with text formatting" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Integration of chrono with text formatting" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Integration of chrono with text formatting" >  >() },
    { 1362u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title1338" >  >() },
    { 1364u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title247" >  >() },
    { 1365u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title1507" >  >() },
    { 1367u, RevList< Rev< 0u, Arr64< Hash< "ogiroux@nvidia.com">() >(),  "Title1699" > , Rev< 1u, Arr64< Hash< "ogiroux@nvidia.com">() >(),  "Title105" >  >() },
    { 1368u, RevList< Rev< 0u, Arr64< Hash< "Author854">() >(),  "Multiplication and division of fixed-point numbers" > , Rev< 1u, Arr64< Hash< "Author1457">() >(),  "Multiplication and division of fixed-point numbers" >  >() },
    { 1369u, RevList< Rev< 0u, Arr64< Hash< "Author654">() >(),  "Guidelines for Formulating Library Semantics Specifications" >  >() },
    { 1370u, RevList< Rev< 0u, Arr64< Hash< "Author459">() >(),  "Title387" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Generic numerical algorithm development with(out) <code>numeric_limits</code>" >  >() },
    { 1371u, RevList< Rev< 0u, Arr64< Hash< "Sergei Murzin">() >(),  "Pattern Matching" > , Rev< 1u, Arr64< Hash< "Sergei Murzin">() >(),  "Pattern Matching" > , Rev< 2u, Arr64< Hash< "Sergei Murzin">() >(),  "Pattern Matching" > , Rev< 3u, Arr64< Hash< "Bruno Cardoso">() >(),  "Pattern Matching" >  >() },
    { 1372u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "Giving <code>atomic_ref</code> implementers more flexibility by providing customization points for non-lock-free implementation" >  >() },
    { 1373u, RevList< Rev< 0u, Arr64< Hash< "Author1034">() >(),  "Title833" >  >() },
    { 1374u, RevList< Rev< 0u, Arr64< Hash< "Author515">() >(),  "Resolving LWG #2307 for C++20: Consistently Explicit Constructors" >  >() },
    { 1375u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "More Constrained: Apples or Oranges? On the road to semantic constraint matching" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "More Constrained: Apples or Oranges? On the road to semantic constraint matching" > , Rev< 2u, Arr64< Hash< "Hubert S.K">() >(),  "More Constrained: Apples or Oranges? On the road to semantic constraint matching" >  >() },
    { 1376u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Summary of freestanding evening session discussions" >  >() },
    { 1377u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Summary of Dec 2018 SG14 freestanding discussions" >  >() },
    { 1378u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::string_literal" >  >() },
    { 1380u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "Ambiguity and Insecurities with Three-Way Comparison" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "Ambiguity and Insecurities with Three-Way Comparison" >  >() },
    { 1381u, RevList< Rev< 0u, Arr64< Hash< "Nicolas Lesser">() >(),  "Reference capture of structured bindings" > , Rev< 1u, Arr64< Hash< "Nicolas Lesser">() >(),  "Reference capture of structured bindings" >  >() },
    { 1382u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Title1226" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Title944" >  >() },
    { 1383u, RevList< Rev< 0u, Arr64< Hash< "Author2088">() >(),  "Title1620" > , Rev< 1u, Arr64< Hash< "Author1828">() >(),  "Title1420" > , Rev< 2u, Arr64< Hash< "Author385">() >(),  "Title330" >  >() },
    { 1385u, RevList< Rev< 0u, Arr64< Hash< "Guy Davidson">() >(),  "[linear.algebra]R0: A proposal to add linear algebra support to the C++ standard library" > , Rev< 1u, Arr64< Hash< "Guy Davidson">() >(),  "[linear.algebra]R1: A proposal to add linear algebra support to the C++ standard library" > , Rev< 2u, Arr64< Hash< "Guy Davidson">() >(),  "[linear.algebra]R2: A proposal to add linear algebra support to the C++ standard library" > , Rev< 3u, Arr64< Hash< "Guy Davidson">() >(),  "A proposal to add linear algebra support to the C++ standard library" > , Rev< 4u, Arr64< Hash< "Guy Davidson">() >(),  "A proposal to add linear algebra support to the C++ standard library" > , Rev< 5u, Arr64< Hash< "Guy Davidson">() >(),  "A proposal to add linear algebra support to the C++ standard library" > , Rev< 6u, Arr64< Hash< "Guy Davidson">() >(),  "A proposal to add linear algebra support to the C++ standard library" > , Rev< 7u, Arr64< Hash< "Guy Davidson">() >(),  "Untitled document" >  >() },
    { 1386u, RevList< Rev< 0u, Arr64< Hash< "Author1365">() >(),  "Title1059" > , Rev< 1u, Arr64< Hash< "Author2017">() >(),  "Title1557" > , Rev< 2u, Arr64< Hash< "Author724">() >(),  "Title584" >  >() },
    { 1388u, RevList< Rev< 0u, Arr64< Hash< "Author1936">() >(),  "Title1497" >  >() },
    { 1389u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "Standing Document for SG20: Guidelines for Teaching C++ to Beginners" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "Standing Document for SG20: Guidelines for Teaching C++ to Beginners" >  >() },
    { 1390u, RevList< Rev< 0u, Arr64< Hash< "Mata Chochl">() >(),  "Suggested Reflection TS NB Resolutions" > , Rev< 1u, Arr64< Hash< "Mat\xC3\xBA\xC5\xA1 Chochl\xC3\xADk">() >(),  "Reflection TS NB comment resolutions: summary and rationale" >  >() },
    { 1391u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1388" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title768" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title185" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1216" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1621" >  >() },
    { 1392u, RevList< Rev< 0u, Arr64< Hash< "Author672">() >(),  "Differences Between Functions and Function Templates" >  >() },
    { 1393u, RevList< Rev< 0u, Arr64< Hash< "David Hollman">() >(),  "properties" >  >() },
    { 1394u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title846" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title251" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1639" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title117" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title599" >  >() },
    { 1395u, RevList< Rev< 0u, Arr64< Hash< "Author2124">() >(),  "Modules: Partitions Are Not a Panacea" >  >() },
    { 1401u, RevList< Rev< 0u, Arr64< Hash< "Author1319">() >(),  "Title1017" > , Rev< 1u, Arr64< Hash< "Andrzej Krzemie\xC5\x84ski">() >(),  "constexpr_bool_conv_r1" > , Rev< 2u, Arr64< Hash< "Author917">() >(),  "Title738" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Narrowing contextual conversions to bool" > , Rev< 4u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Narrowing contextual conversions to bool" > , Rev< 5u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Narrowing contextual conversions to bool" >  >() },
    { 1402u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title897" >  >() },
    { 1403u, RevList< Rev< 0u, Arr64< Hash< "David S">() >(),  "Experience Report: Implementing a Coroutines TS Frontend to an Existing Tasking Library" >  >() },
    { 1404u, RevList< Rev< 0u, Arr64< Hash< "Author412">() >(),  "Title354" > , Rev< 1u, Arr64< Hash< "Andrzej Krzemie\xC5\x84ski">() >(),  "bad_alloc_r1" >  >() },
    { 1405u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "C++20 Executors are Resilient to ABI Breakage | P1405R0" >  >() },
    { 1406u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Add more std::hash specializations" > , Rev< 1u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title1236" >  >() },
    { 1407u, RevList< Rev< 0u, Arr64< Hash< "Scott Schurr">() >(),  "P1407R0_SignedIntOverflow" > , Rev< 1u, Arr64< Hash< "Scott Schurr">() >(),  "P1407R1_SignedIntOverflow" >  >() },
    { 1408u, RevList< Rev< 0u, Arr64< Hash< "Author182">() >(),  "Title157" >  >() },
    { 1410u, RevList< Rev< 0u, Arr64< Hash< "Author2164">() >(),  "Title1665" >  >() },
    { 1411u, RevList< Rev< 0u, Arr64< Hash< "Author164">() >(),  "Title139" >  >() },
    { 1412u, RevList< Rev< 0u, Arr64< Hash< "Author1410">() >(),  "Title1098" >  >() },
    { 1413u, RevList< Rev< 0u, Arr64< Hash< "Author728">() >(),  "Title587" > , Rev< 1u, Arr64< Hash< "Author508">() >(),  "Title419" > , Rev< 2u, Arr64< Hash< "Author1140">() >(),  "Title907" > , Rev< 3u, Arr64< Hash< "Author1966">() >(),  "Title1528" >  >() },
    { 1415u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title158" > , Rev< 1u, Arr64< Hash< "Michael Wong">() >(),  "Title1092" >  >() },
    { 1416u, RevList< Rev< 0u, Arr64< Hash< "Author1765">() >(),  "Title1369" >  >() },
    { 1417u, RevList< Rev< 0u, Arr64< Hash< "Author407">() >(),  "Title347" >  >() },
    { 1419u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title118" >  >() },
    { 1421u, RevList< Rev< 0u, Arr64< Hash< "Author1083">() >(),  "Title873" >  >() },
    { 1422u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2018/10/17 - 2019/01/09" >  >() },
    { 1423u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t backward compatibility remediation" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t backward compatibility remediation" > , Rev< 2u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t backward compatibility remediation" > , Rev< 3u, Arr64< Hash< "Tom Honermann">() >(),  "char8_t backward compatibility remediation" >  >() },
    { 1424u, RevList< Rev< 0u, Arr64< Hash< "Author1275">() >(),  "'constexpr' feature macro concerns" > , Rev< 1u, Arr64< Hash< "Author1548">() >(),  "'constexpr' feature macro concerns" >  >() },
    { 1425u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title380" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1011" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title561" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title600" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1689" >  >() },
    { 1426u, RevList< Rev< 0u, Arr64< Hash< "Author1500">() >(),  "Title1165" >  >() },
    { 1427u, RevList< Rev< 0u, Arr64< Hash< "Author1995">() >(),  "Title1542" >  >() },
    { 1428u, RevList< Rev< 0u, Arr64< Hash< "Author787">() >(),  "Title639" >  >() },
    { 1429u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title25" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1650" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title1550" > , Rev< 3u, Arr64< Hash< "Joshua Berne">() >(),  "Title888" >  >() },
    { 1430u, RevList< Rev< 0u, Arr64< Hash< "Author402">() >(),  "Title343" > , Rev< 1u, Arr64< Hash< "Author1833">() >(),  "Title1423" >  >() },
    { 1433u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "Title1587" >  >() },
    { 1434u, RevList< Rev< 0u, Arr64< Hash< "Author584">() >(),  "Discussing Pointer Provenance" >  >() },
    { 1436u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "d1436r0.html" > , Rev< 1u, Arr64< Hash< "Gordon Brown">() >(),  "d1436r1.html" > , Rev< 2u, Arr64< Hash< "Gordon Brown">() >(),  "d1436r2.html" > , Rev< 3u, Arr64< Hash< "Gordon Brown">() >(),  "Title431" >  >() },
    { 1438u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0">() >(),  "P1438R0 - A Rational Number Library for C++" > , Rev< 1u, Arr64< Hash< "\xC2\xA0">() >(),  "P1438R1 - A Rational Number Library for C++" >  >() },
    { 1439u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Charset Transcoding, Transformation, and Transliteration" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Charset Transcoding, Transformation, and Transliteration" >  >() },
    { 1440u, RevList< Rev< 0u, Arr64< Hash< "Johel Guerrero">() >(),  "is_clamped" >  >() },
    { 1441u, RevList< Rev< 0u, Arr64< Hash< "Author1074">() >(),  "Title865" > , Rev< 1u, Arr64< Hash< "Author1961">() >(),  "Title1526" >  >() },
    { 1442u, RevList< Rev< 0u, Arr64< Hash< "Author1892">() >(),  "A Medley of Networking TS improvements" >  >() },
    { 1443u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title762" >  >() },
    { 1444u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1153" >  >() },
    { 1445u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1670" >  >() },
    { 1446u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "html5 Reconsider the Networking TS for inclusion in C++20" >  >() },
    { 1447u, RevList< Rev< 0u, Arr64< Hash< "Mata Chochl">() >(),  "constexpr C++ is not constexpr C" >  >() },
    { 1448u, RevList< Rev< 0u, Arr64< Hash< "Nathan Burgers">() >(),  "Title1404" >  >() },
    { 1449u, RevList< Rev< 0u, Arr64< Hash< "Author1437">() >(),  "Title1117" >  >() },
    { 1450u, RevList< Rev< 0u, Arr64< Hash< "Author242">() >(),  "P1450R0" > , Rev< 1u, Arr64< Hash< "Author2179">() >(),  "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r1.pdfP1450R1" > , Rev< 2u, Arr64< Hash< "Author1794">() >(),  "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r2.pdfP1450R2" > , Rev< 3u, Arr64< Hash< "Author1270">() >(),  "P1450R3" >  >() },
    { 1452u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "On the non-uniform semantics of return-type-requirements" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "On the non-uniform semantics of return-type-requirements" > , Rev< 2u, Arr64< Hash< "Hubert S.K">() >(),  "On the non-uniform semantics of return-type-requirements" >  >() },
    { 1453u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Modularizing the Standard Library is a Reorganization Opportunity" >  >() },
    { 1456u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Move-only views" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Move-only views" >  >() },
    { 1457u, RevList< Rev< 0u, Arr64< Hash< "Author426">() >(),  "C++ Standard Library Issues to be moved in Kona" >  >() },
    { 1458u, RevList< Rev< 0u, Arr64< Hash< "Author1412">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author1036">() >(),  "C++ International Standard" >  >() },
    { 1459u, RevList< Rev< 0u, Arr64< Hash< "Author245">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author409">() >(),  "C++ International Standard" >  >() },
    { 1460u, RevList< Rev< 0u, Arr64< Hash< "Author746">() >(),  "Mandating the Standard Library: Clause 20" > , Rev< 1u, Arr64< Hash< "Author1196">() >(),  "Mandating the Standard Library: Clause 20" >  >() },
    { 1462u, RevList< Rev< 0u, Arr64< Hash< "Author136">() >(),  "Mandating the Standard Library: Clause 20 - Strings library" > , Rev< 1u, Arr64< Hash< "Author611">() >(),  "Mandating the Standard Library: Clause 20 - Strings library" >  >() },
    { 1463u, RevList< Rev< 0u, Arr64< Hash< "Author1822">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author307">() >(),  "C++ International Standard" >  >() },
    { 1464u, RevList< Rev< 0u, Arr64< Hash< "Author379">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author1854">() >(),  "C++ International Standard" >  >() },
    { 1465u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title573" >  >() },
    { 1466u, RevList< Rev< 0u, Arr64< Hash< "Author902">() >(),  "chrono fixes" > , Rev< 1u, Arr64< Hash< "Author2222">() >(),  "chrono fixes" > , Rev< 2u, Arr64< Hash< "Author1583">() >(),  "chrono fixes" > , Rev< 3u, Arr64< Hash< "Author1222">() >(),  "chrono fixes" >  >() },
    { 1467u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Extended floating-point types" > , Rev< 1u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Extended floating-point types" > , Rev< 2u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Extended floating-point types" > , Rev< 3u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types" > , Rev< 4u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" > , Rev< 5u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" > , Rev< 6u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" > , Rev< 7u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" > , Rev< 8u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" > , Rev< 9u, Arr64< Hash< "David Olsen">() >(),  "Extended floating-point types and standard names" >  >() },
    { 1468u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Fixed-layout floating-point type aliases" > , Rev< 1u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Fixed-layout floating-point type aliases" > , Rev< 2u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Fixed-layout floating-point type aliases" > , Rev< 3u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Fixed-layout floating-point type aliases" > , Rev< 4u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Fixed-layout floating-point type aliases" >  >() },
    { 1469u, RevList< Rev< 0u, Arr64< Hash< "Sergei Murzin">() >(),  "Disallow _ Usage in C++20 for Pattern Matching in C++23" >  >() },
    { 1470u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title1365" >  >() },
    { 1471u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "html5 The trouble with coroutine_traits" >  >() },
    { 1472u, RevList< Rev< 0u, Arr64< Hash< "SG5 minutes">() >(),  "Title1501" >  >() },
    { 1473u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Move-only views" >  >() },
    { 1474u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Move-only views" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Amazing Stuff" >  >() },
    { 1477u, RevList< Rev< 0u, Arr64< Hash< "Author1390">() >(),  "Title1080" > , Rev< 1u, Arr64< Hash< "Author230">() >(),  "Title190" >  >() },
    { 1478u, RevList< Rev< 0u, Arr64< Hash< "Hans-J. Boehm">() >(),  "P1478: Byte-wise atomic memcpy" > , Rev< 1u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 2u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 3u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 4u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 5u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 6u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 7u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" > , Rev< 8u, Arr64< Hash< "Hans-J. Boehm">() >(),  "Byte-wise atomic memcpy" >  >() },
    { 1479u, RevList< Rev< 0u, Arr64< Hash< "Robert Kawulak">() >(),  "ostringstream wrapper" >  >() },
    { 1481u, RevList< Rev< 0u, Arr64< Hash< "Nicolas Lesser">() >(),  "constexpr structured bindings" >  >() },
    { 1482u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "Modules Feedback" >  >() },
    { 1484u, RevList< Rev< 1u, Arr64< Hash< "Peter Bindels">() >(),  "Title1198" >  >() },
    { 1485u, RevList< Rev< 0u, Arr64< Hash< "Author1900">() >(),  "Better keywords for the Coroutines TS" > , Rev< 1u, Arr64< Hash< "Author1789">() >(),  "Better keywords for the Coroutines" >  >() },
    { 1486u, RevList< Rev< 0u, Arr64< Hash< "Author1093">() >(),  "Title880" > , Rev< 1u, Arr64< Hash< "Author1689">() >(),  "Title1312" >  >() },
    { 1487u, RevList< Rev< 0u, Arr64< Hash< "Author899">() >(),  "Title728" >  >() },
    { 1490u, RevList< Rev< 0u, Arr64< Hash< "Andrzej Krzemie\xC5\x84ski">() >(),  "P1490r0 Contract-Related Issues" >  >() },
    { 1491u, RevList< Rev< 0u, Arr64< Hash< "Author1955">() >(),  "Title1520" >  >() },
    { 1492u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Title714" >  >() },
    { 1493u, RevList< Rev< 0u, Arr64< Hash< "Geoffrey Romer">() >(),  "Title96" >  >() },
    { 1494u, RevList< Rev< 0u, Arr64< Hash< "Author1784">() >(),  "Partial program correctness" > , Rev< 1u, Arr64< Hash< "Author415">() >(),  "Partial program correctness" > , Rev< 2u, Arr64< Hash< "Author1139">() >(),  "Partial program correctness" > , Rev< 3u, Arr64< Hash< "Author1209">() >(),  "Partial program correctness" > , Rev< 4u, Arr64< Hash< "Author794">() >(),  "Partial program correctness" > , Rev< 5u, Arr64< Hash< "Author1575">() >(),  "Partial program correctness" >  >() },
    { 1496u, RevList< Rev< 0u, Arr64< Hash< "Alan Talbot">() >(),  "Formatting of negative zero" > , Rev< 1u, Arr64< Hash< "Author54">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 2u, Arr64< Hash< "Author1400">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    { 1498u, RevList< Rev< 0u, Arr64< Hash< "Chandler Carruth">() >(),  "Constrained Internal Linkage for Modules" > , Rev< 1u, Arr64< Hash< "Chandler Carruth">() >(),  "Constrained Internal Linkage for Modules" >  >() },
    { 1502u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Standard library header units for C++20" > , Rev< 1u, Arr64< Hash< "Richard Smith">() >(),  "Standard library header units for C++20" >  >() },
    { 1505u, RevList< Rev< 0u, Arr64< Hash< "Author945">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author530">() >(),  "C++ International Standard" >  >() },
    { 1510u, RevList< Rev< 0u, Arr64< Hash< "Author1768">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 1517u, RevList< Rev< 0u, Arr64< Hash< "Ryan McDougall">() >(),  "Contract Requirements for Iterative High-Assurance Systems" >  >() },
    { 1518u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Stop overconstraining allocators in container deduction guides" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Stop overconstraining allocators in container deduction guides" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Stop overconstraining allocators in container deduction guides" >  >() },
    { 1520u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title1125" >  >() },
    { 1522u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Iterator Difference Type and Integer Overflow" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Iterator Difference Type and Integer Overflow" >  >() },
    { 1523u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Views and Size Types" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Views and Size Types" >  >() },
    { 1525u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "One-Way execute is a Poor Basis Operation" > , Rev< 1u, Arr64< Hash< "Gaaper A~man">() >(),  "One-Way is a Poor Basis Operation" >  >() },
    { 1601u, RevList< Rev< 0u, Arr64< Hash< "Author1708">() >(),  "Recommendations for Specifying ``Hidden Friends''" >  >() },
    { 1602u, RevList< Rev< 0u, Arr64< Hash< "Author710">() >(),  "Make Me A Module" >  >() },
    { 1604u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "The inline keyword is not in line with the design of modules." > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "The inline keyword is not in line with the design of modules." >  >() },
    { 1605u, RevList< Rev< 0u, Arr64< Hash< "Author745">() >(),  "Member Layout Control" >  >() },
    { 1606u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title29" >  >() },
    { 1607u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title50" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title763" >  >() },
    { 1609u, RevList< Rev< 0u, Arr64< Hash< "Hal Finkel">() >(),  "C++ Should Support Just-in-Time Compilation" > , Rev< 1u, Arr64< Hash< "Hal Finkel">() >(),  "C++ Should Support Just-in-Time Compilation" > , Rev< 2u, Arr64< Hash< "Hal Finkel">() >(),  "C++ Should Support Just-in-Time Compilation" > , Rev< 3u, Arr64< Hash< "Hal Finkel">() >(),  "C++ Should Support Just-in-Time Compilation" >  >() },
    { 1610u, RevList< Rev< 0u, Arr64< Hash< "Author1230">() >(),  "D1610 Rename await_resume() to await_result().md" >  >() },
    { 1611u, RevList< Rev< 0u, Arr64< Hash< "Author392">() >(),  "Rod-Kona-P1611" >  >() },
    { 1612u, RevList< Rev< 0u, Arr64< Hash< "Author413">() >(),  "Relocate Endian's Specification" > , Rev< 1u, Arr64< Hash< "Author2143">() >(),  "Relocate Endian's Specification" >  >() },
    { 1614u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "The Mothership Has Landed Adding <=> to the Library" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "The Mothership has Landed" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "The Mothership has Landed" >  >() },
    { 1616u, RevList< Rev< 0u, Arr64< Hash< "Mike Spertus">() >(),  "Using unconstrained template template parameters with constrained templates" > , Rev< 1u, Arr64< Hash< "Mike Spertus">() >(),  "Using unconstrained template template parameters with constrained templates" >  >() },
    { 1619u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1694" > , Rev< 1u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title291" > , Rev< 2u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1348" >  >() },
    { 1622u, RevList< Rev< 0u, Arr64< Hash< "Author1187">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author181">() >(),  "C++ International Standard" > , Rev< 2u, Arr64< Hash< "Author337">() >(),  "P1622R2" > , Rev< 3u, Arr64< Hash< "Author1528">() >(),  "P1622R3" >  >() },
    { 1624u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "Resolving technical issues in parameter mapping equivalence and related problems" > , Rev< 1u, Arr64< Hash< "Hubert S.K">() >(),  "Resolving technical issues in parameter mapping equivalence and related problems" >  >() },
    { 1625u, RevList< Rev< 0u, Arr64< Hash< "Author1311">() >(),  "Contracts: why the house is not on fire (i.e. why the status quo is tolerable)" >  >() },
    { 1628u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title524" >  >() },
    { 1629u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Standard Text Encoding" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Transcoding the - Standard Text Encoding" >  >() },
    { 1630u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Spaceship needs a tune-up" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Spaceship needs a tune-up" >  >() },
    { 1631u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title1126" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title1503" >  >() },
    { 1633u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Amendments to the C++20 Synchronization Library" > , Rev< 1u, Arr64< Hash< "David Olsen">() >(),  "Amendments to the C++20 Synchronization Library" >  >() },
    { 1634u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Naming guidelines for modules" >  >() },
    { 1635u, RevList< Rev< 0u, Arr64< Hash< "Author490">() >(),  "Title409" >  >() },
    { 1636u, RevList< Rev< 0u, Arr64< Hash< "Lars Gullik">() >(),  "Formatters for library types" > , Rev< 1u, Arr64< Hash< "Lars Gullik">() >(),  "Formatters for library types" > , Rev< 2u, Arr64< Hash< "Lars Gullik">() >(),  "Formatters for library types" >  >() },
    { 1638u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1685" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title441" >  >() },
    { 1639u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title83" >  >() },
    { 1640u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Error size benchmarking" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Error size benchmarking: Redux" >  >() },
    { 1641u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Rewording the Status Quo" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "D1641R1.0: Freestanding Library: Rewording the Status Quo" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Rewording the Status Quo" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Rewording the Status Quo" >  >() },
    { 1642u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities]" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 4u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 5u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 6u, Arr64< Hash< "Ben Craig">() >(),  "P1642R6 Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 7u, Arr64< Hash< "Ben Craig">() >(),  "P1642R7 Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 8u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 9u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 10u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" > , Rev< 11u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Easy [utilities], [ranges], and [iterators]" >  >() },
    { 1643u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Add wait/notify to atomic_ref<T>" > , Rev< 1u, Arr64< Hash< "David Olsen">() >(),  "Add wait/notify to atomic_ref<T>" >  >() },
    { 1644u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Add wait/notify to atomic<shared_ptr<T>>" >  >() },
    { 1645u, RevList< Rev< 0u, Arr64< Hash< "Ben Deane">() >(),  "constexpr for <numeric> algorithms" > , Rev< 1u, Arr64< Hash< "Ben Deane">() >(),  "constexpr for <numeric> algorithms" >  >() },
    { 1648u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1359" > , Rev< 1u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1428" > , Rev< 2u, Arr64< Hash< "Mingxin Wang">() >(),  "Title266" >  >() },
    { 1649u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title447" >  >() },
    { 1650u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Output std::chrono::days with 'd' suffix" >  >() },
    { 1651u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "bind_front should not unwrap reference_wrapper" >  >() },
    { 1652u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Printf corner cases in std::format - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Printf corner cases in std::format - HackMD" >  >() },
    { 1654u, RevList< Rev< 0u, Arr64< Hash< "Author1511">() >(),  "ABI breakage - summary of initial comments" > , Rev< 1u, Arr64< Hash< "Author511">() >(),  "ABI breakage - summary of initial comments" >  >() },
    { 1655u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "LEWG Omnibus Design Policy Paper" >  >() },
    { 1656u, RevList< Rev< 0u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "\"Throws: Nothing\" should be noexcept" > , Rev< 1u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "\"Throws: Nothing\" should be noexcept" > , Rev< 2u, Arr64< Hash< "Agust\xC3\xADn Berg\xC3\xA9">() >(),  "\"Throws: Nothing\" should be noexcept" >  >() },
    { 1657u, RevList< Rev< 0u, Arr64< Hash< "Paul Fee">() >(),  "Title257" >  >() },
    { 1658u, RevList< Rev< 0u, Arr64< Hash< "Author3">() >(),  "Suggestions for Consensus on Executors | P1658" >  >() },
    { 1659u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "starts_with and ends_with" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "starts_with and ends_with" > , Rev< 2u, Arr64< Hash< "Christopher Di">() >(),  "starts_with and ends_with" > , Rev< 3u, Arr64< Hash< "Christopher Di">() >(),  "starts_with and ends_with" >  >() },
    { 1660u, RevList< Rev< 0u, Arr64< Hash< "Jared Hoberock">() >(),  "A Compromise Executor Design Sketch" >  >() },
    { 1661u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Remove dedicated precalculated hash lookup interface" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Remove dedicated precalculated hash lookup interface" >  >() },
    { 1662u, RevList< Rev< 0u, Arr64< Hash< "Author1483">() >(),  "Title1155" >  >() },
    { 1663u, RevList< Rev< 0u, Arr64< Hash< "Author146">() >(),  "Title125" >  >() },
    { 1664u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 5u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 6u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" > , Rev< 7u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "reconstructible_range - a concept for putting ranges back together" >  >() },
    { 1665u, RevList< Rev< 0u, Arr64< Hash< "John Bandela">() >(),  "Title324" >  >() },
    { 1666u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2019/01/23 - 2019/05/22" >  >() },
    { 1667u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "Concept-aware `noexcept` specifiers" >  >() },
    { 1668u, RevList< Rev< 0u, Arr64< Hash< "Erich Keane">() >(),  "Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions" > , Rev< 1u, Arr64< Hash< "Erich Keane">() >(),  "Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions" >  >() },
    { 1669u, RevList< Rev< 0u, Arr64< Hash< "Erich Keane">() >(),  "Callsite Based Inlining Hints: [[always_inline]] and [[never_inline]]" >  >() },
    { 1670u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Title224" >  >() },
    { 1671u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title850" >  >() },
    { 1672u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1490" >  >() },
    { 1673u, RevList< Rev< 0u, Arr64< Hash< "Author576">() >(),  "Title467" > , Rev< 1u, Arr64< Hash< "Author377">() >(),  "Title320" > , Rev< 2u, Arr64< Hash< "Author1666">() >(),  "Title1296" > , Rev< 3u, Arr64< Hash< "Author1570">() >(),  "Title1217" > , Rev< 4u, Arr64< Hash< "Mark Hoemmen">() >(),  "D1673R4R4: D1673R4: A free function linear algebra interface based on the BLAS" > , Rev< 5u, Arr64< Hash< "Mark Hoemmen">() >(),  "P1673R5R5: P1673R5: A free function linear algebra interface based on the BLAS" > , Rev< 6u, Arr64< Hash< "Mark Hoemmen">() >(),  "P1673R6: A free function linear algebra interface based on the BLAS" > , Rev< 7u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 8u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 9u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 10u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 11u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 12u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" > , Rev< 13u, Arr64< Hash< "Mark Hoemmen">() >(),  "A free function linear algebra interface based on the BLAS" >  >() },
    { 1674u, RevList< Rev< 0u, Arr64< Hash< "Author1445">() >(),  "Title1122" > , Rev< 1u, Arr64< Hash< "Author1829">() >(),  "Title1421" > , Rev< 2u, Arr64< Hash< "Author1997">() >(),  "Evolving a Standard C++ Linear Algebra Library from the BLAS" >  >() },
    { 1675u, RevList< Rev< 0u, Arr64< Hash< "Author737">() >(),  "Title594" > , Rev< 1u, Arr64< Hash< "Author353">() >(),  "rethrow_exception must be allowed to copy" > , Rev< 2u, Arr64< Hash< "Author1629">() >(),  "rethrow_exception must be allowed to copy" >  >() },
    { 1676u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title1462" >  >() },
    { 1677u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "Cancellation is not an Error" > , Rev< 1u, Arr64< Hash< "Kirk Shoop">() >(),  "Cancellation is not an Error" > , Rev< 2u, Arr64< Hash< "Kirk Shoop">() >(),  "Cancellation is serendipitous-success" >  >() },
    { 1678u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "Callbacks and Composition" > , Rev< 1u, Arr64< Hash< "Kirk Shoop">() >(),  "Callbacks and Composition" > , Rev< 2u, Arr64< Hash< "Kirk Shoop">() >(),  "Callbacks and Composition" >  >() },
    { 1679u, RevList< Rev< 0u, Arr64< Hash< "Wim Leflere">() >(),  "String Contains function" > , Rev< 1u, Arr64< Hash< "Wim Leflere">() >(),  "String Contains function" > , Rev< 2u, Arr64< Hash< "Wim Leflere">() >(),  "string contains function" > , Rev< 3u, Arr64< Hash< "Wim Leflere">() >(),  "string contains function" >  >() },
    { 1680u, RevList< Rev< 0u, Arr64< Hash< "Author1023">() >(),  "p1680r0" >  >() },
    { 1681u, RevList< Rev< 0u, Arr64< Hash< "Gor Nishanov">() >(),  "Title1116" >  >() },
    { 1682u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::to_underlying for enumerations" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::to_underlying for enumerations" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::to_underlying for enumerations" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "std::to_underlying for enumerations" >  >() },
    { 1683u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "References for Standard Library Vocabulary Types - an optional<> case study" >  >() },
    { 1684u, RevList< Rev< 0u, Arr64< Hash< "David Hollman">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 1u, Arr64< Hash< "Christian Trott">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 2u, Arr64< Hash< "Christian Trott">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 3u, Arr64< Hash< "Christian Trott">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 4u, Arr64< Hash< "Christian Trott">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" > , Rev< 5u, Arr64< Hash< "Christian Trott">() >(),  "mdarray: An Owning Multidimensional Array Analog of mdspan" >  >() },
    { 1685u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Microsoft Word - P1685_replaceable_default_resource.docx" >  >() },
    { 1686u, RevList< Rev< 0u, Arr64< Hash< "Author1111">() >(),  "C++ International Standard" > , Rev< 1u, Arr64< Hash< "Author187">() >(),  "C++ International Standard" > , Rev< 2u, Arr64< Hash< "Author523">() >(),  "Mandating the Standard Library: Clause 27 - Time library" >  >() },
    { 1687u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Summary of the Tooling Study Groups Pre-Cologne Telecons on Modules Tooling Interactions" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "Summary of the Tooling Study Groups Modules Ecosystem Technical Report Telecons" >  >() },
    { 1688u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Towards a C++ Ecosystem Technical Report" >  >() },
    { 1689u, RevList< Rev< 0u, Arr64< Hash< "Author1516">() >(),  "Format for describing dependencies of source files" > , Rev< 1u, Arr64< Hash< "Author1120">() >(),  "Format for describing dependencies of source files" > , Rev< 2u, Arr64< Hash< "Author321">() >(),  "Format for describing dependencies of source files" > , Rev< 3u, Arr64< Hash< "Author908">() >(),  "Format for describing dependencies of source files" > , Rev< 4u, Arr64< Hash< "Author343">() >(),  "Format for describing dependencies of source files" > , Rev< 5u, Arr64< Hash< "Author614">() >(),  "Format for describing dependencies of source files" >  >() },
    { 1690u, RevList< Rev< 0u, Arr64< Hash< "Xiao Shi">() >(),  "Refinement Proposal for P0919 Heterogeneous lookup for unordered containers" > , Rev< 1u, Arr64< Hash< "Xiao Shi">() >(),  "Refinement Proposal for P0919 Heterogeneous lookup for unordered containers" >  >() },
    { 1696u, RevList< Rev< 0u, Arr64< Hash< "Xiao Shi">() >(),  "Refinement proposal for P0920 Precalculated hash values in lookup" >  >() },
    { 1697u, RevList< Rev< 0u, Arr64< Hash< "Botond Ballo">() >(),  "Require a diagnostic for \"declaration changes meaning\"" >  >() },
    { 1700u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "Audience Tables" >  >() },
    { 1701u, RevList< Rev< 0u, Arr64< Hash< "Author1192">() >(),  "Inline Namespaces: Fragility Bites" > , Rev< 1u, Arr64< Hash< "Author264">() >(),  "Inline Namespaces: Fragility Bites" > , Rev< 2u, Arr64< Hash< "Author808">() >(),  "Inline Namespaces: Fragility Bites" >  >() },
    { 1702u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title783" >  >() },
    { 1703u, RevList< Rev< 0u, Arr64< Hash< "Author1029">() >(),  "Recognizing Header Unit Imports Requires Full Preprocessing" > , Rev< 1u, Arr64< Hash< "Author1160">() >(),  "Recognizing Header Unit Imports Requires Full Preprocessing" >  >() },
    { 1704u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "axiom_level_contract_statements" >  >() },
    { 1705u, RevList< Rev< 0u, Arr64< Hash< "Shafik Yaghmour">() >(),  "Enumerating Core Undefined Behavior" > , Rev< 1u, Arr64< Hash< "Shafik Yaghmour">() >(),  "Enumerating Core Undefined Behavior" >  >() },
    { 1706u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1435" > , Rev< 1u, Arr64< Hash< "Michael Wong">() >(),  "Title631" > , Rev< 2u, Arr64< Hash< "Michael Wong">() >(),  "Title735" > , Rev< 3u, Arr64< Hash< "Michael Wong">() >(),  "Programming Language Vulnerabilities for Safety Critical C++" >  >() },
    { 1708u, RevList< Rev< 0u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title1422" > , Rev< 1u, Arr64< Hash< "Author2150">() >(),  "Title1656" > , Rev< 2u, Arr64< Hash< "Author156">() >(),  "Title132" > , Rev< 3u, Arr64< Hash< "Author345">() >(),  "Title289" > , Rev< 4u, Arr64< Hash< "Author942">() >(),  "Title760" > , Rev< 5u, Arr64< Hash< "Author73">() >(),  "Title75" > , Rev< 6u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title1321" > , Rev< 7u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title442" > , Rev< 8u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title1058" > , Rev< 9u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title1099" >  >() },
    { 1709u, RevList< Rev< 0u, Arr64< Hash< "Phillip Ratzloff">() >(),  "Title538" > , Rev< 1u, Arr64< Hash< "Phillip Ratzloff">() >(),  "Title451" > , Rev< 2u, Arr64< Hash< "Phillip Ratzloff">() >(),  "Title946" > , Rev< 3u, Arr64< Hash< "Phillip Ratzloff">() >(),  "Graph Proposal" > , Rev< 4u, Arr64< Hash< "Author1161">() >(),  "Title921" > , Rev< 5u, Arr64< Hash< "Author1194">() >(),  "Title936" >  >() },
    { 1710u, RevList< Rev< 0u, Arr64< Hash< "Author1880">() >(),  "Adding a global contract assumption mode" >  >() },
    { 1711u, RevList< Rev< 0u, Arr64< Hash< "Author37">() >(),  "Title33" >  >() },
    { 1713u, RevList< Rev< 0u, Arr64< Hash< "Author404">() >(),  "Title345" >  >() },
    { 1714u, RevList< Rev< 0u, Arr64< Hash< "Author1725">() >(),  "NTTP are incomplete without float, double, and long double!" > , Rev< 1u, Arr64< Hash< "Author1830">() >(),  "NTTP are incomplete without float, double, and long double!" >  >() },
    { 1715u, RevList< Rev< 0u, Arr64< Hash< "Author400">() >(),  "Loosen restrictions on \"_t\" typedefs." > , Rev< 1u, Arr64< Hash< "Author2170">() >(),  "Loosen restrictions on \"_t\" typedefs." >  >() },
    { 1716u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "ranges compare algorithm are over-constrained" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "ranges compare algorithm are over-constrained" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "ranges compare algorithm are over-constrained" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "ranges compare algorithm are over-constrained" >  >() },
    { 1717u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Title750" >  >() },
    { 1718u, RevList< Rev< 0u, Arr64< Hash< "Author1011">() >(),  "Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash< "Author334">() >(),  "Mandating the Standard Library: Clause 25" > , Rev< 2u, Arr64< Hash< "Author1979">() >(),  "Mandating the Standard Library: Clause 25" >  >() },
    { 1719u, RevList< Rev< 0u, Arr64< Hash< "Author1173">() >(),  "Mandating the Standard Library: Clause 26" > , Rev< 1u, Arr64< Hash< "Author2171">() >(),  "Mandating the Standard Library: Clause 26" > , Rev< 2u, Arr64< Hash< "Author32">() >(),  "Mandating the Standard Library: Clause 26" >  >() },
    { 1720u, RevList< Rev< 0u, Arr64< Hash< "Author1108">() >(),  "Mandating the Standard Library: Clause 28" > , Rev< 1u, Arr64< Hash< "Author356">() >(),  "Mandating the Standard Library: Clause 28" > , Rev< 2u, Arr64< Hash< "Author79">() >(),  "Mandating the Standard Library: Clause 28" >  >() },
    { 1721u, RevList< Rev< 0u, Arr64< Hash< "Author1687">() >(),  "Mandating the Standard Library: Clause 29" > , Rev< 1u, Arr64< Hash< "Author2120">() >(),  "Mandating the Standard Library: Clause 29" > , Rev< 2u, Arr64< Hash< "Author202">() >(),  "Mandating the Standard Library: Clause 29" >  >() },
    { 1722u, RevList< Rev< 0u, Arr64< Hash< "Author440">() >(),  "Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash< "Author92">() >(),  "Mandating the Standard Library: Clause 30" > , Rev< 2u, Arr64< Hash< "Author2193">() >(),  "Mandating the Standard Library: Clause 30" >  >() },
    { 1723u, RevList< Rev< 0u, Arr64< Hash< "Author1787">() >(),  "Mandating the Standard Library: Clause 25" > , Rev< 1u, Arr64< Hash< "Author128">() >(),  "Mandating the Standard Library: Clause 31" > , Rev< 2u, Arr64< Hash< "Author386">() >(),  "Mandating the Standard Library: Clause 31" >  >() },
    { 1724u, RevList< Rev< 0u, Arr64< Hash< "Author1327">() >(),  "C++ Standard Library Issues to be moved in Cologne" >  >() },
    { 1725u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "Modular Topic Design" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "Modular Topic Design" >  >() },
    { 1726u, RevList< Rev< 0u, Arr64< Hash< "Author1044">() >(),  "Title836" > , Rev< 1u, Arr64< Hash< "Author1771">() >(),  "Title1377" > , Rev< 2u, Arr64< Hash< "Author714">() >(),  "Title576" > , Rev< 3u, Arr64< Hash< "Author1624">() >(),  "Title1258" > , Rev< 4u, Arr64< Hash< "Author305">() >(),  "Title259" > , Rev< 5u, Arr64< Hash< "Paul E">() >(),  "P1726R5 Pointer lifetime-end zap" >  >() },
    { 1727u, RevList< Rev< 0u, Arr64< Hash< "Denis Yaroshevskiy">() >(),  "Issues with current flat_map proposal" >  >() },
    { 1728u, RevList< Rev< 0u, Arr64< Hash< "Andrzej Krzemie\xC5\x84ski">() >(),  "contracts_explained" >  >() },
    { 1729u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Parsing" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Text Parsing" > , Rev< 2u, Arr64< Hash< "Elias Kosunen">() >(),  "Text Parsing" > , Rev< 3u, Arr64< Hash< "Elias Kosunen">() >(),  "Text Parsing" > , Rev< 4u, Arr64< Hash< "Elias Kosunen">() >(),  "Text Parsing" > , Rev< 5u, Arr64< Hash< "Elias Kosunen">() >(),  "Text Parsing" >  >() },
    { 1730u, RevList< Rev< 0u, Arr64< Hash< "Author849">() >(),  "Title668" >  >() },
    { 1731u, RevList< Rev< 0u, Arr64< Hash< "Ilya Burylov">() >(),  "Microsoft Word - P1731R0_memory_helpers.docx" > , Rev< 1u, Arr64< Hash< "Ilya Burylov">() >(),  "Title1390" >  >() },
    { 1732u, RevList< Rev< 0u, Arr64< Hash< "Author48">() >(),  "Title51" > , Rev< 1u, Arr64< Hash< "Author210">() >(),  "Title174" > , Rev< 2u, Arr64< Hash< "Author1211">() >(),  "Title950" > , Rev< 3u, Arr64< Hash< "Author27">() >(),  "Title21" > , Rev< 4u, Arr64< Hash< "Author1215">() >(),  "Title952" >  >() },
    { 1733u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "User-friendly and Evolution-friendly Reflection: A Compromise" >  >() },
    { 1734u, RevList< Rev< 0u, Arr64< Hash< "Author449">() >(),  "Title378" >  >() },
    { 1735u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title682" >  >() },
    { 1736u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title774" >  >() },
    { 1737u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title1614" >  >() },
    { 1738u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "The Executor Concept Hierarchy Needs a Single Root" >  >() },
    { 1739u, RevList< Rev< 0u, Arr64< Hash< "Author390">() >(),  "Title333" > , Rev< 1u, Arr64< Hash< "Author606">() >(),  "Title496" > , Rev< 2u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Avoid template bloat for forwarding ranges in combination with subrange-y view adaptors." > , Rev< 3u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Avoid template bloat for safe_ranges in combination with subrange-y view adaptors." > , Rev< 4u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Avoid template bloat for s in combination with subrange-y view adaptors." >  >() },
    { 1743u, RevList< Rev< 0u, Arr64< Hash< "Author1382">() >(),  "Title1074" >  >() },
    { 1744u, RevList< Rev< 0u, Arr64< Hash< "Author1593">() >(),  "Title1233" >  >() },
    { 1745u, RevList< Rev< 0u, Arr64< Hash< "Author254">() >(),  "Title214" >  >() },
    { 1746u, RevList< Rev< 0u, Arr64< Hash< "Richard Powell">() >(),  "Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio" > , Rev< 1u, Arr64< Hash< "Richard Powell">() >(),  "D1746R1: Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio" >  >() },
    { 1747u, RevList< Rev< 0u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Dont use `char8_t` and `std::u8string` yet in P1389" >  >() },
    { 1748u, RevList< Rev< 0u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Fill in [delay.cpp] TODO in P1389" > , Rev< 1u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Fill in [delay.cpp] TODO in P1389" >  >() },
    { 1749u, RevList< Rev< 0u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Access control for reflection" >  >() },
    { 1750u, RevList< Rev< 0u, Arr64< Hash< "Author1697">() >(),  "D1750R0 A Proposal to Add Process Management to the C++ Standard Library" > , Rev< 1u, Arr64< Hash< "Author503">() >(),  "P1750R1 A Proposal to Add Process Management to the C++ Standard Library" >  >() },
    { 1751u, RevList< Rev< 0u, Arr64< Hash< "Author973">() >(),  "p1751r0" >  >() },
    { 1753u, RevList< Rev< 0u, Arr64< Hash< "Author682">() >(),  "Name Lookup Should ``Find the First Thing of That Name''" >  >() },
    { 1754u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1672" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title310" >  >() },
    { 1759u, RevList< Rev< 0u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handle from file streams" > , Rev< 1u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handle from file streams" > , Rev< 2u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handle from file streams" > , Rev< 3u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handles and file streams" > , Rev< 4u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handles and file streams" > , Rev< 5u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handles and file streams" > , Rev< 6u, Arr64< Hash< "Elias Kosunen">() >(),  "Native handles and file streams" >  >() },
    { 1760u, RevList< Rev< 0u, Arr64< Hash< "Author2160">() >(),  "Title1662" >  >() },
    { 1761u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title156" >  >() },
    { 1762u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title967" >  >() },
    { 1764u, RevList< Rev< 0u, Arr64< Hash< "Tony Van">() >(),  "Title543" >  >() },
    { 1766u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Mitigating minor modules maladies" > , Rev< 1u, Arr64< Hash< "Richard Smith">() >(),  "Mitigating minor modules maladies" >  >() },
    { 1767u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Packaging C++ Modules" >  >() },
    { 1768u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title97" >  >() },
    { 1769u, RevList< Rev< 0u, Arr64< Hash< "Author2175">() >(),  "The \"default\" contract build-level and continuation-mode should be implementation-defined" >  >() },
    { 1770u, RevList< Rev< 0u, Arr64< Hash< "Author848">() >(),  "On vectors, tensors, matrices, and hypermatrices" >  >() },
    { 1771u, RevList< Rev< 0u, Arr64< Hash< "Author676">() >(),  "Title548" > , Rev< 1u, Arr64< Hash< "Author399">() >(),  "Title340" >  >() },
    { 1772u, RevList< Rev< 0u, Arr64< Hash< "Author557">() >(),  "P1772R0" > , Rev< 1u, Arr64< Hash< "Author2211">() >(),  "P1772R1" >  >() },
    { 1773u, RevList< Rev< 0u, Arr64< Hash< "Author424">() >(),  "Title363" >  >() },
    { 1774u, RevList< Rev< 0u, Arr64< Hash< "Author707">() >(),  "Title570" > , Rev< 1u, Arr64< Hash< "Author367">() >(),  "Title313" > , Rev< 2u, Arr64< Hash< "Author853">() >(),  "Title672" > , Rev< 3u, Arr64< Hash< "Author599">() >(),  "Title491" > , Rev< 4u, Arr64< Hash< "Author2075">() >(),  "Title1607" > , Rev< 5u, Arr64< Hash< "Author852">() >(),  "Title670" > , Rev< 6u, Arr64< Hash< "Author2213">() >(),  "Title1693" > , Rev< 7u, Arr64< Hash< "Author110">() >(),  "Title98" > , Rev< 8u, Arr64< Hash< "Author907">() >(),  "Title733" >  >() },
    { 1779u, RevList< Rev< 0u, Arr64< Hash< "Author1366">() >(),  "ABI isolation for member functions" > , Rev< 1u, Arr64< Hash< "Author882">() >(),  "ABI isolation for member functions" > , Rev< 2u, Arr64< Hash< "Author1262">() >(),  "ABI isolation for member functions" > , Rev< 3u, Arr64< Hash< "Author1723">() >(),  "ABI isolation for member functions" >  >() },
    { 1780u, RevList< Rev< 0u, Arr64< Hash< "Mark Batty">() >(),  "D1780R0: Modular Relaxed Dependencies: A new approach to the Out-Of-Thin-Air Problem" >  >() },
    { 1782u, RevList< Rev< 0u, Arr64< Hash< "Author382">() >(),  "Local contract restrictions" > , Rev< 1u, Arr64< Hash< "Author290">() >(),  "Local contract restrictions" >  >() },
    { 1786u, RevList< Rev< 0u, Arr64< Hash< "Author1612">() >(),  "Title1247" >  >() },
    { 1787u, RevList< Rev< 0u, Arr64< Hash< "Author1695">() >(),  "Declarations and where to find them" > , Rev< 1u, Arr64< Hash< "Author1922">() >(),  "Declarations and where to find them" > , Rev< 2u, Arr64< Hash< "Author430">() >(),  "Declarations and where to find them" > , Rev< 3u, Arr64< Hash< "Author1005">() >(),  "Declarations and where to find them" > , Rev< 4u, Arr64< Hash< "Author394">() >(),  "Declarations and where to find them" > , Rev< 5u, Arr64< Hash< "Author194">() >(),  "Declarations and where to find them" > , Rev< 6u, Arr64< Hash< "Author1556">() >(),  "Declarations and where to find them" >  >() },
    { 1788u, RevList< Rev< 0u, Arr64< Hash< "Author1578">() >(),  "Title1223" > , Rev< 2u, Arr64< Hash< "Author1393">() >(),  "Title1082" > , Rev< 3u, Arr64< Hash< "Author776">() >(),  "Title633" >  >() },
    { 1789u, RevList< Rev< 0u, Arr64< Hash< "Author328">() >(),  "Library Support for Expansion Statements" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Library Support for Expansion Statements" >  >() },
    { 1790u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to enable better DynamicBuffer composition" > , Rev< 1u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to enable better DynamicBuffer composition" >  >() },
    { 1791u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Evolution of the P0443 Unified Executors Proposal to accommodate new requirements" >  >() },
    { 1792u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Simplifying and generalising Sender/Receiver for asynchronous operations" >  >() },
    { 1793u, RevList< Rev< 0u, Arr64< Hash< "Author965">() >(),  "Proposal Template" >  >() },
    { 1795u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "p1795r0.html" > , Rev< 1u, Arr64< Hash< "Gordon Brown">() >(),  "d1795r1.html" > , Rev< 2u, Arr64< Hash< "Gordon Brown">() >(),  "Title243" >  >() },
    { 1796u, RevList< Rev< 0u, Arr64< Hash< "Author660">() >(),  "Effective types: examples (P1796R0)" >  >() },
    { 1797u, RevList< Rev< 0u, Arr64< Hash< "Author765">() >(),  "C/C++ Memory Object Model Papers - Introduction (P1797R0)" >  >() },
    { 1798u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title986" >  >() },
    { 1801u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1241" >  >() },
    { 1803u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "packexpr(args, I) -- compile-time friendly pack inspection" >  >() },
    { 1807u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title38" >  >() },
    { 1808u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Contra P0339 \"`polymorphic_allocator<>` as a vocabulary type\"" >  >() },
    { 1810u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "A Quick Look at What P1754 Will Change" >  >() },
    { 1811u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Relaxing redefinition restrictions for re-exportation robustness" >  >() },
    { 1812u, RevList< Rev< 0u, Arr64< Hash< "Author1535">() >(),  "Title1190" >  >() },
    { 1813u, RevList< Rev< 0u, Arr64< Hash< "Author1715">() >(),  "A Concept Design for the Numeric Algorithms" >  >() },
    { 1814u, RevList< Rev< 0u, Arr64< Hash< "Author336">() >(),  "Wording for Class Template Argument Deduction for Alias Templates" >  >() },
    { 1815u, RevList< Rev< 0u, Arr64< Hash< "Author763">() >(),  "Translation-unit-local entities" > , Rev< 1u, Arr64< Hash< "Author1027">() >(),  "Translation-unit-local entities" > , Rev< 2u, Arr64< Hash< "Author178">() >(),  "Translation-unit-local entities" >  >() },
    { 1816u, RevList< Rev< 0u, Arr64< Hash< "Author980">() >(),  "Title791" >  >() },
    { 1818u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "Narrowing and Widening Conversions" > , Rev< 1u, Arr64< Hash< "Lawrence Crowl">() >(),  "Narrowing and Widening Conversions" >  >() },
    { 1819u, RevList< Rev< 0u, Arr64< Hash< "Author173">() >(),  "Untitled" >  >() },
    { 1820u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "p1820r0.html" >  >() },
    { 1823u, RevList< Rev< 0u, Arr64< Hash< "Author1816">() >(),  "d1823r0" >  >() },
    { 1825u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title314" >  >() },
    { 1830u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "Title514" > , Rev< 1u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "Title1575" >  >() },
    { 1831u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>: library" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Deprecating <code>volatile</code>: library" >  >() },
    { 1832u, RevList< Rev< 0u, Arr64< Hash< "Author1587">() >(),  "p1832r0" >  >() },
    { 1837u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Remove NTTPs of class type from C++20" >  >() },
    { 1838u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Title1479" >  >() },
    { 1839u, RevList< Rev< 0u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Accessing Object Representations" > , Rev< 1u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Accessing Object Representations" > , Rev< 2u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Accessing Object Representations" > , Rev< 3u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Accessing Object Representations" > , Rev< 4u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Accessing Object Representations" > , Rev< 5u, Arr64< Hash< "Author1396">() >(),  "Title1087" > , Rev< 6u, Arr64< Hash< "Timur Doumler">() >(),  "Accessing object representations" > , Rev< 7u, Arr64< Hash< "Timur Doumler">() >(),  "Accessing object representations" >  >() },
    { 1840u, RevList< Rev< 0u, Arr64< Hash< "Author2106">() >(),  "Rod-Cologne" >  >() },
    { 1841u, RevList< Rev< 0u, Arr64< Hash< "Author186">() >(),  "Wording for Individually Specializable Numeric Traits" > , Rev< 1u, Arr64< Hash< "Author1442">() >(),  "Wording for Individually Specializable Numeric Traits" > , Rev< 2u, Arr64< Hash< "Author497">() >(),  "Wording for Individually Specializable Numeric Traits" > , Rev< 3u, Arr64< Hash< "Author1975">() >(),  "Wording for Individually Specializable Numeric Traits" >  >() },
    { 1842u, RevList< Rev< 0u, Arr64< Hash< "Author1598">() >(),  "Generalized Module (Dependency?) Mapper" >  >() },
    { 1843u, RevList< Rev< 0u, Arr64< Hash< "Author1526">() >(),  "comparison and hasher requirements" >  >() },
    { 1844u, RevList< Rev< 0u, Arr64< Hash< "Author240">() >(),  "Enhancement of regex" > , Rev< 1u, Arr64< Hash< "Author1567">() >(),  "Enhancement of regex" >  >() },
    { 1845u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2019-09-21 Denver Tooling Meeting" >  >() },
    { 1846u, RevList< Rev< 0u, Arr64< Hash< "Author1008">() >(),  "p1846r0" >  >() },
    { 1847u, RevList< Rev< 0u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1847R0.doc" > , Rev< 1u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1847R1.doc" > , Rev< 2u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1847R2.doc" > , Rev< 3u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1847R3.doc" > , Rev< 4u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1847R4.doc" >  >() },
    { 1848u, RevList< Rev< 0u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - P1848R0.doc" >  >() },
    { 1851u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "Guidelines For snake_case Concept Naming" >  >() },
    { 1854u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1443" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title869" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title602" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title58" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1131" >  >() },
    { 1855u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0Ben Craig">() >(),  "Make <compare> freestanding" >  >() },
    { 1856u, RevList< Rev< 0u, Arr64< Hash< "Author1458">() >(),  "P1856R0" >  >() },
    { 1857u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "<code>remove.dots.in.module.names</code>" > , Rev< 1u, Arr64< Hash< "Michael Spencer">() >(),  "Modules Dependency Discovery" > , Rev< 2u, Arr64< Hash< "Michael Spencer">() >(),  "Modules Dependency Discovery" > , Rev< 3u, Arr64< Hash< "Michael Spencer">() >(),  "Modules Dependency Discovery" >  >() },
    { 1858u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Generalized pack declaration and usage" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Generalized pack declaration and usage" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Generalized pack declaration and usage" >  >() },
    { 1859u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Standard terminology character sets and encodings" >  >() },
    { 1860u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "C++ Networking Must Be Secure By Default" >  >() },
    { 1861u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "D1861R0: Secure Connections in Networking TS" > , Rev< 1u, Arr64< Hash< "Alex Christensen">() >(),  "Secure Networking in C++" >  >() },
    { 1862u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title301" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1344" >  >() },
    { 1863u, RevList< Rev< 0u, Arr64< Hash< "Author1285">() >(),  "Title996" > , Rev< 1u, Arr64< Hash< "Author1884">() >(),  "Title1461" >  >() },
    { 1864u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Defining Target Tuplets" >  >() },
    { 1865u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Add max() to latch and barrier" > , Rev< 1u, Arr64< Hash< "David Olsen">() >(),  "Add max() to latch and barrier" >  >() },
    { 1868u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "width: clarifying units of width and precision in std::format" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "width: clarifying units of width and precision in std::format" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "width: clarifying units of width and precision in std::format" >  >() },
    { 1869u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Rename 'condition_variable_any' interruptible wait methods" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Rename 'condition_variable_any' interruptible wait methods" >  >() },
    { 1870u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "forwarding-range<T> is too subtle" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "forwarding-range<T> is too subtle" >  >() },
    { 1871u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Should concepts be enabled or disabled?" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Concept traits should be named after concepts" >  >() },
    { 1872u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title1486" >  >() },
    { 1873u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "<code>remove.dots.in.module.names</code>" > , Rev< 1u, Arr64< Hash< "Michael Spencer">() >(),  "<code>remove.dots.in.module.names</code>" >  >() },
    { 1874u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "Dynamic Initialization Order of Non-Local Variables in Modules" > , Rev< 1u, Arr64< Hash< "Michael Spencer">() >(),  "Dynamic Initialization Order of Non-Local Variables in Modules" >  >() },
    { 1875u, RevList< Rev< 0u, Arr64< Hash< "Michael Spear">() >(),  "Title1604" > , Rev< 1u, Arr64< Hash< "Michael Spear">() >(),  "Title689" > , Rev< 2u, Arr64< Hash< "Michael Spear">() >(),  "Title650" >  >() },
    { 1876u, RevList< Rev< 0u, Arr64< Hash< "Author1530">() >(),  "All The Module Names" > , Rev< 1u, Arr64< Hash< "Author2087">() >(),  "All The Module Names" >  >() },
    { 1877u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Saving Private Ranges: Recovering Lost Information from Comparison and Predicate Algorithms" >  >() },
    { 1878u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Constraining Readable Types" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Constraining Readable Types" >  >() },
    { 1879u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Please Don't Rewrite My String Literals" >  >() },
    { 1880u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "uNstring Arguments Shall Be UTF-N Encoded" >  >() },
    { 1881u, RevList< Rev< 0u, Arr64< Hash< "Vittorio Romeo">() >(),  "Epochs: a backward-compatible language evolution mechanism" > , Rev< 1u, Arr64< Hash< "Vittorio Romeo">() >(),  "Epochs: a backward-compatible language evolution mechanism" >  >() },
    { 1882u, RevList< Rev< 0u, Arr64< Hash< "Noel Tchidjo">() >(),  "Title604" >  >() },
    { 1883u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title942" > , Rev< 1u, Arr64< Hash< "Niall Douglas">() >(),  "Title797" > , Rev< 2u, Arr64< Hash< "Niall Douglas">() >(),  "Title1574" >  >() },
    { 1884u, RevList< Rev< 0u, Arr64< Hash< "Author1463">() >(),  "Private Module Fragment: An Inconsistent Boundary" >  >() },
    { 1885u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title849" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1206" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title437" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title209" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title558" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1590" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title965" > , Rev< 7u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1044" > , Rev< 8u, Arr64< Hash< "Corentin Jabot">() >(),  "Title794" > , Rev< 9u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1289" > , Rev< 10u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1239" > , Rev< 11u, Arr64< Hash< "Corentin Jabot">() >(),  "Title694" > , Rev< 12u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1410" >  >() },
    { 1886u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Error speed benchmarking" >  >() },
    { 1887u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title169" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1372" >  >() },
    { 1888u, RevList< Rev< 0u, Arr64< Hash< "Matti Rintala">() >(),  "Title1160" >  >() },
    { 1889u, RevList< Rev< 0u, Arr64< Hash< "Author1428">() >(),  "C++ Numerics Work In Progress" > , Rev< 1u, Arr64< Hash< "Author97">() >(),  "C++ Numerics Work In Progress" >  >() },
    { 1890u, RevList< Rev< 0u, Arr64< Hash< "Author1109">() >(),  "C++ Numerics Work In Progress Issues" >  >() },
    { 1891u, RevList< Rev< 0u, Arr64< Hash< "Guy Davidson">() >(),  "Title53" >  >() },
    { 1892u, RevList< Rev< 0u, Arr64< Hash< "Author374">() >(),  "Title317" > , Rev< 1u, Arr64< Hash< "Author2229">() >(),  "Title1706" >  >() },
    { 1893u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1053" >  >() },
    { 1894u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1688" >  >() },
    { 1895u, RevList< Rev< 0u, Arr64< Hash< "Author689">() >(),  "Title555" >  >() },
    { 1896u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2019/06/12 - 2019/09/25" >  >() },
    { 1897u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 1u, Arr64< Hash< "Lee Howes">() >(),  "Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 2u, Arr64< Hash< "Lee Howes">() >(),  "Towards C++23 executors: A proposal for an initial set of algorithms" > , Rev< 3u, Arr64< Hash< "Lee Howes">() >(),  "Towards C++23 executors: A proposal for an initial set of algorithms" >  >() },
    { 1898u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "Forward progress delegation for executors" > , Rev< 1u, Arr64< Hash< "Lee Howes">() >(),  "Forward progress delegation for executors" >  >() },
    { 1899u, RevList< Rev< 0u, Arr64< Hash< "Author1678">() >(),  "strideview" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "`stride_view`" > , Rev< 2u, Arr64< Hash< "Christopher Di">() >(),  "stride_view" > , Rev< 3u, Arr64< Hash< "Christopher Di">() >(),  "stride_view" >  >() },
    { 1900u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Concepts-Adjacent Problems" >  >() },
    { 1901u, RevList< Rev< 0u, Arr64< Hash< "Daryl Haresign">() >(),  "P1901R0 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" > , Rev< 1u, Arr64< Hash< "Daryl Haresign">() >(),  "P1901R1 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" > , Rev< 2u, Arr64< Hash< "Daryl Haresign">() >(),  "P1901R2 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers" >  >() },
    { 1902u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Missing feature-test macros 2018-2019" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Missing feature-test macros 2017-2019" >  >() },
    { 1905u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title999" >  >() },
    { 1906u, RevList< Rev< 0u, Arr64< Hash< "Author1571">() >(),  "Title1219" >  >() },
    { 1907u, RevList< Rev< 0u, Arr64< Hash< "Author475">() >(),  "Inconsistencies with non-type template parameters" > , Rev< 1u, Arr64< Hash< "Author1293">() >(),  "Inconsistencies with non-type template parameters" >  >() },
    { 1908u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title379" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1583" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1180" >  >() },
    { 1909u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1149" >  >() },
    { 1910u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1442" >  >() },
    { 1911u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1189" >  >() },
    { 1912u, RevList< Rev< 0u, Arr64< Hash< "Author873">() >(),  "Title700" > , Rev< 1u, Arr64< Hash< "Author340">() >(),  "Title286" >  >() },
    { 1913u, RevList< Rev< 0u, Arr64< Hash< "Author140">() >(),  "Comments on Audio Devices" >  >() },
    { 1914u, RevList< Rev< 0u, Arr64< Hash< "Author1510">() >(),  "P1914R0" >  >() },
    { 1915u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Expected Feedback from simd in the Parallelism TS 2 [P1915R0]" >  >() },
    { 1916u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Title106" >  >() },
    { 1917u, RevList< Rev< 0u, Arr64< Hash< "Author1706">() >(),  "C++ Standard Library Issues to be moved in Belfast" >  >() },
    { 1919u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title255" > , Rev< 1u, Arr64< Hash< "Nevin ">() >(),  "Title396" > , Rev< 2u, Arr64< Hash< "Nevin ">() >(),  "Title554" > , Rev< 3u, Arr64< Hash< "Nevin ">() >(),  "Title1335" >  >() },
    { 1920u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Title1259" >  >() },
    { 1921u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title508" >  >() },
    { 1922u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title908" >  >() },
    { 1923u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title853" >  >() },
    { 1924u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title801" >  >() },
    { 1925u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title551" >  >() },
    { 1926u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title1668" >  >() },
    { 1927u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title244" >  >() },
    { 1928u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Merge data-parallel types from the Parallelism TS 2 [P1928R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Merge data-parallel types from the Parallelism TS 2 [P1928R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Merge data-parallel types from the Parallelism TS 2 [P1928R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Merge data-parallel types from the Parallelism TS 2 [P1928R3]" > , Rev< 4u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R4]" > , Rev< 5u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R5]" > , Rev< 6u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R6]" > , Rev< 7u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R7]" > , Rev< 8u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R8]" > , Rev< 9u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R9]" > , Rev< 10u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R10]" > , Rev< 11u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R11]" > , Rev< 12u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R12]" > , Rev< 13u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R13]" > , Rev< 14u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R14]" > , Rev< 15u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd merge data-parallel types from the Parallelism TS 2 [P1928R15]" >  >() },
    { 1929u, RevList< Rev< 0u, Arr64< Hash< "Alexander Zaitsev">() >(),  "Title307" >  >() },
    { 1930u, RevList< Rev< 0u, Arr64< Hash< "Author807">() >(),  "Title648" >  >() },
    { 1932u, RevList< Rev< 0u, Arr64< Hash< "Pavel Dyakov">() >(),  "Title711" >  >() },
    { 1933u, RevList< Rev< 0u, Arr64< Hash< "Author1662">() >(),  "Suggestions for bulk_execute | P1933" >  >() },
    { 1934u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Amazing Stuff" >  >() },
    { 1935u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "A C++ Approach to Physical Units" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "A C++ Approach to Physical Units" > , Rev< 2u, Arr64< Hash< "Mateusz Pusz">() >(),  "A C++ Approach to Physical Units" >  >() },
    { 1936u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "Title1294" >  >() },
    { 1937u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Fixing inconsistencies between `constexpr` and `consteval` functions" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "Fixing inconsistencies between `constexpr` and `consteval` functions" > , Rev< 2u, Arr64< Hash< "David Stone">() >(),  "Fixing inconsistencies between `constexpr` and `consteval` functions" >  >() },
    { 1938u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "if consteval" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "if-consteval" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "`if consteval`" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "`if consteval`" >  >() },
    { 1943u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "Networking TS changes to improve completion token flexibility and performance" >  >() },
    { 1944u, RevList< Rev< 0u, Arr64< Hash< "Author1088">() >(),  "Title875" > , Rev< 1u, Arr64< Hash< "Author677">() >(),  "Title549" >  >() },
    { 1945u, RevList< Rev< 0u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Making More Objects Contiguous" >  >() },
    { 1946u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Allow defaulting comparisons by value" >  >() },
    { 1947u, RevList< Rev< 0u, Arr64< Hash< "Author2121">() >(),  "Title1640" >  >() },
    { 1948u, RevList< Rev< 0u, Arr64< Hash< "Author236">() >(),  "Title195" >  >() },
    { 1949u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 2u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 3u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 4u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 5u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 6u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" > , Rev< 7u, Arr64< Hash< "Steve Downey">() >(),  "C++ Identifier Syntax using Unicode Standard Annex 31" >  >() },
    { 1950u, RevList< Rev< 0u, Arr64< Hash< "Jonathan B">() >(),  "<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" > , Rev< 1u, Arr64< Hash< "Jonathan B">() >(),  "<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" > , Rev< 2u, Arr64< Hash< "Jonathan B">() >(),  "<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++" >  >() },
    { 1951u, RevList< Rev< 0u, Arr64< Hash< "Logan R">() >(),  "Default Arguments for pair's Forwarding Constructor" > , Rev< 1u, Arr64< Hash< "Logan R">() >(),  "Default Arguments for pair's Forwarding Constructor" >  >() },
    { 1953u, RevList< Rev< 0u, Arr64< Hash< "Author997">() >(),  "Title806" >  >() },
    { 1955u, RevList< Rev< 0u, Arr64< Hash< "Author1802">() >(),  "Top Level Is Constant Evaluated" > , Rev< 1u, Arr64< Hash< "Author428">() >(),  "Top Level Is Constant Evaluated" >  >() },
    { 1956u, RevList< Rev< 0u, Arr64< Hash< "Author1282">() >(),  "P1956R0" > , Rev< 1u, Arr64< Hash< "Author921">() >(),  "P1956R1" >  >() },
    { 1957u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "Converting from T* to bool should be considered narrowing (re: US 212) - HackMD" >  >() },
    { 1958u, RevList< Rev< 0u, Arr64< Hash< "Lawrence Crowl">() >(),  "C++ Concurrent Buffer Queue" >  >() },
    { 1959u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Remove std::weak_equality and std::strong_equality" >  >() },
    { 1960u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "NB Comment Changes Reviewed by SG1" >  >() },
    { 1961u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Harmonizing the definitions of total order for pointers" >  >() },
    { 1962u, RevList< Rev< 0u, Arr64< Hash< "Author1971">() >(),  "Title1533" >  >() },
    { 1963u, RevList< Rev< 0u, Arr64< Hash< "Author49">() >(),  "P1963R0 Fixing US 313" >  >() },
    { 1964u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Casting convertible_to<bool> considered harmful" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Wording for boolean-testable" > , Rev< 2u, Arr64< Hash< "Tim Song">() >(),  "Wording for boolean-testable" >  >() },
    { 1965u, RevList< Rev< 0u, Arr64< Hash< "Author1805">() >(),  "Blanket Wording for Specifying ``Hidden Friends''" >  >() },
    { 1967u, RevList< Rev< 0u, Arr64< Hash< "Author1700">() >(),  "Preprocessor embed" > , Rev< 1u, Arr64< Hash< "Author433">() >(),  "Preprocessor embed - Binary Resource Inclusion" > , Rev< 2u, Arr64< Hash< "Author295">() >(),  "Preprocessor embed - Binary Resource Inclusion" > , Rev< 3u, Arr64< Hash< "Author680">() >(),  "Preprocessor embed - Binary Resource Inclusion | r4" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 5u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 6u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 7u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 8u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 9u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 10u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 11u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 12u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 13u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" > , Rev< 14u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed - a scannable, tooling-friendly binary resource inclusion mechanism" >  >() },
    { 1968u, RevList< Rev< 0u, Arr64< Hash< "Author2230">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 1969u, RevList< Rev< 0u, Arr64< Hash< "Author266">() >(),  "Core \"ready\" Issues" >  >() },
    { 1970u, RevList< Rev< 0u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Consistency for size() functions" > , Rev< 1u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Consistency for size() functions" > , Rev< 2u, Arr64< Hash< "Hannes Hauswedell">() >(),  "Consistency for size() functions: Add ranges::ssize" >  >() },
    { 1971u, RevList< Rev< 0u, Arr64< Hash< "Author1383">() >(),  "Core NB Comment Resolutions" >  >() },
    { 1972u, RevList< Rev< 0u, Arr64< Hash< "Author175">() >(),  "US105 Check satisfaction of constraints for non-templates when forming pointer to function" >  >() },
    { 1973u, RevList< Rev< 0u, Arr64< Hash< "Author2145">() >(),  "Rename _default_init Functions" > , Rev< 1u, Arr64< Hash< "Author528">() >(),  "Rename _default_init Functions" >  >() },
    { 1974u, RevList< Rev< 0u, Arr64< Hash< "Jeff Snyder">() >(),  "Non-transient constexpr allocation using" >  >() },
    { 1975u, RevList< Rev< 0u, Arr64< Hash< "Author1568">() >(),  "Fixing the wording of parenthesized aggregate-initialization" >  >() },
    { 1976u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixed-size 'span' construction from dynamic-size range" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixed-size 'span' construction from dynamic-size range" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Fixed-size 'span' construction from dynamic-size range" >  >() },
    { 1978u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Rename `_default_init` functions and do nothing more" >  >() },
    { 1979u, RevList< Rev< 0u, Arr64< Hash< "Mathias Stearn">() >(),  "Title87" >  >() },
    { 1980u, RevList< Rev< 0u, Arr64< Hash< "Jason Merrill">() >(),  "Drafting for CA096: Declaration matching for non-dependent requires-clauses" >  >() },
    { 1981u, RevList< Rev< 0u, Arr64< Hash< "Author1466">() >(),  "Rename leap to leap_second" >  >() },
    { 1982u, RevList< Rev< 0u, Arr64< Hash< "Author362">() >(),  "Rename link to time_zone_link" >  >() },
    { 1983u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Wording for GB301, US296, US292, US291, and US283" >  >() },
    { 1985u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "Universal Template Parameters" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "Universal Template Parameters" > , Rev< 3u, Arr64< Hash< "Mateusz Pusz">() >(),  "Universal Template Parameters" >  >() },
    { 1988u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Allow Templates in Local Classes" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Allow Templates in Local Classes" >  >() },
    { 1989u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title138" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title472" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title161" >  >() },
    { 1990u, RevList< Rev< 0u, Arr64< Hash< "Author612">() >(),  "Title502" > , Rev< 1u, Arr64< Hash< "Author628">() >(),  "Title510" >  >() },
    { 1991u, RevList< Rev< 0u, Arr64< Hash< "Author1534">() >(),  "Rod-Belfast-P1991" >  >() },
    { 1993u, RevList< Rev< 0u, Arr64< Hash< "Author1276">() >(),  "Restore factories to bulk_execute | P1993R0" > , Rev< 1u, Arr64< Hash< "Author1296">() >(),  "Restore shared state to bulk_execute | P1993R1" >  >() },
    { 1994u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "elements_view needs its own sentinel" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "elements_view needs its own sentinel" >  >() },
    { 1995u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "P1995R0 Contract Use Cases" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "P1995R1 Contract Use Cases" >  >() },
    { 1996u, RevList< Rev< 0u, Arr64< Hash< "Dmitry Sokolov">() >(),  "Title1555" >  >() },
    { 1997u, RevList< Rev< 0u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Relaxing Restrictions on Arrays" > , Rev< 1u, Arr64< Hash< "Krystian Stasiowski">() >(),  "Relaxing Restrictions on Arrays" >  >() },
    { 1998u, RevList< Rev< 0u, Arr64< Hash< "Ryan McDougall">() >(),  "Title616" > , Rev< 1u, Arr64< Hash< "Ryan McDougall">() >(),  "Title1224" >  >() },
    { 1999u, RevList< Rev< 0u, Arr64< Hash< "Author1690">() >(),  "Process proposal: double-check evolutionary material via a Tentatively Ready status" >  >() },
    { 2000u, RevList< Rev< 0u, Arr64< Hash< "Author1251">() >(),  "Title971" > , Rev< 1u, Arr64< Hash< "Author2100">() >(),  "Title1627" > , Rev< 2u, Arr64< Hash< "Author281">() >(),  "Title232" > , Rev< 3u, Arr64< Hash< "Author1113">() >(),  "P2000r3: Direction for ISO C++" > , Rev< 4u, Arr64< Hash< "Author1336">() >(),  "P2000r4: Direction for ISO C++" >  >() },
    { 2002u, RevList< Rev< 0u, Arr64< Hash< "Author1889">() >(),  "Defaulted comparison specification fixes" > , Rev< 1u, Arr64< Hash< "Author549">() >(),  "Defaulted comparison specification fixes" >  >() },
    { 2003u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "Fixing Internal and External Linkage Entities in Header Units" >  >() },
    { 2004u, RevList< Rev< 0u, Arr64< Hash< "Author1100">() >(),  "Numbers and their Scopes" >  >() },
    { 2005u, RevList< Rev< 0u, Arr64< Hash< "James Berrow">() >(),  "2D Graphics: A Brief Review" >  >() },
    { 2006u, RevList< Rev< 0u, Arr64< Hash< "Author487">() >(),  "Title407" > , Rev< 1u, Arr64< Hash< "Lewis Baker">() >(),  "Eliminating heap-allocations in sender/receiver with connect()/start() as basis operations" >  >() },
    { 2007u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "std::from_chars should work with std::string_view" >  >() },
    { 2008u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "Enable variable template template parameters" >  >() },
    { 2009u, RevList< Rev< 0u, Arr64< Hash< "The proposal">() >(),  "SG16: Unicode meeting summaries 2019-10-09 through 2019-12-11" >  >() },
    { 2010u, RevList< Rev< 0u, Arr64< Hash< "Author1956">() >(),  "Markdown To PDF" >  >() },
    { 2011u, RevList< Rev< 0u, Arr64< Hash< "Colby Pike">() >(),  "A pipeline-rewrite operator" > , Rev< 1u, Arr64< Hash< "Colby Pike">() >(),  "A pipeline-rewrite operator" >  >() },
    { 2012u, RevList< Rev< 0u, Arr64< Hash< "Author1707">() >(),  "P2012R0" > , Rev< 1u, Arr64< Hash< "Author1440">() >(),  "Fix the rangebased for loop, Rev1" > , Rev< 2u, Arr64< Hash< "Author357">() >(),  "Fix the range-based for loop, Rev 2" >  >() },
    { 2013u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" > , Rev< 4u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" > , Rev< 5u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Language: Optional <code>::operator new</code>" >  >() },
    { 2014u, RevList< Rev< 0u, Arr64< Hash< "Author1351">() >(),  "Title1046" > , Rev< 1u, Arr64< Hash< "Author1747">() >(),  "Title1354" > , Rev< 2u, Arr64< Hash< "Author1295">() >(),  "Proposed resolution for US061+US063 - aligned allocation of coroutine frames" >  >() },
    { 2016u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title603" >  >() },
    { 2017u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally safe ranges" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Conditionally borrowed ranges" >  >() },
    { 2019u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1484" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title974" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1568" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title843" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1154" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1529" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title958" > , Rev< 7u, Arr64< Hash< "Corentin Jabot">() >(),  "Title749" > , Rev< 8u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1215" >  >() },
    { 2020u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title308" >  >() },
    { 2021u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Negative zero strikes again" >  >() },
    { 2022u, RevList< Rev< 0u, Arr64< Hash< "Ran Regev">() >(),  "Rangified version of lexicographical_compare_three_way" > , Rev< 1u, Arr64< Hash< "Ran Regev">() >(),  "Rangified version of lexicographical_compare_three_way" > , Rev< 2u, Arr64< Hash< "Ran Regev">() >(),  "Rangified version of lexicographical_compare_three_way" > , Rev< 3u, Arr64< Hash< "Alex Dathskovsky">() >(),  "P2022R3 - Rangified version of lexicographical_compare_three_way" >  >() },
    { 2024u, RevList< Rev< 0u, Arr64< Hash< "Dietmar Khl">() >(),  "Bloomberg Analysis of Unified Executors" >  >() },
    { 2025u, RevList< Rev< 0u, Arr64< Hash< "Anton Zhilin">() >(),  "Guaranteed copy elision for named return objects" > , Rev< 1u, Arr64< Hash< "Anton Zhilin">() >(),  "Guaranteed copy elision for return variables" > , Rev< 2u, Arr64< Hash< "Anton Zhilin">() >(),  "Guaranteed copy elision for return variables" >  >() },
    { 2026u, RevList< Rev< 0u, Arr64< Hash< "Ryan McDougall">() >(),  "Title789" >  >() },
    { 2027u, RevList< Rev< 0u, Arr64< Hash< "Author1266">() >(),  "Title980" >  >() },
    { 2028u, RevList< Rev< 0u, Arr64< Hash< "Author575">() >(),  "Title465" >  >() },
    { 2029u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 2u, Arr64< Hash< "Tom Honermann">() >(),  "Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 3u, Arr64< Hash< "Tom Honermann">() >(),  "Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" > , Rev< 4u, Arr64< Hash< "Tom Honermann">() >(),  "Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals" >  >() },
    { 2030u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1395" >  >() },
    { 2031u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1683" >  >() },
    { 2032u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "P2032R0 Contract Use Cases" >  >() },
    { 2033u, RevList< Rev< 0u, Arr64< Hash< "Author411">() >(),  "Title352" >  >() },
    { 2034u, RevList< Rev< 0u, Arr64< Hash< "Ryan McDougall">() >(),  "Title418" > , Rev< 1u, Arr64< Hash< "Ryan McDougall">() >(),  "Title337" > , Rev< 2u, Arr64< Hash< "Ryan McDougall">() >(),  "Title990" > , Rev< 3u, Arr64< Hash< "Ryan McDougall">() >(),  "Partially Mutable Lambda Captures" > , Rev< 4u, Arr64< Hash< "Ryan McDougall">() >(),  "Partially Mutable Lambda Captures" >  >() },
    { 2035u, RevList< Rev< 0u, Arr64< Hash< "Author219">() >(),  "Microsoft Word - AP0_value_prop.docx" >  >() },
    { 2036u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Change scope of lambda trailing-return-type" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Change scope of lambda *trailing-return-type*" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Change scope of lambda *trailing-return-type*" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Change scope of lambda trailing-return-type" >  >() },
    { 2037u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "P2037R0 String's gratuitous assignment" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "P2037R1 String's gratuitous assignment" >  >() },
    { 2038u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "P2038R0 Proposed nomenclature for contract-related proposals" >  >() },
    { 2039u, RevList< Rev< 0u, Arr64< Hash< "Menashe Rosemberg">() >(),  "Title934" >  >() },
    { 2040u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title424" >  >() },
    { 2041u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Deleting variable templates" > , Rev< 1u, Arr64< Hash< "David Stone">() >(),  "Title647" >  >() },
    { 2042u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "P2042R0 Alternate names for make_shared_default_init" >  >() },
    { 2043u, RevList< Rev< 0u, Arr64< Hash< "David Sankel">() >(),  "Don't constexpr All The Things" >  >() },
    { 2044u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Title503" > , Rev< 1u, Arr64< Hash< "Robert Leahy">() >(),  "Title955" > , Rev< 2u, Arr64< Hash< "Robert Leahy">() >(),  "Title152" >  >() },
    { 2045u, RevList< Rev< 0u, Arr64< Hash< "Author844">() >(),  "Missing Mandates for the standard library" > , Rev< 1u, Arr64< Hash< "Author85">() >(),  "Missing Mandates for the standard library" >  >() },
    { 2046u, RevList< Rev< 0u, Arr64< Hash< "Dan Raviv">() >(),  "P1243R3 - Rangify New Algorithms" >  >() },
    { 2047u, RevList< Rev< 0u, Arr64< Hash< "Author727">() >(),  "An allocator-aware optional type" > , Rev< 1u, Arr64< Hash< "Author624">() >(),  "An allocator-aware optional type" > , Rev< 2u, Arr64< Hash< "Author306">() >(),  "An allocator-aware optional type" > , Rev< 3u, Arr64< Hash< "Author1897">() >(),  "An allocator-aware optional type" > , Rev< 4u, Arr64< Hash< "Author2118">() >(),  "An allocator-aware optional type" > , Rev< 5u, Arr64< Hash< "Author1887">() >(),  "An allocator-aware optional type" > , Rev< 6u, Arr64< Hash< "Author1718">() >(),  "An allocator-aware optional type" > , Rev< 7u, Arr64< Hash< "Author604">() >(),  "An allocator-aware optional type" >  >() },
    { 2048u, RevList< Rev< 0u, Arr64< Hash< "Vittorio Romeo">() >(),  "Prohibit zero and NULL from being used as null pointer literals" >  >() },
    { 2049u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Title292" >  >() },
    { 2050u, RevList< Rev< 0u, Arr64< Hash< "Andrew Sutton">() >(),  "Title721" >  >() },
    { 2051u, RevList< Rev< 0u, Arr64< Hash< "Author369">() >(),  "C++ Standard Library Issues to be moved in Prague" >  >() },
    { 2052u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title678" >  >() },
    { 2053u, RevList< Rev< 0u, Arr64< Hash< "Author1455">() >(),  "Title1134" > , Rev< 1u, Arr64< Hash< "Author2067">() >(),  "Title1601" >  >() },
    { 2054u, RevList< Rev< 0u, Arr64< Hash< "Author258">() >(),  "Title215" > , Rev< 1u, Arr64< Hash< "Author142">() >(),  "Title122" >  >() },
    { 2055u, RevList< Rev< 0u, Arr64< Hash< "Author1118">() >(),  "Title892" >  >() },
    { 2057u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title274" >  >() },
    { 2058u, RevList< Rev< 0u, Arr64< Hash< "Martin HoYeHovsk">() >(),  "Title110" >  >() },
    { 2059u, RevList< Rev< 0u, Arr64< Hash< "Martin HoYeHovsk">() >(),  "Title456" >  >() },
    { 2060u, RevList< Rev< 0u, Arr64< Hash< "Martin HoYeHovsk">() >(),  "Title1130" >  >() },
    { 2061u, RevList< Rev< 0u, Arr64< Hash< "Author467">() >(),  "Title391" >  >() },
    { 2062u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "Title834" >  >() },
    { 2064u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1577" >  >() },
    { 2065u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "naming and aliases" >  >() },
    { 2066u, RevList< Rev< 0u, Arr64< Hash< "Michael L">() >(),  "Suggested draft TS for C++ Extensions for Transaction Memory Light" > , Rev< 1u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 2u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 3u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 4u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 5u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 6u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 7u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 8u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 9u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" > , Rev< 10u, Arr64< Hash< "Hans Boehm">() >(),  "Suggested draft TS for C++ Extensions for Minimal Transactional Memory" >  >() },
    { 2067u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title817" >  >() },
    { 2068u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title207" >  >() },
    { 2069u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title815" >  >() },
    { 2070u, RevList< Rev< 0u, Arr64< Hash< "Peter Sommerlad">() >(),  "Title727" >  >() },
    { 2071u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Named universal character escapes" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "Named universal character escapes" > , Rev< 2u, Arr64< Hash< "Tom Honermann">() >(),  "Named universal character escapes" >  >() },
    { 2072u, RevList< Rev< 0u, Arr64< Hash< "Marco Foco">() >(),  "Title191" > , Rev< 1u, Arr64< Hash< "Marco Foco">() >(),  "Title353" >  >() },
    { 2073u, RevList< Rev< 0u, Arr64< Hash< "Author30">() >(),  "Title24" >  >() },
    { 2074u, RevList< Rev< 0u, Arr64< Hash< "Author640">() >(),  "Title522" >  >() },
    { 2075u, RevList< Rev< 0u, Arr64< Hash< "Pavel Dyakov">() >(),  "Title941" > , Rev< 1u, Arr64< Hash< "Pavel Dyakov">() >(),  "Title917" > , Rev< 2u, Arr64< Hash< "Pavel Dyakov">() >(),  "P2075R2.docx" > , Rev< 3u, Arr64< Hash< "Ilya Burylov">() >(),  "P2075R3.docx" > , Rev< 4u, Arr64< Hash< "Ilya Burylov">() >(),  "P2075R4.docx" > , Rev< 5u, Arr64< Hash< "Ilya Burylov">() >(),  "P2075R5.docx" > , Rev< 6u, Arr64< Hash< "Ilya Burylov">() >(),  "P2075R6.docx" >  >() },
    { 2076u, RevList< Rev< 0u, Arr64< Hash< "Author1453">() >(),  "Previous disagreements on Contracts" >  >() },
    { 2077u, RevList< Rev< 0u, Arr64< Hash< "Boyarinov, Konstantin">() >(),  "Title282" > , Rev< 1u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Heterogeneous erasure overloads for associative containers" > , Rev< 2u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Heterogeneous erasure overloads for associative containers" > , Rev< 3u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Heterogeneous erasure overloads for associative containers" >  >() },
    { 2078u, RevList< Rev< 0u, Arr64< Hash< "Bob Steagall">() >(),  "Add new traits type std::is_complex<T>" >  >() },
    { 2079u, RevList< Rev< 0u, Arr64< Hash< "Ruslan">() >(),  "Title1330" > , Rev< 1u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "Parallel Executor" > , Rev< 2u, Arr64< Hash< "Lee Howes">() >(),  "System execution context" > , Rev< 3u, Arr64< Hash< "Lee Howes">() >(),  "System execution context" > , Rev< 4u, Arr64< Hash< "Lee Howes">() >(),  "System execution context" > , Rev< 5u, Arr64< Hash< "Lucian Radu">() >(),  "System execution context" > , Rev< 6u, Arr64< Hash< "Lucian Radu">() >(),  "System execution context" > , Rev< 7u, Arr64< Hash< "Lucian Radu">() >(),  "Parallel scheduler" >  >() },
    { 2080u, RevList< Rev< 0u, Arr64< Hash< "Author410">() >(),  "Polymorphic allocators: There is no such thing as One True Vocabulary Type" >  >() },
    { 2081u, RevList< Rev< 0u, Arr64< Hash< "Author1533">() >(),  "Rebase the Library Fundamentals v3 TS on C++20" > , Rev< 1u, Arr64< Hash< "Author717">() >(),  "Rebase the Library Fundamentals v3 TS on C++20" >  >() },
    { 2082u, RevList< Rev< 0u, Arr64< Hash< "Author381">() >(),  "Title326" > , Rev< 1u, Arr64< Hash< "Author2097">() >(),  "Title1625" >  >() },
    { 2085u, RevList< Rev< 0u, Arr64< Hash< "Author914">() >(),  "Consistent defaulted comparisons" >  >() },
    { 2087u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Reflection Naming: fix reflexpr" >  >() },
    { 2088u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Reflection Naming: Reification" >  >() },
    { 2089u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Function parameter constraints are fragile" >  >() },
    { 2091u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Issues with range access CPOs" >  >() },
    { 2092u, RevList< Rev< 0u, Arr64< Hash< "Daveed Vandevoorde">() >(),  "Title373" >  >() },
    { 2093u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 5u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 6u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 7u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 8u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 9u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 10u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 11u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 12u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 13u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" > , Rev< 14u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatted output" >  >() },
    { 2095u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Resolve lambda init-capture pack grammar (CWG2378)" >  >() },
    { 2096u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Generalized wording for partial specializations" > , Rev< 1u, Arr64< Hash< "James Touton">() >(),  "Generalized wording for partial specializations" > , Rev< 2u, Arr64< Hash< "James Touton">() >(),  "Generalized wording for partial specializations" >  >() },
    { 2098u, RevList< Rev< 0u, Arr64< Hash< "Author437">() >(),  "Proposing std::isspecializationof" > , Rev< 1u, Arr64< Hash< "Author517">() >(),  "Proposing std::isspecializationof" >  >() },
    { 2100u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "D2100R0: Keep unhandled_exception of a promise type mandatory - a response to US062 and FR066" >  >() },
    { 2101u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Models subsumes satisfies (Wording for US298 and US300)" >  >() },
    { 2102u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Make implicit expression variations more explicit (Wording for US185)" >  >() },
    { 2103u, RevList< Rev< 0u, Arr64< Hash< "Author1574">() >(),  "Core NB Comment Resolutions" >  >() },
    { 2104u, RevList< Rev< 0u, Arr64< Hash< "Author962">() >(),  "Resolution for GB046 - Disallow changing concept values" >  >() },
    { 2106u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Alternative wording for GB315 and GB316" >  >() },
    { 2107u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Core Issue 2436: US064 Copy semantics of coroutine parameters" >  >() },
    { 2108u, RevList< Rev< 0u, Arr64< Hash< "Author504">() >(),  "Core \"ready\" Issues" >  >() },
    { 2109u, RevList< Rev< 0u, Arr64< Hash< "Author542">() >(),  "US084: Disallow \"export import foo\" outside of module interface" >  >() },
    { 2113u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "Proposed resolution for 2019 comment CA 112" >  >() },
    { 2114u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "P2114R0 Minimal Contract Use Cases" >  >() },
    { 2115u, RevList< Rev< 0u, Arr64< Hash< "Author585">() >(),  "US069: Merging of multiple definitionsfor unnamed unscoped enumerations" >  >() },
    { 2116u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Remove tuple-like protocol support from fixed-extent span" >  >() },
    { 2117u, RevList< Rev< 0u, Arr64< Hash< "Author1911">() >(),  "C++ Standard Library Issues Resolved Directly In Prague" >  >() },
    { 2119u, RevList< Rev< 0u, Arr64< Hash< "Jolanta Opara">() >(),  "Feedback on P1708: Simple Statistical Functions" >  >() },
    { 2120u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Simplified structured bindings protocol with pack aliases" >  >() },
    { 2123u, RevList< Rev< 0u, Arr64< Hash< "Hal Finkel">() >(),  "Extending the Type System to Provide API and ABI Flexibility" >  >() },
    { 2125u, RevList< Rev< 0u, Arr64< Hash< "Titus Winters">() >(),  "Title1562" >  >() },
    { 2126u, RevList< Rev< 0u, Arr64< Hash< "Author423">() >(),  "Microsoft Word - AP1_unleashing.docx" >  >() },
    { 2127u, RevList< Rev< 0u, Arr64< Hash< "Author610">() >(),  "Title501" >  >() },
    { 2128u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title101" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title519" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title627" > , Rev< 3u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title664" > , Rev< 4u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title684" > , Rev< 5u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title1167" > , Rev< 6u, Arr64< Hash< "Mark Hoemmen">() >(),  "Title1525" >  >() },
    { 2130u, RevList< Rev< 0u, Arr64< Hash< "Author1256">() >(),  "P2130-Rod-Prague" >  >() },
    { 2131u, RevList< Rev< 0u, Arr64< Hash< "Author2089">() >(),  "Changes between C++17 and C++20" >  >() },
    { 2133u, RevList< Rev< 0u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - incu.doc" >  >() },
    { 2134u, RevList< Rev< 0u, Arr64< Hash< "Balog, Pal">() >(),  "Microsoft Word - kaizen.doc" >  >() },
    { 2135u, RevList< Rev< 1u, Arr64< Hash< "Author2068">() >(),  "Title1603" >  >() },
    { 2136u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "invoke<R> - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "invoke_r - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "invoke_r - HackMD" > , Rev< 3u, Arr64< Hash< "Zhihao Yuan">() >(),  "invoke_r - HackMD" >  >() },
    { 2137u, RevList< Rev< 0u, Arr64< Hash< "Chandler Carruth">() >(),  "Goals and priorities for C++" >  >() },
    { 2138u, RevList< Rev< 0u, Arr64< Hash< "Author771">() >(),  "Rules of Design<=>Wording engagement" > , Rev< 1u, Arr64< Hash< "Author1990">() >(),  "Rules of Design<=>Wording engagement" > , Rev< 2u, Arr64< Hash< "Author804">() >(),  "Rules of Design<=>Specification engagement" > , Rev< 3u, Arr64< Hash< "Author425">() >(),  "Rules of Design<=>Specification engagement" > , Rev< 4u, Arr64< Hash< "Author34">() >(),  "Rules of Design<=>Specification engagement" >  >() },
    { 2139u, RevList< Rev< 0u, Arr64< Hash< "Author1329">() >(),  "Reviewing Deprecated Facilities of C++20 for C++23" > , Rev< 1u, Arr64< Hash< "Author1785">() >(),  "Reviewing Deprecated Facilities of C++20 for C++23" > , Rev< 2u, Arr64< Hash< "Author2132">() >(),  "Reviewing Deprecated Facilities of C++20 for C++23" >  >() },
    { 2141u, RevList< Rev< 0u, Arr64< Hash< "Author28">() >(),  "Aggregates are named tuples" > , Rev< 1u, Arr64< Hash< "Author2210">() >(),  "Aggregates are named tuples" > , Rev< 2u, Arr64< Hash< "Author514">() >(),  "Aggregates are named tuples" >  >() },
    { 2142u, RevList< Rev< 1u, Arr64< Hash< "Author970">() >(),  "Markdown To PDF" >  >() },
    { 2145u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Evolving C++ Remotely" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "Evolving C++ Remotely" >  >() },
    { 2146u, RevList< Rev< 0u, Arr64< Hash< "Amanda Kornoushenko">() >(),  "Modern std::byte stream IO for C++" > , Rev< 1u, Arr64< Hash< "Amanda Kornoushenko">() >(),  "Modern std::byte stream IO for C++" > , Rev< 2u, Arr64< Hash< "Amanda Kornoushenko">() >(),  "Modern std::byte stream IO for C++" >  >() },
    { 2148u, RevList< Rev< 0u, Arr64< Hash< "Author453">() >(),  "Title381" >  >() },
    { 2149u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Title1097" >  >() },
    { 2150u, RevList< Rev< 0u, Arr64< Hash< "Author209">() >(),  "Down with typename in the Library!" >  >() },
    { 2152u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "Title160" > , Rev< 1u, Arr64< Hash< "Inbal Levi">() >(),  "Title1157" >  >() },
    { 2155u, RevList< Rev< 0u, Arr64< Hash< "Gordon Brown">() >(),  "Title238" >  >() },
    { 2156u, RevList< Rev< 0u, Arr64< Hash< "Erich Keane">() >(),  "Title709" > , Rev< 1u, Arr64< Hash< "Erich Keane">() >(),  "Title754" >  >() },
    { 2159u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0">() >(),  "Unbounded Decimal" > , Rev< 1u, Arr64< Hash< "\xC2\xA0">() >(),  "P2159R1, A Big Decimal" >  >() },
    { 2160u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Locks lock lockables" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Locks lock lockables" >  >() },
    { 2161u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Title1679" > , Rev< 1u, Arr64< Hash< "Robert Leahy">() >(),  "Title1016" > , Rev< 2u, Arr64< Hash< "Robert Leahy">() >(),  "Title254" >  >() },
    { 2162u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Inheriting from std::variant" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Inheriting from `std::variant`" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Inheriting from `std::variant`" >  >() },
    { 2163u, RevList< Rev< 0u, Arr64< Hash< "Author659">() >(),  "nativetuple/draft2.md at master accelerated/nativetuple GitHub" >  >() },
    { 2164u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title245" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title534" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1513" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1563" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1708" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title495" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title499" > , Rev< 7u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1043" > , Rev< 8u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1050" > , Rev< 9u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1199" >  >() },
    { 2165u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title279" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title893" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title851" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1402" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title205" >  >() },
    { 2166u, RevList< Rev< 0u, Arr64< Hash< "Author2161">() >(),  "Title1663" > , Rev< 1u, Arr64< Hash< "Author960">() >(),  "Title779" >  >() },
    { 2167u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Proposed wording for LWG 2114" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" > , Rev< 2u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" > , Rev< 3u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)" >  >() },
    { 2168u, RevList< Rev< 0u, Arr64< Hash< "Lewis Baker">() >(),  "Title1483" > , Rev< 1u, Arr64< Hash< "Lewis Baker">() >(),  "Title1181" > , Rev< 2u, Arr64< Hash< "Lewis Baker">() >(),  "Title383" > , Rev< 3u, Arr64< Hash< "Lewis Baker">() >(),  "Title172" >  >() },
    { 2169u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1412" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1039" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title428" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title322" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title520" >  >() },
    { 2170u, RevList< Rev< 0u, Arr64< Hash< "Charles Salvia">() >(),  "Feedback on designing the proposed `std::error` type" >  >() },
    { 2171u, RevList< Rev< 0u, Arr64< Hash< "Author2205">() >(),  "Rebasing the Networking TS on C++20" > , Rev< 1u, Arr64< Hash< "Author1898">() >(),  "Rebasing the Networking TS on C++20" > , Rev< 2u, Arr64< Hash< "Author1963">() >(),  "Rebasing the Networking TS on C++20" >  >() },
    { 2172u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1114" >  >() },
    { 2173u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "Title759" > , Rev< 1u, Arr64< Hash< "Inbal Levi">() >(),  "Attributes on Lambda-Expressions" >  >() },
    { 2174u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Compound Literals - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Compound Literals - HackMD" >  >() },
    { 2175u, RevList< Rev< 0u, Arr64< Hash< "Lewis Baker">() >(),  "Composable cancellation for sender-based async operations" >  >() },
    { 2176u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "A different take on inexpressible conditions" >  >() },
    { 2178u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title155" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1311" >  >() },
    { 2179u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2020-01-08 through 2020-05-27" >  >() },
    { 2181u, RevList< Rev< 0u, Arr64< Hash< "Author1154">() >(),  "Correcting the Design of Bulk Execution" > , Rev< 1u, Arr64< Hash< "Author943">() >(),  "Correcting the Design of Bulk Execution" >  >() },
    { 2182u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract Support: Defining the Minimum Viable Feature Set" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract Support: Defining the Minimum Viable Feature Set" >  >() },
    { 2183u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Executors Review: Properties" >  >() },
    { 2184u, RevList< Rev< 0u, Arr64< Hash< "Author1675">() >(),  "Title1301" >  >() },
    { 2185u, RevList< Rev< 0u, Arr64< Hash< "Author2044">() >(),  "Contracts Use Case Categorization - HackMD" >  >() },
    { 2186u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Removing Garbage Collection Support" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Removing Garbage Collection Support" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "Removing Garbage Collection Support" >  >() },
    { 2187u, RevList< Rev< 0u, Arr64< Hash< "Nathan Myers">() >(),  "Title294" > , Rev< 3u, Arr64< Hash< "Nathan Myers">() >(),  "Title767" > , Rev< 4u, Arr64< Hash< "Nathan Myers">() >(),  "Title1287" > , Rev< 5u, Arr64< Hash< "Nathan Myers">() >(),  "Title1527" >  >() },
    { 2188u, RevList< Rev< 0u, Arr64< Hash< "Anthony">() >(),  "DXXXX: Zap the Zap: Pointers should just be bags of bits" > , Rev< 1u, Arr64< Hash< "Anthony">() >(),  "Zap the Zap: Pointers are sometimes just bags of bits" >  >() },
    { 2191u, RevList< Rev< 0u, Arr64< Hash< "Author2003">() >(),  "Modules: ADL & GMFs do not play together well (anymore)" >  >() },
    { 2192u, RevList< Rev< 0u, Arr64< Hash< "Author56">() >(),  "Title57" > , Rev< 1u, Arr64< Hash< "Author1405">() >(),  "Title1094" > , Rev< 2u, Arr64< Hash< "Author429">() >(),  "Title368" > , Rev< 3u, Arr64< Hash< "Author2092">() >(),  "Title1623" >  >() },
    { 2193u, RevList< Rev< 0u, Arr64< Hash< "Author845">() >(),  "Title666" > , Rev< 1u, Arr64< Hash< "Author484">() >(),  "Title404" >  >() },
    { 2194u, RevList< Rev< 0u, Arr64< Hash< "Author2050">() >(),  "Title1592" >  >() },
    { 2195u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Electronic Straw Polls" > , Rev< 1u, Arr64< Hash< "Author303">() >(),  "Electronic Straw Polls" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "Electronic Straw Polls" >  >() },
    { 2196u, RevList< Rev< 0u, Arr64< Hash< "Author1462">() >(),  "P2196R0" >  >() },
    { 2197u, RevList< Rev< 0u, Arr64< Hash< "Michael Tesch">() >(),  "Formatting for std::complex" >  >() },
    { 2198u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 4u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 5u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 6u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" > , Rev< 7u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Feature-Test Macros and Implementation-Defined Extensions" >  >() },
    { 2199u, RevList< Rev< 0u, Arr64< Hash< "Isabella Muerte">() >(),  "Concepts to Differentiate Types" >  >() },
    { 2201u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Mixed string literal concatenation" > , Rev< 1u, Arr64< Hash< "Jens Maurer">() >(),  "Mixed string literal concatenation" >  >() },
    { 2202u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Executors review Senders and Receivers" >  >() },
    { 2203u, RevList< Rev< 0u, Arr64< Hash< "Tomasz KamiDski">() >(),  "Title860" >  >() },
    { 2205u, RevList< Rev< 0u, Arr64< Hash< "Chris Kohlhoff">() >(),  "Executors Review - Polymorphic Executor" >  >() },
    { 2206u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "Executors Thread Pool review report" >  >() },
    { 2207u, RevList< Rev< 0u, Arr64< Hash< "- name">() >(),  "Title1175" >  >() },
    { 2209u, RevList< Rev< 0u, Arr64< Hash< "Lee Howes">() >(),  "Bulk schedule" >  >() },
    { 2210u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Superior String Splitting" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Superior String Splitting" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Superior String Splitting" >  >() },
    { 2211u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "Exhaustiveness Checking for Pattern Matching" >  >() },
    { 2212u, RevList< Rev< 0u, Arr64< Hash< "Alexey Dmitriev">() >(),  "Relax Requirements for time_point::clock" > , Rev< 1u, Arr64< Hash< "Alexey Dmitriev">() >(),  "Relax Requirements for time_point::clock" > , Rev< 2u, Arr64< Hash< "Alexey Dmitriev">() >(),  "Relax Requirements for time_point::clock" >  >() },
    { 2213u, RevList< Rev< 0u, Arr64< Hash< "Amir Kirsh">() >(),  "Title786" > , Rev< 1u, Arr64< Hash< "Amir Kirsh">() >(),  "Title1119" >  >() },
    { 2214u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "A Plan for C++23 Ranges" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "A Plan for C++23 Ranges" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "A Plan for C++23 Ranges" >  >() },
    { 2215u, RevList< Rev< 0u, Arr64< Hash< "Author2189">() >(),  "Title1681" > , Rev< 1u, Arr64< Hash< "Author741">() >(),  "Title597" >  >() },
    { 2216u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "std::format improvements" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "std::format improvements" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "std::format improvements" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "std::format improvements" >  >() },
    { 2217u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2020-06-10 through 2020-08-26" >  >() },
    { 2218u, RevList< Rev< 0u, Arr64< Hash< "value">() >(),  "Title1212" >  >() },
    { 2219u, RevList< Rev< 0u, Arr64< Hash< "Author2053">() >(),  "P0433 Executors Issues Needing Resolution | P2219R0" >  >() },
    { 2220u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "redefine properties in P0443" >  >() },
    { 2221u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "define P0443 cpos with tag_invoke" >  >() },
    { 2223u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title410" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title459" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title629" >  >() },
    { 2224u, RevList< Rev< 0u, Arr64< Hash< "Author1812">() >(),  "A Better bulk_schedule" >  >() },
    { 2226u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "A proposal for an idiom to move from an object and reset it to its default constructed state" >  >() },
    { 2227u, RevList< Rev< 0u, Arr64< Hash< "Author1560">() >(),  "Update normative reference to POSIX" >  >() },
    { 2228u, RevList< Rev< 0u, Arr64< Hash< "Author1267">() >(),  "Title982" >  >() },
    { 2231u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Missing `constexpr` in `std::optional` and `std::variant`" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Missing `constexpr` in `std::optional` and `std::variant`" >  >() },
    { 2232u, RevList< Rev< 0u, Arr64< Hash< "Emil Dotchevski">() >(),  "Zero-Overhead Deterministic Exceptions: Catching Values" >  >() },
    { 2233u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2020 Fall Library Evolution Polls" > , Rev< 1u, Arr64< Hash< "Author59">() >(),  "2020 Fall Library Evolution Polls" > , Rev< 2u, Arr64< Hash< "Author1297">() >(),  "D2233R2: 2020 Fall Library Evolution Polls" > , Rev< 3u, Arr64< Hash< "Author2109">() >(),  "2020 Fall Library Evolution Polls" >  >() },
    { 2234u, RevList< Rev< 0u, Arr64< Hash< "Scott Schurr">() >(),  "P2234R0-UB_and_IF-NDR_Audit" > , Rev< 1u, Arr64< Hash< "Scott Schurr">() >(),  "P2234R1-UB_and_IF-NDR_Audit" >  >() },
    { 2235u, RevList< Rev< 0u, Arr64< Hash< "Author1193">() >(),  "Disentangling schedulers and executors" >  >() },
    { 2236u, RevList< Rev< 0u, Arr64< Hash< "Author1316">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, Nov. 2020" >  >() },
    { 2237u, RevList< Rev< 0u, Arr64< Hash< "Author350">() >(),  "Title296" >  >() },
    { 2238u, RevList< Rev< 0u, Arr64< Hash< "Author355">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 2242u, RevList< Rev< 0u, Arr64< Hash< "Author2221">() >(),  "Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 1u, Arr64< Hash< "Author827">() >(),  "Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 2u, Arr64< Hash< "Author911">() >(),  "Non-literal variables (and labels and gotos) in constexpr functions" > , Rev< 3u, Arr64< Hash< "Author1199">() >(),  "Non-literal variables (and labels and gotos) in constexpr functions" >  >() },
    { 2244u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1291" >  >() },
    { 2245u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1554" >  >() },
    { 2246u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title891" > , Rev< 1u, Arr64< Hash< "Aaron Ballman">() >(),  "Title414" >  >() },
    { 2247u, RevList< Rev< 0u, Arr64< Hash< "Author1504">() >(),  "2020 Library Evolution Report" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "2020 Library Evolution Report" >  >() },
    { 2248u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 2u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 3u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 4u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 5u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 6u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 7u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" > , Rev< 8u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Enabling list-initialization for algorithms" >  >() },
    { 2249u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 2u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 3u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 4u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 5u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" > , Rev< 6u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Mixed comparisons for smart pointers" >  >() },
    { 2250u, RevList< Rev< 0u, Arr64< Hash< "Author1043">() >(),  "Scheduler_Vs_Executor" >  >() },
    { 2251u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title1414" > , Rev< 1u, Arr64< Hash< "1">() >(),  "Title1205" >  >() },
    { 2253u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2020-09-09 through 2020-11-11" >  >() },
    { 2254u, RevList< Rev< 0u, Arr64< Hash< "Author1527">() >(),  "Title1187" >  >() },
    { 2255u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "A type trait to detect reference binding to temporary" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "A type trait to detect reference binding to temporary" > , Rev< 2u, Arr64< Hash< "Tim Song">() >(),  "A type trait to detect reference binding to temporary" >  >() },
    { 2257u, RevList< Rev< 0u, Arr64< Hash< "Dalton M">() >(),  "Title839" >  >() },
    { 2259u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Repairing input range adaptors and counted_iterator" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Repairing input range adaptors and counted_iterator" >  >() },
    { 2260u, RevList< Rev< 0u, Arr64< Hash< "Author602">() >(),  "Title493" >  >() },
    { 2262u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2020 Fall Library Evolution Poll Outcomes" >  >() },
    { 2263u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "A call for a WG21 managed chat service" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "A call for a WG21 managed chat service" >  >() },
    { 2264u, RevList< Rev< 0u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 1u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 2u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 3u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 4u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 5u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 6u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" > , Rev< 7u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make assert() macro user friendly for C and C++" >  >() },
    { 2265u, RevList< Rev< 0u, Arr64< Hash< "Kevlin Henney">() >(),  "Title325" > , Rev< 1u, Arr64< Hash< "Kevlin Henney">() >(),  "Title1436" >  >() },
    { 2266u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Simpler implicit move" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Simpler implicit move" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Simpler implicit move" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Simpler implicit move" >  >() },
    { 2267u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "Library Evolution Policies" > , Rev< 1u, Arr64< Hash< "Inbal Levi">() >(),  "Library Evolution Policies" >  >() },
    { 2268u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Roadmap" >  >() },
    { 2272u, RevList< Rev< 0u, Arr64< Hash< "Author1052">() >(),  "Title844" >  >() },
    { 2273u, RevList< Rev< 0u, Arr64< Hash< "Author1423">() >(),  "Making std::unique_ptr constexpr" > , Rev< 1u, Arr64< Hash< "Author1869">() >(),  "Making std::unique_ptr constexpr" > , Rev< 2u, Arr64< Hash< "Author785">() >(),  "Making std::unique_ptr constexpr" > , Rev< 3u, Arr64< Hash< "Author1019">() >(),  "Making std::unique_ptr constexpr" >  >() },
    { 2274u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title1109" >  >() },
    { 2276u, RevList< Rev< 0u, Arr64< Hash< "Author2206">() >(),  "Fix std::cbegin(), ranges::cbegin, and provide const_iterator support for std::span" > , Rev< 1u, Arr64< Hash< "Author285">() >(),  "Microsoft Word - P2276R1_fix_cbegin_210909.docx" >  >() },
    { 2277u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Packs outside of Templates" >  >() },
    { 2278u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "`cbegin` should always return a constant iterator" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "cbegin should always return a constant iterator" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "cbegin should always return a constant iterator" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "cbegin should always return a constant iterator" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "cbegin should always return a constant iterator" >  >() },
    { 2279u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "We need a language mechanism for customization points" >  >() },
    { 2280u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Using unknown references in constant expressions" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Using unknown references in constant expressions" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Using unknown pointers and references in constant expressions" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Using unknown pointers and references in constant expressions" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Using unknown pointers and references in constant expressions" >  >() },
    { 2281u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Clarifying range adaptor objects" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Clarifying range adaptor objects" >  >() },
    { 2283u, RevList< Rev< 0u, Arr64< Hash< "Michael Schellenberger">() >(),  "constexpr for specialized memory algorithms" > , Rev< 1u, Arr64< Hash< "Michael Schellenberger">() >(),  "constexpr for specialized memory algorithms" > , Rev< 2u, Arr64< Hash< "Michael Schellenberger">() >(),  "constexpr for specialized memory algorithms" >  >() },
    { 2285u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Are default function arguments in the immediate context?" >  >() },
    { 2286u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 5u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 6u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 7u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" > , Rev< 8u, Arr64< Hash< "Barry Revzin">() >(),  "Formatting Ranges" >  >() },
    { 2287u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Designated-initializers for Base Classes" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Designated-initializers for Base Classes" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Designated-initializers for Base Classes" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Designated-initializers for Base Classes" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Designated-initializers for Base Classes" >  >() },
    { 2289u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Winter Library Evolution Polls" >  >() },
    { 2290u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1357" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title546" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1373" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title444" >  >() },
    { 2291u, RevList< Rev< 0u, Arr64< Hash< "Author967">() >(),  "Title781" > , Rev< 1u, Arr64< Hash< "Daniil Goncharov">() >(),  "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" > , Rev< 2u, Arr64< Hash< "Daniil Goncharov">() >(),  "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" > , Rev< 3u, Arr64< Hash< "Daniil Goncharov">() >(),  "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header" >  >() },
    { 2295u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1351" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title204" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1148" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title466" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title730" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1269" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1401" >  >() },
    { 2297u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title443" >  >() },
    { 2299u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "`mdspan` and CTAD" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "`mdspan` and CTAD" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "`mdspan` and CTAD" > , Rev< 3u, Arr64< Hash< "Bryce Adelstein">() >(),  "`mdspan`s of All Dynamic Extents" > , Rev< 4u, Arr64< Hash< "Bryce Adelstein">() >(),  "mdspans of All Dynamic Extents" >  >() },
    { 2300u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 1u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 2u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 3u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 4u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 5u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 6u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 7u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 8u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 9u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" > , Rev< 10u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`std::execution`" >  >() },
    { 2301u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Add a `pmr` alias for `std::stacktrace`" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Add a `pmr` alias for `std::stacktrace`" >  >() },
    { 2302u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "Prefer std::ranges::contains over std::basic_string_view::contains" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "`std::ranges::contains`" > , Rev< 2u, Arr64< Hash< "Christopher Di">() >(),  "`std::ranges::contains`" > , Rev< 3u, Arr64< Hash< "Christopher Di">() >(),  "`std::ranges::contains`" > , Rev< 4u, Arr64< Hash< "Christopher Di">() >(),  "`std::ranges::contains`" >  >() },
    { 2303u, RevList< Rev< 0u, Arr64< Hash< "Author2081">() >(),  "Title1613" > , Rev< 1u, Arr64< Hash< "Author443">() >(),  "Title374" > , Rev< 2u, Arr64< Hash< "Author468">() >(),  "Title393" > , Rev< 3u, Arr64< Hash< "Author1515">() >(),  "Title1177" > , Rev< 4u, Arr64< Hash< "Author607">() >(),  "Title497" >  >() },
    { 2304u, RevList< Rev< 0u, Arr64< Hash< "Author1780">() >(),  "Title1382" > , Rev< 1u, Arr64< Hash< "Author358">() >(),  "Title302" > , Rev< 2u, Arr64< Hash< "Author700">() >(),  "Title562" > , Rev< 3u, Arr64< Hash< "Author485">() >(),  "Title405" >  >() },
    { 2305u, RevList< Rev< 0u, Arr64< Hash< "Author1709">() >(),  "Title1320" > , Rev< 1u, Arr64< Hash< "Author1611">() >(),  "Title1246" > , Rev< 2u, Arr64< Hash< "Author862">() >(),  "Title687" > , Rev< 3u, Arr64< Hash< "Author800">() >(),  "Title645" > , Rev< 4u, Arr64< Hash< "Author166">() >(),  "Title143" > , Rev< 5u, Arr64< Hash< "Author983">() >(),  "Type inference for object definitions" >  >() },
    { 2306u, RevList< Rev< 0u, Arr64< Hash< "Author768">() >(),  "Title626" > , Rev< 1u, Arr64< Hash< "Author1024">() >(),  "Title818" > , Rev< 2u, Arr64< Hash< "Author2016">() >(),  "Title1556" > , Rev< 3u, Arr64< Hash< "Author247">() >(),  "Title203" >  >() },
    { 2307u, RevList< Rev< 0u, Arr64< Hash< "Author822">() >(),  "Title654" > , Rev< 1u, Arr64< Hash< "Author1197">() >(),  "Title938" > , Rev< 2u, Arr64< Hash< "Author1668">() >(),  "Title1297" >  >() },
    { 2308u, RevList< Rev< 0u, Arr64< Hash< "Author598">() >(),  "Template parameter initialization" > , Rev< 1u, Arr64< Hash< "Author1244">() >(),  "Template parameter initialization" >  >() },
    { 2309u, RevList< Rev< 0u, Arr64< Hash< "Author329">() >(),  "CORE:202101" >  >() },
    { 2310u, RevList< Rev< 0u, Arr64< Hash< "Author1278">() >(),  "Title989" > , Rev< 1u, Arr64< Hash< "Author2202">() >(),  "Title1687" >  >() },
    { 2311u, RevList< Rev< 0u, Arr64< Hash< "Author901">() >(),  "Title729" > , Rev< 1u, Arr64< Hash< "Author2141">() >(),  "Title1649" > , Rev< 2u, Arr64< Hash< "Author1894">() >(),  "Title1463" >  >() },
    { 2312u, RevList< Rev< 0u, Arr64< Hash< "Author2113">() >(),  "Title1632" > , Rev< 1u, Arr64< Hash< "Author1904">() >(),  "Title1470" >  >() },
    { 2313u, RevList< Rev< 0u, Arr64< Hash< "Author2125">() >(),  "Core \"tentatively ready\" Issues" >  >() },
    { 2314u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Character sets and encodings" > , Rev< 1u, Arr64< Hash< "Jens Maurer">() >(),  "Character sets and encodings" > , Rev< 2u, Arr64< Hash< "Jens Maurer">() >(),  "Character sets and encodings" > , Rev< 3u, Arr64< Hash< "Jens Maurer">() >(),  "Character sets and encodings" > , Rev< 4u, Arr64< Hash< "Jens Maurer">() >(),  "Character sets and encodings" >  >() },
    { 2315u, RevList< Rev< 0u, Arr64< Hash< "Author744">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2021" >  >() },
    { 2316u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title176" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title72" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title40" >  >() },
    { 2317u, RevList< Rev< 0u, Arr64< Hash< "Author1216">() >(),  "Title953" >  >() },
    { 2318u, RevList< Rev< 0u, Arr64< Hash< "Author198">() >(),  "Title167" > , Rev< 1u, Arr64< Hash< "Author2013">() >(),  "Title1553" >  >() },
    { 2319u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Prevent path presentation problems" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Prevent path presentation problems" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Prevent path presentation problems" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Prevent path presentation problems" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Prevent path presentation problems" >  >() },
    { 2320u, RevList< Rev< 0u, Arr64< Hash< "Author955">() >(),  "The Syntax of Static Reflection" >  >() },
    { 2321u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "zip" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "zip" > , Rev< 2u, Arr64< Hash< "Tim Song">() >(),  "zip" >  >() },
    { 2322u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "`ranges::fold`" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "`ranges::fold`" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "`ranges::fold`" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "`ranges::fold`" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "ranges::fold" > , Rev< 5u, Arr64< Hash< "Barry Revzin">() >(),  "ranges::fold" > , Rev< 6u, Arr64< Hash< "Barry Revzin">() >(),  "ranges::fold" >  >() },
    { 2323u, RevList< Rev< 0u, Arr64< Hash< "Martin Uecker">() >(),  "Title1121" >  >() },
    { 2324u, RevList< Rev< 0u, Arr64< Hash< "Martin Uecker">() >(),  "Title150" > , Rev< 1u, Arr64< Hash< "Martin Uecker">() >(),  "Title293" > , Rev< 2u, Arr64< Hash< "Martin Uecker">() >(),  "Title964" >  >() },
    { 2325u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Views should not be required to be default constructible" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Views should not be required to be default constructible" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Views should not be required to be default constructible" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Views should not be required to be default constructible" >  >() },
    { 2327u, RevList< Rev< 0u, Arr64< Hash< "Paul M">() >(),  "Title771" > , Rev< 1u, Arr64< Hash< "Paul M">() >(),  "Title240" >  >() },
    { 2328u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "join_view should join all views of ranges" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "join_view should join all views of ranges" >  >() },
    { 2329u, RevList< Rev< 0u, Arr64< Hash< "Author564">() >(),  "Title457" >  >() },
    { 2330u, RevList< Rev< 0u, Arr64< Hash< "Author1882">() >(),  "Title1459" >  >() },
    { 2331u, RevList< Rev< 0u, Arr64< Hash< "Author26">() >(),  "Title20" >  >() },
    { 2332u, RevList< Rev< 0u, Arr64< Hash< "Matthew Bentley">() >(),  "Establishing std::hive as replacement name for the proposed std::colony container" >  >() },
    { 2333u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Winter Library Evolution Poll Outcomes" >  >() },
    { 2334u, RevList< Rev< 0u, Arr64< Hash< "Melanie Blower">() >(),  "Title1606" > , Rev< 1u, Arr64< Hash< "Melanie Blower">() >(),  "Title490" >  >() },
    { 2337u, RevList< Rev< 0u, Arr64< Hash< "Author1623">() >(),  "Title1257" >  >() },
    { 2338u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Character primitives and the C library" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Character primitives and the C library" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Character primitives and the C library" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Character primitives and the C library" > , Rev< 4u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: Character primitives and the C library" >  >() },
    { 2339u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract violation handlers" >  >() },
    { 2340u, RevList< Rev< 0u, Arr64< Hash< "Author616">() >(),  "Clarifying the status of the C headers" > , Rev< 1u, Arr64< Hash< "Author1061">() >(),  "Clarifying the status of the C headers" >  >() },
    { 2342u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title71" >  >() },
    { 2345u, RevList< Rev< 0u, Arr64< Hash< "Sean Parent">() >(),  "Relaxing Requirements of Moved-From Objects" >  >() },
    { 2347u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1146" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title362" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1201" >  >() },
    { 2348u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title37" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title516" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title913" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title45" >  >() },
    { 2350u, RevList< Rev< 0u, Arr64< Hash< "Author71">() >(),  "constexpr class" > , Rev< 1u, Arr64< Hash< "Author318">() >(),  "constexpr class" > , Rev< 2u, Arr64< Hash< "Author1369">() >(),  "constexpr class" >  >() },
    { 2351u, RevList< Rev< 0u, Arr64< Hash< "hana.dusikova@avast.com">() >(),  "nodiscard casts" >  >() },
    { 2352u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2020-12-09 through 2021-03-24" >  >() },
    { 2353u, RevList< Rev< 0u, Arr64< Hash< "David Rector">() >(),  "Title814" >  >() },
    { 2355u, RevList< Rev< 0u, Arr64< Hash< "Author87">() >(),  "Postfix fold expressions" > , Rev< 1u, Arr64< Hash< "Author903">() >(),  "Postfix fold expressions" > , Rev< 2u, Arr64< Hash< "Author730">() >(),  "Postfix fold expressions" >  >() },
    { 2356u, RevList< Rev< 0u, Arr64< Hash< "Author1870">() >(),  "Title1449" >  >() },
    { 2358u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Defining Contracts" >  >() },
    { 2360u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Extend init-statement to allow alias-declaration" >  >() },
    { 2361u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title688" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1078" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1480" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title349" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title609" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title188" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1653" >  >() },
    { 2362u, RevList< Rev< 0u, Arr64< Hash< "Author644">() >(),  "Title523" > , Rev< 1u, Arr64< Hash< "Author159">() >(),  "Title136" > , Rev< 2u, Arr64< Hash< "Author207">() >(),  "Title171" > , Rev< 3u, Arr64< Hash< "Author1935">() >(),  "Title1495" >  >() },
    { 2363u, RevList< Rev< 0u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" > , Rev< 1u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" > , Rev< 2u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" > , Rev< 3u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" > , Rev< 4u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" > , Rev< 5u, Arr64< Hash< "Konstantin Boyarinov">() >(),  "Extending associative containers with the remaining heterogeneous overloads" >  >() },
    { 2367u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Remove misuses of list-initialization from Clause 24" >  >() },
    { 2368u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Spring Library Evolution Polls" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Spring Library Evolution Polls" >  >() },
    { 2370u, RevList< Rev< 0u, Arr64< Hash< "Author2086">() >(),  "Stacktrace from exception" > , Rev< 1u, Arr64< Hash< "Author16">() >(),  "Stacktrace from exception" > , Rev< 2u, Arr64< Hash< "Author2220">() >(),  "Stacktrace from exception" >  >() },
    { 2372u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Fixing locale handling in chrono formatters" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Fixing locale handling in chrono formatters" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Fixing locale handling in chrono formatters" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Fixing locale handling in chrono formatters" >  >() },
    { 2374u, RevList< Rev< 0u, Arr64< Hash< "Sy Brand">() >(),  "XXXXR0: views::cartesian_product" > , Rev< 1u, Arr64< Hash< "Sy Brand">() >(),  "views::cartesian_product" > , Rev< 2u, Arr64< Hash< "Sy Brand">() >(),  "views::cartesian_product" > , Rev< 3u, Arr64< Hash< "Sy Brand">() >(),  "`views::cartesian_product`" > , Rev< 4u, Arr64< Hash< "Sy Brand">() >(),  "`views::cartesian_product`" >  >() },
    { 2375u, RevList< Rev< 0u, Arr64< Hash< "Author383">() >(),  "Title328" > , Rev< 1u, Arr64< Hash< "Author631">() >(),  "Title512" >  >() },
    { 2376u, RevList< Rev< 0u, Arr64< Hash< "Author462">() >(),  "Title388" >  >() },
    { 2377u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "[[nodiscard]] in the Standard Library: Clause 23 Iterators library" >  >() },
    { 2378u, RevList< Rev< 0u, Arr64< Hash< "Author211">() >(),  "Title175" > , Rev< 1u, Arr64< Hash< "Author690">() >(),  "Title556" >  >() },
    { 2380u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Paper" > , Rev< 1u, Arr64< Hash< "Robert Leahy">() >(),  "Paper R1" >  >() },
    { 2381u, RevList< Rev< 0u, Arr64< Hash< "Jarrad J">() >(),  "Pattern Matching with Exception Handling" >  >() },
    { 2382u, RevList< Rev< 0u, Arr64< Hash< "Author214">() >(),  "Bright Blue" >  >() },
    { 2384u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Spring Library Evolution Poll Outcomes" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Spring Library Evolution Poll Outcomes" >  >() },
    { 2385u, RevList< Rev< 0u, Arr64< Hash< "Author2010">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, June 2021" >  >() },
    { 2386u, RevList< Rev< 0u, Arr64< Hash< "Author1352">() >(),  "Core \"ready\" Issues" >  >() },
    { 2387u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Pipe support for user-defined range adaptors" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Pipe support for user-defined range adaptors" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Pipe support for user-defined range adaptors" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Pipe support for user-defined range adaptors" >  >() },
    { 2388u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Abort-only contract support" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Minimum Contract Support: either Ignore or Check_and_abort" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Minimum Contract Support: either Ignore or Check_and_abort" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Minimum Contract Support: either No_eval or Eval_and_abort" > , Rev< 4u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Minimum Contract Support: either No_eval or Eval_and_abort" >  >() },
    { 2389u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "dextents Index Type Parameter" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "dextents Index Type Parameter" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "dextents Index Type Parameter" >  >() },
    { 2390u, RevList< Rev< 0u, Arr64< Hash< "Author1914">() >(),  "Title1478" > , Rev< 1u, Arr64< Hash< "Author1049">() >(),  "Title842" > , Rev< 2u, Arr64< Hash< "Author208">() >(),  "Title173" >  >() },
    { 2391u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title1541" >  >() },
    { 2392u, RevList< Rev< 0u, Arr64< Hash< "structure_map">() >(),  "Title234" > , Rev< 1u, Arr64< Hash< "structure_map">() >(),  "Title1256" > , Rev< 2u, Arr64< Hash< "structure_map">() >(),  "Title744" > , Rev< 3u, Arr64< Hash< "structure_map">() >(),  "Title1091" >  >() },
    { 2393u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Cleaning up integer-class types" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Cleaning up integer-class types" >  >() },
    { 2395u, RevList< Rev< 0u, Arr64< Hash< "Author1929">() >(),  "WG21 2021-06 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2396u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "Concurrency TS 2 fixes" > , Rev< 1u, Arr64< Hash< "David Goldblatt">() >(),  "P2396R1" >  >() },
    { 2397u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2021-04-14 through 2021-05-26" >  >() },
    { 2400u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Library Evolution Report: 2020-10-27 to 2021-02-16" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "Library Evolution Report: 2021-02-23 to 2021-05-25" > , Rev< 2u, Arr64< Hash< "Bryce Adelstein">() >(),  "Library Evolution Report: 2021-06-01 to 2021-09-20" > , Rev< 3u, Arr64< Hash< "Bryce Adelstein">() >(),  "Library Evolution Report: 2021-09-28 to 2022-01-25" >  >() },
    { 2401u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Add a conditional noexcept specification to std::exchange" >  >() },
    { 2402u, RevList< Rev< 0u, Arr64< Hash< "Author432">() >(),  "PowerPoint Presentation" >  >() },
    { 2403u, RevList< Rev< 0u, Arr64< Hash< "Author1676">() >(),  "Slide 1" >  >() },
    { 2404u, RevList< Rev< 0u, Arr64< Hash< "Justin Bassett">() >(),  "Title382" > , Rev< 1u, Arr64< Hash< "Justin Bassett">() >(),  "Title1218" > , Rev< 2u, Arr64< Hash< "Justin Bassett">() >(),  "Title1238" > , Rev< 3u, Arr64< Hash< "Justin Bassett">() >(),  "Title124" >  >() },
    { 2405u, RevList< Rev< 0u, Arr64< Hash< "Justin Bassett">() >(),  "Title46" >  >() },
    { 2406u, RevList< Rev< 0u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Fix `counted_iterator` interaction with input iterators" > , Rev< 1u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Fix `counted_iterator` interaction with input iterators" > , Rev< 2u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Add `lazy_counted_iterator`" > , Rev< 3u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Add `lazy_counted_iterator`" > , Rev< 4u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Add `lazy_counted_iterator`" > , Rev< 5u, Arr64< Hash< "Yehezkel Bernat">() >(),  "Add `lazy_counted_iterator`" >  >() },
    { 2407u, RevList< Rev< 0u, Arr64< Hash< "Emil Meissner">() >(),  "Freestanding Library: Partial Classes" > , Rev< 1u, Arr64< Hash< "Emil Meissner">() >(),  "Freestanding Library: Partial Classes" > , Rev< 2u, Arr64< Hash< "\xE2\x80\x83\xE2\x80\x83Emil Meissner">() >(),  "Freestanding Library: Partial Classes" > , Rev< 3u, Arr64< Hash< "\xE2\x80\x83\xE2\x80\x83Ben Craig">() >(),  "Freestanding Library: Partial Classes" > , Rev< 4u, Arr64< Hash< "\xE2\x80\x83\xE2\x80\x83Ben Craig">() >(),  "Freestanding Library: Partial Classes" > , Rev< 5u, Arr64< Hash< "\xE2\x80\x83\xE2\x80\x83Ben Craig">() >(),  "Freestanding Library: Partial Classes" >  >() },
    { 2408u, RevList< Rev< 0u, Arr64< Hash< "David Olsen">() >(),  "Ranges views as inputs to non-Ranges algorithms" > , Rev< 1u, Arr64< Hash< "David Olsen">() >(),  "Ranges views as inputs to non-Ranges algorithms" > , Rev< 2u, Arr64< Hash< "David Olsen">() >(),  "Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 3u, Arr64< Hash< "David Olsen">() >(),  "Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 4u, Arr64< Hash< "David Olsen">() >(),  "Ranges iterators as inputs to non-Ranges algorithms" > , Rev< 5u, Arr64< Hash< "David Olsen">() >(),  "Ranges iterators as inputs to non-Ranges algorithms" >  >() },
    { 2409u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Requirements for Usage of C++ Modules at Bloomberg" >  >() },
    { 2410u, RevList< Rev< 0u, Arr64< Hash< "Author1782">() >(),  "Title1384" >  >() },
    { 2411u, RevList< Rev< 0u, Arr64< Hash< "Author856">() >(),  "Title681" >  >() },
    { 2412u, RevList< Rev< 0u, Arr64< Hash< "Author1536">() >(),  "Title1191" >  >() },
    { 2413u, RevList< Rev< 0u, Arr64< Hash< "L\xC3\xA9n\xC3\xA1rd Szolnoki">() >(),  "Remove unsafe conversions of unique_ptr<T>" > , Rev< 1u, Arr64< Hash< "L\xC3\xA9n\xC3\xA1rd Szolnoki">() >(),  "Remove unsafe conversions of unique_ptr<T>" >  >() },
    { 2414u, RevList< Rev< 0u, Arr64< Hash< "Paul E">() >(),  "P2414R0 Pointer lifetime-end zap proposed solutions" > , Rev< 1u, Arr64< Hash< "Paul E">() >(),  "P2414R1 Pointer lifetime-end zap proposed solutions" > , Rev< 2u, Arr64< Hash< "Paul E">() >(),  "P2414R2 Pointer lifetime-end zap proposed solutions" > , Rev< 3u, Arr64< Hash< "Paul E">() >(),  "P2414R3 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 4u, Arr64< Hash< "Paul E">() >(),  "P2414R4 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 5u, Arr64< Hash< "Paul E">() >(),  "P2414R5 Pointer lifetime-end zap proposed solutions: atomics and volatile" > , Rev< 6u, Arr64< Hash< "Paul E">() >(),  "P2414R6 Pointer lifetime-end zap proposed solutions: atomics and volatile" >  >() },
    { 2415u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "What is a `view`?" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "What is a `view`?" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "What is a view?" >  >() },
    { 2416u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Title1559" > , Rev< 1u, Arr64< Hash< "Jens Maurer">() >(),  "Title871" > , Rev< 2u, Arr64< Hash< "Jens Maurer">() >(),  "Title1659" >  >() },
    { 2417u, RevList< Rev< 0u, Arr64< Hash< "Author1877">() >(),  "Title1453" > , Rev< 1u, Arr64< Hash< "Author221">() >(),  "Title180" > , Rev< 2u, Arr64< Hash< "Author1757">() >(),  "Title1363" >  >() },
    { 2418u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Add support for <code>std::generator</code>-like types to <code>std::format</code>" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Add support for <code>std::generator</code>-like types to <code>std::format</code>" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Add support for <code>std::generator</code>-like types to <code>std::format</code>" >  >() },
    { 2419u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Clarify handling of encodings in localized formatting of chrono types" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Clarify handling of encodings in localized formatting of chrono types" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Clarify handling of encodings in localized formatting of chrono types" >  >() },
    { 2420u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Summer Library Evolution Polls" >  >() },
    { 2422u, RevList< Rev< 0u, Arr64< Hash< "Author203">() >(),  "Remove nodiscard annotations from the standard library specification" > , Rev< 1u, Arr64< Hash< "Author1831">() >(),  "Remove nodiscard annotations from the standard library specification" >  >() },
    { 2423u, RevList< Rev< 0u, Arr64< Hash< "Author1672">() >(),  "C++ Liaison CFP C Summary" >  >() },
    { 2424u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Abbreviated Parameters" >  >() },
    { 2425u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Expression Function Body" >  >() },
    { 2428u, RevList< Rev< 0u, Arr64< Hash< "Author2032">() >(),  "Title1570" >  >() },
    { 2429u, RevList< Rev< 0u, Arr64< Hash< "Author1503">() >(),  "Title1168" >  >() },
    { 2430u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "SenderReceiverPartial" >  >() },
    { 2431u, RevList< Rev< 0u, Arr64< Hash< "Author1258">() >(),  "Slide 1" >  >() },
    { 2432u, RevList< Rev< 0u, Arr64< Hash< "Author375">() >(),  "P2432R0" > , Rev< 1u, Arr64< Hash< "Author1635">() >(),  "Fix istream_view, Rev 1" >  >() },
    { 2434u, RevList< Rev< 0u, Arr64< Hash< "Author589">() >(),  "Nondeterministic pointer provenance" > , Rev< 1u, Arr64< Hash< "Author1106">() >(),  "Nondeterministic pointer provenance" > , Rev< 2u, Arr64< Hash< "Author1041">() >(),  "Nondeterministic pointer provenance" > , Rev< 3u, Arr64< Hash< "Author1738">() >(),  "Nondeterministic pointer provenance" >  >() },
    { 2435u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Summer Library Evolution Poll Outcomes" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 Summer Library Evolution Poll Outcomes" >  >() },
    { 2436u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 September Library Evolution Polls" >  >() },
    { 2437u, RevList< Rev< 0u, Arr64< Hash< "Aaron Ballman">() >(),  "Title705" > , Rev< 1u, Arr64< Hash< "Aaron Ballman">() >(),  "Title829" >  >() },
    { 2438u, RevList< Rev< 0u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::string::substr() &&" > , Rev< 1u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::string::substr() &&" > , Rev< 2u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::string::substr() &&" >  >() },
    { 2439u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "What is a view?" >  >() },
    { 2440u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "ranges::iota, ranges::shift_left, and ranges::shift_right" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "ranges::iota, ranges::shift_left, and ranges::shift_right" >  >() },
    { 2441u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "views::join_with" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "views::join_with" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "views::join_with" >  >() },
    { 2442u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Windowing range adaptors: views::chunk and views::slide" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Windowing range adaptors: views::chunk and views::slide" >  >() },
    { 2443u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "views::chunk_by" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "views::chunk_by" >  >() },
    { 2444u, RevList< Rev< 0u, Arr64< Hash< "Author2052">() >(),  "TheAsioAsyncModel" >  >() },
    { 2445u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "std::forward_like" > , Rev< 1u, Arr64< Hash< "Gaaper A~man">() >(),  "std::forward_like" >  >() },
    { 2446u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "views::move" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "views::all_move" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "views::as_rvalue" >  >() },
    { 2447u, RevList< Rev< 0u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::span and the missing constructor" > , Rev< 1u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::span and the missing constructor" > , Rev< 2u, Arr64< Hash< "federico.kircheis@gmail.com">() >(),  "std::span and the missing constructor" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "<code>std::span</code> over an initializer list" > , Rev< 4u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "<code>std::span</code> over an initializer list" > , Rev< 5u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "<code>std::span</code> over an initializer list" > , Rev< 6u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "<code>std::span</code> over an initializer list" >  >() },
    { 2448u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Relaxing some constexpr restrictions" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Relaxing some constexpr restrictions" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Relaxing some constexpr restrictions" >  >() },
    { 2450u, RevList< Rev< 0u, Arr64< Hash< "Author1357">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021" >  >() },
    { 2451u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 September Library Evolution Poll Outcomes" >  >() },
    { 2452u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 October Library Evolution and Concurrency Polls on Networking and Executors" >  >() },
    { 2453u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 October Library Evolution and Concurrency Networking and Executors Poll Outcomes" >  >() },
    { 2454u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 November Library Evolution Polls" >  >() },
    { 2455u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 November Library Evolution Poll Outcomes" >  >() },
    { 2456u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 December Library Evolution Polls" >  >() },
    { 2457u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2021 December Library Evolution Poll Outcomes" >  >() },
    { 2458u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022 January Library Evolution Polls" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022 January Library Evolution Polls" >  >() },
    { 2459u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022 January Library Evolution Poll Outcomes" >  >() },
    { 2460u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title165" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1508" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1" >  >() },
    { 2461u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Closure-Based Syntax for Contracts" > , Rev< 1u, Arr64< Hash< "Gaaper A~man">() >(),  "Closure-Based Syntax for Contracts" >  >() },
    { 2462u, RevList< Rev< 0u, Arr64< Hash< "Author114">() >(),  "Core \"ready\" Issues" >  >() },
    { 2463u, RevList< Rev< 0u, Arr64< Hash< "Christopher Kohlhoff">() >(),  "AsioAsyncModel" >  >() },
    { 2464u, RevList< Rev< 0u, Arr64< Hash< "Author813">() >(),  "Ruminations on networking and executors" >  >() },
    { 2465u, RevList< Rev< 0u, Arr64< Hash< "Author572">() >(),  "Title463" > , Rev< 1u, Arr64< Hash< "Author64">() >(),  "Title68" > , Rev< 2u, Arr64< Hash< "Author239">() >(),  "Title199" > , Rev< 3u, Arr64< Hash< "Author185">() >(),  "Title159" >  >() },
    { 2466u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "The notes on contract annotations" >  >() },
    { 2467u, RevList< Rev< 0u, Arr64< Hash< "Author216">() >(),  "Support exclusive mode for fstreams" > , Rev< 1u, Arr64< Hash< "Author2073">() >(),  "Support exclusive mode for fstreams" >  >() },
    { 2468u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "The Equality Operator You Are Looking For" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "P2468R1R1: The Equality Operator You Are Looking For" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "The Equality Operator You Are Looking For" >  >() },
    { 2469u, RevList< Rev< 0u, Arr64< Hash< "Jamie Allsop">() >(),  "Response to P2464" >  >() },
    { 2470u, RevList< Rev< 0u, Arr64< Hash< "Author685">() >(),  "Slide 1" >  >() },
    { 2471u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "NetTS, ASIO and Sender Library Design Comparison" > , Rev< 1u, Arr64< Hash< "Kirk Shoop">() >(),  "NetTS, ASIO and Sender Library Design Comparison" >  >() },
    { 2472u, RevList< Rev< 0u, Arr64< Hash< "Jarrad J">() >(),  "make_function_ref: A More Functional function_ref" > , Rev< 1u, Arr64< Hash< "Author941">() >(),  "make_function_ref_more_functional" > , Rev< 2u, Arr64< Hash< "Author342">() >(),  "make_function_ref_more_functional" > , Rev< 3u, Arr64< Hash< "Author1783">() >(),  "make function_ref more functional - HackMD" >  >() },
    { 2473u, RevList< Rev< 0u, Arr64< Hash< "Daniel">() >(),  "Title1084" > , Rev< 1u, Arr64< Hash< "Daniel Ruoso">() >(),  "Distributing C++ Module Libraries" >  >() },
    { 2474u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`views::repeat`" > , Rev< 1u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`views::repeat`" > , Rev< 2u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "`views::repeat`" >  >() },
    { 2475u, RevList< Rev< 0u, Arr64< Hash< "Author675">() >(),  "WG21 2021-10 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2477u, RevList< Rev< 0u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow programmer to control and detect coroutine elision by static constexpr bool should_elide() and coroutine_handle::elided()" > , Rev< 1u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow programmer to control and detect coroutine elision by static constexpr bool must_elide() and coroutine_handle::elided()" > , Rev< 2u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow programmer to control and detect coroutine elision" > , Rev< 3u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow programmers to control coroutine elision" >  >() },
    { 2478u, RevList< Rev< 0u, Arr64< Hash< "Hubert S.K">() >(),  "_Thread_local for better C++ interoperability with C" >  >() },
    { 2479u, RevList< Rev< 0u, Arr64< Hash< "Author41">() >(),  "Title36" >  >() },
    { 2480u, RevList< Rev< 0u, Arr64< Hash< "Jamie Allsop">() >(),  "Response to P2471" >  >() },
    { 2481u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Forwarding reference to specific type/template" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Forwarding reference to specific type/template" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Forwarding reference to specific type/template" >  >() },
    { 2483u, RevList< Rev< 0u, Arr64< Hash< "Hui Xie">() >(),  "Support Non-copyable Types for `single_view`" >  >() },
    { 2484u, RevList< Rev< 0u, Arr64< Hash< "Richard Smith">() >(),  "Extending support for class types as non-type template parameters" >  >() },
    { 2485u, RevList< Rev< 0u, Arr64< Hash< "Author1214">() >(),  "Do not add value_exists and value_or to C++23" >  >() },
    { 2486u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "Structured naming for function object and CPO values" > , Rev< 1u, Arr64< Hash< "Kirk Shoop">() >(),  "Structured naming for function object and CPO values" >  >() },
    { 2487u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Attribute-like syntax for contract annotations" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Is attribute-like syntax adequate for contract annotations?" >  >() },
    { 2489u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Library Evolution Plan for Completing C++23" >  >() },
    { 2490u, RevList< Rev< 0u, Arr64< Hash< "Ed Catmur">() >(),  "Zero-overhead exception stacktraces" > , Rev< 3u, Arr64< Hash< "Ed Catmur">() >(),  "Zero-overhead exception stacktraces" >  >() },
    { 2491u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Text encodings follow-up" >  >() },
    { 2492u, RevList< Rev< 0u, Arr64< Hash< "Author976">() >(),  "Attending C++ Standards Committee Meetings During a Pandemic" >  >() },
    { 2493u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Missing feature test macros for C++20 core papers" >  >() },
    { 2494u, RevList< Rev< 0u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Relaxing range adaptors to allow for move only types" > , Rev< 1u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Relaxing range adaptors to allow for move only types" > , Rev< 2u, Arr64< Hash< "Micha\xC5\x82 Dominiak">() >(),  "Relaxing range adaptors to allow for move only types" >  >() },
    { 2495u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "Title1669" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "Title366" > , Rev< 2u, Arr64< Hash< "Michael Florian">() >(),  "Title1485" > , Rev< 3u, Arr64< Hash< "Michael Florian">() >(),  "Title1137" >  >() },
    { 2497u, RevList< Rev< 0u, Arr64< Hash< "Author109">() >(),  "Testing for success or failure of <charconv> functions" >  >() },
    { 2498u, RevList< Rev< 0u, Arr64< Hash< "Author1367">() >(),  "Title1060" > , Rev< 1u, Arr64< Hash< "Author1976">() >(),  "Title1536" >  >() },
    { 2499u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "`string_view` range constructor should be `explicit`" >  >() },
    { 2500u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++17 parallel algorithms and P2300" > , Rev< 1u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel algorithms and P2300" > , Rev< 2u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel algorithms and P2300" >  >() },
    { 2501u, RevList< Rev< 0u, Arr64< Hash< "Author65">() >(),  "Undo the rename of views::move and views::as_const" >  >() },
    { 2502u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "Title725" > , Rev< 1u, Arr64< Hash< "Casey Carter">() >(),  "Title1163" > , Rev< 2u, Arr64< Hash< "Casey Carter">() >(),  "Title3" >  >() },
    { 2504u, RevList< Rev< 0u, Arr64< Hash< "Lucian Radu">() >(),  "Computations as a global solution to concurrency" >  >() },
    { 2505u, RevList< Rev< 0u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R0 Monadic Functions for <code>std::expected</code>" > , Rev< 1u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R1 Monadic Functions for <code>std::expected</code>" > , Rev< 2u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R2 Monadic Functions for <code>std::expected</code>" > , Rev< 3u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R3 Monadic Functions for <code>std::expected</code>" > , Rev< 4u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R4 Monadic Functions for <code>std::expected</code>" > , Rev< 5u, Arr64< Hash< "Jeff Garland">() >(),  "P2505R5 Monadic Functions for <code>std::expected</code>" >  >() },
    { 2506u, RevList< Rev< 0u, Arr64< Hash< "Casey Carter">() >(),  "P2506" >  >() },
    { 2507u, RevList< Rev< 0u, Arr64< Hash< "Author438">() >(),  "Title371" > , Rev< 1u, Arr64< Hash< "Author1265">() >(),  "Title978" >  >() },
    { 2508u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Expose std::$basic-format-string$<charT, Args...>" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Expose std::$basic-format-string$<charT, Args...>" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Expose std::$basic-format-string$<charT, Args...>" >  >() },
    { 2509u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "A proposal for a type trait to detect value-preserving conversions" >  >() },
    { 2510u, RevList< Rev< 0u, Arr64< Hash< "Mark de">() >(),  "Title531" > , Rev< 1u, Arr64< Hash< "Mark de">() >(),  "Title1677" > , Rev< 2u, Arr64< Hash< "Mark de">() >(),  "Title336" > , Rev< 3u, Arr64< Hash< "Mark de">() >(),  "Title1615" >  >() },
    { 2511u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "Beyond operator(): NTTP callables in type-erased call wrappers - HackMD" >  >() },
    { 2512u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2021-06-09 through 2021-12-15" >  >() },
    { 2513u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "char8_t Compatibility and Portability Fixes" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "char8_t Compatibility and Portability Fix" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "char8_t Compatibility and Portability Fix" > , Rev< 3u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "D2513R3: char8_t Compatibility and Portability Fix" > , Rev< 4u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "char8_t Compatibility and Portability Fix" >  >() },
    { 2514u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "std::breakpoint" >  >() },
    { 2515u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "std::is_debugger_present" >  >() },
    { 2516u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "<code>string_view</code> is implicitly convertible from what?" >  >() },
    { 2517u, RevList< Rev< 0u, Arr64< Hash< "Author1065">() >(),  "Add a conditional noexcept specification to std::apply" > , Rev< 1u, Arr64< Hash< "Author1377">() >(),  "Add a conditional noexcept specification to std::apply" >  >() },
    { 2520u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "move_iterator<T*> should be a random access iterator" >  >() },
    { 2521u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Working Paper" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Working Paper" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Working Paper" > , Rev< 3u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Record of SG21 consensus" > , Rev< 4u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Record of SG21 consensus" > , Rev< 5u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract support Record of SG21 consensus" >  >() },
    { 2523u, RevList< Rev< 0u, Arr64< Hash< "This was">() >(),  "Request for re-inclusion of std::hive proposal in C++23" >  >() },
    { 2524u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1102" >  >() },
    { 2525u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title848" >  >() },
    { 2527u, RevList< Rev< 0u, Arr64< Hash< "Alex Christensen">() >(),  "std::variant_alternative_index and std::variant_alternative_index_v" > , Rev< 1u, Arr64< Hash< "Alex Christensen">() >(),  "std::variant_alternative_index and std::tuple_element_index" > , Rev< 2u, Arr64< Hash< "Alex Christensen">() >(),  "std::variant_alternative_index and std::tuple_element_index" > , Rev< 3u, Arr64< Hash< "Alex Christensen">() >(),  "std::variant_alternative_index and std::tuple_element_index" >  >() },
    { 2528u, RevList< Rev< 0u, Arr64< Hash< "Reini Urban">() >(),  "P2528R0" >  >() },
    { 2529u, RevList< Rev< 0u, Arr64< Hash< "Mathias Stearn">() >(),  "generator<T> should have T&& reference_type" >  >() },
    { 2530u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Why Hazard Pointers Should be in C++26" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Why Hazard Pointers Should be in C++26" > , Rev< 2u, Arr64< Hash< "Maged M">() >(),  "Why Hazard Pointers Should be in C++26" > , Rev< 3u, Arr64< Hash< "Maged M">() >(),  "Why Hazard Pointers Should be in C++26" >  >() },
    { 2531u, RevList< Rev< 0u, Arr64< Hash< "Author1546">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2022" >  >() },
    { 2532u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Removing exception_ptr from the Receiver Concepts" >  >() },
    { 2533u, RevList< Rev< 0u, Arr64< Hash< "Author2065">() >(),  "Core \"ready\" Issues" >  >() },
    { 2534u, RevList< Rev< 0u, Arr64< Hash< "Author314">() >(),  "function_ref in the wild" >  >() },
    { 2535u, RevList< Rev< 0u, Arr64< Hash< "dlustig@nvidia.com, ogiroux@nvidia.com">() >(),  "Title458" >  >() },
    { 2536u, RevList< Rev< 0u, Arr64< Hash< "Olga Arkhipova">() >(),  "Microsoft Word - Distributing C++ Module Libraries with dependencies json files.docx" >  >() },
    { 2537u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Relax va_start Requirements to Match C" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Relax va_start Requirements to Match C" > , Rev< 2u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "Relax va_start Requirements to Match C" >  >() },
    { 2538u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "ADL-proof std::projected" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "ADL-proof std::projected" >  >() },
    { 2539u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Should the output of std::print to a terminal be synchronized with the underlying stream?" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Should the output of std::print to a terminal be synchronized with the underlying stream?" >  >() },
    { 2540u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Empty Product for certain Views" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Empty Product for certain Views" >  >() },
    { 2541u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Consider renaming remove_quals.docx" >  >() },
    { 2542u, RevList< Rev< 0u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 1u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 2u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 3u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 4u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 5u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 6u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 7u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" > , Rev< 8u, Arr64< Hash< "Hui Xie">() >(),  "`views::concat`" >  >() },
    { 2544u, RevList< Rev< 0u, Arr64< Hash< "Thomas Neumann">() >(),  "C++ exceptions are becoming more and more problematic" >  >() },
    { 2545u, RevList< Rev< 0u, Arr64< Hash< "Paul McKenney">() >(),  "Why RCU Should be in C++26" > , Rev< 1u, Arr64< Hash< "Paul McKenney">() >(),  "Why RCU Should be in C++26" > , Rev< 2u, Arr64< Hash< "Paul McKenney">() >(),  "Why RCU Should be in C++26" > , Rev< 3u, Arr64< Hash< "Paul McKenney">() >(),  "Why RCU Should be in C++26" > , Rev< 4u, Arr64< Hash< "Paul McKenney">() >(),  "Read-Copy Update (RCU)" >  >() },
    { 2546u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Debugging Support" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Debugging Support" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Debugging Support" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Debugging Support" > , Rev< 4u, Arr64< Hash< "1">() >(),  "Debugging Support" > , Rev< 5u, Arr64< Hash< "1">() >(),  "Debugging Support" >  >() },
    { 2547u, RevList< Rev< 0u, Arr64< Hash< "Author99">() >(),  "P2547R0 - Language support for customisable functions" > , Rev< 1u, Arr64< Hash< "Lewis Baker">() >(),  "Language Support for Customisable Functions" >  >() },
    { 2548u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "Title528" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "Title790" > , Rev< 2u, Arr64< Hash< "Michael Florian">() >(),  "Title1455" > , Rev< 3u, Arr64< Hash< "Michael Florian">() >(),  "Title48" > , Rev< 4u, Arr64< Hash< "Michael Florian">() >(),  "Title1315" > , Rev< 5u, Arr64< Hash< "Michael Florian">() >(),  "Title1026" > , Rev< 6u, Arr64< Hash< "Michael Florian">() >(),  "Title1034" >  >() },
    { 2549u, RevList< Rev< 0u, Arr64< Hash< "Yihe Li">() >(),  "std::unexpected<E> should have error() as member accessor" > , Rev< 1u, Arr64< Hash< "Yihe Li">() >(),  "std::unexpected<E> should have error() as member accessor" >  >() },
    { 2550u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "ranges::copy should say output_iterator somewhere" >  >() },
    { 2551u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Clarify intent of P1841 numeric traits [P2551R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Clarify intent of P1841 numeric traits [P2551R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Clarify intent of P1841 numeric traits [P2551R2]" >  >() },
    { 2552u, RevList< Rev< 0u, Arr64< Hash< "Author1169">() >(),  "Title925" > , Rev< 1u, Arr64< Hash< "Author733">() >(),  "Title590" > , Rev< 2u, Arr64< Hash< "Author483">() >(),  "Title403" > , Rev< 3u, Arr64< Hash< "Author538">() >(),  "Title436" >  >() },
    { 2553u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "Make mdspan size_type controllable" > , Rev< 1u, Arr64< Hash< "Christian Trott">() >(),  "Make mdspan size_type controllable" >  >() },
    { 2554u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "C-Array Interoperability of MDSpan" >  >() },
    { 2555u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "DxxxxR0: Naming improvements for std::execution" > , Rev< 1u, Arr64< Hash< "Jens Maurer">() >(),  "Naming improvements for std::execution" >  >() },
    { 2557u, RevList< Rev< 0u, Arr64< Hash< "Author1547">() >(),  "WG21 2022-02 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2558u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Add @, $, and ` to the basic character set" > , Rev< 1u, Arr64< Hash< "Steve Downey">() >(),  "Add @, $, and ` to the basic character set" > , Rev< 2u, Arr64< Hash< "Steve Downey">() >(),  "Add @, $, and ` to the basic character set" >  >() },
    { 2559u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "Plan for Concurrency Technical Specification Version 2" > , Rev< 1u, Arr64< Hash< "Bryce Adelstein">() >(),  "Plan for Concurrency Technical Specification Version 2" >  >() },
    { 2560u, RevList< Rev< 0u, Arr64< Hash< "Author633">() >(),  "Title515" >  >() },
    { 2561u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "operator??" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "An error propagation operator" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "A control flow operator" >  >() },
    { 2562u, RevList< Rev< 0u, Arr64< Hash< "Author1758">() >(),  "Title1364" > , Rev< 1u, Arr64< Hash< "Author220">() >(),  "Title179" >  >() },
    { 2564u, RevList< Rev< 0u, Arr64< Hash< "Barry \xE2\x80\x9CPatch\xE2\x80\x9D">() >(),  "consteval needs to propagate up" > , Rev< 1u, Arr64< Hash< "Barry \xE2\x80\x9CPatch\xE2\x80\x9D">() >(),  "consteval needs to propagate up" > , Rev< 2u, Arr64< Hash< "Barry \xE2\x80\x9CPatch\xE2\x80\x9D">() >(),  "consteval needs to propagate up" > , Rev< 3u, Arr64< Hash< "Barry \xE2\x80\x9CPatch\xE2\x80\x9D">() >(),  "consteval needs to propagate up" >  >() },
    { 2565u, RevList< Rev< 0u, Arr64< Hash< "Bret Brown">() >(),  "D2565R0_Supporting_User-Defined_Attributes" >  >() },
    { 2568u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "P2568R0 Proposal of std::map::at_ptr" >  >() },
    { 2569u, RevList< Rev< 0u, Arr64< Hash< "Author1114">() >(),  "N2797: *_HAS_SUBNORM==0 implies what?" >  >() },
    { 2570u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "On side effects in contract annotations" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract predicates that are not predicates" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract predicates that are not predicates" >  >() },
    { 2572u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639" > , Rev< 1u, Arr64< Hash< "Tom Honermann">() >(),  "std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639" >  >() },
    { 2573u, RevList< Rev< 0u, Arr64< Hash< "Yihe Li">() >(),  "<code>= delete(\"should have a reason\");</code>" > , Rev< 1u, Arr64< Hash< "Yihe Li">() >(),  "= delete(\"should have a reason\");" > , Rev< 2u, Arr64< Hash< "Yihe Li">() >(),  "= delete(\"should have a reason\");" >  >() },
    { 2574u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-05 Library Evolution Polls" >  >() },
    { 2575u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-05 Library Evolution Poll Outcomes" >  >() },
    { 2576u, RevList< Rev< 0u, Arr64< Hash< "Author446">() >(),  "The constexpr specifier for object definitions" >  >() },
    { 2577u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Discovering C++ modules in pre-built library releases" > , Rev< 1u, Arr64< Hash< "Daniel Ruoso">() >(),  "Discovering C++ modules in pre-built library releases" > , Rev< 2u, Arr64< Hash< "Daniel Ruoso">() >(),  "Discovering C++ modules in pre-built library releases" >  >() },
    { 2579u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1599" >  >() },
    { 2580u, RevList< Rev< 0u, Arr64< Hash< "Paolo Di">() >(),  "Tuple protocol for C-style arrays T[N]" >  >() },
    { 2581u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Specifying the Interoperability of Binary Module Interface Files" > , Rev< 1u, Arr64< Hash< "Daniel Ruoso">() >(),  "Specifying the Interoperability of Built Module Interface Files" > , Rev< 2u, Arr64< Hash< "Daniel Ruoso">() >(),  "Specifying the Interoperability of Built Module Interface Files" >  >() },
    { 2582u, RevList< Rev< 0u, Arr64< Hash< "Author1543">() >(),  "Title1196" > , Rev< 1u, Arr64< Hash< "Author1047">() >(),  "Title841" >  >() },
    { 2584u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1211" >  >() },
    { 2585u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Improve default container formatting" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Improve default container formatting" >  >() },
    { 2586u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title931" >  >() },
    { 2587u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "<code>to_string</code> or not <code>to_string</code>" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "D2587R1: <code>to_string</code> or not <code>to_string</code>" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "<code>to_string</code> or not <code>to_string</code>" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "<code>to_string</code> or not <code>to_string</code>" >  >() },
    { 2588u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "barriers phase completion guarantees - HackMD" > , Rev< 1u, Arr64< Hash< "Gonzalo Brito">() >(),  "barriers phase completion guarantees" > , Rev< 2u, Arr64< Hash< "Gonzalo Brito">() >(),  "barriers phase completion guarantees" > , Rev< 3u, Arr64< Hash< "Gonzalo Brito">() >(),  "barriers phase completion guarantees - HackMD" >  >() },
    { 2589u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title1477" > , Rev< 1u, Arr64< Hash< "Nevin ">() >(),  "Title1633" >  >() },
    { 2590u, RevList< Rev< 0u, Arr64< Hash< "Author949">() >(),  "Title769" > , Rev< 1u, Arr64< Hash< "Author546">() >(),  "Title445" > , Rev< 2u, Arr64< Hash< "Author621">() >(),  "Title506" >  >() },
    { 2591u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" > , Rev< 2u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" > , Rev< 3u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" > , Rev< 4u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" > , Rev< 5u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Concatenation of strings and string views" >  >() },
    { 2592u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Hashing support for std::chrono value classes" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Hashing support for std::chrono value classes" > , Rev< 2u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Hashing support for std::chrono value classes" > , Rev< 3u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Hashing support for std::chrono value classes" >  >() },
    { 2593u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Allowing static_assert(false)" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Allowing static_assert(false)" >  >() },
    { 2594u, RevList< Rev< 0u, Arr64< Hash< "Author1638">() >(),  "Title1270" > , Rev< 1u, Arr64< Hash< "Author1060">() >(),  "Title852" >  >() },
    { 2596u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Improve std::hive::reshape" >  >() },
    { 2598u, RevList< Rev< 0u, Arr64< Hash< "Author1509">() >(),  "\"Changing scope for lambda trailing-return-type\" (P2036) should not be a DR" >  >() },
    { 2599u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title480" > , Rev< 1u, Arr64< Hash< "__ 1">() >(),  "Title1111" > , Rev< 2u, Arr64< Hash< "__ 1">() >(),  "Title1142" >  >() },
    { 2600u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "A minimal ADL restriction to avoid ill-formed template instantiation [P2600R0]" >  >() },
    { 2601u, RevList< Rev< 0u, Arr64< Hash< "Justin Cooke">() >(),  "Title1290" > , Rev< 1u, Arr64< Hash< "Justin Cooke">() >(),  "Title295" >  >() },
    { 2602u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Poison Pills are Too Toxic" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Poison Pills are Too Toxic" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Poison Pills are Too Toxic" >  >() },
    { 2603u, RevList< Rev< 0u, Arr64< Hash< "Author1419">() >(),  "member function pointer to function pointer - HackMD" > , Rev< 1u, Arr64< Hash< "Author1693">() >(),  "member function pointer to function pointer - HackMD" >  >() },
    { 2604u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "mdspan: rename pointer and contiguous" >  >() },
    { 2605u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2022-01-12 through 2022-06-08" >  >() },
    { 2607u, RevList< Rev< 0u, Arr64< Hash< "Author596">() >(),  "Title487" >  >() },
    { 2608u, RevList< Rev< 0u, Arr64< Hash< "Justin Cooke">() >(),  "Title961" >  >() },
    { 2609u, RevList< Rev< 0u, Arr64< Hash< "John Eivind">() >(),  "Relaxing Ranges Just A Smidge" > , Rev< 1u, Arr64< Hash< "John Eivind">() >(),  "Relaxing Ranges Just A Smidge" > , Rev< 2u, Arr64< Hash< "John Eivind">() >(),  "Relaxing Ranges Just A Smidge" > , Rev< 3u, Arr64< Hash< "John Eivind">() >(),  "Relaxing Ranges Just A Smidge" >  >() },
    { 2610u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-07 Library Evolution Polls" >  >() },
    { 2611u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-07 Library Evolution Poll Outcomes" >  >() },
    { 2613u, RevList< Rev< 0u, Arr64< Hash< "Yihe Li">() >(),  "Add the missing empty to mdspan" > , Rev< 1u, Arr64< Hash< "Yihe Li">() >(),  "Add the missing empty to mdspan" >  >() },
    { 2614u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Deprecate numeric_limits::has_denorm [P2614R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Deprecate numeric_limits::has_denorm [P2614R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Deprecate numeric_limits::has_denorm [P2614R2]" >  >() },
    { 2615u, RevList< Rev< 0u, Arr64< Hash< "Author1845">() >(),  "Meaningful exports" > , Rev< 1u, Arr64< Hash< "Author1126">() >(),  "Meaningful exports" >  >() },
    { 2616u, RevList< Rev< 0u, Arr64< Hash< "Author846">() >(),  "Making std::atomic notification/wait operations usable in more situations" > , Rev< 1u, Arr64< Hash< "Author893">() >(),  "Revision History" > , Rev< 2u, Arr64< Hash< "Author630">() >(),  "Making std::atomic notification/wait operations usable in more situations" > , Rev< 3u, Arr64< Hash< "Author62">() >(),  "Making std::atomic notification/wait operations usable in more situations" > , Rev< 4u, Arr64< Hash< "Author77">() >(),  "Making std::atomic notification/wait operations usable in more situations" >  >() },
    { 2617u, RevList< Rev< 0u, Arr64< Hash< "Jens Maurer">() >(),  "Responses to NB comments on DTS 12907 \"Extensions to C++ forTransactional Memory Version 2\"" >  >() },
    { 2618u, RevList< Rev< 0u, Arr64< Hash< "Author1010">() >(),  "C++ Standard Library Issues to be moved in Virtual Plenary, Jul. 2022" >  >() },
    { 2620u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1318" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1519" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1035" >  >() },
    { 2621u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1467" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title355" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1045" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title249" >  >() },
    { 2622u, RevList< Rev< 0u, Arr64< Hash< "Author1800">() >(),  "Core \"ready\" Issues" >  >() },
    { 2623u, RevList< Rev< 0u, Arr64< Hash< "Author1210">() >(),  "implicit constant initialization - HackMD" > , Rev< 1u, Arr64< Hash< "Author2173">() >(),  "implicit constant initialization - HackMD" > , Rev< 2u, Arr64< Hash< "Author1022">() >(),  "implicit constant initialization - HackMD" >  >() },
    { 2624u, RevList< Rev< 0u, Arr64< Hash< "Justin Cooke">() >(),  "Title220" >  >() },
    { 2625u, RevList< Rev< 0u, Arr64< Hash< "Author2154">() >(),  "Life without operator()" >  >() },
    { 2626u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1173" >  >() },
    { 2627u, RevList< Rev< 0u, Arr64< Hash< "Author1401">() >(),  "P2627 WG21 2022-07 Virtual Meeting Record of Discussion.docx" >  >() },
    { 2628u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "Extend barrier APIs with memory_order" >  >() },
    { 2629u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "barrier token-less split arrive/wait" >  >() },
    { 2630u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "Submdspan" > , Rev< 1u, Arr64< Hash< "Christian Trott">() >(),  "Submdspan" > , Rev< 2u, Arr64< Hash< "Christian Trott">() >(),  "Submdspan" > , Rev< 3u, Arr64< Hash< "Christian Trott">() >(),  "Submdspan" > , Rev< 4u, Arr64< Hash< "Christian Trott">() >(),  "Submdspan" >  >() },
    { 2631u, RevList< Rev< 0u, Arr64< Hash< "Author1438">() >(),  "Publish TS Library Fundamentals 3 Now!" >  >() },
    { 2632u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title792" >  >() },
    { 2633u, RevList< Rev< 0u, Arr64< Hash< "Justin Cooke">() >(),  "Title230" >  >() },
    { 2634u, RevList< Rev< 0u, Arr64< Hash< "Author447">() >(),  "Title376" >  >() },
    { 2635u, RevList< Rev< 0u, Arr64< Hash< "Author1803">() >(),  "Title1399" >  >() },
    { 2636u, RevList< Rev< 0u, Arr64< Hash< "Hannes Hauswedell">() >(),  "References to ranges should always be viewable" > , Rev< 1u, Arr64< Hash< "Hannes Hauswedell">() >(),  "References to ranges should always be viewable" > , Rev< 2u, Arr64< Hash< "Hannes Hauswedell">() >(),  "References to ranges should always be viewable" >  >() },
    { 2637u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Member visit and apply" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Member visit" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Member visit" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Member visit" >  >() },
    { 2638u, RevList< Rev< 0u, Arr64< Hash< "Author1842">() >(),  "Title1430" >  >() },
    { 2639u, RevList< Rev< 0u, Arr64< Hash< "Torben Thaysen">() >(),  "Title1158" >  >() },
    { 2640u, RevList< Rev< 0u, Arr64< Hash< "Author913">() >(),  "Modules: Inner-scope Namespace Entities: Exported or Not?" > , Rev< 1u, Arr64< Hash< "Author789">() >(),  "Modules: Inner-scope Namespace Entities: Exported or Not?" > , Rev< 2u, Arr64< Hash< "Author1772">() >(),  "Modules: Inner-scope Namespace Entities: Exported or Not?" >  >() },
    { 2641u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Checking if a union alternative is active" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Checking if a union alternative is active" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Checking if a union alternative is active" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Checking if a union alternative is active" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Checking if a union alternative is active" >  >() },
    { 2642u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Padded mdspan layouts" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Padded mdspan layouts" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "Padded mdspan layouts" > , Rev< 3u, Arr64< Hash< "Mark Hoemmen">() >(),  "Padded mdspan layouts" > , Rev< 4u, Arr64< Hash< "Christian Trott">() >(),  "Padded mdspan layouts" > , Rev< 5u, Arr64< Hash< "Christian Trott">() >(),  "Padded mdspan layouts" > , Rev< 6u, Arr64< Hash< "Christian Trott">() >(),  "Title1619" >  >() },
    { 2643u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "Improving C++ concurrency features" > , Rev< 1u, Arr64< Hash< "Gonzalo Brito">() >(),  "Improving C++ concurrency features" > , Rev< 2u, Arr64< Hash< "Gonzalo Brito">() >(),  "Improving C++ concurrency features" >  >() },
    { 2644u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Final Fix of Broken Range-based for Loop" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Final Fix of Broken Range-Based for Loop" >  >() },
    { 2645u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "path_view: a design that took a wrong turn" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "path_view: a design that took a wrong turn" >  >() },
    { 2646u, RevList< Rev< 0u, Arr64< Hash< "Parsa Amini">() >(),  "Title624" >  >() },
    { 2647u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Permitting static constexpr variables in constexpr functions" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Permitting static constexpr variables in constexpr functions" >  >() },
    { 2648u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-10 Library Evolution Polls" >  >() },
    { 2649u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-10 Library Evolution Poll Outcomes" >  >() },
    { 2650u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2022-11 Library Evolution Polls" >  >() },
    { 2652u, RevList< Rev< 0u, Arr64< Hash< "Author2009">() >(),  "Disallow user specialization of allocator_traits" > , Rev< 1u, Arr64< Hash< "Author190">() >(),  "Disallow User Specialization of allocator_traits" > , Rev< 2u, Arr64< Hash< "Author61">() >(),  "Disallow User Specialization of allocator_traits" >  >() },
    { 2653u, RevList< Rev< 0u, Arr64< Hash< "Author2048">() >(),  "Title1589" > , Rev< 1u, Arr64< Hash< "Author1881">() >(),  "Title1458" >  >() },
    { 2654u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Macros And Standard Library Modules" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Macros And Standard Library Modules" >  >() },
    { 2655u, RevList< Rev< 0u, Arr64< Hash< "Hui Xie">() >(),  "`common_reference_t` of `reference_wrapper` Should Be a Reference Type" > , Rev< 1u, Arr64< Hash< "Hui Xie">() >(),  "`common_reference_t` of `reference_wrapper` Should Be a Reference Type" > , Rev< 2u, Arr64< Hash< "Hui Xie">() >(),  "`common_reference_t` of `reference_wrapper` Should Be aReference Type" > , Rev< 3u, Arr64< Hash< "Hui Xie">() >(),  "`common_reference_t` of `reference_wrapper` Should Be aReference Type" >  >() },
    { 2656u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "C++ Ecosystem International Standard" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "C++ Ecosystem International Standard" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "C++ Ecosystem International Standard" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "C++ Ecosystem International Standard" > , Rev< 4u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: C++ Ecosystem International Standard" >  >() },
    { 2657u, RevList< Rev< 0u, Arr64< Hash< "Author101">() >(),  "C++ is the next C++ - HackMD" > , Rev< 1u, Arr64< Hash< "Author1">() >(),  "C++ is the next C++ - HackMD" >  >() },
    { 2658u, RevList< Rev< 0u, Arr64< Hash< "Author1042">() >(),  "temporary storage class specifiers - HackMD" > , Rev< 1u, Arr64< Hash< "Author1095">() >(),  "temporary storage class specifiers - HackMD" >  >() },
    { 2659u, RevList< Rev< 0u, Arr64< Hash< "Author1545">() >(),  "A Proposal to Publish a Technical Specification for Contracts" > , Rev< 1u, Arr64< Hash< "Author444">() >(),  "A Proposal to Publish a Technical Specificationfor Contracts" > , Rev< 2u, Arr64< Hash< "Author471">() >(),  "A Proposal to Publish a Technical Specificationfor Contracts" >  >() },
    { 2660u, RevList< Rev< 0u, Arr64< Hash< "Author909">() >(),  "C++ Information technology Extensions for contracts" >  >() },
    { 2661u, RevList< Rev< 0u, Arr64< Hash< "Author206">() >(),  "Miscellaneous amendments to the Contracts TS" >  >() },
    { 2662u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title933" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title113" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title235" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1450" >  >() },
    { 2663u, RevList< Rev< 0u, Arr64< Hash< "Author83">() >(),  "Title" > , Rev< 1u, Arr64< Hash< "Author107">() >(),  "Title" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" > , Rev< 3u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" > , Rev< 4u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" > , Rev< 5u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" > , Rev< 6u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" > , Rev< 7u, Arr64< Hash< "Daniel Towner">() >(),  "Interleaved complex values support in std::simd" >  >() },
    { 2664u, RevList< Rev< 0u, Arr64< Hash< "Author149">() >(),  "Title" > , Rev< 1u, Arr64< Hash< "Author1391">() >(),  "Title" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend std::simd with permutation API" > , Rev< 3u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend std::simd with permutation API" > , Rev< 4u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend std::simd with permutation API" > , Rev< 5u, Arr64< Hash< "Daniel Towner">() >(),  "Extend std::simd with permutation API" > , Rev< 6u, Arr64< Hash< "Daniel Towner">() >(),  "Extend std::simd with permutation API" > , Rev< 7u, Arr64< Hash< "Daniel Towner">() >(),  "Extend std::simd with permutation API" > , Rev< 8u, Arr64< Hash< "Daniel Towner">() >(),  "Extend std::simd with permutation API" > , Rev< 9u, Arr64< Hash< "Daniel Towner">() >(),  "Extend std::simd with permutation API" >  >() },
    { 2665u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Title364" >  >() },
    { 2666u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Title740" >  >() },
    { 2667u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Title1326" >  >() },
    { 2668u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Title485" >  >() },
    { 2669u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Title518" >  >() },
    { 2670u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Non-transient constexpr allocation" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Non-transient constexpr allocation" >  >() },
    { 2671u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Syntax Choices for Generalized Pack Declaration and Usage" >  >() },
    { 2672u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Exploring the Design Space for a Pipeline Operator" >  >() },
    { 2673u, RevList< Rev< 0u, Arr64< Hash< "Author713">() >(),  "Title575" >  >() },
    { 2674u, RevList< Rev< 0u, Arr64< Hash< "Author2057">() >(),  "Title1595" > , Rev< 1u, Arr64< Hash< "Author1480">() >(),  "Title1151" >  >() },
    { 2675u, RevList< Rev< 0u, Arr64< Hash< "Author1607">() >(),  "LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)" > , Rev< 1u, Arr64< Hash< "Author674">() >(),  "LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)" >  >() },
    { 2676u, RevList< Rev< 0u, Arr64< Hash< "Dave Abrahams">() >(),  "The Val Object Model" >  >() },
    { 2677u, RevList< Rev< 0u, Arr64< Hash< "Mike Spertus">() >(),  "Title701" > , Rev< 2u, Arr64< Hash< "Mike Spertus">() >(),  "Title957" >  >() },
    { 2678u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2022-06-22 through 2022-09-28" >  >() },
    { 2679u, RevList< Rev< 0u, Arr64< Hash< "Author1456">() >(),  "Title1135" > , Rev< 1u, Arr64< Hash< "Author135">() >(),  "Title116" > , Rev< 2u, Arr64< Hash< "Author1125">() >(),  "Title898" >  >() },
    { 2680u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title1248" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title870" >  >() },
    { 2681u, RevList< Rev< 0u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title1286" > , Rev< 1u, Arr64< Hash< "Richard Dosselmann">() >(),  "Title170" >  >() },
    { 2682u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title489" >  >() },
    { 2683u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title649" >  >() },
    { 2684u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1451" >  >() },
    { 2685u, RevList< Rev< 0u, Arr64< Hash< "Author1778">() >(),  "Language Support For Scoped Allocators" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Language Support For Scoped Objects" >  >() },
    { 2686u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title39" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title935" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title707" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1143" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1048" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title746" >  >() },
    { 2687u, RevList< Rev< 0u, Arr64< Hash< "Author1630">() >(),  "Title1263" >  >() },
    { 2688u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "Pattern Matching Discussion for Kona 2022" > , Rev< 1u, Arr64< Hash< "structure_map">() >(),  "Pattern Matching: Expression" > , Rev< 2u, Arr64< Hash< "structure_map">() >(),  "Pattern Matching: `match` Expression" > , Rev< 3u, Arr64< Hash< "structure_map">() >(),  "Pattern Matching: `match` Expression" > , Rev< 4u, Arr64< Hash< "structure_map">() >(),  "Pattern Matching: `match` Expression" > , Rev< 5u, Arr64< Hash< "structure_map">() >(),  "Pattern Matching: `match` Expression" >  >() },
    { 2689u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "atomic_accessor" > , Rev< 1u, Arr64< Hash< "Christian Trott">() >(),  "Atomic Refs Bounded to Memory Orderings & Atomic Accessors" > , Rev< 2u, Arr64< Hash< "Christian Trott">() >(),  "Atomic Refs Bound to Memory Orderings & Atomic Accessors" > , Rev< 3u, Arr64< Hash< "Christian Trott">() >(),  "Atomic Refs Bound to Memory Orderings & Atomic Accessors" >  >() },
    { 2690u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++17 parallel algorithms and P2300" > , Rev< 1u, Arr64< Hash< "Author1988">() >(),  "Corporate PowerPoint Template Use Intel Clear For All Text (General Employee Usage)" >  >() },
    { 2691u, RevList< Rev< 0u, Arr64< Hash< "Author284">() >(),  "Title236" >  >() },
    { 2692u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Generic Programming is just Programming" >  >() },
    { 2693u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1186" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title765" >  >() },
    { 2695u, RevList< Rev< 0u, Arr64< Hash< "Author160">() >(),  "A proposed plan for contracts in C++" > , Rev< 1u, Arr64< Hash< "Author580">() >(),  "A proposed plan for contracts in C++" >  >() },
    { 2696u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "Introduce Cpp17Swappable as additional convenience requirements" >  >() },
    { 2697u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "Title1305" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "Title1162" >  >() },
    { 2698u, RevList< Rev< 0u, Arr64< Hash< "Author2131">() >(),  "Title1644" >  >() },
    { 2700u, RevList< Rev< 0u, Arr64< Hash< "Author1893">() >(),  "Questions on P2680 Contracts for C++: Prioritizing Safety" > , Rev< 1u, Arr64< Hash< "Author431">() >(),  "Questions on P2680 Contracts for C++: Prioritizing Safety" >  >() },
    { 2701u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Translating Linker Input Files to Module Metadata Files" >  >() },
    { 2702u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Specifying Importable Headers" >  >() },
    { 2703u, RevList< Rev< 0u, Arr64< Hash< "Author1810">() >(),  "C++ Standard Library Issues to be moved in Kona" >  >() },
    { 2704u, RevList< Rev< 0u, Arr64< Hash< "Author560">() >(),  "C++ Standard Library Immediate Issues to be moved in Kona, Nov. 2022" >  >() },
    { 2705u, RevList< Rev< 0u, Arr64< Hash< "Author1359">() >(),  "C++ Library Fundamentals TS Issues to be moved in Kona" >  >() },
    { 2706u, RevList< Rev< 0u, Arr64< Hash< "Author857">() >(),  "Drafting for US 26-061" >  >() },
    { 2708u, RevList< Rev< 0u, Arr64< Hash< "Author1734">() >(),  "No Further Fundamentals TSes" > , Rev< 1u, Arr64< Hash< "Author501">() >(),  "No Further Fundamentals TSes" >  >() },
    { 2709u, RevList< Rev< 0u, Arr64< Hash< "Author80">() >(),  "Core \"ready\" Issues" >  >() },
    { 2710u, RevList< Rev< 0u, Arr64< Hash< "Author1876">() >(),  "Core \"NB\" Issues" >  >() },
    { 2711u, RevList< Rev< 0u, Arr64< Hash< "Author267">() >(),  "Making multi-param (and other converting) constructors of views explicit" > , Rev< 1u, Arr64< Hash< "Author731">() >(),  "Making multi-param constructors of views explicit" >  >() },
    { 2712u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title665" >  >() },
    { 2713u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Escaping improvements in std::format" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Escaping improvements in std::format" >  >() },
    { 2714u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Bind front and back to NTTP callables - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Bind front and back to NTTP callables - HackMD" >  >() },
    { 2717u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 4u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 5u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Tool Introspection" > , Rev< 6u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: Tool Introspection" >  >() },
    { 2718u, RevList< Rev< 0u, Arr64< Hash< "Nicolai Josuttis">() >(),  "D2718R0: Wording for P2644R1 Fix for Range-based for Loop" >  >() },
    { 2719u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Type-aware allocation and deallocation functions" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Type-aware allocation and deallocation functions" > , Rev< 2u, Arr64< Hash< "Louis Dionne">() >(),  "Type-aware allocation and deallocation functions" > , Rev< 3u, Arr64< Hash< "Louis Dionne">() >(),  "Type-aware allocation and deallocation functions" > , Rev< 4u, Arr64< Hash< "Louis Dionne">() >(),  "Type-aware allocation and deallocation functions" >  >() },
    { 2721u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "P2721R0" >  >() },
    { 2722u, RevList< Rev< 0u, Arr64< Hash< "Author14">() >(),  "Beyond operator()" >  >() },
    { 2723u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Zero-initialize objects of automatic storage duration" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Zero-initialize objects of automatic storage duration" >  >() },
    { 2724u, RevList< Rev< 0u, Arr64< Hash< "Author629">() >(),  "constant dangling - HackMD" > , Rev< 1u, Arr64< Hash< "Author2008">() >(),  "constant dangling - HackMD" >  >() },
    { 2725u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "`std::integral_constant` Literals" > , Rev< 1u, Arr64< Hash< "Zach Laine">() >(),  "`std::integral_constant` Literals" >  >() },
    { 2726u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Better `std::tuple` Indexing" >  >() },
    { 2727u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "`std::iterator_interface`" > , Rev< 1u, Arr64< Hash< "Zach Laine">() >(),  "`std::iterator_interface`" > , Rev< 2u, Arr64< Hash< "Zach Laine">() >(),  "`std::iterator_interface`" > , Rev< 3u, Arr64< Hash< "Zach Laine">() >(),  "`std::iterator_interface`" > , Rev< 4u, Arr64< Hash< "Zach Laine">() >(),  "`std::iterator_interface`" >  >() },
    { 2728u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 1u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 2u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 3u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 4u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 5u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 6u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" > , Rev< 7u, Arr64< Hash< "1">() >(),  "Unicode in the Library, Part 1: UTF Transcoding" >  >() },
    { 2729u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Unicode in the Library, Part 2: Normalization" >  >() },
    { 2730u, RevList< Rev< 0u, Arr64< Hash< "Author692">() >(),  "variable scope - HackMD" > , Rev< 1u, Arr64< Hash< "Author119">() >(),  "variable scope - HackMD" >  >() },
    { 2732u, RevList< Rev< 0u, Arr64< Hash< "Author1648">() >(),  "P2732 WG21 2022-11 Kona Record of Discussion.docx" >  >() },
    { 2733u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix handling of empty specifiers in std::format" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix handling of empty specifiers in std::format" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix handling of empty specifiers in std::format" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix handling of empty specifiers in std::format" >  >() },
    { 2734u, RevList< Rev< 0u, Arr64< Hash< "Marc Mutz">() >(),  "Title140" >  >() },
    { 2735u, RevList< Rev< 0u, Arr64< Hash< "Author775">() >(),  "Title632" >  >() },
    { 2736u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title78" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title464" >  >() },
    { 2737u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Proposal of Condition-centric Contracts Syntax" >  >() },
    { 2738u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title638" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title135" >  >() },
    { 2739u, RevList< Rev< 0u, Arr64< Hash< "Author583">() >(),  "Title476" >  >() },
    { 2740u, RevList< Rev< 0u, Arr64< Hash< "Author693">() >(),  "Simpler implicit dangling resolution - HackMD" > , Rev< 1u, Arr64< Hash< "Author552">() >(),  "Simpler implicit dangling resolution - HackMD" > , Rev< 2u, Arr64< Hash< "Author2196">() >(),  "Simpler implicit dangling resolution - HackMD" >  >() },
    { 2741u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title863" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title416" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1197" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title149" >  >() },
    { 2742u, RevList< Rev< 0u, Arr64< Hash< "Author327">() >(),  "indirect dangling identification - HackMD" > , Rev< 1u, Arr64< Hash< "Author427">() >(),  "indirect dangling identification - HackMD" > , Rev< 2u, Arr64< Hash< "Author1228">() >(),  "indirect dangling identification - HackMD" >  >() },
    { 2743u, RevList< Rev< 0u, Arr64< Hash< "Author1055">() >(),  "Contracts for C++: Priorotizing Safety" >  >() },
    { 2746u, RevList< Rev< 0u, Arr64< Hash< "Author981">() >(),  "Fenv rounding" > , Rev< 1u, Arr64< Hash< "Author968">() >(),  "Fenv rounding" > , Rev< 2u, Arr64< Hash< "Author1176">() >(),  "Fenv rounding" > , Rev< 3u, Arr64< Hash< "Author1957">() >(),  "Fenv rounding" > , Rev< 4u, Arr64< Hash< "Author512">() >(),  "Fenv rounding" > , Rev< 5u, Arr64< Hash< "Author1135">() >(),  "Fenv rounding" > , Rev< 6u, Arr64< Hash< "Author1655">() >(),  "Fenv rounding" > , Rev< 7u, Arr64< Hash< "Author1467">() >(),  "Fenv rounding" >  >() },
    { 2747u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Limited support for constexpr void*" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr placement new" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr placement new" >  >() },
    { 2748u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned glvalue to a Temporary" > , Rev< 1u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 2u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 3u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 4u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned Glvalue to a Temporary" > , Rev< 5u, Arr64< Hash< "Brian Bi">() >(),  "Disallow Binding a Returned Glvalue to a Temporary" >  >() },
    { 2749u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1686" >  >() },
    { 2750u, RevList< Rev< 0u, Arr64< Hash< "Author1361">() >(),  "C Dangling Reduction - HackMD" > , Rev< 1u, Arr64< Hash< "Author2055">() >(),  "C Dangling Reduction - HackMD" > , Rev< 2u, Arr64< Hash< "Author1642">() >(),  "C Dangling Reduction - HackMD" >  >() },
    { 2751u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title620" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1638" >  >() },
    { 2752u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Static storage for braced initializers" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Static storage for braced initializers" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Static storage for braced initializers" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Static storage for braced initializers" >  >() },
    { 2754u, RevList< Rev< 0u, Arr64< Hash< "Jake Fevold">() >(),  "Deconstructing the Avoidance of Uninitialized Reads of AutoVariables" >  >() },
    { 2755u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1282" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title309" >  >() },
    { 2756u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "D2756R0 Proposal of Simple Contract Side Effect Semantics" >  >() },
    { 2757u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Type-checking format args" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Type-checking format args" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Type-checking format args" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Type-checking format args" >  >() },
    { 2758u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" > , Rev< 5u, Arr64< Hash< "Barry Revzin">() >(),  "Emitting messages at compile time" >  >() },
    { 2759u, RevList< Rev< 0u, Arr64< Hash< "Author818">() >(),  "D2759R0: DG Opinion on Safety for ISO C++" > , Rev< 1u, Arr64< Hash< "Author1843">() >(),  "DG Opinion on Safety for ISO C++" >  >() },
    { 2760u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "A Plan for C++26 Ranges" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "A Plan for C++26 Ranges" >  >() },
    { 2761u, RevList< Rev< 0u, Arr64< Hash< "Author996">() >(),  "If structured binding" > , Rev< 1u, Arr64< Hash< "Author1631">() >(),  "If structured binding" > , Rev< 2u, Arr64< Hash< "Author1552">() >(),  "Evaluating structured binding as a condition" > , Rev< 3u, Arr64< Hash< "Author1287">() >(),  "Title998" >  >() },
    { 2762u, RevList< Rev< 0u, Arr64< Hash< "Dietmar Khl">() >(),  "Sender/Receiver Interface For Networking" > , Rev< 1u, Arr64< Hash< "Dietmar Khl">() >(),  "Sender/Receiver Interface For Networking" > , Rev< 2u, Arr64< Hash< "Dietmar Khl">() >(),  "Sender/Receiver Interface For Networking" >  >() },
    { 2763u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "layout_stride static extents default constructor fix" > , Rev< 1u, Arr64< Hash< "Christian Trott">() >(),  "layout_stride static extents default constructor fix" >  >() },
    { 2764u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1593" >  >() },
    { 2765u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Title1342" >  >() },
    { 2766u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2022-10-12 through 2022-12-14" >  >() },
    { 2767u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "flat_map/flat_set omnibus" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "flat_map/flat_set omnibus" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "flat_map/flat_set omnibus" >  >() },
    { 2769u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "get_element customization point object" > , Rev< 1u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "get_element customization point object" > , Rev< 2u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "get_element customization point object" > , Rev< 3u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "get_element customization point object" >  >() },
    { 2770u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Stashing stashing iterators for proper flattening" >  >() },
    { 2771u, RevList< Rev< 0u, Arr64< Hash< "Thomas Neumann">() >(),  "Towards memory safety in C++" > , Rev< 1u, Arr64< Hash< "Thomas Neumann">() >(),  "R2771R1: Towards memory safety in C++" >  >() },
    { 2772u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "std::integral_constant literals do not suffice constexpr_t? [P2772R0]" >  >() },
    { 2773u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1068" >  >() },
    { 2774u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "D2774 - Scoped thread-local storage" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "D2774 - Concurrent object pool" >  >() },
    { 2775u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2023-05 Library Evolution Polls" >  >() },
    { 2776u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "2023-05 Library Evolution Poll Outcomes" >  >() },
    { 2779u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Make basic_string_views range construction conditionally explicit" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "D2779R1: Make basic_string_views range construction conditionally explicit" >  >() },
    { 2780u, RevList< Rev< 0u, Arr64< Hash< "Author990">() >(),  "Caller-side precondition checking, and Eval_and_throw" >  >() },
    { 2781u, RevList< Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "`std::constexpr_v`" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "`std::constexpr_v`" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "`std::constexpr_v`" > , Rev< 4u, Arr64< Hash< "Matthias Kretz">() >(),  "`std::constant_wrapper`" > , Rev< 5u, Arr64< Hash< "Hana Dusikova">() >(),  "`std::constant_wrapper`" > , Rev< 6u, Arr64< Hash< "Hana Dusikova">() >(),  "`std::constant_wrapper`" > , Rev< 7u, Arr64< Hash< "Hana Dusikova">() >(),  "`std::constant_wrapper`" > , Rev< 8u, Arr64< Hash< "Hana Dusikova">() >(),  "`std::constant_wrapper`" >  >() },
    { 2782u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "A proposal for a type trait to detect if value initialization can be achieved by zero-filling" >  >() },
    { 2784u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Not halting the program after detected contract violation" >  >() },
    { 2785u, RevList< Rev< 0u, Arr64< Hash< "S\xC3\xA9bastien Bini">() >(),  "D2785R1: Relocating prvalues" > , Rev< 1u, Arr64< Hash< "S\xC3\xA9bastien Bini">() >(),  "Relocating prvalues" > , Rev< 2u, Arr64< Hash< "S\xC3\xA9bastien Bini">() >(),  "D2785R2: Relocating prvalues" > , Rev< 3u, Arr64< Hash< "S\xC3\xA9bastien Bini">() >(),  "Relocating prvalues" >  >() },
    { 2786u, RevList< Rev< 0u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial relocatability options" > , Rev< 1u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial relocatability options" > , Rev< 2u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial relocatability options" > , Rev< 3u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 4u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 5u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 6u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 7u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 8u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 9u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 10u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 11u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 12u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability For C++26" > , Rev< 13u, Arr64< Hash< "Alisdair Meredith">() >(),  "Trivial Relocatability For C++26" >  >() },
    { 2787u, RevList< Rev< 0u, Arr64< Hash< "Author1679">() >(),  "Title1304" > , Rev< 1u, Arr64< Hash< "Author619">() >(),  "Title505" >  >() },
    { 2788u, RevList< Rev< 0u, Arr64< Hash< "Author835">() >(),  "Linkage for modular constants" >  >() },
    { 2789u, RevList< Rev< 0u, Arr64< Hash< "Author1858">() >(),  "C++ Standard Library Issues to be moved in Issaquah, Feb. 2023" >  >() },
    { 2790u, RevList< Rev< 0u, Arr64< Hash< "Author686">() >(),  "C++ Standard Library Immediate Issues to be moved in Issaquah, Feb. 2023" >  >() },
    { 2791u, RevList< Rev< 0u, Arr64< Hash< "Ran Regev">() >(),  "P2791R0" >  >() },
    { 2795u, RevList< Rev< 0u, Arr64< Hash< "Author1344">() >(),  "Correct and incorrect code, and erroneous behaviour" > , Rev< 1u, Arr64< Hash< "Author963">() >(),  "Erroneous behaviour for uninitialized reads" > , Rev< 2u, Arr64< Hash< "Author1417">() >(),  "Erroneous behaviour for uninitialized reads" > , Rev< 3u, Arr64< Hash< "Author363">() >(),  "Erroneous behaviour for uninitialized reads" > , Rev< 4u, Arr64< Hash< "Author53">() >(),  "Erroneous behaviour for uninitialized reads" > , Rev< 5u, Arr64< Hash< "Author158">() >(),  "Erroneous behaviour for uninitialized reads" >  >() },
    { 2796u, RevList< Rev< 0u, Arr64< Hash< "Author719">() >(),  "Core \"ready\" Issues" >  >() },
    { 2797u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Proposed resolution for CWG2692 Static and explicit objectmember functions with the same parameter-type-lists" >  >() },
    { 2798u, RevList< Rev< 0u, Arr64< Hash< "Christian Trott">() >(),  "Fix layout mappings all static extent default constructor" >  >() },
    { 2799u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Closed ranges may be a problem; breaking counted_iterator is not the solution" >  >() },
    { 2800u, RevList< Rev< 0u, Arr64< Hash< "Author1124">() >(),  "Dependency flag soup needs some fiber" >  >() },
    { 2802u, RevList< Rev< 0u, Arr64< Hash< "Guy Davidson">() >(),  "P1385R7" >  >() },
    { 2803u, RevList< Rev< 0u, Arr64< Hash< "Author1779">() >(),  "std::simd" >  >() },
    { 2805u, RevList< Rev< 0u, Arr64< Hash< "Author671">() >(),  "Slide 1" >  >() },
    { 2806u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "do expressions" > , Rev< 1u, Arr64< Hash< "Bruno Cardoso">() >(),  "do expressions" > , Rev< 2u, Arr64< Hash< "Bruno Cardoso">() >(),  "do expressions" > , Rev< 3u, Arr64< Hash< "Bruno Cardoso">() >(),  "do expressions" >  >() },
    { 2807u, RevList< Rev< 0u, Arr64< Hash< "Author8">() >(),  "Title9" >  >() },
    { 2808u, RevList< Rev< 0u, Arr64< Hash< "Author118">() >(),  "Internal linkage in the global module" >  >() },
    { 2809u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "Trivial infinite loops are not Undefined Behavior" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "Trivial infinite loops are not Undefined Behavior" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "Trivial infinite loops are not Undefined Behavior" > , Rev< 3u, Arr64< Hash< "JF Bastien">() >(),  "Trivial infinite loops are not Undefined Behavior" >  >() },
    { 2810u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "is_debugger_present is_replaceable" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "is_debugger_present is_replaceable" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "is_debugger_present is_replaceable" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "is_debugger_present is_replaceable" > , Rev< 4u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "is_debugger_present is_replaceable" >  >() },
    { 2811u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title471" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title623" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title141" > , Rev< 3u, Arr64< Hash< "Joshua Berne">() >(),  "Title134" > , Rev< 4u, Arr64< Hash< "Joshua Berne">() >(),  "Title412" > , Rev< 5u, Arr64< Hash< "Joshua Berne">() >(),  "Title975" > , Rev< 6u, Arr64< Hash< "Joshua Berne">() >(),  "Title248" > , Rev< 7u, Arr64< Hash< "Joshua Berne">() >(),  "Title268" >  >() },
    { 2812u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "P2812: P1673R11 LEWG presentation" >  >() },
    { 2814u, RevList< Rev< 0u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability Comparing P1144 with P2786" > , Rev< 1u, Arr64< Hash< "Mungo Gill">() >(),  "Trivial Relocatability Comparing P1144 with P2786" >  >() },
    { 2815u, RevList< Rev< 0u, Arr64< Hash< "Author2029">() >(),  "Pointers are sometimes just bags of bits" >  >() },
    { 2816u, RevList< Rev< 0u, Arr64< Hash< "Author810">() >(),  "Upcoming Changes to C++" >  >() },
    { 2817u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "The idea behind the contracts MVP" >  >() },
    { 2818u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Uniform Call Syntax for explicit-object memberfunctions" >  >() },
    { 2819u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "D2819 - Add tuple protocol to complex" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "D2819 - Add tuple protocol to complex" > , Rev< 2u, Arr64< Hash< "Michael Florian">() >(),  "D2819 - Add tuple protocol to complex" >  >() },
    { 2821u, RevList< Rev< 0u, Arr64< Hash< "Author1235">() >(),  "span.at() - HackMD" > , Rev< 1u, Arr64< Hash< "Author1103">() >(),  "span.at() - HackMD" > , Rev< 2u, Arr64< Hash< "Author1116">() >(),  "span.at() - HackMD" > , Rev< 3u, Arr64< Hash< "Author535">() >(),  "span.at() - HackMD" > , Rev< 4u, Arr64< Hash< "Author304">() >(),  "span.at() - HackMD" > , Rev< 5u, Arr64< Hash< "Author2192">() >(),  "span.at() - HackMD" >  >() },
    { 2822u, RevList< Rev< 0u, Arr64< Hash< "Author184">() >(),  "Providing user control of associated entities of class types" > , Rev< 1u, Arr64< Hash< "Author1402">() >(),  "Providing user control of associated entities of class types" > , Rev< 2u, Arr64< Hash< "Author274">() >(),  "Providing user control of associated entities of class types" >  >() },
    { 2824u, RevList< Rev< 0u, Arr64< Hash< "Author200">() >(),  "P2824 WG21 2023-02 Issaquah Record of Discussion.docx" >  >() },
    { 2825u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "calltarget(unevaluated-call-expression)" > , Rev< 1u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "declcall(unevaluated-postfix-expression)" > , Rev< 2u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "declcall(unevaluated-postfix-expression)" > , Rev< 3u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Overload resolution hook: declcall( unevaluated-call-expression)" > , Rev< 4u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Overload resolution hook: declcall( unevaluated-call-expression)" > , Rev< 5u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Overload resolution hook: declcall( unevaluated-call-expression)" >  >() },
    { 2826u, RevList< Rev< 0u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Replacement function" > , Rev< 1u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Replacement function" > , Rev< 2u, Arr64< Hash< "Ga\xC5\xA1per A\xC5\xBEman">() >(),  "Replacement function" >  >() },
    { 2827u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Floating-point overflow and underflow in from_chars (LWG 3081) - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Floating-point overflow and underflow in `from_chars` (LWG 3081) - HackMD" >  >() },
    { 2828u, RevList< Rev< 0u, Arr64< Hash< "Author653">() >(),  "Copy elision for direct-initialization with a conversion function (Coreissue 2327)" > , Rev< 1u, Arr64< Hash< "Author466">() >(),  "Copy elision for direct-initialization with a conversion function (Coreissue 2327)" > , Rev< 2u, Arr64< Hash< "Author994">() >(),  "Copy elision for direct-initialization with a conversion function (Coreissue 2327)" >  >() },
    { 2829u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "Proposal of Contracts Supporting Const-On-Definition Style" >  >() },
    { 2830u, RevList< Rev< 0u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Type Ordering" > , Rev< 1u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Type Ordering" > , Rev< 2u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 3u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 4u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 5u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 6u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 7u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 8u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 9u, Arr64< Hash< "Nate Nichols">() >(),  "Standardized Constexpr Type Ordering" > , Rev< 10u, Arr64< Hash< "Nate Nichols">() >(),  "Constexpr Type Ordering" >  >() },
    { 2831u, RevList< Rev< 0u, Arr64< Hash< "Author756">() >(),  "Title613" >  >() },
    { 2833u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: inout expected span" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: inout expected span" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: inout expected span" >  >() },
    { 2834u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1362" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1454" >  >() },
    { 2835u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose std::atomic_ref 's object address" > , Rev< 1u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 2u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 3u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 4u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 5u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 6u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" > , Rev< 7u, Arr64< Hash< "Gonzalo Brito">() >(),  "Expose `std::atomic_ref` 's object address" >  >() },
    { 2836u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "`std::const_iterator` often produces an unexpected type" > , Rev< 1u, Arr64< Hash< "Christopher Di">() >(),  "`std::basic_const_iterator` should follow its underlying type'sconvertibility" >  >() },
    { 2837u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Planning to Revisit the Lakos Rule" >  >() },
    { 2838u, RevList< Rev< 0u, Arr64< Hash< "Author699">() >(),  "Unconditional contract violation handling of any kind is a serious problem" >  >() },
    { 2839u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Nontrivial Relocation via a New *owning reference* Type" >  >() },
    { 2841u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1505" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1179" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1128" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title831" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title585" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title446" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1552" > , Rev< 7u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1003" >  >() },
    { 2842u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Destructor Semantics Do Not Affect Constructible Traits" >  >() },
    { 2843u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Preprocessing is never undefined" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Preprocessing is never undefined" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Preprocessing is never undefined" >  >() },
    { 2845u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "D2845R4: Formatting of std::filesystem::path" > , Rev< 5u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 6u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 7u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" > , Rev< 8u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::filesystem::path" >  >() },
    { 2846u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title237" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title312" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1345" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1376" > , Rev< 4u, Arr64< Hash< "Corentin Jabot">() >(),  "Title365" > , Rev< 5u, Arr64< Hash< "Corentin Jabot">() >(),  "Title981" > , Rev< 6u, Arr64< Hash< "Corentin Jabot">() >(),  "Title5" >  >() },
    { 2848u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_uniqued" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "std::is_uniqued" >  >() },
    { 2849u, RevList< Rev< 0u, Arr64< Hash< "Kirk Shoop">() >(),  "async-object - aka async-RAII" >  >() },
    { 2850u, RevList< Rev< 0u, Arr64< Hash< "2.6">() >(),  "Title104" >  >() },
    { 2852u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Contract violation handling semantics for the contracts MVP" >  >() },
    { 2853u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "P2853R0 Proposal of std::contract_violation" >  >() },
    { 2855u, RevList< Rev< 0u, Arr64< Hash< "Author884">() >(),  "Member customization points for Senders and Receivers" > , Rev< 1u, Arr64< Hash< "Author1387">() >(),  "Member customization points for Senders and Receivers" >  >() },
    { 2857u, RevList< Rev< 0u, Arr64< Hash< "Matthew Bentley">() >(),  "Improve std::hive::reshape" >  >() },
    { 2858u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Noexcept vs contract violations" >  >() },
    { 2861u, RevList< Rev< 0u, Arr64< Hash< "Author1766">() >(),  "Title1370" >  >() },
    { 2862u, RevList< Rev< 0u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "text_encoding::name() should never return null values" > , Rev< 1u, Arr64< Hash< "Daniel Kr\xC3\xBCgler">() >(),  "text_encoding::name() should never return null values" >  >() },
    { 2863u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 4u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 5u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 6u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 7u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 8u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" > , Rev< 9u, Arr64< Hash< "Alisdair Meredith">() >(),  "Review Annex D for C++26" >  >() },
    { 2864u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Arithmetic Conversion on Enumerations From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Arithmetic Conversion on Enumerations From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Arithmetic Conversion on Enumerations From C++26" >  >() },
    { 2865u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 4u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 5u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" > , Rev< 6u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Array Comparisons from C++26" >  >() },
    { 2866u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features from C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features from C++26" > , Rev< 4u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features from C++26" > , Rev< 5u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Volatile Features from C++26" >  >() },
    { 2867u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated strstreams From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated strstreams From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated strstreams From C++26" >  >() },
    { 2868u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Typedef From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Typedef From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Typedef From C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Typedef From C++26" >  >() },
    { 2869u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Access APIs From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Access APIs From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Access APIs From C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Access APIs from C++26" > , Rev< 4u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Access APIs from C++26" >  >() },
    { 2870u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" >  >() },
    { 2871u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Unicode Conversion Facets From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Unicode Conversion Facets From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Unicode Conversion Facets from C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Unicode Conversion Facets from C++26" >  >() },
    { 2872u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove From C++26" >  >() },
    { 2873u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Locale Category Facets For Unicode from C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Locale Category Facets For Unicode from C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Locale-Category Facets for Unicode from C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Locale-Category Facets for Unicode from C++26" >  >() },
    { 2874u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Mandating Annex D" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Mandating Annex D" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Mandating Annex D" >  >() },
    { 2875u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Undeprecate For C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Undeprecate `polymorphic_allocator::destroy` For C++26" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Undeprecate for C++26" > , Rev< 3u, Arr64< Hash< "Alisdair Meredith">() >(),  "Undeprecate for C++26" > , Rev< 4u, Arr64< Hash< "Alisdair Meredith">() >(),  "Undeprecate for C++26" >  >() },
    { 2876u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "D2876R0: Proposal to extend <code>std::simd</code> with more constructors and accessors" > , Rev< 1u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend <code>std::simd</code> with more constructors and accessors" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend <code>std::simd</code> with more constructors and accessors" >  >() },
    { 2877u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1610" >  >() },
    { 2878u, RevList< Rev< 0u, Arr64< Hash< "Author582">() >(),  "Reference checking - HackMD" > , Rev< 1u, Arr64< Hash< "Author1180">() >(),  "Reference checking - HackMD" > , Rev< 2u, Arr64< Hash< "Author1212">() >(),  "Reference checking - HackMD" > , Rev< 3u, Arr64< Hash< "Author637">() >(),  "Reference checking - HackMD" > , Rev< 4u, Arr64< Hash< "Author1016">() >(),  "Reference checking - HackMD" > , Rev< 5u, Arr64< Hash< "Author814">() >(),  "Reference checking - HackMD" > , Rev< 6u, Arr64< Hash< "Author2034">() >(),  "Reference checking - HackMD" >  >() },
    { 2879u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "P2879R0 Proposal of std::dump" >  >() },
    { 2880u, RevList< Rev< 0u, Arr64< Hash< "Ilya Burylov">() >(),  "Algorithm-like vs std::simd based RNG API" >  >() },
    { 2881u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "Generator-based for loop" >  >() },
    { 2882u, RevList< Rev< 0u, Arr64< Hash< "Author1033">() >(),  "An Event Model for C++ Executors" >  >() },
    { 2883u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Should Be A Keyword In C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Should Be a Keyword in C++26" >  >() },
    { 2884u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Should Be A Keyword In C++26" >  >() },
    { 2885u, RevList< Rev< 0u, Arr64< Hash< "Author2025">() >(),  "Requirements for a Contracts syntax" > , Rev< 1u, Arr64< Hash< "Author1673">() >(),  "Requirements for a Contracts syntax" > , Rev< 2u, Arr64< Hash< "Author60">() >(),  "Requirements for a Contracts syntax" > , Rev< 3u, Arr64< Hash< "Author1938">() >(),  "Requirements for a Contracts syntax" >  >() },
    { 2886u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "p2886r0: concurrency ts2 editor's report" >  >() },
    { 2887u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "P2887r0.docx" >  >() },
    { 2888u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "P2888r0.docx" >  >() },
    { 2889u, RevList< Rev< 0u, Arr64< Hash< "Lauri Vasama">() >(),  "Distributed Arrays" >  >() },
    { 2890u, RevList< Rev< 0u, Arr64< Hash< "Author1284">() >(),  "Title995" > , Rev< 1u, Arr64< Hash< "Author667">() >(),  "Title540" > , Rev< 2u, Arr64< Hash< "Author308">() >(),  "Title260" >  >() },
    { 2891u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2023-01-11 through 2023-05-10" >  >() },
    { 2892u, RevList< Rev< 0u, Arr64< Hash< "Joe Jevnik">() >(),  "Types Should be Regular" >  >() },
    { 2893u, RevList< Rev< 0u, Arr64< Hash< "Jody Hagins">() >(),  "Variadic Friends" > , Rev< 1u, Arr64< Hash< "Author1051">() >(),  "Untitled" > , Rev< 2u, Arr64< Hash< "Jody Hagins">() >(),  "Variadic friends" > , Rev< 3u, Arr64< Hash< "Jody Hagins">() >(),  "Variadic friends" >  >() },
    { 2894u, RevList< Rev< 0u, Arr64< Hash< "Author46">() >(),  "Title44" > , Rev< 1u, Arr64< Hash< "Author595">() >(),  "Title486" > , Rev< 2u, Arr64< Hash< "Author1310">() >(),  "Title1015" >  >() },
    { 2895u, RevList< Rev< 0u, Arr64< Hash< "Sebastian Theophil">() >(),  "noncopyable and nonmovable utility classes" >  >() },
    { 2896u, RevList< Rev< 0u, Arr64< Hash< "Author2099">() >(),  "Outstanding design questions for the Contracts MVP" >  >() },
    { 2897u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 3u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 4u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 5u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer overalignment" > , Rev< 6u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer over-alignment" > , Rev< 7u, Arr64< Hash< "Mark Hoemmen">() >(),  "aligned_accessor: An mdspan accessor expressing pointer over-alignment" >  >() },
    { 2898u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Importable Headers are Not Universally Implementable" > , Rev< 1u, Arr64< Hash< "Daniel Ruoso">() >(),  "Build System Requirements for Importable Headers" >  >() },
    { 2899u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title644" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title696" >  >() },
    { 2900u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1415" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1674" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title390" > , Rev< 3u, Arr64< Hash< "Joshua Berne">() >(),  "Title1389" > , Rev< 4u, Arr64< Hash< "Joshua Berne">() >(),  "Title474" > , Rev< 5u, Arr64< Hash< "Joshua Berne">() >(),  "Title911" > , Rev< 6u, Arr64< Hash< "Joshua Berne">() >(),  "Title1147" > , Rev< 7u, Arr64< Hash< "Joshua Berne">() >(),  "Title1028" > , Rev< 8u, Arr64< Hash< "Joshua Berne">() >(),  "Title1253" > , Rev< 9u, Arr64< Hash< "Joshua Berne">() >(),  "Title1535" > , Rev< 10u, Arr64< Hash< "Joshua Berne">() >(),  "Title1302" > , Rev< 11u, Arr64< Hash< "Joshua Berne">() >(),  "Title1406" > , Rev< 12u, Arr64< Hash< "Joshua Berne">() >(),  "Title130" > , Rev< 13u, Arr64< Hash< "Joshua Berne">() >(),  "Title357" > , Rev< 14u, Arr64< Hash< "Joshua Berne">() >(),  "Title1549" >  >() },
    { 2901u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Extending Linear Algebra Support to Batched Operations" >  >() },
    { 2902u, RevList< Rev< 0u, Arr64< Hash< "Author1653">() >(),  "Title1285" > , Rev< 1u, Arr64< Hash< "Author891">() >(),  "Title720" >  >() },
    { 2904u, RevList< Rev< 0u, Arr64< Hash< "Anoop Rana">() >(),  "Title731" >  >() },
    { 2905u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings" >  >() },
    { 2906u, RevList< Rev< 0u, Arr64< Hash< "Bernhard Manfred">() >(),  "Structured bindings for <code>std::extents</code>" >  >() },
    { 2909u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Dude, wheres my char?" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix formatting of code units as integers<br>(Dude, wheres my char?)" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix formatting of code units as integers<br>(Dude, wheres my char?)" >  >() },
    { 2910u, RevList< Rev< 0u, Arr64< Hash< "Author532">() >(),  "C++ Standard Library Issues to be moved in Varna 2023" >  >() },
    { 2911u, RevList< Rev< 0u, Arr64< Hash< "Adam Lach">() >(),  "Title661" > , Rev< 1u, Arr64< Hash< "Author1303">() >(),  "Title1007" >  >() },
    { 2912u, RevList< Rev< 0u, Arr64< Hash< "Author1242">() >(),  "p2912r0: Concurrent queues and sender/receivers" >  >() },
    { 2915u, RevList< Rev< 0u, Arr64< Hash< "Author1660">() >(),  "Proposed resolution to CWG1223" >  >() },
    { 2917u, RevList< Rev< 0u, Arr64< Hash< "Author2096">() >(),  "An in-line defaulted destructor should keep the copy- and move-operations" > , Rev< 1u, Arr64< Hash< "Author836">() >(),  "An in-line defaulted destructor should keep the copy- and move-operations" >  >() },
    { 2918u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings II" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings II" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Runtime format strings II" >  >() },
    { 2920u, RevList< Rev< 0u, Arr64< Hash< "Author543">() >(),  "2023_06__iso_cpp_varna__library_evolution_leadership_understanding_of_narrow_noexcept_policy_history__r4" >  >() },
    { 2921u, RevList< Rev< 0u, Arr64< Hash< "Author1774">() >(),  "p2921r0: Exploring std::expected based API alternatives for buffer_queue" >  >() },
    { 2922u, RevList< Rev< 0u, Arr64< Hash< "Author505">() >(),  "Core \"ready\" Issues" >  >() },
    { 2925u, RevList< Rev< 0u, Arr64< Hash< "Author1447">() >(),  "inplace_vector D0843R7" >  >() },
    { 2926u, RevList< Rev< 0u, Arr64< Hash< "Author586">() >(),  "Title477" >  >() },
    { 2927u, RevList< Rev< 0u, Arr64< Hash< "Author36">() >(),  "Inspecting exception_ptr" > , Rev< 1u, Arr64< Hash< "Author1584">() >(),  "Inspecting exception_ptr" > , Rev< 2u, Arr64< Hash< "Author665">() >(),  "Inspecting exception_ptr" >  >() },
    { 2929u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to add simd_invoke to std::simd" >  >() },
    { 2930u, RevList< Rev< 0u, Arr64< Hash< "Mark de">() >(),  "Formatter specializations for the standard library" >  >() },
    { 2931u, RevList< Rev< 0u, Arr64< Hash< "Author460">() >(),  "P2931 WG21 2023-06 Varna Record of Discussion.docx" >  >() },
    { 2932u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title920" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title674" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title544" > , Rev< 3u, Arr64< Hash< "Joshua Berne">() >(),  "Title589" >  >() },
    { 2933u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to allow simd overloads for standard C++ <bit> header" > , Rev< 1u, Arr64< Hash< "Daniel Towner">() >(),  "Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 3u, Arr64< Hash< "Daniel Towner">() >(),  "Extend <code><bit></code> header function with overloads for <code>std::simd</code>" > , Rev< 4u, Arr64< Hash< "Daniel Towner">() >(),  "Extend <bit> header function with overloads for std::simd" >  >() },
    { 2935u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title788" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1475" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title1145" > , Rev< 3u, Arr64< Hash< "Joshua Berne">() >(),  "Title1081" > , Rev< 4u, Arr64< Hash< "Joshua Berne">() >(),  "Title1278" >  >() },
    { 2937u, RevList< Rev< 0u, Arr64< Hash< "\xE2\x80\x83\xE2\x80\x83Ben Craig">() >(),  "Freestanding: Remove <code>strtok</code>" >  >() },
    { 2940u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "switch for Pattern Matching" >  >() },
    { 2941u, RevList< Rev< 0u, Arr64< Hash< "Mihail Naydenov">() >(),  "Identifiers for Pattern Matching" >  >() },
    { 2944u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Comparisons for reference_wrapper" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Comparisons for reference_wrapper" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Comparisons for reference_wrapper" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "Comparisons for reference_wrapper" >  >() },
    { 2945u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Additional format specifiers for time_point" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Additional format specifiers for time_point" >  >() },
    { 2946u, RevList< Rev< 0u, Arr64< Hash< "Author912">() >(),  "A Flexible Solution to the Problems of noexcept" > , Rev< 1u, Arr64< Hash< "Author1928">() >(),  "A Flexible Solution to the Problems of noexcept" >  >() },
    { 2947u, RevList< Rev< 0u, Arr64< Hash< "Andrei Zissu">() >(),  "D2947R0" >  >() },
    { 2949u, RevList< Rev< 0u, Arr64< Hash< "John Lakos">() >(),  "Microsoft Word - PxxxxR0.docx" >  >() },
    { 2950u, RevList< Rev< 0u, Arr64< Hash< "Christopher Di">() >(),  "P2836R1 Slides" >  >() },
    { 2951u, RevList< Rev< 0u, Arr64< Hash< "Author138">() >(),  "Shadowing is good for safety - HackMD" > , Rev< 1u, Arr64< Hash< "Author556">() >(),  "Shadowing is good for safety - HackMD" > , Rev< 2u, Arr64< Hash< "Author2152">() >(),  "Shadowing is good for safety - HackMD" > , Rev< 3u, Arr64< Hash< "Author1769">() >(),  "Shadowing is good for safety - HackMD" >  >() },
    { 2952u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "auto& operator=(X&&) = default" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "auto& operator=(X&&) = default" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "auto& operator=(X&&) = default" >  >() },
    { 2953u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Forbid defaulting operator=(X&&) &&" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Forbid defaulting operator=(X&&) &&" >  >() },
    { 2954u, RevList< Rev< 0u, Arr64< Hash< "Author1451">() >(),  "Contracts and virtual functions for the Contracts MVP" >  >() },
    { 2955u, RevList< Rev< 0u, Arr64< Hash< "Author998">() >(),  "Safer Range Access - HackMD" > , Rev< 1u, Arr64< Hash< "Author2108">() >(),  "Safer Range Access - HackMD" >  >() },
    { 2956u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Allow <code>std::simd</code> overloads for saturating operations" >  >() },
    { 2957u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contracts and coroutines" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contracts and coroutines" > , Rev< 2u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contracts and coroutines" >  >() },
    { 2958u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "typeof and typeof_unqual for C++" >  >() },
    { 2959u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Relocation Within Containers" >  >() },
    { 2960u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "P2960R0 Concurrency TS2 Editors report for N4953" >  >() },
    { 2961u, RevList< Rev< 0u, Arr64< Hash< "Author791">() >(),  "Title641" > , Rev< 1u, Arr64< Hash< "Author1859">() >(),  "Title1441" > , Rev< 2u, Arr64< Hash< "Author687">() >(),  "Title552" >  >() },
    { 2962u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Communicating the Baseline Compile Command for C++ Modules support" >  >() },
    { 2963u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title250" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title475" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1664" > , Rev< 3u, Arr64< Hash< "Corentin Jabot">() >(),  "Title979" >  >() },
    { 2964u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Adding support for user-defined element types in std::simd" > , Rev< 1u, Arr64< Hash< "Daniel Towner">() >(),  "Adding support for user-defined element types (UDT) in <code>std::simd</code>" >  >() },
    { 2966u, RevList< Rev< 0u, Arr64< Hash< "Patrice Roy">() >(),  "Title960" > , Rev< 1u, Arr64< Hash< "Patrice Roy">() >(),  "Title940" >  >() },
    { 2967u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Relocation Has A Library Interface" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Relocation Has A Library Interface" >  >() },
    { 2968u, RevList< Rev< 0u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make std::ignore a first-class object" > , Rev< 1u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make std::ignore a first-class object" > , Rev< 2u, Arr64< Hash< "Peter Sommerlad">() >(),  "Make std::ignore a first-class object" >  >() },
    { 2969u, RevList< Rev< 0u, Arr64< Hash< "Author1698">() >(),  "Title1316" >  >() },
    { 2971u, RevList< Rev< 0u, Arr64< Hash< "Author2165">() >(),  "Implication for C++" > , Rev< 1u, Arr64< Hash< "Author729">() >(),  "Implication for C++" > , Rev< 2u, Arr64< Hash< "Author1067">() >(),  "Implication for C++" > , Rev< 3u, Arr64< Hash< "Author215">() >(),  "Implication for C++" >  >() },
    { 2972u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2023-09 Library Evolution Polls" >  >() },
    { 2973u, RevList< Rev< 0u, Arr64< Hash< "Author2198">() >(),  "Erroneous behaviour for missing return from assignment" >  >() },
    { 2976u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: algorithm, numeric, and random" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding Library: algorithm, numeric, and random" >  >() },
    { 2977u, RevList< Rev< 0u, Arr64< Hash< "Author1972">() >(),  "Module configuration files" > , Rev< 1u, Arr64< Hash< "Author223">() >(),  "Build database files" > , Rev< 2u, Arr64< Hash< "Author620">() >(),  "Build database files" >  >() },
    { 2978u, RevList< Rev< 0u, Arr64< Hash< "HassanSajjad">() >(),  "A New Approach For Compiling C++" >  >() },
    { 2979u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "The Need for Design Policies in WG21" >  >() },
    { 2980u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "A motivation, scope, and plan for a physical quantities andunits library" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "A motivation, scope, and plan for a quantities and unitslibrary" >  >() },
    { 2981u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "Improving our safety with a physical quantities and unitslibrary" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "Improving our safety with a physical quantities and unitslibrary" >  >() },
    { 2982u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::quantity` as a numeric type" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::quantity` as a numeric type" >  >() },
    { 2984u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Reconsider Redeclaring static constexpr Data Members" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Reconsider Redeclaring static constexpr Data Members" >  >() },
    { 2985u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "A type trait for detecting virtual base classes" >  >() },
    { 2986u, RevList< Rev< 0u, Arr64< Hash< "Lauri Vasama">() >(),  "Generic Function Pointer" >  >() },
    { 2988u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "std::optional<T&>" > , Rev< 1u, Arr64< Hash< "Author2020">() >(),  "Title1561" > , Rev< 2u, Arr64< Hash< "Author839">() >(),  "Title663" > , Rev< 3u, Arr64< Hash< "Author958">() >(),  "Title777" > , Rev< 4u, Arr64< Hash< "Author715">() >(),  "Title577" > , Rev< 5u, Arr64< Hash< "Author319">() >(),  "Title269" > , Rev< 6u, Arr64< Hash< "Author1162">() >(),  "Title922" > , Rev< 7u, Arr64< Hash< "Author1505">() >(),  "Title1169" > , Rev< 8u, Arr64< Hash< "Author474">() >(),  "Title397" > , Rev< 9u, Arr64< Hash< "Author1092">() >(),  "Title879" > , Rev< 10u, Arr64< Hash< "Author261">() >(),  "Title219" > , Rev< 11u, Arr64< Hash< "Author35">() >(),  "Title31" > , Rev< 12u, Arr64< Hash< "Author778">() >(),  "Title634" >  >() },
    { 2989u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title596" > , Rev< 1u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1323" > , Rev< 2u, Arr64< Hash< "Corentin Jabot">() >(),  "Title34" >  >() },
    { 2990u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "C++ Modules Roadmap" >  >() },
    { 2991u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Stop Forcing `std::move` to Pessimize" >  >() },
    { 2992u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Attribute [[discard]] and attributes on expressions" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Attribute [[discard(\"reason\")]]" >  >() },
    { 2993u, RevList< Rev< 0u, Arr64< Hash< "Luke Valenty">() >(),  "Constrained Numbers" >  >() },
    { 2994u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "On the Naming of Packs" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "On the Naming of Packs" >  >() },
    { 2995u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2023-05-24 through 2023-09-27" >  >() },
    { 2996u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 1u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 2u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 3u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 4u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 5u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 6u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 7u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 8u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 9u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 10u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" > , Rev< 11u, Arr64< Hash< "Wyatt Childers">() >(),  "Reflection for C++26" >  >() },
    { 2997u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Removing the common reference requirement from the indirectly invocable concepts" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Removing the common reference requirement from the indirectly invocable concepts" >  >() },
    { 2998u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Deducing function parameter types using alias templateCTAD" >  >() },
    { 2999u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Sender Algorithm Customization" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Sender Algorithm Customization" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Sender Algorithm Customization" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "Sender Algorithm Customization" >  >() },
    { 3001u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "std::hive and containers like it are not a good fit for thestandard library" >  >() },
    { 3002u, RevList< Rev< 0u, Arr64< Hash< "Author1231">() >(),  "Guidelines for Allocators in New Library Classes" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "Policies for Using Allocators in Library Classes" >  >() },
    { 3003u, RevList< Rev< 0u, Arr64< Hash< "Author1987">() >(),  "P3003R0 The design of a library of number concepts" >  >() },
    { 3004u, RevList< Rev< 0u, Arr64< Hash< "John Lakos">() >(),  "Principled Design for WG21" >  >() },
    { 3005u, RevList< Rev< 0u, Arr64< Hash< "John Lakos">() >(),  "Memorializing Principled-Design Policies for WG21" >  >() },
    { 3006u, RevList< Rev< 0u, Arr64< Hash< "Author799">() >(),  "Launder less" > , Rev< 1u, Arr64< Hash< "Author1680">() >(),  "Launder less" >  >() },
    { 3007u, RevList< Rev< 0u, Arr64< Hash< "Author1274">() >(),  "Title987" >  >() },
    { 3008u, RevList< Rev< 0u, Arr64< Hash< "Author1781">() >(),  "Atomic floating-point min/max semantics" > , Rev< 1u, Arr64< Hash< "Author1191">() >(),  "Atomic floating-point min/max semantics" > , Rev< 2u, Arr64< Hash< "Author555">() >(),  "Atomic floating-point min/max semantics" > , Rev< 3u, Arr64< Hash< "Author233">() >(),  "Atomic floating-point min/max" > , Rev< 4u, Arr64< Hash< "Author851">() >(),  "Atomic floating-point min/max" >  >() },
    { 3009u, RevList< Rev< 0u, Arr64< Hash< "Joe Jevnik">() >(),  "Injected class name in the base specifier list" >  >() },
    { 3010u, RevList< Rev< 0u, Arr64< Hash< "Dan Katz">() >(),  "P3010R0 - Using Reflection to Replace a Metalanguage for Generating JS Bindings" >  >() },
    { 3011u, RevList< Rev< 0u, Arr64< Hash< "Matthew Bentley">() >(),  "Title1385" >  >() },
    { 3012u, RevList< Rev< 0u, Arr64< Hash< "Matthew Bentley">() >(),  "Title1530" >  >() },
    { 3014u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "Customizing std::expected's exception" >  >() },
    { 3015u, RevList< Rev< 0u, Arr64< Hash< "Howard E">() >(),  "Rebuttal to Additional format specifiers for time_point" >  >() },
    { 3016u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists" > , Rev< 2u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 3u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 4u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 5u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for valarray and braced initializer lists" > , Rev< 6u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve inconsistencies in begin/end for valarray and braced initializer lists" >  >() },
    { 3018u, RevList< Rev< 0u, Arr64< Hash< "Andreas Weis">() >(),  "Title945" >  >() },
    { 3019u, RevList< Rev< 0u, Arr64< Hash< "Author2026">() >(),  "Title1567" > , Rev< 1u, Arr64< Hash< "Author347">() >(),  "Title290" > , Rev< 2u, Arr64< Hash< "Author366">() >(),  "Title311" > , Rev< 3u, Arr64< Hash< "Author743">() >(),  "Title601" > , Rev< 4u, Arr64< Hash< "Author420">() >(),  "Title360" > , Rev< 5u, Arr64< Hash< "Author691">() >(),  "Title557" > , Rev< 6u, Arr64< Hash< "Author115">() >(),  "Title102" > , Rev< 7u, Arr64< Hash< "Author991">() >(),  "Title802" > , Rev< 8u, Arr64< Hash< "Author1847">() >(),  "Title1432" > , Rev< 9u, Arr64< Hash< "Author2085">() >(),  "Title1617" > , Rev< 10u, Arr64< Hash< "Author259">() >(),  "Title216" > , Rev< 11u, Arr64< Hash< "Author1973">() >(),  "Title1534" > , Rev< 12u, Arr64< Hash< "Author6">() >(),  "Title4" > , Rev< 13u, Arr64< Hash< "Author1461">() >(),  "Title1139" > , Rev< 14u, Arr64< Hash< "Author1636">() >(),  "Title1265" >  >() },
    { 3020u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2023-09 Library Evolution Poll Outcomes" >  >() },
    { 3021u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title690" >  >() },
    { 3022u, RevList< Rev< 0u, Arr64< Hash< "Author495">() >(),  "A Boring Thread Attributes Interface - HackMD" > , Rev< 1u, Arr64< Hash< "Darius Neau">() >(),  "A Boring Thread Attributes Interface" >  >() },
    { 3023u, RevList< Rev< 0u, Arr64< Hash< "Author24">() >(),  "C++ Should Be C++ - HackMD" > , Rev< 1u, Arr64< Hash< "Author2112">() >(),  "C++ Should Be C++ - HackMD" >  >() },
    { 3024u, RevList< Rev< 0u, Arr64< Hash< "Author1009">() >(),  "Title809" >  >() },
    { 3025u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "P3025R0.docx" >  >() },
    { 3026u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "P3026R0.docx" >  >() },
    { 3027u, RevList< Rev< 0u, Arr64< Hash< "Author349">() >(),  "UFCS is a breaking change, of the absolutely worst kind" >  >() },
    { 3028u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1075" >  >() },
    { 3029u, RevList< Rev< 0u, Arr64< Hash< "Author189">() >(),  "Better <code>mdspan</code>'s CTAD" > , Rev< 1u, Arr64< Hash< "Author1208">() >(),  "Better <code>mdspan</code>'s CTAD" >  >() },
    { 3031u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Resolve CWG2561, conversion function for lambda with explicit object parameter" >  >() },
    { 3032u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Less transient constexpr allocation" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Less transient constexpr allocation" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "Less transient constexpr allocation (and more constevalrelaxation)" >  >() },
    { 3033u, RevList< Rev< 0u, Arr64< Hash< "Chuanqi Xu">() >(),  "Should we import function bodies to get the better optimizations?" >  >() },
    { 3034u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "Module Declarations Shouldnt be Macros" > , Rev< 1u, Arr64< Hash< "Michael Spencer">() >(),  "Module Declarations Shouldnt be Macros" >  >() },
    { 3037u, RevList< Rev< 0u, Arr64< Hash< "Paul Keir">() >(),  "Title427" > , Rev< 1u, Arr64< Hash< "Paul Keir">() >(),  "Title739" > , Rev< 2u, Arr64< Hash< "Paul Keir">() >(),  "Title62" > , Rev< 3u, Arr64< Hash< "Paul Keir">() >(),  "Title202" > , Rev< 4u, Arr64< Hash< "Paul Keir">() >(),  "Title1594" > , Rev< 5u, Arr64< Hash< "Paul Keir">() >(),  "Title15" >  >() },
    { 3038u, RevList< Rev< 0u, Arr64< Hash< "Author1820">() >(),  "Title1407" >  >() },
    { 3039u, RevList< Rev< 0u, Arr64< Hash< "David Stone">() >(),  "Title1088" >  >() },
    { 3040u, RevList< Rev< 0u, Arr64< Hash< "Author391">() >(),  "C++ Standard Library Issues to be moved in Kona, Nov. 2023" >  >() },
    { 3041u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com">() >(),  "Title1684" >  >() },
    { 3042u, RevList< Rev< 0u, Arr64< Hash< "Author39">() >(),  "Title35" >  >() },
    { 3043u, RevList< Rev< 0u, Arr64< Hash< "Author2209">() >(),  "Using variable template template without meta programming" >  >() },
    { 3044u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "P3044R0" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "P3044R1" >  >() },
    { 3045u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" > , Rev< 2u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" > , Rev< 3u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" > , Rev< 4u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" > , Rev< 5u, Arr64< Hash< "Mateusz Pusz">() >(),  "Quantities and units library" >  >() },
    { 3046u, RevList< Rev< 0u, Arr64< Hash< "Author361">() >(),  "Core \"ready\" Issues" >  >() },
    { 3047u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Namespace relops From C++26" >  >() },
    { 3049u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "P3049R0" > , Rev< 1u, Arr64< Hash< "Michael Florian">() >(),  "P3049R1" >  >() },
    { 3050u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Optimize linalg::conjugated for noncomplex value types" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by optimizing linalg::conjugated for noncomplex value types" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by optimizing linalg::conjugated for noncomplex value types" > , Rev< 3u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by optimizing linalg::conjugated for noncomplex value types" >  >() },
    { 3051u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Response Files" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Response Files" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Response Files" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: Structured Response Files" >  >() },
    { 3052u, RevList< Rev< 0u, Arr64< Hash< "Author1748">() >(),  "<code>view_interface::at</code>" > , Rev< 1u, Arr64< Hash< "Author1472">() >(),  "<code>view_interface::at</code>" >  >() },
    { 3053u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2023-12 Library Evolution Polls" >  >() },
    { 3054u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2023-12 Library Evolution Poll Outcomes" >  >() },
    { 3055u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Relax wording to permit relocation optimizations in the STL" > , Rev< 1u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Relax wording to permit relocation optimizations in the STL" >  >() },
    { 3056u, RevList< Rev< 0u, Arr64< Hash< "Author1891">() >(),  "what ostream exception - HackMD" >  >() },
    { 3057u, RevList< Rev< 0u, Arr64< Hash< "Chuanqi Xu">() >(),  "Two finer-grained compilation model for named modules" >  >() },
    { 3059u, RevList< Rev< 0u, Arr64< Hash< "Author2159">() >(),  "Making user-defined constructors of view iterators/sentinels private" > , Rev< 1u, Arr64< Hash< "Author1716">() >(),  "Making user-defined constructors of view iterators/sentinels private" >  >() },
    { 3060u, RevList< Rev< 0u, Arr64< Hash< "Weile Wei">() >(),  "std::ranges::upto(n) - HackMD" > , Rev< 1u, Arr64< Hash< "Weile Wei">() >(),  "Add std::views::upto(n) - HackMD" > , Rev< 2u, Arr64< Hash< "Weile Wei">() >(),  "Add std::views::indices(n) - HackMD" >  >() },
    { 3061u, RevList< Rev< 0u, Arr64< Hash< "Author1682">() >(),  "P3061 WG21 2023-11 Kona Record of Discussion.docx" >  >() },
    { 3062u, RevList< Rev< 0u, Arr64< Hash< "Author1952">() >(),  "Title1514" >  >() },
    { 3064u, RevList< Rev< 0u, Arr64< Hash< "Author323">() >(),  "Title273" > , Rev< 1u, Arr64< Hash< "Author2045">() >(),  "Title1584" > , Rev< 2u, Arr64< Hash< "Author860">() >(),  "Title685" >  >() },
    { 3066u, RevList< Rev< 0u, Arr64< Hash< "Author1143">() >(),  "Title910" >  >() },
    { 3067u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Named permutation functions for `std::simd`" >  >() },
    { 3068u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr-throw" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr-throw R2" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "Allowing exception throwing in constant-evaluation" > , Rev< 3u, Arr64< Hash< "Hana Dusikova">() >(),  "Allowing exception throwing in constant-evaluation" > , Rev< 4u, Arr64< Hash< "Hana Dusikova">() >(),  "Allowing exception throwing in constant-evaluation" > , Rev< 5u, Arr64< Hash< "Hana Dusikova">() >(),  "D3068R5: Allowing exception throwing in constant-evaluation" > , Rev< 6u, Arr64< Hash< "Hana Dusikova">() >(),  "Allowing exception throwing in constant-evaluation" >  >() },
    { 3070u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting enums" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting enums" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting enums" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting enums" >  >() },
    { 3071u, RevList< Rev< 0u, Arr64< Hash< "Author1348">() >(),  "Protection against modifications in contracts" > , Rev< 1u, Arr64< Hash< "Author1550">() >(),  "Protection against modifications in contracts" >  >() },
    { 3072u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Hassle-free thread attributes - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Hassle-free thread attributes - HackMD" > , Rev< 2u, Arr64< Hash< "Zhihao Yuan">() >(),  "Hassle-free thread attributes - HackMD" >  >() },
    { 3073u, RevList< Rev< 0u, Arr64< Hash< "Author1286">() >(),  "Title997" >  >() },
    { 3074u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr union lifetime" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "std::uninitialized<T>" > , Rev< 2u, Arr64< Hash< "Barry Revzin">() >(),  "std::uninitialized<T>" > , Rev< 3u, Arr64< Hash< "Barry Revzin">() >(),  "trivial union (was std::uninitialized<T>)" > , Rev< 4u, Arr64< Hash< "Barry Revzin">() >(),  "trivial unions (was std::uninitialized<T>)" > , Rev< 5u, Arr64< Hash< "Barry Revzin">() >(),  "trivial unions (was std::uninitialized<T>)" > , Rev< 6u, Arr64< Hash< "Barry Revzin">() >(),  "trivial unions (was std::uninitialized<T>)" > , Rev< 7u, Arr64< Hash< "Barry Revzin">() >(),  "trivial unions (was std::uninitialized<T>)" >  >() },
    { 3075u, RevList< Rev< 0u, Arr64< Hash< "Shafik Yaghmour">() >(),  "Title775" >  >() },
    { 3079u, RevList< Rev< 0u, Arr64< Hash< "Author1564">() >(),  "Should ignore and observe exist for constant evaluation of contracts?" >  >() },
    { 3081u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title187" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title1061" > , Rev< 2u, Arr64< Hash< "Herb Sutter">() >(),  "Title1317" >  >() },
    { 3084u, RevList< Rev< 0u, Arr64< Hash< "Author180">() >(),  "Title153" >  >() },
    { 3085u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "noexcept policy for SD-9 (throws nothing)" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "noexcept policy for SD-9 (throws nothing)" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "noexcept policy for SD-9 (throws nothing)" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "noexcept policy for SD-9 (throws nothing)" >  >() },
    { 3086u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title525" > , Rev< 1u, Arr64< Hash< "Mingxin Wang">() >(),  "Title177" > , Rev< 2u, Arr64< Hash< "Mingxin Wang">() >(),  "Title903" > , Rev< 3u, Arr64< Hash< "Mingxin Wang">() >(),  "Title1523" >  >() },
    { 3087u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "Make direct-initialization for enumeration types at least as permissive as direct-list-initialization" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "Make direct-initialization for enumeration types at least as permissive as direct-list-initialization" >  >() },
    { 3088u, RevList< Rev< 0u, Arr64< Hash< "Author148">() >(),  "Title127" > , Rev< 1u, Arr64< Hash< "Author455">() >(),  "Title384" >  >() },
    { 3090u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "std::execution Introduction" >  >() },
    { 3091u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "Better lookups for `map` and `unordered_map`" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "Better Lookups for `map` and `unordered_map`" > , Rev< 2u, Arr64< Hash< "Pablo Halpern">() >(),  "Better Lookups for `map` and `unordered_map`" > , Rev< 3u, Arr64< Hash< "Pablo Halpern">() >(),  "Better Lookups for `map` and `unordered_map`" >  >() },
    { 3092u, RevList< Rev< 0u, Arr64< Hash< "Chuanqi Xu">() >(),  "Modules ABI Requirement" >  >() },
    { 3093u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Attributes on expressions" >  >() },
    { 3094u, RevList< Rev< 0u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 1u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 2u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 3u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 4u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 5u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" > , Rev< 6u, Arr64< Hash< "Mateusz Pusz">() >(),  "`std::basic_fixed_string`" >  >() },
    { 3095u, RevList< Rev< 0u, Arr64< Hash< "Saksham Sharma">() >(),  "P3095R0" >  >() },
    { 3096u, RevList< Rev< 0u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 1u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 2u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 3u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 4u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 5u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 6u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 7u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" > , Rev< 8u, Arr64< Hash< "Adam Lach">() >(),  "Function Parameter Reflection in Reflection for C++26" >  >() },
    { 3097u, RevList< Rev< 0u, Arr64< Hash< "Timur Doumler">() >(),  "Title1468" >  >() },
    { 3098u, RevList< Rev< 0u, Arr64< Hash< "Author709">() >(),  "Contracts for C++: Postcondition captures" > , Rev< 1u, Arr64< Hash< "Author553">() >(),  "Contracts for C++: Postcondition captures" >  >() },
    { 3100u, RevList< Rev< 0u, Arr64< Hash< "Author1381">() >(),  "Title1073" > , Rev< 1u, Arr64< Hash< "Author480">() >(),  "Title399" >  >() },
    { 3101u, RevList< Rev< 0u, Arr64< Hash< "Ran Regev">() >(),  "Differentiating potentially throwing and non throwing violation handlers" >  >() },
    { 3102u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title86" >  >() },
    { 3103u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "More bitset operations" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "More bitset operations" > , Rev< 2u, Arr64< Hash< "Jan Schultke">() >(),  "More bitset operations" >  >() },
    { 3104u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "Bit permutations" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "Bit permutations" > , Rev< 2u, Arr64< Hash< "Jan Schultke">() >(),  "Bit permutations" > , Rev< 3u, Arr64< Hash< "Jan Schultke">() >(),  "Bit permutations" >  >() },
    { 3105u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "constexpr std::uncaught_exceptions()" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "constexpr std::uncaught_exceptions()" > , Rev< 2u, Arr64< Hash< "Jan Schultke">() >(),  "constexpr std::uncaught_exceptions()" >  >() },
    { 3106u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Clarifying rules for brace elision in aggregateinitialization" > , Rev< 1u, Arr64< Hash< "James Touton">() >(),  "Clarifying rules for brace elision in aggregateinitialization" >  >() },
    { 3107u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" > , Rev< 4u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" > , Rev< 5u, Arr64< Hash< "Victor Zverovich">() >(),  "Permit an efficient implementation of std::print" >  >() },
    { 3109u, RevList< Rev< 0u, Arr64< Hash< "Author1289">() >(),  "Title1000" >  >() },
    { 3110u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Array element initialization via pattern expansion" >  >() },
    { 3111u, RevList< Rev< 0u, Arr64< Hash< "Author1492">() >(),  "Atomic Reduction Operations" > , Rev< 1u, Arr64< Hash< "Author1238">() >(),  "Atomic Reduction Operations" > , Rev< 2u, Arr64< Hash< "Author372">() >(),  "Atomic Reduction Operations" > , Rev< 3u, Arr64< Hash< "Author393">() >(),  "Atomic Reduction Operations" > , Rev< 4u, Arr64< Hash< "Author330">() >(),  "Atomic Reduction Operations" > , Rev< 5u, Arr64< Hash< "Author1977">() >(),  "Atomic Reduction Operations" >  >() },
    { 3112u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Specify Constructor of `std::nullopt_t`" >  >() },
    { 3113u, RevList< Rev< 0u, Arr64< Hash< "Author761">() >(),  "2024-02-01 telecon" >  >() },
    { 3114u, RevList< Rev< 0u, Arr64< Hash< "Author1599">() >(),  "dwdwedwed" >  >() },
    { 3115u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title838" >  >() },
    { 3116u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Policy for `explicit`" >  >() },
    { 3117u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Extending Conditionally Borrowed" > , Rev< 1u, Arr64< Hash< "Zach Laine">() >(),  "Extending Conditionally Borrowed" >  >() },
    { 3119u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1037" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1408" >  >() },
    { 3122u, RevList< Rev< 0u, Arr64< Hash< "Author421">() >(),  "Using [[nodiscard]] should be Recommended Practice" > , Rev< 1u, Arr64< Hash< "Author320">() >(),  "Using [[nodiscard]] should be Recommended Practice" >  >() },
    { 3123u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-02 Library Evolution Polls" >  >() },
    { 3124u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-02 Library Evolution Poll Outcomes" >  >() },
    { 3125u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "D3125R0: Pointer Tagging" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr pointer tagging" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr pointer tagging" > , Rev< 3u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr pointer tagging" >  >() },
    { 3126u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3126r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3126r1" > , Rev< 2u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3126r2" > , Rev< 3u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3126r3" >  >() },
    { 3127u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3127r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3127r1" >  >() },
    { 3128u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3128r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3128r1" > , Rev< 2u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3128r2" > , Rev< 3u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3128r3" >  >() },
    { 3129u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3129r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3129r2" >  >() },
    { 3130u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3130r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3130r1" > , Rev< 2u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3130r2" > , Rev< 3u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3130r3" >  >() },
    { 3131u, RevList< Rev< 0u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3131r0" > , Rev< 1u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3131r1" > , Rev< 2u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3131r2" > , Rev< 3u, Arr64< Hash< "Phil Ratzloff">() >(),  "Test document for P3131r3" >  >() },
    { 3133u, RevList< Rev< 0u, Arr64< Hash< "Chip Hogg">() >(),  "Fast first-factor finding function" >  >() },
    { 3135u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Extensions" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Extensions" >  >() },
    { 3136u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "Retiring niebloids" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "Retiring niebloids" >  >() },
    { 3137u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "views::to_input" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "views::to_input" > , Rev< 2u, Arr64< Hash< "Tim Song">() >(),  "views::to_input" > , Rev< 3u, Arr64< Hash< "Tim Song">() >(),  "views::to_input" >  >() },
    { 3138u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "views::cache_last" > , Rev< 1u, Arr64< Hash< "Tim Song">() >(),  "views::cache_last" > , Rev< 2u, Arr64< Hash< "Tim Song">() >(),  "views::cache_last" > , Rev< 3u, Arr64< Hash< "Tim Song">() >(),  "views::cache_latest" > , Rev< 4u, Arr64< Hash< "Tim Song">() >(),  "views::cache_latest" > , Rev< 5u, Arr64< Hash< "Tim Song">() >(),  "views::cache_latest" >  >() },
    { 3139u, RevList< Rev< 0u, Arr64< Hash< "Zhihao Yuan">() >(),  "Pointer cast for unique_ptr - HackMD" > , Rev< 1u, Arr64< Hash< "Zhihao Yuan">() >(),  "Pointer cast for unique_ptr - HackMD" >  >() },
    { 3140u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "std::int_least128_t" >  >() },
    { 3142u, RevList< Rev< 0u, Arr64< Hash< "Author1166">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" >  >() },
    { 3143u, RevList< Rev< 0u, Arr64< Hash< "Author1888">() >(),  "An in-depth walk-through of the example in P3090R0" >  >() },
    { 3144u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Deprecate Delete of a Pointer to an Incomplete Type" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Deprecate Delete of a Pointer to an Incomplete Type" > , Rev< 2u, Arr64< Hash< "Alisdair Meredith">() >(),  "Deleting a Pointer to an Incomplete Type Should be Ill-formed" >  >() },
    { 3146u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Clarifying std::variant converting construction" > , Rev< 1u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Clarifying std::variant converting construction" > , Rev< 2u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Clarifying std::variant converting construction" >  >() },
    { 3147u, RevList< Rev< 0u, Arr64< Hash< "Author1577">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1926">() >(),  "A Direction for Vector" >  >() },
    { 3148u, RevList< Rev< 0u, Arr64< Hash< "Author312">() >(),  "Some Proposed Improvements to the Presentation of Requirements for Functions" > , Rev< 1u, Arr64< Hash< "Author1848">() >(),  "Formatting of chrono Time Values" >  >() },
    { 3149u, RevList< Rev< 0u, Arr64< Hash< "Ian Petersen">() >(),  "Creating scopes for non-sequential concurrency" > , Rev< 1u, Arr64< Hash< "Ian Petersen">() >(),  "Creating scopes for non-sequential concurrency" > , Rev< 2u, Arr64< Hash< "Ian Petersen">() >(),  "Creating scopes for non-sequential concurrency" > , Rev< 3u, Arr64< Hash< "Ian Petersen">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 4u, Arr64< Hash< "Ian Petersen">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 5u, Arr64< Hash< "Ian Petersen">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 6u, Arr64< Hash< "2">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 7u, Arr64< Hash< "2">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 8u, Arr64< Hash< "2">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" > , Rev< 9u, Arr64< Hash< "2">() >(),  "`async_scope` -- Creating scopes for non-sequentialconcurrency" >  >() },
    { 3150u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG14 2024/02/15 P3150R0.docx" >  >() },
    { 3151u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG19 2024/02/15 P3151R0.docx" >  >() },
    { 3152u, RevList< Rev< 0u, Arr64< Hash< "Author781">() >(),  "Title635" > , Rev< 1u, Arr64< Hash< "Author1138">() >(),  "Title905" >  >() },
    { 3153u, RevList< Rev< 0u, Arr64< Hash< "Author1119">() >(),  "An allocator-aware optional type" >  >() },
    { 3154u, RevList< Rev< 0u, Arr64< Hash< "Elias Kosunen">() >(),  "Deprecating signed character types in iostreams" > , Rev< 1u, Arr64< Hash< "Elias Kosunen">() >(),  "Deprecating signed character types in iostreams" >  >() },
    { 3155u, RevList< Rev< 0u, Arr64< Hash< "Author1371">() >(),  "Title1063" >  >() },
    { 3156u, RevList< Rev< 0u, Arr64< Hash< "Author122">() >(),  "<tt>empty_checkable_range</tt>" >  >() },
    { 3157u, RevList< Rev< 0u, Arr64< Hash< "Author1924">() >(),  "Title1488" > , Rev< 1u, Arr64< Hash< "Andrei Alexandrescu">() >(),  "Generative Extensions for Reflection" >  >() },
    { 3158u, RevList< Rev< 0u, Arr64< Hash< "James Touton">() >(),  "Headless Template Template Parameters" >  >() },
    { 3159u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "C++ Range Adaptors and Parallel Algorithms" >  >() },
    { 3160u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "An Allocator-aware `inplace_vector`" > , Rev< 1u, Arr64< Hash< "Pablo Halpern">() >(),  "An Allocator-Aware `inplace_vector`" > , Rev< 2u, Arr64< Hash< "Pablo Halpern">() >(),  "An Allocator-Aware `inplace_vector`" >  >() },
    { 3161u, RevList< Rev< 0u, Arr64< Hash< "Tiago Freire">() >(),  "P3161R0 - Unified integer overflow arithmetic" > , Rev< 1u, Arr64< Hash< "Tiago Freire">() >(),  "D3161R1 - Unified integer overflow arithmetic" > , Rev< 2u, Arr64< Hash< "Tiago Freire">() >(),  "R3161R2 - Unified integer overflow arithmetic" > , Rev< 3u, Arr64< Hash< "Tiago Freire">() >(),  "R3161R3 - Unified integer overflow arithmetic" > , Rev< 4u, Arr64< Hash< "Tiago Freire">() >(),  "R3161R4 - Unified integer overflow arithmetic" >  >() },
    { 3162u, RevList< Rev< 0u, Arr64< Hash< "Author1397">() >(),  "LEWG [[nodiscard]] policy - HackMD" >  >() },
    { 3164u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Improving diagnostics for sender expressions" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Improving diagnostics for sender expressions" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Improving diagnostics for sender expressions" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "Early Diagnostics for Sender Expressions" >  >() },
    { 3165u, RevList< Rev< 0u, Arr64< Hash< "Author1640">() >(),  "Contracts on virtual functions for the Contracts MVP" >  >() },
    { 3166u, RevList< Rev< 0u, Arr64< Hash< "Lewis Baker">() >(),  "Static Exception Specifications" >  >() },
    { 3167u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Attributes for the result name in a postcondition assertion" >  >() },
    { 3168u, RevList< Rev< 0u, Arr64< Hash< "Author788">() >(),  "Give std::optional range support - HackMD" > , Rev< 1u, Arr64< Hash< "4">() >(),  "Give std::optional range support - HackMD" > , Rev< 2u, Arr64< Hash< "4">() >(),  "Give std::optional range support - HackMD" >  >() },
    { 3169u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "Inherited contracts" >  >() },
    { 3170u, RevList< Rev< 0u, Arr64< Hash< "Author566">() >(),  "sinkable exception error message - HackMD" >  >() },
    { 3171u, RevList< Rev< 0u, Arr64< Hash< "Peter Dimov">() >(),  "Adding functionality to placeholder types" >  >() },
    { 3172u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Using `this` in constructor preconditions" >  >() },
    { 3173u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title1434" >  >() },
    { 3174u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21" >  >() },
    { 3175u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Reconsidering the std::execution::on algorithm" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Reconsidering the std::execution::on algorithm" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "Reconsidering the std::execution::on algorithm" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "Reconsidering the std::execution::on algorithm" >  >() },
    { 3176u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "The Oxford variadic comma" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "The Oxford variadic comma" >  >() },
    { 3177u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "const prvalues in the conditional operator" >  >() },
    { 3178u, RevList< Rev< 0u, Arr64< Hash< "TPK Healy">() >(),  "PxxxxR0: std::exception_typeid" > , Rev< 1u, Arr64< Hash< "Thomas PK">() >(),  "Retrieval of Exception Information" >  >() },
    { 3179u, RevList< Rev< 0u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 1u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 2u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 3u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 4u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 5u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 6u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" > , Rev< 7u, Arr64< Hash< "Ruslan Arutyunyan">() >(),  "C++ parallel range algorithms" >  >() },
    { 3180u, RevList< Rev< 0u, Arr64< Hash< "Author1482">() >(),  "C++ Standard Library Issues to be moved in Tokyo, Mar. 2024" >  >() },
    { 3181u, RevList< Rev< 0u, Arr64< Hash< "Hans Boehm">() >(),  "Atomic stores and object lifetimes" >  >() },
    { 3182u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Add `pop_value` methods to container adaptors" > , Rev< 1u, Arr64< Hash< "Brian Bi">() >(),  "Add container pop methods that return the popped value" >  >() },
    { 3183u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Contract testing support" > , Rev< 1u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Contract testing support" >  >() },
    { 3185u, RevList< Rev< 0u, Arr64< Hash< "Thomas Rodgers">() >(),  "A proposed direction for C++ Standard Networking based on IETF TAPS" >  >() },
    { 3187u, RevList< Rev< 1u, Arr64< Hash< "Kirk Shoop">() >(),  "remove ensure_started and start_detached from P2300" >  >() },
    { 3188u, RevList< Rev< 0u, Arr64< Hash< "Author121">() >(),  "Proxy: A Pointer-Semantics-Based Polymorphism Library" >  >() },
    { 3189u, RevList< Rev< 0u, Arr64< Hash< "Author1750">() >(),  "P3189R0" >  >() },
    { 3190u, RevList< Rev< 0u, Arr64< Hash< "Author2139">() >(),  "talk_ewg" >  >() },
    { 3191u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Feedback on the scalability of contract violation handlers in P2900" >  >() },
    { 3192u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "PowerPoint-Prsentation" >  >() },
    { 3194u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "PowerPoint-Prsentation" >  >() },
    { 3196u, RevList< Rev< 0u, Arr64< Hash< "Author971">() >(),  "Core \"ready\" Issues" >  >() },
    { 3197u, RevList< Rev< 0u, Arr64< Hash< "Author1102">() >(),  "A response to the Tokyo EWG polls on the Contracts MVP" >  >() },
    { 3198u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "A takeaway from the Tokyo LEWG meeting on Contracts MVP" >  >() },
    { 3199u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Choices for ~make_optional~ and ~value_or()~" >  >() },
    { 3201u, RevList< Rev< 0u, Arr64< Hash< "Author69">() >(),  "LEWG [[nodiscard]] policy - HackMD" > , Rev< 1u, Arr64< Hash< "Author1970">() >(),  "LEWG [[nodiscard]] policy - HackMD" >  >() },
    { 3203u, RevList< Rev< 0u, Arr64< Hash< "name">() >(),  "Title640" >  >() },
    { 3204u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title332" >  >() },
    { 3205u, RevList< Rev< 0u, Arr64< Hash< "Gaaper A~man">() >(),  "Throwing from a function should be a contract violation." >  >() },
    { 3206u, RevList< Rev< 0u, Arr64< Hash< "Maikel Nadolski">() >(),  "A sender query for completion behaviour" >  >() },
    { 3207u, RevList< Rev< 0u, Arr64< Hash< "Author1178">() >(),  "More & like - HackMD" >  >() },
    { 3208u, RevList< Rev< 0u, Arr64< Hash< "Sunghyun Min">() >(),  "Title1671" >  >() },
    { 3210u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "P3210R0 A Postcondition *is* a Pattern Match" > , Rev< 1u, Arr64< Hash< "Andrew Tomazos">() >(),  "P3210R1 A Postcondition *is* a Pattern Match" > , Rev< 2u, Arr64< Hash< "Andrew Tomazos">() >(),  "P3210R2 A Postcondition *is* a Pattern Match" >  >() },
    { 3211u, RevList< Rev< 0u, Arr64< Hash< "Author648">() >(),  "<code>views::transform_join</code>" >  >() },
    { 3212u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "The contract of sort()" >  >() },
    { 3213u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-04 Library Evolution Polls" >  >() },
    { 3214u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-04 Library Evolution Poll Outcomes" >  >() },
    { 3215u, RevList< Rev< 0u, Arr64< Hash< "Author1699">() >(),  "Using variable template template without meta programming" >  >() },
    { 3216u, RevList< Rev< 0u, Arr64< Hash< "Author144">() >(),  "<code>views::slice</code>" >  >() },
    { 3217u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Adjoints to \"Enabling list-initialization for algorithms\": find_last" >  >() },
    { 3218u, RevList< Rev< 0u, Arr64< Hash< "Author1062">() >(),  "const references to constexpr variables - HackMD" >  >() },
    { 3220u, RevList< Rev< 0u, Arr64< Hash< "Author1756">() >(),  "<code>views::delimit</code>" >  >() },
    { 3221u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "Disable pointers to contracted functions" >  >() },
    { 3222u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by adding transposed special cases for P2642 layouts" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by adding transposed special cases for P2642 layouts" >  >() },
    { 3223u, RevList< Rev< 0u, Arr64< Hash< "Author1496">() >(),  "Making std::basic_istream::ignore less surprising" > , Rev< 1u, Arr64< Hash< "Author1021">() >(),  "Making std::istream::ignore less surprising" >  >() },
    { 3224u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "PowerPoint-Prsentation" >  >() },
    { 3225u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "PowerPoint-Prsentation" >  >() },
    { 3226u, RevList< Rev< 0u, Arr64< Hash< "Author1818">() >(),  "Title1405" >  >() },
    { 3227u, RevList< Rev< 0u, Arr64< Hash< "Author1186">() >(),  "Fixing the library API for contract violation handling" > , Rev< 1u, Arr64< Hash< "Author1415">() >(),  "Fixing the library API for contract violation handling" >  >() },
    { 3228u, RevList< Rev< 0u, Arr64< Hash< "Author2080">() >(),  "Title1612" > , Rev< 1u, Arr64< Hash< "Author2094">() >(),  "Title1624" >  >() },
    { 3229u, RevList< Rev< 0u, Arr64< Hash< "Author1347">() >(),  "Title1042" > , Rev< 1u, Arr64< Hash< "Author1645">() >(),  "Title1274" >  >() },
    { 3230u, RevList< Rev< 0u, Arr64< Hash< "Author2018">() >(),  "<code>views::(take|drop)_exactly</code>" > , Rev< 1u, Arr64< Hash< "Author1874">() >(),  "<code>views::unchecked_(take|drop)</code>" > , Rev< 2u, Arr64< Hash< "Author365">() >(),  "<code>views::unchecked_(take|drop)</code>" >  >() },
    { 3232u, RevList< Rev< 0u, Arr64< Hash< "Author155">() >(),  "User-defined erroneous behaviour" > , Rev< 1u, Arr64< Hash< "Author1443">() >(),  "User-defined erroneous behaviour" >  >() },
    { 3233u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Issues with P2786 (\"Trivial Relocatability For C++26\")" >  >() },
    { 3234u, RevList< Rev< 0u, Arr64< Hash< "Glen Joseph">() >(),  "Utility to check if a pointer is in a given range" > , Rev< 1u, Arr64< Hash< "Glen Joseph">() >(),  "Utility to check if a pointer is in a given range" >  >() },
    { 3235u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "std::print more types faster with less memory" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "std::print more types faster with less memory" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "std::print more types faster with less memory" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "std::print more types faster with less memory" >  >() },
    { 3236u, RevList< Rev< 0u, Arr64< Hash< "Alan de">() >(),  "Please reject P2786 and adopt P1144" > , Rev< 1u, Arr64< Hash< "Alan de">() >(),  "Please reject P2786 and adopt P1144" >  >() },
    { 3237u, RevList< Rev< 0u, Arr64< Hash< "Andrei Zissu">() >(),  "Matrix Representation of Contract Semantics" > , Rev< 1u, Arr64< Hash< "Andrei Zissu">() >(),  "P3237 - Matrix Representation of Contract Semantics" > , Rev< 2u, Arr64< Hash< "Andrei Zissu">() >(),  "P3237 - Matrix Representation of Contract Semantics" >  >() },
    { 3238u, RevList< Rev< 0u, Arr64< Hash< "Author518">() >(),  "An alternate proposal for naming contract semantics" >  >() },
    { 3239u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "A Relocating Swap" >  >() },
    { 3240u, RevList< Rev< 0u, Arr64< Hash< "Author1902">() >(),  "p3240" >  >() },
    { 3241u, RevList< Rev< 0u, Arr64< Hash< "Author1200">() >(),  "P3241" >  >() },
    { 3242u, RevList< Rev< 0u, Arr64< Hash< "Nicolas Morales">() >(),  "Copy and fill for mdspan" > , Rev< 1u, Arr64< Hash< "Nicolas Morales">() >(),  "Copy and fill for mdspan" >  >() },
    { 3243u, RevList< Rev< 0u, Arr64< Hash< "Author1294">() >(),  "Give <code>std::optional</code> Range Support" >  >() },
    { 3244u, RevList< Rev< 0u, Arr64< Hash< "Author269">() >(),  "<code>[[nodiscard]]</code> Policy" >  >() },
    { 3245u, RevList< Rev< 0u, Arr64< Hash< "Xavier Bonaventura">() >(),  "Allow `[[nodiscard]]` in type alias declarations" > , Rev< 1u, Arr64< Hash< "Xavier Bonaventura">() >(),  "Allow `[[nodiscard]]` in type alias declarations" > , Rev< 2u, Arr64< Hash< "Xavier Bonaventura">() >(),  "Allow `[[nodiscard]]` in type alias declarations" >  >() },
    { 3247u, RevList< Rev< 0u, Arr64< Hash< "Author1872">() >(),  "Deprecate the notion of trivial types" > , Rev< 1u, Arr64< Hash< "Author188">() >(),  "Deprecate the notion of trivial types" > , Rev< 2u, Arr64< Hash< "Author1696">() >(),  "Deprecate the notion of trivial types" >  >() },
    { 3248u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "Require [u]intptr_t" > , Rev< 1u, Arr64< Hash< "Gonzalo Brito">() >(),  "Require [u]intptr_t" > , Rev< 2u, Arr64< Hash< "Gonzalo Brito">() >(),  "Require [u]intptr_t" > , Rev< 3u, Arr64< Hash< "Gonzalo Brito">() >(),  "Require [u]intptr_t" >  >() },
    { 3249u, RevList< Rev< 0u, Arr64< Hash< "Ran Regev">() >(),  "P3249R0 - unified pattern matching and contracts syntax" >  >() },
    { 3250u, RevList< Rev< 0u, Arr64< Hash< "Author642">() >(),  "C++ contracts with regards to function pointers" >  >() },
    { 3251u, RevList< Rev< 0u, Arr64< Hash< "Author1906">() >(),  "C++ Contracts and Coroutines" >  >() },
    { 3253u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Distinguishing between member and free coroutines" >  >() },
    { 3254u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Reserve identifiers preceded by `@` for non-ignorableannotation tokens" >  >() },
    { 3255u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Expose whether atomic notifying operations are lockfree" > , Rev< 1u, Arr64< Hash< "Brian Bi">() >(),  "Expose whether atomic notifying operations are lockfree" >  >() },
    { 3257u, RevList< Rev< 0u, Arr64< Hash< "Author1691">() >(),  "Make the predicate of <TT>contract_assert</TT> more regular" >  >() },
    { 3258u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title402" >  >() },
    { 3259u, RevList< Rev< 0u, Arr64< Hash< "Author2187">() >(),  "const by default - HackMD" >  >() },
    { 3261u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title114" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title606" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title1580" >  >() },
    { 3263u, RevList< Rev< 0u, Arr64< Hash< "Tiago Freire">() >(),  "P3263R0 - Encoding annotated char" >  >() },
    { 3264u, RevList< Rev< 0u, Arr64< Hash< "Author701">() >(),  "Double-evaluation of preconditions" > , Rev< 1u, Arr64< Hash< "Author953">() >(),  "Double-evaluation of preconditions" >  >() },
    { 3265u, RevList< Rev< 0u, Arr64< Hash< "Author1392">() >(),  "Ship Contracts in a TS" > , Rev< 1u, Arr64< Hash< "Author124">() >(),  "Ship Contracts in a TS" > , Rev< 2u, Arr64< Hash< "Author491">() >(),  "Ship Contracts in a TS" > , Rev< 3u, Arr64< Hash< "Author645">() >(),  "Ship Contracts in a TS" >  >() },
    { 3266u, RevList< Rev< 0u, Arr64< Hash< "Author817">() >(),  "non referenceable types - HackMD" >  >() },
    { 3267u, RevList< Rev< 0u, Arr64< Hash< "Author477">() >(),  "C++ contracts implementation strategies" > , Rev< 1u, Arr64< Hash< "Author964">() >(),  "C++ contracts implementation strategies" >  >() },
    { 3268u, RevList< Rev< 0u, Arr64< Hash< "Author1867">() >(),  "C++ Contracts Constification Challenges Concerning Current Code" >  >() },
    { 3269u, RevList< Rev< 0u, Arr64< Hash< "Author228">() >(),  "Do Not Ship Contracts as a TS" >  >() },
    { 3270u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1036" >  >() },
    { 3271u, RevList< Rev< 0u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title60" > , Rev< 1u, Arr64< Hash< "Lisa Lippincott">() >(),  "Title1284" >  >() },
    { 3273u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Introspection of Closure Types" >  >() },
    { 3274u, RevList< Rev< 0u, Arr64< Hash< "Author1692">() >(),  "Title1313" >  >() },
    { 3275u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Replace simd operator[] with getter and setter functions or not [P3275R0]" >  >() },
    { 3276u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title59" >  >() },
    { 3278u, RevList< Rev< 0u, Arr64< Hash< "Nina Ranns">() >(),  "P3278R0" >  >() },
    { 3279u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "CWG2463: What \"trivially fooable\" should mean" >  >() },
    { 3281u, RevList< Rev< 0u, Arr64< Hash< "Author545">() >(),  "Contract Checks Should be Regular C++" >  >() },
    { 3282u, RevList< Rev< 0u, Arr64< Hash< "Detlef Vollmann">() >(),  "Static Storage for C++ Concurrent <tt>bounded_queue</tt>" >  >() },
    { 3283u, RevList< Rev< 0u, Arr64< Hash< "Author1824">() >(),  "P3283. Adding .first() and .last() to strings" >  >() },
    { 3284u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "`finally`, `write_env`, and `unstoppable` SenderAdaptors" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "`finally`, `write_env`, and `unstoppable` SenderAdaptors" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "`write_env` and `unstoppable` Sender Adaptors" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "`write_env` and `unstoppable` Sender Adaptors" >  >() },
    { 3285u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title108" >  >() },
    { 3286u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Module Metadata Distributed With Pre-Built Libraries" >  >() },
    { 3287u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Exploration of namespaces for std::simd [P3287R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Exploration of namespaces for std::simd [P3287R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Exploration of namespaces for std::simd [P3287R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Exploration of namespaces for std::simd [P3287R3]" >  >() },
    { 3288u, RevList< Rev< 0u, Arr64< Hash< "TPK Healy">() >(),  "std::elide" > , Rev< 1u, Arr64< Hash< "Thomas PK">() >(),  "std::elide" > , Rev< 2u, Arr64< Hash< "Thomas PK">() >(),  "std::elide" > , Rev< 3u, Arr64< Hash< "Thomas PK">() >(),  "std::elide" >  >() },
    { 3289u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "consteval blocks" > , Rev< 1u, Arr64< Hash< "Wyatt Childers">() >(),  "consteval blocks" >  >() },
    { 3290u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title192" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1334" > , Rev< 2u, Arr64< Hash< "Joshua Berne">() >(),  "Title1072" >  >() },
    { 3292u, RevList< Rev< 0u, Arr64< Hash< "David Goldblatt">() >(),  "P3292R0R0: Provenance and Concurrency" >  >() },
    { 3293u, RevList< Rev< 0u, Arr64< Hash< "Peter Dimov">() >(),  "Splicing a base class subobject" > , Rev< 1u, Arr64< Hash< "Peter Dimov">() >(),  "Splicing a base class subobject" >  >() },
    { 3294u, RevList< Rev< 0u, Arr64< Hash< "Andrei Alexandrescu">() >(),  "Code Injection with Token Sequences" > , Rev< 1u, Arr64< Hash< "Andrei Alexandrescu">() >(),  "Code Injection with Token Sequences" > , Rev< 2u, Arr64< Hash< "Andrei Alexandrescu">() >(),  "Code Injection with Token Sequences" >  >() },
    { 3295u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding constexpr containers and constexpr exception types" > , Rev< 1u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding constexpr containers and constexpr exception types" > , Rev< 2u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding constexpr containers and constexpr exception types" > , Rev< 3u, Arr64< Hash< "Ben Craig">() >(),  "Freestanding constexpr containers and constexpr exception types" >  >() },
    { 3296u, RevList< Rev< 0u, Arr64< Hash< "Anthony Williams">() >(),  "let_async_scope.html" > , Rev< 1u, Arr64< Hash< "Anthony Williams">() >(),  "let_async_scope.html" > , Rev< 2u, Arr64< Hash< "Anthony Williams">() >(),  "let_async_scope.html" > , Rev< 3u, Arr64< Hash< "Anthony Williams">() >(),  "let_async_scope.html" > , Rev< 4u, Arr64< Hash< "Anthony Williams">() >(),  "let_async_scope.html" >  >() },
    { 3297u, RevList< Rev< 0u, Arr64< Hash< "Author1236">() >(),  "C++26 Needs Contract Checking" > , Rev< 1u, Arr64< Hash< "Author1481">() >(),  "C++26 Needs Contract Checking" >  >() },
    { 3298u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Implicit user-defined conversion functions as operator.()" > , Rev< 1u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Implicit user-defined conversion functions as operator.()" >  >() },
    { 3299u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 1u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend <code>std::simd</code> with range constructors" > , Rev< 3u, Arr64< Hash< "Daniel Towner">() >(),  "Proposal to extend std::simd with range constructors" >  >() },
    { 3300u, RevList< Rev< 0u, Arr64< Hash< "Bryce Adelstein">() >(),  "C++ Asynchronous Parallel Algorithms" >  >() },
    { 3301u, RevList< Rev< 0u, Arr64< Hash< "Lauri Vasama">() >(),  "inplace_stoppable_base" >  >() },
    { 3302u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "SG16: Unicode meeting summaries 2024-03-13 through 2024-05-08" >  >() },
    { 3303u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "Fixing Lazy Sender Algorithm Customization" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "Fixing Lazy Sender Algorithm Customization" >  >() },
    { 3304u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG14 2024/02/15 P3304R0.docx" >  >() },
    { 3305u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG19 2024/05/22 P3305R0.docx" >  >() },
    { 3306u, RevList< Rev< 0u, Arr64< Hash< "Author2049">() >(),  "Atomic Read-Modify-Write Improvements" >  >() },
    { 3307u, RevList< Rev< 0u, Arr64< Hash< "Author1871">() >(),  "Floating-Point Maximum/Minimum Function Objects" >  >() },
    { 3308u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "mdarray design questions and answers" >  >() },
    { 3309u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr atomic<T> and atomic_ref<T>" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr atomic<T> and atomic_ref<T>" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr atomic<T> and atomic_ref<T>" > , Rev< 3u, Arr64< Hash< "Hana Dusikova">() >(),  "atomic<T> and atomic_ref<T>" >  >() },
    { 3310u, RevList< Rev< 0u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving partial ordering issues introduced by P0522R0" > , Rev< 1u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving partial ordering issues introduced by P0522R0" > , Rev< 2u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving partial ordering issues introduced by P0522R0" > , Rev< 3u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving partial ordering issues introduced by P0522R0" > , Rev< 4u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving issues introduced by P0522R0" > , Rev< 5u, Arr64< Hash< "Matheus Izvekov">() >(),  "Solving issues introduced by relaxed template templateparameter matching" >  >() },
    { 3311u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "An opt-in approach for integration of traditional assert facilities in C++ contracts" >  >() },
    { 3312u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Overload Set Types" > , Rev< 1u, Arr64< Hash< "Bengt Gustafsson">() >(),  "Overload Set Types" >  >() },
    { 3313u, RevList< Rev< 0u, Arr64< Hash< "Khalil Estell">() >(),  "Impacts of noexept on ARM table based exception metadata" >  >() },
    { 3314u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-07 Library Evolution Polls" >  >() },
    { 3315u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-07 Library Evolution Poll Outcomes" >  >() },
    { 3316u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "A more predictable unchecked semantic" >  >() },
    { 3317u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "Compile time resolved contracts" >  >() },
    { 3318u, RevList< Rev< 0u, Arr64< Hash< "Author529">() >(),  "Throwing violation handlers, from an application programming perspective" >  >() },
    { 3319u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R3]" > , Rev< 4u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R4]" > , Rev< 5u, Arr64< Hash< "Matthias Kretz">() >(),  "Add an iota object for simd (and more) [P3319R5]" >  >() },
    { 3320u, RevList< Rev< 0u, Arr64< Hash< "Author1444">() >(),  "DeleteIfIncomplete" >  >() },
    { 3321u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title89" >  >() },
    { 3323u, RevList< Rev< 0u, Arr64< Hash< "Gonzalo Brito">() >(),  "cv-qualified types in atomic and atomic_ref" > , Rev< 1u, Arr64< Hash< "Gonzalo Brito">() >(),  "cv-qualified types in atomic and atomic_ref" >  >() },
    { 3324u, RevList< Rev< 0u, Arr64< Hash< "Tom Honermann">() >(),  "Attributes for namespace aliases, template parameters, and lambda captures" >  >() },
    { 3325u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" > , Rev< 2u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" > , Rev< 3u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" > , Rev< 4u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" > , Rev< 5u, Arr64< Hash< "Eric Niebler">() >(),  "A Utility for Creating Execution Environments" >  >() },
    { 3326u, RevList< Rev< 0u, Arr64< Hash< "Author1684">() >(),  "favor ease of use - HackMD" >  >() },
    { 3327u, RevList< Rev< 0u, Arr64< Hash< "Author1073">() >(),  "Title864" >  >() },
    { 3328u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title756" >  >() },
    { 3329u, RevList< Rev< 0u, Arr64< Hash< "Audience">() >(),  "P3329R0 Healing the Filter View" >  >() },
    { 3330u, RevList< Rev< 0u, Arr64< Hash< "Author222">() >(),  "User-defined Atomic Read-Modify-Write Operations" >  >() },
    { 3331u, RevList< Rev< 0u, Arr64< Hash< "Author819">() >(),  "Title652" > , Rev< 1u, Arr64< Hash< "Author1358">() >(),  "Title1054" >  >() },
    { 3332u, RevList< Rev< 0u, Arr64< Hash< "Author1923">() >(),  "Title1487" >  >() },
    { 3334u, RevList< Rev< 0u, Arr64< Hash< "Coral Kashri">() >(),  "Cross Static Variables" >  >() },
    { 3335u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Core Options" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Core Options" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Core Options" > , Rev< 3u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "Structured Core Options" > , Rev< 4u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: Structured Core Options" >  >() },
    { 3336u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title992" >  >() },
    { 3338u, RevList< Rev< 0u, Arr64< Hash< "Author516">() >(),  "Observe and ignore semantics in constant evaluation" >  >() },
    { 3339u, RevList< Rev< 0u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "C++ Ecosystem IS Open License" > , Rev< 1u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: C++ Ecosystem IS Open License" >  >() },
    { 3340u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "A Consistent Grammar for Sequences" >  >() },
    { 3341u, RevList< Rev< 0u, Arr64< Hash< "Author1657">() >(),  "C++ Standard Library Issues to be moved in St. Louis" >  >() },
    { 3342u, RevList< Rev< 0u, Arr64< Hash< "Author1063">() >(),  "C++ Ecosystem Working Draft" > , Rev< 1u, Arr64< Hash< "Author812">() >(),  "C++ Ecosystem Working Draft" > , Rev< 2u, Arr64< Hash< "Ren\xC3\xA9 Ferdinand">() >(),  "WITHDRAWN: Working Draft, Standard for C++ Ecosystem" >  >() },
    { 3343u, RevList< Rev< 0u, Arr64< Hash< "Author1909">() >(),  "Contracts: What we are doing here - P3343R0" >  >() },
    { 3344u, RevList< Rev< 0u, Arr64< Hash< "Author1879">() >(),  "Contracts on Virtual Functions - P3343R0 - Presentation on P3097R0" >  >() },
    { 3345u, RevList< Rev< 0u, Arr64< Hash< "Author1721">() >(),  "Core \"ready\" Issues" >  >() },
    { 3346u, RevList< Rev< 0u, Arr64< Hash< "Nat Goodspeed">() >(),  "threadlocalmeansfiber-specific" >  >() },
    { 3347u, RevList< Rev< 0u, Arr64< Hash< "Paul E">() >(),  "P3347R0 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers" > , Rev< 1u, Arr64< Hash< "Paul E">() >(),  "P3347R1 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers" >  >() },
    { 3348u, RevList< Rev< 0u, Arr64< Hash< "Jonathan Wakely">() >(),  "C++26 should refer to C23 not C17" > , Rev< 1u, Arr64< Hash< "Jonathan Wakely">() >(),  "Title884" > , Rev< 2u, Arr64< Hash< "Jonathan Wakely">() >(),  "Title64" > , Rev< 3u, Arr64< Hash< "Jonathan Wakely">() >(),  "Title1127" >  >() },
    { 3349u, RevList< Rev< 0u, Arr64< Hash< "Author277">() >(),  "Converting contiguous iterators to pointers" > , Rev< 1u, Arr64< Hash< "Author197">() >(),  "Converting contiguous iterators to pointers" >  >() },
    { 3351u, RevList< Rev< 0u, Arr64< Hash< "Yihe Li">() >(),  "views::scan" > , Rev< 1u, Arr64< Hash< "Yihe Li">() >(),  "views::scan" > , Rev< 2u, Arr64< Hash< "Yihe Li">() >(),  "views::scan" >  >() },
    { 3352u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "P3352R0 Taming the Demons (C++ version) Undefined Behavior and Partial Program Correctness" >  >() },
    { 3354u, RevList< Rev< 0u, Arr64< Hash< "Author1226">() >(),  "Issues with P2786 (\"Trivial Relocatability For C++26\")" >  >() },
    { 3355u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix submdspan for C++26" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix submdspan for C++26" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix submdspan for C++26" >  >() },
    { 3356u, RevList< Rev< 0u, Arr64< Hash< "Author1163">() >(),  "non_invalidating_vector - HackMD" >  >() },
    { 3357u, RevList< Rev< 0u, Arr64< Hash< "Thomas PK">() >(),  "NRVO with factory and after_factory" >  >() },
    { 3358u, RevList< Rev< 0u, Arr64< Hash< "Sy Brand">() >(),  "SARIF for Structured Diagnostics" >  >() },
    { 3359u, RevList< Rev< 0u, Arr64< Hash< "Author293">() >(),  "P2667R0++" >  >() },
    { 3360u, RevList< Rev< 0u, Arr64< Hash< "Author1151">() >(),  "P2667R0++" >  >() },
    { 3361u, RevList< Rev< 0u, Arr64< Hash< "Author1844">() >(),  "contracts.dvi" > , Rev< 1u, Arr64< Hash< "Author1020">() >(),  "contracts.dvi" >  >() },
    { 3362u, RevList< Rev< 0u, Arr64< Hash< "Author94">() >(),  "Static analysis and 'safety' of Contracts, P2900 vs. P2680/P3285" >  >() },
    { 3364u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated u8path overloads From C++26" >  >() },
    { 3365u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove the Deprecated Class Template from C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove the Deprecated Class Template from C++26" >  >() },
    { 3366u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Initialization API from C++26" > , Rev< 1u, Arr64< Hash< "Alisdair Meredith">() >(),  "Remove Deprecated Atomic Initialization API from C++26" >  >() },
    { 3367u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr coroutines" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr coroutines" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr coroutines" > , Rev< 3u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr coroutines" > , Rev< 4u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr coroutines" >  >() },
    { 3369u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "constexpr for uninitialized_default_construct" >  >() },
    { 3370u, RevList< Rev< 0u, Arr64< Hash< "Author1475">() >(),  "Add new library headers from C23" > , Rev< 1u, Arr64< Hash< "Author1018">() >(),  "Add new library headers from C23" >  >() },
    { 3371u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by making the symmetric and Hermitian rank-k and rank-2k updates consistent with the BLAS" > , Rev< 1u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 2u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 3u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" > , Rev< 4u, Arr64< Hash< "Mark Hoemmen">() >(),  "Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS" >  >() },
    { 3372u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr containers" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr containers" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr containers" > , Rev< 3u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr containers" >  >() },
    { 3373u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Paper" > , Rev< 1u, Arr64< Hash< "1">() >(),  "Paper R1" >  >() },
    { 3374u, RevList< Rev< 0u, Arr64< Hash< "Liang Jiaming">() >(),  "Adding formatter for fpos<mbstate_t>" > , Rev< 1u, Arr64< Hash< "Liang Jiaming">() >(),  "Adding formatter for fpos<mbstate_t>" >  >() },
    { 3375u, RevList< Rev< 0u, Arr64< Hash< "Guy Davidson">() >(),  "Reproducible floating-point results" > , Rev< 1u, Arr64< Hash< "Guy Davidson">() >(),  "Reproducible floating-point results" > , Rev< 2u, Arr64< Hash< "Guy Davidson">() >(),  "Reproducible floating-point results" >  >() },
    { 3376u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Contract assertions versus static analysis and 'safety'" >  >() },
    { 3378u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr exception types" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr exception types" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr exception types" >  >() },
    { 3379u, RevList< Rev< 0u, Arr64< Hash< "Author684">() >(),  "Constrain std::expected equality operators" >  >() },
    { 3380u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Extending support for class types as non-type templateparameters" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Extending support for class types as non-type templateparameters" >  >() },
    { 3381u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "Syntax for Reflection" >  >() },
    { 3382u, RevList< Rev< 0u, Arr64< Hash< "Author1866">() >(),  "Coarse clocks and resolutions" >  >() },
    { 3383u, RevList< Rev< 0u, Arr64< Hash< "Stephan Lachnit">() >(),  "mdspan.at()" > , Rev< 1u, Arr64< Hash< "Stephan Lachnit">() >(),  "mdspan.at()" > , Rev< 2u, Arr64< Hash< "Stephan Lachnit">() >(),  "mdspan.at()" >  >() },
    { 3384u, RevList< Rev< 0u, Arr64< Hash< "Jeremy Rifkin">() >(),  "__COUNTER__" >  >() },
    { 3385u, RevList< Rev< 0u, Arr64< Hash< "Aurelien Cassagnes">() >(),  "Attributes reflection" > , Rev< 1u, Arr64< Hash< "Aurelien Cassagnes">() >(),  "Attributes reflection" > , Rev< 2u, Arr64< Hash< "Aurelien Cassagnes">() >(),  "Attributes reflection" > , Rev< 3u, Arr64< Hash< "Aurelien Cassagnes">() >(),  "Attributes reflection" > , Rev< 4u, Arr64< Hash< "Aurelien Cassagnes">() >(),  "Attributes reflection" >  >() },
    { 3386u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title708" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title1193" >  >() },
    { 3387u, RevList< Rev< 0u, Arr64< Hash< "Author174">() >(),  "Title148" >  >() },
    { 3388u, RevList< Rev< 0u, Arr64< Hash< "Robert Leahy">() >(),  "Paper" > , Rev< 1u, Arr64< Hash< "1 Authors">() >(),  "Paper R1" > , Rev< 2u, Arr64< Hash< "1">() >(),  "Paper R2" >  >() },
    { 3389u, RevList< Rev< 0u, Arr64< Hash< "Author750">() >(),  "Slides" >  >() },
    { 3390u, RevList< Rev< 0u, Arr64< Hash< "Sean Baxter">() >(),  "Safe C++" >  >() },
    { 3391u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr std::format" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "constexpr std::format" >  >() },
    { 3392u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Do not promise support for function syntax of operators" >  >() },
    { 3394u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "Annotations for Reflection" > , Rev< 1u, Arr64< Hash< "Wyatt Childers">() >(),  "Annotations for Reflection" > , Rev< 2u, Arr64< Hash< "Wyatt Childers">() >(),  "Annotations for Reflection" >  >() },
    { 3395u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Formatting of std::error_code" > , Rev< 1u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix encoding issues and add a formatter for std::error_code" > , Rev< 2u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix encoding issues and add a formatter for std::error_code" > , Rev< 3u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix encoding issues and add a formatter for std::error_code" >  >() },
    { 3396u, RevList< Rev< 0u, Arr64< Hash< "Author2183">() >(),  "Title1678" > , Rev< 1u, Arr64< Hash< "Author1731">() >(),  "Title1337" >  >() },
    { 3397u, RevList< Rev< 0u, Arr64< Hash< "Author2007">() >(),  "Clarify requirements on extended floating point types" >  >() },
    { 3398u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "User specified type decay" >  >() },
    { 3399u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "Title1090" >  >() },
    { 3400u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title628" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title210" >  >() },
    { 3401u, RevList< Rev< 0u, Arr64< Hash< "Tian Liao">() >(),  "Title69" >  >() },
    { 3402u, RevList< Rev< 0u, Arr64< Hash< "Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re">() >(),  "A Safety Profile Verifying Class Initialization" > , Rev< 1u, Arr64< Hash< "Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re">() >(),  "A Safety Profile Verifying Class Initialization" > , Rev< 2u, Arr64< Hash< "Marc-Andr\xC3\xA9 Laverdi\xC3\xA8re">() >(),  "A Safety Profile Verifying Initialization" >  >() },
    { 3403u, RevList< Rev< 0u, Arr64< Hash< "Andrew Tomazos">() >(),  "The Undefined Behavior Question" >  >() },
    { 3404u, RevList< Rev< 0u, Arr64< Hash< "Andre Kostur">() >(),  "std::at : Range-checked accesses to arbitrary containers" >  >() },
    { 3405u, RevList< Rev< 0u, Arr64< Hash< "Elias Kosunen">() >(),  "Out-of-order designated initializers" >  >() },
    { 3406u, RevList< Rev< 0u, Arr64< Hash< "Author861">() >(),  "Title686" >  >() },
    { 3407u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Make idiomatic usage of `offsetof` well-defined" > , Rev< 1u, Arr64< Hash< "Brian Bi">() >(),  "Make idiomatic usage of `offsetof` well-defined" >  >() },
    { 3409u, RevList< Rev< 0u, Arr64< Hash< "Author1795">() >(),  "Enabling more efficient stop-token based cancellation of senders" > , Rev< 1u, Arr64< Hash< "Author1452">() >(),  "Enabling more efficient stop-token based cancellation of senders" >  >() },
    { 3411u, RevList< Rev< 0u, Arr64< Hash< "Hui Xie">() >(),  "`any_view`" > , Rev< 1u, Arr64< Hash< "Hui Xie">() >(),  "`any_view`" >  >() },
    { 3412u, RevList< Rev< 0u, Arr64< Hash< "Bengt Gustafsson">() >(),  "String interpolation" > , Rev< 1u, Arr64< Hash< "Bengt Gustafsson">() >(),  "String interpolation" >  >() },
    { 3413u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1596" >  >() },
    { 3415u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Range interface in std::optional breaks code!" >  >() },
    { 3416u, RevList< Rev< 0u, Arr64< Hash< "Author561">() >(),  "exception_ptr_cast: Add && = delete overload" >  >() },
    { 3417u, RevList< Rev< 0u, Arr64< Hash< "Author2014">() >(),  "Improve the handling of exceptions thrown from contract predicates" > , Rev< 1u, Arr64< Hash< "Author354">() >(),  "Improve the handling of exceptions thrown from contract predicates" >  >() },
    { 3419u, RevList< Rev< 0u, Arr64< Hash< "Michael Levine">() >(),  "Reflection Syntax Options Summary" >  >() },
    { 3420u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Reflection of Templates" > , Rev< 1u, Arr64< Hash< "Barry Revzin">() >(),  "Reflection of Templates" >  >() },
    { 3421u, RevList< Rev< 0u, Arr64< Hash< "Ben Craig">() >(),  "Consteval destructors" >  >() },
    { 3422u, RevList< Rev< 0u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow main function in named modules" > , Rev< 1u, Arr64< Hash< "Chuanqi Xu">() >(),  "Allow main function in named modules" >  >() },
    { 3423u, RevList< Rev< 0u, Arr64< Hash< "Yihe Li">() >(),  "Extending User-Generated Diagnostic Messages" > , Rev< 1u, Arr64< Hash< "Yihe Li">() >(),  "Extending User-Generated Diagnostic Messages" >  >() },
    { 3424u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Define Delete With Throwing Exception Specification" >  >() },
    { 3425u, RevList< Rev< 0u, Arr64< Hash< "Author1985">() >(),  "Reducing operation-state sizes for subobject child operations" > , Rev< 1u, Arr64< Hash< "Author1494">() >(),  "D3425R1: Reducing operation-state sizes for subobject child operations" >  >() },
    { 3427u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Synchronous Reclamation" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Synchronous Reclamation" >  >() },
    { 3428u, RevList< Rev< 0u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Batches" > , Rev< 1u, Arr64< Hash< "Maged M">() >(),  "Hazard Pointer Batches" >  >() },
    { 3429u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "<meta> should minimize standard librarydependencies" > , Rev< 1u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "<meta> should minimize standard librarydependencies" >  >() },
    { 3430u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R3]" >  >() },
    { 3431u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "Deprecate `const`-qualifier on begin/end of views" >  >() },
    { 3433u, RevList< Rev< 0u, Arr64< Hash< "Dietmar Khl">() >(),  "Allocator Support for Operation States" >  >() },
    { 3435u, RevList< Rev< 0u, Arr64< Hash< "Jean-Baptiste VALLON">() >(),  "Reflection and meta-programming" >  >() },
    { 3436u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title837" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title1319" >  >() },
    { 3437u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title770" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title246" >  >() },
    { 3438u, RevList< Rev< 0u, Arr64< Hash< "Andreas Fertig">() >(),  "Make integral overloads of std::to_string constexpr" >  >() },
    { 3439u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1611" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title109" >  >() },
    { 3440u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Add n_elements named constructor to std::simd" >  >() },
    { 3441u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Rename <code>simd_split</code> to <code>simd_chunk</code>" > , Rev< 1u, Arr64< Hash< "Daniel Towner">() >(),  "Rename <code>simd_split</code> to <code>simd_chunk</code>" > , Rev< 2u, Arr64< Hash< "Daniel Towner">() >(),  "Rename <code>simd_split</code> to <code>simd_chunk</code>" >  >() },
    { 3442u, RevList< Rev< 0u, Arr64< Hash< "Author796">() >(),  "Title643" > , Rev< 1u, Arr64< Hash< "Author738">() >(),  "Title595" >  >() },
    { 3443u, RevList< Rev< 0u, Arr64< Hash< "Ran Regev">() >(),  "P3443R0 - Reflection on SG21s 2024 Process" >  >() },
    { 3444u, RevList< Rev< 0u, Arr64< Hash< "Sean Baxter">() >(),  "Memory Safety without Lifetime Parameters" >  >() },
    { 3445u, RevList< Rev< 0u, Arr64< Hash< "Daniel Towner">() >(),  "Add utilities for easier type/bit casting in std::simd" >  >() },
    { 3446u, RevList< Rev< 0u, Arr64< Hash< "Author1497">() >(),  "Title1164" >  >() },
    { 3447u, RevList< Rev< 0u, Arr64< Hash< "Author335">() >(),  "Title284" >  >() },
    { 3449u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr std::generator" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr generator" >  >() },
    { 3450u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Extend std::is_within_lifetime" >  >() },
    { 3451u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "A Suggestion for Reflection Access Control" >  >() },
    { 3454u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "Revising Atomic Max/Min Operations" >  >() },
    { 3455u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG14 2024/05/22 P3455R0.docx" >  >() },
    { 3456u, RevList< Rev< 0u, Arr64< Hash< "Author1968">() >(),  "system_scheduler on Win32, Darwin and Linux" >  >() },
    { 3457u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG19 2024/10/15 P3457R0.docx" >  >() },
    { 3460u, RevList< Rev< 0u, Arr64< Hash< "Author658">() >(),  "Implementors Notes" >  >() },
    { 3465u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title874" >  >() },
    { 3466u, RevList< Rev< 0u, Arr64< Hash< "Herb Sutter">() >(),  "Title1518" > , Rev< 1u, Arr64< Hash< "Herb Sutter">() >(),  "Title751" >  >() },
    { 3467u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "P3467R0R0: 2024-10 Library Evolution Polls" >  >() },
    { 3468u, RevList< Rev< 0u, Arr64< Hash< "Inbal Levi">() >(),  "2024-10 Library Evolution Poll Outcomes" >  >() },
    { 3469u, RevList< Rev< 0u, Arr64< Hash< "Mike Spertus">() >(),  "Virtual deducing" >  >() },
    { 3470u, RevList< Rev< 0u, Arr64< Hash< "Daniel Ruoso">() >(),  "Interface-Unit-Only Module Library Support" >  >() },
    { 3471u, RevList< Rev< 0u, Arr64< Hash< "Konstantin Varlamov">() >(),  "Standard library hardening" > , Rev< 1u, Arr64< Hash< "Konstantin Varlamov">() >(),  "Standard library hardening" > , Rev< 2u, Arr64< Hash< "Konstantin Varlamov">() >(),  "Standard library hardening" > , Rev< 3u, Arr64< Hash< "Konstantin Varlamov">() >(),  "Standard library hardening" > , Rev< 4u, Arr64< Hash< "Konstantin Varlamov">() >(),  "Standard library hardening" >  >() },
    { 3472u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Make fiber_context::can_resume() const" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Make fiber_context::can_resume() const" >  >() },
    { 3473u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "Splicing Should Respect Access Control" >  >() },
    { 3474u, RevList< Rev< 0u, Arr64< Hash< "Jeremy Rifkin">() >(),  "std::arguments" >  >() },
    { 3475u, RevList< Rev< 0u, Arr64< Hash< "Author2038">() >(),  "Defang and deprecate memory_order::consume" > , Rev< 1u, Arr64< Hash< "Author1081">() >(),  "Defang and deprecate memory_order::consume" > , Rev< 2u, Arr64< Hash< "Author1000">() >(),  "Defang and deprecate memory_order::consume" >  >() },
    { 3476u, RevList< Rev< 0u, Arr64< Hash< "Author163">() >(),  "p2688r2" >  >() },
    { 3477u, RevList< Rev< 0u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" > , Rev< 1u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" > , Rev< 2u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" > , Rev< 3u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" > , Rev< 4u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" > , Rev< 5u, Arr64< Hash< "JF Bastien">() >(),  "There are exactly 8 bits in a byte" >  >() },
    { 3478u, RevList< Rev< 0u, Arr64< Hash< "Author1860">() >(),  "p3478r0" >  >() },
    { 3479u, RevList< Rev< 0u, Arr64< Hash< "Joshua Cranmer">() >(),  "Enabling C pragma support in C++" >  >() },
    { 3480u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd is a range [P3480R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd is a range [P3480R1]" > , Rev< 2u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd is a range [P3480R2]" > , Rev< 3u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd is a range [P3480R3]" > , Rev< 4u, Arr64< Hash< "Matthias Kretz">() >(),  "std::simd is a range [P3480R4]" >  >() },
    { 3481u, RevList< Rev< 0u, Arr64< Hash< "Author1907">() >(),  "Title1471" > , Rev< 1u, Arr64< Hash< "Lucian Radu">() >(),  "std::execution::bulk() issues" > , Rev< 2u, Arr64< Hash< "Lucian Radu">() >(),  "std::execution::bulk() issues" > , Rev< 3u, Arr64< Hash< "Lucian Radu">() >(),  "std::execution::bulk() issues" >  >() },
    { 3482u, RevList< Rev< 0u, Arr64< Hash< "Thomas Rodgers">() >(),  "Design for C++ networking based on IETF TAPS" > , Rev< 1u, Arr64< Hash< "Thomas Rodgers">() >(),  "Design for C++ networking based on IETF TAPS" >  >() },
    { 3483u, RevList< Rev< 0u, Arr64< Hash< "Author1213">() >(),  "Title951" > , Rev< 1u, Arr64< Hash< "Author2231">() >(),  "Title1707" >  >() },
    { 3484u, RevList< Rev< 0u, Arr64< Hash< "Author1384">() >(),  "Title1076" > , Rev< 1u, Arr64< Hash< "Author865">() >(),  "Title691" > , Rev< 2u, Arr64< Hash< "Author870">() >(),  "Title695" >  >() },
    { 3485u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Grouping using declarations with braces" >  >() },
    { 3487u, RevList< Rev< 0u, Arr64< Hash< "Author1786">() >(),  "Title1386" >  >() },
    { 3488u, RevList< Rev< 0u, Arr64< Hash< "Matthias Kretz">() >(),  "Floating-Point Excess Precision [P3488R0]" > , Rev< 1u, Arr64< Hash< "Matthias Kretz">() >(),  "Floating-Point Excess Precision [P3488R1]" >  >() },
    { 3489u, RevList< Rev< 0u, Arr64< Hash< "Author1895">() >(),  "Title1465" >  >() },
    { 3490u, RevList< Rev< 0u, Arr64< Hash< "Alexey Kukanov">() >(),  "Justification for ranges as the output of parallel rangealgorithms" >  >() },
    { 3491u, RevList< Rev< 0u, Arr64< Hash< "Wyatt Childers">() >(),  "define_static_{string,object,array}" > , Rev< 1u, Arr64< Hash< "Wyatt Childers">() >(),  "define_static_{string,object,array}" > , Rev< 2u, Arr64< Hash< "Wyatt Childers">() >(),  "define_static_{string,object,array}" >  >() },
    { 3492u, RevList< Rev< 0u, Arr64< Hash< "Lauri Vasama">() >(),  "Sized deallocation for placement new" > , Rev< 1u, Arr64< Hash< "Lauri Vasama">() >(),  "Sized deallocation for placement new" > , Rev< 2u, Arr64< Hash< "Lauri Vasama">() >(),  "Sized deallocation for placement new" >  >() },
    { 3493u, RevList< Rev< 0u, Arr64< Hash< "Author1414">() >(),  "Ruminations on reflection and access" >  >() },
    { 3495u, RevList< Rev< 0u, Arr64< Hash< "Author1147">() >(),  "Title912" >  >() },
    { 3496u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Immediate-Escalating Expressions" >  >() },
    { 3497u, RevList< Rev< 0u, Arr64< Hash< "Jan Wilmans">() >(),  "Title1394" >  >() },
    { 3498u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title335" >  >() },
    { 3499u, RevList< Rev< 0u, Arr64< Hash< "Author1573">() >(),  "Title1220" > , Rev< 1u, Arr64< Hash< "Author338">() >(),  "Title285" >  >() },
    { 3500u, RevList< Rev< 0u, Arr64< Hash< "Author105">() >(),  "P3500 v2" > , Rev< 1u, Arr64< Hash< "Author241">() >(),  "P3500 Are Contracts \"safe\"?" >  >() },
    { 3501u, RevList< Rev< 0u, Arr64< Hash< "Author2031">() >(),  "The ad-dressing of cats" >  >() },
    { 3502u, RevList< Rev< 0u, Arr64< Hash< "Author488">() >(),  "p3502r0" >  >() },
    { 3503u, RevList< Rev< 0u, Arr64< Hash< "Nicolas Morales">() >(),  "Make type-erased allocator use in promise and packaged_taskconsistent" > , Rev< 1u, Arr64< Hash< "Nicolas Morales">() >(),  "Make type-erased allocator use in `promise` and `packaged_task`consistent" > , Rev< 2u, Arr64< Hash< "Nicolas Morales">() >(),  "Make type-erased allocator use in `promise` and `packaged_task`consistent" >  >() },
    { 3504u, RevList< Rev< 0u, Arr64< Hash< "Author172">() >(),  "C++ Standard Library Issues to be moved in Wrocaw, Nov. 2024" >  >() },
    { 3505u, RevList< Rev< 0u, Arr64< Hash< "Victor Zverovich">() >(),  "Fix the default floating-point representation in std::format" >  >() },
    { 3506u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title583" >  >() },
    { 3508u, RevList< Rev< 0u, Arr64< Hash< "Giuseppe D'Angelo">() >(),  "Wording for \"constexpr for specialized memory algorithms\"" >  >() },
    { 3510u, RevList< Rev< 0u, Arr64< Hash< "Nathan Myers">() >(),  "Leftover properties of `this` in constructorpreconditions" > , Rev< 1u, Arr64< Hash< "Nathan Myers">() >(),  "Leftover properties of `this` in constructorpreconditions" > , Rev< 2u, Arr64< Hash< "Nathan Myers">() >(),  "Leftover properties of `this` in constructorpreconditions" >  >() },
    { 3514u, RevList< Rev< 0u, Arr64< Hash< "Steve Downey">() >(),  "\"RFC 3514: The Security Flag\" for C++" >  >() },
    { 3516u, RevList< Rev< 0u, Arr64< Hash< "Louis Dionne">() >(),  "Uninitialized algorithms for relocation" > , Rev< 1u, Arr64< Hash< "Louis Dionne">() >(),  "Uninitialized algorithms for relocation" >  >() },
    { 3517u, RevList< Rev< 0u, Arr64< Hash< "Author1368">() >(),  "P3517R0" >  >() },
    { 3518u, RevList< Rev< 0u, Arr64< Hash< "Author1479">() >(),  "constexpr type ordering (P2830R4)" >  >() },
    { 3519u, RevList< Rev< 0u, Arr64< Hash< "Author1343">() >(),  "P3425 Reducing operation-state sizes for sub-object child operations" >  >() },
    { 3520u, RevList< Rev< 0u, Arr64< Hash< "Author1353">() >(),  "Title1047" >  >() },
    { 3521u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "Pattern Matching: Customization Point for Open SumTypes" >  >() },
    { 3524u, RevList< Rev< 0u, Arr64< Hash< "Author774">() >(),  "Core \"ready\" Issues" >  >() },
    { 3525u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Explicit Implicit Template Regions" >  >() },
    { 3526u, RevList< Rev< 0u, Arr64< Hash< "Author1096">() >(),  "Container truncation" >  >() },
    { 3527u, RevList< Rev< 0u, Arr64< Hash< "Michael Park">() >(),  "Pattern Matching: *variant-like* and `std::expected`" > , Rev< 1u, Arr64< Hash< "Michael Park">() >(),  "Pattern Matching: *variant-like* and `std::expected`" >  >() },
    { 3530u, RevList< Rev< 0u, Arr64< Hash< "Boleyn Su">() >(),  "Intrinsic for reading uninitialized memory" >  >() },
    { 3533u, RevList< Rev< 0u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr virtual inheritance" > , Rev< 1u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr virtual inheritance" > , Rev< 2u, Arr64< Hash< "Hana Dusikova">() >(),  "constexpr virtual inheritance" >  >() },
    { 3534u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Avoid UB When Compiling Code That Violates Library Specification" >  >() },
    { 3537u, RevList< Rev< 0u, Arr64< Hash< "Author2191">() >(),  "Concurrent Queues API - P0260R13" > , Rev< 1u, Arr64< Hash< "Author1237">() >(),  "Concurrent Queues API - P0260R15 / P3537R1" >  >() },
    { 3539u, RevList< Rev< 1u, Arr64< Hash< "PaweB Benetkiewicz">() >(),  "Consistent Function Label Naming for Sections" >  >() },
    { 3540u, RevList< Rev< 0u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed offset parameter" > , Rev< 1u, Arr64< Hash< "JeanHeyd Meneide">() >(),  "#embed offset parameter" >  >() },
    { 3541u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Violation handlers vs `noexcept`" > , Rev< 1u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Violation handlers vs `noexcept`" >  >() },
    { 3542u, RevList< Rev< 0u, Arr64< Hash< "Author1356">() >(),  "Abolish the term \"converting constructor\"" >  >() },
    { 3543u, RevList< Rev< 0u, Arr64< Hash< "Mungo Gill">() >(),  "Response to Core Safety Profiles (P3081)" >  >() },
    { 3544u, RevList< Rev< 0u, Arr64< Hash< "Author436">() >(),  "<code>ranges::to<view></code>" >  >() },
    { 3546u, RevList< Rev< 0u, Arr64< Hash< "Author1306">() >(),  "Title1010" >  >() },
    { 3547u, RevList< Rev< 0u, Arr64< Hash< "Dan Katz">() >(),  "Modeling Access Control With Reflection" > , Rev< 1u, Arr64< Hash< "Dan Katz">() >(),  "Modeling Access Control With Reflection" >  >() },
    { 3548u, RevList< Rev< 0u, Arr64< Hash< "Niall Douglas">() >(),  "Title876" >  >() },
    { 3549u, RevList< Rev< 0u, Arr64< Hash< "Bruno Cardoso">() >(),  "Diverging Expressions" >  >() },
    { 3550u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Imports cannot &" >  >() },
    { 3552u, RevList< Rev< 0u, Arr64< Hash< "Dietmar Khl">() >(),  "Add a Coroutine Lazy Type" > , Rev< 1u, Arr64< Hash< "Dietmar Khl">() >(),  "Add a Coroutine Task Type" >  >() },
    { 3554u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Non-transient allocation with std::vector andstd::basic_string" >  >() },
    { 3555u, RevList< Rev< 0u, Arr64< Hash< "Jonathan M\xC3\xBCller">() >(),  "An infinite range concept" >  >() },
    { 3556u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "Input Files Are Source Files" >  >() },
    { 3557u, RevList< Rev< 0u, Arr64< Hash< "Eric Niebler">() >(),  "High-Quality Sender Diagnostics with ConstexprExceptions" > , Rev< 1u, Arr64< Hash< "Eric Niebler">() >(),  "High-Quality Sender Diagnostics with ConstexprExceptions" >  >() },
    { 3558u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1213" > , Rev< 1u, Arr64< Hash< "Joshua Berne">() >(),  "Title217" >  >() },
    { 3559u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "is_trivially_relocatable: One trait or two?" >  >() },
    { 3560u, RevList< Rev< 0u, Arr64< Hash< "Peter Dimov">() >(),  "Error Handling in Reflection" >  >() },
    { 3561u, RevList< Rev< 0u, Arr64< Hash< "Author622">() >(),  "coproducts.dvi" > , Rev< 1u, Arr64< Hash< "Author2200">() >(),  "coproducts.dvi" > , Rev< 2u, Arr64< Hash< "Author1198">() >(),  "coproducts.dvi" >  >() },
    { 3564u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Make the concurrent forward progress guarantee usable in bulk" >  >() },
    { 3565u, RevList< Rev< 0u, Arr64< Hash< "Author2177">() >(),  "Virtual floating-point values" >  >() },
    { 3566u, RevList< Rev< 0u, Arr64< Hash< "Author256">() >(),  "P3566R0 - You shall not pass `char*` - Google Docs" >  >() },
    { 3567u, RevList< Rev< 0u, Arr64< Hash< "Hui Xie">() >(),  "flat_meow Fixes" >  >() },
    { 3568u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "break label; and continue label;" > , Rev< 1u, Arr64< Hash< "Jan Schultke">() >(),  "break label; and continue label;" >  >() },
    { 3569u, RevList< Rev< 0u, Arr64< Hash< "Shafik Yaghmour">() >(),  "SplitOutDefineAggregate" >  >() },
    { 3570u, RevList< Rev< 0u, Arr64< Hash< "Fabio Fracassi">() >(),  "optional variants in sender/receiver" >  >() },
    { 3572u, RevList< Rev< 0u, Arr64< Hash< "Bjarne Stroustrup">() >(),  "Title1521" >  >() },
    { 3573u, RevList< Rev< 0u, Arr64< Hash< "Michael Hava">() >(),  "Title894" >  >() },
    { 3574u, RevList< Rev< 0u, Arr64< Hash< "Author1724">() >(),  "Title1329" >  >() },
    { 3575u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG14 2025/01/13 P3575R0.docx" >  >() },
    { 3576u, RevList< Rev< 0u, Arr64< Hash< "Michael Wong">() >(),  "SG19 2025/1/13 P3576R0.docx" >  >() },
    { 3577u, RevList< Rev< 0u, Arr64< Hash< "Author1133">() >(),  "Title902" >  >() },
    { 3578u, RevList< Rev< 0u, Arr64< Hash< "Author1525">() >(),  "The \"Grandma Safety\" Paper" >  >() },
    { 3579u, RevList< Rev< 0u, Arr64< Hash< "Matheus Izvekov">() >(),  "Fix matching of non-type template parameters when matchingtemplate template parameters" > , Rev< 1u, Arr64< Hash< "Matheus Izvekov">() >(),  "Fix matching of non-type template parameters when matchingtemplate template parameters" >  >() },
    { 3580u, RevList< Rev< 0u, Arr64< Hash< "Author1857">() >(),  "The Naming of Things" >  >() },
    { 3581u, RevList< Rev< 0u, Arr64< Hash< "1">() >(),  "Title1025" >  >() },
    { 3582u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Observed a contract violation? Skip subsequent assertions!" >  >() },
    { 3583u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "Contracts, Types & Functions" >  >() },
    { 3584u, RevList< Rev< 0u, Arr64< Hash< "Mingxin Wang">() >(),  "Title375" >  >() },
    { 3585u, RevList< Rev< 0u, Arr64< Hash< "Pablo Halpern">() >(),  "`allocator_traits::is_internally_relocatable`" >  >() },
    { 3586u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "The Plethora of Problems With Profiles" >  >() },
    { 3587u, RevList< Rev< 0u, Arr64< Hash< "Lauri Vasama">() >(),  "Reconsider reflection access for C++26" >  >() },
    { 3588u, RevList< Rev< 0u, Arr64< Hash< "Brian Bi">() >(),  "Allow static data members in local and unnamed classes" >  >() },
    { 3589u, RevList< Rev< 0u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title1579" > , Rev< 1u, Arr64< Hash< "gdr@microsoft.com Audience">() >(),  "Title181" >  >() },
    { 3590u, RevList< Rev< 0u, Arr64< Hash< "Daveed Vandevoorde">() >(),  "Constexpr Coroutine Burdens" >  >() },
    { 3591u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title339" >  >() },
    { 3592u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title1452" >  >() },
    { 3599u, RevList< Rev< 0u, Arr64< Hash< "Joshua Berne">() >(),  "Title900" >  >() },
    { 3603u, RevList< Rev< 0u, Arr64< Hash< "Barry Revzin">() >(),  "Consteval-only Values and Consteval Variables" >  >() },
    { 3605u, RevList< Rev< 0u, Arr64< Hash< "Author1131">() >(),  "Title901" >  >() },
    { 3606u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "On Overload Resolution, Exact Matches, and CleverImplementations" >  >() },
    { 3608u, RevList< Rev< 0u, Arr64< Hash< "Author1980">() >(),  "Contracts and profiles: what can we reasonably ship in C++26" >  >() },
    { 3611u, RevList< Rev< 0u, Arr64< Hash< "Author2180">() >(),  "Title1675" >  >() },
    { 3613u, RevList< Rev< 0u, Arr64< Hash< "Tim Song">() >(),  "On the beating of horses, and other matters" >  >() },
    { 3614u, RevList< Rev< 0u, Arr64< Hash< "Author231">() >(),  "Do not remove nor postpone access_context::unchecked" >  >() },
    { 3615u, RevList< Rev< 0u, Arr64< Hash< "Author1722">() >(),  "C++ Standard Library Issues to be moved in Hagenberg, Feb. 2025" >  >() },
    { 3616u, RevList< Rev< 0u, Arr64< Hash< "Author1759">() >(),  "Remove contracts on virtual functions for now" >  >() },
    { 3618u, RevList< Rev< 0u, Arr64< Hash< "Michael Spencer">() >(),  "Allow attaching main to the global module" >  >() },
    { 3619u, RevList< Rev< 0u, Arr64< Hash< "Author2030">() >(),  "Counter-examples for P2688R5" > , Rev< 1u, Arr64< Hash< "Author246">() >(),  "Counter-examples for P2688R5" >  >() },
    { 3620u, RevList< Rev< 0u, Arr64< Hash< "Author1953">() >(),  "Title1516" >  >() },
    { 3623u, RevList< Rev< 0u, Arr64< Hash< "Arthur O'Dwyer">() >(),  "Add noexcept to [iterator.range] (LWG 3537)" >  >() },
    { 3625u, RevList< Rev< 0u, Arr64< Hash< "Michael Florian">() >(),  "D3625 - either neither" >  >() },
    { 3626u, RevList< Rev< 0u, Arr64< Hash< "Author388">() >(),  "Title331" >  >() },
    { 3627u, RevList< Rev< 0u, Arr64< Hash< "Author125">() >(),  "RCE-defense security profiles for existing C++ code" >  >() },
    { 3628u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "break label; and continue label;, tl; dr" >  >() },
    { 3630u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "PowerPoint-Prsentation" >  >() },
    { 3632u, RevList< Rev< 0u, Arr64< Hash< "Author1136">() >(),  "Title904" > , Rev< 1u, Arr64< Hash< "Author2218">() >(),  "Title1698" >  >() },
    { 3633u, RevList< Rev< 0u, Arr64< Hash< "Author1107">() >(),  "A Byte is a Byte" >  >() },
    { 3635u, RevList< Rev< 0u, Arr64< Hash< "Nevin ">() >(),  "Title1469" >  >() },
    { 3636u, RevList< Rev< 0u, Arr64< Hash< "Author268">() >(),  "P3636 No, inplace_vector shouldn't have an Allocator" >  >() },
    { 3637u, RevList< Rev< 0u, Arr64< Hash< "Author2114">() >(),  "Inherit std::meta::exception from std::exception - Google Docs" >  >() },
    { 3638u, RevList< Rev< 0u, Arr64< Hash< "Author541">() >(),  "Core \"ready\" Issues" >  >() },
    { 3639u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "The _BitInt Debate" >  >() },
    { 3640u, RevList< Rev< 0u, Arr64< Hash< "Jonas Persson">() >(),  "Make contracts reliable by default" >  >() },
    { 3641u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "Rename std::observable to std::observable_checkpoint, and add a feature-test macro" >  >() },
    { 3642u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "Carry-less product: std::clmul" >  >() },
    { 3643u, RevList< Rev< 0u, Arr64< Hash< "Jan Schultke">() >(),  "std::to_signed and std::to_unsigned" >  >() },
    { 3650u, RevList< Rev< 0u, Arr64< Hash< "Bjarne Stroustrup">() >(),  "Title1307" >  >() },
    { 3651u, RevList< Rev< 0u, Arr64< Hash< "Bjarne Stroustrup">() >(),  "Title697" >  >() },
    { 3652u, RevList< Rev< 0u, Arr64< Hash< "L\xC3\xA9n\xC3\xA1rd Szolnoki">() >(),  "Constexpr floating-point <charconv> functions" > , Rev< 1u, Arr64< Hash< "L\xC3\xA9n\xC3\xA1rd Szolnoki">() >(),  "Constexpr floating-point <charconv> functions" >  >() },
    { 3654u, RevList< Rev< 0u, Arr64< Hash< "Author2111">() >(),  "Title1630" >  >() },
    { 3655u, RevList< Rev< 0u, Arr64< Hash< "Author1418">() >(),  "std::zstring_view" >  >() },
    { 3656u, RevList< Rev< 0u, Arr64< Hash< "Author1078">() >(),  "Title868" > , Rev< 1u, Arr64< Hash< "Author1054">() >(),  "Title845" >  >() },
    { 3657u, RevList< Rev< 0u, Arr64< Hash< "Alisdair Meredith">() >(),  "A Grammar for Whitespace Characters" >  >() },
    { 3658u, RevList< Rev< 0u, Arr64< Hash< "Author376">() >(),  "Title318" >  >() },
    { 3660u, RevList< Rev< 0u, Arr64< Hash< "Jeremy Rifkin">() >(),  "Improve reference_wrapper Ergonomics" >  >() },
    { 3661u, RevList< Rev< 0u, Arr64< Hash< "\xC2\xA0\xC2\xA0">() >(),  "Attributes, annotations, labels" >  >() },
    { 3662u, RevList< Rev< 0u, Arr64< Hash< "Jeremy Rifkin">() >(),  "Improve Increment and Decrement Operator Syntax" >  >() },
    { 3663u, RevList< Rev< 0u, Arr64< Hash< "Mark Hoemmen">() >(),  "Future-proof submdspan_mapping?" >  >() },
    { 3664u, RevList< Rev< 0u, Arr64< Hash< "Zach Laine">() >(),  "Make `variant_size` SFINAE friendly" >  >() },
    { 3665u, RevList< Rev< 0u, Arr64< Hash< "Jeremy Rifkin">() >(),  "Vertical Text Processing" >  >() },
    { 3667u, RevList< Rev< 0u, Arr64< Hash< "Author317">() >(),  "Title267" >  >() },
    { 3668u, RevList< Rev< 0u, Arr64< Hash< "Matthew Taylor">() >(),  "Defaulting Postfix Increment and Decrement Operations" >  >() },
    { 3669u, RevList< Rev< 0u, Arr64< Hash< "Detlef Vollmann">() >(),  "Non-Blocking Support for `std::execution`" >  >() },
    { 3670u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1489" >  >() },
    { 3671u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1358" >  >() },
    { 3672u, RevList< Rev< 0u, Arr64< Hash< "Corentin Jabot">() >(),  "Title1509" >  >() },
    { 4000u, RevList< Rev< 0u, Arr64< Hash< "Author623">() >(),  "TS or not TS" >  >() },
}
