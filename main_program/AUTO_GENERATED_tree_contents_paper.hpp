{
    { "n1357", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1358", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting  April ") > >() },
    { "n1359", RevList< Rev< 0u, Arr64< Hash(wxS("Martin J ORiordan")) >(), wxS("Technical Report on C Performance DRAFT") > >() },
    { "n1360", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown amp Marc Paterno")) >(), wxS("constcorrectness and other safety issues in clause  inputoutput library") > >() },
    { "n1361", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Technical Report Proposals and Issues List Revision ") > >() },
    { "n1362", RevList< Rev< 0u, Arr64< Hash(wxS("Tom Plum")) >(), wxS("Agenda for October  Meeting of WG") > >() },
    { "n1363", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("C Support for Delegation") > >() },
    { "n1364", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Evolution WG Proposal Skeleton") > >() },
    { "n1365", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("October  meeting information in Santa Cruz CA") > >() },
    { "n1366", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1367", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1368", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1369", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1370", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1371", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1372", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed C Library Additions to C Revised") > >() },
    { "n1486", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n1487", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("Technical Report on C Performance") > >() },
    { "n1488", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter B Stroustrup")) >(), wxS("A name for the null pointer nullptr") > >() },
    { "n1489", RevList< Rev< 0u, Arr64< Hash(wxS("B Stroustrup G Dos Reis")) >(), wxS("Template aliases for C") > >() },
    { "n1490", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Proposed resolution of core issue ") > >() },
    { "n1492", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Gutson")) >(), wxS("Exclusive Inheritance") > >() },
    { "n1493", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel F Gutson")) >(), wxS("Braces Initialization Overloading") > >() },
    { "n1494", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel F Gutson")) >(), wxS("Pure implementation method declaration") > >() },
    { "n1496", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Draft Proposal for Dynamic Libraries in C Revision ") > >() },
    { "n1499", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Simplifying Interfaces in basicregex") > >() },
    { "n1500", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Regular Expressions Internationalization and Customization") > >() },
    { "n1501", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Information for MarchApril  WGWG Meetings in Sydney NSW Australia") > >() },
    { "n1502", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed Signature Changes for Special Math Functions in TR") > >() },
    { "n1503", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed Additions to TR to Improve Compatibility with C") > >() },
    { "n1504", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1505", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1506", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1507", RevList< Rev< 0u, Arr64< Hash(wxS("John Maddock")) >(), wxS("Errata to the Regular Expression Proposal") > >() },
    { "n1508", RevList< Rev< 0u, Arr64< Hash(wxS("Bronek Kozicki")) >(), wxS("Proposal to add Deletion Traits to the Standard Library") > >() },
    { "n1509", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Generalized Initializer Lists") > >() },
    { "n1510", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Concept checking  A more abstract complement to type checking") > >() },
    { "n1511", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Literals for userdefined types") > >() },
    { "n1512", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Evolution WG issues list") > >() },
    { "n1513", RevList< Rev< 0u, Arr64< Hash(wxS("David Miller")) >(), wxS("Improving Enumeration Types") > >() },
    { "n1515", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1516", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1517", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1518", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1519", RevList< Rev< 0u, Arr64< Hash(wxS("John Maddock")) >(), wxS("Type Traits Issue List") > >() },
    { "n1520", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Extended friend Declarations") > >() },
    { "n1521", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Generalized Constant Expressions") > >() },
    { "n1522", RevList< Rev< 0u, Arr64< Hash(wxS("B Stroustrup G Dos Reis")) >(), wxS("Concepts  Design choices for template argument checking") > >() },
    { "n1523", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Proposed Resolution To LWG issues    revision ") > >() },
    { "n1524", RevList< Rev< 0u, Arr64< Hash(wxS("Jon Jagger")) >(), wxS("Nested Namespace Definition Proposal") > >() },
    { "n1526", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Proposal to add namespace references to C") > >() },
    { "n1528", RevList< Rev< 0u, Arr64< Hash(wxS("John H Spicer")) >(), wxS("Syntactic Disambiguation Using the Template Keyword") > >() },
    { "n1529", RevList< Rev< 0u, Arr64< Hash(wxS("Julian Smith")) >(), wxS("Draft proposal for adding Multimethods to C") > >() },
    { "n1530", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams J Siek T Witt")) >(), wxS("Iterator Facade and Adaptor") > >() },
    { "n1531", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams J Siek T Witt")) >(), wxS("New Iterator Concepts") > >() },
    { "n1532", RevList< Rev< 0u, Arr64< Hash(wxS("Keld Simonsen")) >(), wxS("WG liaison report") > >() },
    { "n1534", RevList< Rev< 0u, Arr64< Hash(wxS("Alex Rosenberg")) >(), wxS("Proposed addition of func predefined identifier from C") > >() },
    { "n1535", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Random Number Generators Issues List") > >() },
    { "n1536", RevList< Rev< 0u, Arr64< Hash(wxS("B Stroustrup G Dos Reis")) >(), wxS("Concepts  syntax and composition") > >() },
    { "n1537", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1538", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1539", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1540", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1541", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1543", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Analysis and Proposed Resolution for Core Issue ") > >() },
    { "n1544", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Comments about Issues with Random Number Generators") > >() },
    { "n1545", RevList< Rev< 0u, Arr64< Hash(wxS("Paul Mensonides")) >(), wxS("Variadic Macros and Placemarkers") > >() },
    { "n1546", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Fehr")) >(), wxS("Alignment Proposal") > >() },
    { "n1547", RevList< Rev< 0u, Arr64< Hash(wxS("Marc Paterno")) >(), wxS("Comments on the Initialization of Random Engines") > >() },
    { "n1549", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Const correctness in unordered associative containers") > >() },
    { "n1550", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams J Siek T Witt")) >(), wxS("New Iterator Concepts") > >() },
    { "n1551", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Changes to a hRefnpdfNa to Implement a hRefnhtmlNa Parts  and ") > >() },
    { "n1552", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1553", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1554", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1555", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1556", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1557", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("CCLI Overview") > >() },
    { "n1558", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Technical Report Component Detection") > >() },
    { "n1559", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG Agenda") > >() },
    { "n1563", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report to WG") > >() },
    { "n1564", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Core Issue  and quotConditionallySupported Behaviorquot") > >() },
    { "n1565", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding the long long type to C") > >() },
    { "n1566", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Synchronizing the C preprocessor with C") > >() },
    { "n1567", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Critique of WGN decimal floatingpoint arithmetic") > >() },
    { "n1568", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed additions to TR to improve compatibility with C") > >() },
    { "n1569", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed fixes to library inconsistencies") > >() },
    { "n1570", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Corrections to domainerror reporting for TR chapter on special math functions") > >() },
    { "n1571", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1572", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1573", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1575", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Technical Report Component Detection Revision ") > >() },
    { "n1576", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem library query") > >() },
    { "n1577", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger P Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1578", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger P Becker")) >(), wxS("Editors report") > >() },
    { "n1579", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter D Miller")) >(), wxS("Strongly Typed Enums") > >() },
    { "n1580", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA J Meeting No  WG Meeting No  March   Sydney Australia") > >() },
    { "n1581", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter F Glassborow")) >(), wxS("Delegating Constructors") > >() },
    { "n1582", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Compiler Generated Defaults") > >() },
    { "n1583", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Inheriting Constructors") > >() },
    { "n1584", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Regularizing Initialization Syntax") > >() },
    { "n1585", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Uniform Calling Syntax Reopening public interfaces") > >() },
    { "n1588", RevList< Rev< 0u, Arr64< Hash(wxS("Marc Paterno")) >(), wxS("On RandomNumber Distributions for Cx") > >() },
    { "n1589", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("complex and issue ") > >() },
    { "n1590", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Smart Pointer Comparison Operators") > >() },
    { "n1591", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("October  Meeting Information ") > >() },
    { "n1592", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("Explicit Conversion Operators") > >() },
    { "n1593", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1594", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1595", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1596", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1597", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1598", RevList< Rev< 0u, Arr64< Hash(wxS("B Stroustrup D Vandevoorde")) >(), wxS("Evolution WG issues list") > >() },
    { "n1599", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Issue  Swapping containers with unequal allocators") > >() },
    { "n1600", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("CCLI Properties") > >() },
    { "n1601", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter B Stroustrup")) >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n1602", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Class Scope Using Declarations amp private Members") > >() },
    { "n1603", RevList< Rev< 0u, Arr64< Hash(wxS("D Gregor J Jrvi G Powell")) >(), wxS("Variadic Templates") > >() },
    { "n1604", RevList< Rev< 0u, Arr64< Hash(wxS("R Klarer J Maddock B Dawes H Hinnant")) >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1605", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Gutson")) >(), wxS("Extending Template Type Parameters I Namespace and scope") > >() },
    { "n1607", RevList< Rev< 0u, Arr64< Hash(wxS("J Jrvi B Stroustrup")) >(), wxS("Decltype and auto revision ") > >() },
    { "n1608", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1609", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("More on Issues with Random Number Generators in the Library TR Proposal") > >() },
    { "n1610", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams G Powell")) >(), wxS("Clarification of Initialization of Class Objects by rvalues") > >() },
    { "n1611", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("ImplicitlyCallable Functions in Cx") > >() },
    { "n1612", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("How we might remove the remaining shortcomings of stdcomplexltTgt") > >() },
    { "n1613", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Proposal to add Design by Contract to C") > >() },
    { "n1614", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("scope A simple scoping mechanism for the CC preprocessor") > >() },
    { "n1615", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("C Properties  a Library Solution") > >() },
    { "n1616", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1617", RevList< Rev< 0u, Arr64< Hash(wxS("R Klarer J Maddock B Dawes H Hinnant")) >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1618", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter F Glassborow")) >(), wxS("Delegating Constructors revision ") > >() },
    { "n1619", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1620", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("Dimension and Rank") > >() },
    { "n1621", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Resolution to TR issue ") > >() },
    { "n1622", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Resolutions to unordered associative container issues") > >() },
    { "n1623", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Resolutions to regular expression issues") > >() },
    { "n1624", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Resolutions to fixedsize array issues") > >() },
    { "n1625", RevList< Rev< 0u, Arr64< Hash(wxS("Tom Plum")) >(), wxS("scope for CC") > >() },
    { "n1626", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Proposed Resolution for Core Issue  Rev ") > >() },
    { "n1627", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("quotConditionallySupported Behaviorquot Rev ") > >() },
    { "n1628", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Extensions for the Programming Language C to Support New Character Data Types") > >() },
    { "n1629", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  March  ") > >() },
    { "n1630", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting March  ") > >() },
    { "n1631", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams B Dawes J Siek")) >(), wxS("Electronic review process") > >() },
    { "n1632", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1633", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1634", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1635", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1636", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1637", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1638", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1639", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n1640", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams J Siek T Witt")) >(), wxS("New Iterator Concepts") > >() },
    { "n1641", RevList< Rev< 0u, Arr64< Hash(wxS("D Abrahams J Siek T Witt")) >(), wxS("Iterator Facade and Adaptor") > >() },
    { "n1642", RevList< Rev< 0u, Arr64< Hash(wxS("Alex Rosenberg")) >(), wxS("Adoption of Cs func predefined identifier and improved default argument behavior") > >() },
    { "n1647", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Witt")) >(), wxS("Function Output Iterator") > >() },
    { "n1648", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Fehr")) >(), wxS("Motivation Objectives and Design Decisions") > >() },
    { "n1649", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Right Angle Brackets") > >() },
    { "n1650", RevList< Rev< 0u, Arr64< Hash(wxS("D VandevoordeB StroustrupH Sutter")) >(), wxS("C Evolution Working Group  Active Proposals Revision ") > >() },
    { "n1651", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG agenda") > >() },
    { "n1652", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG Agenda") > >() },
    { "n1653", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Working draft changes for C preprocessor synchronization") > >() },
    { "n1654", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1655", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Unofficial Working Draft Standard for Programming Language C") > >() },
    { "n1656", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors report") > >() },
    { "n1657", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1658", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1659", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1660", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1661", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1662", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG Business Plan and Conveners Report") > >() },
    { "n1663", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1664", RevList< Rev< 0u, Arr64< Hash(wxS("W BrownM Paterno")) >(), wxS("Toward Improved Optimization Opportunities in Cx") > >() },
    { "n1665", RevList< Rev< 0u, Arr64< Hash(wxS("J MarraffinoM Paterno")) >(), wxS("Guidelines for Domain Errors in Mathematical Special Functions") > >() },
    { "n1666", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldwaithe")) >(), wxS("Technical Report on C Performance") > >() },
    { "n1667", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("Accessing the target of a trfunction object") > >() },
    { "n1668", RevList< Rev< 0u, Arr64< Hash(wxS("Paul A Bristow")) >(), wxS("A Proposal to add Mathematical Functions for Statistics to the C Standard Library") > >() },
    { "n1669", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1671", RevList< Rev< 0u, Arr64< Hash(wxS("G PowellD GregorJ Jarvi")) >(), wxS("Overloading Operator  Operator ") > >() },
    { "n1672", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Adapting a hRefnhtmlNa To Cx") > >() },
    { "n1673", RevList< Rev< 0u, Arr64< Hash(wxS("P BeckerP Dimov")) >(), wxS("Unifying TR Function Object Type Specifications") > >() },
    { "n1674", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Improve constiterator Use from CX Containers") > >() },
    { "n1675", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1676", RevList< Rev< 0u, Arr64< Hash(wxS("Bronek Kozicki")) >(), wxS("Nonmember overloaded copy assignment operator") > >() },
    { "n1677", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1678", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1679", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1680", RevList< Rev< 0u, Arr64< Hash(wxS("A AlexandrescuH BoehmK HenneyD LeaB Pugh")) >(), wxS("Memory Model for multithreaded C") > >() },
    { "n1681", RevList< Rev< 0u, Arr64< Hash(wxS("David B Held")) >(), wxS("A Proposal to Add a PolicyBased Smart Pointer Framework to the Standard Library") > >() },
    { "n1682", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("A Multithreading Library for Standard C") > >() },
    { "n1683", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed Library Additions for Code Conversions") > >() },
    { "n1684", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1685", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1686", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1687", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1688", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List Revision ") > >() },
    { "n1689", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist") > >() },
    { "n1690", RevList< Rev< 0u, Arr64< Hash(wxS("H HinnantD AbrahamsP Dimov")) >(), wxS("A Proposal to Add an Rvalue Reference to the C Language") > >() },
    { "n1691", RevList< Rev< 0u, Arr64< Hash(wxS("David Abrahams")) >(), wxS("Explicit Namespaces") > >() },
    { "n1692", RevList< Rev< 0u, Arr64< Hash(wxS("MJ Kronenburg")) >(), wxS("A Proposal to add the Infinite Precision Integer to the C Standard Library") > >() },
    { "n1693", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1694", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("A Proposal to Extend the Function Call Operator") > >() },
    { "n1695", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("A Proposal to Make Pointers to Members Callable") > >() },
    { "n1696", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Language Support for Restricted Templates") > >() },
    { "n1697", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Restrictions on Order Parameters for Bessels and Other Function Families") > >() },
    { "n1698", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA J Meeting No  WG Meeting No  Oct   Redmond Washington") > >() },
    { "n1700", RevList< Rev< 0u, Arr64< Hash(wxS("D VandevoordeB StroustrupH Sutter")) >(), wxS("C Evolution Working Group  Active Proposals Revision b") > >() },
    { "n1701", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Regularizing Initialization Syntax revision ") > >() },
    { "n1702", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("explicit class and default definitions") > >() },
    { "n1703", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Function Qualifiers") > >() },
    { "n1704", RevList< Rev< 0u, Arr64< Hash(wxS("D GregorJ JarviG Powell")) >(), wxS("Variadic Templates Exploring the Design Space") > >() },
    { "n1705", RevList< Rev< 0u, Arr64< Hash(wxS("J JarviB StroustrupG Dos Reis")) >(), wxS("Decltype and Auto revision ") > >() },
    { "n1706", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Toward Opaque typedefs in CX") > >() },
    { "n1707", RevList< Rev< 0u, Arr64< Hash(wxS("Keld Jorn Simonsen")) >(), wxS("Invitation April  meeting") > >() },
    { "n1708", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1709", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1710", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1711", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1712", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1713", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposed Resolution to TR Issues   and ") > >() },
    { "n1714", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1715", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1717", RevList< Rev< 0u, Arr64< Hash(wxS("F Glassborow L Goldthwaite")) >(), wxS("Explicit class and default definitions") > >() },
    { "n1718", RevList< Rev< 0u, Arr64< Hash(wxS("M J Kronenburg")) >(), wxS("A Proposal to add the Infinite Precision Integer and Rational to the C Standard Library") > >() },
    { "n1719", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter D Miller")) >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n1720", RevList< Rev< 0u, Arr64< Hash(wxS("R Klarer J Maddock B Dawes H Hinnant")) >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1721", RevList< Rev< 0u, Arr64< Hash(wxS("J Jaarvi B Stroustrup G Dos Reis")) >(), wxS("Deducing the type of variable from its initializer expression") > >() },
    { "n1722", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1723", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Proposed Resolutions to Library TR Issues") > >() },
    { "n1724", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("A Library Approach to Initialization") > >() },
    { "n1725", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Copy Elision in Exception Handling") > >() },
    { "n1726", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Plum")) >(), wxS("Macro scopes") > >() },
    { "n1727", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Changing Undefined Behavior into Diagnosable Errors") > >() },
    { "n1729", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1730", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1731", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1732", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1733", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1734", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors report") > >() },
    { "n1735", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1736", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n1737", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Restore Multideclarator auto Declarations") > >() },
    { "n1738", RevList< Rev< 0u, Arr64< Hash(wxS("A Alexandrescu H Boehm K Henney D Lea B Pugh M Michael")) >(), wxS("Memory Model for Multithreaded C") > >() },
    { "n1739", RevList< Rev< 0u, Arr64< Hash(wxS("David B Held")) >(), wxS("Adding a PolicyBased Smart Pointer Framework to the Standard Library") > >() },
    { "n1740", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Plum")) >(), wxS("The scope extension for the CC preprocessor") > >() },
    { "n1741", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Proposal for Extending the switch statement") > >() },
    { "n1742", RevList< Rev< 0u, Arr64< Hash(wxS("Francis Glassborow")) >(), wxS("Auxiliary class interfaces") > >() },
    { "n1743", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n1744", RevList< Rev< 0u, Arr64< Hash(wxS("Michiel Salters")) >(), wxS("Big Integer Library Proposal for Cx") > >() },
    { "n1745", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Proposed Draft Technical Report on C Library Extensions") > >() },
    { "n1746", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding extended integer types to C") > >() },
    { "n1747", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1748", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1749", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1750", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Critique of Code Conversion Proposal a hRefnhtmlNa") > >() },
    { "n1751", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Aspects of Reflection in C") > >() },
    { "n1752", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1753", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1754", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1755", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1756", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1757", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Right Angle Brackets Revision ") > >() },
    { "n1758", RevList< Rev< 0u, Arr64< Hash(wxS("J Siek D Gregor et al")) >(), wxS("Concepts for Cx") > >() },
    { "n1759", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1760", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1761", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1762", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1763", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1764", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1765", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1766", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1767", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1768", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1769", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1770", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant DnbspAbrahams JnbspAdamczyk PnbspDimov AnbspHommel")) >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording") > >() },
    { "n1771", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant DnbspAbrahams PnbspDimov DnbspGregor AnbspHommel AnbspMeredith")) >(), wxS("Impact of the rvalue reference on the Standard Library") > >() },
    { "n1772", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("Agenda") > >() },
    { "n1773", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams LnbspCrowl TnbspOttosen JnbspWidman")) >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1774", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("On the Future Evolution of C") > >() },
    { "n1775", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown et al")) >(), wxS("A Case for Reflection") > >() },
    { "n1776", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Decimal Types for C") > >() },
    { "n1777", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspAlexandrescu HnbspBoehm KnbspHenney BnbspHutchings DnbspLea BnbspPugh")) >(), wxS("Memory model for multithreaded C Issues") > >() },
    { "n1778", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n1779", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen Michell")) >(), wxS("October  Meeting Information") > >() },
    { "n1780", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Comments on LWG issue  Insertion hints in associative containers") > >() },
    { "n1781", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Rules of thumb for the design of Cx") > >() },
    { "n1782", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis")) >(), wxS("A concept design Rev ") > >() },
    { "n1783", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1784", RevList< Rev< 0u, Arr64< Hash(wxS("Bronek Kozicki")) >(), wxS("A proposal to add lvalue member function qualifier") > >() },
    { "n1785", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Toward a Proposal for Object Templates in Cx") > >() },
    { "n1786", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1787", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1788", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1789", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n1790", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1791", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1792", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A Modest Proposal Fixing ADL") > >() },
    { "n1794", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJrvi BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Deducing the type of variable from its initializer expression revision ") > >() },
    { "n1796", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Proposal for new forloop") > >() },
    { "n1798", RevList< Rev< 0u, Arr64< Hash(wxS("D Gregor J Siek")) >(), wxS("Explicit model definitions are necessary") > >() },
    { "n1799", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSiek DnbspGregor RnbspGarcia JnbspWillcock JnbspJrvi AnbspLumsdaine")) >(), wxS("C Language Support for Generic Programming") > >() },
    { "n1800", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl TnbspOttosen")) >(), wxS("Contract Programming For Cx") > >() },
    { "n1801", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Proposed resolution of core issue ") > >() },
    { "n1802", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Uniform Use of stdstring") > >() },
    { "n1803", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Simple Numeric Access") > >() },
    { "n1804", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1805", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n1806", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1807", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1808", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1809", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1810", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant BnbspDawes MnbspAustern")) >(), wxS("Library Extension TR Call for Proposals") > >() },
    { "n1811", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1814", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen Michell")) >(), wxS("October  Meeting Information Revision ") > >() },
    { "n1815", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ISO C Strategic Plan for Multithreading") > >() },
    { "n1816", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n1817", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n1818", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1819", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1820", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1821", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVandevoorde BnbspKozicki")) >(), wxS("Extending Move Semantics To this Revision ") > >() },
    { "n1822", RevList< Rev< 0u, Arr64< Hash(wxS("Paul A Bristow")) >(), wxS("A Proposal to add a max significant decimal digits value to the C Standard Library Numeric limits") > >() },
    { "n1823", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("New Character Types in C") > >() },
    { "n1824", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Extending Aggregate Initialization") > >() },
    { "n1825", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Addressing Exception Specifications for Next Generation of C") > >() },
    { "n1827", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspUzdavinis AnbspMeredith")) >(), wxS("An Explicit Override Syntax for C") > >() },
    { "n1830", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1831", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1832", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1833", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm MnbspSpertus")) >(), wxS("Transparent Garbage Collection for C") > >() },
    { "n1834", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("A Pleading for Reasonable Parallel Processing Support in C") > >() },
    { "n1835", RevList< Rev< 0u, Arr64< Hash(wxS("Steve Clamage")) >(), wxS("ltstdinthgt for C") > >() },
    { "n1836", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Draft Technical Report on C Library Extensions") > >() },
    { "n1837", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1838", RevList< Rev< 0u, Arr64< Hash(wxS("Joseph S Berros")) >(), wxS("A Proposal to Add Sockets to the Standard Library") > >() },
    { "n1839", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Decimal Types for C Second Draft") > >() },
    { "n1840", RevList< Rev< 0u, Arr64< Hash(wxS("Herv Brnnimann")) >(), wxS("Cx Proposal Function template stdminmax and  or algorithm stdminmaxelement") > >() },
    { "n1841", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal") > >() },
    { "n1842", RevList< Rev< 0u, Arr64< Hash(wxS("Paul A Bristow")) >(), wxS("A Proposal to add two iostream manipulators to the C Standard Library") > >() },
    { "n1843", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBrnnimann GnbspMelquiond SnbspPion")) >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library") > >() },
    { "n1844", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1845", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1846", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1847", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("vectorltboolgt More Problems Better Solutions") > >() },
    { "n1848", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek")) >(), wxS("Implementing Concepts") > >() },
    { "n1849", RevList< Rev< 0u, Arr64< Hash(wxS("D Gregor J Siek et al")) >(), wxS("Concepts for Cx Revision ") > >() },
    { "n1850", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Towards a Better Allocator Model") > >() },
    { "n1851", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspKliatchko InbspRocha")) >(), wxS("Improving Usability and Performance of TR Smart Pointers") > >() },
    { "n1852", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1853", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1854", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1855", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams PnbspDimov HnbspHinnant AnbspHommel")) >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording") > >() },
    { "n1856", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1857", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1858", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1859", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1860", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1861", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1862", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1864", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG liaison report") > >() },
    { "n1865", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Improve constiterator Use version ") > >() },
    { "n1866", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl TnbspOttosen")) >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1867", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl TnbspOttosen")) >(), wxS("Synergies between Contract Programming Concepts and Static Assertions") > >() },
    { "n1868", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Proposal for new forloop revision ") > >() },
    { "n1869", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for imaginary numbers") > >() },
    { "n1870", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS(" crazy ideas for the standard library in Cx") > >() },
    { "n1871", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Range Library Proposal") > >() },
    { "n1872", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDroba TnbspOttosen")) >(), wxS("Proposal for new string algorithms in Cx") > >() },
    { "n1873", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspKhl DnbspAbrahams")) >(), wxS("The CursorProperty Map Abstraction") > >() },
    { "n1874", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n1875", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Threads") > >() },
    { "n1876", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm DnbspLea BnbspPugh")) >(), wxS("Memory model for multithreaded C August  status update") > >() },
    { "n1877", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Farkas Fehr")) >(), wxS("Adding Alignment Support to the C Programming Language") > >() },
    { "n1878", RevList< Rev< 0u, Arr64< Hash(wxS("Fernando Cacciola")) >(), wxS("A proposal to add an utility class to represent optional objects Revision ") > >() },
    { "n1880", RevList< Rev< 0u, Arr64< Hash(wxS("Fernando Cacciola")) >(), wxS("A proposal to extend numericlimits for consistent range query Revision ") > >() },
    { "n1882", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA") > >() },
    { "n1883", RevList< Rev< 0u, Arr64< Hash(wxS("Kevlin Henney")) >(), wxS("Preliminary Threading Library Proposal for TR") > >() },
    { "n1884", RevList< Rev< 0u, Arr64< Hash(wxS("PJnbspPlauger CnbspWalker")) >(), wxS("Further Restrictions on Special Math Functions") > >() },
    { "n1885", RevList< Rev< 0u, Arr64< Hash(wxS("G Dos Reis B Stroustrup")) >(), wxS("A formalism for C") > >() },
    { "n1886", RevList< Rev< 0u, Arr64< Hash(wxS("G Dos Reis B Stroustrup")) >(), wxS("Specifying C concepts") > >() },
    { "n1887", RevList< Rev< 0u, Arr64< Hash(wxS("Cord Wischhoeffer")) >(), wxS("Meeting information for SC WG  Meetings in Berlin") > >() },
    { "n1888", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Defining Members of Explicit Specializations") > >() },
    { "n1889", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1890", RevList< Rev< 0u, Arr64< Hash(wxS("B Stroustrup G Dos Reis")) >(), wxS("Initialization and initializers") > >() },
    { "n1891", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Progress toward Opaque Typedefs for CX") > >() },
    { "n1892", RevList< Rev< 0u, Arr64< Hash(wxS("I McIntosh M Wong R Mak")) >(), wxS("Extensible Literals") > >() },
    { "n1893", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A Modest Proposal Fixing ADL revision ") > >() },
    { "n1894", RevList< Rev< 0u, Arr64< Hash(wxS("J Jrvi B Stroustrup G Dos Reis")) >(), wxS("Deducing the type of variable from its initializer expression revision ") > >() },
    { "n1895", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter F Glassborow")) >(), wxS("Delegating Constructors revision ") > >() },
    { "n1896", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Proposed resolution of core issue  revision ") > >() },
    { "n1898", RevList< Rev< 0u, Arr64< Hash(wxS("M Michaud M Wong")) >(), wxS("Forwarding and inherited constructors") > >() },
    { "n1899", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Concept proposal comparison") > >() },
    { "n1900", RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("Proposal to Add DateTime to the C Standard Library") > >() },
    { "n1901", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1902", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1903", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1904", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1905", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1906", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n1907", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("A Multithreading Library for Standard C Revision ") > >() },
    { "n1908", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1909", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1910", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1911", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Memory Model for C Status update") > >() },
    { "n1912", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("A sketch for a namespace operator") > >() },
    { "n1913", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Improve constiterator Use version ") > >() },
    { "n1914", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspPaterno MnbspFischler WnbspBrown JnbspKowalkowski")) >(), wxS("A Proposal to Add RandomNumber Distributions to Cx") > >() },
    { "n1915", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1916", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1917", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n1919", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Initializer lists") > >() },
    { "n1924", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("TG Liaison Report ") > >() },
    { "n1925", RevList< Rev< 0u, Arr64< Hash(wxS("Gerhard Wesp")) >(), wxS("Networking proposal for TR rev ") > >() },
    { "n1926", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1927", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1928", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1929", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1930", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1931", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1932", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown MnbspFischler JnbspKowalkowski MnbspPaterno")) >(), wxS("Random Number Generation in CX A Comprehensive Proposal") > >() },
    { "n1933", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown MnbspFischler JnbspKowalkowski MnbspPaterno")) >(), wxS("Improvements to TRs Facility for Random Number Generation") > >() },
    { "n1934", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1935", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1936", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1937", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1938", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Lookup Issues in Destructor and PseudoDestructor References") > >() },
    { "n1939", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes KnbspHenney")) >(), wxS("Any Library Proposal for TR") > >() },
    { "n1940", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("Why POSIX Threads Are Unsuitable for C") > >() },
    { "n1941", RevList< Rev< 0u, Arr64< Hash(wxS("Steve Clamage")) >(), wxS("Agenda J Meeting No  WG Meeting No ") > >() },
    { "n1942", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("A Memory Model for C Strawman Proposal") > >() },
    { "n1943", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm MnbspSpertus")) >(), wxS("Transparent Garbage Collection for C") > >() },
    { "n1944", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("A finergrained alternative to sequence points") > >() },
    { "n1945", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Names Linkage and Templates") > >() },
    { "n1946", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Portland meeting information") > >() },
    { "n1947", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("The Memory Model and the C Library NonMemory Actions etc") > >() },
    { "n1949", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1950", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1951", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1953", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("Upgrading the Interface of Allocators using API Versioning") > >() },
    { "n1954", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("LWG Paper Summary") > >() },
    { "n1955", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("New Character Types in C") > >() },
    { "n1956", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A Design Rationale for CCLI Version ") > >() },
    { "n1957", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed Library Additions for Code Conversion") > >() },
    { "n1958", RevList< Rev< 0u, Arr64< Hash(wxS("Valentin Samko")) >(), wxS("A proposal to add lambda functions to the C standard") > >() },
    { "n1959", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Class member initializers") > >() },
    { "n1960", RevList< Rev< 0u, Arr64< Hash(wxS("John Spicer")) >(), wxS("Adding quotextern templatequot") > >() },
    { "n1961", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for rangebased forloop") > >() },
    { "n1962", RevList< Rev< 0u, Arr64< Hash(wxS("L Crowl T Ottosen")) >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1963", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("Generic Support for Threading Models") > >() },
    { "n1964", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n1965", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Decimal Types for C Draft ") > >() },
    { "n1966", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n1968", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspWillcock J Jaumlrvi DnbspGregor BnbspStroustrup AnbspLumsdaine")) >(), wxS("Lambda expressions and closures for C") > >() },
    { "n1969", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution before Berlin  Meeting") > >() },
    { "n1970", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Compatibility  func and predeclared identifiers") > >() },
    { "n1971", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Farkas Fehr")) >(), wxS("Adding Alignment Support to the C Programming Language") > >() },
    { "n1972", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Generalized Constant Expressions mdash Revision ") > >() },
    { "n1973", RevList< Rev< 0u, Arr64< Hash(wxS("KnbspHenney BnbspDawes")) >(), wxS("Lexical Conversion Library Proposal for TR") > >() },
    { "n1974", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Boost Network Library Query") > >() },
    { "n1975", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1976", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Dynamic Shared Objects Survey and Issues") > >() },
    { "n1977", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Decimal Types for C Draft ") > >() },
    { "n1978", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJarvi BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Decltype revision ") > >() },
    { "n1980", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Generalized Constant Expressions Revision ") > >() },
    { "n1981", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Uniform Use of stdstring Revision ") > >() },
    { "n1982", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Simple Numeric Access Revision ") > >() },
    { "n1983", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("long long size t and compatibility") > >() },
    { "n1986", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspSutter FnbspGlassborow")) >(), wxS("Delegating Constructors revision ") > >() },
    { "n1987", RevList< Rev< 0u, Arr64< Hash(wxS("John Spicer")) >(), wxS("Adding quotextern templatequot version ") > >() },
    { "n1988", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Adding extended integer types to C Revision ") > >() },
    { "n1990", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Proposed Text for minmax a hRefnpdfNa") > >() },
    { "n1991", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Proposed Text for defaultfloat a hRefnpdfNa") > >() },
    { "n1992", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1993", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n1997", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1998", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1999", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2000", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2001", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2002", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2003", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("LWG Paper Summary") > >() },
    { "n2004", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Impact of Language Changes on LWG Schedule") > >() },
    { "n2006", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Accessibility and Visibility in C Modules") > >() },
    { "n2007", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Proposed Library Additions for Code Conversion") > >() },
    { "n2008", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2009", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2010", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Memory Model Overview") > >() },
    { "n2011", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution after Berlin  Meeting") > >() },
    { "n2012", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Thread Subcommittee Minutes from Berlin") > >() },
    { "n2013", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Versioning with Namespaces") > >() },
    { "n2014", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("C and POSIX Compatibility") > >() },
    { "n2015", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Plugins in C") > >() },
    { "n2016", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm NnbspMaclaren")) >(), wxS("Should volatile Acquire Atomicity and Thread Visibility Semantics") > >() },
    { "n2018", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("New Character Types in C") > >() },
    { "n2019", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n2020", RevList< Rev< 0u, Arr64< Hash(wxS("MJ Kronenburg")) >(), wxS("Proposal for an Infinite Precision Integer for Library Technical Report  Revision ") > >() },
    { "n2021", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business plan and convenors report") > >() },
    { "n2022", RevList< Rev< 0u, Arr64< Hash(wxS("Paul A Bristow")) >(), wxS("Input amp Output of NaN and infinity for the C Standard Library") > >() },
    { "n2023", RevList< Rev< 0u, Arr64< Hash(wxS("Joaqun M Lpez Muoz")) >(), wxS("eraseiterator for unordered containers should not return an iterator") > >() },
    { "n2024", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2025", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2026", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2027", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant BnbspStroustrup BnbspKozicki")) >(), wxS("A Brief Introduction to Rvalue References") > >() },
    { "n2028", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Minor Modifications to the type traits Wording") > >() },
    { "n2029", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2030", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2031", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2033", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown MnbspFischler JnbspKowalkowski MnbspPaterno")) >(), wxS("Proposal to Consolidate the SubtractwithCarry Engines") > >() },
    { "n2034", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n2035", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Austern")) >(), wxS("Minimal Unicode support for the standard library") > >() },
    { "n2036", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Approach") > >() },
    { "n2037", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Introduction") > >() },
    { "n2038", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Utilities") > >() },
    { "n2039", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Iterators") > >() },
    { "n2040", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms") > >() },
    { "n2041", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Numerics") > >() },
    { "n2042", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup")) >(), wxS("Concepts") > >() },
    { "n2044", RevList< Rev< 0u, Arr64< Hash(wxS("Ion Gaztaaga")) >(), wxS("Memory Mapped Files And Shared Memory For C") > >() },
    { "n2045", RevList< Rev< 0u, Arr64< Hash(wxS("Ion Gaztaaga")) >(), wxS("Improving STL Allocators") > >() },
    { "n2046", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBrnnimann GnbspMelquiond SnbspPion")) >(), wxS("Boolset multivalued logic") > >() },
    { "n2047", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("An Atomic Operations Library for C") > >() },
    { "n2049", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("Conceptualizing the RangeBased for Loop") > >() },
    { "n2050", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspAllsop AnbspMeredith GnbspProta")) >(), wxS("Proposal to Add a Dynamically Sizeable Bitset to the Standard Library Technical Report Revision ") > >() },
    { "n2051", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Evolution of the C Standard Library") > >() },
    { "n2052", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspNelson HJnbspBoehm")) >(), wxS("Sequencing and the concurrency memory model") > >() },
    { "n2053", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Raw String Literals") > >() },
    { "n2054", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library Proposal for TR") > >() },
    { "n2055", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2056", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2057", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2058", RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("Proposed Text for Proposal to add DateTime to the Standard Library ") > >() },
    { "n2059", RevList< Rev< 0u, Arr64< Hash(wxS("Pavol Droba")) >(), wxS("Proposal for new string algorithms in TR") > >() },
    { "n2061", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Exception Propagation Support") > >() },
    { "n2062", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited") > >() },
    { "n2063", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA J Meeting No  WG Meeting No ") > >() },
    { "n2065", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("A proposal to add stream objects based on fixed memory buffers") > >() },
    { "n2066", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("TR Diagnostics Enhancements") > >() },
    { "n2067", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBrnnimann GnbspMelquiond SnbspPion")) >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library") > >() },
    { "n2068", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Range Library Core") > >() },
    { "n2069", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Yet another typetrait decay") > >() },
    { "n2070", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("Enhancing the codetimegetcode facet for POSIX compatibility") > >() },
    { "n2073", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n2074", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Plugins in C") > >() },
    { "n2076", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("Oxford meeting invitation") > >() },
    { "n2080", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJaumlrvi GnbspPowell")) >(), wxS("Variadic Templates Revision ") > >() },
    { "n2081", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup")) >(), wxS("Concepts Revision ") > >() },
    { "n2082", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2083", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2084", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspWillcock AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2085", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("Concepts for the Cx Standard Library Containers") > >() },
    { "n2086", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("Signals and Slots for Library TR") > >() },
    { "n2087", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("A Brief Introduction to Variadic Templates") > >() },
    { "n2088", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("IEEE R Support and Threading and Decimal") > >() },
    { "n2089", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("Asynchronous Exceptions for Threads") > >() },
    { "n2090", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("A Threading API for C") > >() },
    { "n2091", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2092", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2093", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2094", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Multithreading API for CX  A Layered Approach") > >() },
    { "n2095", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("long long Goes to the Library") > >() },
    { "n2096", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Transporting Values and Exceptions between Threads") > >() },
    { "n2098", RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Siek")) >(), wxS("Scoped Concept Maps") > >() },
    { "n2099", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS(" of the least crazy ideas for the standard library in Cx") > >() },
    { "n2100", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Initializer lists") > >() },
    { "n2101", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspReiter RnbspRivera")) >(), wxS("Hierarchical Data Structures and Related Concepts for the C Standard Library") > >() },
    { "n2102", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2103", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A Modest Proposal Fixing ADL revision ") > >() },
    { "n2104", RevList< Rev< 0u, Arr64< Hash(wxS("Arch D Robison")) >(), wxS("A Proposal to Add Parallel Iteration to the Standard Library") > >() },
    { "n2105", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Proposed Cx Keywords Considered") > >() },
    { "n2106", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Cloning and Throwing Dynamically Typed Exceptions") > >() },
    { "n2107", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer AnbspMeredith")) >(), wxS("Exception Propagation across Threads") > >() },
    { "n2108", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer AnbspMeredith")) >(), wxS("Explicit Virtual Overides") > >() },
    { "n2109", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n2110", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n2112", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Templates Aliases") > >() },
    { "n2114", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("long long Goes to the Library Revision ") > >() },
    { "n2115", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Decltype revision  proposed wording") > >() },
    { "n2116", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup JnbspMaurer")) >(), wxS("Generalized Constant Expressions Revision ") > >() },
    { "n2117", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Minimal Dynamic Library Support") > >() },
    { "n2119", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors") > >() },
    { "n2120", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("April  Meeting") > >() },
    { "n2121", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Proposed Improvements to the Presentation of Requirements for Functions") > >() },
    { "n2122", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution after Portland  Meeting") > >() },
    { "n2123", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Adding the prohibited access specifier to C") > >() },
    { "n2125", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2126", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2127", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2128", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm MnbspSpertus")) >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2129", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm MnbspSpertus")) >(), wxS("Transparent Garbage Collection for C Revised") > >() },
    { "n2130", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2131", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2132", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2133", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2134", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2135", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Programming Languages C") > >() },
    { "n2136", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBrnnimann GnbspMelquiond SnbspPion")) >(), wxS("Boolset multivalued logic revision ") > >() },
    { "n2137", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBrnnimann GnbspMelquiond SnbspPion")) >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library revision ") > >() },
    { "n2138", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("A Less Formal Explanation of the Proposed C Concurrency Memory Model") > >() },
    { "n2139", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Thoughts on a Thread Library for C") > >() },
    { "n2140", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Farkas Fehr")) >(), wxS("Adding Alignment Support to the C Programming Language  Consolidated") > >() },
    { "n2141", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Strong Typedefs in CRevisited") > >() },
    { "n2142", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution between Portland and Oxford  Meetings") > >() },
    { "n2143", RevList< Rev< 0u, Arr64< Hash(wxS("MJ Kronenburg")) >(), wxS("Proposal for an Infinite Precision Integer for Library Technical Report  Revision ") > >() },
    { "n2144", RevList< Rev< 0u, Arr64< Hash(wxS("MJ Kronenburg")) >(), wxS("Proposal for exact specification of is modulo") > >() },
    { "n2145", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C Atomic Types and Operations") > >() },
    { "n2146", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Raw String Literals Revision ") > >() },
    { "n2147", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n2148", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2149", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("New Character Types in C") > >() },
    { "n2150", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Extending sizeof to apply to nonstatic data members without an object") > >() },
    { "n2151", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJrvi")) >(), wxS("Variadic Templates for the Cx Standard Library") > >() },
    { "n2152", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJaumlrvi JnbspMaurer JnbspMerrill")) >(), wxS("Proposed Wording for Variadic Templates") > >() },
    { "n2153", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspSilvera MnbspWong PnbspMcKenney BnbspBlainey")) >(), wxS("A simple and efficient memory model for weaklyordered architectures") > >() },
    { "n2154", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2155", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2156", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2157", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Minor Modifications to the type traits Wording Revision ") > >() },
    { "n2158", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("LWG Issue  Linking newdelete operators") > >() },
    { "n2159", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("UTF String Literals") > >() },
    { "n2160", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Issue  Fixing vectorltboolgt") > >() },
    { "n2161", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Considering Concept Constraint Combinators") > >() },
    { "n2162", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2163", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2164", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2165", RevList< Rev< 0u, Arr64< Hash(wxS("Attila Farkas Fehr")) >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2166", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n2167", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("Overview of LinuxKernel Reference Counting") > >() },
    { "n2168", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("July  Meeting of WGJ Travel Information") > >() },
    { "n2169", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution preOxford  Meeting") > >() },
    { "n2170", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Universal Character Names in Literals") > >() },
    { "n2171", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspNelson HJnbspBoehm")) >(), wxS("Sequencing and the concurrency memory model revised") > >() },
    { "n2172", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2173", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Core Extensions for Evolution") > >() },
    { "n2174", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Diagnostics Enhancements for Cx") > >() },
    { "n2175", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library Proposal for TR Revision ") > >() },
    { "n2176", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Memory Model Rationales") > >() },
    { "n2177", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Sequential Consistency for Atomics") > >() },
    { "n2178", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Proposed Text for Chapter  Thread Support Library threads") > >() },
    { "n2179", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Language Support for Transporting Exceptions between Threads") > >() },
    { "n2180", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2181", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2182", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2183", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Issues From Batavia") > >() },
    { "n2184", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Thread Launching for CX") > >() },
    { "n2185", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Proposed Text for Parallel Task Execution") > >() },
    { "n2186", RevList< Rev< 0u, Arr64< Hash(wxS("James Kanze")) >(), wxS("Some Small Additions to iostream") > >() },
    { "n2187", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Names Linkage and Templates rev ") > >() },
    { "n2188", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2189", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2190", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2191", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJaumlrvi JnbspMaurer JnbspMerrill")) >(), wxS("Proposed Wording for Variadic Templates Revision ") > >() },
    { "n2192", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJrvi")) >(), wxS("Variadic Templates for the Cx Standard Library Revision ") > >() },
    { "n2193", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup")) >(), wxS("Proposed Wording for Concepts") > >() },
    { "n2194", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJrvi")) >(), wxS("decltype for the Cx Standard Library") > >() },
    { "n2195", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Proposed Text for Chapter  Atomic Operations Library atomics") > >() },
    { "n2196", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2197", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Prism A PrincipleBased Sequential Memory Model for Microsoft Native Code Platforms") > >() },
    { "n2198", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Extension for the programming language C to support decimal floatingpoint arithmetic") > >() },
    { "n2199", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Improved minmax") > >() },
    { "n2200", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspPowell DnbspGregor JnbspJaumlrvi")) >(), wxS("Operator Overloading") > >() },
    { "n2201", RevList< Rev< 0u, Arr64< Hash(wxS("Steve Clamage")) >(), wxS("AGENDA J Meeting No  WG Meeting No  April   Oxford UK") > >() },
    { "n2202", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith Jens Maurer")) >(), wxS("C Compatibility  func and predeclared identifiers") > >() },
    { "n2203", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors") > >() },
    { "n2204", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("A Specification to deprecate vectorltboolgt") > >() },
    { "n2206", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Consistent Insertion into Standard Containers") > >() },
    { "n2207", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Austern")) >(), wxS("Minimal Unicode support for the standard library revision ") > >() },
    { "n2209", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("UTF String Literals") > >() },
    { "n2210", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2211", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("Enhancing the timeget facet for POSIX compatibility Revision ") > >() },
    { "n2212", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Support for sequence inplace construction") > >() },
    { "n2213", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter D Miller B Stroustrup")) >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n2214", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter B Stroustrup")) >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n2215", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Initializer lists Rev ") > >() },
    { "n2216", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspPirkelbauer YnbspSolodkyy BnbspStroustrup")) >(), wxS("Report on language support for MultiMethods and OpenMethods for C") > >() },
    { "n2217", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Placement Insert for Containers") > >() },
    { "n2219", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Constant Expressions in the Standard Library") > >() },
    { "n2220", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Initializer Lists for Standard Containers") > >() },
    { "n2221", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis")) >(), wxS("An analysis of concept intersection") > >() },
    { "n2222", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Toronto Agenda") > >() },
    { "n2223", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspGoldthwaite MnbspWong")) >(), wxS("Explicit Conversion Operator Draft Working Paper") > >() },
    { "n2224", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Seeking a Syntax for Attributes in C") > >() },
    { "n2225", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Improved integration with C arrays and strings") > >() },
    { "n2228", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution preOxford  Meeting") > >() },
    { "n2229", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Cloning and Throwing Dynamically Typed Exceptions Rev ") > >() },
    { "n2230", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2231", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("STL singly linked lists") > >() },
    { "n2232", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov BnbspDawes")) >(), wxS("Improving sharedptr for Cx") > >() },
    { "n2233", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("basicstring operator ltlt") > >() },
    { "n2234", RevList< Rev< 0u, Arr64< Hash(wxS("AFNOR")) >(), wxS("French Panel AFNOR Position") > >() },
    { "n2235", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup JnbspMaurer")) >(), wxS("Generalized Constant ExpressionsRevision ") > >() },
    { "n2236", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C") > >() },
    { "n2237", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspSilvera MnbspWong PnbspMcKenney BnbspBlainey")) >(), wxS("A simple and efficient memory model for weaklyordered architectures") > >() },
    { "n2238", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Austern")) >(), wxS("Minimal Unicode support for the standard library revision ") > >() },
    { "n2239", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("A finergrained alternative to sequence points revised") > >() },
    { "n2240", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Two missing traits enableif and conditional") > >() },
    { "n2241", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Diagnostics Enhancements for Cx Rev ") > >() },
    { "n2242", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspJaumlrvi JnbspMaurer JnbspMerrill")) >(), wxS("Proposed Wording for Variadic Templates Revision ") > >() },
    { "n2243", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2244", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for decay makepair and maketuple") > >() },
    { "n2245", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Range Utilities for Cx") > >() },
    { "n2246", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS(" of the least crazy ideas for the standard library in Cx") > >() },
    { "n2248", RevList< Rev< 0u, Arr64< Hash(wxS("Lois Goldthwaite")) >(), wxS("Toward a More Perfect Union") > >() },
    { "n2249", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("New Character Types in C") > >() },
    { "n2252", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspFehr CnbspNelson")) >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2254", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2255", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Minor Modifications to the type traits Wording Revision ") > >() },
    { "n2256", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Austern")) >(), wxS("Container inserterase and iterator constness") > >() },
    { "n2257", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Austern")) >(), wxS("Removing unused allocator functions") > >() },
    { "n2258", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Templates Aliases") > >() },
    { "n2259", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Specify header dependency for ltiostreamgt") > >() },
    { "n2260", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("C DataDependency Ordering") > >() },
    { "n2261", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm MnbspSpertus")) >(), wxS("Optimizationrobust finalization") > >() },
    { "n2262", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspSilvera PnbspDimov")) >(), wxS("Explicit Memory Fences") > >() },
    { "n2263", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2264", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2265", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2266", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n2267", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n2268", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Placement Insert for Containers Revision ") > >() },
    { "n2269", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA July   Toronto Ontario Canada") > >() },
    { "n2270", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik MnbspAustern")) >(), wxS("Incompatible changes in Cx") > >() },
    { "n2271", RevList< Rev< 0u, Arr64< Hash(wxS("Paul Pedriana")) >(), wxS("EASTL  Electronic Arts Standard Template Library") > >() },
    { "n2272", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("Optional Sequential Consistency") > >() },
    { "n2273", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("NonMemory Actions Core Aspects") > >() },
    { "n2274", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("Object Aliasing and Threads") > >() },
    { "n2275", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Maclaren")) >(), wxS("NonMemory Actions Library") > >() },
    { "n2276", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Thread Pools and Futures") > >() },
    { "n2277", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2278", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2279", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2280", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n2281", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Digit Separators") > >() },
    { "n2282", RevList< Rev< 0u, Arr64< Hash(wxS("InbspMcIntosh MnbspWong RnbspMak RnbspKlarer")) >(), wxS("Extensible Literals revision ") > >() },
    { "n2283", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors report") > >() },
    { "n2284", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2285", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("A Multithreading Library for Standard C Revision ") > >() },
    { "n2286", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Programmer Directed GC for C") > >() },
    { "n2287", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm MnbspSpertus")) >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2288", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Constant Expressions in the Standard Library Revision ") > >() },
    { "n2289", RevList< Rev< 0u, Arr64< Hash(wxS("Tom Plum")) >(), wxS("October  Meeting") > >() },
    { "n2290", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business plan and convenors report") > >() },
    { "n2291", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution Toronto  Meeting") > >() },
    { "n2292", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Standard Library Applications for Deleted Functions") > >() },
    { "n2293", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Standard Library Applications for Explicit Conversion Operators") > >() },
    { "n2294", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2295", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl BnbspDawes")) >(), wxS("Raw and Unicode String Literals Unified Proposal") > >() },
    { "n2296", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes BnbspKosnik")) >(), wxS("Diagnostics Enhancements Resolution of Small Issues") > >() },
    { "n2297", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov BnbspDawes")) >(), wxS("Improving sharedptr for Cx Revision ") > >() },
    { "n2298", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes PnbspDimov HnbspSutter")) >(), wxS("ThreadSafety in the Standard Library") > >() },
    { "n2299", RevList< Rev< 0u, Arr64< Hash(wxS("Joe Gottman")) >(), wxS("Concatenating tuples") > >() },
    { "n2300", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspNelson HJnbspBoehm")) >(), wxS("Concurrency memory model revised") > >() },
    { "n2301", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspFehr CnbspNelson")) >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2303", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Revised systemerror") > >() },
    { "n2304", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2305", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2306", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2307", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2308", RevList< Rev< 0u, Arr64< Hash(wxS("Emil Dotchevski")) >(), wxS("Adding allocator support to stdfunction for Cx") > >() },
    { "n2309", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Errorhandling and Exceptionrelated library changes for Cx") > >() },
    { "n2310", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm MnbspSpertus")) >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2312", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Namespace Regions") > >() },
    { "n2314", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors report") > >() },
    { "n2315", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2316", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n2317", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2318", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2319", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2320", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant BnbspDawes LnbspCrowl JnbspGarland AnbspWilliams")) >(), wxS("Multithreading Library for Standard C") > >() },
    { "n2321", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("Enhancing the timeget facet for POSIX compatibility Revision ") > >() },
    { "n2322", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2323", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2324", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C Atomic Types and Operations") > >() },
    { "n2325", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2326", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2327", RevList< Rev< 0u, Arr64< Hash(wxS("Cosmin Truta")) >(), wxS("Inconsistencies in IOStreams Numeric Extraction") > >() },
    { "n2328", RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("Proposal for DateTime Types in Cx To Support Threading APIs") > >() },
    { "n2329", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi JnbspFreeman LnbspCrowl")) >(), wxS("Lambda expressions and closures for C Revision ") > >() },
    { "n2331", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Namespace Association quotstrongquot using") > >() },
    { "n2332", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Argument Deduction for Constructors") > >() },
    { "n2333", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspGoldthwaite MnbspWong JnbspMaurer")) >(), wxS("Explicit Conversion Operator Draft Working Paper Revision ") > >() },
    { "n2334", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspNelson HJnbspBoehm")) >(), wxS("Concurrency memory model revised again") > >() },
    { "n2336", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution Toronto  Meeting") > >() },
    { "n2337", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("The Syntax of auto Declarations") > >() },
    { "n2338", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Concurrency memory model compiler consequences") > >() },
    { "n2339", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Response to a hRefnhtmlNa quotRemoving unused allocator functionsquot") > >() },
    { "n2340", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith JnbspMaurer")) >(), wxS("C Compatibility  func and predeclared identifiers revision ") > >() },
    { "n2341", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspFehr CnbspNelson")) >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2342", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2343", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Decltype revision  proposed wording") > >() },
    { "n2345", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Placement Insert for Containers Revision ") > >() },
    { "n2346", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2347", RevList< Rev< 0u, Arr64< Hash(wxS("D Miller H Sutter B Stroustrup")) >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n2348", RevList< Rev< 0u, Arr64< Hash(wxS("Marc Paterno")) >(), wxS("Wording for stdnumericlimitsltTgtlowest") > >() },
    { "n2349", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Constant Expressions in the Standard Library Revision ") > >() },
    { "n2350", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspAustern AnbspTalbot")) >(), wxS("Container inserterase and iterator constness Revision ") > >() },
    { "n2351", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov BnbspDawes")) >(), wxS("Improving sharedptr for Cx Revision ") > >() },
    { "n2353", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("A Specification for vectorltboolgt") > >() },
    { "n2354", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Class member initializers") > >() },
    { "n2355", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No WG Meeting No  July   ") > >() },
    { "n2356", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting July  ") > >() },
    { "n2359", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("C DataDependency Ordering Atomics") > >() },
    { "n2360", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("C DataDependency Ordering Memory Model") > >() },
    { "n2361", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2362", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney LnbspCrowl")) >(), wxS("Converting Memory Fences to a hRefnhtmlNa Form") > >() },
    { "n2363", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report postToronto  Meeting") > >() },
    { "n2364", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Development of C Standard C Library Technical Report no ") > >() },
    { "n2365", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer AnbspMeredith")) >(), wxS("Explicit Virtual Overides") > >() },
    { "n2366", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2367", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2368", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2369", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2370", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2371", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2372", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2373", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2374", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG agenda") > >() },
    { "n2376", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2377", RevList< Rev< 0u, Arr64< Hash(wxS("B Kozicki D Vandevoorde")) >(), wxS("Extending move semantics to this revised wording") > >() },
    { "n2378", RevList< Rev< 0u, Arr64< Hash(wxS("InbspMcIntosh MnbspWong RnbspMak RnbspKlarer et al")) >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2379", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2380", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspGoldthwaite MnbspWong JnbspMaurer AnbspMeredith")) >(), wxS("Explicit Conversion Operator Draft Working Paper revision ") > >() },
    { "n2381", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C Atomic Types and Operations") > >() },
    { "n2382", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2383", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Abandoning a Process") > >() },
    { "n2384", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl BnbspDawes")) >(), wxS("Raw and Unicode String Literals Unified Proposal Rev ") > >() },
    { "n2385", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSnbspAdamczyk GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Initializer lists WP wording") > >() },
    { "n2386", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Namespace Regions") > >() },
    { "n2387", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Omnibus Allocator Fixup Proposals") > >() },
    { "n2388", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Pointer Arithmetic for sharedptr") > >() },
    { "n2389", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution preKona  Meeting") > >() },
    { "n2390", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report preKona  Meeting") > >() },
    { "n2391", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Recommendations for Resolving Issues re rand") > >() },
    { "n2393", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C Atomic Types and Operations") > >() },
    { "n2394", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2395", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2396", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2397", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2398", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2399", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("A Tour of the Concepts Wording") > >() },
    { "n2400", RevList< Rev< 0u, Arr64< Hash(wxS("Jon Caves")) >(), wxS("February  Meeting") > >() },
    { "n2401", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Code Conversion Facets for the Standard C Library") > >() },
    { "n2402", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Names Linkage and Templates rev ") > >() },
    { "n2403", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2404", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2405", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2406", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("Mutex Lock Condition Variable Rationale") > >() },
    { "n2407", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Dynamic Library Support") > >() },
    { "n2408", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Simple Numeric Access Revision ") > >() },
    { "n2410", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes PnbspDimov HnbspSutter")) >(), wxS("ThreadSafety in the Standard Library Rev ") > >() },
    { "n2411", RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("Proposal for DateTime Types in Cx To Support Threading APIs v") > >() },
    { "n2412", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTalbot LnbspGoldthwaite LnbspCrowl")) >(), wxS("Unrestricted Unions") > >() },
    { "n2413", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi JnbspFreeman LnbspCrowl")) >(), wxS("Lambda Expressions and Closures Wording for Monomorphic Lambdas") > >() },
    { "n2414", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSiek JnbspWidman")) >(), wxS("Proposed Wording for Scoped Concept Maps") > >() },
    { "n2415", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes CnbspKohlhoff")) >(), wxS("Diagnostics Issues Rev ") > >() },
    { "n2416", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n2417", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Cx Timing Options for Kona Discussion") > >() },
    { "n2418", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2420", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspStoughton HnbspSutter")) >(), wxS("POSIXC Liaison Report") > >() },
    { "n2421", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspSiek JnbspWidman")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2422", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes CnbspKohlhoff")) >(), wxS("Diagnostics Issues Rev ") > >() },
    { "n2423", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Recommendations for Resolving Issues re rand Version ") > >() },
    { "n2424", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Recommendations for Resolving the  Issues re rand") > >() },
    { "n2425", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("DRAFT C Dynamic Library Support") > >() },
    { "n2426", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Class member initializers") > >() },
    { "n2427", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C Atomic Types and Operations") > >() },
    { "n2429", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspNelson HJnbspBoehm")) >(), wxS("Concurrency memory model final revision") > >() },
    { "n2430", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTalbot LnbspGoldthwaite LnbspCrowl JnbspMaurer")) >(), wxS("Unrestricted Unions Revision ") > >() },
    { "n2431", RevList< Rev< 0u, Arr64< Hash(wxS("H Sutter B Stroustrup")) >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n2432", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution postKona  Meeting") > >() },
    { "n2433", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report postKona  Meeting") > >() },
    { "n2434", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Standard Library Applications for Explicit Conversion Operators") > >() },
    { "n2435", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Explicit bool for Smart Pointers") > >() },
    { "n2436", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Small Allocator Fixups") > >() },
    { "n2437", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspGoldthwaite MnbspWong JnbspMaurer AnbspMeredith")) >(), wxS("Explicit Conversion Operator Draft Working Paper revision ") > >() },
    { "n2438", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2439", RevList< Rev< 0u, Arr64< Hash(wxS("Bronek Kozicki")) >(), wxS("Extending move semantics to this revised wording") > >() },
    { "n2440", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Abandoning a Process") > >() },
    { "n2442", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl BnbspDawes")) >(), wxS("Raw and Unicode String Literals Unified Proposal Rev ") > >() },
    { "n2444", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2445", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("New Function Declarator Syntax Wording") > >() },
    { "n2446", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("The Scoped Allocator Model") > >() },
    { "n2447", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant JnbspGarland AnbspMeredith CnbspKohlhoff DnbspKhl et al")) >(), wxS("Multithreading Library for Standard C") > >() },
    { "n2448", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("STL singly linked lists revision ") > >() },
    { "n2449", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2450", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2451", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2452", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of WG Meeting No  October  ") > >() },
    { "n2453", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No  October  ") > >() },
    { "n2454", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n2455", RevList< Rev< 0u, Arr64< Hash(wxS("WG ")) >(), wxS("Thread Cancellation") > >() },
    { "n2456", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2457", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2458", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2459", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Allow atomics use in signal handlers") > >() },
    { "n2461", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2462", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2464", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n2465", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Caves")) >(), wxS("Winter  Meeting Version ") > >() },
    { "n2472", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis SnbspPion JPnbspRigault")) >(), wxS("June  Meeting") > >() },
    { "n2473", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2474", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2475", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2476", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA J Meeting No  February   Mar   Bellevue WA") > >() },
    { "n2477", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Uniform initialization design choices") > >() },
    { "n2478", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Add typedef defaultrandomengine to CX") > >() },
    { "n2479", RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("Normative Language to Describe Value Copy Semantics") > >() },
    { "n2480", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("A Less Formal Explanation of the Proposed C Concurrency Memory Model") > >() },
    { "n2481", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm MnbspSpertus")) >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection") > >() },
    { "n2482", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2483", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2484", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2485", RevList< Rev< 0u, Arr64< Hash(wxS("Sylvain Pion")) >(), wxS("A variadic stdminT  for the C Standard Library") > >() },
    { "n2486", RevList< Rev< 0u, Arr64< Hash(wxS("Lance Diduck")) >(), wxS("Alternative Allocators and Standard Containers") > >() },
    { "n2488", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor EnbspNiebler")) >(), wxS("Extending Variadic Template Template Parameters") > >() },
    { "n2492", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney HJnbspBoehm LnbspCrowl")) >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2493", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney LnbspCrowl")) >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2494", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2495", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2496", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2497", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant LnbspCrowl BnbspDawes AnbspWilliams JnbspGarland et al")) >(), wxS("Multithreading Library for Standard C Revision ") > >() },
    { "n2498", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant JnbspGarland")) >(), wxS("Custom Time Duration Support") > >() },
    { "n2499", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("Forward declaration of enumerations") > >() },
    { "n2500", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library") > >() },
    { "n2501", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspSiek JnbspWidman")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2502", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Core Concepts for the Cx Standard Library") > >() },
    { "n2503", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith BnbspDawes")) >(), wxS("Indicating iostream failures with codesystemerrorcode") > >() },
    { "n2504", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2505", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2506", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2507", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution PreBellevue  Mailing") > >() },
    { "n2508", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report Belleuve  Mailing") > >() },
    { "n2509", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Nesting Exceptions") > >() },
    { "n2510", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("BSI Position on Lambda Functions") > >() },
    { "n2511", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Named Lambdas and Local Functions") > >() },
    { "n2512", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2513", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2514", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Implicit Conversion Operators for Atomics") > >() },
    { "n2516", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Threads API Review Committee Report") > >() },
    { "n2517", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis SnbspPion JPnbspRigault")) >(), wxS("June  Meeting") > >() },
    { "n2518", RevList< Rev< 0u, Arr64< Hash(wxS("James Widman")) >(), wxS("Compiler Support for typetraits") > >() },
    { "n2519", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Library threadsafety from a users point of view with wording") > >() },
    { "n2521", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2522", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2523", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("The Scoped Allocator Model Rev ") > >() },
    { "n2524", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Conservative Swap and Move with Stateful Allocators") > >() },
    { "n2525", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocatorspecific Swap and Move Behavior") > >() },
    { "n2526", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown MnbspPaterno")) >(), wxS("Why duration Should Be a Type in CX") > >() },
    { "n2528", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Timedmutex in Cx") > >() },
    { "n2531", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSnbspAdamczyk GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Initializer lists WP wording") > >() },
    { "n2532", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Uniform initialization design choices Revision ") > >() },
    { "n2533", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Tuples and Pairs") > >() },
    { "n2534", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith HnbspBoehm LnbspCrowl PnbspDimov")) >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2535", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Namespace Association quotinline namespacequot") > >() },
    { "n2536", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Stoughton")) >(), wxS("POSIX Liaison Report") > >() },
    { "n2537", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("Fall  meeting") > >() },
    { "n2538", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Removal of System error support") > >() },
    { "n2539", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney MnbspWong")) >(), wxS("A New Interface for C stdduration Type") > >() },
    { "n2540", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith MnbspWong JnbspMaurer")) >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2541", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("New Function Declarator Syntax Wording") > >() },
    { "n2542", RevList< Rev< 0u, Arr64< Hash(wxS("Bejnamin Kosnik")) >(), wxS("Reserved namespaces for POSIX") > >() },
    { "n2543", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("STL singly linked lists revision ") > >() },
    { "n2544", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTalbot LnbspGoldthwaite LnbspCrowl JnbspMaurer")) >(), wxS("Unrestricted Unions Revision ") > >() },
    { "n2545", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n2546", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVandevoorde JnbspMaurer")) >(), wxS("Removal of auto as a storageclass specifier") > >() },
    { "n2547", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Allow atomics use in signal handlers") > >() },
    { "n2549", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Plum")) >(), wxS("Excision of Clause ") > >() },
    { "n2552", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Using ytime for Times in the Thread Support Library") > >() },
    { "n2553", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2554", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("The Scoped Allocator Model Rev ") > >() },
    { "n2555", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor EnbspNiebler")) >(), wxS("Extending Variadic Template Template Parameters Revision ") > >() },
    { "n2556", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney HJnbspBoehm LnbspCrowl")) >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2559", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Nesting Exception Objects Revision ") > >() },
    { "n2561", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVollmann HnbspHinnant AnbspWilliams")) >(), wxS("An Asynchronous Future Value") > >() },
    { "n2562", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2563", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2564", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2565", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution PostBellevue  Mailing") > >() },
    { "n2566", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report PostBellevue  Mailing") > >() },
    { "n2568", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2569", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("More STL algorithms") > >() },
    { "n2570", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2572", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Core Concepts for the Cx Standard Library Revision ") > >() },
    { "n2573", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2574", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2575", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMerrill DnbspVandevoorde")) >(), wxS("Initializer Lists  Alternative Mechanism and Rationale") > >() },
    { "n2576", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("TypeSoundness and Optimization in the Concepts Proposal") > >() },
    { "n2577", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2578", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2579", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2580", RevList< Rev< 0u, Arr64< Hash(wxS("James Kanze")) >(), wxS("Some More Small Additions to iostream") > >() },
    { "n2581", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown CnbspJefferson AnbspMeredith JnbspWidman")) >(), wxS("Named Requirements for CX Concepts") > >() },
    { "n2582", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2583", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Default Move Functions") > >() },
    { "n2584", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Default Swap Functions") > >() },
    { "n2587", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus HJnbspBoehm")) >(), wxS("Minimal Garbage Collection Status API") > >() },
    { "n2588", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2589", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2590", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Simplifying swap overloads") > >() },
    { "n2591", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith FnbspOram")) >(), wxS("Refactoring codenumericlimitscode") > >() },
    { "n2592", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of J Meeting No  February March  ") > >() },
    { "n2593", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting February  ") > >() },
    { "n2595", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG Agenda") > >() },
    { "n2597", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution PreAntipolis  Mailing") > >() },
    { "n2598", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report PreAntipolis  Mailing") > >() },
    { "n2600", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("noncopyable utility class") > >() },
    { "n2601", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Sexagesimal Numbers in C") > >() },
    { "n2602", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith RnbspOrr AnbspWilliams")) >(), wxS("BSI Requirements for a systemtime library in Cx") > >() },
    { "n2604", RevList< Rev< 0u, Arr64< Hash(wxS("Nick Stoughton")) >(), wxS("Thoughts on Implementing errno as a Macro") > >() },
    { "n2605", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Plum")) >(), wxS("Changing some quotundefined behaviorquot into quotillformedquot") > >() },
    { "n2606", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2607", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2608", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2609", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2610", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2611", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA J Meeting No  June   Sophia Antipolis France") > >() },
    { "n2612", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2613", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2614", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2615", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant WnbspBrown JnbspGarland MnbspPaterno")) >(), wxS("A Foundation to Sleep On") > >() },
    { "n2617", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspWidman JnbspSiek")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2619", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("CONCEPTS FOR CLAUSE ") > >() },
    { "n2620", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes DnbspKruumlgler DnbspGregor")) >(), wxS("Concepts for the Cx Standard Library Diagnostics library") > >() },
    { "n2621", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Core Concepts for the Cx Standard Library Revision ") > >() },
    { "n2622", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2623", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor PnbspHalpern")) >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2624", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2625", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2626", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2627", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVollmann HnbspHinnant AnbspWilliams")) >(), wxS("An Asynchronous Future Value revised") > >() },
    { "n2628", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Nonstatic data member initializers") > >() },
    { "n2629", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Detailed Reporting for InputOutput Library Errors") > >() },
    { "n2632", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov BnbspDawes")) >(), wxS("Sharedptr atomic access") > >() },
    { "n2633", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Improved support for bidirectional fences") > >() },
    { "n2634", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSpicer SnbspAdamczyk")) >(), wxS("Solving the SFINAE problem for expressions") > >() },
    { "n2635", RevList< Rev< 0u, Arr64< Hash(wxS("John Spicer")) >(), wxS("Local and Unnamed Types as Template Arguments") > >() },
    { "n2636", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspGarland NnbspStoughton BnbspKosnik BnbspDawes")) >(), wxS("Error Handling Specification for Chapter  Threads") > >() },
    { "n2637", RevList< Rev< 0u, Arr64< Hash(wxS("Herv Brnnimann")) >(), wxS("Revisiting stdsharedptr comparison") > >() },
    { "n2638", RevList< Rev< 0u, Arr64< Hash(wxS("Herv Brnnimann")) >(), wxS("Improving the wording of stdsharedptr") > >() },
    { "n2640", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMerrill DnbspVandevoorde")) >(), wxS("Initializer Lists  Alternative Mechanism and Rationale v ") > >() },
    { "n2641", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocator Concepts") > >() },
    { "n2642", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Proposed Wording for Placement Insert") > >() },
    { "n2643", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney LnbspCrowl")) >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2644", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda") > >() },
    { "n2645", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspGottschling WnbspBrown")) >(), wxS("Fundamental Mathematical Concepts for the STL in Cx") > >() },
    { "n2646", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Gottschling")) >(), wxS("Concept Implication and Requirement Propagation") > >() },
    { "n2647", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith HnbspBoehm LnbspCrowl PnbspDimov DnbspKruumlgler")) >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2648", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl MnbspAustern")) >(), wxS("C Dynamic Arrays") > >() },
    { "n2649", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Proposed Resolution for Valarray Constructors") > >() },
    { "n2651", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi PnbspDimov")) >(), wxS("Constness of Lambda Functions") > >() },
    { "n2652", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution PostAntipolis  Mailing") > >() },
    { "n2654", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocator Concepts revision ") > >() },
    { "n2655", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Detailed Reporting for InputOutput Library Errors Revision ") > >() },
    { "n2656", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("Core issue  wording") > >() },
    { "n2657", RevList< Rev< 0u, Arr64< Hash(wxS("John Spicer")) >(), wxS("Local and Unnamed Types as Template Arguments") > >() },
    { "n2658", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspJaumlrvi PnbspDimov JnbspFreeman")) >(), wxS("Constness of Lambda Functions Revision ") > >() },
    { "n2659", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("ThreadLocal Storage") > >() },
    { "n2660", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2661", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant WnbspBrown JnbspGarland MnbspPaterno")) >(), wxS("A Foundation to Sleep On") > >() },
    { "n2664", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney HJnbspBoehm LnbspCrowl")) >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2666", RevList< Rev< 0u, Arr64< Hash(wxS("Matt Austern")) >(), wxS("More STL algorithms revision ") > >() },
    { "n2667", RevList< Rev< 0u, Arr64< Hash(wxS("Bejnamin Kosnik")) >(), wxS("Reserved namespaces for POSIX") > >() },
    { "n2668", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith HnbspBoehm LnbspCrowl PnbspDimov DnbspKruumlgler")) >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2669", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes PnbspDimov HnbspSutter HnbspBoehm LnbspCrowl et al")) >(), wxS("ThreadSafety in the Standard Library Rev ") > >() },
    { "n2671", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVollmann HnbspHinnant AnbspWilliams")) >(), wxS("An Asynchronous Future Value Proposed Wording") > >() },
    { "n2672", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMerrill DnbspVandevoorde")) >(), wxS("Initializer List proposed wording") > >() },
    { "n2673", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Nonstatic data member initializers with draft of initializer list wording") > >() },
    { "n2674", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov BnbspDawes")) >(), wxS("Sharedptr atomic access revision ") > >() },
    { "n2675", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("noncopyable utility class revision ") > >() },
    { "n2676", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspWidman JnbspSiek")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2677", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor  M Marcus T Witt AnbspLumsdaine")) >(), wxS("Foundational Concepts for the Cx Standard Library Revision ") > >() },
    { "n2678", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspGarland NnbspStoughton BnbspKosnik BnbspDawes")) >(), wxS("Error Handling Specification for Chapter  Threads") > >() },
    { "n2679", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup")) >(), wxS("Initializer Lists for Standard Containers Revision ") > >() },
    { "n2680", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Proposed Wording for Placement Insert Revision ") > >() },
    { "n2681", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of PL Meeting No  June  ") > >() },
    { "n2682", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of ISO WG Meeting June  ") > >() },
    { "n2683", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("issue  problems and solutions") > >() },
    { "n2684", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2685", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2686", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2687", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2688", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2689", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2690", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2691", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2692", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2693", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Requirements on programs and backwards compatibility") > >() },
    { "n2694", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor M Marcus PnbspHalpern")) >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2695", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2696", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor MnbspMarcus TnbspWitt AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2697", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of WG Meeting June  ") > >() },
    { "n2699", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2700", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2701", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2702", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2703", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2704", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2705", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution Midterm  Mailing") > >() },
    { "n2706", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report Midterm  Mailing") > >() },
    { "n2707", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Expedited core issues handling") > >() },
    { "n2708", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n2709", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Packaging Tasks for Asynchronous Execution") > >() },
    { "n2710", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspWidman JnbspSiek")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2711", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("WG July  Meeting") > >() },
    { "n2712", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Nonstatic data member initializers") > >() },
    { "n2713", RevList< Rev< 0u, Arr64< Hash(wxS("BillnbspSeymour")) >(), wxS("Allow auto for nonstatic data members") > >() },
    { "n2714", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2715", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2716", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2719", RevList< Rev< 0u, Arr64< Hash(wxS("Rodrigo Castro Campos")) >(), wxS("Initializer lists and move semantics") > >() },
    { "n2722", RevList< Rev< 0u, Arr64< Hash(wxS("Loc Joly")) >(), wxS("Variadic functions Variadic templates or initializer lists") > >() },
    { "n2723", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2724", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2727", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2728", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2729", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2730", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Expedited core issues handling revision ") > >() },
    { "n2731", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Proposed Text for Bidirectional Fences") > >() },
    { "n2733", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Appendix C ISO C  Compatibility") > >() },
    { "n2734", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2735", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2736", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2737", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor MnbspMarcus TnbspWitt AnbspLumsdaine")) >(), wxS("Foundational Concepts for the Cx Standard Library Revision ") > >() },
    { "n2738", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor MnbspMarcus PnbspHalpern")) >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2739", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2740", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor MnbspMarcus TnbspWitt AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2741", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspStroustrup JnbspWidman JnbspSiek")) >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2742", RevList< Rev< 0u, Arr64< Hash(wxS("DouglasnbspGregor")) >(), wxS("Simplifying unique copy") > >() },
    { "n2744", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Comments on Asynchronous Future Value Proposal") > >() },
    { "n2745", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney RnbspSilvera")) >(), wxS("Example POWER Implementation for CC Memory Model") > >() },
    { "n2746", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Rationale for the C working paper definition of quotmemory locationquot") > >() },
    { "n2747", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Ambiguity and Insecurity with UserDefined Literals") > >() },
    { "n2748", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Strong Compare and Exchange") > >() },
    { "n2749", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl JnbspMaurer")) >(), wxS("Not so Trivial Issues with Trivial") > >() },
    { "n2750", RevList< Rev< 0u, Arr64< Hash(wxS("InbspMcIntosh MnbspWong RnbspMak RnbspKlarer et al")) >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2751", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2752", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov CnbspNelson")) >(), wxS("Proposed Text for Bidirectional Fences") > >() },
    { "n2753", RevList< Rev< 0u, Arr64< Hash(wxS("J Stephen Adamczyk")) >(), wxS("March  meeting information") > >() },
    { "n2756", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus BnbspSeymour")) >(), wxS("Nonstatic data member initializers") > >() },
    { "n2757", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer WnbspMnbspMiller")) >(), wxS("Expedited core issues handling revision ") > >() },
    { "n2758", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor JnbspSiek AnbspLumsdaine")) >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2759", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor MnbspMarcus TnbspWitt AnbspLumsdaine")) >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2760", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("InputOutput Library Thread Safety") > >() },
    { "n2761", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspWong")) >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2762", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl JnbspMaurer WnbspMnbspMiller")) >(), wxS("Not so Trivial Issues with Trivial") > >() },
    { "n2763", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2764", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2765", RevList< Rev< 0u, Arr64< Hash(wxS("InbspMcIntosh MnbspWong RnbspMak RnbspKlarer et al")) >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2768", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocator Concepts part  revision ") > >() },
    { "n2769", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Detailed Reporting for InputOutput Library Errors Revision ") > >() },
    { "n2771", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("LWG Issues") > >() },
    { "n2775", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm BnbspDawes")) >(), wxS("Small library threadsafety revisions") > >() },
    { "n2778", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2779", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Concepts for Clause  Part ") > >() },
    { "n2780", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspBrown CnbspJefferson AnbspMeredith JnbspWidman")) >(), wxS("Named Requirements for CX Concepts version ") > >() },
    { "n2781", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Concepts for Random Number Generation in CX") > >() },
    { "n2782", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney LnbspCrowl")) >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2783", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Collected Issues with Atomics") > >() },
    { "n2784", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of WG Meeting September  ") > >() },
    { "n2785", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of PL Meeting September  ") > >() },
    { "n2786", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor DnbspAbrahams")) >(), wxS("Simplifying unique copy Revision ") > >() },
    { "n2791", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2792", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2793", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2794", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2795", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2796", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2798", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2799", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2800", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Programming Languages  C") > >() },
    { "n2801", RevList< Rev< 0u, Arr64< Hash(wxS("Rodrigo Castro Campos")) >(), wxS("Initializer lists and move semantics") > >() },
    { "n2802", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("A plea to reconsider detachondestruction for thread objects") > >() },
    { "n2803", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2804", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2805", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2806", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2807", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2808", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2809", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Support for hybrid error handling") > >() },
    { "n2810", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Defects and Proposed Resolutions for Allocator Concepts") > >() },
    { "n2811", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMelquiond SnbspPion")) >(), wxS("Directed Rounding Arithmetic Operations") > >() },
    { "n2812", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams DnbspGregor")) >(), wxS("A Safety Problem with RValue References and what to do about it") > >() },
    { "n2814", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Tasker")) >(), wxS("Fixing freestanding") > >() },
    { "n2815", RevList< Rev< 0u, Arr64< Hash(wxS("Rani Sharoni")) >(), wxS("Improving the standard librarys exception specifications") > >() },
    { "n2816", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2817", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2818", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2819", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspDekker DnbspKruumlgler")) >(), wxS("Refqualifiers for assignment operators of the Standard Library") > >() },
    { "n2820", RevList< Rev< 0u, Arr64< Hash(wxS("Joaqun M Lpez Muoz")) >(), wxS("Adding heterogeneous comparison lookup to associative containers") > >() },
    { "n2821", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2822", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2823", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2824", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA PL Meeting No WG Meeting No  July   Frankfurt Germany") > >() },
    { "n2825", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2826", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl WnbspMiller")) >(), wxS("Issues with Constexpr") > >() },
    { "n2827", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl PnbspPlauger NnbspStoughton")) >(), wxS("Thread Unsafe Standard Functions") > >() },
    { "n2828", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Support for Hybrid Error Handling Rev ") > >() },
    { "n2829", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Defects and Proposed Resolutions for Allocator Concepts Rev ") > >() },
    { "n2830", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSpicer DnbspVandevoorde DnbspGregor")) >(), wxS("Problems with referenceclosure") > >() },
    { "n2831", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor DnbspAbrahams")) >(), wxS("Fixing a Safety Problem with Rvalue References Proposed Wording") > >() },
    { "n2832", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("Concepts and Refqualifiers") > >() },
    { "n2834", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Several Proposals to Simplify pair") > >() },
    { "n2835", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("forward") > >() },
    { "n2836", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Wording Tweaks for Conceptenabled Random Number Generation in CX") > >() },
    { "n2837", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("CX CD  National Body Comments") > >() },
    { "n2838", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Library Support for Hybrid Error Handling Rev ") > >() },
    { "n2839", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Response to quotProblems with referenceclosurequot") > >() },
    { "n2840", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Defects and Proposed Resolutions for Allocator Concepts Rev ") > >() },
    { "n2842", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("Another numeric facet") > >() },
    { "n2843", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer AnbspMeredith")) >(), wxS("Pack Expansion and Attributes") > >() },
    { "n2845", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl DnbspGregor DnbspAbrahams")) >(), wxS("Remove stdreferenceclosure") > >() },
    { "n2847", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n2848", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n2850", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown")) >(), wxS("Extensions to the C Library to Support Mathematical Special Functions") > >() },
    { "n2851", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Changes to the Decimal TR since the PDTR Ballot") > >() },
    { "n2852", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspVoutilainen AnbspMeredith JnbspMaurer CnbspUzdavinis")) >(), wxS("Explicit Virtual Overrides") > >() },
    { "n2853", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Constraining uniqueptr") > >() },
    { "n2855", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor DnbspAbrahams")) >(), wxS("Rvalue References and Exception Safety") > >() },
    { "n2857", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2858", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2859", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("New wording for Cx Lambdas") > >() },
    { "n2860", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2861", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2862", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2863", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status") > >() },
    { "n2864", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl PnbspPlauger NnbspStoughton")) >(), wxS("Thread Unsafe Standard Functions") > >() },
    { "n2866", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2867", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2868", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2869", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("State of C Evolution Post San Francisco ") > >() },
    { "n2870", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Library Working Group Status Report Post San Francisco ") > >() },
    { "n2871", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Summary of Cx Standard  CD ") > >() },
    { "n2872", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Ensuring Certain Cx Features quotjust workquot") > >() },
    { "n2873", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2874", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2875", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2876", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMelquiond SnbspPion")) >(), wxS("Directed Rounding Arithmetic Operations Revision ") > >() },
    { "n2877", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2878", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2879", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2880", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm LnbspCrowl")) >(), wxS("C object lifetime interactions with the threads API") > >() },
    { "n2881", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspWidman TnbspOttosen")) >(), wxS("Base Class Aliases for TheCAfterx") > >() },
    { "n2883", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Report of the a hRefa hRefa hRefa hRefhtmahtmahtmahtma Batavia Meeting") > >() },
    { "n2884", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Cx Stream Positioning") > >() },
    { "n2886", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Tasker")) >(), wxS("Fixing freestanding iteration ") > >() },
    { "n2887", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis BnbspStroustrup AnbspMeredith")) >(), wxS("Axioms Semantics Aspects of C Concepts") > >() },
    { "n2889", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("An Asynchronous Call for C") > >() },
    { "n2890", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2892", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Some Concerns About Axioms") > >() },
    { "n2893", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Tasker")) >(), wxS("The long pole gets longer") > >() },
    { "n2894", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2895", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2896", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2898", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status") > >() },
    { "n2899", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMelquiond SnbspPion")) >(), wxS("Directed Rounding Arithmetic Operations Revision ") > >() },
    { "n2900", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Ensuring Certain Cx Features quotjust workquot  Revision ") > >() },
    { "n2901", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A simple async") > >() },
    { "n2902", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n2903", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("New wording for Cx Lambdas") > >() },
    { "n2904", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Defining default copy and move") > >() },
    { "n2905", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Aggregation headers") > >() },
    { "n2906", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Simplifying the use of concepts") > >() },
    { "n2907", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Managing the lifetime of threadlocal variables with contexts") > >() },
    { "n2908", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern AnbspTalbot")) >(), wxS("Several Proposals to Simplify pair Rev ") > >() },
    { "n2909", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Specifying the complexity of size") > >() },
    { "n2910", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong HnbspTong RnbspKlarer InbspMcIntosh et al")) >(), wxS("Comment on Proposed Trigraph Deprecation") > >() },
    { "n2913", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspKlarer BnbspStroustrup DnbspTsafrir MnbspWong")) >(), wxS("SCARY Iterator Assignment and Initialization") > >() },
    { "n2914", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2915", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2916", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams BnbspDawes")) >(), wxS("Intentional Concept Mapping") > >() },
    { "n2917", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("a hRefnhtmlNa Distilled and a New Issue With Function Statics") > >() },
    { "n2918", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams DnbspGregor")) >(), wxS("Exported Concept Maps") > >() },
    { "n2919", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspVoutilainen DnbspKruumlgler ")) >(), wxS("Concept mapping unconstrained templates") > >() },
    { "n2920", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of WG Meeting July  ") > >() },
    { "n2921", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Klarer")) >(), wxS("Minutes of PL Meeting July  ") > >() },
    { "n2923", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Specifying the complexity of sizeRevision ") > >() },
    { "n2924", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("ImplicitlyDeleted Special Member Functions") > >() },
    { "n2925", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("More Collected Issues with Atomics") > >() },
    { "n2926", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Cx Stream Positioning  Revision ") > >() },
    { "n2927", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("New wording for Cx Lambdas rev ") > >() },
    { "n2928", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspVoutilainen AnbspMeredith JnbspMaurer CnbspUzdavinis")) >(), wxS("Explicit Virtual Overrides") > >() },
    { "n2929", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("LWG Papers to ReMerge into Cx After Removing Concepts") > >() },
    { "n2930", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGregor BnbspDawes")) >(), wxS("RangeBased For Loop Wording Without Concepts") > >() },
    { "n2931", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2932", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Tasker")) >(), wxS("Fixing freestanding iteration ") > >() },
    { "n2933", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer AnbspMeredith")) >(), wxS("Pack Expansion and Attributes") > >() },
    { "n2935", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Fall  WG Meeting Information") > >() },
    { "n2936", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2937", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2938", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2939", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n2940", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2941", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2942", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2943", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocators without Concepts preview") > >() },
    { "n2944", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos PnbspHalpern")) >(), wxS("Equality Comparison for Unordered Containers") > >() },
    { "n2945", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n2946", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocators post Removal of C Concepts") > >() },
    { "n2947", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes DnbspKruumlgler AnbspMeredith")) >(), wxS("Additional Type Traits for Cx") > >() },
    { "n2948", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2949", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2950", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2951", RevList< Rev< 0u, Arr64< Hash(wxS("Howard E Hinnant")) >(), wxS("forward") > >() },
    { "n2952", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Accessing current exception during unwinding") > >() },
    { "n2954", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2956", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Seacord")) >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n2957", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Reaching Scope of Lambda Expressions") > >() },
    { "n2958", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Moving Swap Forward") > >() },
    { "n2960", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2961", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n2962", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2963", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2964", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2965", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Type traits and base classes") > >() },
    { "n2967", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVollmann AnbspWilliams")) >(), wxS("Issues on Futures") > >() },
    { "n2968", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("More Collected Issues with Atomics") > >() },
    { "n2969", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Background for issue  Clocks and Condition Variables") > >() },
    { "n2970", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("A simple async revision ") > >() },
    { "n2971", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  decltype name qualifiers") > >() },
    { "n2972", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Attribute nothrow") > >() },
    { "n2973", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("An Asynchronous Call for C") > >() },
    { "n2974", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("An Analysis of Async and Futures") > >() },
    { "n2975", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Collected Issues for Tuples") > >() },
    { "n2976", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("constexpr in the library take ") > >() },
    { "n2977", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Pairs do not make good ranges") > >() },
    { "n2978", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Replacing Trigraphs") > >() },
    { "n2979", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Moving Swap Forward revision ") > >() },
    { "n2980", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspKlarer BnbspStroustrup DnbspTsafrir MnbspWong")) >(), wxS("SCARY Iterator Assignment and Initialization Revision ") > >() },
    { "n2981", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n2982", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocators post Removal of C Concepts Rev ") > >() },
    { "n2983", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams RnbspSharoni DnbspGregor")) >(), wxS("Allowing Move Constructors to Throw") > >() },
    { "n2984", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes DnbspKruumlgler AnbspMeredith")) >(), wxS("Additional Type Traits for Cx Revision ") > >() },
    { "n2985", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C and C Thread Compatibility") > >() },
    { "n2986", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos PnbspHalpern")) >(), wxS("Equality Comparison for Unordered Containers") > >() },
    { "n2987", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup LnbspCrowl")) >(), wxS("Defining Move Special Member Functions") > >() },
    { "n2988", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("LWG Issue  and other small changes to forwardlist") > >() },
    { "n2989", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Unified Function Syntax") > >() },
    { "n2990", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Fixing Raw Strings wrt Trigraphs") > >() },
    { "n2991", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  decltype name qualifiers") > >() },
    { "n2992", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("More Collected Issues with Atomics") > >() },
    { "n2993", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Expanding the meaning of variable") > >() },
    { "n2994", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("constexpr in the library take ") > >() },
    { "n2995", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Pairs do not make good ranges") > >() },
    { "n2996", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl HnbspSutter")) >(), wxS("A Simple Asynchronous Call") > >() },
    { "n2997", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVollmann AnbspWilliams")) >(), wxS("Issues on Futures Rev ") > >() },
    { "n2998", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Reaching Scope of Lambda Expressions") > >() },
    { "n2999", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Background for issue  Clocks and Condition Variables Rev ") > >() },
    { "n3000", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3001", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3002", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Gaussian Integers in the Standard Library") > >() },
    { "n3003", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting October  ") > >() },
    { "n3004", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting October  ") > >() },
    { "n3006", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3007", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3008", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3009", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3010", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Rvalue References as Funny Lvalues") > >() },
    { "n3011", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3012", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3013", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3014", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA PL Meeting No  WG Meeting No  March   Pittsburgh PA") > >() },
    { "n3015", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Fall  WG Meeting Information") > >() },
    { "n3016", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("SUMMER  JTCSCWG C STANDARDS COMMITTEE MEETING") > >() },
    { "n3017", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting ") > >() },
    { "n3018", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3019", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3020", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3021", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("Harmonizing Effects and Returns Elements in Clause ") > >() },
    { "n3023", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Defaulting nonpublic special member functions on first declaration") > >() },
    { "n3024", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n3025", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Specifying PointerLike Requirements") > >() },
    { "n3026", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3027", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3028", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3029", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3030", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Rvalue References as Funny Lvalues") > >() },
    { "n3031", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issues  and  Additional decltype uses") > >() },
    { "n3032", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Explicit specialization outside a templates parent") > >() },
    { "n3033", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Various Attribute Issues") > >() },
    { "n3034", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Disambiguating ") > >() },
    { "n3035", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3036", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3037", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Conceptless Random Number Generation in CX") > >() },
    { "n3039", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup AnbspMeredith GnbspDosnbspReis")) >(), wxS("Constexpr functions with const reference parameters a summary") > >() },
    { "n3040", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Various threads issues in the library LWG ") > >() },
    { "n3041", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Futures and Async Cleanup") > >() },
    { "n3042", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Renaming launchany and what asyncs really might be") > >() },
    { "n3043", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Converting Lambdas to Function Pointers") > >() },
    { "n3044", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup LnbspCrowl")) >(), wxS("Defining Move Special Member Functions") > >() },
    { "n3045", RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney et al")) >(), wxS("Updates to C Memory Model Based on Formalization") > >() },
    { "n3046", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Iterators in Cx") > >() },
    { "n3047", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Fixing isconstructible and isexplicitlyconvertible") > >() },
    { "n3048", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspKrgler MnbspSpertus SnbspDunbspToit WnbspBrown")) >(), wxS("Defining Swappable Requirements") > >() },
    { "n3049", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issues  and  Additional decltype uses revision ") > >() },
    { "n3050", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspAbrahams RnbspSharoni DnbspGregor")) >(), wxS("Allowing Move Constructors to Throw Rev ") > >() },
    { "n3051", RevList< Rev< 0u, Arr64< Hash(wxS("DougnbspGregor")) >(), wxS("Deprecating Exception Specifications") > >() },
    { "n3052", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspMeredith")) >(), wxS("Converting Lambdas to Function Pointers") > >() },
    { "n3053", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup LnbspCrowl")) >(), wxS("Defining Move Special Member Functions") > >() },
    { "n3054", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision D") > >() },
    { "n3055", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("A Taxonomy of Expression Value Categories") > >() },
    { "n3056", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Conceptless Random Number Generation in CX version ") > >() },
    { "n3057", RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney et al")) >(), wxS("Explicit Initializers for Atomics") > >() },
    { "n3058", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Futures and Async Cleanup Rev") > >() },
    { "n3059", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n3060", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown")) >(), wxS("Extensions to the C Library to Support Mathematical Special Functions") > >() },
    { "n3061", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown")) >(), wxS("Record of Response") > >() },
    { "n3062", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Fixing Raw Strings wrt Trigraphs revision ") > >() },
    { "n3063", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Disambiguating  revision ") > >() },
    { "n3065", RevList< Rev< 0u, Arr64< Hash(wxS("John Spicer")) >(), wxS("Removing Export") > >() },
    { "n3066", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Iterators in Cx") > >() },
    { "n3067", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Core issue  Various Attribute Issues revision ") > >() },
    { "n3068", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos PnbspHalpern")) >(), wxS("Equality Comparison for Unordered Containers Rev ") > >() },
    { "n3069", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Various threads issues in the library LWG ") > >() },
    { "n3070", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Handling Detached Threads and threadlocal Variables") > >() },
    { "n3071", RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Renaming launchany and what asyncs really might be Rev") > >() },
    { "n3072", RevList< Rev< 0u, Arr64< Hash(wxS("Martin Sebor")) >(), wxS("Harmonizing Effects and Returns Elements in Clause ") > >() },
    { "n3073", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspKrgler WnbspBrown")) >(), wxS("Specifying PointerLike Requirements Revision ") > >() },
    { "n3074", RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney et al")) >(), wxS("Updates to C Memory Model Based on Formalization") > >() },
    { "n3075", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("CX CD  National Body Comments and Responses") > >() },
    { "n3077", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Alternative approach to Raw String issues") > >() },
    { "n3078", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Constexpr functions with reference parameters") > >() },
    { "n3079", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMerrill JnbspSpicer")) >(), wxS("Redrafting issues    ") > >() },
    { "n3080", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n3081", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n3082", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Cx Meeting Schedule") > >() },
    { "n3083", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3084", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3085", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3086", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3087", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3088", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3089", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3090", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3091", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3092", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Programming Languages  C") > >() },
    { "n3093", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3094", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting March   Revision  ") > >() },
    { "n3095", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting March   Revision ") > >() },
    { "n3096", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA PL Meeting No  WG Meeting No  August   Rapperswil Switzerland") > >() },
    { "n3097", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3101", RevList< Rev< 0u, Arr64< Hash(wxS("Joaquiacuten Mordf Loacutepez Muntildeoz")) >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3102", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC FCD  CX National Body Comments") > >() },
    { "n3103", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspKohlbrenner DnbspSvoboda AnbspWesie")) >(), wxS("Security impact of noexcept") > >() },
    { "n3104", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3105", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report ISOIEC JTCSCWG C") > >() },
    { "n3109", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("US ") > >() },
    { "n3110", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Problems with bitmask types in the library") > >() },
    { "n3111", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3113", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Async Launch Policies CH ") > >() },
    { "n3114", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("throw becomes noexcept") > >() },
    { "n3115", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3116", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3117", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3118", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C FCD Comment Status") > >() },
    { "n3119", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting August  ") > >() },
    { "n3120", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting August  ") > >() },
    { "n3121", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus du Toit")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3122", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Observers for the three handler functions") > >() },
    { "n3123", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Bringing resultof near to INVOKE") > >() },
    { "n3124", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl DnbspVandevoorde")) >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3125", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney MnbspBatty CnbspNelson et al")) >(), wxS("Omnibus Memory Model and Atomics Paper") > >() },
    { "n3126", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3127", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3128", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Timeout Specification") > >() },
    { "n3129", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Managing C Associated Asynchronous State") > >() },
    { "n3130", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Lockable requirements for Cx") > >() },
    { "n3131", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Compiletime rational arithmetic and overflow") > >() },
    { "n3132", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspBatty SnbspOwens SnbspSarkar PnbspSewell TnbspWeber")) >(), wxS("Mathematizing C Concurrency The PostRapperswil Model") > >() },
    { "n3133", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3134", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3135", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3136", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong BnbspKosnik MnbspBatty")) >(), wxS("Coherence Requirements Detailed") > >() },
    { "n3137", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C and C Liaison Compatibility for Atomics") > >() },
    { "n3139", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("An Incomplete Language Feature") > >() },
    { "n3140", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Cleanup of pair and tuple") > >() },
    { "n3141", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC FCD  CX National Body Comments") > >() },
    { "n3142", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMerrill DnbspKruumlgler HnbspHinnant GnbspDosnbspReis")) >(), wxS("Adjustments to constructor and assignment traits") > >() },
    { "n3143", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant DnbspKruumlgler")) >(), wxS("Proposed wording for US ") > >() },
    { "n3144", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("Wording for US ") > >() },
    { "n3145", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Deprecating unaryfunction and binaryfunction") > >() },
    { "n3146", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Recommendations for extended identifier characters for C and C") > >() },
    { "n3148", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("throw becomes noexcept Version ") > >() },
    { "n3149", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("From Throws Nothing to noexcept") > >() },
    { "n3150", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("Removing nonempty dynamic exception specifications from the library") > >() },
    { "n3151", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Keywords for override control") > >() },
    { "n3152", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm PnbspHalpern")) >(), wxS("Progress guarantees for Cx US  and US ") > >() },
    { "n3153", RevList< Rev< 0u, Arr64< Hash(wxS("Dave Abrahams")) >(), wxS("Implicit Move Must Go") > >() },
    { "n3154", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("US  Ambiguous use of use") > >() },
    { "n3155", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the language support library") > >() },
    { "n3156", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the diagnostics library") > >() },
    { "n3157", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the General Utilities Library") > >() },
    { "n3158", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Missing preconditions for defaultconstructed matchresult objects") > >() },
    { "n3159", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3160", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3161", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3162", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3163", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Override Control Using Contextual Keywords") > >() },
    { "n3164", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Adjusting C Atomics for C Compatibility") > >() },
    { "n3165", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocator Requirements Alternatives to US") > >() },
    { "n3166", RevList< Rev< 0u, Arr64< Hash(wxS("David Svoboda")) >(), wxS("Destructors default to noexcept") > >() },
    { "n3167", RevList< Rev< 0u, Arr64< Hash(wxS("David Svoboda")) >(), wxS("Delete operators default to noexcept") > >() },
    { "n3168", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("Problems with Iostreams Member Functions Amended from US ") > >() },
    { "n3169", RevList< Rev< 0u, Arr64< Hash(wxS("PJ Plauger")) >(), wxS("A Few Small Library Issues") > >() },
    { "n3170", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspWilliams HnbspHinnant")) >(), wxS("Clarifying C Futures") > >() },
    { "n3171", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Proposed resolution for US Allocatoraware regular expressions") > >() },
    { "n3172", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Allocators for stringstream US") > >() },
    { "n3173", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Terminology for constructing container elements US") > >() },
    { "n3174", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("To move or not to move") > >() },
    { "n3175", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3176", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3177", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3178", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("emplace Broken for Associative Containers") > >() },
    { "n3179", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Move and swap for IO streams US") > >() },
    { "n3180", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the Strings Library") > >() },
    { "n3181", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3182", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3186", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Appendix C ISO C  Compatibility Revision ") > >() },
    { "n3187", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the Containers Library") > >() },
    { "n3188", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Revision to a hRefnhtmlNa Async Launch Policies CH ") > >() },
    { "n3189", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Observers for the three handler functions") > >() },
    { "n3190", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl DnbspVandevoorde")) >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3191", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Timeout Specification") > >() },
    { "n3192", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Managing C Associated Asynchronous State") > >() },
    { "n3193", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Adjusting C Atomics for C Compatibility") > >() },
    { "n3194", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspWilliams HnbspHinnant")) >(), wxS("Clarifying C Futures") > >() },
    { "n3195", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("From Throws Nothing to noexcept version ") > >() },
    { "n3196", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney MnbspBatty CnbspNelson et al")) >(), wxS("Omnibus Memory Model and Atomics Paper") > >() },
    { "n3197", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Lockable requirements for Cx") > >() },
    { "n3198", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Krgler")) >(), wxS("Deprecating unaryfunction and binaryfunction Revision ") > >() },
    { "n3199", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the General Utilities Library version ") > >() },
    { "n3201", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Moving right along") > >() },
    { "n3202", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("To which extent can noexcept be deduced") > >() },
    { "n3203", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Tightening the conditions for generating implicit moves") > >() },
    { "n3204", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Deducing noexcept for destructors") > >() },
    { "n3205", RevList< Rev< 0u, Arr64< Hash(wxS("David Svoboda")) >(), wxS("Delete operators default to noexcept") > >() },
    { "n3206", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspMaurer MnbspHall VnbspVoutilainen")) >(), wxS("Override control Eliminating Attributes") > >() },
    { "n3207", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("noexceptauto") > >() },
    { "n3208", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Library Working group Issues resolved in Batavia") > >() },
    { "n3209", RevList< Rev< 0u, Arr64< Hash(wxS("HJnbspBoehm PnbspHalpern")) >(), wxS("Progress guarantees for Cx US  and US revised") > >() },
    { "n3210", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("New wording for arithmetic on ratios") > >() },
    { "n3211", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3212", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting November  ") > >() },
    { "n3213", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting November  ") > >() },
    { "n3214", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("US  Ambiguous use of use version ") > >() },
    { "n3215", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Fixing LWG  Explicit CopyConstructible requirements are insufficient") > >() },
    { "n3216", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspWilliams JnbspMerrill")) >(), wxS("Removing Implicit Move Constructors and Move Assignment Operators") > >() },
    { "n3217", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Wording for braceinitializers as default arguments") > >() },
    { "n3218", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core Issue  Unclear definition of potential constant expression DE  GB ") > >() },
    { "n3221", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3222", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3224", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3225", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3226", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3227", RevList< Rev< 0u, Arr64< Hash(wxS("Thorsten Ottosen")) >(), wxS("Please reconsider noexcept") > >() },
    { "n3228", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Constexpr Library Additions complex") > >() },
    { "n3229", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Constexpr Library Additions chrono") > >() },
    { "n3230", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Constexpr Library Additions future") > >() },
    { "n3231", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Constexpr Library Additions supportutilities") > >() },
    { "n3232", RevList< Rev< 0u, Arr64< Hash(wxS("Joaqun M Lpez Muoz")) >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3233", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspNiebler DnbspGregor JnbspWidman")) >(), wxS("USDE Revisited Decltype and Call Expressions") > >() },
    { "n3234", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Remove explicit from classhead") > >() },
    { "n3235", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Generalized pointer casts") > >() },
    { "n3236", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3237", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3238", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3239", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Update for TR Preliminary") > >() },
    { "n3240", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3241", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("CH and US Clarifying the state of movedfrom objects") > >() },
    { "n3242", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3243", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors Report") > >() },
    { "n3244", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspLumsdaine RnbspLowe")) >(), wxS("WG C Standards Committee Meeting Summer ") > >() },
    { "n3245", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3246", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3247", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3248", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith JnbspLakos")) >(), wxS("noexcept Prevents Library Validation") > >() },
    { "n3249", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3250", RevList< Rev< 0u, Arr64< Hash(wxS("Douglas Gregor")) >(), wxS("US Removing UserDefined Literals") > >() },
    { "n3251", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspDnbspGarcia MnbspWong")) >(), wxS("noexcept for the Atomics Library") > >() },
    { "n3252", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspDnbspGarcia MnbspWong")) >(), wxS("A review of noexcept in the threads library") > >() },
    { "n3253", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Tweak Certain C Contextual Conversions") > >() },
    { "n3254", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spertus")) >(), wxS("Proposed resolution for US Allocatoraware regular expressions rev ") > >() },
    { "n3255", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl DnbspKrgler")) >(), wxS("C Decay Copy") > >() },
    { "n3256", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspGnbspBarbati")) >(), wxS("C Freestanding and Conditionally Supported") > >() },
    { "n3257", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspWakely BnbspStroustrup")) >(), wxS("Rangebased for statements and ADL") > >() },
    { "n3258", RevList< Rev< 0u, Arr64< Hash(wxS("Gregor")) >(), wxS("US Removing Inheriting Constructors") > >() },
    { "n3259", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core Issue  Globalscope  in elaboratedtypespecifier") > >() },
    { "n3260", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Consolidated corrections for a cluster of constexpr concerns") > >() },
    { "n3261", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3262", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Additional Core Language Issue Resolutions for Madrid") > >() },
    { "n3263", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("More on noexcept for the Containers Library revision") > >() },
    { "n3264", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("CH and US Clarifying the state of movedfrom objects Revision ") > >() },
    { "n3265", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA PL Meeting No  WG Meeting No  August   Bloomington IN") > >() },
    { "n3267", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspDnbspGarcia MnbspWong")) >(), wxS("A review of noexcept in the threads library revised") > >() },
    { "n3268", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("staticassert and listinitialization in constexpr functions") > >() },
    { "n3269", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("sharedfuturefutureltRgtampamp rhs should be allowed to throw") > >() },
    { "n3270", RevList< Rev< 0u, Arr64< Hash(wxS("Doug Gregor")) >(), wxS("Variadic Templates Wording for Core Issues   and ") > >() },
    { "n3271", RevList< Rev< 0u, Arr64< Hash(wxS("Doug Gregor")) >(), wxS("Wording for RangeBased For Loop Option ") > >() },
    { "n3272", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Followup on override control") > >() },
    { "n3273", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3274", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n3275", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n3276", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspNiebler DnbspGregor JnbspWidman")) >(), wxS("USDE Revisited Decltype and Call Expressions") > >() },
    { "n3277", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core issues  References and constexpr") > >() },
    { "n3278", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Recent Concurrency Issue Resolutions") > >() },
    { "n3279", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith JnbspLakos")) >(), wxS("Conservative use of noexcept in the Library") > >() },
    { "n3280", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl AnbspGnbspBarbati")) >(), wxS("C Freestanding and Conditionally Supported") > >() },
    { "n3281", RevList< Rev< 0u, Arr64< Hash(wxS("James Widman")) >(), wxS(" Partial ordering of variadic class template partial specializations") > >() },
    { "n3282", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspWidman DnbspGregor")) >(), wxS("Resolution for core issues  and ") > >() },
    { "n3283", RevList< Rev< 0u, Arr64< Hash(wxS("Doug Gregor")) >(), wxS("Dependent Bases and the Current Instantiation Wording for Core Issue ") > >() },
    { "n3284", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Madrid Resolutions") > >() },
    { "n3285", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3287", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3288", RevList< Rev< 0u, Arr64< Hash(wxS("Benjamin Kosnik")) >(), wxS("Appendix C ISO C  Compatibility Revision ") > >() },
    { "n3289", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC FCD  CX Responses to National Body Comments") > >() },
    { "n3290", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Programming Languages  C") > >() },
    { "n3291", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3292", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Editors report") > >() },
    { "n3293", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3294", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3295", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3296", RevList< Rev< 0u, Arr64< Hash(wxS("WnbspMnbspMiller BnbspDawes")) >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3297", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC FCD  CX Responses to National Body Comments Rev ") > >() },
    { "n3298", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Conveners report") > >() },
    { "n3299", RevList< Rev< 0u, Arr64< Hash(wxS("TnbspPlum JnbspLakos")) >(), wxS("February  Meeting") > >() },
    { "n3300", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3301", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Defect Report Terminology for Container Element Requirements") > >() },
    { "n3302", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik GnbspDosnbspReis DnbspKrgler")) >(), wxS("Constexpr Library Additions complex v") > >() },
    { "n3303", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKrgler")) >(), wxS("Constexpr Library Additions chrono v") > >() },
    { "n3304", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKrgler")) >(), wxS("Constexpr Library Additions containers") > >() },
    { "n3305", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKrgler")) >(), wxS("Constexpr Library Additions utilities v") > >() },
    { "n3306", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Tweak Certain C Contextual Conversions v") > >() },
    { "n3307", RevList< Rev< 0u, Arr64< Hash(wxS("SnbspHunt RnbspSmith SnbspRedl DnbspMajnemer")) >(), wxS("Issues Found Implementing Cx") > >() },
    { "n3308", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspSmith DnbspGregor")) >(), wxS("constexpr consternation") > >() },
    { "n3309", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3310", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3311", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3312", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3313", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3314", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3316", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No  WG Meeting No   August  Bloomington Indiana USA") > >() },
    { "n3317", RevList< Rev< 0u, Arr64< Hash(wxS("Steve Clamage")) >(), wxS("AGENDA PL Meeting No  WG Meeting No  February   Kona Hawaii") > >() },
    { "n3318", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3319", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3320", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3321", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3322", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Preliminary Proposal for a Static if") > >() },
    { "n3323", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal to Tweak Certain C Contextual Conversions v") > >() },
    { "n3324", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Terminology indirection versus dereference") > >() },
    { "n3325", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("HTML for C Standards Documents") > >() },
    { "n3326", RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemiexski")) >(), wxS("Sequential access to data members and base subobjects") > >() },
    { "n3327", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg")) >(), wxS("A Standard Programmatic Interface for Asynchronous Operations") > >() },
    { "n3328", RevList< Rev< 0u, Arr64< Hash(wxS("Niklas Gustafsson")) >(), wxS("Resumable Functions") > >() },
    { "n3329", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspSutter WnbspBright AnbspAlexandrescu")) >(), wxS("Proposal static if declaration") > >() },
    { "n3330", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3331", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3332", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3333", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspYasskin CnbspCarruth")) >(), wxS("Hashing UserDefined Types in Cy") > >() },
    { "n3334", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Proposing arrayrefltTgt and stringref") > >() },
    { "n3335", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library for CTR Revision ") > >() },
    { "n3336", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Adapting Standard Library Strings and IO to a Unicode World") > >() },
    { "n3337", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3338", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Editors Report") > >() },
    { "n3339", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Preliminary Proposal for a DeepCopying Smart Pointer") > >() },
    { "n3340", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspMnbspBerris MnbspAustern LnbspCrowl")) >(), wxS("Rich Pointers") > >() },
    { "n3341", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong HnbspBoehm JnbspGottschlich TnbspShpeisman et al")) >(), wxS("Transactional Language Constructs for C") > >() },
    { "n3342", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Digit Separators coming back") > >() },
    { "n3343", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Portland meeting information") > >() },
    { "n3344", RevList< Rev< 0u, Arr64< Hash(wxS("SnbspPacifico AnbspMeredith JnbspLakos")) >(), wxS("Toward a Standard C Date Class") > >() },
    { "n3345", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern CnbspNelson SnbspDunbspToit RnbspGeva")) >(), wxS("C Language Constructs for Parallel Programming") > >() },
    { "n3346", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Defect Report Terminology for Container Element Requirements  Rev ") > >() },
    { "n3347", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Modules in C Revision ") > >() },
    { "n3348", RevList< Rev< 0u, Arr64< Hash(wxS("Nikhil Joshi")) >(), wxS("Scoping of operator new") > >() },
    { "n3349", RevList< Rev< 0u, Arr64< Hash(wxS("Nikhil Joshi")) >(), wxS("Ease of using namespaces") > >() },
    { "n3350", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("A minimal stdrangeltItergt") > >() },
    { "n3351", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup AnbspSutton")) >(), wxS("A Concept Design for the STL") > >() },
    { "n3352", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Binary FixedPoint Arithmetic") > >() },
    { "n3353", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Concurrent Queues") > >() },
    { "n3354", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Stream Mutexes") > >() },
    { "n3355", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Distributed Counters") > >() },
    { "n3356", RevList< Rev< 0u, Arr64< Hash(wxS("Chris Mysen")) >(), wxS("C Mutable Threads") > >() },
    { "n3357", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3358", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3359", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3360", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library Status Report") > >() },
    { "n3361", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern SnbspDunbspToit CnbspNelson RnbspGeva")) >(), wxS("C Language Constructs for Parallel Programming") > >() },
    { "n3362", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Terminology indirection versus dereference revision ") > >() },
    { "n3363", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("A Rational Number Library for C") > >() },
    { "n3365", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3366", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Runtimesized arrays with automatic storage duration") > >() },
    { "n3367", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3368", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3369", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3370", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Call for Library Proposals") > >() },
    { "n3371", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Status List for Library Proposals") > >() },
    { "n3373", RevList< Rev< 0u, Arr64< Hash(wxS("Stephen D Clamage")) >(), wxS("AGENDA PL Meeting No  WG Meeting No  October    Portland Oregon") > >() },
    { "n3374", RevList< Rev< 0u, Arr64< Hash(wxS("KnbspKloepper NnbspMeyer")) >(), wxS("SG Networking") > >() },
    { "n3375", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3376", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3377", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("C Editors Report February ") > >() },
    { "n3378", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspYasskin MnbspAustern LnbspCrowl CnbspCarruth CnbspMysen")) >(), wxS("A preliminary proposal for work executors") > >() },
    { "n3379", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3380", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Meeting No   February  Kona Hawaii USA") > >() },
    { "n3381", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No   February  Kona Hawaii USA") > >() },
    { "n3382", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3383", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3384", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3386", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Return type deduction for normal functions") > >() },
    { "n3387", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Overload resolution tiebreakers for integer types") > >() },
    { "n3388", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Using Asio with C") > >() },
    { "n3389", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Urdl a simple library for accessing web content") > >() },
    { "n3390", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes KnbspHenney")) >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3391", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl SnbspdunbspToit")) >(), wxS("ISO C SG Meeting Minutes for May ") > >() },
    { "n3392", RevList< Rev< 0u, Arr64< Hash(wxS("Neal Meyer")) >(), wxS("Minutes WGSG Meeting  May  Redmond Washington USA") > >() },
    { "n3393", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n3394", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("deprecated attribute") > >() },
    { "n3395", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Stream Mutexes") > >() },
    { "n3396", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Dynamic memory allocation for overaligned data") > >() },
    { "n3397", RevList< Rev< 0u, Arr64< Hash(wxS("Roger Orr")) >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3398", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("String Interoperation Library") > >() },
    { "n3399", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3401", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Generating move operations elaborating on Core ") > >() },
    { "n3402", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Userdefined Literals for Standard Library Types") > >() },
    { "n3403", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Use Cases for CompileTime Reflection") > >() },
    { "n3404", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Tuple Tidbits") > >() },
    { "n3405", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Template Tidbits") > >() },
    { "n3407", RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Kuumlhl")) >(), wxS("Proposal to Add Decimal Floating Point Support to C") > >() },
    { "n3408", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspHoberock OnbspGiroux VnbspGrover JnbspMarathe et al")) >(), wxS("Parallelizing The Standard Algorithms Library") > >() },
    { "n3409", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Strict ForkJoin Parallelism") > >() },
    { "n3410", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspMnbspBerris MnbspAustern LnbspCrowl LnbspSingh")) >(), wxS("Rich Pointers with Dynamic and Static Introspection") > >() },
    { "n3411", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Additional Searching Algorithms") > >() },
    { "n3412", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3413", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Allowing arbitrary literal types for nontype template parameters") > >() },
    { "n3414", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("A Rational Number Library for C") > >() },
    { "n3415", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("A Database Access Library") > >() },
    { "n3416", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Packaging Parameter Packs") > >() },
    { "n3417", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3418", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspVali HnbspSutter DnbspAbrahams")) >(), wxS("Proposal for Generic Polymorphic Lambda Expressions") > >() },
    { "n3419", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Geva")) >(), wxS("Vector loops and Parallel Loops") > >() },
    { "n3420", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("A URI Library for C") > >() },
    { "n3421", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Making Operator Functors greaterltgt") > >() },
    { "n3422", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong JnbspGottschlich")) >(), wxS("SG Software Transactional Memory TM Status Report") > >() },
    { "n3423", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Software Transactional Memory TM Meeting Minutes") > >() },
    { "n3424", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Lambda Correctness and Usability Issues") > >() },
    { "n3425", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspRobison AnbspMalakhov AnbspLaksberg")) >(), wxS("Concurrent Unordered Associative Containers for C") > >() },
    { "n3426", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Experience with PreParsed Headers") > >() },
    { "n3427", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("Shared locking in C") > >() },
    { "n3428", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("A Standard Programmatic Interface for Asynchronous Operations") > >() },
    { "n3429", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspLaksberg HnbspSutter AnbspRobison SnbspMithani")) >(), wxS("A C Library Solution To Parallelism") > >() },
    { "n3430", RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("Proposing stdsplit") > >() },
    { "n3431", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Quoted Strings Library Proposal") > >() },
    { "n3432", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Sized Deallocation") > >() },
    { "n3433", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl CnbspCarruth")) >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3434", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Concurrent Queues") > >() },
    { "n3435", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Standardized featuretest macros") > >() },
    { "n3436", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspNiebler DnbspWalker JnbspdenbspGuzman")) >(), wxS("stdresultof and SFINAE") > >() },
    { "n3437", RevList< Rev< 0u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Type Name Strings For C") > >() },
    { "n3438", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3439", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3440", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3441", RevList< Rev< 0u, Arr64< Hash(wxS("Aurelian Melinte")) >(), wxS("Call Stack Utilities and stdexception Extension Proposal") > >() },
    { "n3442", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringref a nonowning reference to a string") > >() },
    { "n3443", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspPowell TnbspBlechmann")) >(), wxS("Priority Queue Changes and Additions") > >() },
    { "n3444", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Relaxing syntactic constraints on constexpr function definitions") > >() },
    { "n3445", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Pass by Const Reference or Value") > >() },
    { "n3446", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspMysen LnbspCrowl AnbspBerkan")) >(), wxS("C Mapreduce") > >() },
    { "n3448", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Painless Digit Separation") > >() },
    { "n3449", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis YnbspSolodkyy")) >(), wxS("Open and Efficient Type Switch for C") > >() },
    { "n3450", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("IteratorRelated Improvements to Containers") > >() },
    { "n3451", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("async and future") > >() },
    { "n3452", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("") > >() },
    { "n3453", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3454", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Meeting No   October  Portland Oregon USA") > >() },
    { "n3455", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No   October  Portland Oregon USA") > >() },
    { "n3456", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Range arguments for container constructors and methods with wording") > >() },
    { "n3457", RevList< Rev< 0u, Arr64< Hash(wxS("Vladimir Grigoriev")) >(), wxS("Algorithm stdiota and its modifications") > >() },
    { "n3458", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Neumann")) >(), wxS("Simple Database Integration in C") > >() },
    { "n3459", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("Comparison of Two Database Access Methodologies") > >() },
    { "n3462", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspNiebler DnbspWalker JnbspdenbspGuzman")) >(), wxS("stdresultof and SFINAE") > >() },
    { "n3463", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Portable Program Source Files") > >() },
    { "n3466", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("More Perfect Forwarding") > >() },
    { "n3467", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3468", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Userdefined Literals for Standard Library Types version ") > >() },
    { "n3469", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKruumlgler")) >(), wxS("Constexpr Library Additions chrono v") > >() },
    { "n3470", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKruumlgler")) >(), wxS("Constexpr Library Additions containers v") > >() },
    { "n3471", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspKosnik DnbspKruumlgler")) >(), wxS("Constexpr Library Additions utilities v") > >() },
    { "n3472", RevList< Rev< 0u, Arr64< Hash(wxS("James Dennett")) >(), wxS("Binary Literals in the C Core Language") > >() },
    { "n3473", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3474", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3475", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3477", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspFabijanic GnbspObiltschnig")) >(), wxS("C Internet Protocol Classes") > >() },
    { "n3478", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core Issue  Pointer comparison vs qualification conversions") > >() },
    { "n3479", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspPowell TnbspBlechmann")) >(), wxS("Priority Queue Queue and Stack Changes and Additions") > >() },
    { "n3480", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3481", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3482", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3484", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("A URI Library for C") > >() },
    { "n3485", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3486", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("C Editors Report October ") > >() },
    { "n3487", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("TLS and Parallelism") > >() },
    { "n3488", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Evolution Working Group paper status") > >() },
    { "n3489", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("A Rational Number Library for C") > >() },
    { "n3490", RevList< Rev< 0u, Arr64< Hash(wxS("Dave Abrahams")) >(), wxS("ADL Control for C") > >() },
    { "n3491", RevList< Rev< 0u, Arr64< Hash(wxS("Alex Fabijanic")) >(), wxS("Minutes SG Networking October ") > >() },
    { "n3492", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Use Cases for CompileTime Reflection Rev ") > >() },
    { "n3493", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Compiletime integer sequences") > >() },
    { "n3495", RevList< Rev< 0u, Arr64< Hash(wxS("Ariane van der Steldt")) >(), wxS("inplace realloc") > >() },
    { "n3497", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3499", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Digit Separators") > >() },
    { "n3500", RevList< Rev< 0u, Arr64< Hash(wxS("Olaf van der Spek")) >(), wxS("New assert variants") > >() },
    { "n3501", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3502", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3503", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3505", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3506", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("A printflike Interface for the Streams Library") > >() },
    { "n3507", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("A URI Library for C") > >() },
    { "n3508", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes KnbspHenney")) >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3509", RevList< Rev< 0u, Arr64< Hash(wxS("Olaf van der Spek")) >(), wxS("Operator Bool for Ranges") > >() },
    { "n3510", RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("stdsplit An algorithm for splitting strings") > >() },
    { "n3511", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("exchange utility function") > >() },
    { "n3512", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringref a nonowning reference to a string revision ") > >() },
    { "n3513", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Range arguments for container constructors and methods wording revision ") > >() },
    { "n3514", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown")) >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer") > >() },
    { "n3515", RevList< Rev< 0u, Arr64< Hash(wxS("Walter Brown")) >(), wxS("Toward Opaque Typedefs for CY") > >() },
    { "n3516", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3517", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3518", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3519", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Feb   SG Teleconference Announcement and Agenda") > >() },
    { "n3520", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Geva")) >(), wxS("Critical sections in vector loops") > >() },
    { "n3521", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("convert utility function") > >() },
    { "n3522", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3523", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3524", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3525", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Polymorphic Allocators") > >() },
    { "n3526", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Price")) >(), wxS("Uniform initialization for arrays and class aggregate types") > >() },
    { "n3528", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Minutes of Feb   SG Phone Call") > >() },
    { "n3529", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3530", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGove NnbspCopty MnbspWong")) >(), wxS("Leveraging OpenMP infrastructure for language level parallelisation") > >() },
    { "n3531", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Userdefined Literals for Standard Library Types version ") > >() },
    { "n3532", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl MnbspAustern")) >(), wxS("C Dynamic Arrays") > >() },
    { "n3533", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl CnbspMysen")) >(), wxS("C Concurrent Queues") > >() },
    { "n3534", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMackintosh AnbspBerkan")) >(), wxS("C Pipelines") > >() },
    { "n3535", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Stream Mutexes") > >() },
    { "n3536", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Sized Deallocation") > >() },
    { "n3537", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl CnbspCarruth")) >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3538", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Pass by Const Reference or Value") > >() },
    { "n3539", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3540", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3541", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3542", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3543", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspPowell TnbspBlechmann")) >(), wxS("Priority Queue Queue and Stack Changes and Additions") > >() },
    { "n3544", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3545", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("An Incremental Improvement to integralconstant") > >() },
    { "n3546", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("TransformationTraits Redux") > >() },
    { "n3547", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Three ltrandomgtrelated Proposals") > >() },
    { "n3548", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Conditionallysupported Special Math Functions for C") > >() },
    { "n3549", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("sboundextent") > >() },
    { "n3550", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposed C Value Classification") > >() },
    { "n3551", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Random Number Generation in C") > >() },
    { "n3552", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Introducing Object Aliases") > >() },
    { "n3553", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposing a CY Swap Operator") > >() },
    { "n3556", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern CnbspLeiserson")) >(), wxS("ThreadLocal Storage in XParallel Computations") > >() },
    { "n3557", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Considering a ForkJoin Parallelism Library") > >() },
    { "n3558", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("A Standardized Representation of Asynchronous Operations") > >() },
    { "n3559", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspVali HnbspSutter DnbspAbrahams")) >(), wxS("Proposal for Generic Polymorphic Lambda Expressions") > >() },
    { "n3560", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspVali HnbspSutter DnbspAbrahams")) >(), wxS("Proposal for Assorted Extensions to Lambda Expressions") > >() },
    { "n3561", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspGeva CnbspNelson")) >(), wxS("Semantics of Vector Loops") > >() },
    { "n3563", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspMysen LnbspCrowl AnbspBerkan")) >(), wxS("C Mapreduce") > >() },
    { "n3564", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson DnbspBrewis HnbspSutter SnbspMithani")) >(), wxS("Resumable Functions") > >() },
    { "n3565", RevList< Rev< 0u, Arr64< Hash(wxS("Aleksandar Fabijanic")) >(), wxS("IP Address Design Constraints") > >() },
    { "n3566", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Evolution Open Issues") > >() },
    { "n3567", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Evolution Closed Issues") > >() },
    { "n3568", RevList< Rev< 0u, Arr64< Hash(wxS("Howard Hinnant")) >(), wxS("Shared locking in C") > >() },
    { "n3570", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Quoted Strings Library Proposal Revision ") > >() },
    { "n3572", RevList< Rev< 0u, Arr64< Hash(wxS("Mark Boyall")) >(), wxS("Unicode Support in the Standard Library") > >() },
    { "n3573", RevList< Rev< 0u, Arr64< Hash(wxS("Mark Boyall")) >(), wxS("Heterogenous extensions to unordered containers") > >() },
    { "n3574", RevList< Rev< 0u, Arr64< Hash(wxS("Mark Boyall")) >(), wxS("Binding stateful functions as function pointers") > >() },
    { "n3575", RevList< Rev< 0u, Arr64< Hash(wxS("Mark Boyall")) >(), wxS("Additional Standard allocation schemes") > >() },
    { "n3576", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("SG Concepts Teleconference Minutes  ") > >() },
    { "n3577", RevList< Rev< 0u, Arr64< Hash(wxS("Nevin Liber")) >(), wxS("Fall  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3578", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposing the Rule of Five") > >() },
    { "n3579", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("A type trait for signatures") > >() },
    { "n3580", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspSutton BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Concepts Lite Constraining Templates with Predicates") > >() },
    { "n3581", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Delimited iterators") > >() },
    { "n3582", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Return type deduction for normal functions") > >() },
    { "n3583", RevList< Rev< 0u, Arr64< Hash(wxS("Scott Schurr")) >(), wxS("Exploring constexpr at Runtime") > >() },
    { "n3584", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Wording for Accessing Tuple Fields by Type") > >() },
    { "n3585", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("IteratorRelated Improvements to Containers Revision ") > >() },
    { "n3586", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTalbot HnbspHinnant")) >(), wxS("Splicing Maps and Sets") > >() },
    { "n3587", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("For Loop Exit Strategies") > >() },
    { "n3588", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("makeunique") > >() },
    { "n3592", RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Alternative cancellation and data escape mechanisms for transactions") > >() },
    { "n3593", RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("stdsplit An algorithm for splitting strings") > >() },
    { "n3594", RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("stdjoin An algorithm for joining a range of elements") > >() },
    { "n3595", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Gottschling")) >(), wxS("Simplifying ArgumentDependent Lookup Rules") > >() },
    { "n3596", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Gottschling")) >(), wxS("Code Reuse in Class Template Specialization") > >() },
    { "n3597", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Relaxing constraints on constexpr functions") > >() },
    { "n3598", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("constexpr member functions and implicit const") > >() },
    { "n3599", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Literal operator templates for strings") > >() },
    { "n3600", RevList< Rev< 0u, Arr64< Hash(wxS("Alasdair Mackintosh")) >(), wxS("C Latches and Barriers") > >() },
    { "n3601", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus DnbspVandevoorde")) >(), wxS("Implicit template parameters") > >() },
    { "n3602", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus DnbspVandevoorde")) >(), wxS("Template parameter deduction for constructors") > >() },
    { "n3603", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("A ThreeClass IP Address Proposal") > >() },
    { "n3604", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts") > >() },
    { "n3605", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Member initializers and aggregates") > >() },
    { "n3606", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Extending stdsearch to use Additional Searching Algorithms") > >() },
    { "n3607", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus AnbspPall")) >(), wxS("Making nonmodifying sequence operations more robust") > >() },
    { "n3608", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("exchange utility function revision ") > >() },
    { "n3609", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3610", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Generic lambdacapture initializers supporting capturebymove") > >() },
    { "n3611", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("A Rational Number Library for C") > >() },
    { "n3612", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Neumann")) >(), wxS("Desiderata of a C Database Interface") > >() },
    { "n3613", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis AnbspSutton")) >(), wxS("Static If Considered") > >() },
    { "n3614", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("unwindingexception") > >() },
    { "n3615", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Constexpr Variable Templates") > >() },
    { "n3617", RevList< Rev< 0u, Arr64< Hash(wxS("Philipp Juschka")) >(), wxS("Lifting overload sets into function objects") > >() },
    { "n3618", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3619", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Morrow")) >(), wxS("A proposal to add swappability traits to the standard library") > >() },
    { "n3620", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Network byte order conversion") > >() },
    { "n3621", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3622", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes WG Meeting No   April   Bristol UK") > >() },
    { "n3623", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No   April   Bristol UK") > >() },
    { "n3625", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("A URI Library for C") > >() },
    { "n3626", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspBristow CnbspKormanyos JnbspMaddock")) >(), wxS("FloatingPoint Typedefs Having Specified Widths") > >() },
    { "n3627", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Relaxed switch statement") > >() },
    { "n3628", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("C and C Compatibility") > >() },
    { "n3629", RevList< Rev< 0u, Arr64< Hash(wxS("Doug Gregor")) >(), wxS("Simplifying Cx Concepts") > >() },
    { "n3630", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("async future and thread Revision ") > >() },
    { "n3631", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Plum")) >(), wxS("C The New C Standard") > >() },
    { "n3632", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Additional stdasync Launch Policies") > >() },
    { "n3633", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3634", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("Improvements to stdfutureltTgt and Related APIs") > >() },
    { "n3635", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong RnbspSilvera RnbspMak CnbspCambly etnbspal")) >(), wxS("Towards restrictlike semantics for C") > >() },
    { "n3636", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("thread should join") > >() },
    { "n3637", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("async and future Revision ") > >() },
    { "n3638", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Return type deduction for normal functions") > >() },
    { "n3639", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3640", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Extending sharedptr to Support Arrays") > >() },
    { "n3641", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Extending makeshared to Support Arrays") > >() },
    { "n3642", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Userdefined Literals for Standard Library Types part   version ") > >() },
    { "n3643", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Range Adaptor for Selecting from Pair or Tuple") > >() },
    { "n3644", RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Null Forward Iterators") > >() },
    { "n3645", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTalbot HnbspHinnant JnbspDennett JnbspWakely")) >(), wxS("Splicing Maps and Sets Revision ") > >() },
    { "n3646", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Pratte")) >(), wxS("Network byte order conversion") > >() },
    { "n3647", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No   October  Portland Oregon USA") > >() },
    { "n3648", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspVandevoorde VnbspVoutilainen")) >(), wxS("Wording Changes for Generalized Lambdacapture") > >() },
    { "n3649", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspVali HnbspSutter DnbspAbrahams")) >(), wxS("Generic Polymorphic Lambda Expressions Revision ") > >() },
    { "n3650", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson DnbspBrewis HnbspSutter SnbspMithani")) >(), wxS("Resumable Functions") > >() },
    { "n3651", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Variable Templates Revision ") > >() },
    { "n3653", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspVoutilainen RnbspSmith")) >(), wxS("Member initializers and aggregates") > >() },
    { "n3654", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Quoted Strings Library Proposal Revision ") > >() },
    { "n3655", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("TransformationTraits Redux v") > >() },
    { "n3656", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("makeunique Revision ") > >() },
    { "n3657", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspWakely SnbspLavavej JnbspMuntildeoz")) >(), wxS("Adding heterogeneous comparison lookup to associative containers rev ") > >() },
    { "n3658", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Compiletime integer sequences") > >() },
    { "n3659", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant DnbspVollmann HnbspBoehm")) >(), wxS("Shared locking in C") > >() },
    { "n3661", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Digit Separators") > >() },
    { "n3662", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl MnbspAustern")) >(), wxS("C Dynamic Arrays") > >() },
    { "n3663", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Sized Deallocation") > >() },
    { "n3664", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl CnbspCarruth RnbspSmith")) >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3665", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl")) >(), wxS("Uninterleaved String Output Streaming") > >() },
    { "n3666", RevList< Rev< 0u, Arr64< Hash(wxS("Alasdair Mackintosh")) >(), wxS("C Latches and Barriers") > >() },
    { "n3667", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Drafting for Core ") > >() },
    { "n3668", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("exchange utility function revision ") > >() },
    { "n3669", RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("Fixing constexpr member functions without const") > >() },
    { "n3670", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Wording for Addressing Tuples by Type Revision ") > >() },
    { "n3671", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus AnbspPall")) >(), wxS("Making nonmodifying sequence operations more robust Revision ") > >() },
    { "n3673", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("C Library Working Group Ready Issues Bristol ") > >() },
    { "n3674", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3675", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3676", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3677", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew L Sandoval")) >(), wxS("A Proposal to Add additional RAII Wrappers to the Standard Library") > >() },
    { "n3678", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Stream Guards") > >() },
    { "n3679", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Async future destructors must wait") > >() },
    { "n3680", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Improving pair and tuple") > >() },
    { "n3681", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Auto and bracedinit lists") > >() },
    { "n3682", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3683", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3684", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3685", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3687", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3688", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3689", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3690", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Programming Languages  C") > >() },
    { "n3691", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3692", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("C Editors Report October ") > >() },
    { "n3693", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n3694", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Featuretesting recommendations for C") > >() },
    { "n3695", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3696", RevList< Rev< 0u, Arr64< Hash(wxS("Bronek Kozicki")) >(), wxS("Proposal to extend atomic with priority update functions") > >() },
    { "n3697", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n3698", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("July  Santa Clara SG Meeting Announcement and Agenda") > >() },
    { "n3699", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kamixski")) >(), wxS("A proposal to add a generalized callable negator") > >() },
    { "n3701", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspSutton BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Concepts Lite") > >() },
    { "n3703", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Extending stdsearch to use Additional Searching Algorithms Version ") > >() },
    { "n3705", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3706", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Distributed Counters") > >() },
    { "n3707", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS(" Meeting Invitation and Information") > >() },
    { "n3708", RevList< Rev< 0u, Arr64< Hash(wxS("OnbspKowalke NnbspGodspeed")) >(), wxS("A proposal to add coroutines to the C standard library") > >() },
    { "n3709", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm JnbspHoberock AnbspMackintosh")) >(), wxS("Minutes for July  Santa Clara SG Meeting") > >() },
    { "n3710", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspBoehm et al")) >(), wxS("Specifying the absence of out of thin air results LWG") > >() },
    { "n3711", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspLaksberg HnbspSutter")) >(), wxS("Task Groups As a Lower Level C Library Solution To ForkJoin Parallelism") > >() },
    { "n3712", RevList< Rev< 0u, Arr64< Hash(wxS("Arch D Robison")) >(), wxS("PolicyBased Design for Safe Destruction in Concurrent Containers") > >() },
    { "n3713", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3714", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3715", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3716", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("A printflike Interface for the Streams Library") > >() },
    { "n3717", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3718", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong VnbspLuchangco JnbspMaurer MnbspMoir et al")) >(), wxS("Transactional Memory Support for C") > >() },
    { "n3719", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kamixski")) >(), wxS("Extend INVOKE to support types convertible to target class") > >() },
    { "n3720", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3721", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("Improvements to stdfutureltTgt and Related APIs") > >() },
    { "n3722", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson DnbspBrewis HnbspSutter SnbspMithani")) >(), wxS("Resumable Functions") > >() },
    { "n3723", RevList< Rev< 0u, Arr64< Hash(wxS("Pascal Constanza")) >(), wxS("Extend operatorgt to support rvalues") > >() },
    { "n3726", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Polymorphic Memory Resources") > >() },
    { "n3727", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kamixski")) >(), wxS("A proposal to add invoke function template") > >() },
    { "n3728", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Packaging Parameter Packs Rev ") > >() },
    { "n3729", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Invocation type traits") > >() },
    { "n3730", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Specializations and namespaces") > >() },
    { "n3731", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspMysen NnbspGustafsson")) >(), wxS("Executors and schedulers revision ") > >() },
    { "n3732", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspRobison AnbspPotapov AnbspMalakhov")) >(), wxS("ValueOriented Concurrent Unordered Containers") > >() },
    { "n3733", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC CD  C  National Body Comments") > >() },
    { "n3734", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Geva")) >(), wxS("Vector Programming A proposal for WG") > >() },
    { "n3735", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Geva")) >(), wxS("On the difference between parallel loops and vector loops") > >() },
    { "n3736", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3737", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3738", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3739", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Improving pair and tuple revision ") > >() },
    { "n3740", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer v") > >() },
    { "n3741", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Toward Opaque Typedefs for CY v") > >() },
    { "n3742", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Three ltrandomgtrelated Proposals v") > >() },
    { "n3743", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Conditionallysupported Special Math Functions for C v") > >() },
    { "n3744", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposing pure") > >() },
    { "n3745", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Featuretesting recommendations for C") > >() },
    { "n3746", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposing a CY Swap Operator v") > >() },
    { "n3747", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("A Universal Model for Asynchronous Operations") > >() },
    { "n3748", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspGottschling JnbspFalcou HnbspSutter")) >(), wxS("Implicit Evaluation of auto Variables and Arguments") > >() },
    { "n3749", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Constexpr Library Additions functional") > >() },
    { "n3750", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Ostream Buffers") > >() },
    { "n3751", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Object Lifetime Lowlevel Programming and memcpy") > >() },
    { "n3752", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspShoumldl FnbspFracassi")) >(), wxS("Index Based Ranges") > >() },
    { "n3753", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3754", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3755", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3756", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3758", RevList< Rev< 0u, Arr64< Hash(wxS("Emil Dotchevski")) >(), wxS("Standard exception information types for stdexception") > >() },
    { "n3759", RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("SIMD Vector Types") > >() },
    { "n3760", RevList< Rev< 0u, Arr64< Hash(wxS("Alberto Ganesh Barbati")) >(), wxS("deprecated attribute") > >() },
    { "n3761", RevList< Rev< 0u, Arr64< Hash(wxS("Sean Middleditch")) >(), wxS("Proposing typeatltgt") > >() },
    { "n3762", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3764", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Ruminations on relational operators") > >() },
    { "n3765", RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van Eerd")) >(), wxS("On Optional") > >() },
    { "n3766", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("The identity type transformation") > >() },
    { "n3767", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Teleconference Minutes September ") > >() },
    { "n3768", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes September ") > >() },
    { "n3769", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes PL Meeting No   Chicago Minutes") > >() },
    { "n3770", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3771", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspTong MnbspWong")) >(), wxS("Canadian C Comments") > >() },
    { "n3772", RevList< Rev< 0u, Arr64< Hash(wxS("David Rodriacuteguez Ibeas")) >(), wxS("Changing the type of addressofmember expression") > >() },
    { "n3773", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("async and future Revision ") > >() },
    { "n3774", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspNaumann SnbspWenzel")) >(), wxS("C Needs Language Support For Vectorization") > >() },
    { "n3775", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Deprecating rand and Friends") > >() },
    { "n3776", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Wording for future") > >() },
    { "n3777", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Wording for deprecating async") > >() },
    { "n3778", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Sized Deallocation") > >() },
    { "n3779", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Userdefined Literals for stdcomplex") > >() },
    { "n3780", RevList< Rev< 0u, Arr64< Hash(wxS("Nico Josuttis")) >(), wxS("Why Deprecating async is the Worst of all Options") > >() },
    { "n3781", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl RnbspSmith JnbspSnyder DnbspVandevoorde")) >(), wxS("SingleQuotationMark as a Digit Separator") > >() },
    { "n3782", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspShoumldl FnbspFracassi")) >(), wxS("Index Based Ranges Rev ") > >() },
    { "n3783", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Pratte")) >(), wxS("Network Byte Order Conversion") > >() },
    { "n3784", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("Improvements to stdfutureltTgt and Related APIs") > >() },
    { "n3785", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspMysen NnbspGustafsson MnbspAustern JnbspYasskin")) >(), wxS("Executors and schedulers revision ") > >() },
    { "n3786", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Prohibiting out of thin air results in C") > >() },
    { "n3787", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3788", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Immediate issues") > >() },
    { "n3789", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Constexpr Library Additions functional") > >() },
    { "n3790", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n3791", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Lightweight Drawing Library  Objectives Requirements Strategies") > >() },
    { "n3792", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3794", RevList< Rev< 0u, Arr64< Hash(wxS("Daryle Walker")) >(), wxS("Proposal to Add MultiDimensional Support to stdarray") > >() },
    { "n3795", RevList< Rev< 0u, Arr64< Hash(wxS("Vladimir Grigoriev")) >(), wxS("A more common version of algorithm stdpartitioncopy") > >() },
    { "n3796", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("stdrand replacement") > >() },
    { "n3797", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3798", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus Du Toit")) >(), wxS("C Editors Report October ") > >() },
    { "n3800", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kamixski")) >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n3801", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Removing Undefined Behavior from the Preprocessor") > >() },
    { "n3802", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("apply call a function with arguments from a tuple") > >() },
    { "n3804", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspDawes KnbspHenney DnbspKruumlgler")) >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3806", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3807", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3808", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3810", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Alternatives for Array Extensions") > >() },
    { "n3811", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3812", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3813", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3814", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSnyder CnbspCarruth")) >(), wxS("Call for CompileTime Reflection Proposals") > >() },
    { "n3815", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTomazos CnbspKaumlser")) >(), wxS("Enumerator List Property Queries") > >() },
    { "n3816", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Polymorphic Memory Resources  r") > >() },
    { "n3817", RevList< Rev< 0u, Arr64< Hash(wxS("Alasdair Mackintosh")) >(), wxS("C Latches and Barriers") > >() },
    { "n3818", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3819", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspSutton BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Concepts Lite Specification") > >() },
    { "n3820", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Working Draft Technical Specification  Array Extensions") > >() },
    { "n3821", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3822", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3823", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3824", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("makearray") > >() },
    { "n3825", RevList< Rev< 0u, Arr64< Hash(wxS("Jason Zink")) >(), wxS("SG Graphics Discussion") > >() },
    { "n3826", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3827", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3828", RevList< Rev< 0u, Arr64< Hash(wxS("Jill Peckham")) >(), wxS("FALL  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3829", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("apply call a function with arguments from a tuple V") > >() },
    { "n3830", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspSommerlad AnbspSandoval")) >(), wxS("Scoped Resource  Generic RAII Wrapper for the Standard Library") > >() },
    { "n3831", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspGeva CnbspNelson")) >(), wxS("Language Extensions for Vector level parallelism") > >() },
    { "n3832", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern AnbspRobison AnbspLaksberg HnbspSutter et al")) >(), wxS("Task Region") > >() },
    { "n3833", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3834", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3835", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3836", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3837", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3838", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3839", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Proposing the Rule of Five v") > >() },
    { "n3840", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer v") > >() },
    { "n3841", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Discouraging rand in C") > >() },
    { "n3842", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A sample Proposal") > >() },
    { "n3843", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A SFINAEFriendly stdcommontype") > >() },
    { "n3844", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A SFINAEFriendly stditeratortraits") > >() },
    { "n3845", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Greatest Common Divisor and Least Common Multiple") > >() },
    { "n3846", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Extending staticassert") > >() },
    { "n3847", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Random Number Generation is Not Simple") > >() },
    { "n3848", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Working Draft Technical Specification on C Extensions for Library Fundamentals") > >() },
    { "n3849", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3850", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3851", RevList< Rev< 0u, Arr64< Hash(wxS("xnbspMendakiewicz HnbspSutter")) >(), wxS("Multidimensional bounds index and arrayview") > >() },
    { "n3852", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Status Rev ") > >() },
    { "n3853", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("RangeBased ForLoops The Next Generation") > >() },
    { "n3854", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Variable Templates For Type Traits") > >() },
    { "n3856", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Unforgetting standard functions minmax as constexpr") > >() },
    { "n3857", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson AnbspLaksberg HnbspSutter SnbspMithani")) >(), wxS("Improvements to stdfutureltTgt and Related APIs") > >() },
    { "n3858", RevList< Rev< 0u, Arr64< Hash(wxS("NnbspGustafsson DnbspBrewis HnbspSutter")) >(), wxS("Resumable Functions") > >() },
    { "n3859", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong VnbspLuchangco JnbspMaurer MnbspMoir et al")) >(), wxS("Transactional Memory Support for C") > >() },
    { "n3861", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong")) >(), wxS("Transactional Memory TM Meeting Minutes ") > >() },
    { "n3862", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspGottschlich MnbspSpear MnbspWong et al")) >(), wxS("Towards a Transactionsafe C Standard Library stdlist") > >() },
    { "n3863", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Fioravante")) >(), wxS("Private Extension Methods") > >() },
    { "n3864", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Fioravante")) >(), wxS("A constexpr bitwise operations library for C") > >() },
    { "n3865", RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J Botet Escriba")) >(), wxS("More Improvements to stdfutureltTgt") > >() },
    { "n3866", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Invocation type traits Rev ") > >() },
    { "n3867", RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Specializations and namespaces Rev ") > >() },
    { "n3869", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Extending sharedptr to Support Arrays Revision ") > >() },
    { "n3870", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov GnbspFernandes")) >(), wxS("Extending makeshared to Support Arrays Revision ") > >() },
    { "n3871", RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Kuumlhl")) >(), wxS("Proposal to Add Decimal Floating Point Support to C revision ") > >() },
    { "n3872", RevList< Rev< 0u, Arr64< Hash(wxS("Arch Robison")) >(), wxS("A Primer on Scheduling ForkJoin Parallelism with Work Stealing") > >() },
    { "n3873", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Koumlppe")) >(), wxS("Improved insertion interface for uniquekey maps") > >() },
    { "n3874", RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("LightWeight Execution Agents") > >() },
    { "n3875", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspDnbspGarcia XnbspLi")) >(), wxS("Runtime bound array data members") > >() },
    { "n3876", RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("Convenience Functions to Combine Hash Values") > >() },
    { "n3877", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3878", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspBallo AnbspSutton")) >(), wxS("Extensions to the Concept Introduction Syntax in Concepts Lite") > >() },
    { "n3879", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Explicit Flow Control break label goto case and explicit switch") > >() },
    { "n3880", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Price")) >(), wxS("Improving the Verification of C Programs") > >() },
    { "n3881", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Fixing the specification of universalcharacternames") > >() },
    { "n3882", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("An update to the preprocessor specification") > >() },
    { "n3883", RevList< Rev< 0u, Arr64< Hash(wxS("Neacutemeth Peacuteter")) >(), wxS("Code checkers amp generators") > >() },
    { "n3884", RevList< Rev< 0u, Arr64< Hash(wxS("Nevin Liber")) >(), wxS("Contiguous Iterators A Refinement of Random Access Iterators") > >() },
    { "n3886", RevList< Rev< 0u, Arr64< Hash(wxS("Johann Anhofer")) >(), wxS("A Proposal to add a Database Access Layer to the Standard Library") > >() },
    { "n3887", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Consistent Metafunction Aliases") > >() },
    { "n3888", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspMcLaughlin HnbspSutter JnbspZink")) >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n3889", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Concepts Lite Specification") > >() },
    { "n3890", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("ContainerltIncomplete Typegt") > >() },
    { "n3891", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspNishanov HnbspSutter")) >(), wxS("A proposal to rename sharedmutex to sharedtimedmutex") > >() },
    { "n3892", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Ostream Buffers") > >() },
    { "n3893", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3894", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3895", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3896", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("LIBRARY FOUNDATIONS FOR ASYNCHRONOUS OPERATIONS") > >() },
    { "n3897", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Autotype members") > >() },
    { "n3898", RevList< Rev< 0u, Arr64< Hash(wxS("Geoff Pike")) >(), wxS("HASHING AND FINGERPRINTING") > >() },
    { "n3899", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Nested Allocation") > >() },
    { "n3900", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("WG  Telecon Minutes") > >() },
    { "n3901", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes February  WG Meeting No ") > >() },
    { "n3902", RevList< Rev< 0u, Arr64< Hash(wxS("Kyle Kloepper")) >(), wxS("Minutes February  PL Meeting No ") > >() },
    { "n3903", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3905", RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Extending stdsearch to use Additional Searching Algorithms Version ") > >() },
    { "n3906", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC PDTS  File System National Body Comments") > >() },
    { "n3909", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A SFINAEFriendly stditeratortraits v") > >() },
    { "n3910", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3911", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("TransformationTrait Alias voidt") > >() },
    { "n3912", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Auto and bracedinitlists continued") > >() },
    { "n3913", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Greatest Common Divisor and Least Common Multiple v") > >() },
    { "n3914", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("Additional Core Language Issue Resolutions for Issaquah") > >() },
    { "n3915", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("apply call a function with arguments from a tuple V") > >() },
    { "n3916", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Polymorphic Memory Resources  r") > >() },
    { "n3918", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core Issue  Temporary objects vs temporary expressions") > >() },
    { "n3919", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong VnbspLuchangco JnbspMaurer MnbspMoir et al")) >(), wxS("Transactional Memory Support for C") > >() },
    { "n3920", RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Extending sharedptr to Support Arrays Revision ") > >() },
    { "n3921", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3922", RevList< Rev< 0u, Arr64< Hash(wxS("James Dennett")) >(), wxS("New Rules for auto deduction from bracedinitlist") > >() },
    { "n3923", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A SFINAEFriendly stditeratortraits v") > >() },
    { "n3924", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Discouraging rand in C v") > >() },
    { "n3925", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("A sample Proposal v") > >() },
    { "n3926", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("LWG Issue  is NAD") > >() },
    { "n3927", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Definition of LockFree") > >() },
    { "n3928", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Extending staticassert v") > >() },
    { "n3929", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Concepts Lite Specification") > >() },
    { "n3930", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Immediate Issues") > >() },
    { "n3931", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Immediate Issues") > >() },
    { "n3932", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Variable Templates For Type Traits Revision ") > >() },
    { "n3936", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus du Toit")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3937", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus du Toit")) >(), wxS("Programming Languages mdash C") > >() },
    { "n3938", RevList< Rev< 0u, Arr64< Hash(wxS("Stefanus du Toit")) >(), wxS("Editors Report") > >() },
    { "n3939", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspDimov GnbspFernandes")) >(), wxS("Extending makeshared to Support Arrays Revision ") > >() },
    { "n3940", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Working Draft Technical Specification ndash File System") > >() },
    { "n3941", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Study Group SG Active Issues List Revision R") > >() },
    { "n3942", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Study Group SG Closed Issues List Revision R") > >() },
    { "n3943", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Filesystem Study Group SG Defect Report List Revision R") > >() },
    { "n3944", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3945", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3946", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3947", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("URI  Proposed Wording Revision ") > >() },
    { "n3948", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Featuretesting for C Technical Specifications") > >() },
    { "n3949", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspSommerlad AnbspSandoval")) >(), wxS("Scoped Resource  Generic RAII Wrapper for the Standard Library") > >() },
    { "n3950", RevList< Rev< 0u, Arr64< Hash(wxS("Oleg Smolsky")) >(), wxS("Defaulted comparison operators") > >() },
    { "n3951", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspSilva DnbspAuresco")) >(), wxS("C type reflection via variadic template expansion") > >() },
    { "n3952", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3953", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3954", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3955", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Group Member Specifiers") > >() },
    { "n3956", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("ISOIEC CD  C  Responses to National Body Comments") > >() },
    { "n3957", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3958", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3959", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3960", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3961", RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("A proposal to add sharedmutex untimed") > >() },
    { "n3962", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Editors Report February   PostIssaquah") > >() },
    { "n3963", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3964", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Library Foundations for Asynchronous Operations Revision ") > >() },
    { "n3965", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3966", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspCacciola AnbspKrzemieski")) >(), wxS("Fixes for optional objects") > >() },
    { "n3967", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3968", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3969", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3970", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n3971", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("Concurrency TS Editors Report May ") > >() },
    { "n3972", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Douglas")) >(), wxS("SourceCode Information Capture") > >() },
    { "n3974", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspArena DnbspdinbspGennaro PnbspSommerlad")) >(), wxS("Polymorphic Deleter for Unique Pointers") > >() },
    { "n3975", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMatthews DnbspBerris")) >(), wxS("URI  Proposed Wording Revision ") > >() },
    { "n3976", RevList< Rev< 0u, Arr64< Hash(wxS("xnbspMendakiewicz HnbspSutter")) >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n3977", RevList< Rev< 0u, Arr64< Hash(wxS("Niklas Gustafsson")) >(), wxS("Resumable Functions") > >() },
    { "n3978", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C Ostream Buffers") > >() },
    { "n3980", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant VnbspFalco JnbspByteway")) >(), wxS("Types dont know ") > >() },
    { "n3981", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Removing trigraphs") > >() },
    { "n3982", RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemienxski")) >(), wxS("Rvalue reference overloads for optional") > >() },
    { "n3983", RevList< Rev< 0u, Arr64< Hash(wxS("Geoffrey Romer")) >(), wxS("Hashing tuplelike types") > >() },
    { "n3984", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspSilva DnbspAuresco")) >(), wxS("Adding attribute reflection to C") > >() },
    { "n3985", RevList< Rev< 0u, Arr64< Hash(wxS("OnbspKowalke NnbspGoodspeed")) >(), wxS("A proposal to add coroutines to the C standard library Revision ") > >() },
    { "n3986", RevList< Rev< 0u, Arr64< Hash(wxS("SnbspDavalle DnbspGutson AnbspBustamante")) >(), wxS("Adding Standard support to avoid padding within structures") > >() },
    { "n3987", RevList< Rev< 0u, Arr64< Hash(wxS("CnbspSilva DnbspAuresco")) >(), wxS("Yet another set of C type traits") > >() },
    { "n3988", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspFinkel HnbspTong et al")) >(), wxS("Towards restrictlike aliasing semantics for C") > >() },
    { "n3989", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3990", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGutson AnbspBustamante")) >(), wxS("Adding Standard Circular Shift operators for computer integers") > >() },
    { "n3991", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern AnbspRobison AnbspLaksberg HnbspSutter et al")) >(), wxS("Task Region R") > >() },
    { "n3992", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3993", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("On Parallel Invocations of Functions in Parallelism TS") > >() },
    { "n3994", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("RangeBased ForLoops The Next Generation Revision ") > >() },
    { "n3995", RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("A proposal to add sharedmutex untimed Revision ") > >() },
    { "n3996", RevList< Rev< 0u, Arr64< Hash(wxS("Matuacutesxc Chochliacutek")) >(), wxS("Static reflection") > >() },
    { "n3997", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov AnbspBeels")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3998", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMackintosh OnbspGiroux")) >(), wxS("C Latches and Barriers") > >() },
    { "n3999", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspLuchangco JnbspMaurer MnbspWong etnbspal")) >(), wxS("Standard Wording for Transactional Memory Support for C") > >() },
    { "n4001", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n4002", RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("Cleaningup noexcept in the Library") > >() },
    { "n4003", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4004", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4005", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4006", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Koumlppe")) >(), wxS("An improved emplace for uniquekey maps") > >() },
    { "n4007", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus NnbspWilson")) >(), wxS("Delimited iterators Rev ") > >() },
    { "n4008", RevList< Rev< 0u, Arr64< Hash(wxS("Arch Robison")) >(), wxS("SIMD polymorphism") > >() },
    { "n4009", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Uniform Container Erasure") > >() },
    { "n4010", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4011", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4012", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4013", RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Atomic operations on nonatomic data") > >() },
    { "n4014", RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("Uniform Copy Initialization") > >() },
    { "n4015", RevList< Rev< 0u, Arr64< Hash(wxS("V nbspEscriba PnbspTalbot")) >(), wxS("A proposal to add a utility class to represent expected monad") > >() },
    { "n4016", RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("LightWeight Execution Agents Revision ") > >() },
    { "n4018", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4019", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4020", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4021", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspMcLaughlin HnbspSutter JnbspZink")) >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n4022", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kaminxski")) >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n4023", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Working Draft C Extensions for Library Fundamentals") > >() },
    { "n4024", RevList< Rev< 0u, Arr64< Hash(wxS("OnbspKowalke NnbspGoodspeed")) >(), wxS("Distinguishing coroutines and fibers") > >() },
    { "n4025", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspSnyder RnbspSmith")) >(), wxS("Exploring classes of runtime size") > >() },
    { "n4026", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Kawulak")) >(), wxS("Nested namespace definition") > >() },
    { "n4027", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTomazos CnbspKaeser")) >(), wxS("Type Member Property Queries rev ") > >() },
    { "n4028", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Defining a Portable C ABI") > >() },
    { "n4029", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Let return Be Direct and explicit") > >() },
    { "n4030", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Featuretesting recommendations for C") > >() },
    { "n4031", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("makearray revision ") > >() },
    { "n4032", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("Comments on continuations and executors") > >() },
    { "n4033", RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("synchronizedvalueltTgt for associating a mutex with a value") > >() },
    { "n4034", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Destructive Move") > >() },
    { "n4035", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspGottschling JnbspFalcou HnbspSutter")) >(), wxS("Implicit Evaluation of auto Variables and Arguments") > >() },
    { "n4036", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney TnbspRiegel JnbspPreshing")) >(), wxS("Towards Implementation and Use of memoryorderconsume") > >() },
    { "n4037", RevList< Rev< 0u, Arr64< Hash(wxS("Paul E McKenney")) >(), wxS("NonTransactional Implementation of Atomic Tree Move") > >() },
    { "n4038", RevList< Rev< 0u, Arr64< Hash(wxS("Pete Becker")) >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n4039", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspBerkan CnbspMysen HnbspBoehm")) >(), wxS("Default executor") > >() },
    { "n4040", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Working Draft C Extensions for Concepts") > >() },
    { "n4041", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Concerns with changing existing types in Technical Specifications") > >() },
    { "n4042", RevList< Rev< 0u, Arr64< Hash(wxS("Geoffrey Romer")) >(), wxS("Safe conversions in uniqueptrltTgt") > >() },
    { "n4043", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynarray Allocation Context") > >() },
    { "n4044", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("A ThreeClass IP Address Proposal Revision ") > >() },
    { "n4045", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Library Foundations for Asynchronous Operations Revision ") > >() },
    { "n4046", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Executors and Asynchronous Operations") > >() },
    { "n4047", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis MnbspHall GnbspNishanov")) >(), wxS("A Module System for C") > >() },
    { "n4048", RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J Botet Escribaacute")) >(), wxS("More Improvements to stdfutureltTgt  Revision ") > >() },
    { "n4049", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspGutson AnbspBustamante PnbspOliva MnbspDiaz")) >(), wxS("overheadprinciple violations in exception handling") > >() },
    { "n4050", RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Dynarray SemiEditorial Issues") > >() },
    { "n4051", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Allow typename in a template template parameter") > >() },
    { "n4052", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("WG  Telecon Minutes") > >() },
    { "n4053", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("WG  Rapperswil Minutes") > >() },
    { "n4054", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("PL  Rapperswil Minutes") > >() },
    { "n4055", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Ruminations on nodebased containers and noexcept") > >() },
    { "n4056", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Minimal incomplete type support for standard containers") > >() },
    { "n4057", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspCoe RnbspMill")) >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4058", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Atomic Smart Pointers") > >() },
    { "n4059", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Price")) >(), wxS("Spring  C Standards Committee Meeting") > >() },
    { "n4060", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Changes to vectorexecutionpolicy") > >() },
    { "n4061", RevList< Rev< 0u, Arr64< Hash(wxS("Walter E Brown")) >(), wxS("Greatest Common Divisor and Least Common Multiple v") > >() },
    { "n4063", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("On Parallel Invocations of Functions in Parallelism TS") > >() },
    { "n4064", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Improving pair and tuple revision ") > >() },
    { "n4065", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("makearray revision ") > >() },
    { "n4066", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspSpertus NnbspWilson")) >(), wxS("Delimited iterators Rev ") > >() },
    { "n4067", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kruumlgler")) >(), wxS("Experimental stdfunction etc") > >() },
    { "n4068", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("Toward More Expressive Iterator Tags") > >() },
    { "n4069", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl PnbspSommerlad")) >(), wxS("C Ostream Buffers") > >() },
    { "n4071", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4072", RevList< Rev< 0u, Arr64< Hash(wxS("M Bos")) >(), wxS("Fixed Size Parameter Packs") > >() },
    { "n4073", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspMcLaughlin HnbspSutter JnbspZink")) >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n4074", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Let return expr Be Explicit Revision ") > >() },
    { "n4075", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov AnbspBeels")) >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n4076", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kaminxski")) >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n4077", RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Experimental sharedptr for Library Fundamentals TS") > >() },
    { "n4078", RevList< Rev< 0u, Arr64< Hash(wxS("FnbspCacciola AnbspKrzemienxski VnbspVoutilainen")) >(), wxS("Fixes for optional objects") > >() },
    { "n4079", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Issues Resolved Directly In Rapperswil ") > >() },
    { "n4080", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Immediate Issues for Rapperswil") > >() },
    { "n4081", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Working Draft C Extensions for Library Fundamentals") > >() },
    { "n4082", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Programming Languages mdash C Extensions for Library Fundamentals") > >() },
    { "n4083", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Editors Report for Version  of the Library Fundamentals TS") > >() },
    { "n4084", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4085", RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("Editors Report for Version  of the Library Fundamentals TS") > >() },
    { "n4086", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Removing trigraphs") > >() },
    { "n4087", RevList< Rev< 0u, Arr64< Hash(wxS("xnbspMendakiewicz HnbspSutter")) >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n4088", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspHalpern AnbspRobison AnbspLaksberg HnbspSutter et al")) >(), wxS("Task Region R") > >() },
    { "n4089", RevList< Rev< 0u, Arr64< Hash(wxS("Geoffrey Romer")) >(), wxS("Safe conversions in uniqueptrltTgt revision ") > >() },
    { "n4091", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4092", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4093", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4094", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspHinnant VnbspVoutilainen")) >(), wxS("Response To Let return expr Be Explicit") > >() },
    { "n4095", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4096", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4097", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4098", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Editors Report PostRapperswil") > >() },
    { "n4099", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Working Draft Technical Specification mdash File System") > >() },
    { "n4101", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4102", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4103", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4104", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4106", RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Parallelism TS Editors Report postRapperswil") > >() },
    { "n4107", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n4108", RevList< Rev< 0u, Arr64< Hash(wxS("Artur Laksberg")) >(), wxS("Concurrency TS Editors Report July ") > >() },
    { "n4109", RevList< Rev< 0u, Arr64< Hash(wxS("V nbspEscriba PnbspTalbot")) >(), wxS("A proposal to add a utility class to represent expected monad  Revision ") > >() },
    { "n4110", RevList< Rev< 0u, Arr64< Hash(wxS("J Daniel Garcia")) >(), wxS("Exploring the design space of contract specifications for C") > >() },
    { "n4111", RevList< Rev< 0u, Arr64< Hash(wxS("Matuacutesxc Chochliacutek")) >(), wxS("Static reflection rev ") > >() },
    { "n4112", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System PDTS National Body Comments Record of Response") > >() },
    { "n4113", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTomazos CnbspKaeser")) >(), wxS("Reflection Type Traits For Classes Unions and Enumerations rev ") > >() },
    { "n4114", RevList< Rev< 0u, Arr64< Hash(wxS("Oleg Smolsky")) >(), wxS("Defaulted comparison operators") > >() },
    { "n4115", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspSeymour SnbspLavavej")) >(), wxS("Searching for Types in Parameter Packs") > >() },
    { "n4116", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTomazos RnbspKawulak")) >(), wxS("Nested Namespace Definition rev ") > >() },
    { "n4117", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4118", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4119", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4120", RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Bock")) >(), wxS("Null Coalescing Conditional Operator") > >() },
    { "n4121", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("CompileTime String stdstringliteralltngt") > >() },
    { "n4122", RevList< Rev< 0u, Arr64< Hash(wxS("Steve Clamage")) >(), wxS("agenda") > >() },
    { "n4123", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspLaksberg VnbspEscriba")) >(), wxS("Improvements to the Concurrency Technical Specification") > >() },
    { "n4124", RevList< Rev< 0u, Arr64< Hash(wxS("Bill Seymour")) >(), wxS("Toward More Expressive Iterator Tags") > >() },
    { "n4125", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS(" WGSG Meeting Information") > >() },
    { "n4126", RevList< Rev< 0u, Arr64< Hash(wxS("Oleg Smolsky")) >(), wxS("Explicitly defaulted comparison operators") > >() },
    { "n4127", RevList< Rev< 0u, Arr64< Hash(wxS("Eelis van der Weegen")) >(), wxS("Checkeddereference conditions") > >() },
    { "n4128", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspNiebler SnbspParent AnbspSutton")) >(), wxS("Ranges for the Standard Library Revision ") > >() },
    { "n4129", RevList< Rev< 0u, Arr64< Hash(wxS("Robert Douglas")) >(), wxS("SourceCode Information Capture") > >() },
    { "n4130", RevList< Rev< 0u, Arr64< Hash(wxS("JFnbspBastien OnbspGiroux")) >(), wxS("Pad Thy Atomics") > >() },
    { "n4131", RevList< Rev< 0u, Arr64< Hash(wxS("Filip Roseacuteen")) >(), wxS("explicit should never be implicit") > >() },
    { "n4132", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Contiguous Iterators") > >() },
    { "n4133", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Cleanup for exceptionspecification and throwexpression") > >() },
    { "n4134", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspNishanov JnbspRadigan")) >(), wxS("Resumable Functions v") > >() },
    { "n4135", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspLakos AnbspZakharov AnbspBeels NnbspMyers")) >(), wxS("Language Support for Runtime Contract Validation Revision ") > >() },
    { "n4136", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspBatty PnbspSewell etnbspal")) >(), wxS("C Concurrency Challenges Draft") > >() },
    { "n4137", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4138", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4139", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4140", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4141", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Programming Languages mdash C") > >() },
    { "n4142", RevList< Rev< 0u, Arr64< Hash(wxS("Carter Edwards")) >(), wxS("Atomic Operations on a Very Large Array") > >() },
    { "n4143", RevList< Rev< 0u, Arr64< Hash(wxS("Chris Mysen")) >(), wxS("Executors and schedulers revision ") > >() },
    { "n4144", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspSeymour SnbspLavavej")) >(), wxS("Searching and Manipulation of Parameter Packs") > >() },
    { "n4145", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("DataInvariant Functions") > >() },
    { "n4146", RevList< Rev< 0u, Arr64< Hash(wxS("Barry Hedquist")) >(), wxS("Disposition of Comments ISOIEC DIS  C ") > >() },
    { "n4147", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Inline variables or encapsulated expressions") > >() },
    { "n4148", RevList< Rev< 0u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Disallowing Inaccessible Operators From Trivially Copyable") > >() },
    { "n4149", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Categorically qualified classes") > >() },
    { "n4150", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspFinkel HnbspTong et al")) >(), wxS("AliasSet Attributes Toward restrictlike aliasing semantics for C") > >() },
    { "n4151", RevList< Rev< 0u, Arr64< Hash(wxS("Agustiacuten Bergeacute")) >(), wxS("TriviallyCopyable referencewrapper") > >() },
    { "n4152", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("uncaughtexceptions") > >() },
    { "n4153", RevList< Rev< 0u, Arr64< Hash(wxS("Nico Josuttis")) >(), wxS(" LWG Meeting Invitation and Information") > >() },
    { "n4154", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Operator assert") > >() },
    { "n4155", RevList< Rev< 0u, Arr64< Hash(wxS("Riccardo Marcangelo")) >(), wxS("Nonmember size and more Revision ") > >() },
    { "n4156", RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("LightWeight Execution Agents Revision ") > >() },
    { "n4157", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspRobison JnbspHoberock AnbspLaksberg")) >(), wxS("Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms") > >() },
    { "n4158", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Destructive Move Rev ") > >() },
    { "n4159", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspRomer RnbspPerepelitsa")) >(), wxS("stdfunction and Beyond") > >() },
    { "n4160", RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemienxski")) >(), wxS("Value constraints") > >() },
    { "n4161", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Uniform Container Erasure Revision ") > >() },
    { "n4162", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Atomic Smart Pointers rev ") > >() },
    { "n4163", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n4164", RevList< Rev< 0u, Arr64< Hash(wxS("HnbspSutter BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Forwarding References") > >() },
    { "n4165", RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Unified Call Syntax") > >() },
    { "n4166", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Movable initializer lists") > >() },
    { "n4167", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspMercer AnbspBergeacute HnbspKaiser")) >(), wxS("Transform Reduce an Additional Algorithm for C Extensions for Parallelism") > >() },
    { "n4168", RevList< Rev< 0u, Arr64< Hash(wxS("Billy Baker")) >(), wxS("Removing autoptr") > >() },
    { "n4169", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kaminxski")) >(), wxS("A proposal to add invoke function template Revision ") > >() },
    { "n4170", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kaminxski")) >(), wxS("Extend INVOKE to support types convertible to target class Revision ") > >() },
    { "n4171", RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz Kaminxski")) >(), wxS("Parameter group placeholders for bind") > >() },
    { "n4172", RevList< Rev< 0u, Arr64< Hash(wxS("EnbspAkhgari BnbspBallo")) >(), wxS("Named arguments") > >() },
    { "n4173", RevList< Rev< 0u, Arr64< Hash(wxS("BnbspStroustrup GnbspDosnbspReis")) >(), wxS("Operator Dot") > >() },
    { "n4174", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Call syntax xfy vs fxy") > >() },
    { "n4175", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Default comparisons") > >() },
    { "n4176", RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Thoughts about Comparisons") > >() },
    { "n4177", RevList< Rev< 0u, Arr64< Hash(wxS("xnbspMendakiewicz HnbspSutter")) >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n4178", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Proposed resolution for Core Issue  Qualification conversions and pointers to arrays of pointers") > >() },
    { "n4179", RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Transactional Memory Support for C Wording revision ") > >() },
    { "n4180", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong VnbspLuchangco JnbspMaurer etnbspal")) >(), wxS("SG Transactional Memory Support for C Update") > >() },
    { "n4182", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n4183", RevList< Rev< 0u, Arr64< Hash(wxS("Nevin Liber")) >(), wxS("Contiguous Iterators Pointer Conversion amp Type Trait") > >() },
    { "n4184", RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("SIMD Types The Vector Type amp Operations") > >() },
    { "n4185", RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("SIMD Types The Mask Type amp WriteMasking") > >() },
    { "n4186", RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Supporting Custom Diagnostics and SFINAE") > >() },
    { "n4187", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl PnbspSommerlad")) >(), wxS("C Ostream Buffers") > >() },
    { "n4188", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspDeniau AnbspNaumann")) >(), wxS("Proposal for classes with runtime size") > >() },
    { "n4189", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspSommerlad AnbspSandoval")) >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") > >() },
    { "n4190", RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T Lavavej")) >(), wxS("Removing autoptr randomshuffle And Old ltfunctionalgt Stuff") > >() },
    { "n4191", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspSutton RnbspSmith")) >(), wxS("Folding expressions") > >() },
    { "n4192", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4193", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4194", RevList< Rev< 0u, Arr64< Hash(wxS("William M Miller")) >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4195", RevList< Rev< 0u, Arr64< Hash(wxS("OnbspGiroux CnbspEdwards")) >(), wxS("stdsynchronicltTgt") > >() },
    { "n4196", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Attributes for namespaces and enumerators") > >() },
    { "n4197", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Adding u character literals") > >() },
    { "n4198", RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Allow constant evaluation for all nontype template arguments") > >() },
    { "n4199", RevList< Rev< 0u, Arr64< Hash(wxS("HansJ Boehm")) >(), wxS("Minutes of Sept   SG meeting in Redmond WA") > >() },
    { "n4200", RevList< Rev< 0u, Arr64< Hash(wxS("Clark Nelson")) >(), wxS("Featuretesting recommendations for C") > >() },
    { "n4201", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Fioravante")) >(), wxS("Alignment Helpers for C") > >() },
    { "n4202", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Fioravante")) >(), wxS("Strongly Typed Bitset") > >() },
    { "n4203", RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Fioravante")) >(), wxS("Fast ASCII Character Manipulation") > >() },
    { "n4204", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMackintosh OnbspGiroux")) >(), wxS("C Latches and Barriers") > >() },
    { "n4205", RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Working Draft C Extensions for Concepts") > >() },
    { "n4206", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4207", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4208", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4209", RevList< Rev< 0u, Arr64< Hash(wxS("JnbspCoe RnbspMill")) >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4210", RevList< Rev< 0u, Arr64< Hash(wxS("MnbspWong HnbspTong RnbspBhakta DnbspInglis")) >(), wxS("IBM comment on preparing for a Trigraphadverse future in C") > >() },
    { "n4211", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4212", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4213", RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4214", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis MnbspHall GnbspNishanov")) >(), wxS("A Module System for C Revision ") > >() },
    { "n4215", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney TnbspRiegel JnbspPreshing")) >(), wxS("Towards Implementation and Use of memoryorderconsume") > >() },
    { "n4216", RevList< Rev< 0u, Arr64< Hash(wxS("PnbspMcKenney AnbspJeffrey AnbspSezgin")) >(), wxS("OutofThinAir Execution is Vacuous") > >() },
    { "n4217", RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("stdrand replacement") > >() },
    { "n4218", RevList< Rev< 0u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Variant a typesafe union") > >() },
    { "n4219", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Fixing the specification of universalcharacternames rev ") > >() },
    { "n4220", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("An update to the preprocessor specification rev ") > >() },
    { "n4221", RevList< Rev< 0u, Arr64< Hash(wxS("David Krauss")) >(), wxS("Generalized lifetime extension") > >() },
    { "n4222", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspternbspBorg JnbspPerla")) >(), wxS("Minimal Additions to the Array View Library for Performance and Interoperability") > >() },
    { "n4223", RevList< Rev< 0u, Arr64< Hash(wxS("VnbspVoutilainen MnbspKilpelaumlinen JnbspWakely")) >(), wxS("Response To Let return expr Be Explicit") > >() },
    { "n4224", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMackintosh AnbspBerkan")) >(), wxS("Supplements to C Latches") > >() },
    { "n4225", RevList< Rev< 0u, Arr64< Hash(wxS("Ville Voutilainen")) >(), wxS("Towards uniform handling of subobjects") > >() },
    { "n4226", RevList< Rev< 0u, Arr64< Hash(wxS("DnbspDiaz EnbspBringas DnbspGutson JnbspMaurer")) >(), wxS("Apply the noreturn attribute to main as a hint to eliminate global object destructor calls") > >() },
    { "n4227", RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("Cleaningup noexcept in the Library Rev ") > >() },
    { "n4228", RevList< Rev< 0u, Arr64< Hash(wxS("GnbspDosnbspReis HnbspSutter JnbspCaves")) >(), wxS("Refining Expression Evaluation Order for Idiomatic C") > >() },
    { "n4229", RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos Reis")) >(), wxS("Pointer Ordering") > >() },
    { "n4230", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspKawulak AnbspTomazos")) >(), wxS("Nested namespace definition revision ") > >() },
    { "n4231", RevList< Rev< 0u, Arr64< Hash(wxS("TnbspRiegel CnbspNelson")) >(), wxS("Terms and definitions related to threads") > >() },
    { "n4232", RevList< Rev< 0u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("Stackful Coroutines and Stackless Resumable Functions") > >() },
    { "n4233", RevList< Rev< 0u, Arr64< Hash(wxS("LnbspCrowl CnbspMysen")) >(), wxS("A Class for Status and Optional Value") > >() },
    { "n4234", RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Gutson")) >(), wxS("overheadprinciple violations in exception handling  part ") > >() },
    { "n4235", RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Selecting from Parameter Packs") > >() },
    { "n4236", RevList< Rev< 0u, Arr64< Hash(wxS("Michael Price")) >(), wxS("A compiletime string library template with UDL operator templates") > >() },
    { "n4237", RevList< Rev< 0u, Arr64< Hash(wxS("RnbspGeva CnbspNelson")) >(), wxS("Language Extensions for Vector loop level parallelism") > >() },
    { "n4238", RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("An Abstract Model of Vector Parallelism") > >() },
    { "n4239", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspTomazos MnbspSpertus")) >(), wxS("Defaulted Comparison Using Reflection") > >() },
    { "n4240", RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Koumlppe")) >(), wxS("Improved insertion interface for uniquekey maps Revision ") > >() },
    { "n4241", RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("A proposal to add sharedmutex untimed Revision ") > >() },
    { "n4242", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Executors and Asynchronous Operations Revision ") > >() },
    { "n4243", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library Proposal Revision ") > >() },
    { "n4244", RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Resumable Lambdas A language extension for generators and coroutines") > >() },
    { "n4245", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4246", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4247", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4248", RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Library Preconditions are a Language Feature") > >() },
    { "n4249", RevList< Rev< 0u, Arr64< Hash(wxS("AnbspMeredith JnbspBurley AnbspMartin DnbspChisnall etnbspal")) >(), wxS("Networking Primitives stdexperimentalnetworkhtonl Considered Harmful") > >() },
    { "n4250", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4251", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Urbana Minutes ") > >() },
    { "n4252", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Urbana Minutes ") > >() },
    { "n4253", RevList< Rev< 0u, Arr64< Hash(wxS(" J Lakos A Zakharov A Beels N Myers ")) >(), wxS(" Language Support for Runtime Contract Validation Revision  ") > >() },
    { "n4254", RevList< Rev< 0u, Arr64< Hash(wxS(" Rein Halbersma ")) >(), wxS(" Userdefined Literals for sizet and ptrdifft ") > >() },
    { "n4255", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Proposed resolution for US Allocatoraware regular expressions rev  ") > >() },
    { "n4257", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Nathan Wilson ")) >(), wxS(" Delimited iterators rev  ") > >() },
    { "n4258", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Cleaning up noexcept in the Library Rev  ") > >() },
    { "n4259", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Wording for stduncaughtexceptions ") > >() },
    { "n4260", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Wording for Atomic Smart Pointers ") > >() },
    { "n4261", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed resolution for Core Issue  Qualification conversions and pointers to arrays of pointers ") > >() },
    { "n4262", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Wording for Forwarding References ") > >() },
    { "n4263", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Austern Gabriel Dos Reis Eric Niebler Bjarne Stroustrup Herb Sutter Andrew Sutton Jeffrey Yasskin ")) >(), wxS(" Toward a conceptenabled standard library ") > >() },
    { "n4265", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Transactional Memory Support for C Wording revision  ") > >() },
    { "n4266", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Attributes for namespaces and enumerators ") > >() },
    { "n4267", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Adding u character literals ") > >() },
    { "n4268", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Allow constant evaluation for all nontype template arguments ") > >() },
    { "n4270", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Consolidated Revisions to C Extensions for Library Fundamentals ") > >() },
    { "n4272", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Transactional Memory ") > >() },
    { "n4273", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephan T Lavavej ")) >(), wxS(" Uniform Container Erasure Revision  ") > >() },
    { "n4274", RevList< Rev< 0u, Arr64< Hash(wxS(" Arch D Robison Jared Hoberock Artur Laksberg ")) >(), wxS(" Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms  Proposed Wording Revision  ") > >() },
    { "n4275", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Parallelism PDTS Comment Responses ") > >() },
    { "n4276", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Adding Fused Transform Algorithms to the Parallelism TS ") > >() },
    { "n4277", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" TriviallyCopyable referencewrapper Revision  ") > >() },
    { "n4279", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlpp ")) >(), wxS(" Improved insertion interface for uniquekey maps Revision  ") > >() },
    { "n4280", RevList< Rev< 0u, Arr64< Hash(wxS(" Riccardo Marcangelo ")) >(), wxS(" Nonmember size and more Revison  ") > >() },
    { "n4282", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" A Proposal for the Worlds Dumbest Smart Pointer v ") > >() },
    { "n4284", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Contiguous Iterators ") > >() },
    { "n4285", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Cleanup for exceptionspecification and throwexpression ") > >() },
    { "n4286", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov Jim Radigan ")) >(), wxS(" Resumable Functions revision  ") > >() },
    { "n4287", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Threads Fibers and Couroutines slides deck ") > >() },
    { "n4288", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Strike stringviewclear from Library Fundamentals ") > >() },
    { "n4293", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" C language support for contract programming ") > >() },
    { "n4294", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Arrays of runtime bounds as data members ") > >() },
    { "n4295", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Richard Smith ")) >(), wxS(" Folding Expressions ") > >() },
    { "n4296", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4297", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4298", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Agenda and Meeting Notice for WG Ballot Resolution Telecon Meeting ") > >() },
    { "n4301", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Transactional Memory ") > >() },
    { "n4303", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Hubert Tong ")) >(), wxS(" Pointer Safety and Placement New ") > >() },
    { "n4304", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Active Issues Revision  ") > >() },
    { "n4305", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Defect Reports and Accepted Issues Revision  ") > >() },
    { "n4306", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Closed Issues Revision  ") > >() },
    { "n4307", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comment  ISOIEC PDTS   Technical Specification C Extensions for Library Fundamentals ") > >() },
    { "n4308", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comment  ISOIEC PDTS   Technical Specification C Extensions for Parallelism ") > >() },
    { "n4309", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Price ")) >(), wxS(" Return type deduction for explicitlydefaulted and deleted special member functions ") > >() },
    { "n4310", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism ") > >() },
    { "n4311", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4312", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Programming Languages  Technical Specification for C Extensions for Parallelism ") > >() },
    { "n4313", RevList< Rev< 0u, Arr64< Hash(wxS(" Artur Laksberg ")) >(), wxS(" Improvements to the Concurrency Technical Specification revision  ") > >() },
    { "n4314", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" DataInvariant Functions revision  ") > >() },
    { "n4315", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" makearray revision  ") > >() },
    { "n4316", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" stdrand replacement revision  ") > >() },
    { "n4317", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrick Grace ")) >(), wxS(" New Safer Functions to Advance Iterators ") > >() },
    { "n4318", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Turnbull ")) >(), wxS(" Proposal to add an absolute difference function to the C Standard Library ") > >() },
    { "n4319", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Shuvendu Lahiri Francesco Logozzo Thomas  Ball Jared Parsons ")) >(), wxS(" Contracts for C What are the Choices ") > >() },
    { "n4320", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make exception specifications be part of the type system ") > >() },
    { "n4321", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney ")) >(), wxS(" Towards Implementation and Use of memoryorderconsume ") > >() },
    { "n4322", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney ")) >(), wxS(" LinuxKernel Memory Model ") > >() },
    { "n4323", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney ")) >(), wxS(" OutofThinAir Execution is Vacuous ") > >() },
    { "n4324", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney ")) >(), wxS(" Use Cases for ThreadLocal Storage ") > >() },
    { "n4325", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilanen ")) >(), wxS(" C Standard Evolution Active Issues List Revision R ") > >() },
    { "n4326", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilanen ")) >(), wxS(" C Standard Evolution Completed Issues List Revision R ") > >() },
    { "n4327", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilanen ")) >(), wxS(" C Standard Evolution Closed Issues List Revision R ") > >() },
    { "n4328", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" C Standard Library Issues History for C ") > >() },
    { "n4329", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" C Standard Library Active Issues List Revision R ") > >() },
    { "n4330", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" C Standard Library Defect Report List Revision R ") > >() },
    { "n4331", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" C Standard Library Closed Issues List Revision R ") > >() },
    { "n4332", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking Library Proposal Revision  ") > >() },
    { "n4333", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Concepts Lite ") > >() },
    { "n4334", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Wording for boolconstant ") > >() },
    { "n4335", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals ") > >() },
    { "n4336", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4337", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Editors Report for the Library Fundamentals TS ") > >() },
    { "n4339", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Agenda and Meeting Notice for WG Concepts Meeting ") > >() },
    { "n4340", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Use of the register Keyword ") > >() },
    { "n4346", RevList< Rev< 0u, Arr64< Hash(wxS(" Lukasz Mendakiewicz ")) >(), wxS(" Multidimensional bounds index and arrayview revision  ") > >() },
    { "n4348", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Making stdfunction threadsafe ") > >() },
    { "n4349", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Minutes of WG Telecon ") > >() },
    { "n4350", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Agenda and Meeting Notice for WG Concepts Meeting Notice revision  ") > >() },
    { "n4351", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Responses to National Body Comments PDTS  C Extensions for Parallelism ") > >() },
    { "n4352", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS ") > >() },
    { "n4353", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS  Editors Report ") > >() },
    { "n4354", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS  DTS Ballot  Document ") > >() },
    { "n4355", RevList< Rev< 0u, Arr64< Hash(wxS(" Carter Edwards ")) >(), wxS(" Shared Multidimensional Arrays with Polymorphic Layout ") > >() },
    { "n4356", RevList< Rev< 0u, Arr64< Hash(wxS(" Carter Edwards ")) >(), wxS(" Relaxed Array Type Declarator ") > >() },
    { "n4357", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Introduce the noexit attribute for main as a hint to eliminate destructor calls for objects with static storage duration ") > >() },
    { "n4358", RevList< Rev< 0u, Arr64< Hash(wxS(" Thibaut Le Jehan ")) >(), wxS(" Unary Folds and Empty Parameter Packs ") > >() },
    { "n4359", RevList< Rev< 0u, Arr64< Hash(wxS(" Jerry Liang ")) >(), wxS(" A Proposal to Add vector release method just like uniqueptr release method to the Standard Library ") > >() },
    { "n4360", RevList< Rev< 0u, Arr64< Hash(wxS(" Douglas Boffey ")) >(), wxS(" Delayed Evaluation Parameters ") > >() },
    { "n4361", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Concepts Lite TS ") > >() },
    { "n4362", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG  Skillman Minutes ") > >() },
    { "n4365", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Responses to National Body Comments ISOIEC PDTS  C Extensions for Library Fundamentals ") > >() },
    { "n4366", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" LWG  Missing SFINAE rule in uniqueptr templated assignment ") > >() },
    { "n4367", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Comparison in C ") > >() },
    { "n4368", RevList< Rev< 0u, Arr64< Hash(wxS(" Vladimir Grigoriev ")) >(), wxS(" Introducing alias sizetype for type sizet in class stdbitset ") > >() },
    { "n4369", RevList< Rev< 0u, Arr64< Hash(wxS(" Vladimir Grigoriev ")) >(), wxS(" Default argument for second parameter of stdadvance ") > >() },
    { "n4370", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff  ")) >(), wxS(" Networking Library Proposal Revision  ") > >() },
    { "n4371", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Minimal incomplete type support for standard containers revision  ") > >() },
    { "n4372", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe ")) >(), wxS(" A Proposal to Add a ConstPropagating Wrapper to the Standard Library ") > >() },
    { "n4373", RevList< Rev< 0u, Arr64< Hash(wxS(" Carter Edwards Hans Boehm ")) >(), wxS(" Atomic View ") > >() },
    { "n4374", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" LinuxKernel Memory Mode ") > >() },
    { "n4375", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" OutofThinAir Execution is Vacuous ") > >() },
    { "n4376", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" Use Cases for ThreadLocal Storage ") > >() },
    { "n4377", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" C Extensions for Concepts PDTS ") > >() },
    { "n4378", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Nathan Myers Alexei Zakharov Alexander Beels ")) >(), wxS(" Language Support for Contract Assertions ") > >() },
    { "n4379", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Nathan Myers ")) >(), wxS(" FAQ about a hRefnpdfNa Language Support for Contract Assertions ") > >() },
    { "n4380", RevList< Rev< 0u, Arr64< Hash(wxS(" ADAM David Alan Martin Alisdair Meredith ")) >(), wxS(" Constant View A proposal for a stdasconst helper function template ") > >() },
    { "n4381", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Suggested Design for Customization Points ") > >() },
    { "n4382", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Working Draft C extensions for Ranges ") > >() },
    { "n4383", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Active Issues List Revision R ") > >() },
    { "n4384", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Defect Report List Revision R ") > >() },
    { "n4385", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Closed Issues List Revision R ") > >() },
    { "n4386", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Unspecialized stdtuplesize should be defined ") > >() },
    { "n4387", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Kruumlgler Geoffrey Romer Ville Voutilainen ")) >(), wxS(" Improving pair and tuple revision  ") > >() },
    { "n4388", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe Robert Mill ")) >(), wxS(" A Proposal to Add a ConstPropagating Wrapper to the Standard Library ") > >() },
    { "n4389", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Wording for boolconstant revision  ") > >() },
    { "n4390", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Minimal incomplete type support for standard containers revision  ") > >() },
    { "n4391", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" makearray revision  ") > >() },
    { "n4392", RevList< Rev< 0u, Arr64< Hash(wxS(" Alasdair Mackintosh Olivier Giroux ")) >(), wxS(" C Latches and Barriers ") > >() },
    { "n4393", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Noop Constructors and Destructors ") > >() },
    { "n4394", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Agenda for Lenexa Meeting ") > >() },
    { "n4395", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" SIMD Types ABI Considerations ") > >() },
    { "n4396", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comments PDTS  Transactional Memory ") > >() },
    { "n4397", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Kowalke ")) >(), wxS(" A lowlevel API for stackful coroutines ") > >() },
    { "n4398", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Kowalke ")) >(), wxS(" A unified syntax for stackless and stackful coroutines ") > >() },
    { "n4399", RevList< Rev< 0u, Arr64< Hash(wxS(" Artur Laksberg ")) >(), wxS(" Proposed Working Draft Technical Specification for C Extensions for Concurrency ") > >() },
    { "n4400", RevList< Rev< 0u, Arr64< Hash(wxS(" Artur Laksberg ")) >(), wxS(" Concurrency TS Editors Report May  ") > >() },
    { "n4401", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Price ")) >(), wxS(" Defaulted comparison operator semantics should be uniform ") > >() },
    { "n4404", RevList< Rev< 0u, Arr64< Hash(wxS(" Oleg Smolsky ")) >(), wxS(" Extension to aggregate initialization ") > >() },
    { "n4406", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Oliver Giroux ")) >(), wxS(" Integrating Executors with Parallel Algorithm Execution ") > >() },
    { "n4407", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism ") > >() },
    { "n4408", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4410", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Responses to PDTS comments on Transactional Memory ") > >() },
    { "n4411", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern Arch Robison Hong Hong Artur Laksberg Gor Nishanov Herb Sutter ")) >(), wxS(" Task Block formerly Task Region R ") > >() },
    { "n4412", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Shortcomings of iostreams ") > >() },
    { "n4414", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Mysen ")) >(), wxS(" Executors and Schedulers Revision  ") > >() },
    { "n4415", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis J Daniel Garcia Francesco Logozzo Manuel Fahndrich Shuvendu Lahri ")) >(), wxS(" Simple Contracts for C ") > >() },
    { "n4416", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Dont Move Vector Can Have Your NonMoveable Types Covered ") > >() },
    { "n4417", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" SourceCode Information Capture ") > >() },
    { "n4418", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" Parameter Stringization ") > >() },
    { "n4419", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" Potential extensions to SourceCode Information Capture ") > >() },
    { "n4420", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" Defining Test Code ") > >() },
    { "n4421", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Active Issues List Revision R ") > >() },
    { "n4422", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Completed Issues List Revision R ") > >() },
    { "n4423", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Closed Issues List Revision R ") > >() },
    { "n4424", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel Richard Smith ")) >(), wxS(" Inline Variables ") > >() },
    { "n4425", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" Generalized Dynamic Assumptions ") > >() },
    { "n4426", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Kruumlgler ")) >(), wxS(" Adding nothrow swappable traits ") > >() },
    { "n4427", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Agenda and Meeting Notice for WG PreLenexa Telecon Meeting ") > >() },
    { "n4428", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos Christian Kaeser ")) >(), wxS(" Type Property Queries rev  ") > >() },
    { "n4429", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Core issue   rewording inherited constructors ") > >() },
    { "n4430", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Core issue   replacement of class objects containing reference members ") > >() },
    { "n4431", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4432", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4433", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Price ")) >(), wxS(" Flexible staticassert messages ") > >() },
    { "n4434", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Tweaks to Streamline Concepts Lite Syntax ") > >() },
    { "n4435", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Proposing Contract Attributes ") > >() },
    { "n4436", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Proposing Standard Library Support for the C Detection Idiom ") > >() },
    { "n4437", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Conditionallysupported Special Math Functions v ") > >() },
    { "n4438", RevList< Rev< 0u, Arr64< Hash(wxS(" Brett Hall ")) >(), wxS(" Industrial Experience with Transactional Memory at Wyatt Technologies ") > >() },
    { "n4439", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" LightWeight Execution Agents Revision  ") > >() },
    { "n4440", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") > >() },
    { "n4441", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  and  ") > >() },
    { "n4442", RevList< Rev< 0u, Arr64< Hash(wxS(" Vladimir Grigoriev ")) >(), wxS(" Default argument for second parameter of stdadvance Rev  ") > >() },
    { "n4443", RevList< Rev< 0u, Arr64< Hash(wxS(" Vladimir Grigoriev ")) >(), wxS(" Introducing alias sizetype for type sizet in class stdbitset Rev   ") > >() },
    { "n4444", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" LinuxKernel Memory Model ") > >() },
    { "n4445", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute Hartmut Kaiser ")) >(), wxS(" Overly attached promise ") > >() },
    { "n4446", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" The missing INVOKE related trait ") > >() },
    { "n4447", RevList< Rev< 0u, Arr64< Hash(wxS(" Cleiton Santoia Silva Daniel Auresco ")) >(), wxS(" From a type T gather members name and type information via variadic template expansion ") > >() },
    { "n4448", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Rounding and Overflow in C ") > >() },
    { "n4449", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Message Digest Library for C ") > >() },
    { "n4450", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union v ") > >() },
    { "n4451", RevList< Rev< 0u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek ")) >(), wxS(" Static reflection ") > >() },
    { "n4452", RevList< Rev< 0u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek ")) >(), wxS(" Use cases of reflection ") > >() },
    { "n4453", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Resumable Expressions ") > >() },
    { "n4454", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" SIMD Types Example Matrix Multiplication ") > >() },
    { "n4455", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" No Sane Compiler Would Optimize Atomics ") > >() },
    { "n4456", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Towards improved support for games graphics realtime low latency embedded systems ") > >() },
    { "n4457", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Active Issues Revision  ") > >() },
    { "n4458", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Defect Reports and Accepted Issues Revision  ") > >() },
    { "n4459", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" C Standard Core Language Closed Issues Revision  ") > >() },
    { "n4460", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" LWG  Atomics mutexes and condition variables should not be trivially copyable ") > >() },
    { "n4461", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Static if resurrected ") > >() },
    { "n4462", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" LWG  Towards more perfect forwarding ") > >() },
    { "n4463", RevList< Rev< 0u, Arr64< Hash(wxS(" Cleiton Santoia Silva Daniel Auresco ")) >(), wxS(" IO device requirements for C ") > >() },
    { "n4464", RevList< Rev< 0u, Arr64< Hash(wxS(" Cleiton Santoia Silva ")) >(), wxS(" Picalculus syntax for C executors ") > >() },
    { "n4465", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Mark Hall Gor Nishanov ")) >(), wxS(" A Module System for C Revision  ") > >() },
    { "n4466", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Wording for Modules ") > >() },
    { "n4468", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Jeffrey Mendelsohn Alisdair Meredith Nathan Myers ")) >(), wxS(" On Quantifying MemoryAllocation Strategies ") > >() },
    { "n4469", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton Mike Spertus ")) >(), wxS(" Template Argument Type Deduction ") > >() },
    { "n4470", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Variadic lockguard ") > >() },
    { "n4471", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Template parameter deduction for constructors Rev  ") > >() },
    { "n4472", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" consexpr goto ") > >() },
    { "n4473", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" noexceptauto again ") > >() },
    { "n4474", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Herb Sutter ")) >(), wxS(" Unified Call Syntax xfy and fxy  ") > >() },
    { "n4475", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Default comparisons R ") > >() },
    { "n4476", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Thoughts about Comparisons R ") > >() },
    { "n4477", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot R ") > >() },
    { "n4478", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking Library Proposal Revision  ") > >() },
    { "n4479", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Merge Fundamentals V into v ") > >() },
    { "n4480", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Programming Languages  C Extensions for Library Fundamentals DTS ") > >() },
    { "n4481", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4482", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Some notes on executors and the Networking Library Proposal ") > >() },
    { "n4483", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" Readcopyupdate ") > >() },
    { "n4484", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Active Issues List Revision R ") > >() },
    { "n4485", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Defect Report List Revision R ") > >() },
    { "n4486", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Closed Issues List Revision R ") > >() },
    { "n4487", RevList< Rev< 0u, Arr64< Hash(wxS(" Faisal Vali Ville Voutilainen ")) >(), wxS(" Constexpr lambdas ") > >() },
    { "n4488", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Responses to PDTS comments on Transactional Memory version  ") > >() },
    { "n4489", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4490", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Lenexa Minutes ") > >() },
    { "n4491", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Lenexa Minutes Draft ") > >() },
    { "n4492", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Thoughts about C ") > >() },
    { "n4494", RevList< Rev< 0u, Arr64< Hash(wxS(" Lukasz Mendakiewicz Herb Sutter ")) >(), wxS(" Multidimensional bounds offset and arrayview revision  ") > >() },
    { "n4495", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Gaunard Dietmar Kuumlhl ")) >(), wxS(" Operator dot ") > >() },
    { "n4496", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Urbana Minutes revision  ") > >() },
    { "n4497", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Urbana Minutes Final ") > >() },
    { "n4498", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Variadic lockguard Rev  ") > >() },
    { "n4499", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov Daveed Vandevoorde ")) >(), wxS(" Draft wording for Coroutines Revision  ") > >() },
    { "n4501", RevList< Rev< 0u, Arr64< Hash(wxS(" Artur Laksberg ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Concurrency ") > >() },
    { "n4502", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Proposing Standard Library Support for the C Detection Idiom V ") > >() },
    { "n4505", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism ") > >() },
    { "n4506", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4507", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Technical Specification for C Extensions for Parallelism ") > >() },
    { "n4508", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" A proposal to add sharedmutex untimed Revision  ") > >() },
    { "n4509", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien Jeff Snyder ")) >(), wxS(" constexpr atomicTisalwayslockfree ") > >() },
    { "n4510", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Minimal incomplete type support for standard containers revision  ") > >() },
    { "n4511", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Kruumlgler ")) >(), wxS(" Adding nothrowswappable traits revision  ") > >() },
    { "n4512", RevList< Rev< 0u, Arr64< Hash(wxS(" ukasz Mendakiewicz Herb Sutter ")) >(), wxS(" Multidimensional bounds offset and arrayview revision  ") > >() },
    { "n4513", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Transactional Memory ") > >() },
    { "n4514", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Technical Specification for C Extensions for Transactional Memory ") > >() },
    { "n4515", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Editors Report Technical Specification for C Extensions for Transactional Memory ") > >() },
    { "n4516", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union v ") > >() },
    { "n4517", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Record of Response National Body Comments ISOIEC PDTS  ") > >() },
    { "n4518", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make exception specifications be part of the type system version  ") > >() },
    { "n4519", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" SourceCode Information Capture ") > >() },
    { "n4521", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yaskin ")) >(), wxS(" Merge Fundamentals V into V ") > >() },
    { "n4522", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien ")) >(), wxS(" stdatomicobjectfencemo T ") > >() },
    { "n4523", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien ")) >(), wxS(" constexpr stdthreadhardwaretruefalsesharingsize ") > >() },
    { "n4524", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Respect vectorreserverequest Relative to Reallocation ") > >() },
    { "n4525", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Lenexa ") > >() },
    { "n4526", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Sean Middleditch Nicolas Guillemot ")) >(), wxS(" Towards improved support for games graphics realtime low latency embedded systems ") > >() },
    { "n4527", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4528", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4529", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yaskin ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4530", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yaskin ")) >(), wxS(" Editors Report for the Library Fundamentals TS ") > >() },
    { "n4531", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" stdrand replacement revision  ") > >() },
    { "n4532", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for default comparisons ") > >() },
    { "n4533", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make exception specifications be part of the type system version  ") > >() },
    { "n4534", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" DataInvariant Functions revision  ") > >() },
    { "n4535", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson Richard Smith ")) >(), wxS(" Featuretesting preprocessor predicates for C ") > >() },
    { "n4536", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Moene Niels Dekker ")) >(), wxS(" An algorithm to clamp a value between a pair of boundary values ") > >() },
    { "n4537", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Adding Symmetry Between sharedptr and weakptr ") > >() },
    { "n4539", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Active Issues List Revision R ") > >() },
    { "n4540", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Completed Issues List Revision R ") > >() },
    { "n4541", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution Closed Issues List Revision R ") > >() },
    { "n4542", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union v ") > >() },
    { "n4543", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" A polymorphic wrapper for all Callable objects ") > >() },
    { "n4544", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Plum ")) >(), wxS(" October  WG Meeting Kona ") > >() },
    { "n4545", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Oct  Kona HIUS ") > >() },
    { "n4546", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Agenda and Meeting Notice for WG Concepts Telecon ") > >() },
    { "n4547", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners report ") > >() },
    { "n4548", RevList< Rev< 0u, Arr64< Hash(wxS(" Roger Orr ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4549", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Programming Languages  C Extensions for Concepts ") > >() },
    { "n4550", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Record of Response National Body Comments on ISOIEC PDTS  Technical Specification C Extensions for Concepts ") > >() },
    { "n4551", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comments ISOIEC PDTS  C Extensions for Concurrency ") > >() },
    { "n4552", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" PreKona WG Telecon ") > >() },
    { "n4553", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Working Draft C extensions for Concepts ") > >() },
    { "n4554", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Editors report for the Concepts TS ") > >() },
    { "n4555", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" February  WG Meeting ") > >() },
    { "n4556", RevList< Rev< 0u, Arr64< Hash(wxS(" Marhsall Clow ")) >(), wxS(" WG telecon minutes ") > >() },
    { "n4557", RevList< Rev< 0u, Arr64< Hash(wxS(" Roger Orr ")) >(), wxS(" WG  Telecon revised ") > >() },
    { "n4558", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Kona WG Minutes ") > >() },
    { "n4559", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Kona PL Minutes ") > >() },
    { "n4560", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "n4561", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Ranges Editors Report ") > >() },
    { "n4562", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4563", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Editors Report for the Library Fundamentals TS ") > >() },
    { "n4564", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" C Extensions for Library Fundamentals Version  PDTS ") > >() },
    { "n4566", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4568", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Feb Mar  Jacksonville FLUS ") > >() },
    { "n4569", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Proposed Ranges TS working draft ") > >() },
    { "n4570", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Oulu Meeting Information ") > >() },
    { "n4571", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Issaquah meeting information ") > >() },
    { "n4572", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreJacksonville ") > >() },
    { "n4573", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Plum ")) >(), wxS("  Kona WG Meeting Information ") > >() },
    { "n4575", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS Working Draft ") > >() },
    { "n4576", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS Editors Report ") > >() },
    { "n4578", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4580", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4581", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Revised WG  Telecon Minutes ") > >() },
    { "n4583", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4584", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4585", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Editors Report for the Library Fundamentals TS ") > >() },
    { "n4586", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Jacksonville Min ") > >() },
    { "n4587", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Jacksonville Minutes Draft ") > >() },
    { "n4589", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS Editors Report ") > >() },
    { "n4590", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Jun  Oulu FI ") > >() },
    { "n4591", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreOulu ") > >() },
    { "n4592", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Modules TS Working Draft ") > >() },
    { "n4593", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4595", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4596", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL Jacksonville Minutes revised ") > >() },
    { "n4597", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Oulu Minutes ") > >() },
    { "n4598", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Oulu Minutes ") > >() },
    { "n4599", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS("  LWG Meeting ") > >() },
    { "n4600", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4601", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" Editors Report for the Library Fundamentals TS ") > >() },
    { "n4602", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG telecon minutes  preOulu revised ") > >() },
    { "n4603", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Committee Draft Standard for Programming Language C ") > >() },
    { "n4604", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" C CD Ballot Document ") > >() },
    { "n4607", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Toronto Meeting Information ") > >() },
    { "n4608", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Nov  Issaquah WA US ") > >() },
    { "n4609", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ") > >() },
    { "n4611", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Modules TS ") > >() },
    { "n4613", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4614", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreIssaquah ") > >() },
    { "n4615", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4616", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Response to NB Comments SC N ISOIEC PDTS  Part  Library Fundamentals Part  ") > >() },
    { "n4619", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4620", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "n4621", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Editors Report for the Ranges TS ") > >() },
    { "n4622", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Programming Languages  C Extensions for Ranges PDTS ") > >() },
    { "n4623", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Issaquah Minutes ") > >() },
    { "n4624", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Issaquah Minutes ") > >() },
    { "n4625", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Programming Languages  C Extensions for Networking PDTS ") > >() },
    { "n4627", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4628", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft Technical Specification on C Extensions for Coroutines ") > >() },
    { "n4629", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4630", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Working Draft C extensions for Concepts ") > >() },
    { "n4631", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Editors report for the Concepts TS ") > >() },
    { "n4632", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Feb   Mar  Kona HI US ") > >() },
    { "n4633", RevList< Rev< 0u, Arr64< Hash(wxS(" Carter Edwards ")) >(), wxS("  Albuquerque WG meeting information ") > >() },
    { "n4634", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Issaquah Minutes final ") > >() },
    { "n4635", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" PreKona WG Telecon Agenda ") > >() },
    { "n4638", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Module TS ") > >() },
    { "n4639", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4641", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Working Draft C extensions for Concepts ") > >() },
    { "n4642", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Editors report for the Concepts TS ") > >() },
    { "n4643", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comments for PDTS  C Extensions for Networking ") > >() },
    { "n4644", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comments for PDTS  C Extensions for Ranges ") > >() },
    { "n4645", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG Telecon Minutes ") > >() },
    { "n4648", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Module TS ") > >() },
    { "n4649", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft Technical Specification on C Extensions for Coroutines ") > >() },
    { "n4650", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4651", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "n4652", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Editors Report for the Ranges TS ") > >() },
    { "n4654", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Kona Minutes ") > >() },
    { "n4655", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Kona Minutes ") > >() },
    { "n4657", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4660", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" C DIS Ballot Document ") > >() },
    { "n4661", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4662", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Jul  Toronto ON CA ") > >() },
    { "n4663", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines PDTS document ") > >() },
    { "n4664", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Responses to National Body Comments for ISOIEC CD  ") > >() },
    { "n4665", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreToronto ") > >() },
    { "n4666", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" National Body Comments SC N  ISOIEC PDTS  C Extensions for Coroutines ") > >() },
    { "n4668", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Module TS ") > >() },
    { "n4669", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4671", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "n4672", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Editors Report for the Ranges TS ") > >() },
    { "n4673", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Spring  WG Meeting Information Rapperswil ") > >() },
    { "n4674", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Working Draft C extensions for Concepts ") > >() },
    { "n4675", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Editors report for the Concepts TS ") > >() },
    { "n4676", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG Telecon Minutes ") > >() },
    { "n4677", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" WG  PL Meeting Jacksonville FL March     ") > >() },
    { "n4678", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" National Body Comments for ISOIEC PDTS  C Extensions for Coroutines ") > >() },
    { "n4679", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4680", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Extensions for Coroutines TS Document ") > >() },
    { "n4681", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Working Draft Extensions to C for Modules ") > >() },
    { "n4682", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Module TS ") > >() },
    { "n4683", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ") > >() },
    { "n4684", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges TS Ballot Document ") > >() },
    { "n4685", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "n4686", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Editors Report for the Ranges TS ") > >() },
    { "n4688", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4689", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Extensions to C for Modules Ballot Document ") > >() },
    { "n4690", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy ")) >(), wxS("  Toronto Record of Discussion ") > >() },
    { "n4691", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy ")) >(), wxS(" WG  Toronto Minutes ") > >() },
    { "n4692", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Toronto Minutes ") > >() },
    { "n4693", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" PLWG draft agenda  Nov  Albuquerque NM US ") > >() },
    { "n4694", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Responses to National Body Comments to ISOIEC PDTS  C Extensions for Ranges ") > >() },
    { "n4697", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" NB Comments ISOIEC PDTS  C Extensions for Modules ") > >() },
    { "n4698", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4699", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4701", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Working Draft Standard for Programming Language C ") > >() },
    { "n4704", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreAlbuquerque ") > >() },
    { "n4705", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Telecon Minutes ") > >() },
    { "n4706", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4707", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4708", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Responses to National Body Comments ISOIEC PDTS  C Extensions for Networking ") > >() },
    { "n4709", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Albuquerque Minutes ") > >() },
    { "n4710", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" PL  Albuquerque Minutes ") > >() },
    { "n4711", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Working Draft C  Extensions for Networking ") > >() },
    { "n4712", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4713", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4714", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4715", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS("  San Diego Meeting Information ") > >() },
    { "n4716", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG draft agenda  March  Jacksonville FL US ") > >() },
    { "n4717", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreJacksonville ") > >() },
    { "n4718", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting Modules TS publication ") > >() },
    { "n4719", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Programming Languages  Extensions to C for Modules ") > >() },
    { "n4720", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Working Draft Extensions to C for Modules ") > >() },
    { "n4721", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Editors Report for the Module TS ") > >() },
    { "n4722", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Responses to SC N ISOIEC PDTS  C Extensions for Modules ") > >() },
    { "n4723", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft C Extensions for Coroutines ") > >() },
    { "n4724", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4725", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4726", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report ") > >() },
    { "n4727", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4728", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Dawn Perchik Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4729", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG telecon meeting Modules TS publication ") > >() },
    { "n4730", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG preJacksonville telecon minutes ") > >() },
    { "n4731", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" SC WG Liaison Report C Standard ") > >() },
    { "n4732", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy ")) >(), wxS(" WG  Jacksonville Minutes ") > >() },
    { "n4734", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Working Draft C  Extensions for Networking  ") > >() },
    { "n4735", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4736", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft C  Extensions for Coroutines ") > >() },
    { "n4737", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4738", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" C Standardization Committee Meeting HSR Rapperswil  Latest Info ") > >() },
    { "n4739", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Jacksonville  LEWG Summary ") > >() },
    { "n4740", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" a hRefnhtmlNa Editors Report  Programming Languages  C ") > >() },
    { "n4741", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4742", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4743", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report postJacksonville mailing ") > >() },
    { "n4744", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Programming Languages  Technical Specification for C Extensions for Parallelism Version  ") > >() },
    { "n4745", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG draft agenda  June  Rapperswil Switzerland ") > >() },
    { "n4746", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Working Draft C Extensions for Reflection ") > >() },
    { "n4747", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Reflection TS  Editors Report ") > >() },
    { "n4748", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreRapperswil ") > >() },
    { "n4749", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Dawn Perchik Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4750", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4751", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG preRapperswil telecon minutes ") > >() },
    { "n4752", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Responses to National Body Comments for ISOIEC PDTS  C Extensions for Parallelism Version  ") > >() },
    { "n4753", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Rapperswil Minutes ") > >() },
    { "n4754", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Rapperswil  LEWG Summary ") > >() },
    { "n4755", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft C Extensions for Parallelism Version  ") > >() },
    { "n4756", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report postRapperswil mailing ") > >() },
    { "n4757", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Programming Languages  C Extensions for Parallelism Version  ") > >() },
    { "n4758", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4759", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4760", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft C Extensions for Coroutines ") > >() },
    { "n4761", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4762", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4763", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Collated Responses to National Body Comments PDTS  Parallelism V ") > >() },
    { "n4764", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4765", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona meeting information ") > >() },
    { "n4766", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Working Draft C Extensions for Reflection ") > >() },
    { "n4767", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Reflection TS  Editors Report ") > >() },
    { "n4768", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ISOIEC JTCSCWG C ") > >() },
    { "n4769", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG draft agenda  November  SanDiego USA ") > >() },
    { "n4770", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona meeting information rev  ") > >() },
    { "n4771", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Working Draft C Extensions for Networking ") > >() },
    { "n4772", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Networking TS  Editors Report ") > >() },
    { "n4773", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft C Extensions for Parallelism Version  ") > >() },
    { "n4774", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report preSan Diego mailing ") > >() },
    { "n4775", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft C Extensions for Coroutines ") > >() },
    { "n4776", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Editors report for the Coroutines TS ") > >() },
    { "n4777", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreSan Diego ") > >() },
    { "n4778", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4779", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4780", RevList< Rev< 0u, Arr64< Hash(wxS(" Nico Josuttis ")) >(), wxS("  Cologne Meeting Invitation and Information ") > >() },
    { "n4781", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Rapperswil Minutes ") > >() },
    { "n4782", RevList< Rev< 0u, Arr64< Hash(wxS(" Jamie Allsop ")) >(), wxS(" WG Autumn Meeting  Belfast Northern Ireland ") > >() },
    { "n4783", RevList< Rev< 0u, Arr64< Hash(wxS(" Nico Josuttis ")) >(), wxS("  Cologne Meeting Invitation and Information ") > >() },
    { "n4784", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG preSan Diego telecon minutes ") > >() },
    { "n4785", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" San Diego  LEWG Summary ") > >() },
    { "n4786", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4787", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4790", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  San Diego Minutes ") > >() },
    { "n4791", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4792", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4793", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft C Extensions for Parallelism Version  ") > >() },
    { "n4794", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report postSan Diego mailing ") > >() },
    { "n4795", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG Draft agenda  Febuary  Kona HI USA ") > >() },
    { "n4796", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft C Extensions for Parallelism Version  ") > >() },
    { "n4797", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report preKona mailing ") > >() },
    { "n4798", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreKona ") > >() },
    { "n4799", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4800", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4801", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG preKona telecon minutes ") > >() },
    { "n4802", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  San Diego Minutes ") > >() },
    { "n4803", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Kona  LEWG Summary ") > >() },
    { "n4805", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Kona Minutes of Meeting ") > >() },
    { "n4806", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4807", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4808", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Working Draft C Extensions for Parallelism Version  ") > >() },
    { "n4809", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Parallelism TS Editors Report postKona mailing ") > >() },
    { "n4810", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4811", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4812", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4814", RevList< Rev< 0u, Arr64< Hash(wxS(" Jamie Allsop ")) >(), wxS("  Belfast Meeting Invitation and Information ") > >() },
    { "n4815", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Cologne Agenda ") > >() },
    { "n4816", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreCologne ") > >() },
    { "n4817", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS("  Prague Meeting Invitation and Information ") > >() },
    { "n4818", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Working Draft C Extensions for Reflection ") > >() },
    { "n4819", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Reflection TS  Editors Report ") > >() },
    { "n4820", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4821", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4823", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Cologne  LEWG Summary ") > >() },
    { "n4824", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business plan and conveners report ") > >() },
    { "n4825", RevList< Rev< 0u, Arr64< Hash(wxS(" Vassil Vassilev Mark Zeren Vassil Keremidchiev Anton Stoyanov ")) >(), wxS("  Varna Meeting Information ") > >() },
    { "n4826", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Cologne Minutes of Meeting ") > >() },
    { "n4829", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4830", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Committee Draft Standard for Programming Language C ") > >() },
    { "n4831", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS("  Portland Meeting Invitation and Information ") > >() },
    { "n4832", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona meeting information ") > >() },
    { "n4833", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Agenda for Belfast ") > >() },
    { "n4834", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PreBelfast ") > >() },
    { "n4835", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4836", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4837", RevList< Rev< 0u, Arr64< Hash(wxS(" Vassil Vassilev ")) >(), wxS("  Varna Meeting Information ") > >() },
    { "n4838", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" PreBelfast Minutes of Meeting ") > >() },
    { "n4839", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Belfast Minutes of Meeting ") > >() },
    { "n4840", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4841", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4842", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4843", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik  ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4844", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Collated CD  Comments ") > >() },
    { "n4845", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Belfast  LEWG Summary ") > >() },
    { "n4846", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Agenda  Prague February  ") > >() },
    { "n4847", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG telecon meeting PrePrague ") > >() },
    { "n4848", RevList< Rev< 0u, Arr64< Hash(wxS(" Kevin Fleming ")) >(), wxS(" WG Autumn Meeting   New York New York USA ") > >() },
    { "n4849", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4850", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4851", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" PrePrague Telco Minutes of Meeting ") > >() },
    { "n4852", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Prague LEWG Summary ") > >() },
    { "n4853", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4854", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4855", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Prague Minutes of Meeting ") > >() },
    { "n4856", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" C Extensions for Reflection ") > >() },
    { "n4857", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Reflection TS  Responses ") > >() },
    { "n4858", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Disposition of Comments SC  ISOIEC  CD  ") > >() },
    { "n4859", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik  ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4860", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Draft International Standard  Programming Languages  C ") > >() },
    { "n4861", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik  ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4862", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ") > >() },
    { "n4863", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Agenda for Fall Virtual WGPL Meeting ") > >() },
    { "n4864", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG virtual meeting Autumn  ") > >() },
    { "n4865", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" Response to Editorial Comments ISOIEC DIS  Programming Language C ") > >() },
    { "n4866", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meeting PreAutumn  ") > >() },
    { "n4867", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Thomas Koeppe Jens Maurer Dawn Perchik  ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4868", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4869", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG PreAutumn  telecon minutes ") > >() },
    { "n4870", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Prague Minutes of Meeting ") > >() },
    { "n4871", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG PreAutumn  telecon minutes ") > >() },
    { "n4873", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4874", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4875", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meeting Winter  ") > >() },
    { "n4876", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG virtual meeting Winter  ") > >() },
    { "n4877", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4878", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4879", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe Jens Maurer Dawn Perchik Richard Smith ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4880", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG agenda  February  Virtual Meeting ") > >() },
    { "n4881", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG virtual meetings   and  ") > >() },
    { "n4882", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meetings   and  ") > >() },
    { "n4883", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG February  admin telecon minutes ") > >() },
    { "n4884", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4885", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4886", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4887", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG agenda  June  Virtual Meeting ") > >() },
    { "n4888", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG virtual meetings  and  ") > >() },
    { "n4889", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meeting  ") > >() },
    { "n4890", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4891", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4892", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4893", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4894", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ") > >() },
    { "n4895", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Working Draft Extensions to C for Concurrency Version  ") > >() },
    { "n4896", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG agenda  October  Virtual Meeting ") > >() },
    { "n4897", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG admin telecon meeting September  ") > >() },
    { "n4898", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4899", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meetings  ") > >() },
    { "n4900", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG virtual plenary meetings  ") > >() },
    { "n4901", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4902", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4903", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG agenda  February  Virtual Meeting ") > >() },
    { "n4904", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" WG admin telecon meetings  summer and autumn revision  ") > >() },
    { "n4905", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4906", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Transactional Memory TS ") > >() },
    { "n4907", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4908", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4909", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4910", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4911", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4912", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona hybrid meeting information ") > >() },
    { "n4913", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" PLWG agenda  July  Virtual Meeting ") > >() },
    { "n4914", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4915", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ISOIEC JTCSCWG C ") > >() },
    { "n4916", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Minutes of Meeting ") > >() },
    { "n4917", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4918", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4919", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Programming Languages  C ") > >() },
    { "n4920", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4921", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4922", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" INCITS CWG agenda  November  Kona HI US ") > >() },
    { "n4923", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Working Draft Extensions to C for Transactional Memory Version  ") > >() },
    { "n4924", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4925", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Issaquah meeting information ") > >() },
    { "n4926", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4927", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4928", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4929", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4933", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG November  Kona Minutes of Meeting ") > >() },
    { "n4934", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings ") > >() },
    { "n4935", RevList< Rev< 0u, Arr64< Hash(wxS(" Vassil Vassilev Mark Zeren Vassil Keremidchiev Stanimir Lukanov ")) >(), wxS("  Varna Meeting Invitation and Information ") > >() },
    { "n4936", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona meeting information ") > >() },
    { "n4937", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Programming Languages  C Extensions for Library Fundamentals Version  ") > >() },
    { "n4938", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4939", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4940", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Kona Minutes of Meeting V ") > >() },
    { "n4941", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" INCITS CWG Agenda  February  Issaquah WA USA ") > >() },
    { "n4942", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4943", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG February  Issaquah Minutes of Meeting ") > >() },
    { "n4944", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4945", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4946", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS("  Tokyo meeting information ") > >() },
    { "n4947", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" INCITS CWG agenda  June  Varna Bulgaria ") > >() },
    { "n4948", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft C Extensions for Library Fundamentals Version  ") > >() },
    { "n4949", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report C Extensions for Library Fundamentals Version  ") > >() },
    { "n4950", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Standard for Programming Language C ") > >() },
    { "n4951", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report  Programming Languages  C ") > >() },
    { "n4953", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Concurrency TS ") > >() },
    { "n4954", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings rev  ") > >() },
    { "n4955", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4956", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Concurrency TS PDTS ") > >() },
    { "n4957", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG June  Varna Minutes of Meeting ") > >() },
    { "n4958", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4959", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4960", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ISOIEC JTCSCWG C ") > >() },
    { "n4961", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS("  Tokyo meeting information ") > >() },
    { "n4962", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  November  Kona HI ") > >() },
    { "n4963", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings rev  ") > >() },
    { "n4964", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4965", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4966", RevList< Rev< 0u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" St Louis Meeting Invitation and Information ") > >() },
    { "n4967", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4970", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Kona Minutes of Meeting ") > >() },
    { "n4971", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4972", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4974", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Wroclaw meeting information ") > >() },
    { "n4975", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings ") > >() },
    { "n4976", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  March  Tokyo Japan ") > >() },
    { "n4977", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Kona meeting information ") > >() },
    { "n4978", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Admin telecon minutes ") > >() },
    { "n4979", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Kulczycki Michael Hava ")) >(), wxS(" Hagenberg Meeting Invitation and Information ") > >() },
    { "n4980", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Tokyo Minutes of Meeting ") > >() },
    { "n4981", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4982", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4983", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  June  St Louis MO USA ") > >() },
    { "n4984", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG June  Admin Minutes of Meeting ") > >() },
    { "n4985", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  St Louis Minutes of Meeting ") > >() },
    { "n4986", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4987", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4988", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4989", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4990", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Business Plan and Conveners Report ") > >() },
    { "n4991", RevList< Rev< 0u, Arr64< Hash(wxS(" Vassil Vassilev Vassil Keremidchiev Maya Traykova ")) >(), wxS("  Sofia Meeting Invitation and Information ") > >() },
    { "n4993", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n4994", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n4995", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  November  Wroclaw Poland ") > >() },
    { "n4997", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Hava ")) >(), wxS(" Hagenberg Meeting Invitation and Information ") > >() },
    { "n4998", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Wroclaw Admin telecon minutes ") > >() },
    { "n4999", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  February  Hagenberg Austria ") > >() },
    { "n5000", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG November  Hybrid meeting Minutes of Meeting ") > >() },
    { "n5001", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n5002", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n5003", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings ") > >() },
    { "n5004", RevList< Rev< 0u, Arr64< Hash(wxS(" Vassil Vassilev Vassil Keremidchiev Maya Traykova ")) >(), wxS("  Sofia Meeting Invitation and Information ") > >() },
    { "n5005", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Hagenberg Admin telecon minutes ") > >() },
    { "n5006", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  WG admin telecon meetings revised  ") > >() },
    { "n5007", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Hagenberg Minutes of Meeting ") > >() },
    { "n5008", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Working Draft Programming Languages  C ") > >() },
    { "n5009", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Editors Report Programming Languages  C ") > >() },
    { "n5010", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" WG agenda  June  Sofia Bulgaria ") > >() },
    { "p0001r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Register Keyword ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Register Keyword ") > >() },
    { "p0002r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Operator for bool ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Operator for bool ") > >() },
    { "p0003r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Dynamic Exception Specifications ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Exception Specifications from C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Dynamic Exception Specifications from C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Exception Specifications from C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Exception Specifications from C ") >, Rev< 5u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Exception Specifications from C ") > >() },
    { "p0004r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Aliases in iostreams ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Removing Deprecated Aliases in iostreams ") > >() },
    { "p0005r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Adopt notfn from Library Fundamentals  for C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kaminxski ")) >(), wxS(" Adopt notfn from Library Fundamentals  for C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kaminxski ")) >(), wxS(" Adopt notfn from Library Fundamentals  for C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej  Tomasz Kaminxski ")) >(), wxS(" Adopt notfn from Library Fundamentals  for C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Adopt notfn from Library Fundamentals  for C ") > >() },
    { "p0006r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Adopt Type Traits Variable Templates from Library Fundamentals TS for C ") > >() },
    { "p0007r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Constant View A proposal for a stdasconst helper function template ") >, Rev< 1u, Arr64< Hash(wxS(" ADAM David Alan Martin Alisdair Meredith ")) >(), wxS(" Constant View A proposal for a stdasconst helper function template ") > >() },
    { "p0008r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Mysen ")) >(), wxS(" C Executors ") > >() },
    { "p0009r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Christian Trott Juan Alday Jesse Perla Mauro Bianco Robin Maffeo Ben Sander Bryce Lelbach ")) >(), wxS(" Polymorphic Multidimensional Array View ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Christian Trott Juan Alday Jesse Perla Mauro Bianco Robin Maffeo Ben Sander Bryce Lelbach ")) >(), wxS(" Polymorphic Multidimensional Array View ") >, Rev< 10u, Arr64< Hash(wxS(" Christian Trott Bryce Adelstein Lelbach Daniel Sunderland David Hollman H Carter Edwards Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Mark Hoemmen ")) >(), wxS(" mdspan ") >, Rev< 11u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 12u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 13u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 14u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 15u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 16u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 17u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 18u, Arr64< Hash(wxS(" Christian Trott DS Hollman Damien LebrunGrandie Mark Hoemmen Daniel Sunderland H Carter Edwards Bryce Adelstein Lelbach Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Nevin Liber ")) >(), wxS(" MDSPAN ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Robin Maffeo Ben Sander ")) >(), wxS(" Polymorphic Multidimensional Array View ") >, Rev< 3u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Robin Maffeo Ben Sander ")) >(), wxS(" Polymorphic Multidimensional Array View ") >, Rev< 4u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Robin Maffeo Ben Sander Athanasios Iliopoulos John Michopoulos ")) >(), wxS(" Polymorphic Multidimensional Array Reference ") >, Rev< 5u, Arr64< Hash(wxS(" H Carter Edwards Daniel Sunderland David Hollman Christian Trott Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos ")) >(), wxS(" Polymorphic Multidimensional Array Reference ") >, Rev< 6u, Arr64< Hash(wxS(" H Carter Edwards Bryce Adelstein Lelbach Daniel Sunderland David Hollman Christian Trott Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Daniel Sunderland ")) >(), wxS(" mdspan A NonOwning Multidimensional Array Reference ") >, Rev< 7u, Arr64< Hash(wxS(" H Carter Edwards Bryce Adelstein Lelbach Daniel Sunderland David Hollman Christian Trott Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Mark Hoemmen ")) >(), wxS(" mdspan A NonOwning Multidimensional Array Reference ") >, Rev< 8u, Arr64< Hash(wxS(" H Carter Edwards Bryce Adelstein Lelbach Daniel Sunderland David Hollman Christian Trott Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Mark Hoemmen ")) >(), wxS(" mdspan A NonOwning Multidimensional Array Reference ") >, Rev< 9u, Arr64< Hash(wxS(" H Carter Edwards Bryce Adelstein Lelbach Daniel Sunderland David Hollman Christian Trott Mauro Bianco Ben Sander Athanasios Iliopoulos John Michopoulos Mark Hoemmen ")) >(), wxS(" mdspan A NonOwning Multidimensional Array Reference ") > >() },
    { "p0011r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jamie Alsop Nicolai Josuttis ")) >(), wxS(" Additions to Filesystem supporting Relative Paths ") > >() },
    { "p0012r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make exception specifications be part of the type system version  ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make exception specifications be part of the type system version  ") > >() },
    { "p0013r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Logical Operator Type Traits ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Logical Operator Type Traits revison  ") > >() },
    { "p0015r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" A specializationfriendly stdcommontype ") > >() },
    { "p0017r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oleg Smolsky ")) >(), wxS(" Extension to aggregate initialization ") >, Rev< 1u, Arr64< Hash(wxS(" Oleg Smolsky ")) >(), wxS(" Extension to aggregate initialization ") > >() },
    { "p0018r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Christian Trott Hal Finkel Jim Reus Robin Maffeo Ben Sander ")) >(), wxS(" Lambda Capture of this by Value ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Christian Trott Hal Finkel Jim Reus Robin Maffeo Ben Sander ")) >(), wxS(" Lambda Capture of this by Value ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Daveed Vandevoorde Christian Trott Hal Finkel Jim Reus Robin Maffeo Ben Sander ")) >(), wxS(" Lambda Capture of this by Value ") >, Rev< 3u, Arr64< Hash(wxS(" H Carter Edwards Daveed Vandevoorde Christian Trott Hal Finkel Jim Reus Robin Maffeo Ben Sander ")) >(), wxS(" Lambda Capture of this by Value as this ") > >() },
    { "p0019r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 3u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 4u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 5u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 6u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux James Reus ")) >(), wxS(" Atomic View ") >, Rev< 7u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux Daniel Sunderland Mark Hoemmen David Hollman Bryce Adelstein Lelbach Jens Maurer ")) >(), wxS(" Atomic Ref ") >, Rev< 8u, Arr64< Hash(wxS(" Daniel Sunderland H Carter Edwards Hans Boehm Olivier Giroux Mark Hoemmen David Hollman Bryce Adelstein Lelbach Jens Maurer ")) >(), wxS(" Atomic Ref ") > >() },
    { "p0020r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic View ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic ") >, Rev< 3u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic View ") >, Rev< 4u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic ") >, Rev< 5u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic ") >, Rev< 6u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic ") > >() },
    { "p0021r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Working Draft C Extensions for Ranges ") > >() },
    { "p0022r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Proxy Iterators for the Ranges Extensions ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Proxy Iterators for the Ranges Extensions ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Proxy Iterators for the Ranges Extensions ") > >() },
    { "p0023r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Denis Bider ")) >(), wxS(" Relocator Efficiently moving objects ") > >() },
    { "p0024r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" The Parallelism TS Should be Standardized ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" The Parallelism TS Should be Standardized ") >, Rev< 2u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" The Parallelism TS Should be Standardized ") > >() },
    { "p0025r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Moene Niels Dekker ")) >(), wxS(" An algorithm to clamp a value between a pair of boundary values ") >, Rev< 1u, Arr64< Hash(wxS(" Martin Moene Niels Dekker ")) >(), wxS(" An algorithm to clamp a value between a pair of boundary values ") > >() },
    { "p0026r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew McAtamneyGreenwood ")) >(), wxS(" multirangebased for loops ") > >() },
    { "p0027r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Troy Korjuslommi ")) >(), wxS(" Named Types ") > >() },
    { "p0028r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia Luis M Sanchez Massimo Torquati Marco Danelutto  Peter Sommerlad ")) >(), wxS(" Using nonstandard attributes ") >, Rev< 1u, Arr64< Hash(wxS(" J Daniel Garcia Luis M Sanchez Massimo Torquati Marco Danelutto  Peter Sommerlad ")) >(), wxS(" Using nonstandard attributes ") >, Rev< 2u, Arr64< Hash(wxS(" J Daniel Garcia Luis M Sanchez Massimo Torquati Marco Danelutto  Peter Sommerlad ")) >(), wxS(" Using nonstandard attributes ") >, Rev< 3u, Arr64< Hash(wxS(" J Daniel Garcia Daveed Vandevoorde ")) >(), wxS(" Using nonstandard attributes ") >, Rev< 4u, Arr64< Hash(wxS(" J Daniel Garcia Daveed Vandevoorde ")) >(), wxS(" Using attribute namespaces without repetition ") > >() },
    { "p0029r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoff Romer Chandler Carruth ")) >(), wxS(" A Unified Proposal for Composable Hashing ") > >() },
    { "p0030r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Benson Ma ")) >(), wxS(" Proposal to Introduce a Argument Overload to stdhypot ") >, Rev< 1u, Arr64< Hash(wxS(" Benson Ma ")) >(), wxS(" Proposal to Introduce a Argument Overload to stdhypot ") > >() },
    { "p0031r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin  ")) >(), wxS(" A Proposal to Add Constexpr Modifiers to reverseiterator moveiterator array and Range Access ") > >() },
    { "p0032r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Homogeneous interface for variantTs any and optionalT ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Homogeneous interface for variantTs any and optionalT Revision  ") > >() },
    { "p0033r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely Peter Dimov ")) >(), wxS(" Reenabling sharedfromthis ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely Peter Dimov ")) >(), wxS(" Reenabling sharedfromthis revision  ") > >() },
    { "p0034r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" Civil Time for the Standard Library ") > >() },
    { "p0035r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Dynamic memory allocation for overaligned data ") >, Rev< 1u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Dynamic memory allocation for overaligned data ") >, Rev< 2u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Dynamic memory allocation for overaligned data ") >, Rev< 3u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Dynamic memory allocation for overaligned data ") >, Rev< 4u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Dynamic memory allocation for overaligned data ") > >() },
    { "p0036r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thibaut Le Jehan ")) >(), wxS(" Unary Folds and Empty Parameter Packs Revision  ") > >() },
    { "p0037r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fixed point real numbers ") >, Rev< 1u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fixed point real numbers ") >, Rev< 2u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fixedpoint real numbers ") >, Rev< 3u, Arr64< Hash(wxS(" John McFarlane Michael Wong ")) >(), wxS(" Fixedpoint real numbers ") >, Rev< 4u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fixedpoint real numbers ") >, Rev< 5u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" FixedPoint Real Numbers ") >, Rev< 6u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" FixedPoint Real Numbers ") >, Rev< 7u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" FixedPoint Real Numbers ") > >() },
    { "p0038r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sean Middleditch ")) >(), wxS(" Flat Containers ") > >() },
    { "p0039r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Extending rawstorageiterator ") > >() },
    { "p0040r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Extending memory management tools ") >, Rev< 1u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Extending memory management tools ") >, Rev< 2u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Extending memory management tools ") >, Rev< 3u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Extending memory management tools ") > >() },
    { "p0041r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brent Friedman ")) >(), wxS(" Unstable remove algorithms ") > >() },
    { "p0042r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" stdrecover undoing type erasure ") > >() },
    { "p0043r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" Function wrappers with allocators and noexcept ") > >() },
    { "p0044r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" unwindingstate safe exception relativity ") > >() },
    { "p0045r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" Overloaded and qualified stdfunction ") >, Rev< 1u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" Qualified stdfunction signatures ") > >() },
    { "p0046r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Change istransparent to metafunction ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Change istransparent to metafunction ") > >() },
    { "p0047r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0048r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Games DevLow LatencyFinancial TradingBanking Meeting Minutes  ") > >() },
    { "p0050r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic match function ") > >() },
    { "p0051r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic overload function ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic overload function Revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic overload function ") >, Rev< 3u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" C generic overload function ") > >() },
    { "p0052r0", RevList< Rev< 10u, Arr64< Hash(wxS(" Peter Sommerlad Andrew L Sandoval ")) >(), wxS(" Generic Scope Guard and RAII Wrapper for the Standard Library ") >, Rev< 6u, Arr64< Hash(wxS(" Peter Sommerlad Andrew L Sandoval ")) >(), wxS(" Generic Scope Guard and RAII Wrapper for the Standard Library ") >, Rev< 7u, Arr64< Hash(wxS(" Peter Sommerlad Andrew L Sandoval ")) >(), wxS(" Generic Scope Guard and RAII Wrapper for the Standard Library ") >, Rev< 8u, Arr64< Hash(wxS(" Peter Sommerlad Andrew L Sandoval ")) >(), wxS(" Generic Scope Guard and RAII Wrapper for the Standard Library ") >, Rev< 9u, Arr64< Hash(wxS(" Peter Sommerlad Andrew L Sandoval ")) >(), wxS(" Generic Scope Guard and RAII Wrapper for the Standard Library ") > >() },
    { "p0053r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad ")) >(), wxS(" C Synchronized Buffered Ostream ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolia Josuttis ")) >(), wxS(" C Synchronized Buffered Ostream ") >, Rev< 2u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolia Josuttis ")) >(), wxS(" C Synchronized Buffered Ostream ") >, Rev< 3u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolia Josuttis ")) >(), wxS(" DRAFT C Synchronized Buffered Ostream ") >, Rev< 4u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolai Josuttis ")) >(), wxS(" DRAFT C Synchronized Buffered Ostream ") >, Rev< 5u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolai Josuttis Pablo Halpern ")) >(), wxS(" C Synchronized Buffered Ostream ") >, Rev< 6u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolai Josuttis Pablo Halpern ")) >(), wxS(" C Synchronized Buffered Ostream ") >, Rev< 7u, Arr64< Hash(wxS(" Lawrence Crowl Peter Sommerlad Nicolai Josuttis Pablo Halpern ")) >(), wxS(" C Synchronized Buffered Ostream ") > >() },
    { "p0054r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines reports from the fields ") > >() },
    { "p0055r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" On Interactions Between Coroutines and Networking Library ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" On Interactions Between Coroutines and Networking Library ") > >() },
    { "p0056r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Soft Keywords ") > >() },
    { "p0057r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines Revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 2u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 3u, Arr64< Hash(wxS(" Gor Nishanov Jens Maurer Richard Smith Daveed Vandevoorde ")) >(), wxS(" Wording for Coroutines ") >, Rev< 4u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 5u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 6u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 7u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Wording for Coroutines ") >, Rev< 8u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Working Draft C Extensions for Coroutines ") > >() },
    { "p0058r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Olivier Girioux ")) >(), wxS(" An Interface for Abstracting Execution ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Olivier Girioux ")) >(), wxS(" An Interface for Abstracting Execution ") > >() },
    { "p0059r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Add rings to the Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Guy Davidson Arthur ODwyer ")) >(), wxS(" Add rings to the Standard Library ") >, Rev< 2u, Arr64< Hash(wxS(" Guy Davidson Arthur ODwyer Joe BestRotheray ")) >(), wxS(" Add rings to the Standard Library ") >, Rev< 3u, Arr64< Hash(wxS(" Guy Davidson Arthur ODwyer ")) >(), wxS(" A proposal to add a ring span to the standard library ") >, Rev< 4u, Arr64< Hash(wxS(" Guy Davidson Arthur ODwyer ")) >(), wxS(" A proposal to add a ring span to the standard library ") > >() },
    { "p0060r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Gaunard Dietmar Kuumlhl ")) >(), wxS(" Function ObjectBased Overloading of Operator Dot ") > >() },
    { "p0061r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting preprocessor predicates for C ") >, Rev< 1u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" hasinclude for C ") > >() },
    { "p0062r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm JF Bastien Peter Dimov Hal Finkel Paul McKenney Michael Wong Jeffrey Yasskin ")) >(), wxS(" When should compilers optimize atomics ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Peter Dimov Hal Finkel Paul McKenney Michael Wong Jeffrey Yasskin ")) >(), wxS(" When should compilers optimize atomics ") > >() },
    { "p0063r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm Clark Nelson ")) >(), wxS(" C should refer to C instead of C ") >, Rev< 1u, Arr64< Hash(wxS(" Clark Nelson Hans Boehm ")) >(), wxS(" C should refer to C instead of C ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" C should refer to C instead of C ") >, Rev< 3u, Arr64< Hash(wxS(" Clark Nelson Hans Boehm ")) >(), wxS(" C should refer to C instead of C ") > >() },
    { "p0065r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" Movable initializer lists rev  ") > >() },
    { "p0066r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" Accessors and views with lifetime extension ") > >() },
    { "p0067r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions revision  ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions revision  ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions revision  ") >, Rev< 5u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Elementary string conversions revision  ") > >() },
    { "p0068r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of unused nodiscard and fallthrough attributes ") > >() },
    { "p0069r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Sander Greg Stoner Siuchi Chan WenHeng Jack Chung ")) >(), wxS(" A C Compiler for Heterogeneous Computing ") > >() },
    { "p0070r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines Return Before Await ") > >() },
    { "p0071r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines Keyword alternatives ") > >() },
    { "p0072r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" LightWeight Execution Agents ") >, Rev< 1u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" LightWeight Execution Agents ") > >() },
    { "p0074r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Making stdownerless more flexible ") > >() },
    { "p0075r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson ")) >(), wxS(" Template Library for IndexBased Loops ") >, Rev< 1u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson ")) >(), wxS(" Template Library for IndexBased Loops ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern Clark Nelson Arch D Robison Robert Geva ")) >(), wxS(" Template Library for Parallel For Loops ") > >() },
    { "p0076r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson ")) >(), wxS(" Vector and Wavefront Policies ") >, Rev< 1u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson Jens Maurer ")) >(), wxS(" Vector and Wavefront Policies ") >, Rev< 2u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson Jens Maurer ")) >(), wxS(" Vector and Wavefront Policies ") >, Rev< 3u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson Jens Maurer ")) >(), wxS(" Vector and Wavefront Policies ") >, Rev< 4u, Arr64< Hash(wxS(" Arch Robison Pablo Halpern Robert Geva Clark Nelson Jens Maurer ")) >(), wxS(" Vector and Wavefront Policies ") > >() },
    { "p0077r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" iscallable the missing INVOKE related trait ") >, Rev< 1u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" iscallable the missing INVOKE related trai ") >, Rev< 2u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" iscallable the missing INVOKE related trai ") > >() },
    { "p0078r0", RevList< Rev< 0u, Arr64< Hash(wxS(" KarlEacutetienne Perron ")) >(), wxS(" The pure attribute ") > >() },
    { "p0079r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Roger Orr ")) >(), wxS(" Extension methods in C ") > >() },
    { "p0080r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Variant Discriminated Union with Value Semantics ") > >() },
    { "p0081r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul Dreik ")) >(), wxS(" A proposal to add sincos to the standard library ") > >() },
    { "p0082r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" For Loop Exit Strategies Revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" For Loop Exit Strategies Revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" For Loop Exit Strategies Revision  ") > >() },
    { "p0083r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Splicing Maps and Sets Revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot Jonathan Wakely Howard Hinnant James Dennett ")) >(), wxS(" Splicing Maps and Sets Revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot Jonathan Wakely Howard Hinnant James Dennett ")) >(), wxS(" Splicing Maps and Sets Revision  ") >, Rev< 3u, Arr64< Hash(wxS(" Alan Talbot Jonathan Wakely Howard Hinnant James Dennett ")) >(), wxS(" Splicing Maps and Sets Revision  ") > >() },
    { "p0084r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Emplace Return Type ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Emplace Return Type Revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Emplace Return Type Revision  ") > >() },
    { "p0085r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Jonker Axel Naumann ")) >(), wxS(" Oo adding a coherent character sequence to begin octalliterals ") >, Rev< 1u, Arr64< Hash(wxS(" Axel Naumann Jolly Chen Michael Jonker ")) >(), wxS(" Oo adding a coherent character sequence to begin octalliterals ") > >() },
    { "p0086r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant design review ") > >() },
    { "p0087r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union without undefined behavior v ") > >() },
    { "p0088r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union that is rarely invalid v ") >, Rev< 1u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union that is rarely invalid v ") >, Rev< 2u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union for C v ") >, Rev< 3u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Variant a typesafe union for C v ") > >() },
    { "p0089r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Jeffrey Mendelsohn Alisdair Meredith Nathan Myers ")) >(), wxS(" Quantifying MemoryAllocatiom Strategies ") >, Rev< 1u, Arr64< Hash(wxS(" John Lakos Jeffrey Mendelsohn Alisdair Meredith Nathan Myers ")) >(), wxS(" Quantifying MemoryAllocation Strategies ") > >() },
    { "p0090r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephan T Lavavej  ")) >(), wxS(" Removing resulttype etc ") > >() },
    { "p0091r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Richard Smith ")) >(), wxS(" Template parameter deduction for constructors Rev  ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Faisal Vali Richard Smith ")) >(), wxS(" Template parameter deduction for constructors Rev  ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus Faisal Vali Richard Smith ")) >(), wxS(" Template argument deduction for class templates Rev  ") >, Rev< 3u, Arr64< Hash(wxS(" Mike Spertus Faisal Vali Richard Smith ")) >(), wxS(" Template argument deduction for class templates Rev  ") >, Rev< 4u, Arr64< Hash(wxS(" Mike Spertus Faisal Vali Richard Smith ")) >(), wxS(" Template argument deduction for class templates Rev  ") > >() },
    { "p0092r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Polishing ltchronogt ") >, Rev< 1u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Polishing chrono ") > >() },
    { "p0093r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Simply a strong variant ") > >() },
    { "p0094r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Simply a basic variant ") > >() },
    { "p0095r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" The case for a language based variant ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Pattern Matching and Language Variants ") >, Rev< 2u, Arr64< Hash(wxS(" David Sankel Dan Sarginson Sergei Murzin ")) >(), wxS(" Language Variants ") > >() },
    { "p0096r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") >, Rev< 1u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") >, Rev< 2u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") >, Rev< 3u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") >, Rev< 4u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") >, Rev< 5u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Featuretesting recommendations for C ") > >() },
    { "p0097r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney JF Bastien Pablo Halpern Michael Wong Thomas Richard William Scogland Robert Geva ")) >(), wxS(" Use Cases for ThreadLocal Storage ") > >() },
    { "p0099r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" A lowlevel API for stackful context switching ") >, Rev< 1u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" A lowlevel API for stackful context switching ") > >() },
    { "p0100r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Comparison in C ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Comparison in C ") >, Rev< 2u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Comparison in C ") > >() },
    { "p0101r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" An Outline of a C Numbers Technical Specification ") > >() },
    { "p0102r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Parametric Number Type Aliases ") > >() },
    { "p0103r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" OverflowDetecting and DoubleWide Arithmetic Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" OverflowDetecting and DoubleWide Arithmetic Operations ") > >() },
    { "p0104r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" MultiWord Integer Operations and Types ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" MultiWord Integer Operations and Types ") > >() },
    { "p0105r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Rounding and Overflow in C ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Rounding and Overflow in C ") > >() },
    { "p0106r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Binary FixedPoint Arithmetic ") > >() },
    { "p0107r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Better support for constexpr in stdarray ") > >() },
    { "p0108r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney JF Bastien ")) >(), wxS(" Skeleton Proposal for ThreadLocal Storage TLS ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney JF Bastien ")) >(), wxS(" Skeleton Proposal for ThreadLocal Storage TLS ") > >() },
    { "p0109r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Function Aliases  Extended Inheritance  Opaque Typedefs ") > >() },
    { "p0110r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" Implementing the strong guarantee for variant assignment ") > >() },
    { "p0112r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking Library Revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking Library Revision  ") > >() },
    { "p0113r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Executors and Asynchronous Operations Revision  ") > >() },
    { "p0114r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Resumable Expressions revision  ") > >() },
    { "p0116r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Kawulak ")) >(), wxS(" Boolean conversion for Standard Library types ") > >() },
    { "p0117r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Kawulak ")) >(), wxS(" Generic tostringtowstring functions ") > >() },
    { "p0118r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" ConceptsTS editors report ") > >() },
    { "p0119r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Overload sets as function arguments ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Overload sets as function arguments ") >, Rev< 2u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Overload sets as function arguments ") > >() },
    { "p0120r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" constexpr unions and common initial sequences ") > >() },
    { "p0121r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Working Draft C extensions for Concepts ") > >() },
    { "p0122r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" arrayview boundssafe views for sequences of objects ") >, Rev< 1u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views of objects for sequences ") >, Rev< 2u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views for sequences of objects ") >, Rev< 3u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views for sequences of objects ") >, Rev< 4u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views for sequences of objects ") >, Rev< 5u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views for sequences of objects ") >, Rev< 6u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" span boundssafe views for sequences of objects  ") >, Rev< 7u, Arr64< Hash(wxS(" Neil MacIntosh Stephan T Lavavej ")) >(), wxS(" span boundssafe views for sequences of objects ") > >() },
    { "p0123r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" Unifying the interfaces of stringview and arrayview ") >, Rev< 1u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" stringspan boundssafe views for sequences of characters ") >, Rev< 2u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" stringspan boundssafe views for sequences of objects ") > >() },
    { "p0124r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 3u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 4u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 5u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 6u, Arr64< Hash(wxS(" Paul McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 7u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") >, Rev< 8u, Arr64< Hash(wxS(" Paul E McKenney Ulrich Weigand Andrea Parri Boqun Feng ")) >(), wxS(" LinuxKernel Memory Model ") > >() },
    { "p0125r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" stdbitset inclusion test methods ") > >() },
    { "p0126r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" stdsynchronicT ") >, Rev< 1u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" stdsynchronicltT ") >, Rev< 2u, Arr64< Hash(wxS(" Olivier Giroux Torvald Riegel ")) >(), wxS(" stdsynchronicltT ") > >() },
    { "p0127r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Declaring nontype template arguments with auto ") >, Rev< 1u, Arr64< Hash(wxS(" James Touton Mike Spertus ")) >(), wxS(" Declaring nontype template arguments with auto ") >, Rev< 2u, Arr64< Hash(wxS(" James Touton Mike Spertus ")) >(), wxS(" Declaring nontype template arguments with auto ") > >() },
    { "p0128r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" constexprif ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" constexprif ") > >() },
    { "p0129r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" We cannot realistically get rid of throwing moves ") > >() },
    { "p0130r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Scott Wardle Roberto Parolin ")) >(), wxS(" Comparing virtual functions ") > >() },
    { "p0131r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Unified call syntax concerns ") > >() },
    { "p0132r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonthrowing container operations ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonthrowing container operations ") > >() },
    { "p0133r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Putting noexceptauto on hold again ") > >() },
    { "p0134r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Introducing a name for braceorequalinitializers for nonstatic data members ") > >() },
    { "p0135r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Guaranteed copy elision through simplified value categories ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Wording for guaranteed copy elision through simplified value categories ") > >() },
    { "p0136r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Rewording inheriting constructors core issue  et al ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Rewording inheriting constructors core issue  et al ") > >() },
    { "p0137r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Core Issue  Replacement of class objects containing reference members ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Core Issue  Replacement of class objects containing reference members ") > >() },
    { "p0138r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Construction Rules for enum class Values ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Construction Rules for enum class Values ") >, Rev< 2u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Construction Rules for enum class Values ") > >() },
    { "p0141r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis  Pavel Curtis ")) >(), wxS(" Modules Componentization and Transitional Paths ") > >() },
    { "p0142r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" A Module System for C Revision  ") > >() },
    { "p0143r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Wording for Modules ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Wording for Modules ") >, Rev< 2u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Wording for Modules ") > >() },
    { "p0144r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Structured Bindings ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Structured Bindings ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Structured Bindings ") > >() },
    { "p0145r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Herb Sutter Jonathan Caves ")) >(), wxS(" Expression Order of Evaluation ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis Herb Sutter Jonathan Caves ")) >(), wxS(" Refining Expression Evaluation Order for Idiomatic C Revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Gabriel Dos Reis  Herb Sutter Jonathan Caves ")) >(), wxS(" Refining Expression Evaluation Order for Idiomatic C ") >, Rev< 3u, Arr64< Hash(wxS(" Gabriel Dos Reis  Herb Sutter Jonathan Caves ")) >(), wxS(" Refining Expression Evaluation Order for Idiomatic C ") > >() },
    { "p0146r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Regular Void ") >, Rev< 1u, Arr64< Hash(wxS(" Matt Calabrese  ")) >(), wxS(" Regular Void ") > >() },
    { "p0147r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" The Use and Implementation of Contracts ") > >() },
    { "p0148r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Kuumlhl ")) >(), wxS(" memoryresourceptr A Limited Smart Pointer for memoryresource Correctness ") > >() },
    { "p0149r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Generalised member pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Generalised member pointers ") >, Rev< 2u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Generalised member pointers ") >, Rev< 3u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Generalised member pointers ") > >() },
    { "p0151r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of MultiDeclarators ") > >() },
    { "p0152r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien Jeff Snyder ")) >(), wxS(" constexpr atomicisalwayslockfree ") >, Rev< 1u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien Jeff Snyder ")) >(), wxS(" constexpr atomicltTisalwayslockfree ") > >() },
    { "p0153r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien ")) >(), wxS(" stdatomicobjectfencemo T ") > >() },
    { "p0154r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Olivier Giroux ")) >(), wxS(" constexpr stdthreadhardwaretruefalsesharingsize ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Olivier Giroux ")) >(), wxS(" constexpr stdthreadhardwaretruefalsesharingsize ") > >() },
    { "p0155r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern Arch Robison Hong Hong Artur Laksberg Gor Nishanov Herb Sutter ")) >(), wxS(" Task Block R ") > >() },
    { "p0156r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Variadic lockguard Rev  ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Variadic lockguard Rev  ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Variadic lockguard Rev  ") > >() },
    { "p0157r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Handling Disappointment in C ") > >() },
    { "p0158r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jamie Allsop Jonathan Wakely Christopher Kohlhoff Anthony Williams Roger Orr Andy Sawyer Jonathan Coe Arash Partow ")) >(), wxS(" Couroutines belong in a TS ") > >() },
    { "p0159r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Artur Laksberg ")) >(), wxS(" Draft of Technical Specification for C Extensions for Concurrency ") > >() },
    { "p0160r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Wording for removing defaults for unary folds ") > >() },
    { "p0161r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" Bitset Iterators Masks and Container Operations ") > >() },
    { "p0162r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" A response to a hrefprhtmlPRa On Interactions Between Coroutines and Networking Library ") > >() },
    { "p0163r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" sharedptrweaktype ") > >() },
    { "p0164r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues ") > >() },
    { "p0165r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Kona ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Jacksonville ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Oulu ") >, Rev< 3u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Issaquah ") >, Rev< 4u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Kona ") > >() },
    { "p0166r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Three interesting questions about contracts ") > >() },
    { "p0167r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues after the October  Kona meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the February  Jacksonville meeting ") >, Rev< 2u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the February  Jacksonville meeting ") > >() },
    { "p0169r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nozomu Katxd ")) >(), wxS(" regex and Unicode character types ") > >() },
    { "p0170r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Faisal Vali ")) >(), wxS(" Wording for Constexpr Lambda ") >, Rev< 1u, Arr64< Hash(wxS(" Faisal Vali ")) >(), wxS(" Wording for Constexpr Lambda ") > >() },
    { "p0171r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Response To Resumable Expressions a hrefprpdfPRa ") > >() },
    { "p0172r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Abominable Function Types ") > >() },
    { "p0174r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Deprecating Vestigial Library Parts in C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Deprecating Vestigial Library Parts in C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Deprecating Vestigial Library Parts in C ") > >() },
    { "p0175r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe Richard Smith ")) >(), wxS(" Synopses for the C library ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe Richard Smith ")) >(), wxS(" Synopses for the C library ") > >() },
    { "p0177r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Cleaning up allocatortraits ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Cleaning up allocatortraits ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Cleaning up allocatortraits ") > >() },
    { "p0178r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Allocators and swap ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Allocators and swap ") > >() },
    { "p0180r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reserve a New Library Namespace Future Standardization ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reserve a New Library Namespace Future Standardization ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reserve a New Library Namespace Future Standardization ") > >() },
    { "p0181r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Ordered By Default ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Ordered By Default ") > >() },
    { "p0184r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Generalizing the RangeBased For Loop ") > >() },
    { "p0185r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler ")) >(), wxS(" Adding nothrow swappable traits ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krugler ")) >(), wxS(" Adding nothrowswappable traits revision  ") > >() },
    { "p0186r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes Eric Niebler Casey Carter ")) >(), wxS(" Iterator Facade Library Proposal for Ranges ") > >() },
    { "p0188r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for fallthrough attribute ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for fallthrough attribute ") > >() },
    { "p0189r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for nodiscard attribute ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for nodiscard attribute ") > >() },
    { "p0190r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Hans Boehm Jens Maurer ")) >(), wxS(" Proposal for New memory order consume Definition ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Hans Boehm Jens Maurer ")) >(), wxS(" Proposal for New memory order consume Definition ") > >() },
    { "p0191r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Daniel Markus ")) >(), wxS(" C virtual member function pointer comparison ") > >() },
    { "p0192r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Fomitchev Sergei Nikolaev Oliver Giroux ")) >(), wxS(" Adding a Fundamental Type for Short Float ") >, Rev< 1u, Arr64< Hash(wxS(" Boris Fomitchev Sergei Nikolaev Olivier Giroux Lawrence Crowl ")) >(), wxS(" Adding a Fundamental Type for Short Float ") >, Rev< 4u, Arr64< Hash(wxS(" Micha Dominiak Bryce Adelstein Lelbach Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" short float and fixedsize floating point types ") > >() },
    { "p0193r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Hans Boehm ")) >(), wxS(" Where is Vectorization in C ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Hans Boehm ")) >(), wxS(" Where is Vectorization in C ") > >() },
    { "p0194r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matus Chochlik Axel Naumann ")) >(), wxS(" Static reflection revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Alex Naumann ")) >(), wxS(" Static reflection revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static reflection ") >, Rev< 3u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static reflection ") >, Rev< 4u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static reflection ") >, Rev< 5u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel  ")) >(), wxS(" Static reflection ") >, Rev< 6u, Arr64< Hash(wxS(" Matus Chochlik Axel Naumann David Sankel ")) >(), wxS(" Static reflection ") > >() },
    { "p0195r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Haberlach ")) >(), wxS(" Modernizing usingdeclarations ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Haberlach ")) >(), wxS(" Modernizing usingdeclarations ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Haberlach Richard Smith ")) >(), wxS(" Pack expansions in usingdeclarations ") > >() },
    { "p0196r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" A generic nonet literal type for Nullable types ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Generic none factories for Nullable types ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Generic none factories for Nullable types ") >, Rev< 3u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Generic none factories for Nullable types ") >, Rev< 4u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Generic none factories for Nullable types ") >, Rev< 5u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" Generic none factories for Nullable types ") > >() },
    { "p0197r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Default Tuplelike access ") > >() },
    { "p0198r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Default Swap ") > >() },
    { "p0199r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Default Hash ") > >() },
    { "p0200r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yegor Derevenets ")) >(), wxS(" A Proposal to Add Y Combinator to the Standard Library ") > >() },
    { "p0201r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe ")) >(), wxS(" A cloning pointerclass for C ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Coe ")) >(), wxS(" An indirect valuetype for C ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Coe ")) >(), wxS(" A polymorphic valuetype for C ") >, Rev< 3u, Arr64< Hash(wxS(" Jonathan Coe Sean Parent ")) >(), wxS(" A polymorphic valuetype for C ") >, Rev< 4u, Arr64< Hash(wxS(" Jonathan Coe Sean Parent ")) >(), wxS(" A polymorphic valuetype for C ") >, Rev< 5u, Arr64< Hash(wxS(" Jonathan Coe Sean Parent ")) >(), wxS(" A polymorphic valuetype for C ") >, Rev< 6u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" A polymorphic valuetype for C ") > >() },
    { "p0202r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in ltalgorithm and ltcstring Headers ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in ltalgorithm and ltcstring Headers ") >, Rev< 2u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in ltalgorithm and ltcstring Headers ") >, Rev< 3u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in ltalgorithmgt and ltutilitygt Headers ") > >() },
    { "p0203r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Gaunard ")) >(), wxS(" Considerations for the design of expressive portable SIMD vectors ") > >() },
    { "p0205r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Moritz Klammler ")) >(), wxS(" Allow Seeding Random Number Engines With stdrandomdevice ") >, Rev< 1u, Arr64< Hash(wxS(" Moritz Klammler ")) >(), wxS(" Efficient Seeding of Random Number Engines ") > >() },
    { "p0206r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Discussion about stdthread and RAII ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" A joining thread ") > >() },
    { "p0207r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ruminations on lambda captures ") > >() },
    { "p0208r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Copyswap helper ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Copyswap Transaction ") > >() },
    { "p0209r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" makefromtuple apply for construction ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" makefromtuple apply for construction ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" makefromtuple apply for construction ") > >() },
    { "p0210r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" A lightweight dynamic array ") > >() },
    { "p0211r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Allocatoraware library wrappers for dynamic allocation ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Allocatoraware library wrappers for dynamic allocation ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Allocatoraware library wrappers for dynamic allocation ") >, Rev< 3u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Allocatoraware library wrappers for dynamic allocation ") > >() },
    { "p0212r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for maybeunused attribute ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Wording for maybeunused attribute ") > >() },
    { "p0213r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Graham Bleaney ")) >(), wxS(" Reexamining the Performance of MemoryAllocation Strategies ") > >() },
    { "p0214r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 4u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 5u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 6u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types  Operations ") >, Rev< 7u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types amp Operations ") >, Rev< 8u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types amp Operations ") >, Rev< 9u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" DataParallel Vector Types amp Operations ") > >() },
    { "p0215r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Greg Miller Bradley White ")) >(), wxS(" A CivilTime Library ") > >() },
    { "p0216r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Greg Miller Bradley White ")) >(), wxS(" A TimeZone Library ") > >() },
    { "p0217r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for structured bindings ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for structured bindings ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for structured bindings ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for structured bindings ") > >() },
    { "p0218r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Adopt File System TS for C ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Adopt File System TS for C ") > >() },
    { "p0219r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes Jamie Allsop Nicolai Josuttis ")) >(), wxS(" Relative Paths for Filesystem ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Relative Paths for Filesystem ") > >() },
    { "p0220r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Adopt Library Fundamentals TS for C ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Adopt Library Fundamentals V TS Components for C R ") > >() },
    { "p0221r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for default comparisons revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for default comparisons revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Proposed wording for default comparisons revision  ") > >() },
    { "p0222r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Allowing Anonymous Structs as Return Values ") > >() },
    { "p0223r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Class Namespace ") > >() },
    { "p0224r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Implicit Return Type ") > >() },
    { "p0225r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Why I want Concepts and why I want them sooner rather than later ") > >() },
    { "p0226r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Axel Naumann Edward SmithRowland ")) >(), wxS(" Mathematical Special Functions for C v ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown Axel Naumann Edward SmithRowland  ")) >(), wxS(" Mathematical Special Functions for C v ") > >() },
    { "p0227r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thibaut Le Jehan ")) >(), wxS(" Weakening the iterator categories of some standard algorithms ") > >() },
    { "p0228r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Ramey ")) >(), wxS(" A Proposal to Add Safe Integer Types to the Standard Library Technical Report ") >, Rev< 3u, Arr64< Hash(wxS(" Ryan McDougall Matt Calabrese ")) >(), wxS(" uniquefunction a moveonly stdfunction ") > >() },
    { "p0229r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory Meeting minutes  ") > >() },
    { "p0230r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Games DevLow LatencyFinancial Meeting Minutes  ") > >() },
    { "p0231r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Luchangco Michael Spear Michael Wong ")) >(), wxS(" Extending the Transactional Memory Technical Specification to Support Commit Actions ") > >() },
    { "p0232r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney Michael Wong Maged Michael ")) >(), wxS(" A Concurrency ToolKit for Structured DeferralOptimistic Speculation ") > >() },
    { "p0233r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged M Michael Michael Wong ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 1u, Arr64< Hash(wxS(" Maged M Michael Michael Wong ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 2u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Arthur ODwyer ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 3u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Arthur ODwyer David Hollman ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 4u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Arthur ODwyer David Hollman Geoffrey Romer Andrew Hunter ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 5u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Arthur ODwyer David Hollman Geoffrey Romer Andrew Hunter ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") >, Rev< 6u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Arthur ODwyer David Hollman Geoffrey Romer Andrew Hunter ")) >(), wxS(" Hazard Pointers Safe Reclamation for Optimistic Concurrency ") > >() },
    { "p0234r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Hartmut Kaiser Thomas Heller ")) >(), wxS(" Towards Massive Parallelismaka Heterogeneous DevicesAcceleratorsGPGPU support in C ") > >() },
    { "p0235r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Somberg Brian Fitzgerald ")) >(), wxS(" A Packaging System for C ") > >() },
    { "p0237r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" On the standardization of fundamental bit manipulation utilities ") >, Rev< 1u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 10u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 2u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner Nathan Myers ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 3u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 4u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 5u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 6u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 7u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 8u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") >, Rev< 9u, Arr64< Hash(wxS(" Vincent Reverdy Robert J Brunner ")) >(), wxS(" Wording for fundamental bit manipulation utilities ") > >() },
    { "p0238r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxsk ")) >(), wxS(" Return type deduction and SFINAE ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski  ")) >(), wxS(" Return type deduction and SFINAE ") > >() },
    { "p0239r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" valuelessbyexception ") > >() },
    { "p0240r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Why I want Concepts but why they should come later rather than sooner ") > >() },
    { "p0241r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Remove FutureRelated Explicit Specializations for Void ") > >() },
    { "p0242r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Standard Library Support For Void ") > >() },
    { "p0245r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Hexadecimal float literals for C ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Hexadecimal float literals for C ") > >() },
    { "p0246r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" Contract Assert Support Merged Proposal ") > >() },
    { "p0247r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" Criteria for Contract Support ") > >() },
    { "p0248r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Concepts in C ") > >() },
    { "p0249r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brett Searles ")) >(), wxS(" Input Devices For D Graphics ") >, Rev< 2u, Arr64< Hash(wxS(" Brett Searles Michael McLaughlin Jason Zink ")) >(), wxS(" Input Devices For D Graphics ") > >() },
    { "p0250r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Wording improvements for initialization and thread ids CWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Wording improvements for initialization and thread ids CWG  ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Wording improvements for initialization and thread ids CWG   ") >, Rev< 3u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Wording improvements for initialization and thread ids CWG   ") > >() },
    { "p0251r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Herb Sutter ")) >(), wxS(" Unified Call Syntax Wording ") > >() },
    { "p0252r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot Wording ") >, Rev< 1u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot Wording ") >, Rev< 2u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot Wording ") > >() },
    { "p0254r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Integrating stdstringview and stdstring ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Integrating stdstringview and stdstring ") > >() },
    { "p0255r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Cleiton Santoia Silva Daniel Auresco ")) >(), wxS(" C Static Reflection via template pack expansion ") > >() },
    { "p0256r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Cleiton Santoia Silva ")) >(), wxS(" C Reflection Light ") > >() },
    { "p0257r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type for the standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type for increased type safety ") > >() },
    { "p0258r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" iscontiguouslayout ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" iscontiguouslayout ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" hasuniqueobjectrepresentations  wording ") > >() },
    { "p0259r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Price Andrew Tomazos ")) >(), wxS(" fixedstring a compiletime string ") > >() },
    { "p0260r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen ")) >(), wxS(" C Concurrent Queues ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Concurrent Queues ") >, Rev< 10u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 11u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 12u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 13u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 14u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 15u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 16u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 17u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 2u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen ")) >(), wxS(" C Concurrent Queues ") >, Rev< 3u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen ")) >(), wxS(" C Concurrent Queues ") >, Rev< 4u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen ")) >(), wxS(" C Concurrent Queues ") >, Rev< 5u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen Detlef Vollmann ")) >(), wxS(" C Concurrent Queues ") >, Rev< 6u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 7u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 8u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") >, Rev< 9u, Arr64< Hash(wxS(" Detlef Vollmann Lawrence Crowl Chris Mysen Gor Nishanov ")) >(), wxS(" C Concurrent Queues ") > >() },
    { "p0261r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Distributed Counters ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Distributed Counters ") >, Rev< 2u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Distributed Counters ") >, Rev< 3u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Distributed Counters ") >, Rev< 4u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Distributed Counters ") > >() },
    { "p0262r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" A Class for Status and Optional Value ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl Chris Mysen ")) >(), wxS(" A Class for Status and Optional Value ") > >() },
    { "p0263r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the February  Jacksonville Meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the February  Jacksonville Meeting ") > >() },
    { "p0264r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Price ")) >(), wxS(" auto operator considered dangerous ") > >() },
    { "p0265r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG is NOT proposing Transactional Memory for C ") > >() },
    { "p0266r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Removing Restrictions on requiresExpressions ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Removing Restrictions on requiresExpressions ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Lifting Restrictions on requiresExpressions ") > >() },
    { "p0267r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael McLaughlin ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 1u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 10u, Arr64< Hash(wxS(" Michael B McLaughlin Herb Sutter Jason Zink Guy Davidson Michael Kazakov ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 2u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 3u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 4u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 5u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink Guy Davidson ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 6u, Arr64< Hash(wxS(" Michael McLaughlin Herb Sutter Jason Zink Guy Davidson ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 7u, Arr64< Hash(wxS(" Michael B McLaughlin Herb Sutter Jason Zink Guy Davidson ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C  ") >, Rev< 8u, Arr64< Hash(wxS(" Michael B McLaughlin Herb Sutter Jason Zink Guy Davidson Michael Kazakov ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") >, Rev< 9u, Arr64< Hash(wxS(" Michael B McLaughlin Herb Sutter Jason Zink Guy Davidson Michael Kazakov ")) >(), wxS(" A Proposal to Add D Graphics Rendering and Display to C ") > >() },
    { "p0268r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Andrew Tomazos ")) >(), wxS(" upto expression ") > >() },
    { "p0269r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Allocatoraware regular expressions ") > >() },
    { "p0270r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Removing C dependencies from signal handler wording ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Removing C dependencies from signal handler wording ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Removing C dependencies from signal handler wording ") >, Rev< 3u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Removing C dependencies from signal handler wording ") > >() },
    { "p0271r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Tony Van Eerd David Sankel ")) >(), wxS(" stddirectinitltT for plugging the metaprogramming constructor hole ") > >() },
    { "p0272r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Give stdstring a nonconst data member function ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Give stdstring a nonconst data member function ") > >() },
    { "p0273r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Chandler Carruth David Jones ")) >(), wxS(" Proposed modules changes from implementation and deployment experience ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith Chandler Carruth David Jones ")) >(), wxS(" Proposed modules changes from implementation and deployment experience ") > >() },
    { "p0274r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Clump  A Vectorlike Sequence Container with Embedded Storage ") > >() },
    { "p0275r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add Classes and Functions Required for Dynamic Library Load ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add Classes and Functions Required for Dynamic Library Load ") >, Rev< 2u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add Classes and Functions Required for Dynamic Library Load ") >, Rev< 3u, Arr64< Hash(wxS(" Antony Polukhin  ")) >(), wxS(" A Proposal to add Classes and Functions Required for Dynamic Library Load ") >, Rev< 4u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add Classes and Functions Required for Dynamic Library Load ") > >() },
    { "p0276r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add Attribute visible ") > >() },
    { "p0277r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Wilson  ")) >(), wxS(" const Inheritance ") >, Rev< 1u, Arr64< Hash(wxS(" David Wilson  ")) >(), wxS(" const Inheritance ") > >() },
    { "p0278r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jon Kalb Dan Saks ")) >(), wxS(" volatile solutions ") > >() },
    { "p0279r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" ReadCopy Update RCU for C ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney ")) >(), wxS(" ReadCopy Update RCU for C ") > >() },
    { "p0280r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Initialize unspecified aggregate members with direct list initialization ") > >() },
    { "p0281r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Remove comma elision in variadic function declarations ") > >() },
    { "p0282r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Constpreserving overloads for the strtox family of functions ") > >() },
    { "p0283r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Standard and nonstandard attributes ") >, Rev< 1u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Standard and nonstandard attributes ") >, Rev< 2u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Standard and nonstandard attributes ") > >() },
    { "p0284r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Unqualified enumerators in case labels ") > >() },
    { "p0285r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Using customization points to unify executors ") > >() },
    { "p0286r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" A networking library extension to support coawaitbased coroutines ") > >() },
    { "p0287r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Simple Contracts for C ") > >() },
    { "p0288r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" A polymorphic wrapper for all Callable objects ") >, Rev< 1u, Arr64< Hash(wxS(" David Krauss ")) >(), wxS(" A polymorphic wrapper for all Callable objects ") >, Rev< 4u, Arr64< Hash(wxS(" Ryan McDougall Matt Calabrese ")) >(), wxS(" anyinvocable ") >, Rev< 5u, Arr64< Hash(wxS(" Matt Calabrese Ryan McDougall ")) >(), wxS(" anyinvocable ") >, Rev< 6u, Arr64< Hash(wxS(" Matt Calabrese Ryan McDougall ")) >(), wxS(" anyinvocable ") >, Rev< 7u, Arr64< Hash(wxS(" Ryan McDougall Matt Calabrese ")) >(), wxS(" anyinvocable ") >, Rev< 8u, Arr64< Hash(wxS(" Ryan McDougall Matt Calabrese ")) >(), wxS(" moveonlyfunction was anyinvocable ") >, Rev< 9u, Arr64< Hash(wxS(" Matt Calabrese Ryan McDougall ")) >(), wxS(" moveonlyfunction was anyinvocable ") > >() },
    { "p0289r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Austern ")) >(), wxS(" Forward declarations of nested classes ") > >() },
    { "p0290r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" apply for synchronizedvalueltT ") >, Rev< 1u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" apply for synchronizedvalueltT ") >, Rev< 2u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" apply for synchronizedvalueltT ") >, Rev< 3u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" apply for synchronizedvalue ") >, Rev< 4u, Arr64< Hash(wxS(" Anthony Williams  ")) >(), wxS(" apply for synchronizedvalue ") > >() },
    { "p0292r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" constexpr if A slightly different syntax ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" constexpr if A slightly different syntax ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" constexpr if A slightly different syntax ") > >() },
    { "p0293r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Template deduction for nested classes ") > >() },
    { "p0295r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adopt Selected Library Fundamentals V Components for C ") > >() },
    { "p0296r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress guarantees Base definitions ") >, Rev< 1u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress guarantees Base definitions ") >, Rev< 2u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress guarantees Base definitions ") > >() },
    { "p0298r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type definition ") >, Rev< 1u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type definition ") >, Rev< 2u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type definition ") >, Rev< 3u, Arr64< Hash(wxS(" Neil MacIntosh ")) >(), wxS(" A byte type definition ") > >() },
    { "p0299r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress guarantees for the Parallelism TS v ") >, Rev< 1u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress guarantees for the Parallelism TS features ") > >() },
    { "p0301r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Wording for Unified Call Syntax ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Wording for Unified Call Syntax revision  ") > >() },
    { "p0302r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Deprecating Allocator Support in stdfunction ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Removing Allocator Support in stdfunction rev  ") > >() },
    { "p0303r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Fomitchev Sergei Nikolaev Olivier Giroux Lawrence Crowl ")) >(), wxS(" Extensions to C for Short Float Type ") > >() },
    { "p0304r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Jacksonville ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Issaquah ") > >() },
    { "p0305r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" If statement with initializer ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Selection statements with initializer ") > >() },
    { "p0306r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Comma elision and comma deletion ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Comma elision and comma deletion ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Comma elision and comma deletion ") >, Rev< 3u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Comma elision and comma deletion ") >, Rev< 4u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Comma elision and comma deletion ") > >() },
    { "p0307r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Making Optional Greater Equal Again ") >, Rev< 2u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Making Optional Greater Equal Again ") > >() },
    { "p0308r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Valueless Variants Considered Harmful ") > >() },
    { "p0309r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniele Bordes Markus Hosch ")) >(), wxS(" Partial class ") > >() },
    { "p0310r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marcelo Zimbres ")) >(), wxS(" Splitting node and array allocation in allocators ") > >() },
    { "p0311r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" A Unified Vision for Manipulating Tuplelike Objects ") > >() },
    { "p0312r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Make Pointers to Members Callable ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Make Pointers to Members Callable ") > >() },
    { "p0313r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Comparison operators in foldexpressions ") > >() },
    { "p0314r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Haberlach  ")) >(), wxS(" Querying the alignment of an object ") > >() },
    { "p0315r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Lambdas in unevaluated context ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Lambdas in unevaluated context ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Lambdas in unevaluated context ") >, Rev< 3u, Arr64< Hash(wxS(" Louis Dionne Hubert Tong ")) >(), wxS(" Lambdas in unevaluated context ") >, Rev< 4u, Arr64< Hash(wxS(" Louis Dionne Hubert Tong ")) >(), wxS(" Wording for lambdas in unevaluated contexts ") > >() },
    { "p0316r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Miro Knejp ")) >(), wxS(" allocateunique and allocatordelete ") > >() },
    { "p0317r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Directory Entry Caching for Filesystem ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Directory Entry Caching for Filesystem ") > >() },
    { "p0318r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" decayunwrap and unwrapreference ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" unwraprefdecay and unwrapreference ") > >() },
    { "p0319r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Adding Emplace functions for promiseltTfutureltT ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" Adding Emplace functions for promiseltTgtfutureltTgt revision  ") > >() },
    { "p0320r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Thread Constructor Attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Thread Constructor Attributes ") > >() },
    { "p0322r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Alisdair Meredith Jared Hoberock ")) >(), wxS(" exceptionlist ") > >() },
    { "p0323r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" A proposal to add a utility class to represent expected monad Revision  ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" A proposal to add a utility class to represent expected object Revision  ") >, Rev< 10u, Arr64< Hash(wxS(" JF Bastien Vicente Botet ")) >(), wxS(" stdexpected ") >, Rev< 11u, Arr64< Hash(wxS(" JF Bastien Jonathan Wakely Vicente Botet ")) >(), wxS(" stdexpected ") >, Rev< 12u, Arr64< Hash(wxS(" Vicente Botet JF Bastien Jonathan Wakely ")) >(), wxS(" stdexpected ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" A proposal to add a utility class to represent expected object Revision  ") >, Rev< 3u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Utility class to represent expected object ") >, Rev< 4u, Arr64< Hash(wxS(" Vicente Botet JF Bastien ")) >(), wxS(" stdexpected ") >, Rev< 5u, Arr64< Hash(wxS(" Vicente Botet JF Bastien ")) >(), wxS(" stdexpected ") >, Rev< 6u, Arr64< Hash(wxS(" Vicente Botet JF Bastien ")) >(), wxS(" stdexpected ") >, Rev< 7u, Arr64< Hash(wxS(" Vicente Botet JF Bastien ")) >(), wxS(" stdexpected ") >, Rev< 8u, Arr64< Hash(wxS(" JF Bastien Vicente Botet ")) >(), wxS(" stdexpected ") >, Rev< 9u, Arr64< Hash(wxS(" JF Bastien Vicente Botet ")) >(), wxS(" stdexpected ") > >() },
    { "p0324r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" One Concept Definition Syntax ") > >() },
    { "p0325r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Propose to adopt makearray in C ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Propose to adopt makearray into the IS ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" toarray from LFTS with updates ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" toarray from LFTS with updates ") >, Rev< 4u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" toarray from LFTS with updates ") > >() },
    { "p0326r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Structured binding customization point issues ") > >() },
    { "p0327r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Product types access ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Product types access ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Product types access ") >, Rev< 3u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Product types access ") > >() },
    { "p0329r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Shen Richard Smith Zhihao Yuan Chandler Carruth ")) >(), wxS(" Designated Initialization ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Shen Richard Smith ")) >(), wxS(" Designated Initialization Wording ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Shen Richard Smith ")) >(), wxS(" Designated Initialization Wording ") >, Rev< 3u, Arr64< Hash(wxS(" Tim Shen Richard Smith ")) >(), wxS(" Designated Initialization Wording ") >, Rev< 4u, Arr64< Hash(wxS(" Tim Shen Richard Smith ")) >(), wxS(" Designated Initialization Wording ") > >() },
    { "p0330r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rein Halbersma ")) >(), wxS(" UserDefined Literals for sizet ") >, Rev< 1u, Arr64< Hash(wxS(" Rein Halbersma ")) >(), wxS(" UserDefined Literals for sizet ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for ptrdifft and sizet ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for ptrdifft and sizet ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for ptrdifft and sizet ") >, Rev< 6u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for ptrdifft and sizet ") >, Rev< 7u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for ptrdifft and sizet ") >, Rev< 8u, Arr64< Hash(wxS(" JeanHeyd Meneide Rein Halbersma ")) >(), wxS(" Literal Suffixes for signed sizet ") > >() },
    { "p0331r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Robin Maffeo Ben Sander ")) >(), wxS(" Motivation and Examples for Multidimensional Array ") > >() },
    { "p0332r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Robin Maffeo Ben Sander ")) >(), wxS(" Relaxed Incomplete Multidimensional Array Type Declaration ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Bryce Lelbach Christian Trott Mauro Bianco Athanasios Iliopoulos John Michopoulos ")) >(), wxS(" Relaxed Incomplete Multidimensional Array Type Declaration ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Daniel Sunderland Christian Trott David Hollman Mauro Bianco Athanasios Iliopoulos John Michopoulos ")) >(), wxS(" Relaxed Incomplete Multidimensional Array Type Declaration ") > >() },
    { "p0333r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Lelbach ")) >(), wxS(" Improving Parallel Algorithm Exception Handling ") > >() },
    { "p0334r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Lelbach ")) >(), wxS(" Immutable Persistent Containers ") > >() },
    { "p0335r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Context Tokens for Parallel Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Context Tokens for Parallel Algorithms ") > >() },
    { "p0336r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better Names for Parallel Execution Policies in C ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better Names for Parallel Execution Policies in C ") > >() },
    { "p0337r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Delete operator for polymorphicallocator ") > >() },
    { "p0338r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic factories ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic factories ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C generic factories ") >, Rev< 3u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" C generic factories ") > >() },
    { "p0339r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Kuumlhl ")) >(), wxS(" polymorphicallocatorltvoid as a vocabulary type ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Kuumlhl ")) >(), wxS(" polymorphicallocatorltvoid as a vocabulary type ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Kuumlhl ")) >(), wxS(" polymorphicallocatorltvoid as a vocabulary type ") >, Rev< 3u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Kuumlhl ")) >(), wxS(" polymorphicallocatorltvoid as a vocabulary type ") >, Rev< 4u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Khl ")) >(), wxS(" polymorphicallocatorltgt as a vocabulary type ") >, Rev< 5u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Khl ")) >(), wxS(" polymorphicallocatorltgt as a vocabulary type ") >, Rev< 6u, Arr64< Hash(wxS(" Pablo Halpern Dietmar Khl ")) >(), wxS(" polymorphicallocatorltgt as a vocabulary type ") > >() },
    { "p0340r0", RevList< Rev< 0u, Arr64< Hash(wxS(" R Tim Song ")) >(), wxS(" Making stdunderlyingtype SFINAEfriendly ") >, Rev< 1u, Arr64< Hash(wxS(" R Tim Song ")) >(), wxS(" Making stdunderlyingtype SFINAEfriendly ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Making stdunderlyingtype SFINAEfriendly ") >, Rev< 3u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Making stdunderlyingtype SFINAEfriendly ") > >() },
    { "p0341r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" parameter packs outside of templates ") > >() },
    { "p0342r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Timing barriers ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" What does current time mean ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Mike Spertus ")) >(), wxS(" pessimizehint ") > >() },
    { "p0343r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Metaprogramming HighOrder Functions ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Metaprogramming HighOrder Functions ") > >() },
    { "p0345r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Dominiak ")) >(), wxS(" Allowing any unsigned integral type as parameter type for literal operators ") > >() },
    { "p0346r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" A ltrandom Nomenclature Tweak ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" A ltrandom Nomenclature Tweak ") > >() },
    { "p0347r0", RevList< Rev< 0u, Arr64< Hash(wxS(" R Tim Song Melissa ONeill ")) >(), wxS(" Simplifying simple uses of ltrandom ") >, Rev< 1u, Arr64< Hash(wxS(" R Tim Song Melissa ONeill ")) >(), wxS(" Simplifying simple uses of ltrandom ") > >() },
    { "p0348r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemienski ")) >(), wxS(" Validity testing issues ") > >() },
    { "p0349r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Assumptions about the size of datapar ") > >() },
    { "p0350r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Integrating datapar with parallel algorithms and executors ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Integrating simd with parallel algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Integrating simd with parallel algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Integrating simd with parallel algorithms ") >, Rev< 4u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Integrating simd with parallel algorithms ") > >() },
    { "p0352r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Hubert Tong Faisal Vali ")) >(), wxS(" Smart References through Delegation nd revision ") > >() },
    { "p0353r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Unicode Encoding Conversions for the Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Unicode Friendly Encoding Conversions for the Standard Library ") > >() },
    { "p0354r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" default  is  default lt is lt so ") > >() },
    { "p0355r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Extending codeltchronogtcode to Calendars and Time Zones ") >, Rev< 1u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Extending ltcodeltchronogtltcode to Calendars and Time Zones ") >, Rev< 2u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Extending ltchronogt to Calendars and Time Zones ") >, Rev< 3u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Extending ltcodeltchronogtltcode to Calendars and Time Zones ") >, Rev< 4u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Extending ltcodeltchronogtltcode to Calendars and Time Zones ") >, Rev< 5u, Arr64< Hash(wxS(" Howard E Hinnant Tomasz Kamiski ")) >(), wxS(" Extending ltchronogt to Calendars and Time Zones ") >, Rev< 7u, Arr64< Hash(wxS(" Howard E Hinnant Tomasz Kamiski ")) >(), wxS(" Extending ltchronogt to Calendars and Time Zones ") > >() },
    { "p0356r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Simplified partial function application ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Simplified partial function application ") >, Rev< 2u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Simplified partial function application ") >, Rev< 3u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Simplified partial function application ") >, Rev< 4u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Simplified partial function application ") >, Rev< 5u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Simplified partial function application ") > >() },
    { "p0357r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" referencewrapper for incomplete types ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" referencewrapper for incomplete types ") >, Rev< 2u, Arr64< Hash(wxS(" Tomasz Kamiski Stephan T Lavavej Alisdair Meredith ")) >(), wxS(" referencewrapper for incomplete types ") >, Rev< 3u, Arr64< Hash(wxS(" Tomasz Kamiski Stephan T Lavavej Alisdair Meredith ")) >(), wxS(" referencewrapper for incomplete types ") > >() },
    { "p0358r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Fixes for notfn ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Fixes for notfn ") > >() },
    { "p0359r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0360r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p0361r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hartmut Kaiser Thomas Heller Michael Wong ")) >(), wxS(" Invoking Algorithms asynchronously ") >, Rev< 1u, Arr64< Hash(wxS(" Hartmut Kaiser Thomas Heller Bryce Adelstein Lelbach John Biddiscombe Michael Wong ")) >(), wxS(" Invoking Algorithms asynchronously ") > >() },
    { "p0365r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Report on SG a year later and future directions ") > >() },
    { "p0366r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Luchangco Michael Spear Michael Wong ")) >(), wxS(" Extending the Transactional Memory Technical Specification with an intransaction Statemen ") > >() },
    { "p0367r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ronan Keryell Joeumll Falcou ")) >(), wxS(" a C standard library class to qualify data accesses ") > >() },
    { "p0370r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges TS Design Updates Omnibus ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges TS Design Updates Omnibus ") >, Rev< 2u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges TS Design Updates Omnibus ") >, Rev< 3u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges TS Design Updates Omnibus ") > >() },
    { "p0371r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Temporarily deprecate memoryorderconsume ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Temporarily discourage memoryorderconsume ") > >() },
    { "p0372r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer Davide C C Italiano ")) >(), wxS(" A type for utf data ") > >() },
    { "p0373r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of File Literals ") > >() },
    { "p0374r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia David del Rio Manuel F Dolz Javier GarciaBlas Luis M Sanchez Marco Danelutto Massimo Torquati ")) >(), wxS(" Stream parallelism patterns ") > >() },
    { "p0375r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" exhaustive attribute for enums ") > >() },
    { "p0376r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" A Single Generalization of stdinvoke stdapply and stdvisit ") > >() },
    { "p0377r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" stdintegralconstant with a Deduced Value Type ") > >() },
    { "p0379r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollman ")) >(), wxS(" Why a joining thread from P is a Bad Idea ") > >() },
    { "p0380r0", RevList< Rev< 0u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" A Contract Design ") >, Rev< 1u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" A Contract Design ") > >() },
    { "p0381r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Numeric Width ") >, Rev< 1u, Arr64< Hash(wxS(" John McFarlane Michael Wong ")) >(), wxS(" Numeric Width ") > >() },
    { "p0382r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Comments on P Overload sets as function arguments ") > >() },
    { "p0384r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the June  Oulu meeting ") > >() },
    { "p0386r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel Richard Smith ")) >(), wxS(" Inline Variables ") >, Rev< 2u, Arr64< Hash(wxS(" Hal Finkel Richard Smith ")) >(), wxS(" Inline Variables ") > >() },
    { "p0387r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Memory Model Issues for Concurrent Data Structures ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Memory Model Issues for Concurrent Data Structures ") > >() },
    { "p0388r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Haberlach  ")) >(), wxS(" Permit conversions to arrays of unknown bound ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Haberlach  ")) >(), wxS(" Permit conversions to arrays of unknown bound ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Haberlach ")) >(), wxS(" Permit conversions to arrays of unknown bound ") >, Rev< 3u, Arr64< Hash(wxS(" Robert Haberlach ")) >(), wxS(" Permit conversions to arrays of unknown bound ") >, Rev< 4u, Arr64< Hash(wxS(" Robert Haberlach Richard Smith ")) >(), wxS(" Permit conversions to arrays of unknown bound ") > >() },
    { "p0389r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Haberlach  ")) >(), wxS(" template keyword in unqualifiedids ") > >() },
    { "p0391r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Introducing the term templated entity ") > >() },
    { "p0392r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Adapting stringview by filesystem paths ") > >() },
    { "p0393r0", RevList< Rev< 3u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Making Variant Greater Equal ") > >() },
    { "p0394r0", RevList< Rev< 4u, Arr64< Hash(wxS(" JF Bastien Bryce Adelstein Lelbach ")) >(), wxS(" Hotel Parallelifornia terminate for Parallel Algorithms Exception Handling ") > >() },
    { "p0396r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" C Concepts Active Issues List Snapshot of Revision  ") > >() },
    { "p0397r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" C Standard Library Priority  Issues Resolved Directly In Oulu ") > >() },
    { "p0398r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core issue  Explicit default constructors and copylistinitialization ") > >() },
    { "p0400r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Wording for Order of Evaluation of Function Arguments ") > >() },
    { "p0401r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Extensions to the Allocator interface ") >, Rev< 1u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") >, Rev< 2u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") >, Rev< 3u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") >, Rev< 4u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") >, Rev< 5u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") >, Rev< 6u, Arr64< Hash(wxS(" Chris Kennelly Jonathan Wakely ")) >(), wxS(" Providing size feedback in the Allocator interface ") > >() },
    { "p0403r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Literal suffixes for basicstringview ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Literal suffixes for basicstringview ") > >() },
    { "p0404r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert Tong James Touton ")) >(), wxS(" Matching Types  Syntax Not found ") > >() },
    { "p0405r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking TS changes from Kona ") > >() },
    { "p0406r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" Intrusive Containers ") > >() },
    { "p0407r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Allocatoraware basic stringbuf ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Allocatoraware basic stringbuf ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Allocatoraware basicstringbuf ") > >() },
    { "p0408r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basic stringbufs Buffer ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basic stringbufs Buffer ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basic stringbufs Buffer ") >, Rev< 3u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basicstringbufs Buffer ") >, Rev< 4u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basicstringbufs Buffer ") >, Rev< 5u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basicstringbufs Buffer ") >, Rev< 6u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basicstringbufs Buffer ") >, Rev< 7u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Efficient Access to basicstringbufs Buffer ") > >() },
    { "p0409r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Allow lambda capture  this ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Allow lambda capture  this ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Koeppe ")) >(), wxS(" Allow lambda capture  this ") > >() },
    { "p0411r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Separating Library Requirements and Preconditions ") > >() },
    { "p0412r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" Benchmarking primitives ") > >() },
    { "p0413r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Updating Parallel Execution Policy Names in the Parallelism TS ") > >() },
    { "p0414r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Merging sharedptr changes from Library Fundamentals to C ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Merging sharedptr changes from Library Fundamentals to C ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Merging sharedptr changes from Library Fundamentals to C ") > >() },
    { "p0415r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr for stdcomplex ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr for stdcomplex ") > >() },
    { "p0416r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot R ") >, Rev< 1u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Operator Dot R ") > >() },
    { "p0417r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" C should refer to ISOIEC   instead of  ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" C should refer to ISOIEC   instead of  R ") > >() },
    { "p0418r0", RevList< Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Fail or succeed there is no atomic lattice ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Fail or succeed there is no atomic lattice ") > >() },
    { "p0421r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mariusz Moczala ")) >(), wxS(" Static class constructor ") > >() },
    { "p0422r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Alan Jeffrey Ali Sezgin Tony Tye ")) >(), wxS(" OutofThinAir Execution is Vacuous ") > >() },
    { "p0423r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Variable templates for Networking TS traits ") > >() },
    { "p0424r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Reconsidering literal operator templates for strings ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne Hana Dusikova ")) >(), wxS(" Reconsidering literal operator templates for strings ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne Hana Duskov ")) >(), wxS(" String literals as nontype template parameters ") > >() },
    { "p0425r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Metaprogramming by design not by accident ") > >() },
    { "p0426r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr for stdchartraits ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr for stdchartraits ") > >() },
    { "p0428r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Familiar template syntax for generic lambdas ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Familiar template syntax for generic lambdas ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Familiar template syntax for generic lambdas ") > >() },
    { "p0429r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 5u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 6u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 7u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 8u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") >, Rev< 9u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatmap ") > >() },
    { "p0430r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Liu Hubert Tong ")) >(), wxS(" File system library on nonPOSIXlike operating systems ") >, Rev< 1u, Arr64< Hash(wxS(" Jason Liu Hubert Tong ")) >(), wxS(" File system library on nonPOSIXlike operating systems ") >, Rev< 2u, Arr64< Hash(wxS(" Jason Liu Hubert Tong ")) >(), wxS(" File system library on nonPOSIXlike operating systems ") > >() },
    { "p0431r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hyman Rosen ")) >(), wxS(" Correcting Evaluation Order for C ") > >() },
    { "p0432r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Implicit and Explicit Default Comparison Operators ") > >() },
    { "p0433r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown ")) >(), wxS(" Toward a resolution of US and US Integrating template deduction for class templates into the standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown ")) >(), wxS(" Toward a resolution of US and US Integrating template deduction for class templates into the standard library ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown Stephan T Lavavej ")) >(), wxS(" Toward a resolution of US and US Integrating template deduction for class templates into the standard library ") >, Rev< 3u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown Stephan T Lavavej ")) >(), wxS(" Toward a resolution of US and US Integrating template deduction for class templates into the standard library ") > >() },
    { "p0434r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brett Searies ")) >(), wxS(" Portable Interrupt Library ") > >() },
    { "p0435r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Resolving LWG Issues re commontype ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Resolving LWG Issues re commontype ") > >() },
    { "p0436r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" An Extensible Approach to Obtaining Selected Operators ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" An Extensible Approach to Obtaining Selected Operators ") > >() },
    { "p0437r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Numeric Traits for the Next Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Numeric Traits for the Standard Library ") > >() },
    { "p0438r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Toward a ltrandom Technical Specification ") > >() },
    { "p0440r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic View ") >, Rev< 1u, Arr64< Hash(wxS(" H Carter Edwards Hans Boehm Olivier Giroux JF Bastien James Reus ")) >(), wxS(" Floating Point Atomic View ") > >() },
    { "p0441r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges Merging Writable and MoveWritable ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Ranges Merging Writable and MoveWritable ") > >() },
    { "p0443r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 10u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen H Carter Edwards Gordon Brown David Hollman ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 11u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown David Hollman Lee Howes Kirk Shoop Eric Niebler ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 12u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown David Hollman Lee Howes Kirk Shoop Lewis Baker Eric Niebler ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 13u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown David Hollman Lee Howes Kirk Shoop Lewis Baker Eric Niebler ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 14u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen H Carter Edwards Gordon Brown David Hollman ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 2u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 3u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 4u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 5u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 6u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 7u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen H Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") >, Rev< 9u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" A Unified Executors Proposal for C ") > >() },
    { "p0444r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nat Goodspeed ")) >(), wxS(" Unifying suspendbycall and suspendbyreturn ") > >() },
    { "p0445r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p0446r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0447r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Patrice Roy Guy Davidson Matthew Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 10u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 11u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 12u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 13u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 14u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 15u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 16u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 17u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 18u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 19u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 2u, Arr64< Hash(wxS(" Patrice Roy Guy Davidson Matthew Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 20u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 21u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 22u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 23u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 24u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 25u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 26u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 27u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 28u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdhive to the standard library ") >, Rev< 3u, Arr64< Hash(wxS(" Patrice Roy Guy Davidson Matthew Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 4u, Arr64< Hash(wxS(" Patrice Roy Guy Davidson Matthew Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 8u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") >, Rev< 9u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Introduction of stdcolony to the standard library ") > >() },
    { "p0448r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" A strstream replacement using spanltcharT as ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" A strstream replacement using spanltcharT as ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" A strstream replacement using spanltcharTgt as buffer ") >, Rev< 3u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" A strstream replacement using span as buffer ") >, Rev< 4u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" A strstream replacement using span as buffer ") > >() },
    { "p0451r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Alisdair Meredith ")) >(), wxS(" FutureProofing Parallel Algorithms Exception Handling ") > >() },
    { "p0452r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Binary transformreduce The Missing Overload ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Unifying ltnumeric Parallel Algorithms ") > >() },
    { "p0454r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach H Carter Edwards ")) >(), wxS(" Wording for a Minimal mdspan ") > >() },
    { "p0457r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" String Prefix and Suffix Checking ") >, Rev< 1u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" String Prefix and Suffix Checking ") >, Rev< 2u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" String Prefix and Suffix Checking ") > >() },
    { "p0458r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" Checking for Existence of an Element in Associative Containers ") >, Rev< 1u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" Checking for Existence of an Element in Associative Containers ") >, Rev< 2u, Arr64< Hash(wxS(" Mikhail Maltsev ")) >(), wxS(" Checking for Existence of an Element in Associative Containers ") > >() },
    { "p0460r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sean Middleditch ")) >(), wxS(" Flat containers wording ") > >() },
    { "p0461r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Michael Wong Isabella Muerte Arthur ODwyer ")) >(), wxS(" Proposed RCU C API ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Michael Wong Isabella Muerte Arthur ODwyer David Hollman ")) >(), wxS(" Proposed RCU C API ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Michael Wong Isabella Muerte Arthur ODwyer David Hollman Andrew Hunter Georey Romer Lance Roy ")) >(), wxS(" Proposed RCU C API ") > >() },
    { "p0462r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm Clark Nelson Olivier Giroux Lawrence Crowl JF Bastien Micheal Wong ")) >(), wxS(" Marking memory order consume Dependency Chains ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney  Torvald Riegel Jeff Preshing Hans Boehm Clark Nelson Olivier Giroux Lawrence Crowl JF Bastien Micheal Wong ")) >(), wxS(" Marking memory order consume Dependency Chains ") > >() },
    { "p0463r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" endian Just endian ") >, Rev< 1u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" endian Just endian ") > >() },
    { "p0464r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd Botond Ballo  ")) >(), wxS(" Revisiting the meaning of fooConceptNameConceptName ") >, Rev< 1u, Arr64< Hash(wxS(" Tony Van Eerd Botond Ballo  ")) >(), wxS(" Revisiting the meaning of fooConceptNameConceptName ") >, Rev< 2u, Arr64< Hash(wxS(" Tony Van Eerd Botond Ballo  ")) >(), wxS(" Revisiting the meaning of fooConceptNameConceptName ") > >() },
    { "p0465r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Procedural Function Interfaces ") > >() },
    { "p0466r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") >, Rev< 1u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") >, Rev< 2u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") >, Rev< 3u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") >, Rev< 4u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") >, Rev< 5u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Layoutcompatibility and Pointerinterconvertibility Traits ") > >() },
    { "p0467r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Iterator Concerns for Parallel Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Iterator Concerns for Parallel Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Iterator Concerns for Parallel Algorithms ") > >() },
    { "p0468r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" A Proposal to Add an Intrusive Smart Pointer to the C Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" An Intrusive Smart Pointer ") > >() },
    { "p0469r0", RevList< Rev< 0u, Arr64< Hash(wxS(" R Tim Song ")) >(), wxS(" Sample in place ") > >() },
    { "p0471r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Single argument stdinserter ") > >() },
    { "p0472r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Move stdmonostate to ltutility ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel Andrei Zissu ")) >(), wxS(" Put stdmonostate in ltutilitygt ") >, Rev< 2u, Arr64< Hash(wxS(" David Sankel Andrei Zissu ")) >(), wxS(" Put stdmonostate in ltutilitygt ") >, Rev< 3u, Arr64< Hash(wxS(" David Sankel Andrei Zissu ")) >(), wxS(" Put stdmonostate in ltutilitygt ") > >() },
    { "p0473r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS("  for stdvector concatenation ") > >() },
    { "p0474r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Comparison in C Basic Facilities ") > >() },
    { "p0475r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" LWG  guaranteed copy elision for piecewise construction ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" LWG  guaranteed copy elision for piecewise construction ") > >() },
    { "p0476r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Bitcasting object representations ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Bitcasting object representations ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Bitcasting object representations ") > >() },
    { "p0477r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" stdmonostatefunctionlt ") > >() },
    { "p0478r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Manganelli Michael Wong Simon Brand ")) >(), wxS(" Template argument deduction for nonterminal function parameter packs ") > >() },
    { "p0479r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clay Trychta  ")) >(), wxS(" Attributes for Likely and Unlikely Branches ") >, Rev< 1u, Arr64< Hash(wxS(" Clay Trychta  ")) >(), wxS(" Attributes for Likely and Unlikely Branches ") >, Rev< 2u, Arr64< Hash(wxS(" Clay Trychta  ")) >(), wxS(" Attributes for Likely and Unlikely Branches ") >, Rev< 4u, Arr64< Hash(wxS(" Clay Trychta ")) >(), wxS(" Proposed wording for likely and unlikely attributes ") >, Rev< 5u, Arr64< Hash(wxS(" Clay Trychta ")) >(), wxS(" Proposed wording for likely and unlikely attributes ") > >() },
    { "p0480r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Explicit type checking with structured bindings ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Structured bindings with explicit types ") > >() },
    { "p0481r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Bravely Default ") > >() },
    { "p0482r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings ") >, Rev< 2u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings ") >, Rev< 3u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings Revision  ") >, Rev< 4u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings ") >, Rev< 5u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings ") >, Rev< 6u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart A type for UTF characters and strings Revision  ") > >() },
    { "p0483r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy ")) >(), wxS(" Extending Memory Management Tools And a Bit More ") > >() },
    { "p0484r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy Billy Baker Arthur ODwyer ")) >(), wxS(" Enhancing Thread Constructor Attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Patrice Roy Billy Baker Arthur ODwyer ")) >(), wxS(" Enhancing Thread Constructor Attributes ") > >() },
    { "p0485r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Manganelli Michael Wong Simon Brand ")) >(), wxS(" Amended rules for Partial Ordering of function templates ") > >() },
    { "p0486r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ildus Nezametdinov Patrice Roy ")) >(), wxS(" foreachiter algorithm proposal ") > >() },
    { "p0487r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Fixing operator basicistream CharT LWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Fixing operatorgtgtbasicistreamamp CharT LWG  ") > >() },
    { "p0488r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" WG Working paper NB Comments ISOIEC CD  ") > >() },
    { "p0489r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Hedquist ")) >(), wxS(" WG Working paper Late Comments on CD  ") > >() },
    { "p0490r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core language changes addressing National Body comments for CD C ") > >() },
    { "p0492r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes S Davis Herring Nicolai Josuttis Jason Liu Billy ONeal PJ Plauger Jonathan Wakely ")) >(), wxS(" Proposed Resolution of C National Body Comments for Filesystem ") >, Rev< 1u, Arr64< Hash(wxS(" Beman Dawes S Davis Herring Nicolai Josuttis Jason Liu Billy ONeal PJ Plauger Jonathan Wakely ")) >(), wxS(" Proposed Resolution of C National Body Comments for Filesystem ") >, Rev< 2u, Arr64< Hash(wxS(" Beman Dawes S Davis Herring Nicolai Josuttis Jason Liu Billy ONeal PJ Plauger Jonathan Wakely ")) >(), wxS(" Proposed Resolution of C National Body Comments for Filesystem ") > >() },
    { "p0493r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Al Grant Bronek Kozicki ")) >(), wxS(" Atomic maximumminimum ") >, Rev< 1u, Arr64< Hash(wxS(" Al Grant Bronek Kozicki ")) >(), wxS(" Atomic maximumminimum ") >, Rev< 2u, Arr64< Hash(wxS(" Al Grant Bronek Kozicki ")) >(), wxS(" Atomic maximumminimum ") >, Rev< 3u, Arr64< Hash(wxS(" Al Grant Bronek Kozicki Tim Northover ")) >(), wxS(" Atomic maximumminimum ") >, Rev< 4u, Arr64< Hash(wxS(" Al Grant Al Grant Bronek Kozicki Tim Northover ")) >(), wxS(" Atomic maximumminimum ") >, Rev< 5u, Arr64< Hash(wxS(" Al Grant Al Grant Bronek Kozicki Tim Northover ")) >(), wxS(" Atomic maximumminimum ") > >() },
    { "p0494r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ildus Nezametdinov ")) >(), wxS(" contiguouscontainer proposal ") > >() },
    { "p0495r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Concurrency Safety in C Data Structures ") > >() },
    { "p0497r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Fixes to sharedptr support for arrays ") > >() },
    { "p0500r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Resolved Module TS a hRefnpdfNa Issues ") > >() },
    { "p0501r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Module TS Issues List ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Module TS Issues List ") >, Rev< 2u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Module TS Issues List ") >, Rev< 3u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Module TS Issues List ") > >() },
    { "p0502r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Bryce Adelstein Lelbach H Carter Edwards ")) >(), wxS(" Throwing out of a parallel algorithm terminatesbut how ") > >() },
    { "p0503r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Correcting library usage of literal type ") > >() },
    { "p0504r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Revisiting inplace tag types for anyoptionalvariant ") > >() },
    { "p0505r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Wording for GB  ") > >() },
    { "p0507r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Issue  Sequencing of nonclass initialization ") > >() },
    { "p0508r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Wording for GB  ") > >() },
    { "p0509r0", RevList< Rev< 1u, Arr64< Hash(wxS(" James Dennett ")) >(), wxS(" Updating Restrictions on exception handling ") > >() },
    { "p0510r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Disallowing references incomplete types arrays and empty variants ") > >() },
    { "p0511r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Deduction guide for stdarray ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Deduction guide for stdarray ") > >() },
    { "p0513r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Poisoning the Hash ") > >() },
    { "p0514r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Enhancing stdatomicflag for waiting ") >, Rev< 1u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Enhancing stdatomicflag for waiting ") >, Rev< 2u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Efficient waiting for concurrent programs ") >, Rev< 3u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Efficient concurrent waiting for C ") >, Rev< 4u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Efficient concurrent waiting for C ") > >() },
    { "p0515r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Consistent comparison ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Consistent comparison ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Consistent comparison ") >, Rev< 3u, Arr64< Hash(wxS(" Herb Sutter Jens Maurer Walter E Brown ")) >(), wxS(" Consistent comparison ") > >() },
    { "p0516r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Clarify That sharedfutures Copy Operations have Wide Contracts ") > >() },
    { "p0517r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Make futureerror Constructible ") > >() },
    { "p0518r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman Jonathan Liffander Michael Wong Detlef Vollmann ")) >(), wxS(" Allowing copies as arguments to function objects given to parallel algorithms in response to CH ") >, Rev< 1u, Arr64< Hash(wxS(" David S Hollman Jonathan Liffander Michael Wong Detlef Vollmann ")) >(), wxS(" Allowing copies as arguments to function objects given to parallel algorithms in response to CH ") > >() },
    { "p0519r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the November  Issaquah meeting ") > >() },
    { "p0520r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the November  Issaquah meeting ") > >() },
    { "p0521r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephan T Lavavej ")) >(), wxS(" Proposed Resolution for CA  sharedptr usecountunique ") > >() },
    { "p0522r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton Hubert Tong ")) >(), wxS(" DR Matching of template templatearguments excludes compatible templates ") > >() },
    { "p0523r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Wording for CH  Complexity of parallel algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Wording for CH  Complexity of parallel algorithms ") > >() },
    { "p0527r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Implicitly move from rvalue references in return statements ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Implicitly move from rvalue references in return statements ") > >() },
    { "p0528r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Michael Spencer ")) >(), wxS(" The Curious Case of Padding Bits Featuring Atomic CompareandExchange ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Michael Spencer ")) >(), wxS(" The Curious Case of Padding Bits Featuring Atomic CompareandExchange ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien Michael Spencer ")) >(), wxS(" The Curious Case of Padding Bits Featuring Atomic CompareandExchange ") >, Rev< 3u, Arr64< Hash(wxS(" JF Bastien Michael Spencer ")) >(), wxS(" The Curious Case of Padding Bits Featuring Atomic CompareandExchange ") > >() },
    { "p0532r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nico Josuttis ")) >(), wxS(" On stdlaunder ") > >() },
    { "p0533r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Edward J Rosten  Oliver J Rosten ")) >(), wxS(" constexpr for ltcmath and ltcstdlib ") >, Rev< 1u, Arr64< Hash(wxS(" Edward J Rosten  Oliver J Rosten ")) >(), wxS(" constexpr for ltcmath and ltcstdlib ") >, Rev< 2u, Arr64< Hash(wxS(" Edward J Rosten Oliver J Rosten ")) >(), wxS(" constexpr for ltcmathgt and ltcstdlibgt ") >, Rev< 3u, Arr64< Hash(wxS(" Edward J Rosten Oliver J Rosten ")) >(), wxS(" constexpr for ltcmathgt and ltcstdlibgt ") >, Rev< 4u, Arr64< Hash(wxS(" Edward J Rosten Oliver J Rosten ")) >(), wxS(" constexpr for ltcmathgt and ltcstdlibgt ") >, Rev< 5u, Arr64< Hash(wxS(" Oliver Rosten Edward Rosten ")) >(), wxS(" constexpr for ltcmathgt and ltcstdlibgt ") >, Rev< 6u, Arr64< Hash(wxS(" Oliver Rosten Edward Rosten ")) >(), wxS(" constexpr for ltcmathgt and ltcstdlibgt ") >, Rev< 7u, Arr64< Hash(wxS(" Oliver Rosten Edward Rosten ")) >(), wxS(" constexpr for cmath and cstdlib ") >, Rev< 8u, Arr64< Hash(wxS(" Oliver Rosten Edward Rosten ")) >(), wxS(" constexpr for cmath and cstdlib ") >, Rev< 9u, Arr64< Hash(wxS(" Oliver Rosten Edward Rosten ")) >(), wxS(" constexpr for cmath and cstdlib ") > >() },
    { "p0535r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Generalized Unpacking and Parameter Pack Slicing ") > >() },
    { "p0536r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Implicit Return Type and Allowing Anonymous Types as Return Values ") > >() },
    { "p0537r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Allow Attributes on Template Explicit Instantiations ") > >() },
    { "p0538r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" A Qualified Replacement for pragma once ") > >() },
    { "p0539r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Wide Integer Class ") >, Rev< 1u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" A Proposal to add wideint Template Class ") >, Rev< 2u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" A Proposal to add wideint Template Class ") >, Rev< 3u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" A Proposal to add wideint Template Class ") >, Rev< 4u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" A Proposal to add wideint Template Class ") >, Rev< 5u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" A Proposal to add wideint Template Class ") > >() },
    { "p0540r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Laurent NAVARRO ")) >(), wxS(" A Proposal to Add splitjoin of stringstringview to the Standard Library ") > >() },
    { "p0541r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" PostIncrement on Input and Output Iterators ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Ranges TS PostIncrement on Input and Output Iterators ") > >() },
    { "p0542r0", RevList< Rev< 0u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" Support for contract based programming in C ") >, Rev< 1u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" Support for contract based programming in C ") >, Rev< 2u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" Support for contract based programming in C ") >, Rev< 3u, Arr64< Hash(wxS(" G Dos Reis J D Garcia J Lakos A Meredith N Myers B Stroustrup ")) >(), wxS(" Support for contract based programming in C ") >, Rev< 4u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Support for contract based programming in C ") >, Rev< 5u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Support for contract based programming in C ") > >() },
    { "p0543r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Saturation arithmetic ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Saturation arithmetic ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Saturation arithmetic ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Saturation arithmetic ") > >() },
    { "p0544r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters Geoffrey Romer ")) >(), wxS(" User Injection of Filesystems ") > >() },
    { "p0545r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrey Semashev  ")) >(), wxS(" Supporting offsetof for Stablelayout Classes ") > >() },
    { "p0546r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Carter Edwards Bryce Lelbach ")) >(), wxS(" Span  foundation for the future ") >, Rev< 1u, Arr64< Hash(wxS(" Carter Edwards Bryce Lelbach ")) >(), wxS(" Span  foundation for the future ") >, Rev< 2u, Arr64< Hash(wxS(" H Carter Edwards Daniel Sunderland ")) >(), wxS(" Span  foundation for the future ") > >() },
    { "p0547r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Assorted Object Concept Fixes ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Ranges TS Assorted Object Concept Fixes ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Ranges TS Assorted Object Concept Fixes ") > >() },
    { "p0548r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" commontype and duration ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" commontype and duration ") > >() },
    { "p0549r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 3u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 4u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 5u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 6u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") >, Rev< 7u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Adjuncts to stdhash ") > >() },
    { "p0550r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Transformation Trait uncvref ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Transformation Trait uncvref ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Transformation Trait removecvref ") > >() },
    { "p0551r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Thou Shalt Not Specialize std Function Templates ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Thou Shalt Not Specialize std Function Templates ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Thou Shalt Not Specialize std Function Templates ") >, Rev< 3u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Thou Shalt Not Specialize std Function Templates ") > >() },
    { "p0552r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" enableif vs requires ") > >() },
    { "p0553r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Bit Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Bit Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Bit operations ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Bit operations ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Bit operations ") > >() },
    { "p0554r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Composition of Arithmetic Types ") >, Rev< 1u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Composition of Arithmetic Types ") > >() },
    { "p0555r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" stringview for sourcelocation ") > >() },
    { "p0556r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Integral powerof operations ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Integral powerof operations ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Integral powerof operations ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Integral powerof operations ") > >() },
    { "p0557r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Concepts The Future of Generic Programming ") > >() },
    { "p0558r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Billy ONeal Jens Maurer ")) >(), wxS(" Resolving atomicltT named base class inconsistencies ") >, Rev< 1u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" Resolving atomicltT named base class inconsistencies ") > >() },
    { "p0559r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JC van Winkel Jose Daniel Garcia Ville Voutilainen Roger Orr Michael Wong Sylvain Bonnal ")) >(), wxS(" Operating principles for evolving C ") > >() },
    { "p0560r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Miro Knejp ")) >(), wxS(" Class template deduction guides for diamond operators ") > >() },
    { "p0561r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" RAII Interface for Deferred Reclamation ") >, Rev< 1u, Arr64< Hash(wxS(" Geoffrey Romer ")) >(), wxS(" RAII Interface for Deferred Reclamation ") >, Rev< 2u, Arr64< Hash(wxS(" Geoffrey Romer Andrew Hunter ")) >(), wxS(" RAII Interface for Deferred Reclamation ") >, Rev< 3u, Arr64< Hash(wxS(" Geoff Romer Andrew Hunter ")) >(), wxS(" An RAII Interface for Deferred Reclamation ") >, Rev< 4u, Arr64< Hash(wxS(" Geoff Romer Andrew Hunter ")) >(), wxS(" An RAII Interface for Deferred Reclamation ") >, Rev< 5u, Arr64< Hash(wxS(" Geoffrey Romer Andrew Hunter ")) >(), wxS(" An RAII Interface for Deferred Reclamation ") >, Rev< 6u, Arr64< Hash(wxS(" Geoffrey Romer Andrew Hunter ")) >(), wxS(" An RAII Interface for Deferred Reclamation ") > >() },
    { "p0562r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Initialization List Symmetry ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Initialization List Symmetry ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Trailing Commas in Baseclauses and Ctorinitializers ") > >() },
    { "p0563r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Vector Front Operations ") > >() },
    { "p0564r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Wording for threeway comparisons ") > >() },
    { "p0565r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Prefix for operator as a pack generator and postfix operator for pack indexing ") > >() },
    { "p0566r0", RevList< Rev< 4u, Arr64< Hash(wxS(" Michael Wong Maged M Michael Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt ")) >(), wxS(" Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU ") >, Rev< 5u, Arr64< Hash(wxS(" Michael Wong Maged M Michael Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher ")) >(), wxS(" Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU ") > >() },
    { "p0567r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong ")) >(), wxS(" Asynchronous managed pointer for Heterogeneous computing ") >, Rev< 1u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong ")) >(), wxS(" Asynchronous managed pointer for Heterogeneous computing ") > >() },
    { "p0568r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Towards Better Embedded programming support for C and an update on the status of SG two years later ") > >() },
    { "p0569r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0570r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p0571r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Type Requirements for ltnumeric Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Type Requirements for ltnumeric Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Type Requirements for ltnumericgt Algorithms ") > >() },
    { "p0572r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" bitsizeof and bitoffsetof ") >, Rev< 1u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" bitsizeof and bitoffsetof ") >, Rev< 2u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" Static reflection of bit fields ") > >() },
    { "p0573r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Abbreviated Lambdas for Fun and Profit ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Abbreviated Lambdas for Fun and Profit ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Tomasz Kaminxski ")) >(), wxS(" Abbreviated Lambdas for Fun and Profit ") > >() },
    { "p0574r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" Algorithm Complexity Constraints and Parallel Overloads ") >, Rev< 1u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" Algorithm Complexity Constraints and Parallel Overloads ") > >() },
    { "p0575r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the February  Kona meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the February  Kona meeting ") >, Rev< 2u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the February  Kona meeting ") > >() },
    { "p0576r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the February  Kona meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the February  Kona meeting ") > >() },
    { "p0577r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Keep that Temporary ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Keptvalue statement for guard objects ") > >() },
    { "p0578r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static Reflection in a Nutshell ") >, Rev< 1u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static Reflection in a Nutshell ") > >() },
    { "p0579r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Constexpr for ltexperimentalrangesiterator ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Constexpr for ltexperimentalrangesiterator ") > >() },
    { "p0581r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Marshall Clow Beman Dawes Gabriel Dos Reis Stephan T Lavavej Billy ONeal Bjarne Stroustrup Jonathan Wakely ")) >(), wxS(" Standard Library Modules ") > >() },
    { "p0582r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis  ")) >(), wxS(" Modules Contexts of template instantiations and name lookup ") > >() },
    { "p0583r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis  ")) >(), wxS(" stdbyte is the correct name ") > >() },
    { "p0584r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis  ")) >(), wxS(" Module Interface and Preamble ") > >() },
    { "p0586r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" Safe integral comparisons ") >, Rev< 1u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" Safe integral comparisons ") >, Rev< 2u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" Safe integral comparisons ") > >() },
    { "p0587r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith James Dennett ")) >(), wxS(" Concepts TS revisited ") > >() },
    { "p0588r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Daveed Vandevoorde ")) >(), wxS(" Simplifying implicit lambda capture ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Simplifying implicit lambda capture ") > >() },
    { "p0589r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Tuplebased for loops ") > >() },
    { "p0590r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Herb Sutter ")) >(), wxS(" A design static reflection ") > >() },
    { "p0591r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Utility functions to implement usesallocator construction ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Utility functions to implement usesallocator construction ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Utility functions to implement usesallocator construction ") >, Rev< 3u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Utility functions to implement usesallocator construction ") >, Rev< 4u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Utility functions to implement usesallocator construction ") > >() },
    { "p0592r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") >, Rev< 4u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") >, Rev< 5u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" To boldly suggest an overall plan for C ") > >() },
    { "p0593r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" What to do with buffers that are not arrays and undefined behavior thereof ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith Ville Voutilainen ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") >, Rev< 3u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") >, Rev< 4u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") >, Rev< 5u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") >, Rev< 6u, Arr64< Hash(wxS(" Richard Smith Ville Voutilainen ")) >(), wxS(" Implicit creation of objects for lowlevel object manipulation ") > >() },
    { "p0594r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Relative comparisons and stdlessltT ") > >() },
    { "p0595r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" The constexpr Operator ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" stdisconstantevaluated ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" stdisconstantevaluated ") > >() },
    { "p0596r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" stdconstexprtrace and stdconstexprassert ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Sideeffects in constant evaluation Output and consteval variables ") > >() },
    { "p0597r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" stdconstexprvectorltT ") > >() },
    { "p0598r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Reflect Through Values Instead of Types ") > >() },
    { "p0599r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josutti ")) >(), wxS(" US noxecept for hash functions ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josutti ")) >(), wxS(" US noxecept for hash functions ") > >() },
    { "p0600r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josutti ")) >(), wxS(" applying nodiscard for C ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" nodiscard in the Library ") > >() },
    { "p0601r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Establishing a direction for SIMDenabled functions ") > >() },
    { "p0602r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" variant and optional should propagate copymove triviality ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" variant and optional should propagate copymove triviality ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" variant and optional should propagate copymove triviality ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" variant and optional should propagate copymove triviality ") >, Rev< 4u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" variant and optional should propagate copymove triviality ") > >() },
    { "p0603r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Hunter ")) >(), wxS(" safe memcpy A simpler implementation primitive for seqlock and friends ") > >() },
    { "p0604r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler Pablo Halpern Jonathan Wakely ")) >(), wxS(" Resolving GB  US  US  US  ") > >() },
    { "p0606r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis  ")) >(), wxS(" Concepts Are Ready ") > >() },
    { "p0607r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler ")) >(), wxS(" Inline Variables for the Standard Library ") > >() },
    { "p0608r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" A sane variant converting constructor LEWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" A sane variant converting constructor ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" A sane variant converting constructor ") > >() },
    { "p0609r0", RevList< Rev< 2u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Attributes for Structured Bindings ") >, Rev< 3u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Attributes for Structured Bindings ") > >() },
    { "p0610r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshal Clow ")) >(), wxS(" C Standard Library Review Issues Resolved in Kona ") > >() },
    { "p0611r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" More Better Operators ") > >() },
    { "p0612r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" NB comment CH  volatile ") > >() },
    { "p0613r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" NB comment GB Resolution of Core Issue  ") > >() },
    { "p0614r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Rangebased for statements with initializer ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Rangebased for statements with initializer ") > >() },
    { "p0615r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Renaming for structured bindings ") > >() },
    { "p0618r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Deprecating ltcodecvt ") > >() },
    { "p0619r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kaminxski ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kaminxski ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kamiski ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej Tomasz Kamiski ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith Alisdair Meredith Tomasz Kamiski ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") > >() },
    { "p0620r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Merrill ")) >(), wxS(" Drafting for class template argument deduction issues ") > >() },
    { "p0621r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ready Ranges TS Issues ") > >() },
    { "p0622r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Additional Core Language Working Group ready and tentatively ready Issues for the February  Kona meeting ") > >() },
    { "p0623r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Alisdair Meredith Anthony Williams ")) >(), wxS(" Final C Parallel Algorithms Fixes ") > >() },
    { "p0624r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Default constructible stateless lambdas ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Default constructible stateless lambdas ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Default constructible and assignable stateless lambdas ") > >() },
    { "p0625r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshal Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Kona ") > >() },
    { "p0627r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Melissa Mears ")) >(), wxS(" Attribute to mark unreachable code ") >, Rev< 1u, Arr64< Hash(wxS(" Melissa Mears ")) >(), wxS(" Attribute to mark unreachable code ") >, Rev< 3u, Arr64< Hash(wxS(" Melissa Mears ")) >(), wxS(" Function to mark unreachable code ") >, Rev< 5u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Function to mark unreachable code ") >, Rev< 6u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Function to mark unreachable code ") > >() },
    { "p0629r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Jason Merrill Nathan Sidwell ")) >(), wxS(" Module interface vs imiplementation ") > >() },
    { "p0630r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Duncan PN Exon Smith ")) >(), wxS(" To boldly suggest a pub crawl for C Toronto ") > >() },
    { "p0631r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lev Minkovsky ")) >(), wxS(" Math Constants ") >, Rev< 1u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 2u, Arr64< Hash(wxS(" Lev Minkovsky ")) >(), wxS(" Math Constants ") >, Rev< 3u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 4u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 5u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 6u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 7u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") >, Rev< 8u, Arr64< Hash(wxS(" Lev Minkovsky John McFarlane ")) >(), wxS(" Math Constants ") > >() },
    { "p0632r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Muumlller ")) >(), wxS(" Proposal of uninitialized attribute ") > >() },
    { "p0633r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Louis Dionne ")) >(), wxS(" Exploring the design space of metaprogramming and reflection ") > >() },
    { "p0634r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Down with typename ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde Nina Ranns ")) >(), wxS(" Down with typename ") >, Rev< 2u, Arr64< Hash(wxS(" Nina Ranns Daveed Vandevoorde ")) >(), wxS(" Down with typename ") >, Rev< 3u, Arr64< Hash(wxS(" Nina Ranns Daveed Vandevoorde ")) >(), wxS(" Down with typename ") > >() },
    { "p0635r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Add carray method to stdarray ") > >() },
    { "p0636r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Changes between C and C ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Changes between C and C ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Changes between C and C ") >, Rev< 3u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Changes between C and C ") > >() },
    { "p0637r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Capture this with initialize ") > >() },
    { "p0638r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ed Schouten ")) >(), wxS(" CrochemorePerrin search algorithm for stdsearch ") > >() },
    { "p0639r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin Alexander Zaitsev ")) >(), wxS(" Changing attack vector of the constexprvector ") > >() },
    { "p0640r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Emil Dotchevski Peter Dimov ")) >(), wxS(" Userdefined exception information and diagnostic information in exception objects ") > >() },
    { "p0641r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler Botond Ballo ")) >(), wxS(" Resolving Core Issue  const mismatch with defaulted copy constructor ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krugler Botond Ballo ")) >(), wxS(" Resolving Core Issue  const mismatch with defaulted copy constructor ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Krgler Botond Ballo ")) >(), wxS(" Resolving Core Issue  const mismatch with defaulted copy constructor ") > >() },
    { "p0642r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Structural Support for C Concurrency ") >, Rev< 1u, Arr64< Hash(wxS(" Mingxin Wang Wei Chen ")) >(), wxS(" Structural Support for C Concurrency ") >, Rev< 2u, Arr64< Hash(wxS(" Mingxin Wang Wei Chen ")) >(), wxS(" The Concurrent Invocation Library ") >, Rev< 3u, Arr64< Hash(wxS(" Mingxin Wang Wei Chen ")) >(), wxS(" The Concurrent Invocation Library ") >, Rev< 4u, Arr64< Hash(wxS(" Mingxin Wang Wei Chen ")) >(), wxS(" The Concurrent Invocation Library ") > >() },
    { "p0643r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Omnibus paperToronto  meeting ") > >() },
    { "p0644r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Forward without forward ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Forward without forward ") > >() },
    { "p0645r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 10u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 5u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 7u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Formatting ") >, Rev< 9u, Arr64< Hash(wxS(" Victor Zverovich  ")) >(), wxS(" Text Formatting ") > >() },
    { "p0646r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms I listforward list ") > >() },
    { "p0647r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Floating point value access for stdratio ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Floating point value access for stdratio ") > >() },
    { "p0648r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Extending Tuplelike algorithms to ProductTyp ") > >() },
    { "p0649r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" Other ProductType algorithms ") > >() },
    { "p0650r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C Monadic interface ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" C Monadic interface ") >, Rev< 2u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" C Monadic interface ") > >() },
    { "p0651r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Switch the Ranges TS to Use Variable Concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Switch the Ranges TS to Use Variable Concepts ") > >() },
    { "p0652r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Sergey Murylev Anton Malakhov Antony Polukhin ")) >(), wxS(" Concurrent associative data structure with unsynchronized view ") >, Rev< 2u, Arr64< Hash(wxS(" Sergey Murylev Anton Malakhov Antony Polukhin ")) >(), wxS(" Concurrent associative data structure with unsynchronized view ") >, Rev< 3u, Arr64< Hash(wxS(" Sergey Murylev Anton Malakhov Antony Polukhin ")) >(), wxS(" Concurrent associative data structure with unsynchronized view ") > >() },
    { "p0653r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Glen Joseph Fernandes ")) >(), wxS(" pointertraits utility to convert to raw pointer ") >, Rev< 1u, Arr64< Hash(wxS(" Glen Joseph Fernandes ")) >(), wxS(" Utility to convert a pointer to a raw pointer ") >, Rev< 2u, Arr64< Hash(wxS(" Glen Joseph Fernandes ")) >(), wxS(" Utility to convert a pointer to a raw pointer ") > >() },
    { "p0654r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Loic Joly ")) >(), wxS(" Explicit struct ") > >() },
    { "p0655r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park Agustiacuten Bergeacute ")) >(), wxS(" visitltR Explicit Return Type for visit ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Park Agustn Berg ")) >(), wxS(" visitltRgt Explicit Return Type for visit ") > >() },
    { "p0656r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Reducing ltratio ") > >() },
    { "p0657r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Deprecate Certain Declarations in the Global Namespace ") >, Rev< 1u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Deprecate Certain Declarations in the Global Namespace ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Deprecate Certain Declarations in the Global Namespace ") > >() },
    { "p0658r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Proposal for adding alias declarations to concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Proposal for adding alias declarations to concepts ") > >() },
    { "p0659r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Adding status to stdfuture ") > >() },
    { "p0660r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" A Cooperatively Interruptible Joining Thread ") >, Rev< 10u, Arr64< Hash(wxS(" Nicolai Josuttis Lewis Baker Billy ONeal Herb Sutter Anthony Williams ")) >(), wxS(" Stop Token and Joining Thread ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolai Josuttis Herb Sutter Anthony Williams ")) >(), wxS(" A Cooperatively Interruptible Joining Thread Rev  ") >, Rev< 3u, Arr64< Hash(wxS(" Nicolai Josuttis Herb Sutter Anthony Williams ")) >(), wxS(" A Cooperatively Interruptible Joining Thread ") >, Rev< 4u, Arr64< Hash(wxS(" Nicolai Josuttis Herb Sutter Anthony Williams ")) >(), wxS(" A Cooperatively Interruptible Joining Thread ") >, Rev< 5u, Arr64< Hash(wxS(" Nicolai Josuttis Herb Sutter Anthony Williams ")) >(), wxS(" A Cooperatively Interruptible Joining Thread ") >, Rev< 6u, Arr64< Hash(wxS(" Nicolai Josuttis Billy ONeal Herb Sutter Anthony Williams ")) >(), wxS(" A Cooperatively Interruptible Joining Thread Rev  ") >, Rev< 7u, Arr64< Hash(wxS(" Nicolai Josuttis Lewis Baker Billy ONeal Herb Sutter Anthony Williams ")) >(), wxS(" Interrupt Tokens and a Joining Thread Rev  ") >, Rev< 8u, Arr64< Hash(wxS(" Nicolai Josuttis Lewis Baker Billy ONeal Herb Sutter Anthony Williams ")) >(), wxS(" Stop Tokens and a Joining Thread ") >, Rev< 9u, Arr64< Hash(wxS(" Nicolai Josuttis Lewis Baker Billy ONeal Herb Sutter Anthony Williams ")) >(), wxS(" Stop Token and Joining Thread ") > >() },
    { "p0661r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Allan Deutsch ")) >(), wxS(" slotmap Container in C ") > >() },
    { "p0663r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges TS Ready Issues for the July  Toronto meeting ") > >() },
    { "p0664r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines TS Issues ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutines TS Issues ") >, Rev< 2u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 3u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 4u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 5u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 6u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 7u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") >, Rev< 8u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Coroutine TS Issues ") > >() },
    { "p0665r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tristan Brindle  ")) >(), wxS(" Allowing Class Template Specializations in Unrelated Namespaces ") >, Rev< 1u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" Allowing Class Template Specializations in Associated Namespaces revision  ") > >() },
    { "p0666r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alasdair Mackintosh ")) >(), wxS(" C Latches and Barriers ") >, Rev< 1u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Revised Latches and Barriers for C ") >, Rev< 2u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Revised Latches and Barriers for C ") > >() },
    { "p0667r0", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" The future of stdfuture extensions ") > >() },
    { "p0668r0", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") >, Rev< 2u, Arr64< Hash(wxS(" Hans J Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") >, Rev< 3u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") >, Rev< 4u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") >, Rev< 5u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Revising the C memory model ") > >() },
    { "p0670r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static reflection of functions ") >, Rev< 1u, Arr64< Hash(wxS(" Matuacutesxc Chochliacutek Axel Naumann David Sankel ")) >(), wxS(" Static reflection of functions ") >, Rev< 2u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel  ")) >(), wxS(" Static reflection of functions ") >, Rev< 3u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel ")) >(), wxS(" Function reflection ") >, Rev< 4u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel ")) >(), wxS(" Function reflection ") > >() },
    { "p0671r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Parametric Functions ") >, Rev< 1u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Parametric Functions ") >, Rev< 2u, Arr64< Hash(wxS(" Axel Naumann ")) >(), wxS(" Selfexplanatory Function Arguments ") > >() },
    { "p0672r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joeumll Falcou Peter Gottschling Herb Sutter ")) >(), wxS(" Implicit Evaluation of auto Variables ") > >() },
    { "p0673r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Merge Concurrency TS atomic pointers into C working draft ") > >() },
    { "p0674r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov Glen Fernandes ")) >(), wxS(" Extending makeshared to Support Arrays ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Dimov Glen Fernandes ")) >(), wxS(" Extending makeshared to Support Arrays ") > >() },
    { "p0675r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Numeric Traits for Type Composition ") > >() },
    { "p0676r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Felix Petriconi David Sankel Sean Parent ")) >(), wxS(" Towards a Good Future ") > >() },
    { "p0678r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" Business Requrements for Modules ") > >() },
    { "p0679r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" Forward progress vs futures and continuations ") > >() },
    { "p0680r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torvald Riegel ")) >(), wxS(" SG efficiency ") > >() },
    { "p0681r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincot ")) >(), wxS(" Precise Semantics for Assertions ") > >() },
    { "p0682r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Repairing elementary string conversions ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Repairing elementary string conversions ") > >() },
    { "p0683r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Default member initializers for bitfields ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Default member initializers for bitfields ") > >() },
    { "p0684r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" C Stability Velocity and Deployment Plans ") >, Rev< 2u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" C Stability Velocity and Deployment Plans ") > >() },
    { "p0685r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0686r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p0687r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruyman Reyes Gordon Brown Michael Wong Hartmut Kaiser ")) >(), wxS(" Data Movement in C ") > >() },
    { "p0688r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Kohlhoff Jared Hoberock Chris Mysen Gordon Brown ")) >(), wxS(" A Proposal to Simplify the Unified Executors Design ") > >() },
    { "p0689r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" A Word about Modules ") > >() },
    { "p0690r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Billy Robert ONeal III ")) >(), wxS(" Tearable Atomics ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Billy Robert ONeal III Andrew Hunter ")) >(), wxS(" Tearable Atomics ") > >() },
    { "p0691r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John H Spicer Hubert SK Tong Daveed Vandevoorde ")) >(), wxS(" Integrating Concepts Open items for consideration ") > >() },
    { "p0692r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Access Specifiers and Specializations ") >, Rev< 1u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Access Checking on Specializations ") > >() },
    { "p0694r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Function declarations using concepts ") > >() },
    { "p0695r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Alternative concepts ") > >() },
    { "p0696r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Remove abbreviated functions and templateintroduction syntax from the Concepts TS ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Remove abbreviated functions and templateintroduction syntax from the Concepts TS ") > >() },
    { "p0697r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Clarifying the status of feature test macros ") > >() },
    { "p0698r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshal Clow ")) >(), wxS(" C Standard Library Issues to be moved in Toronto ") > >() },
    { "p0699r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Toronto ") > >() },
    { "p0700r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Alternatives to operator dot ") > >() },
    { "p0701r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Back to the stdfuture ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Back to the stdfuture ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Micha Dominiak Hartmut Kaiser ")) >(), wxS(" Back to the stdfuture Part II ") > >() },
    { "p0702r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Language support for Constructor Template Argument Deduction ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Jason Merrill ")) >(), wxS(" Language support for Constructor Template Argument Deduction ") > >() },
    { "p0703r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Networking TS Issues ") > >() },
    { "p0704r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Fixing constqualified pointers to members ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Fixing constqualified pointers to members ") > >() },
    { "p0705r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Implicit and Explicit conversions ") > >() },
    { "p0706r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Efficient headers for modules or not ") > >() },
    { "p0707r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclasses ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclasses Generative C ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclasses Generative C ") >, Rev< 3u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclasses Generative C ") >, Rev< 4u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclasses Generative C ") >, Rev< 5u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Metaclass functions for generative C ") > >() },
    { "p0709r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Zerooverhead deterministic exceptions Throwing values ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Zerooverhead deterministic exceptions Throwing values ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Zerooverhead deterministic exceptions Throwing values ") >, Rev< 3u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Zerooverhead deterministic exceptions Throwing values ") >, Rev< 4u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Zerooverhead deterministic exceptions Throwing values ") > >() },
    { "p0710r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the July  Toronto meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the July  Toronto meeting ") > >() },
    { "p0711r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the July  Toronto meeting ") > >() },
    { "p0712r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Herb Sutter ")) >(), wxS(" Implementing language support for compiletime programming ") > >() },
    { "p0713r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Identifying Module Source Code ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Identifying Module Source ") > >() },
    { "p0714r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Identically Named Namespaces and nonExported Symbols ") > >() },
    { "p0715r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Exporting Using Directives ") > >() },
    { "p0716r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton ")) >(), wxS(" Unified concept definition syntax ") > >() },
    { "p0717r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton ")) >(), wxS(" Semantic constraint matching for concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton ")) >(), wxS(" Semantic constraint matching for concepts ") > >() },
    { "p0718r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Revising atomicsharedptr for C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Revising atomicsharedptr for C ") > >() },
    { "p0721r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Exporting Using Declarations ") > >() },
    { "p0722r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Controlling destruction in delete expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Hunter Richard Smith ")) >(), wxS(" Efficient sized delete for variable sized classes ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith Andrew Hunter ")) >(), wxS(" Efficient sized delete for variable sized classes ") >, Rev< 3u, Arr64< Hash(wxS(" Richard Smith Andrew Hunter ")) >(), wxS(" Efficient sized delete for variable sized classes ") > >() },
    { "p0723r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson John Spicer ")) >(), wxS(" Response to Clarifying the status of feature test macros ") > >() },
    { "p0724r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Merge the Concepts TS Working Draft into the C working draft ") > >() },
    { "p0725r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Remove the requirement for constrainedtypespecifiers to be deduced to the same type from the Concepts TS ") > >() },
    { "p0726r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Duncan PN Exon Smith ")) >(), wxS(" Does the Concepts TS Improve on C ") > >() },
    { "p0727r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Issue  Temporary objects vs temporary expressions ") > >() },
    { "p0728r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comment  ") > >() },
    { "p0729r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Proposed wording for Networking TS NB comment GB  ") > >() },
    { "p0730r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Options for addressing requiresclause syntax ambiguities ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Options for addressing requiresclause syntax ambiguities ") > >() },
    { "p0731r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Interface Imports ") > >() },
    { "p0732r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Class Types in NonType Template Parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Snyder Louis Dionne ")) >(), wxS(" Class Types in NonType Template Parameters ") >, Rev< 2u, Arr64< Hash(wxS(" Jeff Snyder Louis Dionne ")) >(), wxS(" Class Types in NonType Template Parameters ") > >() },
    { "p0734r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Wording Paper C extensions for Concepts ") > >() },
    { "p0735r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Will Deacon ")) >(), wxS(" Interaction of memoryorderconsume with release sequences ") >, Rev< 1u, Arr64< Hash(wxS(" Will Deacon Jade Alglave ")) >(), wxS(" Interaction of memoryorderconsume with release sequences ") > >() },
    { "p0736r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Nameless parameters and unutterable specializations ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Nameless parameters and unutterable specializations ") > >() },
    { "p0737r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Daniel Sunderland Michael Wong Thomas Rodgers Gordon Brown ")) >(), wxS(" Execution Context of Execution Agents ") > >() },
    { "p0738r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" I Stream You Stream We All Stream for istreamiterator ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" I Stream You Stream We All Stream for istreamiterator ") >, Rev< 2u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" I Stream You Stream We All Stream for istreamiterator ") > >() },
    { "p0739r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown Stephan T Lavavej ")) >(), wxS(" Some improvements to class template argument deduction integration into the standard library ") > >() },
    { "p0740r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges TS Immediate Issues from the July  Toronto meeting ") > >() },
    { "p0742r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comment resolutions ") > >() },
    { "p0745r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Concepts inplace syntax ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Concepts inplace syntax ") > >() },
    { "p0746r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comment  US ") > >() },
    { "p0747r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comments  GB and  GB ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comment  GB but not  GB ") > >() },
    { "p0748r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Wording for Networking PDTS ballot comments on reentrancy ") > >() },
    { "p0749r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Namespace Pervasiveness  Modules ") > >() },
    { "p0750r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Consume ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Paul E McKenney ")) >(), wxS(" Consume ") > >() },
    { "p0752r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" stdvector Destruction Order ") > >() },
    { "p0753r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad Pablo Halpern ")) >(), wxS(" Manipulators for C Synchronized Buffered Ostream ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad Pablo Halpern ")) >(), wxS(" Manipulators for C Synchronized Buffered Ostream ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad Pablo Halpern ")) >(), wxS(" Manipulators for C Synchronized Buffered Ostream ") > >() },
    { "p0754r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" ltversion ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" ltversiongt ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" ltversiongt ") > >() },
    { "p0756r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Lambda syntax should be more liberal in what it accepts ") > >() },
    { "p0757r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" regexiterator should be iterable ") > >() },
    { "p0758r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler ")) >(), wxS(" Implicit conversion traits and utility functions ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Implicit conversion traits and utility functions ") > >() },
    { "p0759r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krugler ")) >(), wxS(" fpos Requirements ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" fpos requirements ") > >() },
    { "p0761r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown Michael Wong ")) >(), wxS(" Executors Design Document ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown Michael Wong ")) >(), wxS(" Executors Design Document ") >, Rev< 2u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown Michael Wong ")) >(), wxS(" Executors Design Document ") > >() },
    { "p0766r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Fixing smallish functionality gaps in constraints ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Fixing smallish functionality gaps in constraints ") > >() },
    { "p0767r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Expunge POD ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Deprecate POD ") > >() },
    { "p0768r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Library Support for the Spaceship Comparison Operaton ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Library Support for the Spaceship Comparison Operator ") > >() },
    { "p0769r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Add shift to ltalgorithm ") >, Rev< 1u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Add shift to ltalgorithmgt ") >, Rev< 2u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Add shift to ltalgorithmgt ") > >() },
    { "p0770r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Kilburn ")) >(), wxS(" A Proposal to Specify Behavior in Case of Exception Allocation Failure ") > >() },
    { "p0771r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" stdfunction move operations should be noexcept ") >, Rev< 1u, Arr64< Hash(wxS(" Nevin Liber Pablo Halpern ")) >(), wxS(" stdfunction move constructor should be noexcept ") > >() },
    { "p0772r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nat Goodspeed ")) >(), wxS(" ExecutionAgent Local Storage ") >, Rev< 1u, Arr64< Hash(wxS(" Nat Goodspeed Michael Wong Paul McKenney Jared Hoberock H Carter Edwards Tony Tye Alex Voicu Gordon Brown Mark Hoemmen ")) >(), wxS(" Execution Agent Local Storage ") > >() },
    { "p0773r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Bob Steagall ")) >(), wxS(" Towards meaningful fancy pointers ") > >() },
    { "p0774r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Moduledecl location ") > >() },
    { "p0775r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" module partitions ") > >() },
    { "p0776r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Rebase the Concurrency TS onto C Standard ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Rebase the Parallelism TS onto the C Standard ") > >() },
    { "p0777r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Treating Unnecessary decay ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Treating Unnecessary decay ") > >() },
    { "p0778r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Names ") > >() },
    { "p0780r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Allow pack expansion in lambda initcapture ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Allow pack expansion in lambda initcapture ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Allow pack expansion in lambda initcapture ") > >() },
    { "p0781r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" A Modern C Signature for main ") > >() },
    { "p0782r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane Adam David Alan Martin Allan Deutsch ")) >(), wxS(" A Case for SimplifyingImproving Natural Syntax Concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Adam David Alan Martin Erich Keane ")) >(), wxS(" Constraining Concepts Overload Sets ") >, Rev< 2u, Arr64< Hash(wxS(" ADAM David Alan Martin Erich Keane Sean R Spillane ")) >(), wxS(" Constraining Concepts Overload Sets ") > >() },
    { "p0783r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Andrii Grynenko Jay Feldblum ")) >(), wxS(" Continuations without overcomplicating the future ") > >() },
    { "p0784r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne Richard Smith Daveed Vandevoorde ")) >(), wxS(" Standard containers and constexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne Richard Smith Nina Ranns Daveed Vandevoorde ")) >(), wxS(" Standard containers and constexpr ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne Richard Smith Nina Ranns Daveed Vandevoorde ")) >(), wxS(" Standard containers and constexpr ") >, Rev< 3u, Arr64< Hash(wxS(" Louis Dionne Richard Smith Nina Ranns Daveed Vandevoorde ")) >(), wxS(" More constexpr containers ") >, Rev< 4u, Arr64< Hash(wxS(" Louis Dionne Richard Smith Nina Ranns Daveed Vandevoorde ")) >(), wxS(" More constexpr containers ") >, Rev< 5u, Arr64< Hash(wxS(" Peter Dimov Louis Dionne Nina Ranns Richard Smith Daveed Vandevoorde ")) >(), wxS(" More constexpr containers ") >, Rev< 6u, Arr64< Hash(wxS(" Daveed Vandevoorde Peter DimovLouis Dionne Nina Ranns Richard Smith Daveed Vandevoorde ")) >(), wxS(" More constexpr containers ") >, Rev< 7u, Arr64< Hash(wxS(" Daveed Vandevoorde Peter DimovLouis Dionne Nina Ranns Richard Smith Daveed Vandevoorde ")) >(), wxS(" More constexpr containers ") > >() },
    { "p0785r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Runtimesized arrays and a C wrapper ") > >() },
    { "p0786r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escriba ")) >(), wxS(" SuccessOrFailure ValuedOrError and ValuedOrNone types ") >, Rev< 1u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" ValuedOrError and ValueOrNone types ") > >() },
    { "p0787r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Proclaimed Ownership ") > >() },
    { "p0788r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter Brown ")) >(), wxS(" Standard Library Specification in a Concepts and Contracts World ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Standard Library Specification in a Concepts and Contracts World ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Standard Library Specification in a Concepts and Contracts World ") >, Rev< 3u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Standard Library Specification in a Concepts and Contracts World ") > >() },
    { "p0789r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Range Adaptors and Utilities ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Range Adaptors and Utilities ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Range Adaptors and Utilities ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Range Adaptors and Utilities ") > >() },
    { "p0790r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Effect of operatorlt on the C Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Effect of operatorltgt on the C Standard Library ") >, Rev< 2u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Effect of operatorltgt on the C Standard Library ") > >() },
    { "p0791r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jakob Riedle ")) >(), wxS(" Concepts are Adjectives not Nouns ") > >() },
    { "p0792r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 1u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 10u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 11u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 12u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 13u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 14u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 2u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 3u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 4u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 5u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 6u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 7u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 8u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") >, Rev< 9u, Arr64< Hash(wxS(" Vittorio Romeo Zhihao Yuan Jarrad Waterloo ")) >(), wxS(" functionref a nonowning reference to a Callable ") > >() },
    { "p0793r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p0794r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes   ") > >() },
    { "p0796r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers ")) >(), wxS(" Supporting Heterogeneous  Distributed Computing Through Affinity ") >, Rev< 1u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Supporting Heterogeneous amp Distributed Computing Through Affinity ") >, Rev< 2u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Supporting Heterogeneous amp Distributed Computing Through Affinity ") >, Rev< 3u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Supporting Heterogeneous amp Distributed Computing Through Affinity ") > >() },
    { "p0797r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Matti Rintala Michael Wong Carter Edwards Patrice Roy Gordon Brown Mark Hoemmen ")) >(), wxS(" Handling Concurrent Exceptions with Executors ") >, Rev< 2u, Arr64< Hash(wxS(" Matti Rintala Michael Wong Carter Edwards Patrice Roy Gordon Brown Mark Hoemmen ")) >(), wxS(" Handling Concurrent Exceptions with Executors ") > >() },
    { "p0798r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Simon Brand ")) >(), wxS(" Monadic operations for stdoptional ") >, Rev< 2u, Arr64< Hash(wxS(" Simon Brand ")) >(), wxS(" Monadic operations for stdoptional ") >, Rev< 3u, Arr64< Hash(wxS(" Simon Brand ")) >(), wxS(" Monadic operations for stdoptional ") >, Rev< 4u, Arr64< Hash(wxS(" Simon Brand ")) >(), wxS(" Monadic operations for stdoptional ") >, Rev< 6u, Arr64< Hash(wxS(" Sy Brand ")) >(), wxS(" Monadic operations for stdoptional ") >, Rev< 8u, Arr64< Hash(wxS(" Simon Brand ")) >(), wxS(" Monadic operations for stdoptional ") > >() },
    { "p0799r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephen Michel Chris Szalwinski Michael Wong Hubert Tong ")) >(), wxS(" Programming vulnerabilities for C part of WG N ") >, Rev< 1u, Arr64< Hash(wxS(" Stephen Michel ")) >(), wxS(" Vulnerability descriptions for the programming language C ") > >() },
    { "p0800r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" The Concepts TS improves upon C ") > >() },
    { "p0801r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Extensions for Disambiguation Tags ") > >() },
    { "p0802r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes Nicolai Josuttis Walter E Brown Bob Steagall ")) >(), wxS(" Applying Concepts to the Standard Library ") > >() },
    { "p0803r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Endian Library Request for Comments ") > >() },
    { "p0804r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Impact of the Modules TS on the C tools ecosystem ") > >() },
    { "p0805r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Comparing containers ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Comparing Containers ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Comparing Containers ") > >() },
    { "p0806r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" Deprecate Implicit Capture of thist ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Deprecate implicit capture of this via  ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Deprecate implicit capture of this via  ") > >() },
    { "p0807r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Koumlppe ")) >(), wxS(" An Adjective Syntax for Concepts ") > >() },
    { "p0808r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Ranges Naming ") > >() },
    { "p0809r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Comparing Unordered Containers ") > >() },
    { "p0810r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Deane Jason Turner ")) >(), wxS(" constexpr in Practice ") > >() },
    { "p0811r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Davis Herring ")) >(), wxS(" Wellbehaved interpolation for numbers and pointers ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring  ")) >(), wxS(" Wellbehaved interpolation for numbers and pointers ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Wellbehaved interpolation for numbers and pointers ") >, Rev< 3u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Wellbehaved interpolation for numbers and pointers ") > >() },
    { "p0812r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Davis Herring ")) >(), wxS(" copylistinitialization is inherently un ") > >() },
    { "p0813r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" construct shall Return the Replaced Address ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" construct shall Return the Replaced Address ") > >() },
    { "p0814r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" hashcombine Again ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" hashcombine Again ") > >() },
    { "p0815r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Albuquerque ") > >() },
    { "p0816r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" No More Nested Namespaces in Library Design ") > >() },
    { "p0817r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group ready Issues for the November  Albuquerque meeting ") > >() },
    { "p0818r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the November  Albuquerque meeting ") >, Rev< 1u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the November  Albuquerque meeting ") > >() },
    { "p0819r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Formally Supporting Feature Macros ") > >() },
    { "p0820r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" Feedback on a hrefprpdfPRa ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" Feedback on a hrefprpdfPra ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" Feedback on P ") >, Rev< 3u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" Feedback on P ") >, Rev< 4u, Arr64< Hash(wxS(" Tim Shen Matthias Kretz ")) >(), wxS(" Feedback on P ") > >() },
    { "p0821r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas ")) >(), wxS(" Teaching Concepts TS Online ") > >() },
    { "p0822r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Modules Are a Tooling Opportunity ") > >() },
    { "p0824r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Charley Bay Odin Holmes Michael Wong ")) >(), wxS(" Summary of SG discussion on ltsystemerror towards exceptionless error handling ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Charley Bay Odin Holmes Michael Wong Niall Douglas ")) >(), wxS(" Summary of SG discussion on ltsystemerrorgt ") > >() },
    { "p0825r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" A friendlier tuple get ") >, Rev< 1u, Arr64< Hash(wxS(" Agustn Berg ")) >(), wxS(" A friendlier tuple get ") > >() },
    { "p0826r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustiacuten Bergeacute ")) >(), wxS(" SFINAEfriendly stdbind ") > >() },
    { "p0827r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane Louis Dionne ")) >(), wxS(" GeneralPurpose Constant Value Type ") > >() },
    { "p0828r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Elastic Integers ") >, Rev< 1u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Elastic Integers ") > >() },
    { "p0829r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding proposal ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Proposal ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Proposal ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Proposal ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Proposal ") > >() },
    { "p0831r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kaminxski ")) >(), wxS(" Keep alias syntax extendable ") > >() },
    { "p0832r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Module TS Does Not Support Intended Use Case ") > >() },
    { "p0834r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Dominiak ")) >(), wxS(" Lifting overload sets into objects ") > >() },
    { "p0835r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Adopt SD feature macros into the C working draft ") > >() },
    { "p0836r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Christopher Di Bella Michael Haidl Toomas Remmelg Ruyman Reyes Michel Steuwer Michael Wong ")) >(), wxS(" Introduce Parallelism to the Ranges TS ") >, Rev< 1u, Arr64< Hash(wxS(" Gordon Brown Christopher Di Bella Michael Haidl Toomas Remmelg Ruyman Reyes Michel Steuwer Michael Wong ")) >(), wxS(" Introduce Parallelism to the Ranges TS ") > >() },
    { "p0837r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ruminations on modular macros ") > >() },
    { "p0838r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe ")) >(), wxS(" A conditional transform algorithm for C ") > >() },
    { "p0839r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Recursive Lambdas ") > >() },
    { "p0840r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Lamguage support for empty objects ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Language support for empty objects ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Language support for empty objects ") > >() },
    { "p0841r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes Adrian Prantl Duncan P N Exon Smith ")) >(), wxS(" Modules at scale ") > >() },
    { "p0842r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Unknown Exports by Example ") > >() },
    { "p0843r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" fixedcapacityvector ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" fixedcapacityvector ") >, Rev< 10u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 11u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 12u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 13u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 14u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" staticvector ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" staticvector ") >, Rev< 4u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" staticvector ") >, Rev< 5u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" staticvector ") >, Rev< 6u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" staticvector ") >, Rev< 7u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 8u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") >, Rev< 9u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Timur Doumler Nevin Liber David Sankel ")) >(), wxS(" inplacevector ") > >() },
    { "p0844r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Monnon ")) >(), wxS(" Type functions and beyond ") > >() },
    { "p0845r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Common Subset of C and C Binders ") > >() },
    { "p0846r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" ADL and Function Templates that are not Visible ") > >() },
    { "p0847r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Simon Brand Ben Deane Barry Revzin ")) >(), wxS(" Deducing this ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Simon Brand Ben Deane Barry Revzin ")) >(), wxS(" Deducing this ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman Simon Brand Ben Deane Barry Revzin ")) >(), wxS(" Deducing this ") >, Rev< 4u, Arr64< Hash(wxS(" Gaper Aman Simon Brand Ben Deane Barry Revzin ")) >(), wxS(" Deducing this ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin Gaper Aman Sy Brand Ben Deane ")) >(), wxS(" Deducing this ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin Gaper Aman Sy Brand Ben Deane ")) >(), wxS(" Deducing this ") >, Rev< 7u, Arr64< Hash(wxS(" Barry Revzin Gaper Aman Sy Brand Ben Deane ")) >(), wxS(" Deducing this ") > >() },
    { "p0848r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" Conditionally Trivial Special Member Functions ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" Conditionally Trivial Special Member Functions ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" Conditionally Trivial Special Member Functions ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" Conditionally Trivial Special Member Functions ") > >() },
    { "p0849r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox DECAYCOPY in the language ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 4u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 5u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 6u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 7u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") >, Rev< 8u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" autox decaycopy in the language ") > >() },
    { "p0851r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" simdltTgt is neither a product type nor a container type ") > >() },
    { "p0856r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman H Carter Edwards Christian Trott ")) >(), wxS(" Restrict Access Property for mdspan and span ") > >() },
    { "p0857r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Wording for functionality gaps in constraints ") > >() },
    { "p0858r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr iterator requirements ") > >() },
    { "p0859r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Core Issue  When are constexpr member functions defined ") > >() },
    { "p0860r0", RevList< Rev< 0u, Arr64< Hash(wxS(" H Carter Edwards Christian Trott Daniel Sunderland ")) >(), wxS(" Atomic Access Property for span and mdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Dan Sunderland Christian Trott H Carter Edwards ")) >(), wxS(" Atomic Access Property for mdspan ") > >() },
    { "p0863r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Fixing the partialorder comparison algorithm ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Fixing the partialorder comparison algorithm ") > >() },
    { "p0864r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Albuquerque ") > >() },
    { "p0866r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nat Goodspeed Oliver Kowalke ")) >(), wxS(" Response to Fibers under the magnifying glass ") > >() },
    { "p0867r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Interface is Misleading ") > >() },
    { "p0868r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Andrew Hunter ")) >(), wxS(" Selected RCU Litmus Tests ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Andrew Hunter Jade Alglave Luc Maranget ")) >(), wxS(" Selected RCU Litmus Tests ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Andrew Hunter Jade Alglave Luc Maranget ")) >(), wxS(" Selected RCU Litmus Tests ") > >() },
    { "p0870r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") >, Rev< 3u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") >, Rev< 4u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") >, Rev< 5u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect narrowing conversions ") > >() },
    { "p0872r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Beman Dawes ")) >(), wxS(" Discussion Summary Applying Concepts to the Standard Library ") > >() },
    { "p0873r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" A plea for a consistent terse and intuitive declaration syntax ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin jabot ")) >(), wxS(" A plea for a consistent terse and intuitive declaration syntax ") > >() },
    { "p0874r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Syntax to anonymously refer to the current declaration contexts ") > >() },
    { "p0875r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" WG  Albuquerque Record of Discussion ") > >() },
    { "p0876r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Kowalke ")) >(), wxS(" fibers without scheduler ") >, Rev< 10u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 11u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 12u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 13u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 14u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 15u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 16u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 17u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 18u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 19u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 2u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 20u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 3u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fiberhandle  fibers without scheduler ") >, Rev< 5u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 6u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 8u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") >, Rev< 9u, Arr64< Hash(wxS(" Oliver Kowalke Nat Goodspeed ")) >(), wxS(" fibercontext  fibers without scheduler ") > >() },
    { "p0877r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes ")) >(), wxS(" A proposal for modular macros ") > >() },
    { "p0878r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Subobjects copy elision ") > >() },
    { "p0879r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr for swap and swap related functions ") > >() },
    { "p0880r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" Numbers interaction ") >, Rev< 1u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" Numbers interaction ") >, Rev< 2u, Arr64< Hash(wxS(" Igor Klevanets Antony Polukhin ")) >(), wxS(" Numbers interaction ") > >() },
    { "p0881r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexey Gorgurov Antony Polukhin ")) >(), wxS(" A Proposal to add stack trace library ") >, Rev< 1u, Arr64< Hash(wxS(" Alexey Gorgurov Antony Polukhin ")) >(), wxS(" A Proposal to add stack trace library ") >, Rev< 2u, Arr64< Hash(wxS(" Alexey Gorgurov Antony Polukhin ")) >(), wxS(" A Proposal to add stack trace library ") >, Rev< 3u, Arr64< Hash(wxS(" Alexey Gorgurov Antony Polukhin ")) >(), wxS(" A Proposal to add stacktrace library ") >, Rev< 4u, Arr64< Hash(wxS(" Alexey Gorgurov Antony Polukhin ")) >(), wxS(" A Proposal to add stacktrace library ") >, Rev< 5u, Arr64< Hash(wxS(" Antony Polukhin Antony Polukhin ")) >(), wxS(" A Proposal to add stacktrace library ") >, Rev< 6u, Arr64< Hash(wxS(" Antony Polukhin Alexey Gorgurov ")) >(), wxS(" A Proposal to add stacktrace library ") >, Rev< 7u, Arr64< Hash(wxS(" Antony Polukhin Alexey Gorgurov ")) >(), wxS(" A Proposal to add stacktrace library ") > >() },
    { "p0882r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yonggang Li ")) >(), wxS(" Userdefined Literals for stdfilesystempath ") > >() },
    { "p0883r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fixing Atomic Initialization ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fixing Atomic Initialization ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fixing Atomic Initialization ") > >() },
    { "p0884r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Extending the noexcept Policy ") > >() },
    { "p0886r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" The assume aligned attribute ") > >() },
    { "p0887r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" The identity metafunction ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" The identity metafunction ") > >() },
    { "p0888r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Jacksonville ") > >() },
    { "p0889r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin  ")) >(), wxS(" Ultimate copy elision ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Ultimate copy elision ") > >() },
    { "p0891r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Let strongorder Truly Be a Customization Point ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Everyone Deserves a Little Order ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman Jeff Snyder ")) >(), wxS(" Make strongorder a Customization Point ") > >() },
    { "p0892r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Stephan T Lavavej ")) >(), wxS(" explicitbool ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Stephan T Lavavej ")) >(), wxS(" explicitbool ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Stephan T Lavavej ")) >(), wxS(" explicitbool ") > >() },
    { "p0893r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Herb Sutter ")) >(), wxS(" Chaining Comparisons ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Herb Sutter ")) >(), wxS(" Chaining Comparisons ") > >() },
    { "p0894r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Dyachenko ")) >(), wxS(" realloc for C ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Dyachenko ")) >(), wxS(" realloc for C ") > >() },
    { "p0895r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis Tony van Eerd ")) >(), wxS(" Renaming cellltgt to latestltgt ") > >() },
    { "p0896r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Merging the Ranges TS ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Merging the Ranges TS ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler Casey Carter Christopher Di Bella ")) >(), wxS(" The One Ranges Proposal ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler Casey Carter Christopher Di Bella ")) >(), wxS(" The One Ranges Proposal ") >, Rev< 4u, Arr64< Hash(wxS(" Eric Niebler Casey Carter Christopher Di Bella ")) >(), wxS(" The One Ranges Proposal ") > >() },
    { "p0897r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrey Semashev ")) >(), wxS(" Supporting offsetof for All Classes ") > >() },
    { "p0898r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Standard Library Concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Standard Library Concepts ") >, Rev< 2u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Standard Library Concepts ") >, Rev< 3u, Arr64< Hash(wxS(" Casey Carter Eric Niebler ")) >(), wxS(" Standard Library Concepts ") > >() },
    { "p0899r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" LWG  is Not a Defect ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" LWG  is Not a Defect ") > >() },
    { "p0900r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman ")) >(), wxS(" An Ontology for Properties of mdspan ") > >() },
    { "p0901r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Hunter Chris Kennelly ")) >(), wxS(" Size feedback in operator new ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Hunter Chris Kennelly ")) >(), wxS(" Size feedback in operator new ") >, Rev< 10u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter Thomas Kppe ")) >(), wxS(" Size feedback in operator new ") >, Rev< 11u, Arr64< Hash(wxS(" Thomas Kppe Andrew Hunter Chris Kennelly ")) >(), wxS(" Size feedback in operator new ") >, Rev< 2u, Arr64< Hash(wxS(" Andrew Hunter Chris Kennelly ")) >(), wxS(" Size feedback in operator new ") >, Rev< 3u, Arr64< Hash(wxS(" Andrew Hunter Chris Kennelly ")) >(), wxS(" Size feedback in operator new ") >, Rev< 4u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") >, Rev< 5u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") >, Rev< 6u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") >, Rev< 7u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") >, Rev< 8u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") >, Rev< 9u, Arr64< Hash(wxS(" Chris Kennelly Andrew Hunter ")) >(), wxS(" Size feedback in operator new ") > >() },
    { "p0902r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Hunter ")) >(), wxS(" Moveonly iterators ") > >() },
    { "p0903r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ashley Hedberg ")) >(), wxS(" Define basicstringviewnullptr and basicstringnullptr  ") >, Rev< 1u, Arr64< Hash(wxS(" Ashley Hedberg ")) >(), wxS(" Define basicstringviewnullptr ") >, Rev< 2u, Arr64< Hash(wxS(" Ashley Hedberg Titus Winters Jorg Brown ")) >(), wxS(" Define basicstringviewnullptr ") > >() },
    { "p0904r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Andrii Grynenko Jay Feldblum ")) >(), wxS(" A strawman Future API ") > >() },
    { "p0905r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski Herb Sutter Richard Smith ")) >(), wxS(" Symmetry for spaceship ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski Herb Sutter Richard Smith ")) >(), wxS(" Symmetry for spaceship ") > >() },
    { "p0906r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer  ")) >(), wxS(" Improvement suggestions for the Modules TS ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Improvement suggestions for the Modules TS ") > >() },
    { "p0907r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Signed Integers are Twos Complement ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Signed Integers are Twos Complement ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Signed Integers are Twos Complement ") >, Rev< 3u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Signed Integers are Twos Complement ") >, Rev< 4u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Signed Integers are Twos Complement ") > >() },
    { "p0908r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eddie Kohler ")) >(), wxS(" Offsetof for Pointers to Members ") > >() },
    { "p0909r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Module TS Supports Legacy Integration ") > >() },
    { "p0911r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Rebase the Coroutines TS onto the C Standard ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Rebase the Coroutines TS onto the C Standard ") > >() },
    { "p0912r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") >, Rev< 2u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") >, Rev< 3u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") >, Rev< 4u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") >, Rev< 5u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Merge Coroutines TS into C working draft ") > >() },
    { "p0913r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Add symmetric coroutine control transfer ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Add symmetric coroutine control transfer ") > >() },
    { "p0914r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Add parameter preview to coroutine promise constructor ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Add parameter preview to coroutine promise constructor ") > >() },
    { "p0915r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo  John Lakos ")) >(), wxS(" Conceptconstrained auto ") > >() },
    { "p0916r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Naming implementationdefined simdabi tag types ") > >() },
    { "p0917r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Making operator overloadable ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Making operator overloadable ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Making operator overloadable ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Making operator overloadable ") > >() },
    { "p0918r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" More simdltgt Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" More simdltgt Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Shen ")) >(), wxS(" More simdltgt Operations ") > >() },
    { "p0919r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Heterogeneous lookup for unordered containers ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Heterogeneous lookup for unordered containers ") >, Rev< 2u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Heterogeneous lookup for unordered containers ") >, Rev< 3u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Heterogeneous lookup for unordered containers ") > >() },
    { "p0920r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Precalculated hash values in lookup ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Precalculated hash values in lookup ") >, Rev< 2u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Precalculated hash values in lookup ") > >() },
    { "p0921r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" Standard Library Compatibility Promises ") >, Rev< 2u, Arr64< Hash(wxS(" Titus Winters Ashley Hedberg ")) >(), wxS(" Standard Library Compatibility ") > >() },
    { "p0922r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" LEWG wishlist for EWG ") > >() },
    { "p0923r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Dependent ADL ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" ModulesDependent ADL ") > >() },
    { "p0924r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules ContextSensitive Keyword ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" ModulesContextSensitive Keyword ") > >() },
    { "p0925r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Unqualified Using Declarations  ") > >() },
    { "p0927r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Dennett Geoff Romer ")) >(), wxS(" Towards A Lazy Forwarding Mechanism for C ") >, Rev< 1u, Arr64< Hash(wxS(" James Dennett Geoff Romer ")) >(), wxS(" Towards A Lazy Forwarding Mechanism for C ") >, Rev< 2u, Arr64< Hash(wxS(" James Dennett Geoff Romer ")) >(), wxS(" Towards A Lazy Forwarding Mechanism for C ") > >() },
    { "p0928r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoff Romer Chandler Carruth ")) >(), wxS(" Mitigating Speculation Attacks in C ") >, Rev< 1u, Arr64< Hash(wxS(" Devin Jeanpierre Geoffrey Romer Chandler Carruth ")) >(), wxS(" Mitigating Spectre v Attacks in C ") > >() },
    { "p0929r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer  ")) >(), wxS(" Checking for abstract class types ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Checking for abstract class types ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Checking for abstract class types ") > >() },
    { "p0930r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Andrii Grynenko Jay Feldblum ")) >(), wxS(" Semifying Awaitables ") > >() },
    { "p0931r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Structured bindings with polymorphic lambas ") > >() },
    { "p0932r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Tightening the constraints on stdfunction ") >, Rev< 1u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Tightening the constraints on stdfunction ") > >() },
    { "p0933r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Runtime type introspection with stdexception ptr ") >, Rev< 1u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Runtime type introspection with stdexceptionptr ") > >() },
    { "p0934r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" A Modest Proposal Fixing ADL ") > >() },
    { "p0935r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song  ")) >(), wxS(" Eradicating unnecessarily explicit default constructors from the standard library ") > >() },
    { "p0936r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Nicolai Josuttis ")) >(), wxS(" Bind ReturnedInitialized Objects to the Lifetime of Parameters  ") > >() },
    { "p0937r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes   ") > >() },
    { "p0938r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p0939r0", RevList< Rev< 0u, Arr64< Hash(wxS(" B Dawes H Hinnant B Stroustrup D Vandevoorde M Wong ")) >(), wxS(" Direction for ISO C ") >, Rev< 1u, Arr64< Hash(wxS(" H Hinnant R Orr B Stroustrup D Vandevoorde M Wong ")) >(), wxS(" Directions for ISO C ") >, Rev< 2u, Arr64< Hash(wxS(" H Hinnant R Orr B Stroustrup D Vandevoorde M Wong ")) >(), wxS(" Direction for ISO C ") >, Rev< 3u, Arr64< Hash(wxS(" H Hinnant R Orr B Stroustrup D Vandevoorde M Wong ")) >(), wxS(" Direction for ISO C ") >, Rev< 4u, Arr64< Hash(wxS(" Howard Hinnant R Orr B Stroustrup D Vandevoorde M Wong ")) >(), wxS(" Direction for ISO C ") > >() },
    { "p0940r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Olivier Giroux ")) >(), wxS(" Concurrency TS is growing Concurrent Utilities and Data Structures ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong Olivier Giroux ")) >(), wxS(" Concurrency TS is growing Concurrent Utilities and Data Structures ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Wong Olivier Giroux ")) >(), wxS(" Concurrency TS is growing Concurrent Utilities and Data Structures ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Wong Olivier Giroux ")) >(), wxS(" Concurrency TS is growing Concurrent Utilities and Data Structures ") > >() },
    { "p0941r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Clark Nelson ")) >(), wxS(" Integrating featuretest macros into the C WD ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Integrating featuretest macros into the C WD ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen Jonathan Wakely ")) >(), wxS(" Integrating featuretest macros into the C WD ") > >() },
    { "p0942r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer  ")) >(), wxS(" Introducing a ltsmartptrgt header ") > >() },
    { "p0943r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans J Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 2u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 3u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 4u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 5u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Support C atomics in C ") >, Rev< 6u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Support C atomics in C ") > >() },
    { "p0944r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Contiguous Ranges ") > >() },
    { "p0945r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Generalizing alias declarations ") > >() },
    { "p0946r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Towards consistency between ltgt and other comparison operators ") > >() },
    { "p0947r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Another take on Modules ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Another take on Modules ") > >() },
    { "p0949r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Adding support for typebased metaprogramming to the standard library ") > >() },
    { "p0952r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe Davis Herring ")) >(), wxS(" A new specification for stdgeneratecanonical ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Koeppe Davis Herring ")) >(), wxS(" A new specification for stdgeneratecanonical ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Kppe Davis Herring ")) >(), wxS(" A new specification for stdgeneratecanonical ") > >() },
    { "p0953r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel ")) >(), wxS(" constexpr reflexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann David Sankel Andrew Sutton ")) >(), wxS(" constexpr reflexpr ") >, Rev< 2u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann and David Sankel ")) >(), wxS(" constexpr reflexpr ") > >() },
    { "p0954r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" What do we want to do with reflection ") > >() },
    { "p0955r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Modules and macros ") > >() },
    { "p0956r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Answers to concept syntax suggestions ") > >() },
    { "p0957r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" PFA A Generic Extendable and Efficient Solution for Polymorphic Programming ") >, Rev< 1u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" PFA A Generic Extendable and Efficient Solution for Polymorphic Programming ") >, Rev< 2u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" PFA A Generic Extendable and Efficient Solution for Polymorphic Programming ") >, Rev< 3u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" PFA A Generic Extendable and Efficient Solution for Polymorphic Programming ") >, Rev< 4u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" PFA A Generic Extendable and Efficient Solution for Polymorphic Programming ") >, Rev< 5u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A Polymorphic Programming Library ") >, Rev< 6u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A Polymorphic Programming Library ") >, Rev< 7u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A Polymorphic Programming Library ") >, Rev< 8u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A Polymorphic Programming Library ") >, Rev< 9u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A Polymorphic Programming Library ") > >() },
    { "p0958r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to support proposed Executors TS ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to support proposed Executors TS ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to support proposed Executors TS ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to support proposed Executors TS ") > >() },
    { "p0959r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marius Bancila ")) >(), wxS(" A Proposal for a Universally Unique Identifier Library ") >, Rev< 1u, Arr64< Hash(wxS(" Marius Bancila ")) >(), wxS(" A Proposal for a Universally Unique Identifier Library ") >, Rev< 2u, Arr64< Hash(wxS(" Marius Bancila Tony van Eerd ")) >(), wxS(" A Proposal for a Universally Unique Identifier Library ") > >() },
    { "p0960r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Allow initializing aggregates from a parenthesized list of values ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Allow initializing aggregates from a parenthesized list of values ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen Thomas Kppe ")) >(), wxS(" Allow initializing aggregates from a parenthesized list of values ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen Thomas Kppe ")) >(), wxS(" Allow initializing aggregates from a parenthesized list of values ") > >() },
    { "p0961r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Relaxing the structured bindings customization point finding rules ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Relaxing the structured bindings customization point finding rules ") > >() },
    { "p0962r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Relaxing the rangefor loop customization point finding rules ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Relaxing the rangefor loop customization point finding rules ") > >() },
    { "p0963r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Structured binding declaration as a condition ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Structured binding declaration as a condition ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Structured binding declaration as a condition ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Structured binding declaration as a condition ") > >() },
    { "p0964r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Finding the right set of traits for simdltTgt ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Finding the right set of traits for simdltTgt ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Finding the right set of traits for simdltTgt ") > >() },
    { "p0965r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Initializers of objects with automatic and dynamic storage duration have funny inconsistencies ") > >() },
    { "p0966r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Zeren Andrew Luo ")) >(), wxS(" stringreserve Should Not Shrink ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Zeren Andrew Luo ")) >(), wxS(" stringreserve Should Not Shrink ") > >() },
    { "p0968r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller  ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the March  Jacksonville meeting ") > >() },
    { "p0969r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Allow structured bindings to accessible members ") > >() },
    { "p0970r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Better Safer Range Access Customization Points ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Better Safer Range Access Customization Points ") > >() },
    { "p0972r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Billy Robert ONeal III ")) >(), wxS(" ltchronogt zero min and max should be noexcept ") > >() },
    { "p0973r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoff Romer James Dennett ")) >(), wxS(" Coroutines TS Use Cases and Design Issues ") > >() },
    { "p0974r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Ringle ")) >(), wxS(" A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration ") > >() },
    { "p0975r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Impact of coroutines on current and upcoming library facilities ") > >() },
    { "p0976r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" The Evils of Paradigms ") > >() },
    { "p0977r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Remember the Vasa ") > >() },
    { "p0978r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" A Response to Pr Coroutines TS Use Cases and Design Issues ") > >() },
    { "p0980r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Making stdstring constexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Making stdstring constexpr ") > >() },
    { "p0981r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Gor Nishanov ")) >(), wxS(" Halo coroutine Heap Allocation eLision Optimization the joint response ") > >() },
    { "p0982r0", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Weaken Release Sequences ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm Olivier Giroux Viktor Vafeiades ")) >(), wxS(" Weaken release sequences ") > >() },
    { "p0983r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Richard Smith ")) >(), wxS(" Plan of Record for Making C Modules Available in C Standards ") > >() },
    { "p0984r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" All Pointers Replaced by Ideal Lambdas ") > >() },
    { "p0985r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" LWG Chair postmeeting report ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" LWG Chair postmeeting report ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" LWG Chair postmeeting report ") >, Rev< 3u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" LWG Chair postmeeting report ") >, Rev< 4u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" LWG Chair postmeeting report ") > >() },
    { "p0986r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith David Jones ")) >(), wxS(" Comparison of Modules Proposals ") > >() },
    { "p0987r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" polymorphicallocatorltbytegt instead of typeerasure ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" polymorphicallocator instead of typeerasure ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" polymorphicallocator instead of typeerasure ") > >() },
    { "p0988r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Ruminations on D graphics in the C International Standard ") > >() },
    { "p0989r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Standardizing Extended Integers ") > >() },
    { "p0990r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Rebuttal of Implementation Concerns for Bit Entanglement ") > >() },
    { "p0991r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Comparison of Stackful Coroutine Proposals ") > >() },
    { "p0992r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Translation and evaluation ") > >() },
    { "p0993r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Herb Sutter ")) >(), wxS(" Valuebased Reflection ") > >() },
    { "p0994r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Adam David Alan Martin Jason Carey ")) >(), wxS(" String View Conversion for Function Arguments ") > >() },
    { "p0995r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Olivier Giroux Andrew Hunter ")) >(), wxS(" Improving atomicflag ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Olivier Giroux Andrew Hunter ")) >(), wxS(" Improving atomicflag ") > >() },
    { "p0996r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Rebase Library Fundamentals TS on C ") > >() },
    { "p0997r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ADAM David Alan Martin Eric Keane ")) >(), wxS(" Retire Pernicious Language Constructs in Module Contexts ") > >() },
    { "p0999r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Dennett ")) >(), wxS(" More Natural Arithmetic in C ") > >() },
    { "p1000r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 3u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 4u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 5u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") >, Rev< 6u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" C IS schedule ") > >() },
    { "p1001r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Target Vectorization Policies from Parallelism V TS to C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Target Vectorization Policies from Parallelism V TS to C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith Pablo Halpern ")) >(), wxS(" Target Vectorization Policies from Parallelism V TS to C ") > >() },
    { "p1002r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Trycatch blocks in constexpr functions ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Trycatch blocks in constexpr functions ") > >() },
    { "p1003r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Jacksonville ") > >() },
    { "p1004r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Making stdvector constexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Making stdvector constexpr ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Making stdvector constexpr ") > >() },
    { "p1005r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach S Davis Herring ")) >(), wxS(" namespace std  namespace fs  filesystem  ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Davis Herring ")) >(), wxS(" namespace std  namespace fs  filesystem  ") > >() },
    { "p1006r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Constexpr in stdpointertraits ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Constexpr in stdpointertraits ") > >() },
    { "p1007r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Chandler Carruth ")) >(), wxS(" stdassumealigned ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Chandler Carruth ")) >(), wxS(" stdassumealigned ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Chandler Carruth ")) >(), wxS(" stdassumealigned ") >, Rev< 3u, Arr64< Hash(wxS(" Timur Doumler Chandler Carruth ")) >(), wxS(" stdassumealigned ") > >() },
    { "p1008r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Arthur ODwyer Richard Smith Howard E Hinnant ")) >(), wxS(" Prohibit aggregate types with userdeclared constructors ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Arthur ODwyer Richard Smith Howard E Hinnant Nicolai Josuttis ")) >(), wxS(" Prohibit aggregates with userdeclared constructors ") > >() },
    { "p1009r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Array size deduction in newexpressions ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Array size deduction in newexpressions ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Array size deduction in newexpressions ") > >() },
    { "p1010r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Zeren Chris Kennelly ")) >(), wxS(" Container support for implicit lifetime types ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Zeren Chris Kennelly ")) >(), wxS(" Container support for implicit lifetime types ") > >() },
    { "p1011r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Adam David Alan Martin ")) >(), wxS(" Constant Pointer View  stdasconst Strikes Back ") > >() },
    { "p1012r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Frank Zingsheim ")) >(), wxS(" Ternary Right Fold Expression ") >, Rev< 1u, Arr64< Hash(wxS(" Frank Zingsheim ")) >(), wxS(" Ternary Right Fold Expression ") > >() },
    { "p1013r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe Hubert SK Tong ")) >(), wxS(" Explicit concept expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe Hubert SK Tong ")) >(), wxS(" Explicit concept expressions ") > >() },
    { "p1014r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Nevin Liber ")) >(), wxS(" A Unit Type for C ") > >() },
    { "p1015r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy ")) >(), wxS(" WG  Jacksonville Record of Discussion ") > >() },
    { "p1016r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" A few additional type manipulation utilities ") > >() },
    { "p1017r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hartmut Kaiser John Biddiscombe ")) >(), wxS(" Executors should be variadic ") > >() },
    { "p1018r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution status after Jacksonville  ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution status after Rapperswil  ") >, Rev< 10u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 11u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 12u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 13u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 14u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 15u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 16u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 17u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 18u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 19u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution status after San Diego  ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution status after Kona  ") >, Rev< 4u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Evolution status after Cologne  ") >, Rev< 5u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Language Evolution status after Belfast  ") >, Rev< 6u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Language Evolution status after Prague  ") >, Rev< 7u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 8u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") >, Rev< 9u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" C Language Evolution status  pandemic edition   ") > >() },
    { "p1019r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Integrating Executors with Parallel Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Integrating Executors with Parallel Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Integrating Executors with Parallel Algorithms ") > >() },
    { "p1020r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Glen Joseph Fernandes Peter Dimov ")) >(), wxS(" Smart pointer creation with default initialization ") >, Rev< 1u, Arr64< Hash(wxS(" Glen Joseph Fernandes Peter Dimov ")) >(), wxS(" Smart pointer creation with default initialization ") > >() },
    { "p1021r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Extensions to Class Template Argument Deduction ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus  Timur Doumler  Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus  Timur Doumler  Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") >, Rev< 3u, Arr64< Hash(wxS(" Mike Spertus  Timur Doumler  Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") >, Rev< 4u, Arr64< Hash(wxS(" Mike Spertus Timur Doumler Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") >, Rev< 5u, Arr64< Hash(wxS(" Mike Spertus Timur Doumler Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") >, Rev< 6u, Arr64< Hash(wxS(" Mike Spertus Timur Doumler Richard Smith ")) >(), wxS(" Filling holes in Class Template Argument Deduction ") > >() },
    { "p1022r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Maged M Michael Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt ")) >(), wxS(" Material for  JAX Discussions of Hazard Pointer and ReadCopyUpdate RCU ") > >() },
    { "p1023r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" constexpr comparison operators for stdarray ") > >() },
    { "p1024r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" Usability Enhancements for stdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" Usability Enhancements for stdspan ") >, Rev< 2u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" Usability Enhancements for stdspan ") >, Rev< 3u, Arr64< Hash(wxS(" Tristan Brindle ")) >(), wxS(" Usability Enhancements for stdspan ") > >() },
    { "p1025r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Update The Reference To The Unicode Standard ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey JeanHeyd Meneide Martinho Fernandes ")) >(), wxS(" Update The Reference To The Unicode Standard ") > >() },
    { "p1026r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" A call for a Data Persistence iostream v study group ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" A call for an Elsewhere Memory study group ") > >() },
    { "p1028r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object for P Zerooverhead deterministic exceptions ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" statuscode and standard error object for P Zerooverhead deterministic exceptions ") >, Rev< 2u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object for P Zerooverhead deterministic exceptions ") >, Rev< 3u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object ") >, Rev< 4u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object ") >, Rev< 5u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object ") >, Rev< 6u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG statuscode and standard error object ") > >() },
    { "p1029r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" SG moverelocates ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" moverelocates ") >, Rev< 2u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" move  relocates ") >, Rev< 3u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" move  bitcopies ") > >() },
    { "p1030r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 2u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 3u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 4u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 5u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 6u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 7u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") >, Rev< 8u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" stdfilesystempathview ") > >() },
    { "p1031r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Low level file io library ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Low level file io library ") >, Rev< 2u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Low level file io library ") > >() },
    { "p1032r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Misc constexpr bits ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Misc constexpr bits ") > >() },
    { "p1033r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter Christopher Di Bella ")) >(), wxS(" Rangify the uninitialised memory algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter Christopher Di Bella ")) >(), wxS(" Rangify the uninitialised memory algorithms ") > >() },
    { "p1035r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Input range adaptors ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Input range adaptors ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input range adaptors ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input range adaptors ") >, Rev< 4u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input range adaptors ") >, Rev< 5u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input Range Adaptors ") >, Rev< 6u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input Range Adaptors ") >, Rev< 7u, Arr64< Hash(wxS(" Christopher Di Bella Casey Carter Corentin Jabot ")) >(), wxS(" Input Range Adaptors ") > >() },
    { "p1037r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Deep Integration of the Ranges TS ") > >() },
    { "p1039r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide Nicole Mazzuca Arvid Gerstmann ")) >(), wxS(" I got you FAM Flexible Array Members for C ") > >() },
    { "p1040r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed ") >, Rev< 5u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed and depend ") >, Rev< 6u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed and depend ") >, Rev< 7u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdembed and depend ") > >() },
    { "p1041r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martinho Fernandes ")) >(), wxS(" Make chartchart string literals be UTF ") >, Rev< 1u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Make chartchart string literals be UTF ") >, Rev< 3u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Make chartchart string literals be UTF ") >, Rev< 4u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Make chartchart string literals be UTF ") > >() },
    { "p1042r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" VAOPT wording clarifications ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" VAOPT wording clarifications ") > >() },
    { "p1043r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Nevin Liber ")) >(), wxS(" Narrow contracts in stringview versus a hrefprpdfPRa ") > >() },
    { "p1044r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Rodgers H Carter Edwards Mark Hoemmen ")) >(), wxS(" stdasync in an Executors World ") > >() },
    { "p1045r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" constexpr Function Parameters ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" constexpr Function Parameters ") > >() },
    { "p1046r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Automatically Generate More Operators ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Automatically Generate More Operators ") >, Rev< 2u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Automatically Generate More Operators ") > >() },
    { "p1048r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Juan Alday ")) >(), wxS(" A proposal for a type trait to detect scoped enumerations ") >, Rev< 1u, Arr64< Hash(wxS(" Juan Alday ")) >(), wxS(" A proposal for a type trait to detect scoped enumerations ") > >() },
    { "p1050r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fractional Numeric Type ") >, Rev< 1u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Fractional Numeric Type ") > >() },
    { "p1051r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vicente J Botet Escrib ")) >(), wxS(" stdexperimentalexpected LWG design issues ") > >() },
    { "p1052r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" Modules Macros and Build Systems ") > >() },
    { "p1053r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Eric Niebler ")) >(), wxS(" Futureproofing continuations for executors ") >, Rev< 1u, Arr64< Hash(wxS(" Lee Howes Eric Niebler ")) >(), wxS(" Futureproofing continuations for executors ") > >() },
    { "p1054r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Bryce Adelstein Lelbach David S Hollman Micha Dominiak ")) >(), wxS(" A Unified Futures Proposal for C ") > >() },
    { "p1055r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop Eric Niebler Lee Howes ")) >(), wxS(" A Modest Executor Proposal ") > >() },
    { "p1056r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Gor Nishanov ")) >(), wxS(" Add coroutine task type ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker Gor Nishanov ")) >(), wxS(" Add lazy coroutine coroutine task type ") > >() },
    { "p1059r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Rodgers ")) >(), wxS(" Adapting Asio to use stdexpected ") > >() },
    { "p1061r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 10u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 7u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 8u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") >, Rev< 9u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Structured Bindings can introduce a Pack ") > >() },
    { "p1062r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux Zach Laine Corentin Jabot Vittorio Romeo ")) >(), wxS(" Diet Graphics ") > >() },
    { "p1063r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoff Romer James Dennett Chandler Carruth ")) >(), wxS(" Core Coroutines ") >, Rev< 1u, Arr64< Hash(wxS(" Geoff Romer James Dennett Chandler Carruth ")) >(), wxS(" Core Coroutines ") >, Rev< 2u, Arr64< Hash(wxS(" Geoff Romer James Dennett Chandler Carruth ")) >(), wxS(" Core Coroutines ") > >() },
    { "p1064r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov Vassil Vassilev ")) >(), wxS(" Allowing Virtual Function Calls in Constant Expressions ") > >() },
    { "p1065r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr INVOKE ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski Barry Revzin ")) >(), wxS(" constexpr INVOKE ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Tomasz Kaminski ")) >(), wxS(" constexpr INVOKE ") > >() },
    { "p1066r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Stearn ")) >(), wxS(" How to catch an exceptionptr without even trying ") >, Rev< 1u, Arr64< Hash(wxS(" Mathias Stearn ")) >(), wxS(" How to catch an exceptionptr without even trying ") > >() },
    { "p1067r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" C Dependency Management Package Consumption vs Development ") > >() },
    { "p1068r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ilya Burylov Alexey Kukanov Ruslan Arutyunyan Andrey Nikolaev Pablo Halpern ")) >(), wxS(" Vector API for random number generation ") >, Rev< 1u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Vector API for random number generation ") >, Rev< 10u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") >, Rev< 11u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") >, Rev< 2u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Vector API for random number generation ") >, Rev< 3u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Vector API for random number generation ") >, Rev< 4u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Vector API for random number generation ") >, Rev< 5u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Vector API for random number generation ") >, Rev< 6u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") >, Rev< 7u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") >, Rev< 8u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") >, Rev< 9u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Vector API for random number generation ") > >() },
    { "p1069r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown Stephan T Lavavej ")) >(), wxS(" Refining standard library support for Class Template Argument Deduction ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Walter E Brown Stephan T Lavavej ")) >(), wxS(" Inferencing heap objects ") > >() },
    { "p1070r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes  ") > >() },
    { "p1071r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes   ") > >() },
    { "p1072r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" Default Initialization for basicstring ") >, Rev< 1u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" Optimized Initialization for basicstring and vector ") >, Rev< 10u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizeandoverwrite ") >, Rev< 2u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizedefaultinit ") >, Rev< 3u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizedefaultinit ") >, Rev< 4u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizedefaultinit ") >, Rev< 5u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizedefaultinit ") >, Rev< 6u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizeandoverwrite ") >, Rev< 7u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizeandoverwrite ") >, Rev< 8u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizeandoverwrite ") >, Rev< 9u, Arr64< Hash(wxS(" Chris Kennelly Mark Zeren ")) >(), wxS(" basicstringresizeandoverwrite ") > >() },
    { "p1073r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" constexpr functions ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" constexpr functions ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" Immediate functions ") >, Rev< 3u, Arr64< Hash(wxS(" Richard Smith Andrew Sutton Daveed Vandevoorde ")) >(), wxS(" Immediate functions ") > >() },
    { "p1074r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged Michael David Goldblatt Michael Wong Paul McKenney ")) >(), wxS(" CWG defect Defined Behavior of Invalid Pointers ") > >() },
    { "p1076r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Editorial clause reorganization ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Editorial clause reorganization ") > >() },
    { "p1077r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Allowing Virtual Destructors to be Trivial ") > >() },
    { "p1079r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" A minimal solution to the concepts syntax problems ") > >() },
    { "p1080r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1081r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy Collin Gress ")) >(), wxS(" On empty structs in the standard library ") > >() },
    { "p1082r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Rapperswil ") > >() },
    { "p1083r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 3u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 4u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 5u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 6u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 7u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") >, Rev< 8u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") > >() },
    { "p1084r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Casey Carter ")) >(), wxS(" Todays returntyperequirements Are Insufficient ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown Casey Carter ")) >(), wxS(" Todays returntyperequirements Are Insufficient ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown Casey Carter ")) >(), wxS(" Todays returntyperequirements Are Insufficient ") > >() },
    { "p1085r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Should Span be Regular ") >, Rev< 1u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Should Span be Regular ") >, Rev< 2u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" Should Span be Regular ") > >() },
    { "p1086r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Natural Syntax Keep It Simple ") > >() },
    { "p1087r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Richard Smith ")) >(), wxS(" Modules for Standard C ") > >() },
    { "p1089r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Douglas Nevin Liber Marshall Clow ")) >(), wxS(" Sizes Should Only span Unsigned ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Douglas Nevin Liber Marshall Clow ")) >(), wxS(" Sizes Should Only span Unsigned ") > >() },
    { "p1090r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Aggregate initialization in the presence of deleted constructors ") > >() },
    { "p1091r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Extending structured bindings to be more like variable declarations ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Extending structured bindings to be more like variable declarations ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Extending structured bindings to be more like variable declarations ") >, Rev< 3u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Extending structured bindings to be more like variable declarations ") > >() },
    { "p1093r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Bennieston Jonathan Coe Daven Gahir Thomas Russell ")) >(), wxS(" Is undefined behaviour preserved ") > >() },
    { "p1094r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Nested Inline Namespaces ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Nested Inline Namespaces ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Nested Inline Namespaces ") > >() },
    { "p1095r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Zero overhead deterministic failure  A unied mechanism for C and C ") > >() },
    { "p1096r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Simplify the customization point for structured bindings ") > >() },
    { "p1097r0", RevList< Rev< 0u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Named character escapes ") >, Rev< 1u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Named character escapes ") >, Rev< 2u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Named character escapes ") > >() },
    { "p1099r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Jonathan Mller ")) >(), wxS(" Using Enum ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman Jonathan Mller ")) >(), wxS(" Using Enum ") >, Rev< 3u, Arr64< Hash(wxS(" Gaper Aman Jonathan Mller ")) >(), wxS(" Using Enum ") >, Rev< 4u, Arr64< Hash(wxS(" Gaper Aman Jonathan Mller ")) >(), wxS(" Using Enum ") >, Rev< 5u, Arr64< Hash(wxS(" Gaper Aman Jonathan Mueller ")) >(), wxS(" Using Enum ") > >() },
    { "p1100r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vinnie Falco ")) >(), wxS(" Efficient composition with DynamicBuffer ") > >() },
    { "p1101r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mikhail Maltsev Richard Sandiford ")) >(), wxS(" Vector Length Agnostic SIMD ") > >() },
    { "p1102r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alex Christensen JF Bastien ")) >(), wxS(" Down with  ") >, Rev< 1u, Arr64< Hash(wxS(" Alex Christensen JF Bastien ")) >(), wxS(" Down with  ") >, Rev< 2u, Arr64< Hash(wxS(" Alex Christensen JF Bastien ")) >(), wxS(" Down with  ") > >() },
    { "p1103r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Gabriel Dos Reis ")) >(), wxS(" Merging Modules ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Merging Modules ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Merging Modules ") >, Rev< 3u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Merging Modules ") > >() },
    { "p1105r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Leaving no room for a lowerlevel language A C Subset ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig Ben Saks ")) >(), wxS(" Leaving no room for a lowerlevel language A C Subset ") > >() },
    { "p1108r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" webview ") >, Rev< 1u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" webview ") >, Rev< 2u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" webview ") >, Rev< 3u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" webview ") >, Rev< 4u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" webview ") > >() },
    { "p1109r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Rapperswil Record of Discussion ") >, Rev< 1u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Rapperswil Record of Discussion ") > >() },
    { "p1110r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeffrey Yasskin JF Bastien ")) >(), wxS(" A placeholder with no name ") > >() },
    { "p1111r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Matthias Kretz ")) >(), wxS(" Resolutions to NB Comments on the Parallelism TS v ") > >() },
    { "p1112r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") >, Rev< 1u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") >, Rev< 2u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") >, Rev< 3u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") >, Rev< 4u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") >, Rev< 5u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Language support for class layout control ") > >() },
    { "p1113r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS("  Core Language Working Group ready Issues for the June  Rapperswil meeting ") > >() },
    { "p1114r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS("  Core Language Working Group tentatively ready Issues for the June  Rapperswil meeting ") > >() },
    { "p1115r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms II Free eraseerase if ") >, Rev< 1u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms II Free eraseerase if ") >, Rev< 2u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms II Free eraseerase if ") >, Rev< 3u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Improving the Return Value of EraseLike Algorithms II Free eraseerase if ") > >() },
    { "p1116r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" ReGaining Exclusive Ownership from sharedptrs ") > >() },
    { "p1118r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Shen Matthias Kretz ")) >(), wxS(" Concat and Split on simdltgt objects ") > >() },
    { "p1119r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Olivier Giroux Olivier Giroux Hal Finkel Thomas Rodgers Matthias Kretz ")) >(), wxS(" ABI for stdhardwareconstructivedestructiveinterferencesize ") > >() },
    { "p1120r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Consistency improvements for ltgt and other comparison operators ") > >() },
    { "p1121r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Hazard Pointers Proposed Interface and Wording for Concurrency TS  ") >, Rev< 1u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Hazard Pointers Proposed Interface and Wording for Concurrency TS  ") >, Rev< 2u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Hazard Pointers Proposed Interface and Wording for Concurrency TS  ") >, Rev< 3u, Arr64< Hash(wxS(" Maged M Michael Michael Wong Paul McKenney Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn Jens Maurer ")) >(), wxS(" Hazard Pointers Proposed Interface and Wording for Concurrency TS  ") > >() },
    { "p1122r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher ")) >(), wxS(" Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU ") >, Rev< 1u, Arr64< Hash(wxS(" Paul McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher ")) >(), wxS(" Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU ") >, Rev< 2u, Arr64< Hash(wxS(" Paul McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp ")) >(), wxS(" Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU ") >, Rev< 3u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer David S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik RigtorpTomasz Kamiski  ")) >(), wxS(" Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU ") >, Rev< 4u, Arr64< Hash(wxS(" Paul E McKenney Paul McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski  and Jens Maurer ")) >(), wxS(" Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU ") > >() },
    { "p1123r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Editorial Guidance for merging Pr and Pr ") > >() },
    { "p1128r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Summer  WG Batavia LWG Meeting Information ") > >() },
    { "p1130r0", RevList< Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Module Resource Requirement Propagation ") > >() },
    { "p1131r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Issue  simpletemplateid is ambiguous between classname and typename ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Issue  simpletemplateid is ambiguous between classname and typename ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Issue  simpletemplateid is ambiguous between classname and typename ") > >() },
    { "p1132r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 5u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 6u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 7u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") >, Rev< 8u, Arr64< Hash(wxS(" JeanHeyd Meneide Todor Buyukliev Isabella Muerte ")) >(), wxS(" outptr  a scalable output pointer abstraction ") > >() },
    { "p1133r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vinnie Falco ")) >(), wxS(" Networking TS Associations For Call Wrappers ") > >() },
    { "p1135r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux JF Bastien ")) >(), wxS(" The C Synchronization Library ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux JF Bastien ")) >(), wxS(" The C Synchronization Library ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux JF Bastien Detlef Vollmann ")) >(), wxS(" The C Synchronization Library ") >, Rev< 3u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux JF Bastien Detlef Vollmann ")) >(), wxS(" The C Synchronization Library ") >, Rev< 4u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Olivier Giroux JF Bastien Detlef Vollmann David Olsen ")) >(), wxS(" The C Synchronization Library ") >, Rev< 5u, Arr64< Hash(wxS(" David Olsen Olivier Giroux JF Bastien Detlef Vollmann Bryce Lelbach ")) >(), wxS(" The C Synchronization Library ") >, Rev< 6u, Arr64< Hash(wxS(" David Olsen Olivier Giroux JF Bastien Detlef Vollmann Bryce Lelbach ")) >(), wxS(" The C Synchronization Library ") > >() },
    { "p1136r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS("  Bellevue adhoc meeting information ") > >() },
    { "p1137r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1138r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Deprecating ATOMICVARINIT ") > >() },
    { "p1139r0", RevList< Rev< 0u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Address wording issues related to ISO  ") >, Rev< 1u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Address wording issues related to ISO  ") >, Rev< 2u, Arr64< Hash(wxS(" R Martinho Fernandes ")) >(), wxS(" Address wording issues related to ISO  ") > >() },
    { "p1141r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen Thomas Kppe Andrew Sutton Herb Sutter Gabriel Dos Reis Bjarne Stroustrup Jason Merrill Hubert Tong Eric Niebler Casey Carter Tom Honermann Erich Keane ")) >(), wxS(" Yet another approach for constrained declarations ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen Thomas Kppe Andrew Sutton Herb Sutter Gabriel Dos Reis Bjarne Stroustrup Jason Merrill Hubert Tong Eric Niebler Casey Carter Tom Honermann Erich Keane Walter E Brown Michael Spertus ")) >(), wxS(" Yet another approach for constrained declarations ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen Thomas Kppe Andrew Sutton Herb Sutter Gabriel Dos Reis Bjarne Stroustrup Jason Merrill Hubert Tong Eric Niebler Casey Carter Tom Honermann Erich Keane Walter E Brown Michael Spertus Richard Smith ")) >(), wxS(" Yet another approach for constrained declarations ") > >() },
    { "p1142r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Thoughts on a conservative terse syntax for constraints ") > >() },
    { "p1143r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Fiselier ")) >(), wxS(" Adding the constinit attribute ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Fiselier ")) >(), wxS(" Adding the constinit keyword ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Fiselier ")) >(), wxS(" Adding the constinit keyword ") > >() },
    { "p1144r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Mingxin Wang ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 10u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 11u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 12u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 13u, Arr64< Hash(wxS(" Arthur ODwyer Artur Ba Daniel Liam Anderson Enrico Mauro Jody Hagins Michael Steffens Stphane Janel Vinnie Falco Walter E Brown Will Wray ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 4u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 5u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 6u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Object relocation in terms of move plus destroy ") >, Rev< 7u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 8u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") >, Rev< 9u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" stdistriviallyrelocatable ") > >() },
    { "p1145r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vinnie Falco ")) >(), wxS(" Buffer Sequence Adaptors ") > >() },
    { "p1147r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Printing volatile Pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Printing volatile Pointers ") > >() },
    { "p1148r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Cleaning up Clause  ") > >() },
    { "p1149r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Constexpr regex ") > >() },
    { "p1152r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Deprecating volatile ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Deprecating volatile ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Deprecating volatile ") >, Rev< 3u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Deprecating volatile ") >, Rev< 4u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Deprecating volatile ") > >() },
    { "p1153r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer JF Bastien ")) >(), wxS(" Copying volatile subobjects is not trivial ") > >() },
    { "p1154r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Jeff Snyder ")) >(), wxS(" Type traits for structural comparison ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Jeff Snyder ")) >(), wxS(" Type traits for structural comparison ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer Jeff Snyder ")) >(), wxS(" Type traits for structural comparison ") > >() },
    { "p1155r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer David Stone ")) >(), wxS(" More implicit moves ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer David Stone ")) >(), wxS(" More implicit moves ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer David Stone ")) >(), wxS(" More implicit moves ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer David Stone ")) >(), wxS(" More implicit moves ") > >() },
    { "p1156r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" Merged Modules and Tooling ") > >() },
    { "p1157r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Multiargument constrainedparameter ") > >() },
    { "p1158r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Conceptdefined placeholder types ") > >() },
    { "p1159r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Russell ")) >(), wxS(" Type Erased Iterators for modern C ") > >() },
    { "p1160r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Attila Fehr Alisdair Meredith ")) >(), wxS(" Add Test Polymorphic Memory Resource to the Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Attila Fehr Alisdair Meredith ")) >(), wxS(" Add Test Polymorphic Memory Resource to the Standard Library ") > >() },
    { "p1161r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Deprecate uses of the comma operator in subscripting expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Deprecate uses of the comma operator in subscripting expressions ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Deprecate uses of the comma operator in subscripting expressions ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Deprecate uses of the comma operator in subscripting expressions ") > >() },
    { "p1163r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Explicitly Implicifying explicit Constructors ") > >() },
    { "p1164r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Make createdirectory Intuitive ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Make createdirectory intuitive ") > >() },
    { "p1165r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Fixing allocator usage for operatorbasicstring ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Make stateful allocator propagation more consistent for operatorbasicstring ") > >() },
    { "p1166r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" What do we need from a linear algebra library ") > >() },
    { "p1167r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Improving function templates with Class Template Argument Deduction ") > >() },
    { "p1168r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" How to make Terse Notation soar with Class Template Argument Deduction ") > >() },
    { "p1169r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" static operator ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" static operator ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" static operator ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" static operator ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" static operator ") > >() },
    { "p1170r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Andrew Sutton ")) >(), wxS(" Overload sets as function parameters ") > >() },
    { "p1171r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Synchronously waiting on asynchronous operations ") > >() },
    { "p1172r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" The Concept of Memory Allocator ") >, Rev< 1u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" The Concept of Memory Allocator ") > >() },
    { "p1175r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" A simple and practical optional reference for C ") > >() },
    { "p1177r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" Package Ecosystem Plan ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Rivera ")) >(), wxS(" Package Ecosystem Plan ") > >() },
    { "p1178r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" C Compile ") > >() },
    { "p1179r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Lifetime safety Preventing common dangling ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Lifetime safety Preventing common dangling ") > >() },
    { "p1180r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Response to P ") > >() },
    { "p1181r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Morwenn Ed ")) >(), wxS(" Proposing unless ") > >() },
    { "p1182r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gennaro Prot ")) >(), wxS(" New names for the powerof templates and their header ") > >() },
    { "p1184r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" A Module Mapper ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" A Module Mapper ") >, Rev< 2u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" A Module Mapper ") > >() },
    { "p1185r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" ltgt   ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" ltgt   ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" ltgt   ") > >() },
    { "p1186r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" When do you actually use ltgt ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" When do you actually use ltgt ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" When do you actually use ltgt ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" When do you actually use ltgt ") > >() },
    { "p1187r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" A type trait for stdcompareways type ") > >() },
    { "p1188r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Library utilities for ltgt ") > >() },
    { "p1189r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Adding ltgt to library ") > >() },
    { "p1190r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" I did not order this Why is it on my bill ") > >() },
    { "p1191r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Adding operatorltgt to types that are not currently comparable ") > >() },
    { "p1192r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Rodgers ")) >(), wxS(" Experience report  integrating Executors with Parallel Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Rodgers ")) >(), wxS(" Experience report  integrating Executors with Parallel Algorithms ") > >() },
    { "p1193r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Explicitly Specified Returns for Implicit Conversions ") > >() },
    { "p1194r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Eric Niebler Kirk Shoop Bryce Lelbach David S Hollman ")) >(), wxS(" The Compromise Executors Proposal A lazy simplification of P ") > >() },
    { "p1195r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Making ltsystemerrorgt constexpr ") > >() },
    { "p1196r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Valuebased stderrorcategory comparison ") > >() },
    { "p1197r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" A nonallocating overload of errorcategorymessage ") > >() },
    { "p1198r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Adding errorcategoryfailed ") > >() },
    { "p1199r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" A simple proposal for unifying generic and objectoriented programming ") > >() },
    { "p1200r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson Roger Orr Ville Voutilainen Jose Daniel Garcia Sanchez JeanPaul Rigault Matevz Tadel ")) >(), wxS(" High noon for the D Graphics proposal ") > >() },
    { "p1201r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oleg Fatkhiev Antony Polukhin ")) >(), wxS(" Variant direct comparisons ") > >() },
    { "p1202r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric fences ") >, Rev< 1u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric Fences ") >, Rev< 2u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric Fences ") >, Rev< 3u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric Fences ") >, Rev< 4u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric Fences ") >, Rev< 5u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Asymmetric Fences ") > >() },
    { "p1203r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov Richard Smith ")) >(), wxS(" Modular main ") > >() },
    { "p1204r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" Canonical Project Structure ") > >() },
    { "p1205r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux JF Bastien ")) >(), wxS(" Teleportation via coawait ") > >() },
    { "p1206r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Christopher Di Bella ")) >(), wxS(" Range constructors for standard containers and views ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" rangesto A function to convert any range to a container ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" rangesto A function to convert any range to a container ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" rangesto A function to convert any range to a container ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" Conversions from ranges to containers ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" Conversions from ranges to containers ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" Conversions from ranges to containers ") >, Rev< 7u, Arr64< Hash(wxS(" Corentin Jabot Eric Niebler Casey Carter ")) >(), wxS(" Conversions from ranges to containers ") > >() },
    { "p1207r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Movability of Singlepass Iterators ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Movability of Singlepass Iterators ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Movability of Singlepass Iterators ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Movability of Singlepass Iterators ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Movability of Singlepass Iterators ") > >() },
    { "p1208r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Robert Douglas ")) >(), wxS(" Adopt sourcelocation from Library Fundamentals V for C ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Robert Douglas ")) >(), wxS(" Adopt sourcelocation from Library Fundamentals V for C ") >, Rev< 3u, Arr64< Hash(wxS(" Robert Douglas Corentin Jabot ")) >(), wxS(" SourceCode Information Capture ") >, Rev< 4u, Arr64< Hash(wxS(" Robert Douglas Corentin Jabot ")) >(), wxS(" Adopt source location from Library Fundamentals V for C ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Robert Douglas ")) >(), wxS(" Adopt source location from Library Fundamentals V for C ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Robert Douglas Daniel Krugler Peter Sommerlad ")) >(), wxS(" Adopt source location from Library Fundamentals V for C ") > >() },
    { "p1209r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Stephan T Lavavej ")) >(), wxS(" Adopt Consistent Container Erasure from Library Fundamentals  for C ") > >() },
    { "p1210r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Completing the Rebase of Library Fundamentals Version  Working Draft ") > >() },
    { "p1212r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Modules and Freestanding ") > >() },
    { "p1213r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Global Module Fragment is Unnecessary ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Global Module Fragment Is Unnecessary ") > >() },
    { "p1214r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Pointer to Member Functions and Member Objects are just Callables ") > >() },
    { "p1217r0", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Outofthinair revisited again ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Outofthinair revisited again ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Outofthinair revisited again ") > >() },
    { "p1218r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Redefinitions in Legacy Imports ") > >() },
    { "p1219r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Homogeneous variadic function parameters ") >, Rev< 1u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Homogeneous variadic function parameters ") >, Rev< 2u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Homogeneous variadic function parameters ") > >() },
    { "p1220r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Kennelly ")) >(), wxS(" Controlling When Inline Functions are Emitted ") > >() },
    { "p1221r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Rice ")) >(), wxS(" Parametric Expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Jason Rice ")) >(), wxS(" Parametric Expressions ") > >() },
    { "p1222r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatset ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatset ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatset ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatset ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" A Standard flatset ") > >() },
    { "p1223r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findbackward ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findbackward ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findbackward ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findlast ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findlast ") >, Rev< 5u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" findlast ") > >() },
    { "p1224r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in San Diego ") > >() },
    { "p1225r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Feedback on D Graphics ") > >() },
    { "p1227r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Signed size functions ") >, Rev< 1u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Signed ssize functions unsigned size functions ") >, Rev< 2u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Signed ssize functions unsigned size functions ") > >() },
    { "p1228r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" A proposal to add an efficient string concatenation routine to the Standard Library ") > >() },
    { "p1229r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Labelled Parameters ") > >() },
    { "p1230r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Recursive Type Template Instantiation ") > >() },
    { "p1231r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JC van Winkel Christopher Di Bella ")) >(), wxS(" Proposal for Study Group C Education ") > >() },
    { "p1232r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Eric Niebler Kirk Shoop Lewis Baker Robert Geva ")) >(), wxS(" Integrating executors with the standard library through customization ") > >() },
    { "p1233r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ashley Hedberg Matt Calabrese ")) >(), wxS(" Shiftbynegative in shiftleft and shiftright ") >, Rev< 1u, Arr64< Hash(wxS(" Ashley Hedberg Matt Calabrese Bryce Adelstein Lelbach ")) >(), wxS(" Shiftbynegative in shiftleft and shiftright ") > >() },
    { "p1235r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Hana Duskov ")) >(), wxS(" Implicit constexpr ") > >() },
    { "p1236r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Alternative Wording for a hrefprhtmlPRa Signed Integers are Twos Complement ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Alternative Wording for a hrefprhtmlPRa Signed Integers are Twos Complement ") > >() },
    { "p1237r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1238r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann Corentin Jabot JeanHeyd Meneide Mark Zeren Martinho Fernandes Peter Bindels Steve Downey Zach Laine ")) >(), wxS(" SG Unicode Direction ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann Corentin Jabot JeanHeyd Meneide Mark Zeren Martinho Fernandes Peter Bindels Steve Downey Zach Laine ")) >(), wxS(" SG Unicode Direction ") > >() },
    { "p1239r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Lustig ")) >(), wxS(" Placed Before ") > >() },
    { "p1240r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Faisal Vali Daveed Vandevoorde ")) >(), wxS(" Scalable Reflection in C ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Andrew Sutton Faisal Vali Daveed Vandevoorde ")) >(), wxS(" Scalable Reflection in C ") >, Rev< 2u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Andrew Sutton Faisal Vali ")) >(), wxS(" Scalable Reflection ") > >() },
    { "p1241r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes Eric Niebler Lewis Baker ")) >(), wxS(" In support of merging coroutines into C ") > >() },
    { "p1242r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Snyder ")) >(), wxS(" Singlefile modules with the Atom semantic properties rule ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Snyder Richard Smith ")) >(), wxS(" Singlefile modules with the Atom semantic properties rule ") > >() },
    { "p1243r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") >, Rev< 4u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") > >() },
    { "p1244r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Chris Kohlhoff Chris Mysen Carter Edwards Gordon Brown ")) >(), wxS(" Dependent Execution for a Unified Executors Proposal for C ") > >() },
    { "p1245r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes JF Bastien ")) >(), wxS(" export module containing attribute ") > >() },
    { "p1246r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes JF Bastien ")) >(), wxS(" The nofloat function attribute ") > >() },
    { "p1247r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes JF Bastien Erik Pilkington ")) >(), wxS(" Disabling static destructors introducing nodestroy and alwaysdestroy attributes ") > >() },
    { "p1248r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Fixing Relations ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Remove CommonReference requirement from StrictWeakOrdering ") > >() },
    { "p1249r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" stdforward from stdinitializerlist ") > >() },
    { "p1250r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters Ashley Hedberg Eric Fiselier ")) >(), wxS(" Extension by inspecting members of User Defined Types ") > >() },
    { "p1251r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Morris Hafner ")) >(), wxS(" A more constexpr bitset ") >, Rev< 1u, Arr64< Hash(wxS(" Morris Hafner ")) >(), wxS(" A more constexpr bitset ") > >() },
    { "p1252r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges Design Cleanup ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges Design Cleanup ") >, Rev< 2u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Ranges Design Cleanup ") > >() },
    { "p1253r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Guidelines for when a WG proposal should be reviewed by SG the text and Unicode study group ") > >() },
    { "p1254r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Notes on C Package Management ") > >() },
    { "p1255r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewmaybe ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewmaybe ") >, Rev< 10u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 11u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 12u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 13u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsnullable And a concept to constrain maybes ") >, Rev< 14u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsnullable And a concept to constrain maybes ") >, Rev< 2u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewmaybe ") >, Rev< 3u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewmaybe ") >, Rev< 4u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewmaybe ") >, Rev< 5u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 6u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 7u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 8u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") >, Rev< 9u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" A view of  or  elements viewsmaybe ") > >() },
    { "p1256r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Executors Should Go To A TS ") > >() },
    { "p1257r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Implementation experience on trying to implement concurrent data and control structures with executors ") > >() },
    { "p1258r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Dont Make C Unimplementable On Small CPUs ") > >() },
    { "p1259r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Merge most of Networking TS into C Working Draft ") >, Rev< 1u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Merge most of Networking TS into C Working Draft ") > >() },
    { "p1260r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching ") > >() },
    { "p1261r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Daniel Garcia Ronan Keryell ")) >(), wxS(" Supporting Pipelines in C ") > >() },
    { "p1263r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Controlling the instantiation of vtables and RTTI ") > >() },
    { "p1264r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Revising the wording of stream input operations ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Revising the wording of stream input operations ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne ")) >(), wxS(" Revising the wording of stream input operations ") > >() },
    { "p1267r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov Bryce Adelstein Lelbach ")) >(), wxS(" Custom Constraint Diagnostics ") > >() },
    { "p1269r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Carey ")) >(), wxS(" Three Years with the Networking TS ") > >() },
    { "p1271r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move resourceadaptor from Library TS to the C WP ") > >() },
    { "p1272r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Byteswapping for funampampnuf ") >, Rev< 1u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Byteswapping for funampampnuf ") >, Rev< 2u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Byteswapping for funampampnuf ") >, Rev< 3u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Byteswapping for funampampnuf ") >, Rev< 4u, Arr64< Hash(wxS(" Isabella Muerte Corentin Jabot ")) >(), wxS(" Byteswapping for funampampnuf ") > >() },
    { "p1273r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS("  The Absurd From Exceptions ") > >() },
    { "p1274r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Bang For The Buck ") > >() },
    { "p1275r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Desert Sessions Improving hostile environment interactions ") > >() },
    { "p1276r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Void Main ") > >() },
    { "p1277r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Subscripts On Parade ") > >() },
    { "p1278r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" offsetof For the Modern Era ") > >() },
    { "p1279r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" stdbreakpoint ") > >() },
    { "p1280r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Integer Width Literals ") >, Rev< 1u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Integer Width Literals ") >, Rev< 2u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Integer Width Literals ") > >() },
    { "p1281r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Feature Presentation ") > >() },
    { "p1282r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Ceci Nest Pas Une Pipe Adding a workflow operator to C ") > >() },
    { "p1283r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Sharing is Caring ") > >() },
    { "p1284r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Kennelly ")) >(), wxS(" Allowing Inlining of Replaceable Functions ") > >() },
    { "p1285r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Improving Completeness Requirements for Type Traits ") > >() },
    { "p1286r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Contra CWG DR ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Contra CWG DR ") >, Rev< 2u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Contra CWG DR ") > >() },
    { "p1287r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Kirk Shoop ")) >(), wxS(" Supporting async usecases for interrupttoken ") > >() },
    { "p1288r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Coroutine concepts and metafunctions ") > >() },
    { "p1289r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia Ville Voutilainen ")) >(), wxS(" Access control in contract conditions ") >, Rev< 1u, Arr64< Hash(wxS(" J Daniel Garcia Ville Voutilainen ")) >(), wxS(" Access control in contract conditions ") > >() },
    { "p1290r0", RevList< Rev< 0u, Arr64< Hash(wxS(" J Daniel Garcia ")) >(), wxS(" Avoiding undefined behavior in contracts ") >, Rev< 1u, Arr64< Hash(wxS(" J Daniel Garcia Ville Voutilainen ")) >(), wxS(" Avoiding undefined behavior in contracts ") >, Rev< 2u, Arr64< Hash(wxS(" J Daniel Garcia Ville Voutilainen ")) >(), wxS(" Avoiding undefined behavior in contracts ") >, Rev< 3u, Arr64< Hash(wxS(" J Daniel Garcia Ville Voutilainen ")) >(), wxS(" Avoiding undefined behavior in contracts ") > >() },
    { "p1291r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" stdrangeslessltgt Should Be More ") > >() },
    { "p1292r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Calabrese ")) >(), wxS(" Customization Point Functions ") > >() },
    { "p1293r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Nathan Wilson ")) >(), wxS(" ostreamjoiner ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Nathan Wilson ")) >(), wxS(" ostreamjoiner ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus Nathan Wilson ")) >(), wxS(" ostreamjoiner ") > >() },
    { "p1294r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spertus John Maddock ")) >(), wxS(" Proposed resolution for US Allocatoraware regular expressions rev  ") > >() },
    { "p1295r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Spaceship library update ") > >() },
    { "p1296r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Miller Justin Szaday ")) >(), wxS(" assert stddisjointAnA BnB Contract assertions as an alternate spelling of restrict ") > >() },
    { "p1298r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Reserve more freedom for atomicrefltgt implementers ") > >() },
    { "p1299r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Preamble is Unnecessary ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Preamble is Unnecessarily Fragile ") >, Rev< 3u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Module Preamble is Unnecessarily Fragile ") > >() },
    { "p1300r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jussi Pakkanen Isabella Muerte Peter Bindels ")) >(), wxS(" Remember the FORTRAN ") > >() },
    { "p1301r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide Isabella Muerte ")) >(), wxS(" nodiscard should have a reason ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide Isabella Muerte ")) >(), wxS(" nodiscardshould have a reason ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide Isabella Muerte  ")) >(), wxS(" nodiscardshould have a reason ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide Isabella Muerte ")) >(), wxS(" nodiscardshould have a reason ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide Isabella Muerte ")) >(), wxS(" nodiscardshould have a reason ") > >() },
    { "p1302r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte Richard Smith ")) >(), wxS(" Implicit Module Partition Lookup ") >, Rev< 1u, Arr64< Hash(wxS(" Isabella Muerte Richard Smith ")) >(), wxS(" Implicit Module Partition Lookup ") > >() },
    { "p1303r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Inline Module Partitions ") > >() },
    { "p1304r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Simplifying Extern Template ") > >() },
    { "p1305r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Deprecate The Addressof Operator ") > >() },
    { "p1306r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Sam Goodrick Daveed Vandevoorde ")) >(), wxS(" Expansion statements ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Sutton Sam Goodrick Daveed Vandevoorde ")) >(), wxS(" Expansion statements ") >, Rev< 2u, Arr64< Hash(wxS(" Dan Katz Andrew Sutton Sam Goodrick Daveed Vandevoorde ")) >(), wxS(" Expansion statements ") >, Rev< 3u, Arr64< Hash(wxS(" Dan Katz Andrew Sutton Sam Goodrick Daveed Vandevoorde ")) >(), wxS(" Expansion statements ") >, Rev< 4u, Arr64< Hash(wxS(" Dan Katz Barry Revzin Andrew Sutton Sam Goodrick Daveed Vandevoorde ")) >(), wxS(" Expansion statements ") > >() },
    { "p1307r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" weakequality considered harmful ") > >() },
    { "p1308r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Dan Sarginson Sergei Murzin ")) >(), wxS(" Pattern Matching ") > >() },
    { "p1310r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Unifying the many ways to compare ") > >() },
    { "p1312r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Comparison Concepts ") > >() },
    { "p1313r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Woehlke ")) >(), wxS(" Lets Talk About Package Specification ") > >() },
    { "p1314r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" uniqueval a defaultonmove ") >, Rev< 1u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" uniqueval a defaultonmove type ") > >() },
    { "p1315r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureval a secureclearonmove type ") >, Rev< 1u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureval a secureclearonmove type ") >, Rev< 2u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear ") >, Rev< 3u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear ") >, Rev< 4u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear ") >, Rev< 5u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear ") >, Rev< 6u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear update to N ") >, Rev< 7u, Arr64< Hash(wxS(" Miguel Ojeda ")) >(), wxS(" secureclear ") > >() },
    { "p1316r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" A whenall operator for coroutines ") > >() },
    { "p1317r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Remove return type deduction in stdapply ") >, Rev< 1u, Arr64< Hash(wxS(" Aaryaman Sagar Eric Niebler ")) >(), wxS(" Remove return type deduction in stdapply ") > >() },
    { "p1318r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaryaman Sagar ")) >(), wxS(" Tuple application traits ") > >() },
    { "p1319r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Changes between C and C ") > >() },
    { "p1320r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Allowing contract predicates on nonfirst declarations ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Allowing contract predicates on nonfirst declarations ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Allowing contract predicates on nonfirst declarations ") > >() },
    { "p1321r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" UB in contract violations ") > >() },
    { "p1322r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS enhancement to enable custom IO executors ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS enhancement to enable custom IO executors ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS enhancement to enable custom IO executors ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS enhancement to enable custom IO executors ") > >() },
    { "p1323r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Contract postconditions and return type deduction ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Contract postconditions and return type deduction ") >, Rev< 2u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Contract postconditions and return type deduction ") > >() },
    { "p1324r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" RE Yet another approach for constrained declarations ") >, Rev< 1u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" RE Yet another approach for constrained declarations ") > >() },
    { "p1327r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Allowing dynamiccast polymorphic typeid in Constant Expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Dimov Vassil Vassilev Richard Smith ")) >(), wxS(" Allowing dynamiccast polymorphic typeid in Constant Expressions ") > >() },
    { "p1328r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Making stdtypeinfooperator constexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Dimov ")) >(), wxS(" Making stdtypeinfooperator constexpr ") > >() },
    { "p1329r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Mihaylov Vassil Vassilev ")) >(), wxS(" On the Coroutines TS ") > >() },
    { "p1330r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne David Vandevoorde ")) >(), wxS(" Changing the active member of a union inside constexpr ") > >() },
    { "p1331r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Permitting trivial default initialization in constexpr contexts ") >, Rev< 1u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Permitting trivial default initialization in constexpr contexts ") >, Rev< 2u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Permitting trivial default initialization in constexpr contexts ") > >() },
    { "p1332r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Nathan Burgers Hyman Rosen John Lakos ")) >(), wxS(" Contract Checking in C A longterm Road Map ") > >() },
    { "p1333r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Assigning Concrete Semantics to ContractChecking Levels at Compile Time ") > >() },
    { "p1334r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Specifying Concrete Semantics Directly in ContractChecking Statements ") > >() },
    { "p1335r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" Avoiding undefined behavior in contracts a hrefprpdfPRa Explained ") > >() },
    { "p1337r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Aliasing the standard library as a means to save C ") > >() },
    { "p1338r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  San Diego Record of Discussion ") >, Rev< 1u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  San Diego Record of Discussion ") > >() },
    { "p1339r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Disallowing the friending of names in namespace std ") >, Rev< 1u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Disallowing the friending of names in namespace std ") > >() },
    { "p1341r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Unifying Asynchronous APIs in the Standard Library ") > >() },
    { "p1342r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Unifying Coroutines TS and Core Coroutines ") > >() },
    { "p1344r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" PrePost vs EnspectsExsures ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" PrePost vs EnspectsExsures ") > >() },
    { "p1347r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Davis Herring Nathan Sidwell ")) >(), wxS(" Modules ADL amp Internal Linkage ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell Davis Herring ")) >(), wxS(" Modules ADL amp Internal Linkage ") > >() },
    { "p1348r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman Jared Hoberock Lee Howes Michael Garland H Carter Edwards ")) >(), wxS(" An Executor Property for Occupancy of Execution Agents ") > >() },
    { "p1349r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vinnie Falco ")) >(), wxS(" Better Integration of Sender Executors ") > >() },
    { "p1350r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the November  San Diego meeting ") > >() },
    { "p1351r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Zeren ")) >(), wxS(" Intrusive smart pointer feedback ") > >() },
    { "p1353r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Missing Feature Test Macros ") > >() },
    { "p1354r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chandler Carruth ")) >(), wxS(" SG Guidelines for Review of Proposals ") > >() },
    { "p1355r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chris Kennelly ")) >(), wxS(" Exposing a narrow contract for ceil ") >, Rev< 1u, Arr64< Hash(wxS(" Chris Kennelly ")) >(), wxS(" Exposing a narrow contract for ceil ") >, Rev< 2u, Arr64< Hash(wxS(" Chris Kennelly ")) >(), wxS(" Exposing a narrow contract for ceil ") > >() },
    { "p1356r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Coroutine TS ready issues  and  ") > >() },
    { "p1357r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Glen J Fernandes ")) >(), wxS(" Traits for Unbounded Arrays ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown Glen J Fernandes ")) >(), wxS(" Traits for Unbounded Arrays ") > >() },
    { "p1358r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core ready Issues    ") > >() },
    { "p1359r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core tentatively ready Issues    ") > >() },
    { "p1360r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Vincent Reverdy Robert Douglas Emad Barsoum Sarthak Pati Peter Goldsborough Franke Seide ")) >(), wxS(" Towards Machine Learning for C Study Group  ") > >() },
    { "p1361r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Daniela Engert Howard E Hinnant ")) >(), wxS(" Integration of chrono with text formatting ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich  Daniela Engert Howard E Hinnant ")) >(), wxS(" Integration of chrono with text formatting ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich Daniela Engert Howard E Hinnant ")) >(), wxS(" Integration of chrono with text formatting ") > >() },
    { "p1362r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Incremental Approach Coroutine TS  Core Coroutines ") > >() },
    { "p1364r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Fibers under the magnifying glass ") > >() },
    { "p1365r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Using Coroutine TS with zero dynamic allocations ") > >() },
    { "p1367r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Not All Agents Have TLS ") >, Rev< 1u, Arr64< Hash(wxS(" Olivier Giroux ")) >(), wxS(" Not All Agents Have TLS ") > >() },
    { "p1368r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Multiplication and division of fixedpoint numbers ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Multiplication and division of fixedpoint numbers ") > >() },
    { "p1369r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Guidelines for Formulating Library Semantics Specifications ") > >() },
    { "p1370r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Generic numerical algorithm development without numericlimits ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Generic numerical algorithm development without numericlimits ") > >() },
    { "p1371r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sergei Murzin Michael Park David Sankel Dan Sarginson ")) >(), wxS(" Pattern Matching ") >, Rev< 1u, Arr64< Hash(wxS(" Sergei Murzin Michael Park David Sankel Dan Sarginson ")) >(), wxS(" Pattern Matching ") >, Rev< 2u, Arr64< Hash(wxS(" Sergei Murzin Michael Park David Sankel Dan Sarginson ")) >(), wxS(" Pattern Matching ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Park Bruno Cardoso Lopes Sergei Murzin David Sankel Dan Sarginson Bjarne Stroustrup ")) >(), wxS(" Pattern Matching ") > >() },
    { "p1372r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman ")) >(), wxS(" Giving atomicref implementers more flexibility by providing customization points for nonlockfree implementation ") > >() },
    { "p1373r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Syntax alternatives for modules ") > >() },
    { "p1374r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Resolving LWG  for C Consistently Explicit Constructors ") > >() },
    { "p1375r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" More Constrained Apples or Oranges On the road to semantic constraint matching ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" More Constrained Apples or Oranges On the road to semantic constraint matching ") >, Rev< 2u, Arr64< Hash(wxS(" Hubert Tong ")) >(), wxS(" More Constrained Apples or Oranges ") > >() },
    { "p1376r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Summary of freestanding evening session discussions ") > >() },
    { "p1377r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Summary of Dec  SG freestanding discussions ") > >() },
    { "p1378r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdstringliteral ") > >() },
    { "p1380r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Ambiguity and Insecurities with ThreeWay Comparison ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Ambiguity and Insecurities with ThreeWay Comparison ") > >() },
    { "p1381r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Reference capture of structured bindings ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" Reference capture of structured bindings ") > >() },
    { "p1382r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Paul McKenney ")) >(), wxS(" volatileloadltTgt and volatilestoreltTgt ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Paul McKenney Jeffrey Yasskin ")) >(), wxS(" volatileloadltTgt and volatilestoreltTgt ") > >() },
    { "p1383r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Edward J Rosten Oliver J Rosten ")) >(), wxS(" More constexpr for ltcmathgt and ltcomplexgt ") >, Rev< 1u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" More constexpr for cmath and complex ") >, Rev< 2u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" More constexpr for cmath and complex ") > >() },
    { "p1385r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 2u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 3u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 4u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 5u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 6u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") >, Rev< 7u, Arr64< Hash(wxS(" Guy Davidson Bob Steagall ")) >(), wxS(" A proposal to add linear algebra support to the C standard library ") > >() },
    { "p1386r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Somberg Guy Davidson Timur Doumler ")) >(), wxS(" A Standard Audio API for C Motivation Scope and Basic Design ") >, Rev< 1u, Arr64< Hash(wxS(" Guy Somberg Guy Davidson Timur Doumler ")) >(), wxS(" A Standard Audio API for C Motivation Scope and Basic Design ") >, Rev< 2u, Arr64< Hash(wxS(" Guy Somberg Guy Davidson Timur Doumler ")) >(), wxS(" A Standard Audio API for C Motivation Scope and Basic Design ") > >() },
    { "p1388r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JC van Winkel Christopher Di Bella ")) >(), wxS("  SG Telecon Minutes ") > >() },
    { "p1389r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella Simon Brand Michael Adams ")) >(), wxS(" Standing Document for SG Guidelines for Teaching C to Beginners ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella Simon Brand Michael Adams ")) >(), wxS(" Standing Document for SG Guidelines for Teaching C to Beginners ") > >() },
    { "p1390r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann and David Sankel ")) >(), wxS(" Suggested Reflection TS NB Resolutions ") >, Rev< 1u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann and David Sankel ")) >(), wxS(" Reflection TS NB comment resolutions summary and rationale ") > >() },
    { "p1391r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview ") > >() },
    { "p1392r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Davis Herring Roger Orr ")) >(), wxS(" Differences Between Functions and Function Templates ") > >() },
    { "p1393r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Hollman Chris Kohlhoff Bryce Lelbach Jared Hoberock Gordon Brown Micha Dominiak ")) >(), wxS(" A General Property Customization Mechanism ") > >() },
    { "p1394r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Range constructor for stdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Range constructor for stdspan ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Range constructor for stdspan ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Range constructor for stdspan ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Range constructor for stdspan ") > >() },
    { "p1395r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Partitions Are Not a Panacea ") > >() },
    { "p1401r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemienski ")) >(), wxS(" Narrowing contextual conversions to bool ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Narrowing contextual conversions to bool ") >, Rev< 2u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Narrowing contextual conversions to bool ") >, Rev< 3u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Narrowing contextual conversions to bool ") >, Rev< 4u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Narrowing contextual conversions to bool ") >, Rev< 5u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Narrowing contextual conversions to bool ") > >() },
    { "p1402r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" stdcstringview  a C compatible stdstringview adapter ") > >() },
    { "p1403r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David S Hollman ")) >(), wxS(" Experience Report Implementing a Coroutines TS Frontend to an Existing Tasking Library ") > >() },
    { "p1404r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemienski ")) >(), wxS(" badalloc is not outofmemory ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski Tomasz Kamiski ")) >(), wxS(" badalloc is not outofmemory ") > >() },
    { "p1405r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Chris Kohlhoff ")) >(), wxS(" C Executors are Resilient to ABI Breakage ") > >() },
    { "p1406r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev Antony Polukhin ")) >(), wxS(" Add more stdhash specializations ") >, Rev< 1u, Arr64< Hash(wxS(" Alexander Zaitsev Antony Polukhin ")) >(), wxS(" Add more stdhash specializations ") > >() },
    { "p1407r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Scott Schurr ")) >(), wxS(" Tell Programmers About Signed Integer Overflow Behavior ") >, Rev< 1u, Arr64< Hash(wxS(" Scott Schurr ")) >(), wxS(" Tell Programmers About Signed Integer Overflow Behavior ") > >() },
    { "p1408r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Abandon observerptr ") > >() },
    { "p1410r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Remove deprecated strstream ") > >() },
    { "p1411r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Please reconsider ltscopegt for C ") > >() },
    { "p1412r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Class Natures for Safety Critical Code On userdeclared and userdefined special member functions ") > >() },
    { "p1413r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" A safer interface for stdalignedstorage ") >, Rev< 1u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Deprecate stdalignedstorage and stdalignedunion ") >, Rev< 2u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Deprecate stdalignedstorage and stdalignedunion ") >, Rev< 3u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Deprecate stdalignedstorage and stdalignedunion ") > >() },
    { "p1415r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Vincent Reverdy Ritwik Dubey Richard Dosselmann Eugenio Bargiacchi ")) >(), wxS(" SG Machine Learning Layered List ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong Vincent Reverdy Ritwik Dubey Richard Dosselmann Eugenio Bargiacchi ")) >(), wxS(" SG Machine Learning Layered List ") > >() },
    { "p1416r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Johann Mabille Matthieu Brucher ")) >(), wxS(" SG Linear Algebra for Data Science and Machine Learning ") > >() },
    { "p1417r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Jayesh Badwaik Matthieu Brucher Athanasios Nasos Iliopoulos John Michopoulos ")) >(), wxS(" Historical lessons for C linear algebra library standardization ") > >() },
    { "p1419r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" A SFINAEfriendly trait to determine the extent of statically sized containers ") > >() },
    { "p1421r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemienski ")) >(), wxS(" Assigning semantics to different Contract Checking Statements ") > >() },
    { "p1422r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1423r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart backward compatibility remediation ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart backward compatibility remediation ") >, Rev< 2u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart backward compatibility remediation ") >, Rev< 3u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" chart backward compatibility remediation ") > >() },
    { "p1424r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" constexpr feature macro concerns ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" constexpr feature macro concerns ") > >() },
    { "p1425r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Iterators pair constructors for stack and queue ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Iterators pair constructors for stack and queue ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Iterators pair constructors for stack and queue ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Iterators pair constructors for stack and queue ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Iterators pair constructors for stack and queue ") > >() },
    { "p1426r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" Pull the Plug on Contracts ") > >() },
    { "p1427r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels Ben Craig Steve Downey Rene Rivera Tom Honermann Corentin Jabot Stephen Kelly ")) >(), wxS(" Concerns about module toolability ") > >() },
    { "p1428r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Subscripts and sizes should be signed ") > >() },
    { "p1429r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Contracts That Work ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Contracts That Work ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Contracts That Work ") >, Rev< 3u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Contracts That Work ") > >() },
    { "p1430r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Mihaylov Vassil Vassilev ")) >(), wxS(" Firstclass symmetric coroutines in C ") >, Rev< 1u, Arr64< Hash(wxS(" Mihail Mihaylov Vassil Vassilev ")) >(), wxS(" Firstclass symmetric coroutines in C ") > >() },
    { "p1433r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Compile Time Regular Expressions ") > >() },
    { "p1434r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel Jens Gustedt Martin Uecker ")) >(), wxS(" Discussing Pointer Provenance ") > >() },
    { "p1436r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Executor properties for affinitybased execution ") >, Rev< 1u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Executor properties for affinitybased execution ") >, Rev< 2u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen ")) >(), wxS(" Executor properties for affinitybased execution ") >, Rev< 3u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen Tom Scogland ")) >(), wxS(" Executor properties for affinitybased execution ") > >() },
    { "p1438r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" A Rational Number Library for C ") >, Rev< 1u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" A Rational Number Library for C ") > >() },
    { "p1439r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Charset Transcoding Transformation and Transliteration ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Charset Transcoding Transformation and Transliteration ") > >() },
    { "p1440r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Johel Guerrero ")) >(), wxS(" isclamped ") > >() },
    { "p1441r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" Are modules fast ") >, Rev< 1u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" Are modules fast ") > >() },
    { "p1442r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Damian Jarek ")) >(), wxS(" A Medley of Networking TS improvements ") > >() },
    { "p1443r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes    ") > >() },
    { "p1444r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning    ") > >() },
    { "p1445r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Concurrency TS to update or not update ") > >() },
    { "p1446r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Reconsider the Networking TS for inclusion in C ") > >() },
    { "p1447r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mat Chochlk Axel Naumann and David Sankel ")) >(), wxS(" constexpr C is not constexpr C ") > >() },
    { "p1448r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Burgers ")) >(), wxS(" Simplifying Mixed Contract Modes ") > >() },
    { "p1449r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Towards Tree and Graph Data Structures for C ") > >() },
    { "p1450r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Enriching type modification traits ") >, Rev< 1u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Enriching type modification traits ") >, Rev< 2u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Enriching type modification traits ") >, Rev< 3u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Enriching type modification traits ") > >() },
    { "p1452r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" On the nonuniform semantics of returntyperequirements ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" On the nonuniform semantics of returntyperequirements ") >, Rev< 2u, Arr64< Hash(wxS(" Hubert Tong ")) >(), wxS(" On the nonuniform semantics of returntyperequirements ") > >() },
    { "p1453r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Modularizing the Standard Library is a Reorganization Opportunity ") > >() },
    { "p1456r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Moveonly views ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Moveonly views ") > >() },
    { "p1457r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Kona ") > >() },
    { "p1458r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Language support library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Language support library ") > >() },
    { "p1459r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Diagnostics library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Diagnostics library ") > >() },
    { "p1460r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow Alberto Barbati ")) >(), wxS(" Mandating the Standard Library Clause   Utilities library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow Alberto Barbati ")) >(), wxS(" Mandating the Standard Library Clause   Utilities library ") > >() },
    { "p1462r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Strings library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Strings library ") > >() },
    { "p1463r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Containers library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Containers library ") > >() },
    { "p1464r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Iterators library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Iterators library ") > >() },
    { "p1465r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Function optimization hint attributes alwaysinline neverinline ") > >() },
    { "p1466r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard E Hinnant ")) >(), wxS(" Miscellaneous minor fixes for chrono ") >, Rev< 1u, Arr64< Hash(wxS(" Howard E Hinnant ")) >(), wxS(" Miscellaneous minor fixes for chrono ") >, Rev< 2u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Miscellaneous minor fixes for chrono ") >, Rev< 3u, Arr64< Hash(wxS(" Howard E Hinnant ")) >(), wxS(" Miscellaneous minor fixes for chrono ") > >() },
    { "p1467r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak David Olsen ")) >(), wxS(" Extended floatingpoint types ") >, Rev< 1u, Arr64< Hash(wxS(" Micha Dominiak David Olsen ")) >(), wxS(" Extended floatingpoint types ") >, Rev< 2u, Arr64< Hash(wxS(" Micha Dominiak David Olsen ")) >(), wxS(" Extended floatingpoint types ") >, Rev< 3u, Arr64< Hash(wxS(" David Olsen Micha Dominiak ")) >(), wxS(" Extended floatingpoint types ") >, Rev< 4u, Arr64< Hash(wxS(" David Olsen Micha Dominiak ")) >(), wxS(" Extended floatingpoint types and standard names ") >, Rev< 5u, Arr64< Hash(wxS(" David Olsen Micha Dominiak Ilya Burylov ")) >(), wxS(" Extended floatingpoint types and standard names ") >, Rev< 6u, Arr64< Hash(wxS(" David Olsen Micha Dominiak Ilya Burylov ")) >(), wxS(" Extended floatingpoint types and standard names ") >, Rev< 7u, Arr64< Hash(wxS(" David Olsen Micha Dominiak Ilya Burylov ")) >(), wxS(" Extended floatingpoint types and standard names ") >, Rev< 8u, Arr64< Hash(wxS(" David Olsen Micha Dominiak Ilya Burylov ")) >(), wxS(" Extended floatingpoint types and standard names ") >, Rev< 9u, Arr64< Hash(wxS(" David Olsen Micha Dominiak Ilya Burylov ")) >(), wxS(" Extended floatingpoint types and standard names ") > >() },
    { "p1468r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" Fixedlayout floatingpoint type aliases ") >, Rev< 1u, Arr64< Hash(wxS(" Micha Dominiak Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" Fixedlayout floatingpoint type aliases ") >, Rev< 2u, Arr64< Hash(wxS(" Micha Dominiak David Olsen Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" Fixedlayout floatingpoint type aliases ") >, Rev< 3u, Arr64< Hash(wxS(" Micha Dominiak David Olsen Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" Fixedlayout floatingpoint type aliases ") >, Rev< 4u, Arr64< Hash(wxS(" David Olsen Michal Dominiak Boris Fomitchev Sergei Nikolaev ")) >(), wxS(" Fixedlayout floatingpoint type aliases ") > >() },
    { "p1469r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sergei Murzin Michael Park David Sankel Dan Sarginson ")) >(), wxS(" Disallow  Usage in C for Pattern Matching in C ") > >() },
    { "p1470r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Against a standard concurrent hashmap ") > >() },
    { "p1471r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" The trouble with coroutinetraits ") > >() },
    { "p1472r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" SG Transactional Memory TM Meeting Minutes June   January  ") > >() },
    { "p1473r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Shadow namespaces ") > >() },
    { "p1474r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Helpful pointers for ContiguousIterator ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Helpful pointers for ContiguousIterator ") > >() },
    { "p1477r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Coroutines TS Simplifications ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Coroutines TS Simplifications ") > >() },
    { "p1478r0", RevList< Rev< 0u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 1u, Arr64< Hash(wxS(" HansJ Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 3u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 4u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 5u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 6u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 7u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") >, Rev< 8u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Bytewise atomic memcpy ") > >() },
    { "p1479r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Kawulak ")) >(), wxS(" ostringstream wrapper ") > >() },
    { "p1481r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolas Lesser ")) >(), wxS(" constexpr structured bindings ") > >() },
    { "p1482r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bruno Cardoso Lopes Michael Spencer JF Bastien ")) >(), wxS(" Modules Feedback ") > >() },
    { "p1484r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" A uniform and predefined mapping from modules to filenames ") > >() },
    { "p1485r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Better keywords for the Coroutines TS ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Better keywords for the Coroutines ") > >() },
    { "p1486r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" United Amendment to Contracts Facility for C ") >, Rev< 1u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" United Amendment to Contracts Facility for C ") > >() },
    { "p1487r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" User Experience with Contracts That Work ") > >() },
    { "p1490r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" ContractRelated Issues ") > >() },
    { "p1491r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Dont add to the signedunsigned mess ") > >() },
    { "p1492r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Daveed Vandevoorde Geoffrey Romer Gor Nishanov Nathan Sidwell Iain Sandoe Lewis Baker ")) >(), wxS(" Coroutines Language and Implementation Impact ") > >() },
    { "p1493r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoffrey Romer Gor Nishanov Lewis Baker Mihail Mihailov ")) >(), wxS(" Coroutines Usecases and Tradeoffs ") > >() },
    { "p1494r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") >, Rev< 3u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") >, Rev< 4u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") >, Rev< 5u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Partial program correctness ") > >() },
    { "p1496r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot Jorg Brown Victor Zverovich ")) >(), wxS(" Formatting of Negative Zero ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot Jorg Brown ")) >(), wxS(" Formatting of Negative Zero ") >, Rev< 2u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Formatting of Negative Zero ") > >() },
    { "p1498r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chandler Carruth Nathan Sidwell Richard Smith ")) >(), wxS(" Constrained Internal Linkage for Modules ") >, Rev< 1u, Arr64< Hash(wxS(" Chandler Carruth Nathan Sidwell Richard Smith ")) >(), wxS(" Constrained Internal Linkage for Modules ") > >() },
    { "p1502r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Standard library header units for C ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Standard library header units for C ") > >() },
    { "p1505r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Atomic operations library ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Atomic operations library ") > >() },
    { "p1510r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group tentatively ready Issues for the July  Cologne meeting ") > >() },
    { "p1517r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall ")) >(), wxS(" Contract Requirements for Iterative HighAssurance Systems ") > >() },
    { "p1518r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Mike Spertus ")) >(), wxS(" Stop overconstraining allocators in container deduction guides ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Mike Spertus ")) >(), wxS(" Stop overconstraining allocators in container deduction guides ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer Mike Spertus ")) >(), wxS(" Stop overconstraining allocators in container deduction guides ") > >() },
    { "p1520r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Response to response to Fibers under the magnifying glass ") > >() },
    { "p1522r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Iterator Difference Type and Integer Overflow ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Iterator Difference Type and Integer Overflow ") > >() },
    { "p1523r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Views and Size Types ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Views and Size Types ") > >() },
    { "p1525r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Kirk Shoop Lewis Baker Lee Howes ")) >(), wxS(" OneWay execute is a Poor Basis Operation ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler Kirk Shoop Lewis Baker Lee Howes Gaper Aman Corentin Jabot Tomasz Kamiski Zach Laine Ville Voutilainen ")) >(), wxS(" OneWay execute is a Poor Basis Operation ") > >() },
    { "p1601r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Daniel Sunderland ")) >(), wxS(" Recommendations for Specifying Hidden Friends ") > >() },
    { "p1602r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Make Me A Module ") > >() },
    { "p1604r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" The inline keyword is not in line with the design of modules ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" The inline keyword is not in line with the design of modules ") > >() },
    { "p1605r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" Member Layout Control ") > >() },
    { "p1606r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Requirements for Contract Roles ") > >() },
    { "p1607r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Jeff Snyder ")) >(), wxS(" Minimizing Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne Jeff Snyder Ryan McDougall ")) >(), wxS(" Minimizing Contracts ") > >() },
    { "p1609r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" C Should Support JustinTime Compilation ") >, Rev< 1u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" C Should Support JustinTime Compilation ") >, Rev< 2u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" C Should Support JustinTime Compilation ") >, Rev< 3u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" C Should Support JustinTime Compilation ") > >() },
    { "p1610r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Stearn ")) >(), wxS(" Rename awaitresume to awaitresult ") > >() },
    { "p1611r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Dinka Ranns ")) >(), wxS(" WG  Kona Record of Discussion ") > >() },
    { "p1612r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Arthur ODwyer ")) >(), wxS(" Relocate Endians Specification ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Relocate Endians Specification ") > >() },
    { "p1614r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" The Mothership Has Landed Adding ltgt to the Library ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" The Mothership Has Landed Adding ltgt  to the Library ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" The Mothership Has Landed Adding ltgt to the Library ") > >() },
    { "p1616r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Roland Bock ")) >(), wxS(" Using unconstrained template template parameters with constrained templates ") >, Rev< 1u, Arr64< Hash(wxS(" Mike Spertus Roland Bock ")) >(), wxS(" Using unconstrained template template parameters with constrained templates ") > >() },
    { "p1619r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Functions for Testing Boundary Conditions on Integer Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Functions for Testing Boundary Conditions on Integer Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Functions for Testing Boundary Conditions on Integer Operations ") > >() },
    { "p1622r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Thread support library ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Thread support library ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Thread support library ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Thread support library ") > >() },
    { "p1624r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Resolving technical issues in parameter mapping equivalence and related problems ") >, Rev< 1u, Arr64< Hash(wxS(" Hubert Tong ")) >(), wxS(" Resolving technical issues in parameter mapping equivalence and related problems ") > >() },
    { "p1625r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Contracts why the house is not on fire ie why the status quo is tolerable ") > >() },
    { "p1628r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Unicode characters properties ") > >() },
    { "p1629r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Standard Text Encoding ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Transcoding the world  Standard Text Encoding ") > >() },
    { "p1630r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Spaceship needs a tuneup Addressing some discovered issues with P and P ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Spaceship needs a tuneup ") > >() },
    { "p1631r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Object detachment and attachment ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas Bob Steagall ")) >(), wxS(" Object detachment and attachment ") > >() },
    { "p1633r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen Olivier Giroux ")) >(), wxS(" Amendments to the C Synchronization Library ") >, Rev< 1u, Arr64< Hash(wxS(" David Olsen Olivier Giroux ")) >(), wxS(" Amendments to the C Synchronization Library ") > >() },
    { "p1634r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming guidelines for modules ") > >() },
    { "p1635r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jayesh Badwaik ")) >(), wxS(" A Design for an InterOperable and Customizable Linear Algebra Library ") > >() },
    { "p1636r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lars Gullik Bjnnes ")) >(), wxS(" Formatters for library types ") >, Rev< 1u, Arr64< Hash(wxS(" Lars Gullik Bjnnes ")) >(), wxS(" Formatters for library types ") >, Rev< 2u, Arr64< Hash(wxS(" Lars Gullik Bjnnes ")) >(), wxS(" Formatters for library types ") > >() },
    { "p1638r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Christopher Di Bella ")) >(), wxS(" basicistreamviews iterator should not be copyable ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Christopher Di Bella ")) >(), wxS(" basicistreamviews iterator should not be copyable ") > >() },
    { "p1639r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Unifying sourcelocation and contractviolation ") > >() },
    { "p1640r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Error size benchmarking ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Error size benchmarking Redux ") > >() },
    { "p1641r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Rewording the Status Quo ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Rewording the Status Quo ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Rewording the Status Quo ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Rewording the Status Quo ") > >() },
    { "p1642r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 10u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 11u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 5u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 6u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 7u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 8u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") >, Rev< 9u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Easy utilities ranges and iterators ") > >() },
    { "p1643r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Add waitnotify to atomicrefltTgt ") >, Rev< 1u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Add waitnotify to atomicref ") > >() },
    { "p1644r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Add waitnotify to atomicltsharedptrltTgtgt ") > >() },
    { "p1645r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Deane ")) >(), wxS(" constexpr for numeric algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Deane ")) >(), wxS(" constexpr for numeric algorithms ") > >() },
    { "p1648r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" The Concept of Extending Argument and a Support Library ") >, Rev< 1u, Arr64< Hash(wxS(" Mingxin Wang Agustn Berg ")) >(), wxS(" The Concept of Extending Argument and a Support Library ") >, Rev< 2u, Arr64< Hash(wxS(" Mingxin Wang Agustn Berg ")) >(), wxS(" A Library for Sink Argument Passing ") > >() },
    { "p1649r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" A Generic Library for Compiletime Routing ") > >() },
    { "p1650r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Output stdchronodays with d suffix ") > >() },
    { "p1651r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" bindfront should not unwrap referencewrapper ") > >() },
    { "p1652r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan Victor Zverovich ")) >(), wxS(" Printf corner cases in stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan Victor Zverovich ")) >(), wxS(" Printf corner cases in stdformat ") > >() },
    { "p1654r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Roger Orr ")) >(), wxS(" ABI breakage  summary of initial comments ") >, Rev< 1u, Arr64< Hash(wxS(" Roger Orr ")) >(), wxS(" ABI breakage  summary of initial comments ") > >() },
    { "p1655r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" LEWG Omnibus Design Policy Paper ") > >() },
    { "p1656r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Agustn Berg ")) >(), wxS(" Throws Nothing should be noexcept ") >, Rev< 1u, Arr64< Hash(wxS(" Agustn Berg ")) >(), wxS(" Throws Nothing should be noexcept ") >, Rev< 2u, Arr64< Hash(wxS(" Agustn Berg ")) >(), wxS(" Throws Nothing should be noexcept ") > >() },
    { "p1657r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul Fee ")) >(), wxS(" String substring checking ") > >() },
    { "p1658r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Bryce Adelstein Lelbach ")) >(), wxS(" Suggestions for Consensus on Executors ") > >() },
    { "p1659r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" startswith and endswith ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" startswith and endswith ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" startswith and endswith ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" startswith and endswith ") > >() },
    { "p1660r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland Bryce Adelstein Lelbach Micha Dominiak Eric Niebler Kirk Shoop Lewis Baker Lee Howes David S Hollman Gordon Brown ")) >(), wxS(" A Compromise Executor Design Sketch ") > >() },
    { "p1661r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Remove dedicated precalculated hash lookup interface ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Remove dedicated precalculated hash lookup interface ") > >() },
    { "p1662r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Adding async RAII support to coroutines ") > >() },
    { "p1663r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Supporting returnvalueoptimisation in coroutines ") > >() },
    { "p1664r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 5u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 6u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") >, Rev< 7u, Arr64< Hash(wxS(" JeanHeyd Meneide Hannes Hauswedell ")) >(), wxS(" reconstructiblerange  a concept for putting ranges back together ") > >() },
    { "p1665r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Bandela ")) >(), wxS(" Tag Based Customization Point Functions ") > >() },
    { "p1666r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1667r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Conceptaware noexcept specifiers ") > >() },
    { "p1668r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Enabling constexpr Intrinsics By Permitting Unevaluated inlineassembly in constexpr Functions ") >, Rev< 1u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Enabling constexpr Intrinsics By Permitting Unevaluated inlineassembly in constexpr Functions ") > >() },
    { "p1669r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Callsite Based Inlining Hints alwaysinline and neverinline ") > >() },
    { "p1670r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Alisdair Meredith ")) >(), wxS(" Side Effects of Checked Contracts and Predicate Elision ") > >() },
    { "p1671r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Alisdair Meredith ")) >(), wxS(" Contract Evaluation in Constant Expressions ") > >() },
    { "p1672r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Axiom is a False Friend ") > >() },
    { "p1673r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen David Hollman Christian Trott Daniel Sunderland Nevin Liber Siva Rajamanickam LiTa Lo Graham Lopez Peter Caday Sarah Knepper Piotr Luszczek Timothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen David Hollman Christian Trott Daniel Sunderland Nevin Liber Siva Rajamanickam LiTa Lo Graham Lopez Peter Caday Sarah Knepper Piotr Luszczek Timothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 10u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 11u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 12u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 13u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen David Hollman Christian Trott Daniel Sunderland Nevin Liber Siva Rajamanickam LiTa Lo Damien LebrunGrandie Graham Lopez Peter Caday Sarah Knepper Piotr Luszczek Timothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 3u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 4u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 5u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 6u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 7u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 8u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") >, Rev< 9u, Arr64< Hash(wxS(" Mark Hoemmen Daisy HollmanChristian TrottDaniel SunderlandNevin LiberAlicia KlinvexLiTa LoDamien LebrunGrandieGraham LopezPeter CadaySarah KnepperPiotr LuszczekTimothy Costa ")) >(), wxS(" A free function linear algebra interface based on the BLAS ") > >() },
    { "p1674r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen David Hollman Christian Trott ")) >(), wxS(" Evolving a Standard C Linear Algebra Library from the BLAS ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen Daisy Hollman Christian Trott ")) >(), wxS(" Evolving a Standard C Linear Algebra Library from the BLAS ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen Daisy Hollman Christian Trott ")) >(), wxS(" Evolving a Standard C Linear Algebra Library from the BLAS ") > >() },
    { "p1675r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" rethrowexception must be allowed to copy ") >, Rev< 1u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" rethrowexception must be allowed to copy ") >, Rev< 2u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" rethrowexception must be allowed to copy ") > >() },
    { "p1676r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" C Exception Optimizations An experiment ") > >() },
    { "p1677r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Cancellation is not an Error ") >, Rev< 1u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Cancellation is not an Error ") >, Rev< 2u, Arr64< Hash(wxS(" Kirk Shoop Lisa Lippincott Lewis Baker ")) >(), wxS(" Cancellation is not an Error ") > >() },
    { "p1678r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Callbacks and Composition ") >, Rev< 1u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Callbacks and Composition ") >, Rev< 2u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Callbacks and Composition ") > >() },
    { "p1679r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Wim Leflere ")) >(), wxS(" String Contains function ") >, Rev< 1u, Arr64< Hash(wxS(" Wim Leflere Paul Fee ")) >(), wxS(" String Contains function ") >, Rev< 2u, Arr64< Hash(wxS(" Wim Leflere Paul Fee ")) >(), wxS(" String Contains function ") >, Rev< 3u, Arr64< Hash(wxS(" Wim Leflere Paul Fee ")) >(), wxS(" String Contains function ") > >() },
    { "p1680r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Jeff Chapman ")) >(), wxS(" Implementing Contracts in GCC ") > >() },
    { "p1681r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Revisiting allocator model for coroutine lazytaskgenerator ") > >() },
    { "p1682r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdtounderlying ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdtounderlying ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdtounderlying ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" stdtounderlying ") > >() },
    { "p1683r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" References for Standard Library Vocabulary Types  an optional case study ") > >() },
    { "p1684r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Hollman Christian Trott Mark Hoemmen Daniel Sundernland ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Christian Trott David HollmanMark HoemmenDaniel Sunderland ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") >, Rev< 2u, Arr64< Hash(wxS(" Christian Trott David HollmanMark HoemmenDaniel Sunderland ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") >, Rev< 3u, Arr64< Hash(wxS(" Christian Trott David HollmanMark HoemmenDaniel Sunderland ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") >, Rev< 4u, Arr64< Hash(wxS(" Christian Trott David HollmanMark HoemmenDaniel SunderlandDamien LebrunGrandie ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") >, Rev< 5u, Arr64< Hash(wxS(" Christian Trott David HollmanMark HoemmenDaniel SunderlandDamien LebrunGrandie ")) >(), wxS(" mdarray An Owning Multidimensional Array Analog of mdspan ") > >() },
    { "p1685r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Make getsetdefaultresource replaceable ") > >() },
    { "p1686r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Mandating the Standard Library Clause   Time library ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Mandating the Standard Library Clause   Time library ") >, Rev< 2u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Mandating the Standard Library Clause   Time library ") > >() },
    { "p1687r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Ben Craig ")) >(), wxS(" Summary of the Tooling Study Groups PreCologne Telecons on Modules Tooling Interactions ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Ben Craig ")) >(), wxS(" Summary of the Tooling Study Groups Modules Ecosystem Technical Report Telecons ") > >() },
    { "p1688r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Towards a C Ecosystem Technical Report ") > >() },
    { "p1689r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") >, Rev< 5u, Arr64< Hash(wxS(" Ben Boeckel Brad King ")) >(), wxS(" Format for describing dependencies of source files ") > >() },
    { "p1690r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Xiao Shi Mateusz Pusz Geoffrey Romer ")) >(), wxS(" Refinement Proposal for P Heterogeneous lookup for unordered containers ") >, Rev< 1u, Arr64< Hash(wxS(" Xiao Shi Mateusz Pusz Geoffrey Romer ")) >(), wxS(" Refinement Proposal for P Heterogeneous lookup for unordered containers ") > >() },
    { "p1696r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Xiao Shi Mateusz Pusz Geoffrey Romer Jay Feldblum ")) >(), wxS(" Refinement proposal for P Precalculated hash values in lookup ") > >() },
    { "p1697r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Botond Ballo ")) >(), wxS(" Require a diagnostic for declaration changes meaning ") > >() },
    { "p1700r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella JC van Winkel ")) >(), wxS(" Targetaudience tables ") > >() },
    { "p1701r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Inline Namespaces Fragility Bites ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Inline Namespaces Fragility Bites ") >, Rev< 2u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Inline Namespaces Fragility Bites ") > >() },
    { "p1702r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Annex D Means Deprecated ") > >() },
    { "p1703r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" Recognizing Header Unit Imports Requires Full Preprocessing ") >, Rev< 1u, Arr64< Hash(wxS("Boris Kolpackov ")) >(), wxS(" Recognizing Header Unit Imports Requires Full Preprocessing ") > >() },
    { "p1704r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Joshua Berne ")) >(), wxS(" Undefined functions in axiomlevel contract statements ") > >() },
    { "p1705r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Shafik Yaghmour ")) >(), wxS(" Enumerating Core Undefined Behavior ") >, Rev< 1u, Arr64< Hash(wxS(" Shafik Yaghmour ")) >(), wxS(" Enumerating Core Undefined Behavior ") > >() },
    { "p1706r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Stephen Michel ")) >(), wxS(" Programming Language Vulnerabilities for C update ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong Stephen Michel ")) >(), wxS(" Programming Language Vulnerabilities for C update ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Wong Stephen Michel Peter Sommerlad Lisa Lippincott Aaron Ballman Richard Corden Clive Pygott Erhard Ploedereder John McFarlane Paul Preney Andreas Weis Federico Kircheis Tullio Vardanega Jorg Brown Chris Tapp ")) >(), wxS(" Programming Language Vulnerabilities for Safety Critical C ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Wong Stephen Michel Peter Sommerlad Lisa Lippincott Aaron Ballman Richard Corden Clive Pygott Erhard Ploedereder John McFarlane Paul Preney Andreas Weis Federico Kircheis Tullio Vardanega Jorg Brown Chris Tapp ")) >(), wxS(" Programming Language Vulnerabilities for Safety Critical C ") > >() },
    { "p1708r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Dosselmann Michael Wong ")) >(), wxS(" Simple Statistics functions ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Wong Micheal Chiu Richard Dosselmann Eric Niebler Phillip Ratzlof Vincent Reverdy ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 3u, Arr64< Hash(wxS(" Richard Dosselman Micheal Chiu Richard Dosselmann Eric Niebler Phillip Ratzlof Vincent Reverdy ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 4u, Arr64< Hash(wxS(" Richard Dosselman Micheal Chiu Richard Dosselmann Eric Niebler Phillip Ratzlof Vincent Reverdy Jens Maurer ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 5u, Arr64< Hash(wxS(" Richard Dosselman Micheal Chiu Richard Dosselmann Eric Niebler Phillip Ratzlof Vincent Reverdy Jens Maurer ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 6u, Arr64< Hash(wxS(" Richard Dosselman Micheal Chiu Richard Dosselmann Eric Niebler Phillip Ratzlof Vincent Reverdy Jens Maurer ")) >(), wxS(" Simple Statistical Functions ") >, Rev< 7u, Arr64< Hash(wxS(" Richard Dosselmann ")) >(), wxS(" Basic Statistics ") >, Rev< 8u, Arr64< Hash(wxS(" Richard Dosselmann ")) >(), wxS(" Basic Statistics ") >, Rev< 9u, Arr64< Hash(wxS(" Richard Dosselmann ")) >(), wxS(" Basic Statistics ") > >() },
    { "p1709r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phillip Ratzloff Richard Dosselmann Michael Wong ")) >(), wxS(" Graph Data Structures ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Graph Data Structures ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Wong Phillip Ratzloff Richard Dosselmann Michael Wong Matthew Galati Andrew Lumsdaine Jens Maurer Domagoj Saric Jesun Firoz Kevin Deweese ")) >(), wxS(" Graph Library ") >, Rev< 3u, Arr64< Hash(wxS(" Phillip Ratzloff Andrew Lumsdaine Richard Dosselmann Michael Wong Matthew Galati Jens Maurer  Domagoj Saric Jesun Firoz Kevin Deweese  ")) >(), wxS(" Graph Library ") >, Rev< 4u, Arr64< Hash(wxS(" Phillip Ratzloff Andrew Lumsdaine Richard Dosselmann Michael Wong Matthew Galati Jens Maurer  Domagoj Saric Jesun Firoz Kevin Deweese  ")) >(), wxS(" Graph Library ") >, Rev< 5u, Arr64< Hash(wxS(" Phillip Ratzloff Andrew Lumsdaine Richard Dosselmann Michael Wong Matthew Galati Jens Maurer  Domagoj Saric Jesun Firoz Kevin Deweese  ")) >(), wxS(" Graph Library ") > >() },
    { "p1710r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Adding a global contract assumption mode ") > >() },
    { "p1711r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" What to do about contracts ") > >() },
    { "p1713r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Allowing both coreturn and coreturn value in the same coroutine ") > >() },
    { "p1714r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" NTTP are incomplete without float double and long double ") >, Rev< 1u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" NTTP are incomplete without float double and long double ") > >() },
    { "p1715r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Loosen restrictions on t typedefs and v values ") >, Rev< 1u, Arr64< Hash(wxS(" Jorg Brown ")) >(), wxS(" Loosen restrictions on t typedefs and v values ") > >() },
    { "p1716r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" ranges compare algorithm are overconstrained ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" ranges compare algorithm are overconstrained ") >, Rev< 2u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" ranges compare algorithm are overconstrained ") >, Rev< 3u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" ranges compare algorithm are overconstrained ") > >() },
    { "p1717r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Wyatt Childers ")) >(), wxS(" Compiletime Metaprogramming in C ") > >() },
    { "p1718r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Algorithms library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Algorithms library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Algorithms library ") > >() },
    { "p1719r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Numerics library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Numerics library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Numerics library ") > >() },
    { "p1720r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Localization library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Localization library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Localization library ") > >() },
    { "p1721r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   InputOutput library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   InputOutput library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   InputOutput library ") > >() },
    { "p1722r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Regular Expression library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Regular Expression library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Regular Expression library ") > >() },
    { "p1723r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Atomics library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Mandating the Standard Library Clause   Atomics library ") >, Rev< 2u, Arr64< Hash(wxS(" Marshall Clow Daniel Sunderland ")) >(), wxS(" Mandating the Standard Library Clause   Atomics library ") > >() },
    { "p1724r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues to be moved in Cologne ") > >() },
    { "p1725r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Modular Topic Design ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Modular Topic Design ") > >() },
    { "p1726r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas ")) >(), wxS(" Pointer lifetimeend zap ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Mauer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Will Deacon Michael Wong ")) >(), wxS(" Pointer lifetimeend zap ") >, Rev< 2u, Arr64< Hash(wxS(" Maged Michael Jens Mauer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Will Deacon Michael Wong and David Goldblatt ")) >(), wxS(" Pointer lifetimeend zap ") >, Rev< 3u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Mauer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Will Deacon Michael Wong and David Goldblatt ")) >(), wxS(" Pointer lifetimeend zap ") >, Rev< 4u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany and Anthony Williams ")) >(), wxS(" Pointer lifetimeend zap ") >, Rev< 5u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany and Anthony Williams ")) >(), wxS(" Pointer lifetimeend zap informationalhistorical ") > >() },
    { "p1727r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Denis Yaroshevskiy ")) >(), wxS(" Issues with current flatmap proposal ") > >() },
    { "p1728r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Preconditions axiomlevel contracts and assumptions  an in depth study ") > >() },
    { "p1729r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Text Parsing ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich  Elias Kosunen ")) >(), wxS(" Text Parsing ") >, Rev< 2u, Arr64< Hash(wxS(" Elias Kosunen Victor Zverovich ")) >(), wxS(" Text Parsing ") >, Rev< 3u, Arr64< Hash(wxS(" Elias Kosunen Victor Zverovich ")) >(), wxS(" Text Parsing ") >, Rev< 4u, Arr64< Hash(wxS(" Elias Kosunen Victor Zverovich ")) >(), wxS(" Text Parsing ") >, Rev< 5u, Arr64< Hash(wxS(" Elias Kosunen Victor Zverovich ")) >(), wxS(" Text Parsing ") > >() },
    { "p1730r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hyman Rosen John Lakos Alisdair Meredith ")) >(), wxS(" Adding a global contract assumption mode ") > >() },
    { "p1731r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern Ilya Burylov Ruslan Arutyunyan ")) >(), wxS(" Memory helper functions for containers ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan Ilya Burylov Pablo Halpern ")) >(), wxS(" Memory helper functions for containers ") > >() },
    { "p1732r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Do not promise support for function syntax of operators ") >, Rev< 1u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Do not promise support for function syntax of operators ") >, Rev< 2u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Do not promise support for function syntax of operators ") >, Rev< 3u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Do not promise support for function syntax of operators ") >, Rev< 4u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Do not promise support for function syntax of operators ") > >() },
    { "p1733r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Daveed Vandevoorde ")) >(), wxS(" Userfriendly and Evolutionfriendly Reflection A Compromise ") > >() },
    { "p1734r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson ")) >(), wxS(" Defaultable default constructors and destructors for all unions ") > >() },
    { "p1735r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning  ") > >() },
    { "p1736r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p1737r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" uniquefunction vs anyinvokable  Bikeshedding Off the Rails ") > >() },
    { "p1738r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" The Executor Concept Hierarchy Needs a Single Root ") > >() },
    { "p1739r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Type erasure for forwarding ranges in combination with subrangey view adaptors ") >, Rev< 1u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Type erasure for forwarding ranges in combination with subrangey view adaptors ") >, Rev< 2u, Arr64< Hash(wxS(" Hannes Hauswedell h AT fsfeorg ")) >(), wxS(" Avoid template bloat for forwarding ranges in combination with subrangey view adaptors ") >, Rev< 3u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Avoid template bloat for saferanges in combination with subrangey view adaptors ") >, Rev< 4u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Avoid template bloat for saferanges in combination with subrangey view adaptors ") > >() },
    { "p1743r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rostislav Khlebnikov John Lakos ")) >(), wxS(" Contracts Undefined Behavior and Defensive Programming ") > >() },
    { "p1744r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rostislav Khlebnikov John Lakos ")) >(), wxS(" Avoiding Misuse of ContractChecking ") > >() },
    { "p1745r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Coroutine changes for C and beyond ") > >() },
    { "p1746r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Powell David Singer Sophia Poirier Dan Klingler Tony Guetta JF Bastien ")) >(), wxS(" Feedback on a hrefprpdfPRa stdaudio ") >, Rev< 1u, Arr64< Hash(wxS(" Sophia Poirier Richard Powell David Singer Dan Klingler Tony Guetta Doug Wyatt ")) >(), wxS(" Feedback on a hrefprpdfPRa stdaudio ") > >() },
    { "p1747r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yehezkel Bernat ")) >(), wxS(" Dont use chart and stdustring yet in P ") > >() },
    { "p1748r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yehezkel Bernat ")) >(), wxS(" Fill in delaycpp TODO in D ") >, Rev< 1u, Arr64< Hash(wxS(" Yehezkel Bernat ")) >(), wxS(" Fill in delaycpp TODO in D ") > >() },
    { "p1749r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yehezkel Bernat ")) >(), wxS(" Access control for reflection ") > >() },
    { "p1750r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Klemens Morgenstern Jeff Garland Elias Kosunen Fatih Bakir ")) >(), wxS(" A Proposal to Add Process Management to the C Standard Library ") >, Rev< 1u, Arr64< Hash(wxS(" Klemans Morgenstern Jeff Garland Elias Kosunen Fatih Bakir ")) >(), wxS(" A Proposal to Add Process Management to the C Standard Library ") > >() },
    { "p1751r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Numeric Type Families ") > >() },
    { "p1753r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Name Lookup Should Find the First Thing of That Name ") > >() },
    { "p1754r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter Casey Carter Gabriel Dos Reis Eric Niebler Bjarne Stroustrup Andrew Sutton Ville Voutilainen ")) >(), wxS(" Rename concepts to standardcase for C while we still can ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter Casey Carter Gabriel Dos Reis Eric Niebler Bjarne Stroustrup Andrew Sutton Ville Voutilainen ")) >(), wxS(" Rename concepts to standardcase for C while we still can ") > >() },
    { "p1759r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handle from file streams ") >, Rev< 1u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handle from file streams ") >, Rev< 2u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handle from file streams ") >, Rev< 3u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handles and file streams ") >, Rev< 4u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handles and file streams ") >, Rev< 5u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handles and file streams ") >, Rev< 6u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Native handles and file streams ") > >() },
    { "p1760r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" snapshotsource  A Horse with a Better Name ") > >() },
    { "p1761r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Concurrent map customization options SG version ") > >() },
    { "p1762r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Concurrent map customization options LEWG version ") > >() },
    { "p1764r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tony Van Eerd ")) >(), wxS(" ssize Should be Named count ") > >() },
    { "p1766r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Mitigating minor modules maladies ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Mitigating minor modules maladies ") > >() },
    { "p1767r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Packaging C Modules ") > >() },
    { "p1768r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Contiguous Containers Should Contain data ") > >() },
    { "p1769r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" The default contract buildlevel and continuationmode should be implementationdefined ") > >() },
    { "p1770r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" On vectors tensors matrices and hypermatrices ") > >() },
    { "p1771r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" nodiscard for constructors ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" nodiscard for constructors ") > >() },
    { "p1772r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Variadic overload sets and overload sequences ") >, Rev< 1u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Variadic overload sets and overload sequences ") > >() },
    { "p1773r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts have failed to provide a portable assume ") > >() },
    { "p1774r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable optimisation hints ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable optimisation hints ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 3u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 4u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 5u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 6u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 7u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") >, Rev< 8u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Portable assumptions ") > >() },
    { "p1779r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" ABI isolation for member functions ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" ABI isolation for member functions ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" ABI isolation for member functions ") >, Rev< 3u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" ABI isolation for member functions ") > >() },
    { "p1780r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Batty Simon Cooksey Scott Owens Anouk Paradis Marco Paviotti Daniel Wright ")) >(), wxS(" Modular Relaxed Dependencies A new approach to the OutOfThinAir Problem ") > >() },
    { "p1782r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Local contract restrictions ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Local contract restrictions ") > >() },
    { "p1786r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hyman Rosen John Lakos Alisdair Meredith ")) >(), wxS(" Adding a global contract assumption mode ") > >() },
    { "p1787r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 3u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 4u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 5u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") >, Rev< 6u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Declarations and where to find them ") > >() },
    { "p1788r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olga Arkhipova ")) >(), wxS(" Reuse of the built modules BMI ") >, Rev< 2u, Arr64< Hash(wxS(" Olga Arkhipova ")) >(), wxS(" Reuse of the built modules BMI ") >, Rev< 3u, Arr64< Hash(wxS(" Olga Arkhipova ")) >(), wxS(" Reuse of the built modules BMI ") > >() },
    { "p1789r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Library Support for Expansion Statements ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Jeremy Rifkin Matthias Wippich ")) >(), wxS(" Library Support for Expansion Statements ") > >() },
    { "p1790r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to enable better DynamicBuffer composition ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to enable better DynamicBuffer composition ") > >() },
    { "p1791r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff Jamie Allsop ")) >(), wxS(" Evolution of the P Unified Executors Proposal to accommodate new requirements ") > >() },
    { "p1792r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Simplifying and generalising SenderReceiver for asynchronous operations ") > >() },
    { "p1793r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Simplifying Contract Syntax ") > >() },
    { "p1795r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong Mark Hoemmen Jeff Hammond Tom Scogland ")) >(), wxS(" System topology discovery for heterogeneous amp distributed computing ") >, Rev< 1u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong Mark Hoemmen Jeff Hammond Tom Scogland Domagoj ari ")) >(), wxS(" System topology discovery for heterogeneous amp distributed computing ") >, Rev< 2u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong Mark Hoemmen Jeff Hammond Tom Scogland Domagoj ari ")) >(), wxS(" System topology discovery for heterogeneous ampamp distributed computing ") > >() },
    { "p1796r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sewell Kayvan Memarian Victor B F Gomes Jens Gustedt Hubert Tong ")) >(), wxS(" Effective Types Examples ") > >() },
    { "p1797r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sewell ")) >(), wxS(" CC Memory Object Model Papers  Introduction ") > >() },
    { "p1798r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Linear Algebra SIG Meeting Minutes  ") > >() },
    { "p1801r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Clarifying atomicthreadidcompareexchange ") > >() },
    { "p1803r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" packexprargs I  compiletime friendly pack inspection ") > >() },
    { "p1807r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An Overview of Contracts Papers for Cologne ") > >() },
    { "p1808r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Contra P polymorphicallocator as a vocabulary type ") > >() },
    { "p1810r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" A Quick Look at What P Will Change ") > >() },
    { "p1811r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith Gabriel Dos Reis ")) >(), wxS(" Relaxing redefinition restrictions for reexportation robustness ") > >() },
    { "p1812r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Ville Voutilainen ")) >(), wxS(" Axioms should be assumable a minimal fix for contracts ") > >() },
    { "p1813r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" A Concept Design for the Numeric Algorithms ") > >() },
    { "p1814r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Wording for Class Template Argument Deduction for Alias Templates ") > >() },
    { "p1815r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Translationunitlocal entities ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Translationunitlocal entities ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Translationunitlocal entities ") > >() },
    { "p1816r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Wording for class template argument deduction for aggregates ") > >() },
    { "p1818r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Narrowing and Widening Conversions ") >, Rev< 1u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" Narrowing and Widening Conversions ") > >() },
    { "p1819r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" Interpolated Literals ") > >() },
    { "p1820r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown ")) >(), wxS(" Recommendations for a compromise on handling errors and cancellations in executors ") > >() },
    { "p1823r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis Ville Voutilainen Roger Orr Daveed Vandevoorde John Spicer Christopher Di Bella ")) >(), wxS(" Remove Contracts from C ") > >() },
    { "p1825r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Merged wording for a hrefprhtmlPRa and a hrefprhtmlPRa ") > >() },
    { "p1830r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan ")) >(), wxS(" stddependentfalse ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan ")) >(), wxS(" stddependentfalse ") > >() },
    { "p1831r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" deprecating volatile library ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" deprecating volatile library ") > >() },
    { "p1832r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Improving Debug Builds Inline With User Expectation ") > >() },
    { "p1837r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Remove NTTPs of class type from C ") > >() },
    { "p1838r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Boris Kolpackov ")) >(), wxS(" Modules UserFacing Lexicon and File Extensions ") > >() },
    { "p1839r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Krystian Stasiowski ")) >(), wxS(" Accessing Object Representations ") >, Rev< 1u, Arr64< Hash(wxS(" Krystian Stasiowski ")) >(), wxS(" Accessing Object Representations ") >, Rev< 2u, Arr64< Hash(wxS(" Krystian Stasiowski ")) >(), wxS(" Accessing Object Representations ") >, Rev< 3u, Arr64< Hash(wxS(" Krystian Stasiowski Timur Doumler ")) >(), wxS(" Accessing Object Representations ") >, Rev< 4u, Arr64< Hash(wxS(" Krystian Stasiowski Timur Doumler ")) >(), wxS(" Accessing Object Representations ") >, Rev< 5u, Arr64< Hash(wxS(" Timur Doumler Krystian Stasiowski ")) >(), wxS(" Accessing object representations ") >, Rev< 6u, Arr64< Hash(wxS(" Brian Bi Krystian Stasiowski Timur Doumler ")) >(), wxS(" Accessing object representations ") >, Rev< 7u, Arr64< Hash(wxS(" Brian Bi Krystian Stasiowski Timur Doumler ")) >(), wxS(" Accessing object representations ") > >() },
    { "p1840r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" Cologne  Record of Discussion ") > >() },
    { "p1841r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Wording for Individually Specializable Numeric Traits ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Wording for Individually Specializable Numeric Traits ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Wording for Individually Specializable Numeric Traits ") >, Rev< 3u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Wording for Individually Specializable Numeric Traits ") > >() },
    { "p1842r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boris Kolpackov ")) >(), wxS(" Generalized Module Dependency Mapper ") > >() },
    { "p1843r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" Comparison and Hasher Requirements ") > >() },
    { "p1844r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nozomu Kat ")) >(), wxS(" Enhancement of regex ") >, Rev< 1u, Arr64< Hash(wxS(" Nozomu Kat ")) >(), wxS(" Enhancement of regex ") > >() },
    { "p1845r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Jon Kalb ")) >(), wxS("  Denver Tooling Meeting ") > >() },
    { "p1846r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John McFarlane ")) >(), wxS(" Teach class Last ") > >() },
    { "p1847r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Make declaration order layout mandated ") >, Rev< 1u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Make declaration order layout mandated ") >, Rev< 2u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Make declaration order layout mandated ") >, Rev< 3u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Make declaration order layout mandated ") >, Rev< 4u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Make declaration order layout mandated ") > >() },
    { "p1848r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Improve rules of standard layout ") > >() },
    { "p1851r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" Guidelines For snakecase Concept Naming ") > >() },
    { "p1854r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Conversion to execution encoding should not lead to loss of meaning ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Conversion to literal encoding should not lead to loss of meaning ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Conversion to literal encoding should not lead to loss of meaning ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Conversion to literal encoding should not lead to loss of meaning ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Making nonencodable string literals illformed ") > >() },
    { "p1855r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig Bryce Adelstein Lelbach ")) >(), wxS(" Make ltcomparegt freestanding ") > >() },
    { "p1856r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Bit operations do not work on bytes a generic fix ") > >() },
    { "p1857r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Modules Dependency Discovery ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Modules Dependency Discovery ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Modules Dependency Discovery ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Modules Dependency Discovery ") > >() },
    { "p1858r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Generalized pack declaration and usage ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Generalized pack declaration and usage ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Generalized pack declaration and usage ") > >() },
    { "p1859r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Standard terminology for execution character set encodings ") > >() },
    { "p1860r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Alex Christensen ")) >(), wxS(" C Networking Must Be Secure By Default ") > >() },
    { "p1861r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Alex Christensen ")) >(), wxS(" Secure Connections in Networking TS ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Alex Christensen Scott Herscher ")) >(), wxS(" Secure Networking in C ") > >() },
    { "p1862r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Ranges adaptors for noncopyable iterators ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Casey Carter ")) >(), wxS(" Ranges adaptors for noncopyable iterators ") > >() },
    { "p1863r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" ABI  Now or Never ") >, Rev< 1u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" ABI  Now or Never ") > >() },
    { "p1864r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Defining Target Tuplets ") > >() },
    { "p1865r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen Olivier Giroux ")) >(), wxS(" Add max to latch and barrier ") >, Rev< 1u, Arr64< Hash(wxS(" David Olsen Olivier Giroux ")) >(), wxS(" Add max to latch and barrier ") > >() },
    { "p1868r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Zach Laine ")) >(), wxS("  width clarifying units of width and precision in stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich Zach Laine ")) >(), wxS(" Unicorn width clarifying units of width and precision in stdformat ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich Zach Laine ")) >(), wxS(" Unicorn width clarifying units of width and precision in stdformat ") > >() },
    { "p1869r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski Micha Dominiak ")) >(), wxS(" Rename conditionvariableany interruptible wait methods ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski Micha Dominiak ")) >(), wxS(" Rename conditionvariableany interruptible wait methods ") > >() },
    { "p1870r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" forwardingrange is too subtle ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" forwardingrange is too subtle ") > >() },
    { "p1871r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Should concepts be enabled or disabled ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Concept traits should be named after concepts ") > >() },
    { "p1872r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" span should have sizetype not indextype ") > >() },
    { "p1873r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" removedotsinmodulenames ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" removedotsinmodulenames ") > >() },
    { "p1874r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Dynamic Initialization Order of NonLocal Variables in Modules ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Dynamic Initialization Order of NonLocal Variables in Modules ") > >() },
    { "p1875r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spear Hans Boehm Victor Luchangco Michael Scott Michael Wong ")) >(), wxS(" Transactional Memory Lite Support in C ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spear Hans Boehm Victor Luchangco Michael Scott Michael Wong ")) >(), wxS(" Transactional Memory Lite Support in C ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Spear Hans Boehm Victor Luchangco Michael Scott Michael Wong ")) >(), wxS(" Transactional Memory Lite Support in C ") > >() },
    { "p1876r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" All The Module Names ") >, Rev< 1u, Arr64< Hash(wxS(" Rene Rivera ")) >(), wxS(" All The Module Names ") > >() },
    { "p1877r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Saving Private Ranges Recovering Lost Information from Comparison and Predicate Algorithms ") > >() },
    { "p1878r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler Casey Carter ")) >(), wxS(" Constraining Readable Types ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Constraining Readable Types ") > >() },
    { "p1879r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Please Dont Rewrite My String Literals ") > >() },
    { "p1880r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" uNstring Arguments Shall Be UTFN Encoded ") > >() },
    { "p1881r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" Epochs a backwardcompatible language evolution mechanism ") >, Rev< 1u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" Epochs a backwardcompatible language evolution mechanism ") > >() },
    { "p1882r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Noel Tchidjo Moyo ")) >(), wxS(" Addition of a filter to recursivedirectoryiterator ") > >() },
    { "p1883r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Walkthrough of Ps filehandle for LEWGI ") >, Rev< 1u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" filehandle and mappedfilehandle ") >, Rev< 2u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" filehandle and mappedfilehandle ") > >() },
    { "p1884r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Private Module Partition An Inconsistent Boundary ") > >() },
    { "p1885r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 10u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 11u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 12u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 7u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 8u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") >, Rev< 9u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Naming Text Encodings to Demystify Them ") > >() },
    { "p1886r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Error speed benchmarking ") > >() },
    { "p1887r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Typesafe Reflection on attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Reflection on attributes ") > >() },
    { "p1888r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matti Rintala Matti Rintala Michael Wong David S Hollman Pekka Jskelinen ")) >(), wxS(" Executors without exception handling support ") > >() },
    { "p1889r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev Antony Polukhin ")) >(), wxS(" C Numerics Work In Progress ") >, Rev< 1u, Arr64< Hash(wxS(" Alexander Zaitsev Antony Polukhin ")) >(), wxS(" C Numerics Work In Progress ") > >() },
    { "p1890r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin Alexander Zaitsev ")) >(), wxS(" C Numerics Work In Progress Issues ") > >() },
    { "p1891r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson Mark Hoemmen David Hollman Bob Steagall Christian Trott ")) >(), wxS(" The LinearAlgebra Effort ") > >() },
    { "p1892r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Extended localespecific presentation specifiers for stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Extended localespecific presentation specifiers for stdformat ") > >() },
    { "p1893r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of Contract Primitives ") > >() },
    { "p1894r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of stdupto stdindices and stdenumerate ") > >() },
    { "p1895r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Eric Niebler Kirk Shoop ")) >(), wxS(" taginvoke A general pattern for supporting customisable functions ") > >() },
    { "p1896r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries    ") > >() },
    { "p1897r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Towards C executors An initial set of algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Towards C executors An initial set of algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Towards C executors A proposal for an initial set of algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Towards C executors A proposal for an initial set of algorithms ") > >() },
    { "p1898r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Forward progress delegation for executors ") >, Rev< 1u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Forward progress delegation for executors ") > >() },
    { "p1899r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" strideview ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" strideview ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Di Bella Tim Song ")) >(), wxS(" strideview ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Di Bella Tim Song ")) >(), wxS(" strideview ") > >() },
    { "p1900r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" ConceptsAdjacent Problems ") > >() },
    { "p1901r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daryl Haresign ")) >(), wxS(" Enabling the Use of weakptr as Keys in Unordered Associative Containers ") >, Rev< 1u, Arr64< Hash(wxS(" Daryl Haresign ")) >(), wxS(" Enabling the Use of weakptr as Keys in Unordered Associative Containers ") >, Rev< 2u, Arr64< Hash(wxS(" Daryl Haresign ")) >(), wxS(" Enabling the Use of weakptr as Keys in Unordered Associative Containers ") > >() },
    { "p1902r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Missing featuretest macros  ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Missing featuretest macros  ") > >() },
    { "p1905r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" InSource Mechanism to Identify Importable Headers ") > >() },
    { "p1906r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Provided operator return lvalueref on rvalue ") > >() },
    { "p1907r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Inconsistencies with nontype template parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Inconsistencies with nontype template parameters ") > >() },
    { "p1908r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Reserving Attribute Names for Future Use ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Reserving Attribute Names for Future Use ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Reserving Attribute Names for Future Use ") > >() },
    { "p1909r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low Latency Meeting Minutes  ") > >() },
    { "p1910r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Linear Algebra Meeting Minutes  ") > >() },
    { "p1911r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning  ") > >() },
    { "p1912r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Interconvertible object representations ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Types with arraylike object representations ") > >() },
    { "p1913r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Frank Birbacher ")) >(), wxS(" Comments on Audio Devices ") > >() },
    { "p1914r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" On the names of shift algorithms ") > >() },
    { "p1915r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Expected Feedback from simd in the Parallelism TS  ") > >() },
    { "p1916r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" There might not be an elegant OOTA fix ") > >() },
    { "p1917r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Library Issues to be moved in Belfast ") > >() },
    { "p1919r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Expanding the Rights in SD ") >, Rev< 1u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Expanding the Rights in SD ") >, Rev< 2u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Expanding the Rights in SD ") >, Rev< 3u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Expanding the Rights in SD ") > >() },
    { "p1920r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of Namespace Templates ") > >() },
    { "p1921r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Whats in a Name ") > >() },
    { "p1922r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stdlist constexpr ") > >() },
    { "p1923r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stddeque constexpr ") > >() },
    { "p1924r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stdstack constexpr ") > >() },
    { "p1925r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stdqueue constexpr ") > >() },
    { "p1926r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stdpriorityqueue constexpr ") > >() },
    { "p1927r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Add stdispartitioneduntil algorithm ") > >() },
    { "p1928r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Merge dataparallel types from the Parallelism TS  ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Merge dataparallel types from the Parallelism TS  ") >, Rev< 10u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 11u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 12u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 13u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 14u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 15u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Merge dataparallel types from the Parallelism TS  ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Merge dataparallel types from the Parallelism TS  ") >, Rev< 4u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 5u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 6u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 7u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 8u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") >, Rev< 9u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd  Merge dataparallel types from the Parallelism TS  ") > >() },
    { "p1929r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexander Zaitsev ")) >(), wxS(" Making stdforwardlist constexpr ") > >() },
    { "p1930r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" Towards a standard unit systems library ") > >() },
    { "p1932r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pavel Dyakov Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Extension of the C random number generators ") > >() },
    { "p1933r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Suggestions for bulkexecute ") > >() },
    { "p1934r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter Christopher Di Bella Eric Niebler ")) >(), wxS(" boolean Considered Harmful ") > >() },
    { "p1935r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" A C Approach to Physical Units ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" A C Approach to Physical Units ") >, Rev< 2u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" A C Approach to Physical Units ") > >() },
    { "p1936r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan ")) >(), wxS(" Dependent Static Assertion ") > >() },
    { "p1937r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Fixing inconsistencies between constexpr and consteval functions ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Fixing inconsistencies between constexpr and consteval functions ") >, Rev< 2u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Fixing inconsistencies between constexpr and consteval functions ") > >() },
    { "p1938r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Daveed Vandevoorde Richard Smith ")) >(), wxS(" if consteval ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Daveed Vandevoorde Richard Smith Andrew Sutton ")) >(), wxS(" if consteval ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Daveed Vandevoorde Richard Smith Andrew Sutton ")) >(), wxS(" if consteval ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Daveed Vandevoorde Richard Smith Andrew Sutton ")) >(), wxS(" if consteval ") > >() },
    { "p1943r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Networking TS changes to improve completion token flexibility and performance ") > >() },
    { "p1944r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniil Goncharov Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in cstring and cwchar Headers ") >, Rev< 1u, Arr64< Hash(wxS(" Daniil Goncharov Antony Polukhin ")) >(), wxS(" Add Constexpr Modifiers to Functions in cstring and cwchar Headers ") > >() },
    { "p1945r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Krystian Stasiowski ")) >(), wxS(" Making More Objects Contiguous ") > >() },
    { "p1946r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Casey Carter ")) >(), wxS(" Allow defaulting comparisons by value ") > >() },
    { "p1947r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" C exceptions and alternatives ") > >() },
    { "p1948r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Modules Keep the dot ") > >() },
    { "p1949r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 2u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 3u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels Jens Maurer ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 4u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels Jens Maurer ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 5u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels Jens Maurer ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 6u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels Jens Maurer ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") >, Rev< 7u, Arr64< Hash(wxS(" Steve Downey Zach Laine Tom Honermann Peter Bindels Jens Maurer ")) >(), wxS(" C Identifier Syntax using Unicode Standard Annex  ") > >() },
    { "p1950r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock ")) >(), wxS(" An indirect valuetype for C ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock ")) >(), wxS(" An indirect valuetype for C ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock ")) >(), wxS(" An indirect valuetype for C ") > >() },
    { "p1951r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Logan R Smith ")) >(), wxS(" Default Arguments for pairs Forwarding Constructor ") >, Rev< 1u, Arr64< Hash(wxS(" Logan R Smith ")) >(), wxS(" Default Arguments for pairs Forwarding Constructor ") > >() },
    { "p1953r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Unicode Identifiers And Unicode ") > >() },
    { "p1955r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Frank Birbacher ")) >(), wxS(" Top Level Is Constant Evaluated ") >, Rev< 1u, Arr64< Hash(wxS(" Frank Birbacher ")) >(), wxS(" Top Level Is Constant Evaluated ") > >() },
    { "p1956r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" On the naming of lowlevel bit manipulation functions ") >, Rev< 1u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" On the naming of lowlevel bit manipulation functions ") > >() },
    { "p1957r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Converting from T to bool should be considered narrowing re US  ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Converting from T to bool should be considered narrowing re US  ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Converting from T to bool should be considered narrowing re US  ") > >() },
    { "p1958r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lawrence Crowl ")) >(), wxS(" C Concurrent Buffer Queue ") > >() },
    { "p1959r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Remove stdweakequality and stdstrongequality ") > >() },
    { "p1960r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" NB Comment Changes Reviewed by SG ") > >() },
    { "p1961r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Harmonizing the definitions of total order for pointers ") > >() },
    { "p1962r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" How can you be so certain ") > >() },
    { "p1963r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Billy ONeal ")) >(), wxS(" Fixing US  ") > >() },
    { "p1964r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Casting convertibletoltboolgt considered harmful ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Wording for booleantestable ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Wording for booleantestable ") > >() },
    { "p1965r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Daniel Sunderland Tim Song ")) >(), wxS(" Blanket Wording for Specifying Hidden Friends ") > >() },
    { "p1967r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 10u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 11u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 12u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 13u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 14u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 5u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 6u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 7u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 8u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") >, Rev< 9u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed  a simple scannable preprocessorbased resource acquisition method ") > >() },
    { "p1968r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group tentatively ready issues for the November  Belfast meeting ") > >() },
    { "p1969r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group ready issues for the November  Belfast meeting ") > >() },
    { "p1970r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Consistency for size functions ") >, Rev< 1u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" Consistency for size functions ") >, Rev< 2u, Arr64< Hash(wxS(" Hannes Hauswedell Jorg Brown Casey Carter ")) >(), wxS(" Consistency for size functions add rangesssize ") > >() },
    { "p1971r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Changes for NB Comments at the November  Belfast Meeting ") > >() },
    { "p1972r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" US Check satisfaction of constraints for nontemplates when forming pointer to function ") > >() },
    { "p1973r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Rename defaultinit functions NB Comment DE ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Rename defaultinit functions NB Comment DE ") > >() },
    { "p1974r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Snyder Louis Dionne Daveed Vandevoorde ")) >(), wxS(" Nontransient constexpr allocation using propconst ") > >() },
    { "p1975r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Fixing the wording of parenthesized aggregateinitialization ") > >() },
    { "p1976r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Fixedsize span construction from dynamicsize range ") >, Rev< 1u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Fixedsize span construction from dynamicsize range ") >, Rev< 2u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Fixedsize span construction from dynamicsize range ") > >() },
    { "p1978r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Nevin Liber Glen Joseph Fernandes Peter Dimov ")) >(), wxS(" Rename defaultinit functions and do nothing more ") > >() },
    { "p1979r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Stearn ")) >(), wxS(" US Resolution ") > >() },
    { "p1980r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Merrill ")) >(), wxS(" Wording for CA  ") > >() },
    { "p1981r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Rename leap to leapsecond ") > >() },
    { "p1982r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Rename link to timezonelink ") > >() },
    { "p1983r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Wording for GB US US US and US ") > >() },
    { "p1985r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Mateusz Pusz ")) >(), wxS(" Universal template parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Mateusz Pusz Colin MacLean Bengt Gustafsonn ")) >(), wxS(" Universal template parameters ") >, Rev< 3u, Arr64< Hash(wxS(" Gaper Aman Mateusz Pusz Colin MacLean Bengt Gustafsonn Corentin Jabot ")) >(), wxS(" Universal template parameters ") > >() },
    { "p1988r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Allow Templates in Local Classes ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Allow Templates in Local Classes ") > >() },
    { "p1989r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview  Constrain Harder ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview  Constrain Harder ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Range constructor for stdstringview  Constrain Harder ") > >() },
    { "p1990r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniil Goncharov Antony Polukhin ")) >(), wxS(" Add operator to stdinitializerlist ") >, Rev< 1u, Arr64< Hash(wxS(" Daniil Goncharov Antony Polukhin ")) >(), wxS(" Add operator to stdinitializerlist ") > >() },
    { "p1991r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Belfast Record of Discussion ") > >() },
    { "p1993r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Restore factories to bulkexecute ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Restore shared state to bulkexecute ") > >() },
    { "p1994r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song Christopher Di Bella ")) >(), wxS(" elementsview needs its own sentinel ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song Christopher Di Bella ")) >(), wxS(" elementsview needs its own sentinel ") > >() },
    { "p1995r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Andrzej Krzemienski Ryan McDougall  Timur Doumler Herb Sutter ")) >(), wxS(" Contracts  Use Cases ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne Andrzej Krzemienski Ryan McDougall  Timur Doumler Herb Sutter ")) >(), wxS(" Contracts  Use Cases ") > >() },
    { "p1996r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dmitry Sokolov ")) >(), wxS(" Propagated template parameters ") > >() },
    { "p1997r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Krystian Stasiowski Theodoric Stier ")) >(), wxS(" Relaxing Restrictions on Arrays ") >, Rev< 1u, Arr64< Hash(wxS(" Krystian Stasiowski Theodoric Stier ")) >(), wxS(" Relaxing Restrictions on Arrays ") > >() },
    { "p1998r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall ")) >(), wxS(" Simple Facility for Lossless Integer Conversion ") >, Rev< 1u, Arr64< Hash(wxS(" Ryan McDougall ")) >(), wxS(" Simple Facility for Lossless Integer Conversion ") > >() },
    { "p1999r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Process proposal doublecheck evolutionary material via a Tentatively Ready status ") > >() },
    { "p2000r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Direction for ISO C ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong Howard Hinnant Roger Orr Bjarne Stroustrup Daveed Vandevoorde ")) >(), wxS(" Direction for ISO C ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Wong Howard Hinnant Roger Orr Bjarne Stroustrup Daveed Vandevoorde ")) >(), wxS(" Direction for ISO C ") >, Rev< 3u, Arr64< Hash(wxS(" Daveed Vandevoorde Howard Hinnant Roger Orr Bjarne Stroustrup Michael Wong ")) >(), wxS(" Direction for ISO C ") >, Rev< 4u, Arr64< Hash(wxS(" Roger Orr Howard Hinnant Roger Orr Bjarne Stroustrup Daveed Vandevoorde Michael Wong ")) >(), wxS(" Direction for ISO C ") > >() },
    { "p2002r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Defaulted comparison specification cleanups ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Defaulted comparison specification cleanups ") > >() },
    { "p2003r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Fixing Internal and External Linkage Entities in Header Units ") > >() },
    { "p2004r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Numbers and their Scopes ") > >() },
    { "p2005r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Berrow ")) >(), wxS(" A Brief D Graphics Review ") > >() },
    { "p2006r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Eric Niebler Kirk Shoop Lee Howes ")) >(), wxS(" Eliminating heapallocations in senderreceiver with connectstart as basis operations ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker Eric Niebler Kirk Shoop Lee Howes ")) >(), wxS(" Eliminating heapallocations in senderreceiver with connectstart as basis operations ") > >() },
    { "p2007r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdfromchars should work with stdstringview ") > >() },
    { "p2008r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" Enable variable template template parameters ") > >() },
    { "p2009r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2010r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniil Goncharov ")) >(), wxS(" Remove iostream operators from P ") > >() },
    { "p2011r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Colby Pike ")) >(), wxS(" A pipelinerewrite operator ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Colby Pike ")) >(), wxS(" A pipelinerewrite operator ") > >() },
    { "p2012r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis Victor Zverovich Arthur ODwyer Filipe Mulonde ")) >(), wxS(" Fix the rangebased for loop Revix the rangebased for loop ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis Victor Zverovich Arthur ODwyer Filipe Mulonde ")) >(), wxS(" Fix the rangebased for loop Rev ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolai Josuttis Victor Zverovich Arthur ODwyer Filipe Mulonde ")) >(), wxS(" Fix the rangebased for loop Rev ") > >() },
    { "p2013r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") >, Rev< 5u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Language Optional operator new ") > >() },
    { "p2014r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Gor Nishanov ")) >(), wxS(" Proposed resolution for USUS  aligned allocation of coroutine frames ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker Gor Nishanov ")) >(), wxS(" Proposed resolution for USUS  aligned allocation of coroutine frames ") >, Rev< 2u, Arr64< Hash(wxS(" Lewis Baker Gor Nishanov ")) >(), wxS(" Proposed resolution for USUS  aligned allocation of coroutine frames ") > >() },
    { "p2016r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" A step parameter for iota ") > >() },
    { "p2017r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Conditionally safe ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Conditionally borrowed ranges ") > >() },
    { "p2019r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Usability improvements for stdthread ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Usability improvements for stdthread ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Usability improvements for stdthread ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") >, Rev< 7u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") >, Rev< 8u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Thread attributes ") > >() },
    { "p2020r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Locales Encodings and Unicode ") > >() },
    { "p2021r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Negative zero strikes again ") > >() },
    { "p2022r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" Rangified version of lexicographicalcomparethreeway ") >, Rev< 1u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" Rangified version of lexicographicalcomparethreeway ") >, Rev< 2u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" Rangified version of lexicographicalcomparethreeway ") >, Rev< 3u, Arr64< Hash(wxS(" Ran Regev Alex Dathskovsky  ")) >(), wxS(" Rangified version of lexicographicalcomparethreeway ") > >() },
    { "p2024r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Frank Birbacher Marina Efimova Dietmar Kuhl Vern Riedlin ")) >(), wxS(" Bloomberg Analysis of Unified Executors ") > >() },
    { "p2025r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anton Zhilin ")) >(), wxS(" Guaranteed copy elision for named return objects ") >, Rev< 1u, Arr64< Hash(wxS(" Anton Zhilin ")) >(), wxS(" Guaranteed copy elision for return variables ") >, Rev< 2u, Arr64< Hash(wxS(" Anton Zhilin ")) >(), wxS(" Guaranteed copy elision for return variables ") > >() },
    { "p2026r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall Bryce Adelstein Lelbach JF Bastien Andreas Weis Ruslan Arutyunyan Ilya Burylov ")) >(), wxS(" A Constituent Study Group for SafetyCritical Applications ") > >() },
    { "p2027r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Geoff Romer ")) >(), wxS(" Movedfrom objects need not be valid ") > >() },
    { "p2028r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" What is ABI and What Should WG Do About It ") > >() },
    { "p2029r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Proposed resolution for core issues   and  escapes in character and string literals ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Proposed resolution for core issues   and  escapes in character and string literals ") >, Rev< 2u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Proposed resolution for core issues   and  escapes in character and string literals ") >, Rev< 3u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Proposed resolution for core issues   and  escapes in character and string literals ") >, Rev< 4u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Proposed resolution for core issues   and  escapes in character and string literals ") > >() },
    { "p2030r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning  ") > >() },
    { "p2031r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Meeting Minutes  ") > >() },
    { "p2032r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contracts  What Came Before ") > >() },
    { "p2033r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" History of Executor Properties ") > >() },
    { "p2034r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall ")) >(), wxS(" Partially Mutable Lambda Captures ") >, Rev< 1u, Arr64< Hash(wxS(" Ryan McDougall Patrick McMichael ")) >(), wxS(" Partially Mutable Lambda Captures ") >, Rev< 2u, Arr64< Hash(wxS(" Ryan McDougall Patrick McMichael ")) >(), wxS(" Partially Mutable Lambda Captures ") >, Rev< 3u, Arr64< Hash(wxS(" Ryan McDougall Nestor Subiron Montoro ")) >(), wxS(" Partially Mutable Lambda Captures ") >, Rev< 4u, Arr64< Hash(wxS(" Ryan McDougall Nestor Subiron Montoro ")) >(), wxS(" Partially Mutable Lambda Captures ") > >() },
    { "p2035r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern John Lakos ")) >(), wxS(" Value Proposition AllocatorAware AA Software ") > >() },
    { "p2036r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Changing scope for lambda trailingreturntype ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Changing scope for lambda trailingreturntype ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Changing scope for lambda trailingreturntype ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Changing scope for lambda trailingreturntype ") > >() },
    { "p2037r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Strings gratuitous assignment ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Strings gratuitous assignment ") > >() },
    { "p2038r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Ryan McDougall ")) >(), wxS(" Proposed nomenclature for contractrelated proposals ") > >() },
    { "p2039r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Menashe Rosemberg ")) >(), wxS(" dountil Loop ") > >() },
    { "p2040r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Reflectionbased lazyevaluation ") > >() },
    { "p2041r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Deleting variable templates ") >, Rev< 1u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" template  delete ") > >() },
    { "p2042r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Alternate names for makeshareddefaultinit ") > >() },
    { "p2043r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" Dont constexpr All The Things ") > >() },
    { "p2044r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Member Templates for Local Classes ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Member Templates for Local Classes ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Member Templates for Local Classes ") > >() },
    { "p2045r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Missing Mandates for the standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" Missing Mandates for the standard library ") > >() },
    { "p2046r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Raviv ")) >(), wxS(" Rangify New Algorithms ") > >() },
    { "p2047r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 1u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 2u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 3u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 4u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 5u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 6u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") >, Rev< 7u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware optional type ") > >() },
    { "p2048r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vittorio Romeo ")) >(), wxS(" Prohibit zero and NULL from being used as null pointer literals ") > >() },
    { "p2049r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Wyatt Childers ")) >(), wxS(" Constraint refinement for specialcased functions ") > >() },
    { "p2050r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Wyatt Childers ")) >(), wxS(" Tweaks to the design of source code fragments ") > >() },
    { "p2051r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Library Issues to be moved in Prague ") > >() },
    { "p2052r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Making modern C io a consistent API experience from bottom to top ") > >() },
    { "p2053r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rostislav Khlebnikov John Lakos ")) >(), wxS(" Defensive Checks Versus Input Validation ") >, Rev< 1u, Arr64< Hash(wxS(" Rostislav Khlebnikov John Lakos ")) >(), wxS(" Defensive Checks Versus Input Validation ") > >() },
    { "p2054r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sophia Poirier Frank Birbacher Timur Doumler ")) >(), wxS(" Audio IO Software Use Cases ") >, Rev< 1u, Arr64< Hash(wxS(" Sophia Poirier Frank Birbacher Timur Doumler ")) >(), wxS(" Audio IO Software Use Cases ") > >() },
    { "p2055r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Hans Boehm ")) >(), wxS(" A Relaxed Guide to memoryorderrelaxed ") > >() },
    { "p2057r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Ben Craig Paul Bendixen Matthew Bentley Inbal Levi Rene Riviera Steffan Tjernstrom Mark Hoemmen Ronen Friedman ")) >(), wxS(" SG SG Past Present and Future status ") > >() },
    { "p2058r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Hoeovsk ")) >(), wxS(" Make stdrandomdevice Less Inscrutable ") > >() },
    { "p2059r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Hoeovsk ")) >(), wxS(" Make Pseudorandom Numbers Portable ") > >() },
    { "p2060r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Hoeovsk ")) >(), wxS(" Make Random Number Engines Seedable ") > >() },
    { "p2061r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Sequential consistency for atomic memcpy ") > >() },
    { "p2062r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Andrew Sutton Faisal Vali ")) >(), wxS(" The Circle Metamodel ") > >() },
    { "p2064r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Assumptions ") > >() },
    { "p2065r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" naming and aliases ") > >() },
    { "p2066r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer Michael L Scott ")) >(), wxS(" Suggested draft TS for C Extensions for Transaction Memory Light ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Transaction Memory Light ") >, Rev< 10u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Transaction Memory Light ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Transaction Memory Light ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 5u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 6u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 7u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 8u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") >, Rev< 9u, Arr64< Hash(wxS(" Jens Maurer Hans Boehm Victor Luchangco Michael L Scott Michael Spear and Michael Wong ")) >(), wxS(" Suggested draft TS for C Extensions for Minimal Transactional Memory ") > >() },
    { "p2067r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Allowing trailing commas in ctorinitializer ") > >() },
    { "p2068r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Using  to reduce the scope of constexprif ") > >() },
    { "p2069r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Stackable thread local signal guards ") > >() },
    { "p2070r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad Anthony Williams Michael Wong Jan Babst ")) >(), wxS(" A case for optional and objectptr ") > >() },
    { "p2071r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann Peter Bindels ")) >(), wxS(" Named universal character escapes ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann Steve Downey Peter Bindels Corentin Jabot  R Martinho Fernandes ")) >(), wxS(" Named universal character escapes ") >, Rev< 2u, Arr64< Hash(wxS(" Tom Honermann Steve Downey Peter Bindels Corentin Jabot  R Martinho Fernandes ")) >(), wxS(" Named universal character escapes ") > >() },
    { "p2072r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marco Foco Vassil Vassilev Max Rietmann Michael Wong ")) >(), wxS(" Differentiable programming for C ") >, Rev< 1u, Arr64< Hash(wxS(" Marco Foco William S Moses Vassil Vassilev Michael Wong ")) >(), wxS(" Differentiable programming for C ") > >() },
    { "p2073r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dmitry Duka Ivan Shutov Konstantin Sadov ")) >(), wxS(" Debugging C coroutines ") > >() },
    { "p2074r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dmitry Duka ")) >(), wxS(" Asynchronous callstacks amp coroutines ") > >() },
    { "p2075r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pavel Dyakov Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 1u, Arr64< Hash(wxS(" Pavel Dyakov Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 2u, Arr64< Hash(wxS(" Pavel Dyakov Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 3u, Arr64< Hash(wxS(" Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova Pavel Dyakov John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 4u, Arr64< Hash(wxS(" Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova Pavel Dyakov John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 5u, Arr64< Hash(wxS(" Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova Pavel Dyakov John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") >, Rev< 6u, Arr64< Hash(wxS(" Ilya Burylov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova Pavel Dyakov John Salmon ")) >(), wxS(" Philox as an extension of the C RNG engines ") > >() },
    { "p2076r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Previous disagreements on Contracts ") > >() },
    { "p2077r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Heterogeneous erasure overloads for associative containers ") >, Rev< 1u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Heterogeneous erasure overloads for associative containers ") >, Rev< 2u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Heterogeneous erasure overloads for associative containers ") >, Rev< 3u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Heterogeneous erasure overloads for associative containers ") > >() },
    { "p2078r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bob Steagall ")) >(), wxS(" Add new traits type stdiscomplex ") > >() },
    { "p2079r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Michael Voss ")) >(), wxS(" Shared execution engine for executors ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan Michael Voss ")) >(), wxS(" Parallel Executor ") >, Rev< 2u, Arr64< Hash(wxS(" Lee Howes Ruslan Arutyunyan Michael Voss ")) >(), wxS(" System execution context ") >, Rev< 3u, Arr64< Hash(wxS(" Lee Howes Ruslan Arutyunyan Michael Voss ")) >(), wxS(" System execution context ") >, Rev< 4u, Arr64< Hash(wxS(" Lee Howes Ruslan Arutyunyan Michael Voss Lucian Radu Teodorescu ")) >(), wxS(" System execution context ") >, Rev< 5u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lee Howes Michael Voss ")) >(), wxS(" System execution context ") >, Rev< 6u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lee Howes Michael Voss ")) >(), wxS(" System execution context ") >, Rev< 7u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lee Howes Michael Voss ")) >(), wxS(" System execution context ") >, Rev< 8u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lee Howes Michael Voss ")) >(), wxS(" Parallel Scheduler ") > >() },
    { "p2080r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Polymorphic allocators There is no such thing as One True Vocabulary Type ") > >() },
    { "p2081r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Rebase the Library Fundamentals v TS on C ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Rebase the Library Fundamentals v TS on C ") > >() },
    { "p2082r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Fixing CTAD for aggregates ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Fixing CTAD for aggregates ") > >() },
    { "p2085r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Consistent defaulted comparisons ") > >() },
    { "p2087r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Reflection Naming fix reflexpr ") > >() },
    { "p2088r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Reflection Naming Reification ") > >() },
    { "p2089r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Function parameter constraints are too fragile ") > >() },
    { "p2091r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" Issues with Range Access CPOs ") > >() },
    { "p2092r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Hubert Tong ")) >(), wxS(" Disambiguating NestedRequirements ") > >() },
    { "p2093r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 10u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 11u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 12u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 13u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 14u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 5u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 6u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 7u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 8u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") >, Rev< 9u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatted output ") > >() },
    { "p2095r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Resolve lambda initcapture pack grammar CWG ") > >() },
    { "p2096r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Generalized wording for partial specializations ") >, Rev< 1u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Generalized wording for partial specializations ") >, Rev< 2u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Generalized wording for partial specializations ") > >() },
    { "p2098r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown Bob Steagall ")) >(), wxS(" Proposing stdisspecializationof ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown Bob Steagall ")) >(), wxS(" Proposing stdisspecializationof ") > >() },
    { "p2100r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" Keep unhandledexception of a promise type mandatory  a response to US and FR ") > >() },
    { "p2101r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song Casey Carter ")) >(), wxS(" Models subsumes satisfies Wording for US and US ") > >() },
    { "p2102r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song Casey Carter ")) >(), wxS(" Make ampquotimplicit expression variationsampquot more explicit Wording for US ") > >() },
    { "p2103r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Changes for NB Comments at the February  Prague Meeting ") > >() },
    { "p2104r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Roger Orr Gabriel Dos Reis ")) >(), wxS(" Resolution for GB  Disallow changing concept values ") > >() },
    { "p2106r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Alternative wording for GB and GB ") > >() },
    { "p2107r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core issue  US Copy semantics of coroutine parameters ") > >() },
    { "p2108r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group ready issues for the February  Prague meeting ") > >() },
    { "p2109r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" US  Disallow export import foo outside of module interface ") > >() },
    { "p2113r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert SK Tong ")) >(), wxS(" Proposed resolution for  comment CA  ") > >() },
    { "p2114r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Ryan McDougall Andrzej Krzemieski ")) >(), wxS(" Minimial Contract Use Cases ") > >() },
    { "p2115r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" US Merging of multiple definitions for unnamed unscoped enumerations ") > >() },
    { "p2116r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Remove tuplelike protocol support from fixedextent span ") > >() },
    { "p2117r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marshall Clow ")) >(), wxS(" C Standard Library Issues Resolved Directly In Prague ") > >() },
    { "p2119r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jolanta Opara ")) >(), wxS(" Feedback on Simple Statistics functions ") > >() },
    { "p2120r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Simplified structured bindings protocol with pack aliases ") > >() },
    { "p2123r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel Tom Scogland ")) >(), wxS(" interfaces A Facility to Manage ABIAPI Evolution ") > >() },
    { "p2125r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Titus Winters ")) >(), wxS(" The Ecosystem Expense of Vocabulary Types ") > >() },
    { "p2126r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern John Lakos ")) >(), wxS(" Unleashing the Power of AllocatorAware AA Infrastructure ") > >() },
    { "p2127r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern John Lakos ")) >(), wxS(" Making C Software Allocator Aware ") > >() },
    { "p2128r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte David Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Isabella Muerte Daisy Hollman Christian Trott Mark Hoemmen ")) >(), wxS(" Multidimensional subscript operator ") > >() },
    { "p2130r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Prague Record of Discussion ") > >() },
    { "p2131r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Changes between C and C ") > >() },
    { "p2133r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" The Incubator needs YOU ") > >() },
    { "p2134r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pal Balog ")) >(), wxS(" Kaizen keep improving together ") > >() },
    { "p2135r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Hans Boehm and David Goldblatt ")) >(), wxS(" a hrefPRa A Relaxed Guide to memoryorderrelaxed ") > >() },
    { "p2136r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" invokeltRgt ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" invoker ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" invoker ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" invoker ") > >() },
    { "p2137r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chandler Carruth Timothy Costa Hal Finkel Dmitri Gribenko D S Hollman Chris Kennelly Thomas Kppe Damien LebrunGrandie Bryce Adelstein Lelbach Josh Levenberg Nevin Liber Chris Palmer Tom Scogland Richard Smith David Stone Christian Trott Titus Winters ")) >(), wxS(" Goals and priorities for C ") > >() },
    { "p2138r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Rules of DesignltgtWording engagement ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Rules of DesignltgtWording engagement ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Rules of DesignltgtWording engagement ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Rules of Design ltgt Specification engagement ") >, Rev< 4u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Rules of DesignltgtSpecification engagement ") > >() },
    { "p2139r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reviewing Deprecated Facilities of C for C ") > >() },
    { "p2141r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Aggregates are named tuples ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Aggregates are named tuples ") >, Rev< 2u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Aggregates are named tuples ") > >() },
    { "p2142r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Jim Buckeyne ")) >(), wxS(" Allow  operator to work on pointers ") > >() },
    { "p2145r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Titus Winters Fabio Fracassi Billy Baker Nevin Liber JF Bastien David Stone Botond Ballo Tom Honermann ")) >(), wxS(" Evolving C Remotely ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Titus Winters Fabio Fracassi Billy Baker Nevin Liber JF Bastien David Stone Botond Ballo Tom Honermann ")) >(), wxS(" Evolving C Remotely ") > >() },
    { "p2146r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Amanda Kornoushenko ")) >(), wxS(" Modern stdbyte stream IO for C ") >, Rev< 1u, Arr64< Hash(wxS(" Amanda Kornoushenko ")) >(), wxS(" Modern stdbyte stream IO for C ") >, Rev< 2u, Arr64< Hash(wxS(" Amanda Kornoushenko ")) >(), wxS(" Modern stdbyte stream IO for C ") > >() },
    { "p2148r0", RevList< Rev< 0u, Arr64< Hash(wxS(" CJ Johnson Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Design Guidelines ") > >() },
    { "p2149r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Remove systemexecutor ") > >() },
    { "p2150r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Down with typename in the library ") > >() },
    { "p2152r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi ")) >(), wxS(" Querying the alignment of an object ") >, Rev< 1u, Arr64< Hash(wxS(" Inbal Levi ")) >(), wxS(" Querying the alignment of an object ") > >() },
    { "p2155r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gordon Brown Ruyman Reyes Michael Wong H Carter Edwards Thomas Rodgers Mark Hoemmen Tom Scogland ")) >(), wxS(" Policy property for describing adjacency ") > >() },
    { "p2156r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Allow Duplicate Attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Erich Keane ")) >(), wxS(" Allow Duplicate Attributes ") > >() },
    { "p2159r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" An Unbounded Decimal FloatingPoint Type ") >, Rev< 1u, Arr64< Hash(wxS(" Bill Seymour ")) >(), wxS(" A Big Decimal Type ") > >() },
    { "p2160r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Locks lock lockables wording for LWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Locks lock lockables wording for LWG  ") > >() },
    { "p2161r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Remove Default Candidate Executor ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Remove Default Candidate Executor ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Remove Default Candidate Executor ") > >() },
    { "p2162r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Inheriting from stdvariant resolving LWG ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Inheriting from stdvariant resolving LWG ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Inheriting from stdvariant resolving LWG ") > >() },
    { "p2163r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus Alex Damian ")) >(), wxS(" Native tuples in C ") > >() },
    { "p2164r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 7u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 8u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") >, Rev< 9u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" viewsenumerate ") > >() },
    { "p2165r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Comparing pair and tuples ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Compatibility between tuple and tuplelike objects ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Compatibility between tuple pair and tuplelike objects ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Compatibility between tuple pair and tuplelike objects ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Compatibility between tuple pair and tuplelike objects ") > >() },
    { "p2166r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yuriy Chernyshov ")) >(), wxS(" A Proposal to Prohibit stdbasicstring and stdbasicstringview construction from nullptr ") >, Rev< 1u, Arr64< Hash(wxS(" Yuriy Chernyshov ")) >(), wxS(" A Proposal to Prohibit stdbasicstring and stdbasicstringview construction from nullptr ") > >() },
    { "p2167r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Improved Proposed Wording for LWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Improved Proposed Wording for LWG  contextually convertible to bool ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Improved Proposed Wording for LWG  contextually convertible to bool ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Improved Proposed Wording for LWG  contextually convertible to bool ") > >() },
    { "p2168r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Lewis Baker ")) >(), wxS(" generator A Synchronous Coroutine Generator Compatible With Ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Lewis Baker ")) >(), wxS(" generator A Synchronous Coroutine Generator Compatible With Ranges ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Lewis Baker ")) >(), wxS(" generator A Synchronous Coroutine Generator Compatible With Ranges ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Lewis Baker ")) >(), wxS(" generator A Synchronous Coroutine Generator Compatible With Ranges ") > >() },
    { "p2169r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Michael Park ")) >(), wxS(" A Nice Placeholder With No Name ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Michael Park ")) >(), wxS(" A Nice Placeholder With No Name ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Michael Park ")) >(), wxS(" A Nice Placeholder With No Name ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Michael Park ")) >(), wxS(" A Nice Placeholder With No Name ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Michael Park ")) >(), wxS(" A Nice Placeholder With No Name ") > >() },
    { "p2170r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Charles Salvia ")) >(), wxS(" Feedback on implementing the proposed stderror type ") > >() },
    { "p2171r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Rebasing the Networking TS on C ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Rebasing the Networking TS on C revision  ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Rebasing the Networking TS on C revision  ") > >() },
    { "p2172r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" What do we want from a modularized Standard Library ") > >() },
    { "p2173r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Inbal Levi Ville Voutilainen ")) >(), wxS(" Attributes on LambdaExpressions ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde Inbal Levi Ville Voutilainen ")) >(), wxS(" Attributes on LambdaExpressions ") > >() },
    { "p2174r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Compound Literals ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Compound Literals ") > >() },
    { "p2175r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Composable cancellation for senderbased async operations ") > >() },
    { "p2176r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" A different take on inexpressible conditions ") > >() },
    { "p2178r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Misc lexing and string handling improvements ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Misc lexing and string handling improvements ") > >() },
    { "p2179r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2181r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland ")) >(), wxS(" Correcting the Design of Bulk Execution ") >, Rev< 1u, Arr64< Hash(wxS(" Jared Hoberock Michael Garland ")) >(), wxS(" Correcting the Design of Bulk Execution ") > >() },
    { "p2182r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Ryan McDougall Joshua Berne ")) >(), wxS(" Contract Support Defining the Minimum Viable Feature Set ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski Joshua Berne Ryan McDougall ")) >(), wxS(" Contract Support Defining the Minimum Viable Feature Set ") > >() },
    { "p2183r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen Ruslan Arutyunyan Michael J Voss Micha Dominiak Chris Kohlhoff DS Hollman Kirk Shoop Inbal Levi ")) >(), wxS(" Executors Review Properties ") > >() },
    { "p2184r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Thriving in a crowded and changing world C  ") > >() },
    { "p2185r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Caleb Sunstrum ")) >(), wxS(" Contracts Use Case Categorization ") > >() },
    { "p2186r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien Alisdair Meredith ")) >(), wxS(" Removing Garbage Collection Support ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien Alisdair Meredith ")) >(), wxS(" Removing Garbage Collection Support ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien Alisdair Meredith ")) >(), wxS(" Removing Garbage Collection Support ") > >() },
    { "p2187r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" stdswapif stdpredictable ") >, Rev< 3u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" stdswapif stdpredictable ") >, Rev< 4u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" stdswapif stdpredictable ") >, Rev< 5u, Arr64< Hash(wxS(" Nathan Myers ")) >(), wxS(" stdswapif stdpredictable ") > >() },
    { "p2188r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" Zap the Zap Pointers should just be bags of bits ") >, Rev< 1u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" Zap the Zap Pointers are sometimes just bags of bits ") > >() },
    { "p2191r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules ADL amp GMFs do not play together well anymore ") > >() },
    { "p2192r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dusan B Jovanovic ")) >(), wxS(" stdvalstat  function return type ") >, Rev< 1u, Arr64< Hash(wxS(" Dusan B Jovanovic ")) >(), wxS(" stdvalstat  function return type ") >, Rev< 2u, Arr64< Hash(wxS(" Dusan B Jovanovic ")) >(), wxS(" stdvalstat Transparent Returns Handling ") >, Rev< 3u, Arr64< Hash(wxS(" Dusan B Jovanovic ")) >(), wxS(" stdvalstat  Returns Handling ") > >() },
    { "p2193r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JC van WInkel Bjarne Stroustrup Florian Sattler ")) >(), wxS(" How to structure a teaching topic ") >, Rev< 1u, Arr64< Hash(wxS(" JC van WInkel Bjarne Stroustrup Florian Sattler ")) >(), wxS(" How to structure a teaching topic ") > >() },
    { "p2194r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" The character set of the internal representation should be Unicode ") > >() },
    { "p2195r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Electronic Straw Polls ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Electronic Straw Polls ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Electronic Straw Polls ") > >() },
    { "p2196r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vincent Reverdy ")) >(), wxS(" A lifetimeextending forwarder ") > >() },
    { "p2197r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Tesch Victor Zverovich ")) >(), wxS(" Formatting for stdcomplex ") > >() },
    { "p2198r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 5u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 6u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") >, Rev< 7u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding FeatureTest Macros and ImplementationDefined Extensions ") > >() },
    { "p2199r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Isabella Muerte ")) >(), wxS(" Concepts to differentiate types ") > >() },
    { "p2201r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Mixed string literal concatenation ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Mixed string literal concatenation ") > >() },
    { "p2202r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Tony van Eerd Thomas Rodgers Tomasz Kamiski Corentin Jabot Robert Leahy Gordon Brown Kirk Shoop Eric Niebler Dietmar Khl ")) >(), wxS(" SendersReceivers group Executors review report ") > >() },
    { "p2203r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall Tomasz Kamiski Conor Hoekstra Bryan St Amour ")) >(), wxS(" LEWG Executors Customization Point Report ") > >() },
    { "p2205r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Ruslan Arutyunyan Zach Laine Tom Scogland Dmitri Mokhov Chris Kohlhoff Daisy Hollman Jared Hoberock ")) >(), wxS(" Executors Review  Polymorphic Executor ") > >() },
    { "p2206r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Ben Craig Guy Davidson Anuya Welling Michael Voss Tom Scogland Chris Kohlhoff Gordon Brown Lee Howes ")) >(), wxS(" Executors Thread Pool review report ") > >() },
    { "p2207r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson Ben Craig Robert Leahy Micha Dominiak Alexey Kukanov Hartmut Kaiser Daisy Hollman Jared Hoberock Gordon Brown ")) >(), wxS(" Executors review concepts breakout group report ") > >() },
    { "p2209r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lee Howes ")) >(), wxS(" Bulk Schedule ") > >() },
    { "p2210r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Superior String Splitting ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Superior String Splitting ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Superior String Splitting ") > >() },
    { "p2211r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Sergei Murzin Michael Park Dan Sarginson ")) >(), wxS(" Exhaustiveness Checking for Pattern Matching ") > >() },
    { "p2212r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexey Dmitriev Howard Hinnant ")) >(), wxS(" Relax Requirements for timepointclock ") >, Rev< 1u, Arr64< Hash(wxS(" Alexey Dmitriev Howard Hinnant ")) >(), wxS(" Relax Requirements for timepointclock ") >, Rev< 2u, Arr64< Hash(wxS(" Alexey Dmitriev Howard Hinnant ")) >(), wxS(" Relax Requirements for timepointclock ") > >() },
    { "p2213r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Amir Kirsh Inbal Levi Dan Raviv Ran Regev Dvir Yitzchaki Andrei Zissu Yehezkel Bernart Michael Peeri ")) >(), wxS(" Executors Naming ") >, Rev< 1u, Arr64< Hash(wxS(" Amir Kirsh Inbal Levi Dan Raviv Ran Regev Dvir Yitzchaki Andrei Zissu Yehezkel Bernart Michael Peeri ")) >(), wxS(" Executors Naming ") > >() },
    { "p2214r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Conor Hoekstra Tim Song ")) >(), wxS(" A Plan for C Ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Conor Hoekstra Tim Song ")) >(), wxS(" A Plan for C Ranges ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Conor Hoekstra Tim Song ")) >(), wxS(" A Plan for C Ranges ") > >() },
    { "p2215r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Undefined behavior and the concurrency memory model ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Undefined behavior and the concurrency memory model ") > >() },
    { "p2216r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdformat improvements ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdformat improvements ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdformat improvements ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdformat improvements ") > >() },
    { "p2217r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2218r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" More flexible optionalvalueor ") > >() },
    { "p2219r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" P Executors Issues Needing Resolution ") > >() },
    { "p2220r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" redefine properties in P ") > >() },
    { "p2221r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" define P cpos with taginvoke ") > >() },
    { "p2223r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Trimming whitespaces before line splicing ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Trimming whitespaces before line splicing ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Trimming whitespaces before line splicing ") > >() },
    { "p2224r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Garland Jared Hoberock Lee Howes ")) >(), wxS(" A Better bulkschedule ") > >() },
    { "p2226r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A function template to move from an object and reset it to its default constructed state ") > >() },
    { "p2227r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Update normative reference to POSIX ") > >() },
    { "p2228r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Slide Deck for P EWG Presentation  ") > >() },
    { "p2231r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Add further constexpr support for optionalvariant ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Add further constexpr support for optionalvariant ") > >() },
    { "p2232r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Emil Dotchevski ")) >(), wxS(" ZeroOverhead Deterministic Exceptions Catching Values ") > >() },
    { "p2233r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Fall Library Evolution Polls ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Fall Library Evolution Polls ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Fall Library Evolution Polls ") >, Rev< 3u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Fall Library Evolution Polls ") > >() },
    { "p2234r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Scott Schurr ")) >(), wxS(" Consider a UB and IFNDR Audit ") >, Rev< 1u, Arr64< Hash(wxS(" Scott Schurr ")) >(), wxS(" Consider a UB and IFNDR Audit ") > >() },
    { "p2235r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Disentangling schedulers and executors ") > >() },
    { "p2236r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary Nov  ") > >() },
    { "p2237r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton ")) >(), wxS(" Metaprogramming ") > >() },
    { "p2238r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group tentatively ready issues for the November  meeting ") > >() },
    { "p2242r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonliteral variables and labels and gotos in constexpr functions ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonliteral variables and labels and gotos in constexpr functions ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonliteral variables and labels and gotos in constexpr functions ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Nonliteral variables and labels and gotos in constexpr functions ") > >() },
    { "p2244r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinanceSimulation Meeting Minutes ") > >() },
    { "p2245r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning Meeting Minutes ") > >() },
    { "p2246r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Character encoding of diagnostic text ") >, Rev< 1u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Character encoding of diagnostic text ") > >() },
    { "p2247r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig Billy Baker Nevin Liber Inbal Levi Corentin Jabot ")) >(), wxS("  Library Evolution Report ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig Billy Baker Nevin Liber Inbal Levi Corentin Jabot ")) >(), wxS("  Library Evolution Report ") > >() },
    { "p2248r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 4u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 5u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 6u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 7u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") >, Rev< 8u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Enabling listinitialization for algorithms ") > >() },
    { "p2249r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 3u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 4u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 5u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") >, Rev< 6u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Mixed comparisons for smart pointers ") > >() },
    { "p2250r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Michael Voss ")) >(), wxS(" Scheduler vs Executor ") > >() },
    { "p2251r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Require span amp basicstringview to be Trivially Copyable ") >, Rev< 1u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" Require span amp basicstringview to be Trivially Copyable ") > >() },
    { "p2253r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2254r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jared Hoberock ")) >(), wxS(" Executors Beyond Invocables ") > >() },
    { "p2255r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" A type trait to detect reference binding to temporary ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" A type trait to detect reference binding to temporary ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" A type trait to detect reference binding to temporary ") > >() },
    { "p2257r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dalton M Woodard ")) >(), wxS(" Blocking is an insufficient description for senders and receivers ") > >() },
    { "p2259r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Repairing input range adaptors and countediterator ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Repairing input range adaptors and countediterator ") > >() },
    { "p2260r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2262r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Fall Library Evolution Poll Outcomes ") > >() },
    { "p2263r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann Peter Bindels ")) >(), wxS(" A call for a WG managed chat service ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann Peter Bindels ")) >(), wxS(" A call for a WG managed chat service ") > >() },
    { "p2264r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 3u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 4u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 5u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 6u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") >, Rev< 7u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make assert macro user friendly for C and C ") > >() },
    { "p2265r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kevlin Henney ")) >(), wxS(" Renaming anyinvocable ") >, Rev< 1u, Arr64< Hash(wxS(" Kevlin Henney ")) >(), wxS(" Renaming anyinvocable ") > >() },
    { "p2266r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Simpler implicit move ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Simpler implicit move ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Simpler implicit move ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Simpler implicit move ") > >() },
    { "p2267r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Ben Craig Fabio Fracassi ")) >(), wxS(" Library Evolution Policies ") >, Rev< 1u, Arr64< Hash(wxS(" Inbal Levi Ben Craig Fabio Fracassi ")) >(), wxS(" Library Evolution Policies ") > >() },
    { "p2268r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Roadmap ") > >() },
    { "p2272r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Butler ")) >(), wxS(" Safety amp Security Review Board ") > >() },
    { "p2273r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" Making stduniqueptr constexpr ") >, Rev< 1u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" Making stduniqueptr constexpr ") >, Rev< 2u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" Making stduniqueptr constexpr ") >, Rev< 3u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" Making stduniqueptr constexpr ") > >() },
    { "p2274r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" C and C Compatibility Study Group ") > >() },
    { "p2276r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fix stdcbegin stdrangescbegin and cbegin for span fix of wrong fix of lwg ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fix cbegin ") > >() },
    { "p2277r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Packs outside of Templates ") > >() },
    { "p2278r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" cbegin should always return a constant iterator ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" cbegin should always return a constant iterator ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" cbegin should always return a constant iterator ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" cbegin should always return a constant iterator ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" cbegin should always return a constant iterator ") > >() },
    { "p2279r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" We need a language mechanism for customization points ") > >() },
    { "p2280r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Using unknown references in constant expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Using unknown references in constant expressions ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Using unknown references in constant expressions ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Using unknown references in constant expressions ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Using unknown references in constant expressions ") > >() },
    { "p2281r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Clarifying range adaptor objects ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Clarifying range adaptor objects ") > >() },
    { "p2283r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Schellenberger Costa ")) >(), wxS(" constexpr for specialized memory algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Schellenberger Costa ")) >(), wxS(" constexpr for specialized memory algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Schellenberger Costa ")) >(), wxS(" constexpr for specialized memory algorithms ") > >() },
    { "p2285r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Tomasz Kamiski ")) >(), wxS(" Are default function arguments in the immediate context ") > >() },
    { "p2286r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 7u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") >, Rev< 8u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Formatting Ranges ") > >() },
    { "p2287r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Designatedinitializers for base classes ") > >() },
    { "p2289r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Winter Library Evolution Polls ") > >() },
    { "p2290r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Delimited escape sequences ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Delimited escape sequences ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Delimited escape sequences ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Delimited escape sequences ") > >() },
    { "p2291r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniil Goncharov Karaev Alexander ")) >(), wxS(" Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in  Header ") >, Rev< 1u, Arr64< Hash(wxS(" Daniil Goncharov Karaev Alexander ")) >(), wxS(" Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in  Header ") >, Rev< 2u, Arr64< Hash(wxS(" Daniil Goncharov Karaev Alexander ")) >(), wxS(" Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in  Header ") >, Rev< 3u, Arr64< Hash(wxS(" Daniil Goncharov Karaev Alexander ")) >(), wxS(" Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in  Header ") > >() },
    { "p2295r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Correct UTF handling during phase  of translation ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Correct UTF handling during phase  of translation ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Support for UTF as a portable source file encoding ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Support for UTF as a portable source file encoding ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Support for UTF as a portable source file encoding ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Support for UTF as a portable source file encoding ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Peter Brett ")) >(), wxS(" Support for UTF as a portable source file encoding ") > >() },
    { "p2297r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Wording improvements for encodings and character sets ") > >() },
    { "p2299r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" mdspan and CTAD ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" mdspan and CTAD ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" mdspan and CTAD ") >, Rev< 3u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" mdspans of All Dynamic Extents ") >, Rev< 4u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" mdspans of All Dynamic Extents ") > >() },
    { "p2300r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak Lewis Baker Lee Howes Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 1u, Arr64< Hash(wxS(" Micha Dominiak Lewis Baker Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 10u, Arr64< Hash(wxS(" Eric Niebler Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 2u, Arr64< Hash(wxS(" Micha Dominiak Lewis Baker Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 3u, Arr64< Hash(wxS(" Micha Dominiak Lewis Baker Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 4u, Arr64< Hash(wxS(" Micha Dominiak Lewis Baker Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 5u, Arr64< Hash(wxS(" Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 6u, Arr64< Hash(wxS(" Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 7u, Arr64< Hash(wxS(" Eric Niebler Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 8u, Arr64< Hash(wxS(" Eric Niebler Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") >, Rev< 9u, Arr64< Hash(wxS(" Eric Niebler Micha Dominiak Georgy Evtushenko Lewis Baker Lucian Radu Teodorescu Lee Howes Kirk Shoop Michael Garland Bryce Adelstein Lelbach ")) >(), wxS(" stdexecution ") > >() },
    { "p2301r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Add a pmr alias for stdstacktrace ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Add a pmr alias for stdstacktrace ") > >() },
    { "p2302r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" Prefer stdrangescontains over stdbasicstringviewcontains ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdrangescontains ") >, Rev< 2u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdrangescontains ") >, Rev< 3u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdrangescontains ") >, Rev< 4u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdrangescontains ") > >() },
    { "p2303r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Function literals and value closures ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Function literals and value closures ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Function literals and value closures ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Function literals and value closures ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Basic lambdas for C ") > >() },
    { "p2304r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Improve type generic programming ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Improve type generic programming ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Improve type generic programming ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Improve type generic programming ") > >() },
    { "p2305r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Type inference for variable definitions and function returns ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Type inference for variable definitions and function returns ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Type inference for variable definitions and function returns ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Type inference for variable definitions and function returns ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Type inference for variable definitions and function returns ") >, Rev< 5u, Arr64< Hash(wxS(" Jens Gustedt Alex Gilding ")) >(), wxS(" Type inference for object definitions ") > >() },
    { "p2306r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Typegeneric lambdas ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Typegeneric lambdas ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Typegeneric lambdas ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Typegeneric lambdas ") > >() },
    { "p2307r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Lvalue closures ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Lvalue closures ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Lvalue closures ") > >() },
    { "p2308r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Template parameter initialization ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Template parameter initialization ") > >() },
    { "p2309r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" A common CC core specification ") > >() },
    { "p2310r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Revise spelling of keywords ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Revise spelling of keywords ") > >() },
    { "p2311r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Make false and true firstclass language features ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Make false and true firstclass language features ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Make false and true firstclass language features ") > >() },
    { "p2312r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Introduce the nullptr constant ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Introduce the nullptr constant ") > >() },
    { "p2313r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group quottentatively readyquot issues for the February  meeting ") > >() },
    { "p2314r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Character sets and encodings ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Character sets and encodings ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Character sets and encodings ") >, Rev< 3u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Character sets and encodings ") >, Rev< 4u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Character sets and encodings ") > >() },
    { "p2315r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary Feb  ") > >() },
    { "p2316r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Consistent character literal encoding ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Consistent character literal encoding ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Consistent character literal encoding ") > >() },
    { "p2317r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" C  An Invisible foundation of everything ") > >() },
    { "p2318r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt Peter Sewell Kayvan Memarian Victor B F Gomes Martin Uecker ")) >(), wxS(" A Provenanceaware Memory Object Model for C ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt Peter Sewell Kayvan Memarian Victor B F Gomes Martin Uecker ")) >(), wxS(" A Provenanceaware Memory Object Model for C ") > >() },
    { "p2319r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Prevent path presentation problems ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Prevent path presentation problems ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Prevent path presentation problems ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Prevent path presentation problems ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Prevent path presentation problems ") > >() },
    { "p2320r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Sutton Wyatt Childers Daveed Vandevoorde ")) >(), wxS(" The Syntax of Static Reflection ") > >() },
    { "p2321r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" zip ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" zip ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" zip ") > >() },
    { "p2322r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangesfold ") > >() },
    { "p2323r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Uecker ")) >(), wxS(" maybeunused attribute for labels ") > >() },
    { "p2324r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Martin Uecker ")) >(), wxS(" Labels at the end of compound statements C compatibility ") >, Rev< 1u, Arr64< Hash(wxS(" Martin Uecker ")) >(), wxS(" Labels at the end of compound statements C compatibility ") >, Rev< 2u, Arr64< Hash(wxS(" Martin Uecker ")) >(), wxS(" Labels at the end of compound statements C compatibility ") > >() },
    { "p2325r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Views should not be required to be default constructible ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Views should not be required to be default constructible ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Views should not be required to be default constructible ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Views should not be required to be default constructible ") > >() },
    { "p2327r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul Bendixen Jens Maurer Arthur ODwyer Ben Saks ")) >(), wxS(" Dedeprecating volatile compound assignment ") >, Rev< 1u, Arr64< Hash(wxS(" Paul M Bendixen Jens Maurer Arthur ODwyer Ben Saks ")) >(), wxS(" Dedeprecating volatile compound operations ") > >() },
    { "p2328r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" joinview should join all views of ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" joinview should join all views of ranges ") > >() },
    { "p2329r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Move Copy and Locality at Scale ") > >() },
    { "p2330r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2331r0", RevList< Rev< 0u, Arr64< Hash(wxS(" tienne Alepins Jens Gustedt ")) >(), wxS(" Unsequenced functions ") > >() },
    { "p2332r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Bentley Ville Voutilainen Gaper Aman ")) >(), wxS(" Establishing stdhive as replacement name for the proposed stdcolony container ") > >() },
    { "p2333r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Winter Library Evolution Poll Outcomes ") > >() },
    { "p2334r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Melanie Blower ")) >(), wxS(" Add support for preprocessing directives elifdef and elifndef ") >, Rev< 1u, Arr64< Hash(wxS(" Melanie Blower ")) >(), wxS(" Add support for preprocessing directives elifdef and elifndef ") > >() },
    { "p2337r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicholas G Timmons ")) >(), wxS(" Less constexpr for ltcmathgt ") > >() },
    { "p2338r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Character primitives and the C library ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Character primitives and the C library ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Character primitives and the C library ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Character primitives and the C library ") >, Rev< 4u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library Character primitives and the C library ") > >() },
    { "p2339r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract violation handlers ") > >() },
    { "p2340r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Clarifying the status of the C headers ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Clarifying the status of the C headers ") > >() },
    { "p2342r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" For a Few Punctuators More ") > >() },
    { "p2345r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sean Parent ")) >(), wxS(" Relaxing Requirements of MovedFrom Objects ") > >() },
    { "p2347r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Bruno Manganelli ")) >(), wxS(" Argument type deduction for nontrailing parameter packs ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Bruno Manganelli ")) >(), wxS(" Argument type deduction for nontrailing parameter packs ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Bruno Manganelli ")) >(), wxS(" Argument type deduction for nontrailing parameter packs ") > >() },
    { "p2348r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Whitespaces Wording Revamp ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Whitespaces Wording Revamp ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Whitespaces Wording Revamp ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Whitespaces Wording Revamp ") > >() },
    { "p2350r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" constexpr class ") >, Rev< 1u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" constexpr class ") >, Rev< 2u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" constexpr class ") > >() },
    { "p2351r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Mark all library static cast wrappers as nodiscard ") > >() },
    { "p2352r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2353r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Rector ")) >(), wxS(" Metaprograms and fragments are needed in commaseparated contexts ") > >() },
    { "p2355r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Postfix fold expressions ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Postfix fold expressions ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Postfix fold expressions ") > >() },
    { "p2356r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matus Chochlik ")) >(), wxS(" Implementing Factory builder on top of P ") > >() },
    { "p2358r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman John McFarlane Bronek Kozicki ")) >(), wxS(" Defining Contracts ") > >() },
    { "p2360r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Extend initstatement to allow aliasdeclaration ") > >() },
    { "p2361r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Unevaluated string literals ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated string literals ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated strings ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated strings ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated strings ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated strings ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Aaron Ballman ")) >(), wxS(" Unevaluated strings ") > >() },
    { "p2362r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Brett Corentin Jabot ")) >(), wxS(" Make obfuscating wide character literals illformed ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Brett Corentin Jabot ")) >(), wxS(" Remove nonencodable wide character literals and multicharacter wide character literals ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Brett Corentin Jabot ")) >(), wxS(" Remove nonencodable wide character literals and multicharacter wide character literals ") >, Rev< 3u, Arr64< Hash(wxS(" Peter Brett Corentin Jabot ")) >(), wxS(" Remove nonencodable wide character literals and multicharacter wide character literals ") > >() },
    { "p2363r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") >, Rev< 1u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") >, Rev< 2u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") >, Rev< 3u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") >, Rev< 4u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") >, Rev< 5u, Arr64< Hash(wxS(" Konstantin Boyarinov Sergey Vinogradov Ruslan Arutyunyan ")) >(), wxS(" Extending associative containers with the remaining heterogeneous overloads ") > >() },
    { "p2367r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Remove misuses of listinitialization from Clause  ") > >() },
    { "p2368r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Spring Library Evolution Polls ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Spring Library Evolution Polls ") > >() },
    { "p2370r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Nekrashevich Antony Polukhin ")) >(), wxS(" Stacktrace from exception ") >, Rev< 1u, Arr64< Hash(wxS(" Andrei Nekrashevich Antony Polukhin ")) >(), wxS(" Stacktrace from exception ") >, Rev< 2u, Arr64< Hash(wxS(" Andrei Nekrashevich Antony Polukhin ")) >(), wxS(" Stacktrace from exception ") > >() },
    { "p2372r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Corentin Jabot ")) >(), wxS(" Fixing locale handling in chrono formatters ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich Corentin Jabot ")) >(), wxS(" Fixing locale handling in chrono formatters ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich Corentin Jabot ")) >(), wxS(" Fixing locale handling in chrono formatters ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich Corentin Jabot ")) >(), wxS(" Fixing locale handling in chrono formatters ") > >() },
    { "p2374r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sy Brand ")) >(), wxS(" viewscartesianproduct ") >, Rev< 1u, Arr64< Hash(wxS(" Sy Brand ")) >(), wxS(" viewscartesianproduct ") >, Rev< 2u, Arr64< Hash(wxS(" Sy Brand Micha Dominiak ")) >(), wxS(" viewscartesianproduct ") >, Rev< 3u, Arr64< Hash(wxS(" Sy Brand Micha Dominiak ")) >(), wxS(" viewscartesianproduct ") >, Rev< 4u, Arr64< Hash(wxS(" Sy Brand Micha Dominiak ")) >(), wxS(" viewscartesianproduct ") > >() },
    { "p2375r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Johan Lundberg ")) >(), wxS(" Generalisation of nthelement to a range of nths ") >, Rev< 1u, Arr64< Hash(wxS(" Johan Lundberg ")) >(), wxS(" Generalisation of nthelement to a range of nths ") > >() },
    { "p2376r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Johan Lundberg ")) >(), wxS(" Comments on Simple Statistical Functions pr Contracts Exceptions and Special cases ") > >() },
    { "p2377r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" nodiscard in the Standard Library Clause  Iterators library ") > >() },
    { "p2378r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt Martin Uecker ")) >(), wxS(" Properly define blocks as part of the grammar ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt Martin Uecker ")) >(), wxS(" Properly define blocks as part of the grammar ") > >() },
    { "p2380r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" referencewrapper Associations ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" referencewrapper Associations ") > >() },
    { "p2381r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Pattern Matching with Exception Handling ") > >() },
    { "p2382r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hal Finkel ")) >(), wxS(" Presentation Slides for a hrefprhtmlPRa ") > >() },
    { "p2384r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Spring Library Evolution Poll Outcomes ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Spring Library Evolution Poll Outcomes ") > >() },
    { "p2385r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary June  ") > >() },
    { "p2386r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group quotreadyquot Issues for the June  meeting ") > >() },
    { "p2387r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Pipe support for userdefined range adaptors ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Pipe support for userdefined range adaptors ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Pipe support for userdefined range adaptors ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Pipe support for userdefined range adaptors ") > >() },
    { "p2388r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman ")) >(), wxS(" Abortonly contract support ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman ")) >(), wxS(" Minimum Contract Support either Ignore or Checkandabort ") >, Rev< 2u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman ")) >(), wxS(" Minimum Contract Support either Ignore or Checkandabort ") >, Rev< 3u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman ")) >(), wxS(" Minimum Contract Support either Noeval or Evalandabort ") >, Rev< 4u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman ")) >(), wxS(" Minimum Contract Support either Noeval or Evalandabort ") > >() },
    { "p2389r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" dextents Index Type Parameter ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Mark Hoemmen ")) >(), wxS(" dextents Index Type Parameter ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Mark Hoemmen ")) >(), wxS(" dextents Index Type Parameter ") > >() },
    { "p2390r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Add annotations for unreachable control flow ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Add annotations for unreachable control flow ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Gustedt ")) >(), wxS(" Add annotations for unreachable control flow ") > >() },
    { "p2391r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" C Update Report ") > >() },
    { "p2392r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Pattern matching using is and as ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Pattern matching using ampquotisampquot and ampquotasampquot ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Pattern matching using is and as ") >, Rev< 3u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Pattern matching using is and as ") > >() },
    { "p2393r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Cleaning up integerclass types ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Cleaning up integerclass types ") > >() },
    { "p2395r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2396r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Concurrency TS  fixes ") >, Rev< 1u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Concurrency TS  fixes ") > >() },
    { "p2397r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2400r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Report ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Report  to  ") >, Rev< 2u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Report  to  ") >, Rev< 3u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Report  to  ") > >() },
    { "p2401r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Add a conditional noexcept specification to stdexchange ") > >() },
    { "p2402r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" A free function linear algebra interface based on the BLAS slides ") > >() },
    { "p2403r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Garland Micha Dominiak Lewis Baker Lee Howes Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" Presentation on P  stdexecution ") > >() },
    { "p2404r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Bassett ")) >(), wxS(" Relaxing equalitycomparablewiths and threewaycomparablewiths common reference requirements to ") >, Rev< 1u, Arr64< Hash(wxS(" Justin Bassett ")) >(), wxS(" Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith ") >, Rev< 2u, Arr64< Hash(wxS(" Justin Bassett ")) >(), wxS(" Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith ") >, Rev< 3u, Arr64< Hash(wxS(" Justin Bassett ")) >(), wxS(" Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith ") > >() },
    { "p2405r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Bassett ")) >(), wxS(" nulloptt and nullptrt should both have operator and operator ") > >() },
    { "p2406r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Fix countediterator interaction with input iterators ") >, Rev< 1u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Fix countediterator interaction with input iterators ") >, Rev< 2u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Add lazycountediterator ") >, Rev< 3u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Add lazycountediterator ") >, Rev< 4u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Add lazycountediterator ") >, Rev< 5u, Arr64< Hash(wxS(" Yehezkel Bernat Yehuda Bernat ")) >(), wxS(" Add lazycountediterator ") > >() },
    { "p2407r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Emil Meissner Ben Craig ")) >(), wxS(" Freestanding Library Partial Classes ") >, Rev< 1u, Arr64< Hash(wxS(" Emil Meissner Ben Craig ")) >(), wxS(" Freestanding Library Partial Classes ") >, Rev< 2u, Arr64< Hash(wxS(" Emil Meissner Ben Craig ")) >(), wxS(" Freestanding Library Partial Classes ") >, Rev< 3u, Arr64< Hash(wxS(" Emil Meissner Ben Craig ")) >(), wxS(" Freestanding Library Partial Classes ") >, Rev< 4u, Arr64< Hash(wxS(" Emil Meissner Ben Craig ")) >(), wxS(" Freestanding Library Partial Classes ") >, Rev< 5u, Arr64< Hash(wxS(" Ben Craig Emil Meissner ")) >(), wxS(" Freestanding Library Partial Classes ") > >() },
    { "p2408r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges views as inputs to nonRanges algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges views as inputs to nonRanges algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges iterators as inputs to nonRanges algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges iterators as inputs to nonRanges algorithms ") >, Rev< 4u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges iterators as inputs to nonRanges algorithms ") >, Rev< 5u, Arr64< Hash(wxS(" David Olsen ")) >(), wxS(" Ranges iterators as inputs to nonRanges algorithms ") > >() },
    { "p2409r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Requirements for Usage of C Modules at Bloomberg ") > >() },
    { "p2410r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Typeandresource safety in modern C ") > >() },
    { "p2411r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Thoughts on pattern matching ") > >() },
    { "p2412r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Minimal module support for the standard library ") > >() },
    { "p2413r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lnrd Szolnoki ")) >(), wxS(" Remove unsafe conversions of uniqueptr ") >, Rev< 1u, Arr64< Hash(wxS(" Lnrd Szolnoki ")) >(), wxS(" Remove unsafe conversions of uniqueptr ") > >() },
    { "p2414r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany and Anthony Williams ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany and Anthony Williams ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany and Anthony Williams ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 3u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 4u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 5u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 6u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") >, Rev< 7u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" Pointer lifetimeend zap proposed solutions ") > >() },
    { "p2415r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Tim Song ")) >(), wxS(" What is a view ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Tim Song ")) >(), wxS(" What is a view ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Tim Song ")) >(), wxS(" What is a view ") > >() },
    { "p2416r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Presentation of requirements in the standard library ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Presentation of requirements in the standard library ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Presentation of requirements in the standard library ") > >() },
    { "p2417r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniil Goncharov ")) >(), wxS(" A more constexpr bitset ") >, Rev< 1u, Arr64< Hash(wxS(" Daniil Goncharov ")) >(), wxS(" A more constexpr bitset ") >, Rev< 2u, Arr64< Hash(wxS(" Daniil Goncharov ")) >(), wxS(" A more constexpr bitset ") > >() },
    { "p2418r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Add support for stdgeneratorlike types to stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Add support for stdgeneratorlike types to stdformat ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Add support for stdgeneratorlike types to stdformat ") > >() },
    { "p2419r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Peter Brett ")) >(), wxS(" Clarify handling of encodings in localized formatting of chrono types ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich Peter Brett ")) >(), wxS(" Clarify handling of encodings in localized formatting of chrono types ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich Peter Brett ")) >(), wxS(" Clarify handling of encodings in localized formatting of chrono types ") > >() },
    { "p2420r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Summer Library Evolution Polls ") > >() },
    { "p2422r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Remove nodiscard annotations from the standard library specification ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Remove nodiscard annotations from the standard library specification ") > >() },
    { "p2423r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rajan Bhakta ")) >(), wxS(" C Floating Point Study Group Liaison Report ") > >() },
    { "p2424r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Abbreviated Parameters ") > >() },
    { "p2425r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Expression Function Body ") > >() },
    { "p2428r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Slides BSI issues with P ") > >() },
    { "p2429r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sy Brand ")) >(), wxS(" Concepts Error Messages for Humans ") > >() },
    { "p2430r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Slides Partial success scenarios with P ") > >() },
    { "p2431r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Garland Micha Dominiak Lewis Baker Lee Howes Kirk Shoop Eric Niebler Bryce Adelstein Lelbach ")) >(), wxS(" Presentation Plans for P Revision  ") > >() },
    { "p2432r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fixing istreamview ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Fix istreamview Rev  ") > >() },
    { "p2434r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Nondeterministic pointer provenance ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Nondeterministic pointer provenance ") >, Rev< 2u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Nondeterministic pointer provenance ") >, Rev< 3u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Nondeterministic pointer provenance ") >, Rev< 4u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Nondeterministic pointer provenance ") > >() },
    { "p2435r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Summer Library Evolution Poll Outcomes ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Summer Library Evolution Poll Outcomes ") > >() },
    { "p2436r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  September Library Evolution Polls ") > >() },
    { "p2437r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Support for warning ") >, Rev< 1u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" Support for warning ") > >() },
    { "p2438r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Federico Kircheis Tomasz Kamiski ")) >(), wxS(" stdstringsubstr ampamp ") >, Rev< 1u, Arr64< Hash(wxS(" Federico Kircheis Tomasz Kamiski ")) >(), wxS(" stdstringsubstr ampamp ") >, Rev< 2u, Arr64< Hash(wxS(" Federico Kircheis Tomasz Kamiski ")) >(), wxS(" stdstringsubstr ampamp ") > >() },
    { "p2439r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song Barry Revzin ")) >(), wxS(" Slides for a hrefprhtmlPRa what is a view ") > >() },
    { "p2440r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" rangesiota rangesshiftleft and rangesshiftright ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" rangesiota rangesshiftleft and rangesshiftright ") > >() },
    { "p2441r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsjoinwith ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsjoinwith ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsjoinwith ") > >() },
    { "p2442r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Windowing range adaptors viewschunk and viewsslide ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Windowing range adaptors viewschunk and viewsslide ") > >() },
    { "p2443r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewschunkby ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewschunkby ") > >() },
    { "p2444r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" The Asio asynchronous model ") > >() },
    { "p2445r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" forwardlike ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" forwardlike ") > >() },
    { "p2446r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsmove ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsallmove ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" viewsasrvalue ") > >() },
    { "p2447r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" stdspan and the missing constructor ") >, Rev< 1u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" stdspan and the missing constructor ") >, Rev< 2u, Arr64< Hash(wxS(" Federico Kircheis ")) >(), wxS(" stdspan and the missing constructor ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer Federico Kircheis ")) >(), wxS(" stdspan over an initializer list ") >, Rev< 4u, Arr64< Hash(wxS(" Arthur ODwyer Federico Kircheis ")) >(), wxS(" stdspan over an initializer list ") >, Rev< 5u, Arr64< Hash(wxS(" Arthur ODwyer Federico Kircheis ")) >(), wxS(" stdspan over an initializer list ") >, Rev< 6u, Arr64< Hash(wxS(" Arthur ODwyer Federico Kircheis ")) >(), wxS(" stdspan over an initializer list ") > >() },
    { "p2448r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Relaxing some constexpr restrictions ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Relaxing some constexpr restrictions ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Relaxing some constexpr restrictions ") > >() },
    { "p2450r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary Oct  ") > >() },
    { "p2451r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  September Library Evolution Poll Outcomes ") > >() },
    { "p2452r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig ")) >(), wxS("  October Library Evolution and Concurrency Polls on Networking and Executors ") > >() },
    { "p2453r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  October Library Evolution Poll Outcomes ") > >() },
    { "p2454r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  November Library Evolution Polls ") > >() },
    { "p2455r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  November Library Evolution Poll Outcomes ") > >() },
    { "p2456r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  December Library Evolution Polls ") > >() },
    { "p2457r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  December Library Evolution Poll Outcomes ") > >() },
    { "p2458r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  January Library Evolution Polls ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  January Library Evolution Polls ") > >() },
    { "p2459r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig ")) >(), wxS("  January Library Evolution Poll Outcomes ") > >() },
    { "p2460r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Relax requirements on  wchart to match existing practices ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Relax requirements on  wchart to match existing practices ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Relax requirements on  wchart to match existing practices ") > >() },
    { "p2461r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Caleb Sunstrum Bronek Kozicki ")) >(), wxS(" Closurebased Syntax for Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Caleb Sunstrum Bronek Kozicki ")) >(), wxS(" Closurebased Syntax for Contracts ") > >() },
    { "p2462r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Mike Miller ")) >(), wxS(" Core Language Working Group ready issues for the October  meeting ") > >() },
    { "p2463r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff ")) >(), wxS(" Slides for Pr The Asio asynchronous model ") > >() },
    { "p2464r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ruminations on networking and executors ") > >() },
    { "p2465r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephan T Lavavej Gabriel Dos Reis Bjarne Stroustrup Jonathan Wakely ")) >(), wxS(" Standard Library Modules std and stdall ") >, Rev< 1u, Arr64< Hash(wxS(" Stephan T Lavavej Gabriel Dos Reis Bjarne Stroustrup Jonathan Wakely ")) >(), wxS(" Standard Library Modules std and stdcompat ") >, Rev< 2u, Arr64< Hash(wxS(" Stephan T Lavavej Gabriel Dos Reis Bjarne Stroustrup Jonathan Wakely ")) >(), wxS(" Standard Library Modules std and stdcompat ") >, Rev< 3u, Arr64< Hash(wxS(" Stephan T Lavavej Gabriel Dos Reis Bjarne Stroustrup Jonathan Wakely ")) >(), wxS(" Standard Library Modules std and stdcompat ") > >() },
    { "p2466r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" The notes on contract annotations ") > >() },
    { "p2467r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Support exclusive mode for fstreams ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Support exclusive mode for fstreams ") > >() },
    { "p2468r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Bjarne Stroustrup Cameron DaCamara Daveed Vandevoorde Gabriel Dos Reis Herb Sutter Jason Merrill Jonathan Caves Richard Smith Ville Voutilainen ")) >(), wxS(" The Equality Operator You Are Looking For ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Bjarne Stroustrup Cameron DaCamara Daveed Vandevoorde Gabriel Dos Reis Herb Sutter Jason Merrill Jonathan Caves Richard Smith Ville Voutilainen ")) >(), wxS(" The Equality Operator You Are Looking For ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Bjarne Stroustrup Cameron DaCamara Daveed Vandevoorde Gabriel Dos Reis Herb Sutter Jason Merrill Jonathan Caves Richard Smith Ville Voutilainen ")) >(), wxS(" The Equality Operator You Are Looking For ") > >() },
    { "p2469r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff Jamie Allsop Vinnie Falco Richard Hodges Klemens Morgenstern ")) >(), wxS(" Response to P The Networking TS is baked P SenderReceiver is not ") > >() },
    { "p2470r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Slides for presentation of a hrefprhtmlPRa stdexecution senderreceiver ") > >() },
    { "p2471r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" NetTS ASIO and Sender Library Design Comparison ") >, Rev< 1u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" NetTS ASIO and Sender Library Design Comparison ") > >() },
    { "p2472r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" makefunctionref A More Functional functionref ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" make functionref more functional ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo Zhihao Yuan ")) >(), wxS(" make functionref more functional ") >, Rev< 3u, Arr64< Hash(wxS(" Jarrad J Waterloo Zhihao Yuan ")) >(), wxS(" make functionref more functional ") > >() },
    { "p2473r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Distributing C Module Libraries ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Distributing C Module Libraries ") > >() },
    { "p2474r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" viewsrepeat ") >, Rev< 1u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" viewsrepeat ") >, Rev< 2u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" viewsrepeat ") > >() },
    { "p2475r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2477r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow programmer to control and detect coroutine elision by static constexpr bool shouldelide and ") >, Rev< 1u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow programmer to control and detect coroutine elision by static constexpr bool mustelide and ") >, Rev< 2u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow programmer to control and detect coroutine elision ") >, Rev< 3u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow programmers to control coroutine elision ") > >() },
    { "p2478r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hubert Tong Rajan Bhakta ")) >(), wxS(" Threadlocal for better C interoperability with C ") > >() },
    { "p2479r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Slides for P ") > >() },
    { "p2480r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Kohlhoff Jamie Allsop Klemens Morgenstern ")) >(), wxS(" Response to P NetTS Asio and Sender library design comparison  corrected and expanded ") > >() },
    { "p2481r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Forwarding reference to specific typetemplate ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Forwarding reference to specific typetemplate ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Forwarding reference to specific typetemplate ") > >() },
    { "p2483r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hui Xie ")) >(), wxS(" Support Noncopyable Types for singleview ") > >() },
    { "p2484r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Smith ")) >(), wxS(" Extending class types as nontype template parameters ") > >() },
    { "p2485r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Do not add valueexists and valueor to C ") > >() },
    { "p2486r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Structured naming for function object and CPO values ") >, Rev< 1u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" Structured naming for function object and CPO values ") > >() },
    { "p2487r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Attributelike syntax for contract annotations ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Is attributelike syntax adequate for contract annotations ") > >() },
    { "p2489r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Library Evolution Plan for Completing C ") > >() },
    { "p2490r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ed Catmur ")) >(), wxS(" Zerooverhead exception stacktraces ") >, Rev< 3u, Arr64< Hash(wxS(" Ed Catmur ")) >(), wxS(" Zerooverhead exception stacktraces ") > >() },
    { "p2491r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Text encodings followup ") > >() },
    { "p2492r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Attending C Standards Committee Meetings During a Pandemic ") > >() },
    { "p2493r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Missing feature test macros for C core papers ") > >() },
    { "p2494r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" Relaxing range adaptors to allow for move only types ") >, Rev< 1u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" Relaxing range adaptors to allow for move only types ") >, Rev< 2u, Arr64< Hash(wxS(" Micha Dominiak ")) >(), wxS(" Relaxing range adaptors to allow for move only types ") > >() },
    { "p2495r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Hava ")) >(), wxS(" Interfacing stringstreams with stringview ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Hava ")) >(), wxS(" Interfacing stringstreams with stringview ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Hava ")) >(), wxS(" Interfacing stringstreams with stringview ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Hava ")) >(), wxS(" Interfacing stringstreams with stringview ") > >() },
    { "p2497r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Testing for success or failure of charconv functions ") > >() },
    { "p2498r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Forward compatibility of textencoding with additional encoding registries ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Forward compatibility of textencoding with additional encoding registries ") > >() },
    { "p2499r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" stringview range constructor should be explicit ") > >() },
    { "p2500r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan ")) >(), wxS(" C parallel algorithms and P ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" C parallel algorithms and P ") >, Rev< 2u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" C parallel algorithms and P ") > >() },
    { "p2501r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Undo the rename of viewsmove and viewsasconst ") > >() },
    { "p2502r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" stdgenerator Synchronous Coroutine Generator for Ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" stdgenerator Synchronous Coroutine Generator for Ranges ") >, Rev< 2u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" stdgenerator Synchronous Coroutine Generator for Ranges ") > >() },
    { "p2504r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lucian Radu Teodorescu ")) >(), wxS(" Computations as a global solution to concurrency ") > >() },
    { "p2505r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") >, Rev< 1u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") >, Rev< 2u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") >, Rev< 3u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") >, Rev< 4u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") >, Rev< 5u, Arr64< Hash(wxS(" Jeff Garland ")) >(), wxS(" Monadic Functions for stdexpected ") > >() },
    { "p2506r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Casey Carter ")) >(), wxS(" stdlazy a coroutine for deferred execution ") > >() },
    { "p2507r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Only assume conditionalexpressions ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Brett ")) >(), wxS(" Limit assume to conditionalexpressions ") > >() },
    { "p2508r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Exposing stdbasicformatstring ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Exposing stdbasicformatstring ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Exposing stdbasicformatstringcharT Args") > >() },
    { "p2509r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect valuepreserving conversions ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect valuepreserving conversions ") > >() },
    { "p2510r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark de Wever ")) >(), wxS(" Formatting pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Mark de Wever ")) >(), wxS(" Formatting pointers ") >, Rev< 2u, Arr64< Hash(wxS(" Mark de Wever ")) >(), wxS(" Formatting pointers ") >, Rev< 3u, Arr64< Hash(wxS(" Mark de Wever ")) >(), wxS(" Formatting pointers ") > >() },
    { "p2511r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Beyond operator NTTP callables in typeerased call wrappers ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Beyond operator NTTP callables in typeerased call wrappers ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Beyond operator NTTP callables in typeerased call wrappers ") > >() },
    { "p2512r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2513r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide Tom Honermann ")) >(), wxS(" chart Compatibility and Portability Fixes ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide Tom Honermann ")) >(), wxS(" chart Compatibility and Portability Fix ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide Tom Honermann ")) >(), wxS(" chart Compatibility and Portability Fix ") >, Rev< 3u, Arr64< Hash(wxS(" JeanHeyd Meneide Tom Honermann ")) >(), wxS(" chart Compatibility and Portability Fix ") >, Rev< 4u, Arr64< Hash(wxS(" JeanHeyd Meneide Tom Honermann ")) >(), wxS(" chart Compatibility and Portability Fix ") > >() },
    { "p2514r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Isabella Muerte ")) >(), wxS(" stdbreakpoint ") > >() },
    { "p2515r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" stdisdebuggerpresent ") > >() },
    { "p2516r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stringview is implicitly convertible from what ") > >() },
    { "p2517r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Add a conditional noexcept specification to stdapply ") >, Rev< 1u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Add a conditional noexcept specification to stdapply ") > >() },
    { "p2520r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" moveiterator should be a random access iterator ") > >() },
    { "p2521r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman Joshua Berne Bronek Kozicki Ryan McDougall Caleb Sunstrum ")) >(), wxS(" Contract support  Working Paper ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman Joshua Berne Bronek Kozicki Ryan McDougall Caleb Sunstrum ")) >(), wxS(" Contract support  Working Paper ") >, Rev< 2u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman Joshua Berne Bronek Kozicki Ryan McDougall Caleb Sunstrum ")) >(), wxS(" Contract support  Working Paper ") >, Rev< 3u, Arr64< Hash(wxS(" Andrzej Krzemieski Gaper Aman Joshua Berne Bronek Kozicki Ryan McDougall Caleb Sunstrum ")) >(), wxS(" Contract support  Record of SG consensus ") >, Rev< 4u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract support  Record of SG consensus ") >, Rev< 5u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract support  Record of SG consensus ") > >() },
    { "p2523r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Request for reinclusion of stdhive proposal in C ") > >() },
    { "p2524r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinanceSimulation  ") > >() },
    { "p2525r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning Meeting Minutes  ") > >() },
    { "p2527r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" stdvariantalternativeindex and stdvariantalternativeindexv ") >, Rev< 1u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" stdvariantalternativeindex and stdtupleelementindex ") >, Rev< 2u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" stdvariantalternativeindex and stdtupleelementindex ") >, Rev< 3u, Arr64< Hash(wxS(" Alex Christensen ")) >(), wxS(" stdvariantalternativeindex and stdtupleelementindex ") > >() },
    { "p2528r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Reini Urban ")) >(), wxS(" CC Identifier Security using Unicode Standard Annex  ") > >() },
    { "p2529r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mathias Stearn ")) >(), wxS(" generator should have Tampamp referencetype ") > >() },
    { "p2530r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged Michael Maged M Michael Michael Wong Paul McKenney Andrew Hunter Daisy S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Why Hazard Pointers should be in C ") >, Rev< 1u, Arr64< Hash(wxS(" Maged Michael Maged M Michael Michael Wong Paul McKenney Andrew Hunter Daisy S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Why Hazard Pointers should be in C ") >, Rev< 2u, Arr64< Hash(wxS(" Maged Michael Maged M Michael Michael Wong Paul McKenney Andrew Hunter Daisy S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Why Hazard Pointers should be in C ") >, Rev< 3u, Arr64< Hash(wxS(" Maged Michael Maged M Michael Michael Wong Paul McKenney Andrew Hunter Daisy S Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Mathias Stearn ")) >(), wxS(" Hazard Pointers for C ") > >() },
    { "p2531r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary Feb  ") > >() },
    { "p2532r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Removing exceptionptr from the Receiver Concepts ") > >() },
    { "p2533r0", RevList< Rev< 0u, Arr64< Hash(wxS(" William M Miller ")) >(), wxS(" Core Language Working Group quotreadyquot Issues for the February  meeting ") > >() },
    { "p2534r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides functionref in the wild a hrefprhtmlPRa presentation ") > >() },
    { "p2535r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olivier Giroux Daniel Lustig ")) >(), wxS(" Message fences ") > >() },
    { "p2536r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olga Arkhipova ")) >(), wxS(" Distributing C Module Libraries with dependencies json files ") > >() },
    { "p2537r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Relax vastart Requirements to Match C ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Relax vastart Requirements to Match C ") >, Rev< 2u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" Relax vastart Requirements to Match C ") > >() },
    { "p2538r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" ADLproof stdprojected ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Casey Carter ")) >(), wxS(" ADLproof stdprojected ") > >() },
    { "p2539r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Should the output of stdprint to a terminal be synchronized with the underlying stream ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Should the output of stdprint to a terminal be synchronized with the underlying stream ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Should the output of stdprint to a terminal be synchronized with the underlying stream ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Should the output of stdprint to a terminal be synchronized with the underlying stream ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Should the output of stdprint to a terminal be synchronized with the underlying stream ") > >() },
    { "p2540r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Empty Product for certain Views ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Empty Product for certain Views ") > >() },
    { "p2541r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Consider renaming removequals ") > >() },
    { "p2542r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 1u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 2u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 3u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 4u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 5u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 6u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 7u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") >, Rev< 8u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" viewsconcat ") > >() },
    { "p2544r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Neumann ")) >(), wxS(" C exceptions are becoming more and more problematic ") > >() },
    { "p2545r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski Jens Maurer ")) >(), wxS(" Why RCU Should be in C ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski Jens Maurer ")) >(), wxS(" Why RCU Should be in C ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski Jens Maurer ")) >(), wxS(" Why RCU Should be in C ") >, Rev< 3u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski Jens Maurer ")) >(), wxS(" Why RCU Should be in C ") >, Rev< 4u, Arr64< Hash(wxS(" Paul E McKenney Michael Wong Maged M Michael Geoffrey Romer Andrew Hunter Arthur ODwyer Daisy Hollman JF Bastien Hans Boehm David Goldblatt Frank Birbacher Erik Rigtorp Tomasz Kamiski Jens Maurer ")) >(), wxS(" ReadCopy Update RCU ") > >() },
    { "p2546r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") >, Rev< 4u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") >, Rev< 5u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Debugging Support ") > >() },
    { "p2547r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Corentin Jabot Gaper Aman ")) >(), wxS(" Language support for customisable functions ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker Corentin Jabot Gaper Aman ")) >(), wxS(" Language support for customisable functions ") > >() },
    { "p2548r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 4u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 5u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") >, Rev< 6u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" copyablefunction ") > >() },
    { "p2549r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" stdunexpected should have error as member accessor ") >, Rev< 1u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" stdunexpected should have error as member accessor ") > >() },
    { "p2550r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" rangescopy should say outputiterator somewhere ") > >() },
    { "p2551r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz Jonathan Wakely ")) >(), wxS(" Clarify intent of P numeric traits ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz Jonathan Wakely ")) >(), wxS(" Clarify intent of P numeric traits ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz Jonathan Wakely ")) >(), wxS(" Clarify intent of P numeric traits ") > >() },
    { "p2552r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" On the ignorability of standard attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" On the ignorability of standard attributes ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" On the ignorability of standard attributes ") >, Rev< 3u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" On the ignorability of standard attributes ") > >() },
    { "p2553r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen Dan Sunderland ")) >(), wxS(" Make mdspan sizetype controllable ") >, Rev< 1u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen Dan Sunderland ")) >(), wxS(" Make mdspan sizetype controllable ") > >() },
    { "p2554r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen K R Walker Dan Sunderland ")) >(), wxS(" CArray Interoperability of MDSpan ") > >() },
    { "p2555r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Naming improvements for stdexecution ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Naming improvements for stdexecution ") > >() },
    { "p2557r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2558r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Add   and  to the basic character set ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Add   and  to the basic character set ") >, Rev< 2u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Add   and  to the basic character set ") > >() },
    { "p2559r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Plan for Concurrency Technical Specification Version  ") >, Rev< 1u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" Plan for Concurrency Technical Specification Version  ") > >() },
    { "p2560r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mat Chochlk ")) >(), wxS(" Comparing value and typebased reflection ") > >() },
    { "p2561r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" operator ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" An error propagation operator ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" A control flow operator ") > >() },
    { "p2562r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" constexpr Stable Sorting ") >, Rev< 1u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" constexpr Stable Sorting ") > >() },
    { "p2564r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" consteval needs to propagate up ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" consteval needs to propagate up ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" consteval needs to propagate up ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" consteval needs to propagate up ") > >() },
    { "p2565r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bret Brown ")) >(), wxS(" Supporting UserDefined Attributes ") > >() },
    { "p2568r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos  ")) >(), wxS(" Proposal of stdmapatptr ") > >() },
    { "p2569r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Fred Tydeman ")) >(), wxS(" HASSUBNORM implies what ") > >() },
    { "p2570r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" On side effects in contract annotations ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract predicates that are not predicates ") >, Rev< 2u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract predicates that are not predicates ") > >() },
    { "p2572r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" stdformat fill character allowances ") >, Rev< 1u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" stdformat fill character allowances ") > >() },
    { "p2573r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS("  deleteshould have a reason ") >, Rev< 1u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS("  deleteshould have a reason ") >, Rev< 2u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS("  deleteshould have a reason ") > >() },
    { "p2574r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2575r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p2576r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Gustedt Alex Gilding ")) >(), wxS(" The constexpr specifier for object definitions ") > >() },
    { "p2577r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" C Modules Discovery in Prebuilt Library Releases ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" C Modules Discovery in Prebuilt Library Releases ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" C Modules Discovery in Prebuilt Library Releases ") > >() },
    { "p2579r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Mitigation strategies for P Changing scope for lambda trailingreturntype ") > >() },
    { "p2580r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paolo Di Giglio ")) >(), wxS(" Tuple protocol for Cstyle arrays TN ") > >() },
    { "p2581r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Specifying the Interoperability of Binary Module Interface Files ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Specifying the Interoperability of Built Module Interface Files ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Specifying the Interoperability of Built Module Interface Files ") > >() },
    { "p2582r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Wording for class template argument deduction from inherited constructors ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Wording for class template argument deduction from inherited constructors ") > >() },
    { "p2584r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" A More Composable fromchars ") > >() },
    { "p2585r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Improving default container formatting ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Improving default container formatting ") > >() },
    { "p2586r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" Standard Secure Networking ") > >() },
    { "p2587r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" tostring or not tostring ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" tostring or not tostring ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" tostring or not tostring ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" tostring or not tostring ") > >() },
    { "p2588r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Eric A Niebler Anthony Williams Thomas Rodgers ")) >(), wxS(" Relax stdbarrier phase completion step guarantees ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Eric A Niebler Anthony Williams Thomas Rodgers ")) >(), wxS(" Relax stdbarrier phase completion step guarantees ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Eric A Niebler Anthony Williams Thomas Rodgers ")) >(), wxS(" Relax stdbarrier phase completion step guarantees ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Eric A Niebler Anthony Williams Thomas Rodgers ")) >(), wxS(" Relax stdbarrier phase completion step guarantees ") > >() },
    { "p2589r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" static operator ") >, Rev< 1u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" static operator ") > >() },
    { "p2590r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Richard Smith ")) >(), wxS(" Explicit lifetime management ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Richard Smith ")) >(), wxS(" Explicit lifetime management ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Richard Smith ")) >(), wxS(" Explicit lifetime management ") > >() },
    { "p2591r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") >, Rev< 3u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") >, Rev< 4u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") >, Rev< 5u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Concatenation of strings and string views ") > >() },
    { "p2592r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Hashing support for stdchrono value classes ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Hashing support for stdchrono value classes ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Hashing support for stdchrono value classes ") >, Rev< 3u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Hashing support for stdchrono value classes ") > >() },
    { "p2593r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Allowing staticassertfalse ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Allowing staticassertfalse ") > >() },
    { "p2594r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Slides Allow programmer to control and detect coroutine elision a hrefprhtmlPRa Presentation ") >, Rev< 1u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Slides Allow programmer to control coroutine elision a hrefprhtmlPRa Presentation ") > >() },
    { "p2596r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Improve stdhivereshape ") > >() },
    { "p2598r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Changing scope for lambda trailingreturntype P should not be a DR ") > >() },
    { "p2599r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" mdspansizetype should be indextype ") >, Rev< 1u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" mdspansizetype should be indextype ") >, Rev< 2u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" index type amp sizetype in mdspan ") > >() },
    { "p2600r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" A minimal ADL restriction to avoid illformed template instantiation ") > >() },
    { "p2601r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" To make redundant empty angle brackets optional for class template argument lists ") >, Rev< 1u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Make redundant empty angle brackets optional ") > >() },
    { "p2602r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Poison Pills are Too Toxic ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Poison Pills are Too Toxic ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Poison Pills are Too Toxic ") > >() },
    { "p2603r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad Waterloo ")) >(), wxS(" member function pointer to function pointer ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad Waterloo ")) >(), wxS(" member function pointer to function pointer ") > >() },
    { "p2604r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott ")) >(), wxS(" MDSPAN rename pointer and contiguous ") > >() },
    { "p2605r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2607r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Let alignas specify minimum alignment ") > >() },
    { "p2608r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Allow multiple initstatements ") > >() },
    { "p2609r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Eivind Helset ")) >(), wxS(" Relaxing Ranges Just A Smidge ") >, Rev< 1u, Arr64< Hash(wxS(" John Eivind Helset ")) >(), wxS(" Relaxing Ranges Just A Smidge ") >, Rev< 2u, Arr64< Hash(wxS(" John Eivind Helset ")) >(), wxS(" Relaxing Ranges Just A Smidge ") >, Rev< 3u, Arr64< Hash(wxS(" John Eivind Helset ")) >(), wxS(" Relaxing Ranges Just A Smidge ") > >() },
    { "p2610r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2611r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p2613r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yihe Le ")) >(), wxS(" Add the missing empty to mdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Yihe Le ")) >(), wxS(" Add the missing empty to mdspan ") > >() },
    { "p2614r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Deprecate numericlimitshasdenorm ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Deprecate numericlimitshasdenorm ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Deprecate numericlimitshasdenorm ") > >() },
    { "p2615r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Meaningful exports ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Meaningful exports ") > >() },
    { "p2616r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Making stdatomic notificationwait operations usable in more situations ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Making stdatomic notificationwait operations usable in more situations ") >, Rev< 2u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Making stdatomic notificationwait operations usable in more situations ") >, Rev< 3u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Making stdatomic notificationwait operations usable in more situations ") >, Rev< 4u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Making stdatomic notificationwait operations usable in more situations ") > >() },
    { "p2617r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Responses to NB comments on DTS  Extensions to C for Transactional Memory Version  ") > >() },
    { "p2618r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Issues to be moved in Virtual Plenary Jul  ") > >() },
    { "p2620r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Lifting artificial restriction on universal character names ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Lifting artificial restriction on universal character names ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Improve the wording for Universal Character Names in identifiers ") > >() },
    { "p2621r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" UB In my Lexer ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" UB In my Lexer ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" UB In my Lexer ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" UB In my Lexer ") > >() },
    { "p2622r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the July  meeting ") > >() },
    { "p2623r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" implicit constant initialization ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" implicit constant initialization ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" implicit constant initialization ") > >() },
    { "p2624r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Make operations on bools more portable ") > >() },
    { "p2625r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Life without operator a hrefprhtmlPRa presentation ") > >() },
    { "p2626r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" charNt incremental adoption Casting pointers of UTF character types ") > >() },
    { "p2627r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Virtual Meeting Record of Discussion ") > >() },
    { "p2628r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Extend barrier APIs with memoryorder ") > >() },
    { "p2629r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" barrier tokenless split arrivewait ") > >() },
    { "p2630r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Submdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Submdspan ") >, Rev< 2u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Nevin Liber ")) >(), wxS(" Submdspan ") >, Rev< 3u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Nevin Liber ")) >(), wxS(" Submdspan ") >, Rev< 4u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Nevin Liber ")) >(), wxS(" Submdspan ") > >() },
    { "p2631r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Bryce Adelstein Lelbach Jonathan Wakely ")) >(), wxS(" Publish TS Library Fundamentals v Now ") > >() },
    { "p2632r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Pablo Halpern John Lakos Alisdair Meredith Joshua Berne Gaper Aman ")) >(), wxS(" A plan for better template meta programming facilities in C ") > >() },
    { "p2633r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" threadlocalinherit Enhancing threadlocal storage ") > >() },
    { "p2634r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Allow qualifiers in constructor declarations ") > >() },
    { "p2635r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Justin Cooke ")) >(), wxS(" Enhancing the break statement ") > >() },
    { "p2636r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" References to ranges should always be viewable ") >, Rev< 1u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" References to ranges should always be viewable ") >, Rev< 2u, Arr64< Hash(wxS(" Hannes Hauswedell ")) >(), wxS(" References to ranges should always be viewable ") > >() },
    { "p2637r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Member visit and apply ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Member visit ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Member visit ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Member visit ") > >() },
    { "p2638r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Intels response to a hrefprpdfPRa for stdsimd parallelism in TS  ") > >() },
    { "p2639r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Torben Thaysen ")) >(), wxS(" Static Allocations ") > >() },
    { "p2640r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Innerscope Namespace Entities Exported or Not ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Innerscope Namespace Entities Exported or Not ") >, Rev< 2u, Arr64< Hash(wxS(" Nathan Sidwell ")) >(), wxS(" Modules Innerscope Namespace Entities Exported or Not ") > >() },
    { "p2641r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Checking if a union alternative is active ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Checking if a union alternative is active ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Checking if a union alternative is active ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Checking if a union alternative is active ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Checking if a union alternative is active ") > >() },
    { "p2642r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Christian TrottDamien LebrunGrandieMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen Christian TrottDamien LebrunGrandieMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen Christian TrottDamien LebrunGrandieMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 3u, Arr64< Hash(wxS(" Mark Hoemmen Christian TrottDamien LebrunGrandieNicolas MoralesMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 4u, Arr64< Hash(wxS(" Christian Trott Mark HoemmenDamien LebrunGrandieNicolas MoralesMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 5u, Arr64< Hash(wxS(" Christian Trott Mark HoemmenDamien LebrunGrandieNicolas MoralesMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") >, Rev< 6u, Arr64< Hash(wxS(" Christian Trott Mark HoemmenDamien LebrunGrandieNicolas MoralesMalte FrsterJiaming Yuan ")) >(), wxS(" Padded mdspan layouts ") > >() },
    { "p2643r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Olivier Giroux Thomas Rodgers ")) >(), wxS(" Improving C concurrency features ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Olivier Giroux Thomas Rodgers ")) >(), wxS(" Improving C concurrency features ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Olivier Giroux Thomas Rodgers ")) >(), wxS(" Improving C concurrency features ") > >() },
    { "p2644r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Get Fix of Broken Rangebased for Loop Finally Done ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolai Josuttis Herb Sutter Titus Winter Hana Duskov Fabio Fracassi Victor Zverovich Bryce Adelstein Lelbach Peter Sommerlad ")) >(), wxS(" Final Fix of Broken Range based for Loop Rev  ") > >() },
    { "p2645r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" pathview a design that took a wrong turn ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" pathview a design that took a wrong turn ") > >() },
    { "p2646r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Parsa Amini Joshua Berne John Lakos ")) >(), wxS(" Explicit Assumption Syntax Can Reduce Run Time ") > >() },
    { "p2647r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Permitting static constexpr variables in constexpr functions ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Jonathan Wakely ")) >(), wxS(" Permitting static constexpr variables in constexpr functions ") > >() },
    { "p2648r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2649r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p2650r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2652r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Disallow user specialization of allocatortraits ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Disallow user specialization of allocatortraits ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Disallow user specialization of allocatortraits ") > >() },
    { "p2653r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Update Annex E based on Unicode  UAX  ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Update Annex E based on Unicode  UAX  ") > >() },
    { "p2654r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Modules and Macros ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Modules and Macros ") > >() },
    { "p2655r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" commonreferencet of referencewrapper Should Be a Reference Type ") >, Rev< 1u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz ")) >(), wxS(" commonreferencet of referencewrapper Should Be a Reference Type ") >, Rev< 2u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz Tim Song ")) >(), wxS(" commonreferencet of referencewrapper Should Be a Reference Type ") >, Rev< 3u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz Tim Song ")) >(), wxS(" commonreferencet of referencewrapper Should Be a Reference Type ") > >() },
    { "p2656r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" C Ecosystem International Standard ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" C Ecosystem International Standard ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" C Ecosystem International Standard ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" C Ecosystem International Standard ") >, Rev< 4u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN C Ecosystem International Standard ") > >() },
    { "p2657r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" C is the next C ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" C is the next C ") > >() },
    { "p2658r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" temporary storage class specifiers ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" temporary storage class specifiers ") > >() },
    { "p2659r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" A Proposal to Publish a Technical Specification for Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi Alisdair Meredith ")) >(), wxS(" A Proposal to Publish a Technical Specification for Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Brian Bi Alisdair Meredith ")) >(), wxS(" A Proposal to Publish a Technical Specification for Contracts ") > >() },
    { "p2660r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Proposed Contracts TS ") > >() },
    { "p2661r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Miscellaneous amendments to the Contracts TS ") > >() },
    { "p2662r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Pablo Halpern John Lakos Alisdair Meredith Joshua Berne ")) >(), wxS(" Pack Indexing ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Pablo Halpern ")) >(), wxS(" Pack Indexing ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Pablo Halpern ")) >(), wxS(" Pack Indexing ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Pablo Halpern ")) >(), wxS(" Pack Indexing ") > >() },
    { "p2663r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 4u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 5u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 6u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") >, Rev< 7u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to support interleaved complex values in stdsimd ") > >() },
    { "p2664r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 10u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 4u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 5u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 6u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 7u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 8u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") >, Rev< 9u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with permutation API ") > >() },
    { "p2665r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Allow calling overload sets containing T constTamp ") > >() },
    { "p2666r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Last use optimization ") > >() },
    { "p2667r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Support for static and SBO vectors by allocators ") > >() },
    { "p2668r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Role based parameter passing ") > >() },
    { "p2669r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Deprecate changing kind of names in class template specializations ") > >() },
    { "p2670r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Nontransient constexpr allocation ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Nontransient constexpr allocation ") > >() },
    { "p2671r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Syntax choices for generalized pack declaration and usage ") > >() },
    { "p2672r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Exploring the Design Space for a Pipeline Operator ") > >() },
    { "p2673r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Luis Caro Campos ")) >(), wxS(" Common Description Format for C Libraries and Packages ") > >() },
    { "p2674r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Vittorio Romeo ")) >(), wxS(" A trait for implicit lifetime types ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Vittorio Romeo ")) >(), wxS(" A trait for implicit lifetime types ") > >() },
    { "p2675r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" LWG The Paper formats width estimation is too approximate and not forward compatible ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" LWG The Paper formats width estimation is too approximate and not forward compatible ") > >() },
    { "p2676r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dave Abrahams Sean Parent Dimitri Racordon David Sankel ")) >(), wxS(" The Val Object Model ") > >() },
    { "p2677r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Reconsidering concepts inplace syntax ") >, Rev< 2u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Reconsidering concepts inplace syntax ") > >() },
    { "p2678r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2679r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Arthur ODwyer Richard Smith ")) >(), wxS(" Fixing stdstartlifetimeas for arrays ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Arthur ODwyer Richard Smith Alisdair Meredith Robert Leahy ")) >(), wxS(" Fixing stdstartlifetimeas and stdstartlifetimeasarray ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Arthur ODwyer Richard Smith Alisdair Meredith Robert Leahy ")) >(), wxS(" Fixing stdstartlifetimeas and stdstartlifetimeasarray ") > >() },
    { "p2680r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Contracts for C Prioritizing Safety ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Contracts for C Prioritizing Safety ") > >() },
    { "p2681r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Richard Dosselmann Michael Wong ")) >(), wxS(" More Stats Functions ") >, Rev< 1u, Arr64< Hash(wxS(" Richard Dosselmann ")) >(), wxS(" More Basic Statistics ") > >() },
    { "p2682r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Transactional Memory TS Editors Report ") > >() },
    { "p2683r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes  ") > >() },
    { "p2684r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning Virtual Meeting Minutes  ") > >() },
    { "p2685r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Joshua Berne ")) >(), wxS(" Language Support For Scoped Allocators ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Joshua Berne ")) >(), wxS(" Language Support For Scoped Objects ") > >() },
    { "p2686r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Updated wording and implementation experience for P constexpr structured bindings ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Brian Bi ")) >(), wxS(" constexpr structured bindings and references to constexpr variables ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Brian Bi ")) >(), wxS(" constexpr structured bindings and references to constexpr variables ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Brian Bi ")) >(), wxS(" constexpr structured bindings and references to constexpr variables ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Brian Bi ")) >(), wxS(" constexpr structured bindings and references to constexpr variables ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Brian Bi ")) >(), wxS(" constexpr structured bindings and references to constexpr variables ") > >() },
    { "p2687r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Design Alternatives for TypeandResource Safe C ") > >() },
    { "p2688r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching Discussion for Kona  ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching match Expression ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching match Expression ") >, Rev< 3u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching match Expression ") >, Rev< 4u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching match Expression ") >, Rev< 5u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Pattern Matching match Expression ") > >() },
    { "p2689r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Dan Sunderland ")) >(), wxS(" atomicaccessor ") >, Rev< 1u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Dan Sunderland Nevin Liber ")) >(), wxS(" atomicaccessor ") >, Rev< 2u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Dan Sunderland Nevin Liber ")) >(), wxS(" atomicaccessor ") >, Rev< 3u, Arr64< Hash(wxS(" Christian Trott Mark Hoemmen Damien LebrunGrandie Dan Sunderland Nevin Liber ")) >(), wxS(" Atomic Refs Bound to Memory Orderings amp Atomic Accessors ") > >() },
    { "p2690r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan ")) >(), wxS(" Presentation for C parallel algorithms and P ") > >() },
    { "p2691r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter Gabriel Dos Reis Michael Spencer ")) >(), wxS(" Allow referencing inline functions with internal linkage from outside their defining header unit ") > >() },
    { "p2692r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Generic Programming is just Programming ") > >() },
    { "p2693r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Victor Zverovich ")) >(), wxS(" Formatting threadid and stacktrace ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Victor Zverovich ")) >(), wxS(" Formatting threadid and stacktrace ") > >() },
    { "p2695r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler John Spicer ")) >(), wxS(" A proposed plan for contracts in C ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler John Spicer ")) >(), wxS(" A proposed plan for contracts in C ") > >() },
    { "p2696r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" Introduce CppSwappable as additional convenience requirements ") > >() },
    { "p2697r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" Interfacing bitset with stringview ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" Interfacing bitset with stringview ") > >() },
    { "p2698r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Unconditional termination is a serious problem ") > >() },
    { "p2700r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Andrzej Krzemieski John Lakos Joshua Berne Brian Bi Peter Brett Oliver Rosten Herb Sutter ")) >(), wxS(" Questions on P Contracts for C Prioritizing Safety ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Andrzej Krzemieski John Lakos Joshua Berne Brian Bi Peter Brett Oliver Rosten Herb Sutter ")) >(), wxS(" Questions on P Contracts for C Prioritizing Safety ") > >() },
    { "p2701r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Translating Linker Input Files to Module Metadata Files ") > >() },
    { "p2702r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Specifying Importable Headers ") > >() },
    { "p2703r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Kona Nov  ") > >() },
    { "p2704r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Immediate Issues to be moved in Kona Nov  ") > >() },
    { "p2705r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Library Fundamentals TS Issues to be moved in Kona Nov  ") > >() },
    { "p2706r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jason Merrill ")) >(), wxS(" Drafting for US  Redundant specification for defaulted functions ") > >() },
    { "p2708r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" No Future Fundamentals TSes ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Bryce Adelstein Lelbach Nevin Liber Fabio Fracassi Ben Craig ")) >(), wxS(" No Future Fundamentals TSes ") > >() },
    { "p2709r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the November  meeting ") > >() },
    { "p2710r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group NB comment resolutions for the November  meeting ") > >() },
    { "p2711r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Making multiparam and other converting constructors of views explicit ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Making multiparam constructors of views explicit ") > >() },
    { "p2712r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Classification of ContractChecking Predicates ") > >() },
    { "p2713r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Escaping improvements in stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Escaping improvements in stdformat ") > >() },
    { "p2714r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan Tomasz Kamiski ")) >(), wxS(" Bind front and back to NTTP callables ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan Tomasz Kamiski ")) >(), wxS(" Bind front and back to NTTP callables ") > >() },
    { "p2717r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 4u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 5u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Tool Introspection ") >, Rev< 6u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN Tool Introspection ") > >() },
    { "p2718r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Nicolai Josuttis ")) >(), wxS(" Wording for a hrefprpdfPRa Fix for Rangebased for Loop ") > >() },
    { "p2719r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") >, Rev< 3u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") >, Rev< 4u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") >, Rev< 5u, Arr64< Hash(wxS(" Louis Dionne Oliver Hunt ")) >(), wxS(" Typeaware allocation and deallocation functions ") > >() },
    { "p2721r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" Deprecating function ") > >() },
    { "p2722r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Beyond operator a hrefprhtmlPRa presentation ") > >() },
    { "p2723r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Zeroinitialize objects of automatic storage duration ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Zeroinitialize objects of automatic storage duration ") > >() },
    { "p2724r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" constant dangling ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" constant dangling ") > >() },
    { "p2725r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stdintegralconstant Literals ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stdintegralconstant Literals ") > >() },
    { "p2726r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Better stdtuple Indexing ") > >() },
    { "p2727r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stditeratorinterface ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stditeratorinterface ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stditeratorinterface ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stditeratorinterface ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" stditeratorinterface ") > >() },
    { "p2728r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 5u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 6u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") >, Rev< 7u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  UTF Transcoding ") > >() },
    { "p2729r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Unicode in the Library Part  Normalization ") > >() },
    { "p2730r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" variable scope ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" variable scope ") > >() },
    { "p2732r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG November  Kona meeting Record of Discussion ") > >() },
    { "p2733r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix handling of empty specifiers in stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix handling of empty specifiers in stdformat ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix handling of empty specifiers in stdformat ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix handling of empty specifiers in stdformat ") > >() },
    { "p2734r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marc Mutz ")) >(), wxS(" Adding the new  SI prefixes ") > >() },
    { "p2735r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aaron Ballman ")) >(), wxS(" C xor C Programming ") > >() },
    { "p2736r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Referencing the Unicode Standard ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Referencing the Unicode Standard ") > >() },
    { "p2737r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of Conditioncentric Contracts Syntax ") > >() },
    { "p2738r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot David Ledger ")) >(), wxS(" constexpr cast from void towards constexpr typeerasure ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot David Ledger ")) >(), wxS(" constexpr cast from void towards constexpr typeerasure ") > >() },
    { "p2739r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" A call to action Think seriously about safety then do something sensible about it ") > >() },
    { "p2740r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Simpler implicit dangling resolution ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Simpler implicit dangling resolution ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Simpler implicit dangling resolution ") > >() },
    { "p2741r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" usergenerated staticassert messages ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" usergenerated staticassert messages ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" usergenerated staticassert messages ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" usergenerated staticassert messages ") > >() },
    { "p2742r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" indirect dangling identification ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" indirect dangling identification ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" indirect dangling identification ") > >() },
    { "p2743r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Contracts for C Prioritizing Safety  Presentation slides of a hrefprpdfPRa ") > >() },
    { "p2746r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 3u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 4u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 5u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 6u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") >, Rev< 7u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Deprecate and Replace Fenv Rounding Modes ") > >() },
    { "p2747r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Limited support for constexpr void ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr placement new ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr placement new ") > >() },
    { "p2748r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned glvalue to a Temporary ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned Glvalue to a Temporary ") >, Rev< 2u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned Glvalue to a Temporary ") >, Rev< 3u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned Glvalue to a Temporary ") >, Rev< 4u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned Glvalue to a Temporary ") >, Rev< 5u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Disallow Binding a Returned Glvalue to a Temporary ") > >() },
    { "p2749r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Down with character ") > >() },
    { "p2750r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" C Dangling Reduction ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" C Dangling Reduction ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" C Dangling Reduction ") > >() },
    { "p2751r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Evaluation of Checked Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Evaluation of Checked Contracts ") > >() },
    { "p2752r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Static storage for braced initializers ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Static storage for braced initializers ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Static storage for braced initializers ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Static storage for braced initializers ") > >() },
    { "p2754r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jake Fevold ")) >(), wxS(" Deconstructing Avoiding Uninitialized Reads of Auto Variables ") > >() },
    { "p2755r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Jake Fevold John Lakos ")) >(), wxS(" A Bold Plan for a Complete Contracts Facility ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne Jake Fevold John Lakos ")) >(), wxS(" A Bold Plan for a Complete Contracts Facility ") > >() },
    { "p2756r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of Simple Contract Side Effect Semantics ") > >() },
    { "p2757r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Type checking format args ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Type checking format args ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Type checking format args ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Type checking format args ") > >() },
    { "p2758r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Emitting messages at compile time ") > >() },
    { "p2759r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong H Hinnant R Orr B Stroustrup D Vandevoorde ")) >(), wxS(" DG Opinion on Safety for ISO C ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Wong H Hinnant R Orr B Stroustrup D Vandevoorde ")) >(), wxS(" DG Opinion on Safety for ISO C ") > >() },
    { "p2760r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" A Plan for C Ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" A Plan for C Ranges ") > >() },
    { "p2761r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides If structured binding a hrefprhtmlPRa presentation ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides If structured binding a hrefprhtmlPRa presentation ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Evaluating structured binding as a condition a hrefprhtmlPRa presentation ") >, Rev< 3u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Structured binding declaration as a condition a hrefprhtmlPRa presentation ") > >() },
    { "p2762r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dietmar Khl ")) >(), wxS(" SenderReceiver Interface For Networking ") >, Rev< 1u, Arr64< Hash(wxS(" Dietmar Kuhl ")) >(), wxS(" SenderReceiver Interface For Networking ") >, Rev< 2u, Arr64< Hash(wxS(" Dietmar Kuhl ")) >(), wxS(" SenderReceiver Interface For Networking ") > >() },
    { "p2763r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen Nevin Liber ")) >(), wxS(" layoutstride static extents default constructor fix ") >, Rev< 1u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen Nevin Liber ")) >(), wxS(" layoutstride static extents default constructor fix ") > >() },
    { "p2764r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes  ") > >() },
    { "p2765r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning Virtual Meeting Minutes  ") > >() },
    { "p2766r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2767r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" flatmapflatset omnibus ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" flatmapflatset omnibus ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" flatmapflatset omnibus ") > >() },
    { "p2769r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" getelement customization point object ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" getelement customization point object ") >, Rev< 2u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" getelement customization point object ") >, Rev< 3u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" getelement customization point object ") > >() },
    { "p2770r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Stashing stashing iterators for proper flattening ") > >() },
    { "p2771r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Neumann ")) >(), wxS(" Towards memory safety in C ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Neumann ")) >(), wxS(" Towards memory safety in C ") > >() },
    { "p2772r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdintegralconstant literals do not suffice  constexprt ") > >() },
    { "p2773r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Considerations for Unicode algorithms ") > >() },
    { "p2774r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" Scoped threadlocal storage ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" Concurrent object pool was Scoped threadlocal storage ") > >() },
    { "p2775r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2776r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach Fabio Fracassi Ben Craig ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p2779r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Make basicstringviews range construction conditionally explicit ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Make basicstringviews range construction conditionally explicit ") > >() },
    { "p2780r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Callerside precondition checking and Evalandthrow ") > >() },
    { "p2781r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz ")) >(), wxS(" stdconstexprv ") >, Rev< 2u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz ")) >(), wxS(" stdconstexprv ") >, Rev< 3u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz ")) >(), wxS(" stdconstexprv ") >, Rev< 4u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz ")) >(), wxS(" stdconstexprwrapper ") >, Rev< 5u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz Hana Dusikova ")) >(), wxS(" stdconstexprwrapper ") >, Rev< 6u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz Hana Dusikova ")) >(), wxS(" stdconstexprwrapper ") >, Rev< 7u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz Hana Dusikova ")) >(), wxS(" stdconstexprwrapper ") >, Rev< 8u, Arr64< Hash(wxS(" Zach Laine Matthias Kretz Hana Dusikova ")) >(), wxS(" stdconstexprwrapper ") > >() },
    { "p2782r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A proposal for a type trait to detect if value initialization can be achieved by zerofilling ") > >() },
    { "p2784r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Not halting the program after detected contract violation ") > >() },
    { "p2785r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sbastien Bini Ed Catmur ")) >(), wxS(" Relocating prvalues ") >, Rev< 1u, Arr64< Hash(wxS(" Sbastien Bini Ed Catmur ")) >(), wxS(" Relocating prvalues ") >, Rev< 2u, Arr64< Hash(wxS(" Sbastien Bini Ed Catmur ")) >(), wxS(" Relocating prvalues ") >, Rev< 3u, Arr64< Hash(wxS(" Sbastien Bini Ed Catmur ")) >(), wxS(" Relocating prvalues ") > >() },
    { "p2786r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial relocatability options ") >, Rev< 1u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial relocatability options ") >, Rev< 10u, Arr64< Hash(wxS(" Pablo Halpern Alisdair Meredith Joshua Berne Corentin Jabot Pablo Halpern Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 11u, Arr64< Hash(wxS(" Pablo Halpern Joshua Berne Corentin Jabot Pablo Halpern Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 12u, Arr64< Hash(wxS(" Pablo Halpern Joshua Berne Corentin Jabot Pablo Halpern Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 13u, Arr64< Hash(wxS(" Pablo Halpern Joshua Berne Corentin Jabot Pablo Halpern Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 2u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial relocatability options ") >, Rev< 3u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 4u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 5u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 6u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 7u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith Joshua Berne ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 8u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith Joshua Berne Corentin Jabot Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") >, Rev< 9u, Arr64< Hash(wxS(" Pablo Halpern Alisdair Meredith Joshua Berne Corentin Jabot Pablo Halpern Lori Hughes ")) >(), wxS(" Trivial Relocatability For C ") > >() },
    { "p2787r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" pmrgenerator  Promise Types are not Values ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" pmrgenerator  Promise Types are not Values ") > >() },
    { "p2788r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Linkage for modular constants ") > >() },
    { "p2789r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Issaquah Feb  ") > >() },
    { "p2790r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Immediate Issues to be moved in Issaquah Feb  ") > >() },
    { "p2791r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" mandate concepts for new features ") > >() },
    { "p2795r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Correct and incorrect code and ampquoterroneous behaviourampquot ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Erroneous behaviour for uninitialized reads ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Erroneous behaviour for uninitialized reads ") >, Rev< 3u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Erroneous behaviour for uninitialized reads ") >, Rev< 4u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Erroneous behaviour for uninitialized reads ") >, Rev< 5u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Erroneous behaviour for uninitialized reads ") > >() },
    { "p2796r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the February  meeting ") > >() },
    { "p2797r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Proposed resolution for CWG Static and explicit object member functions with the same par ") > >() },
    { "p2798r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christian Trott Damien LebrunGrandie Mark Hoemmen ")) >(), wxS(" Fix layout mappings all static extent default constructor ") > >() },
    { "p2799r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Closed ranges may be a problem breaking countediterator is not the solution ") > >() },
    { "p2800r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Boeckel ")) >(), wxS(" Dependency flag soup needs some fiber ") > >() },
    { "p2802r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Presentation of a hrefprpdfPRa to LEWG at Issaquah  ") > >() },
    { "p2803r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd Intro slides ") > >() },
    { "p2805r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nat Goodspeed ")) >(), wxS(" fibercontext fibers without scheduler  LEWG slides ") > >() },
    { "p2806r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Bruno Cardoso Lopez Zach Laine Michael Park ")) >(), wxS(" do expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Bruno Cardoso Lopez Zach Laine Michael Park ")) >(), wxS(" do expressions ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Bruno Cardoso Lopez Zach Laine Michael Park ")) >(), wxS(" do expressions ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Bruno Cardoso Lopez Zach Laine Michael Park ")) >(), wxS(" do expressions ") > >() },
    { "p2807r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Issaquah Slides for Intel response to stdsimd ") > >() },
    { "p2808r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring Michael Spencer ")) >(), wxS(" Internal linkage in the global module ") > >() },
    { "p2809r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Trivial infinite loops are not Undefined Behavior ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Trivial infinite loops are not Undefined Behavior ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Trivial infinite loops are not Undefined Behavior ") >, Rev< 3u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" Trivial infinite loops are not Undefined Behavior ") > >() },
    { "p2810r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" isdebuggerpresent isreplaceable ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" isdebuggerpresent isreplaceable ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" isdebuggerpresent isreplaceable ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" isdebuggerpresent isreplaceable ") >, Rev< 4u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Ben Craig ")) >(), wxS(" isdebuggerpresent isreplaceable ") > >() },
    { "p2811r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contract Violation Handlers ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contract Violation Handlers ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contract Violation Handlers ") >, Rev< 3u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contract Violation Handlers ") >, Rev< 4u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contract Violation Handlers ") >, Rev< 5u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" ContractViolation Handlers ") >, Rev< 6u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" ContractViolation Handlers ") >, Rev< 7u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" ContractViolation Handlers ") > >() },
    { "p2812r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Christian TrottDamien LebrunGrandieNevin Liber ")) >(), wxS(" a hrefprhtmlPRa LEWG presentation ") > >() },
    { "p2814r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith Arthur ODwyer ")) >(), wxS(" Trivial Relocatability  Comparing P with P ") >, Rev< 1u, Arr64< Hash(wxS(" Mungo Gill Alisdair Meredith Arthur ODwyer ")) >(), wxS(" Trivial Relocatability  Comparing P with P ") > >() },
    { "p2815r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" Slides for presentation on a hrefprhtmlPRa ") > >() },
    { "p2816r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Gabriel Dos Reis ")) >(), wxS(" Safety Profiles Typeandresource Safe programming in ISO Standard C ") > >() },
    { "p2817r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" The idea behind the contracts MVP ") > >() },
    { "p2818r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Uniform Call Syntax for explicitobject member functions ") > >() },
    { "p2819r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava Christoph Hofer ")) >(), wxS(" Add tuple protocol to complex ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava Christoph Hofer ")) >(), wxS(" Add tuple protocol to complex ") >, Rev< 2u, Arr64< Hash(wxS(" Michael Florian Hava Christoph Hofer ")) >(), wxS(" Add tuple protocol to complex ") > >() },
    { "p2821r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") >, Rev< 3u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") >, Rev< 4u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") >, Rev< 5u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" spanat ") > >() },
    { "p2822r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Providing user control of associated entities of class types ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Providing user control of associated entities of class types ") >, Rev< 2u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Providing user control of associated entities of class types ") > >() },
    { "p2824r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG February  Issaquah meeting Record of Discussion ") > >() },
    { "p2825r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" calltargetunevaluatedcallexpression ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Overload Resolution hook declcallunevaluatedpostfixexpression ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Overload Resolution hook declcallunevaluatedpostfixexpression ") >, Rev< 3u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Overload resolution hook declcall unevaluatedcallexpression  ") >, Rev< 4u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Overload resolution hook declcall unevaluatedcallexpression  ") >, Rev< 5u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Overload resolution hook declcall unevaluatedcallexpression  ") > >() },
    { "p2826r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Replacement functions ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Replacement functions ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Replacement functions ") > >() },
    { "p2827r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Floatingpoint overflow and underflow in fromchars LWG  ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Floatingpoint overflow and underflow in fromchars LWG  ") > >() },
    { "p2828r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Copy elision for directinitialization with a conversion function Core issue  ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Copy elision for directinitialization with a conversion function Core issue  ") >, Rev< 2u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Copy elision for directinitialization with a conversion function Core issue  ") > >() },
    { "p2829r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of Contracts Supporting ConstOnDefinition Style ") > >() },
    { "p2830r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" constexpr type comparison ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" constexpr type comparison ") >, Rev< 10u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 2u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 3u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 4u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 5u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 6u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 7u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 8u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") >, Rev< 9u, Arr64< Hash(wxS(" Gaper Aman Nathan Nichols ")) >(), wxS(" Standardized Constexpr Type Ordering ") > >() },
    { "p2831r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Ed Catmur ")) >(), wxS(" Functions having a narrow contract should not be noexcept ") > >() },
    { "p2833r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library inout expected span ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library inout expected span ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library inout expected span ") > >() },
    { "p2834r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Semantic Stability Across ContractChecking Build Modes ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Semantic Stability Across ContractChecking Build Modes ") > >() },
    { "p2835r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 4u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 5u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Mark Hoemmen Carter H Edwards Bryce Adelstein Lelbach ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 6u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Mark Hoemmen Carter H Edwards Bryce Adelstein Lelbach ")) >(), wxS(" Expose stdatomicrefs object address ") >, Rev< 7u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Mark Hoemmen Carter H Edwards Bryce Adelstein Lelbach ")) >(), wxS(" Expose stdatomicrefs object address ") > >() },
    { "p2836r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdconstiterator often produces an unexpected type ") >, Rev< 1u, Arr64< Hash(wxS(" Christopher Di Bella ")) >(), wxS(" stdbasicconstiterator should follow its underlying types convertibility ") > >() },
    { "p2837r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Harry Bott ")) >(), wxS(" Planning to Revisit the Lakos Rule ") > >() },
    { "p2838r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Unconditional contract violation handling of any kind is a serious problem ") > >() },
    { "p2839r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi Joshua Berne ")) >(), wxS(" Nontrivial relocation via a new owning reference type ") > >() },
    { "p2841r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" Concept Template Parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" Concept Template Parameters ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" Concept and variabletemplate templateparameters ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman James Touton ")) >(), wxS(" Concept and variabletemplate templateparameters ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman James Touton ")) >(), wxS(" Concept and variabletemplate templateparameters ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman James Touton ")) >(), wxS(" Concept and variabletemplate templateparameters ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman James Touton Hubert Tong ")) >(), wxS(" Concept and variabletemplate templateparameters ") >, Rev< 7u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman James Touton Hubert Tong ")) >(), wxS(" Concept and variabletemplate templateparameters ") > >() },
    { "p2842r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Harry Bott ")) >(), wxS(" Destructor Semantics Do Not Affect Constructible Traits ") > >() },
    { "p2843r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Preprocessing is never undefined ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Preprocessing is never undefined ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Preprocessing is never undefined ") > >() },
    { "p2845r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 5u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 6u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 7u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") >, Rev< 8u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stdfilesystempath ") > >() },
    { "p2846r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" sizehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" sizehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" reservehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" reservehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 4u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" reservehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 5u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" reservehint Eagerly reserving memory for notquitesized lazy ranges ") >, Rev< 6u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" reservehint Eagerly reserving memory for notquitesized lazy ranges ") > >() },
    { "p2848r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Enrico Mauro ")) >(), wxS(" stdisuniqued ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Enrico Mauro ")) >(), wxS(" stdisuniqued ") > >() },
    { "p2849r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Kirk Shoop ")) >(), wxS(" asyncobject  aka asyncRAII objects ") > >() },
    { "p2850r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Batty Simon Cooksey ")) >(), wxS(" Minimal Compiler Preserved Dependencies ") > >() },
    { "p2852r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Contract violation handling semantics for the contracts MVP ") > >() },
    { "p2853r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of stdcontractviolation ") > >() },
    { "p2855r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Member customization points for Senders and Receivers ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Member customization points for Senders and Receivers ") > >() },
    { "p2857r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" a hrefprhtmlPRa Critique ") > >() },
    { "p2858r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Noexcept vs contract violations ") > >() },
    { "p2861r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" The Lakos Rule Narrow Contracts And noexcept Are Inherently Incompatible ") > >() },
    { "p2862r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" textencodingname should never return null values ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Krgler ")) >(), wxS(" textencodingname should never return null values ") > >() },
    { "p2863r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 5u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 6u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 7u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 8u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") >, Rev< 9u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Review Annex D for C ") > >() },
    { "p2864r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Arithmetic Conversion on Enumerations From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Arithmetic Conversion on Enumerations From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Arithmetic Conversion on Enumerations From C ") > >() },
    { "p2865r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 5u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") >, Rev< 6u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Array Comparisons from C ") > >() },
    { "p2866r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") >, Rev< 5u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Volatile Features From C ") > >() },
    { "p2867r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated strstreams From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated strstreams From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated strstreams From C ") > >() },
    { "p2868r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated stdallocator Typedef From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated stdallocator Typedef From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated stdallocator Typedef From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated stdallocator Typedef From C ") > >() },
    { "p2869r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated sharedptr Atomic Access APIs From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated sharedptr Atomic Access APIs From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated sharedptr Atomic Access APIs From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated sharedptr Atomic Access APIs From C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated sharedptr Atomic Access APIs From C ") > >() },
    { "p2870r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove basicstringreserve From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove basicstringreserve From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove basicstringreserve From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove basicstringreserve From C ") > >() },
    { "p2871r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Unicode Conversion Facets From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Unicode Conversion Facets From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Unicode Conversion Facets From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Unicode Conversion Facets From C ") > >() },
    { "p2872r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove wstringconvert From C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove wstringconvert From C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove wstringconvert From C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove wstringconvert From C ") > >() },
    { "p2873r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated locale category facets for Unicode from C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Tom Honermann ")) >(), wxS(" Remove Deprecated locale category facets for Unicode from C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith Tom Honermann ")) >(), wxS(" Remove Deprecated locale category facets for Unicode from C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith Tom Honermann ")) >(), wxS(" Remove Deprecated locale category facets for Unicode from C ") > >() },
    { "p2874r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Mandating Annex D ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Mandating Annex D ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Mandating Annex D ") > >() },
    { "p2875r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Undeprecate polymorphicallocatordestroy For C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Undeprecate polymorphicallocatordestroy For C ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Undeprecate polymorphicallocatordestroy For C ") >, Rev< 3u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Undeprecate polymorphicallocatordestroy For C ") >, Rev< 4u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Undeprecate polymorphicallocatordestroy For C ") > >() },
    { "p2876r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz ")) >(), wxS(" Proposal to extend stdsimd with more constructors and accessors ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz ")) >(), wxS(" Proposal to extend stdsimd with more constructors and accessors ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz Ruslan Arutyunyan ")) >(), wxS(" Proposal to extend stdsimd with more constructors and accessors ") > >() },
    { "p2877r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Tom Honermann ")) >(), wxS(" Contract Build Modes and Semantics ") > >() },
    { "p2878r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 3u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 4u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 5u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") >, Rev< 6u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Reference checking ") > >() },
    { "p2879r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" Proposal of stddump ") > >() },
    { "p2880r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ilya Burylov Pavel Dyakov Ruslan Arutyunyan Andrey Nikolaev Alina Elizarova ")) >(), wxS(" Algorithmlike vs stdsimd based RNG API ") > >() },
    { "p2881r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller Barry Revzin ")) >(), wxS(" Generatorbased for loop ") > >() },
    { "p2882r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" An Event Model for C Executors ") > >() },
    { "p2883r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" offsetof Should Be A Keyword In C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" offsetof Should Be A Keyword In C ") > >() },
    { "p2884r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" assert Should Be A Keyword In C ") > >() },
    { "p2885r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman Andrzej Krzemieski Ville Voutilainen ")) >(), wxS(" Requirements for a Contracts syntax ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman Andrzej Krzemieski Ville Voutilainen Tom Honermann ")) >(), wxS(" Requirements for a Contracts syntax ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman Andrzej Krzemieski Ville Voutilainen Tom Honermann ")) >(), wxS(" Requirements for a Contracts syntax ") >, Rev< 3u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman Andrzej Krzemieski Ville Voutilainen Tom Honermann ")) >(), wxS(" Requirements for a Contracts syntax ") > >() },
    { "p2886r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Concurrency TS Editors report ") > >() },
    { "p2887r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes to  ") > >() },
    { "p2888r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning Virtual Meeting Minutes to  ") > >() },
    { "p2889r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Distributed Arrays ") > >() },
    { "p2890r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts on lambdas ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts on lambdas ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts on lambdas ") > >() },
    { "p2891r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2892r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Joe Jevnik ")) >(), wxS(" stdsimd Types Should be Regular ") > >() },
    { "p2893r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jody Hagins ")) >(), wxS(" Variadic Friends ") >, Rev< 1u, Arr64< Hash(wxS(" Jody Hagins ")) >(), wxS(" Variadic Friends ") >, Rev< 2u, Arr64< Hash(wxS(" Jody Hagins Arthur ODwyer ")) >(), wxS(" Variadic Friends ") >, Rev< 3u, Arr64< Hash(wxS(" Jody Hagins Arthur ODwyer ")) >(), wxS(" Variadic Friends ") > >() },
    { "p2894r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Constant evaluation of Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Constant evaluation of Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Constant evaluation of Contracts ") > >() },
    { "p2895r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sebastian Theophil Jonathan Mller ")) >(), wxS(" noncopyable and nonmoveable utility classes ") > >() },
    { "p2896r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Outstanding design questions for the Contracts MVP ") > >() },
    { "p2897r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 3u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 4u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 5u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 6u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") >, Rev< 7u, Arr64< Hash(wxS(" Mark Hoemmen Damien LebrunGrandie Nicolas Manual Morales Christian Trott ")) >(), wxS(" alignedaccessor An mdspan accessor expressing pointer overalignment ") > >() },
    { "p2898r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Importable Headers are Not Universally Implementable ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Build System Requirements for Importable Headers ") > >() },
    { "p2899r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Andrzej Krzemieski Rostislav Khlebnikov ")) >(), wxS(" Contracts for C  Rationale ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Andrzej Krzemieski Rostislav Khlebnikov ")) >(), wxS(" Contracts for C  Rationale ") > >() },
    { "p2900r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 10u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 11u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 12u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 13u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 14u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 3u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 4u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 5u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 6u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 7u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 8u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") >, Rev< 9u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Andrzej Krzemieski ")) >(), wxS(" Contracts for C ") > >() },
    { "p2901r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Kim Liegeois Christian Trott ")) >(), wxS(" Extending linear algebra support to batched operations ") > >() },
    { "p2902r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" constexpr Parallel Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" constexpr Parallel Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" constexpr Parallel Algorithms ") > >() },
    { "p2904r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Annop Rana ")) >(), wxS(" Removing exception in precedence rules when using member pointer syntax ") > >() },
    { "p2905r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings ") > >() },
    { "p2906r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bernhard Manfred Gruber ")) >(), wxS(" Structured bindings for stdextents ") > >() },
    { "p2909r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Dude wheres my char ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix formatting of code units as integers Dude wheres my char ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix formatting of code units as integers Dude wheres my char ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix formatting of code units as integers Dude wheres my char ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix formatting of code units as integers Dude wheres my char ") > >() },
    { "p2910r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Varna Jun  ") > >() },
    { "p2911r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Adam Lach Jagrut Dave ")) >(), wxS(" Python Bindings with ValueBased Reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Adam Lach Jagrut Dave ")) >(), wxS(" Python Bindings with ValueBased Reflection ") > >() },
    { "p2912r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Concurrent queues and senderreceivers ") > >() },
    { "p2915r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Proposed resolution to CWG ") > >() },
    { "p2917r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" An inline defaulted destructor should keep the copy and moveoperations ") >, Rev< 1u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" An inline defaulted destructor should keep the copy and moveoperations ") > >() },
    { "p2918r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings II ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings II ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Runtime format strings II ") > >() },
    { "p2920r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber Bryce Adelstein Lelbach Robert Leahy Ben Craig Fabio Fracassi Guy Davidson ")) >(), wxS(" Library Evolution Leaderships Understanding of the Noexcept Policy History ") > >() },
    { "p2921r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov Detlef Vollmann ")) >(), wxS(" Exploring stdexpected based API alternatives for bufferqueue ") > >() },
    { "p2922r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the June  meeting ") > >() },
    { "p2925r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Gonzalo Brito Gadeschi Timur Doumler Nevin Liber ")) >(), wxS(" inplacevector  DR LEWG presentation ") > >() },
    { "p2926r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Joe Jevnik ")) >(), wxS(" stdsimd types should be regular  a hrefprpdfPRa LEWG presentation ") > >() },
    { "p2927r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" Observing exceptions stored in exceptionptr ") >, Rev< 1u, Arr64< Hash(wxS(" Gor Nishanov Arthur ODwyer ")) >(), wxS(" Observing exceptions stored in exceptionptr ") >, Rev< 2u, Arr64< Hash(wxS(" Gor Nishanov Arthur ODwyer ")) >(), wxS(" Observing exceptions stored in exceptionptr ") >, Rev< 3u, Arr64< Hash(wxS(" Gor Nishanov Arthur ODwyer ")) >(), wxS(" Observing exceptions stored in exceptionptr ") > >() },
    { "p2929r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" simdinvoke ") > >() },
    { "p2930r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark de Wever ")) >(), wxS(" Formatter specializations for the standard library ") > >() },
    { "p2931r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG June  Varna Meeting Record of Discussion ") > >() },
    { "p2932r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" A Principled Approach to Open Design Questions for Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" A Principled Approach to Open Design Questions for Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" A Principled Approach to Open Design Questions for Contracts ") >, Rev< 3u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" A Principled Approach to Open Design Questions for Contracts ") > >() },
    { "p2933r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" stdsimd overloads for  ltbitgt header ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" stdsimd overloads for  ltbitgt header ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" stdsimd overloads for  ampltbitgt header ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Extend ltbitgt header function with overloads for stdsimd ") >, Rev< 4u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Extend ltbitgt header function with overloads for stdsimd ") > >() },
    { "p2935r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An AttributeLike Syntax for Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An AttributeLike Syntax for Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An AttributeLike Syntax for Contracts ") >, Rev< 3u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An AttributeLike Syntax for Contracts ") >, Rev< 4u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" An AttributeLike Syntax for Contracts ") > >() },
    { "p2937r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Remove strtok ") > >() },
    { "p2940r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" switch for Pattern Matching ") > >() },
    { "p2941r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mihail Naydenov ")) >(), wxS(" Identifiers for Pattern Matching ") > >() },
    { "p2944r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Comparisons for referencewrapper ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Comparisons for referencewrapper ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Comparisons for referencewrapper ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Comparisons for referencewrapper ") > >() },
    { "p2945r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Additional format specifiers for timepoint ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Additional format specifiers for timepoint ") > >() },
    { "p2946r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" A flexible solution to the problems of noexcept ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" A flexible solution to the problems of noexcept ") > >() },
    { "p2947r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Zissu Ran Regev Gal Zaban Inbal Levi ")) >(), wxS(" Contracts must avoid disclosing sensitive information ") > >() },
    { "p2949r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" Slides for a hrefprpdfPRa Narrow Contracts and noexcept are Inherently Incompatable ") > >() },
    { "p2950r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tomasz Kamiski ")) >(), wxS(" Slides for a hrefprhtmlPRa stdbasicconstiterator should follow its underlying types convertibility ") > >() },
    { "p2951r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Shadowing is good for safety ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Shadowing is good for safety ") >, Rev< 2u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Shadowing is good for safety ") >, Rev< 3u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Shadowing is good for safety ") > >() },
    { "p2952r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer Matthew Taylor ")) >(), wxS(" autoamp operatorXampamp  default ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer Matthew Taylor ")) >(), wxS(" autoamp operatorXampamp  default ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer Matthew Taylor ")) >(), wxS(" autoamp operatorXampamp  default ") > >() },
    { "p2953r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Forbid defaulting operatorXampamp ampamp ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Forbid defaulting operatorXampamp ampamp ") > >() },
    { "p2954r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Contracts and virtual functions for the Contracts MVP ") > >() },
    { "p2955r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Safer Range Access ") >, Rev< 1u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" Safer Range Access ") > >() },
    { "p2956r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Add saturating library support to stdsimd ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Add saturating library support to stdsimd ") > >() },
    { "p2957r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski Iain Sandoe ")) >(), wxS(" Contracts and coroutines ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski Iain Sandoe ")) >(), wxS(" Contracts and coroutines ") >, Rev< 2u, Arr64< Hash(wxS(" Andrzej Krzemieski Iain Sandoe Joshua Berne Timur Doumler ")) >(), wxS(" Contracts and coroutines ") > >() },
    { "p2958r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" typeof and typeofunqual ") > >() },
    { "p2959r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Container Relocation ") > >() },
    { "p2960r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" Concurrency TS Editors report for a hrefnpdfNa ") > >() },
    { "p2961r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer Timur Doumler ")) >(), wxS(" A natural syntax for Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Jens Maurer ")) >(), wxS(" A natural syntax for Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Jens Maurer ")) >(), wxS(" A natural syntax for Contracts ") > >() },
    { "p2962r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Communicating the Baseline Compile Command for C Modules support ") > >() },
    { "p2963r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Ordering of constraints involving fold expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Ordering of constraints involving fold expressions ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Ordering of constraints involving fold expressions ") >, Rev< 3u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Ordering of constraints involving fold expressions ") > >() },
    { "p2964r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Allowing userdefined types in stdsimd ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Allowing userdefined types in stdsimd ") > >() },
    { "p2966r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy various SG contibutors including Nicolas Fleury Ubisoft Gabriel Morin EIDOS Arthur ODwyer Matt Bentley Staffan Tjernstrom Matt Bentley and others ")) >(), wxS(" Making C Better for Game Developers  Progress Report ") >, Rev< 1u, Arr64< Hash(wxS(" Patrice Roy various SG contibutors including Nicolas Fleury Ubisoft Gabriel Morin EIDOS Arthur ODwyer Matt Bentley Staffan Tjernstrom Matt Bentley and others ")) >(), wxS(" Making C Better for Game Developers  Progress Report ") > >() },
    { "p2967r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Relocation Is A Library Interface ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Relocation Is A Library Interface ") > >() },
    { "p2968r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make stdignore a firstclass object ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make stdignore a firstclass object ") >, Rev< 2u, Arr64< Hash(wxS(" Peter Sommerlad ")) >(), wxS(" Make stdignore a firstclass object ") > >() },
    { "p2969r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Ville Voutilainen Tom Honermann ")) >(), wxS(" Contract annotations are potentiallythrowing ") > >() },
    { "p2970r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Partial application of concepts in template arguments ") > >() },
    { "p2971r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Implication for C ") >, Rev< 1u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Implication for C ") >, Rev< 2u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Implication for C ") >, Rev< 3u, Arr64< Hash(wxS(" Walter E Brown ")) >(), wxS(" Implication for C ") > >() },
    { "p2972r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Ben Craig Fabio Fracassi Corentin Jabot Nevin Liber Billy Baker ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p2973r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe Jonathan Wakely ")) >(), wxS(" Erroneous behaviour for missing return from assignment ") > >() },
    { "p2976r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library algorithm numeric and random ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding Library algorithm numeric and random ") > >() },
    { "p2977r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Boeckel ")) >(), wxS(" Module commands database format ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Boeckel Daniel Ruoso ")) >(), wxS(" Build database files ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Boeckel Daniel Ruoso ")) >(), wxS(" Build database files ") > >() },
    { "p2978r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hassan Sajjad ")) >(), wxS(" A New Approach For Compiling C ") > >() },
    { "p2979r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Harold Bott John Lakos ")) >(), wxS(" The Need for Design Policies in WG ") > >() },
    { "p2980r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" A motivation scope and plan for a physical quantities and units library ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" A motivation scope and plan for a quantities and units library ") > >() },
    { "p2981r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea ")) >(), wxS(" Improving our safety with a physical quantities and units library ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea ")) >(), wxS(" Improving our safety with a physical quantities and units library ") > >() },
    { "p2982r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz Chip Hogg ")) >(), wxS(" stdquantity as a numeric type ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz Chip Hogg ")) >(), wxS(" stdquantity as a numeric type ") > >() },
    { "p2984r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reconsider Redeclaring static constexpr Data Members ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Reconsider Redeclaring static constexpr Data Members ") > >() },
    { "p2985r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" A type trait for detecting virtual base classes ") > >() },
    { "p2986r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Generic Function Pointer ") > >() },
    { "p2988r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 1u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 10u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 11u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 12u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 2u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptional ") >, Rev< 3u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 4u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 5u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 6u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 7u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 8u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") >, Rev< 9u, Arr64< Hash(wxS(" Steve Downey Peter Sommerlad ")) >(), wxS(" stdoptionalltTampgt ") > >() },
    { "p2989r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" A Simple Approach to Universal Template Parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" A Simple Approach to Universal Template Parameters ") >, Rev< 2u, Arr64< Hash(wxS(" Corentin Jabot Gaper Aman ")) >(), wxS(" A Simple Approach to Universal Template Parameters ") > >() },
    { "p2990r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" C Modules Roadmap ") > >() },
    { "p2991r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Stop Forcing stdmove to Pessimize ") > >() },
    { "p2992r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Attribute discard and attributes on expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Attribute discardreason ") > >() },
    { "p2993r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Luke Valenty ")) >(), wxS(" Constrained Numbers ") > >() },
    { "p2994r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" On the Naming of Packs ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" On the Naming of Packs ") > >() },
    { "p2995r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p2996r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde ")) >(), wxS(" Reflection for C ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde ")) >(), wxS(" Reflection for C ") >, Rev< 10u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 11u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 12u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 7u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 8u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") >, Rev< 9u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Reflection for C ") > >() },
    { "p2997r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Tim Song ")) >(), wxS(" Removing the common reference requirement from the indirectly invocable concepts ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Tim Song ")) >(), wxS(" Removing the common reference requirement from the indirectly invocable concepts ") > >() },
    { "p2998r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" CTAD for function parameter types ") > >() },
    { "p2999r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Sender Algorithm Customization ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Sender Algorithm Customization ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Sender Algorithm Customization ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Sender Algorithm Customization ") > >() },
    { "p3001r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller Zach Laine Bryce Adelstein Lelbach David Sankel ")) >(), wxS(" stdhive and containers like it are not a good fit for the standard library ") > >() },
    { "p3002r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Guidelines for allocators in new library classes ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Policies for Using Allocators in New Library Classes ") > >() },
    { "p3003r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Johel Ernesto Guerrero Pea ")) >(), wxS(" The design of a library of number concepts ") > >() },
    { "p3004r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Harold Bott Mungo Gill Lori Hughes Alisdair Meredith Bill Chapman Mike Giroux Oleg Subbotin ")) >(), wxS(" Principled Design for WG ") > >() },
    { "p3005r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Harold Bott Bill Chapman Mungo Gill Mike Giroux Alisdair Meredith Oleg Subbotin ")) >(), wxS(" Memorializing PrincipledDesign Policies for WG ") > >() },
    { "p3006r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Launder less ") >, Rev< 1u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Launder less ") > >() },
    { "p3007r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Andrzej Krzemieski Joshua Berne ")) >(), wxS(" Return object semantics in postconditions ") > >() },
    { "p3008r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") >, Rev< 4u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") >, Rev< 5u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi David Sankel ")) >(), wxS(" Atomic floatingpoint minmax ") > >() },
    { "p3009r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joe Jevnik ")) >(), wxS(" Injected class name in the base specifier list ") > >() },
    { "p3010r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Katz ")) >(), wxS(" Using Reflection to Replace a Metalanguage for Generating JS Bindings ") > >() },
    { "p3011r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Supporting document for Hive proposal  outreach for evidence of containerstyle use in industry ") > >() },
    { "p3012r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matt Bentley ")) >(), wxS(" Supporting document for Hive proposal  use of stdlist in open source codebases ") > >() },
    { "p3014r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" Customizing stdexpecteds exception ") > >() },
    { "p3015r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Howard Hinnant ")) >(), wxS(" Rebuttal to Additional format specifiers for timepoint ") > >() },
    { "p3016r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 2u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 3u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 4u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 5u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") >, Rev< 6u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve inconsistencies in beginend for valarray and braced initializer lists ") > >() },
    { "p3018r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andreas Weis ")) >(), wxS(" LowLevel Integer Arithmetic ") > >() },
    { "p3019r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 10u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 11u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 12u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 13u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 14u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 3u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 4u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 5u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 6u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 7u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 8u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") >, Rev< 9u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") > >() },
    { "p3020r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Billy Baker Nevin Liber Corentin Jabot ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3021r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Unified function call syntax UFCS ") > >() },
    { "p3022r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Darius Neau ")) >(), wxS(" A Boring Thread Attributes Interface ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel Darius Neau ")) >(), wxS(" A Boring Thread Attributes Interface ") > >() },
    { "p3023r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" C Should Be C ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" C Should Be C ") > >() },
    { "p3024r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Jeff Garland Matthias Kretz Ruslan Arutyunyan ")) >(), wxS(" Interface Directions for stdsimd ") > >() },
    { "p3025r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial tradingSimulation virtual Minutes to  ") > >() },
    { "p3026r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3027r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" UFCS is a breaking change of the absolutely worst kind ") > >() },
    { "p3028r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Gaper Aman Rostislav Khlebnikov Timur Doumler ")) >(), wxS(" An Overview of Syntax Choices for Contracts ") > >() },
    { "p3029r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Better mdspans CTAD ") >, Rev< 1u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Better mdspans CTAD ") > >() },
    { "p3031r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Resolve CWG conversion function for lambda with explicit object parameter ") > >() },
    { "p3032r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Less transient constexpr allocation ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Less transient constexpr allocation ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Less transient constexpr allocation ") > >() },
    { "p3033r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Should we import function bodies to get the better optimizations ") > >() },
    { "p3034r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Module Declarations Shouldnt be Macros ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Module Declarations Shouldnt be Macros ") > >() },
    { "p3037r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul Keir ")) >(), wxS(" constexpr stdsharedptr ") >, Rev< 1u, Arr64< Hash(wxS(" Paul Keir ")) >(), wxS(" constexpr stdsharedptr ") >, Rev< 2u, Arr64< Hash(wxS(" Paul Keir ")) >(), wxS(" constexpr stdsharedptr ") >, Rev< 3u, Arr64< Hash(wxS(" Paul Keir ")) >(), wxS(" constexpr stdsharedptr ") >, Rev< 4u, Arr64< Hash(wxS(" Paul Keir ")) >(), wxS(" constexpr stdsharedptr ") >, Rev< 5u, Arr64< Hash(wxS(" Paul Keir Hana Duskov ")) >(), wxS(" constexpr stdsharedptr and friends ") >, Rev< 6u, Arr64< Hash(wxS(" Paul Keir Hana Duskov ")) >(), wxS(" constexpr stdsharedptr and friends ") > >() },
    { "p3038r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Concrete suggestions for initial Profiles ") > >() },
    { "p3039r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Stone ")) >(), wxS(" Automatically Generate operatorgt ") > >() },
    { "p3040r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Kona Nov  ") > >() },
    { "p3041r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Transitioning from include World to Modules ") > >() },
    { "p3042r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Vocabulary Types for Composite Class Design ") > >() },
    { "p3043r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Using variable template template without meta programming ") > >() },
    { "p3044r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" substringview from string ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" substringview from string ") > >() },
    { "p3045r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") >, Rev< 2u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") >, Rev< 3u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") >, Rev< 4u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") >, Rev< 5u, Arr64< Hash(wxS(" Mateusz Pusz Dominik Berner Johel Ernesto Guerrero Pea Charles Hogg Nicolas Holthaus Roth Michaels Vincent Reverdy ")) >(), wxS(" Quantities and units library ") > >() },
    { "p3046r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the November  meeting ") > >() },
    { "p3047r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove deprecated namespace relops from C ") > >() },
    { "p3049r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" nodehandles for lists ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" nodehandles for lists ") > >() },
    { "p3050r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Optimize linalgconjugated for noncomplex value types ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by optimizing linalgconjugated for noncomplex value types ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by optimizing linalgconjugated for noncomplex value types ") >, Rev< 3u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by optimizing linalgconjugated for noncomplex value types ") > >() },
    { "p3051r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Response Files ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Response Files ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Response Files ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN Structured Response Files ") > >() },
    { "p3052r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewinterfaceat ") >, Rev< 1u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewinterfaceat ") > >() },
    { "p3053r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3054r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Billy Baker Nevin Liber Corentin Jabot ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3055r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Relax wording to permit relocation optimizations in the STL ") >, Rev< 1u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Relax wording to permit relocation optimizations in the STL ") > >() },
    { "p3056r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" what ostream exception ") > >() },
    { "p3057r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Two finergrained compilation model for named modules ") > >() },
    { "p3059r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Making userdefined constructors of view iteratorssentinels private ") >, Rev< 1u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" Making userdefined constructors of view iteratorssentinels private ") > >() },
    { "p3060r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Weile Wei ")) >(), wxS(" Add stdrangesupton ") >, Rev< 1u, Arr64< Hash(wxS(" Weile Wei Zhihao Yuan ")) >(), wxS(" Add stdviewsupton ") >, Rev< 2u, Arr64< Hash(wxS(" Weile Wei Zhihao Yuan ")) >(), wxS(" Add stdviewsindicesn ") > >() },
    { "p3061r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" WG  Kona Record of Discussion ") > >() },
    { "p3062r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel ")) >(), wxS(" C Should Be C  Presentation ") > >() },
    { "p3064r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Michael Wong and Maged Michael ")) >(), wxS(" How to Avoid OOTA Without Really Trying ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Michael Wong and Maged Michael ")) >(), wxS(" How to Avoid OOTA Without Really Trying ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Michael Wong and Maged Michael ")) >(), wxS(" How to Avoid OOTA Without Really Trying ") > >() },
    { "p3066r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Allow repeating contract annotations on nonfirst declarations ") > >() },
    { "p3067r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Provide predefined simd permute generator functions for common operations ") > >() },
    { "p3068r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 3u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 4u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 5u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") >, Rev< 6u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Allowing exception throwing in constantevaluation ") > >() },
    { "p3070r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting enums ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting enums ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting enums ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting enums ") > >() },
    { "p3071r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Protection against modifications in contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Protection against modifications in contracts ") > >() },
    { "p3072r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Hasslefree thread attributes ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Hasslefree thread attributes ") >, Rev< 2u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Hasslefree thread attributes ") > >() },
    { "p3073r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Ville Voutilainen ")) >(), wxS(" Remove evaluationundefinedbehavior and willcontinue from the Contracts MVP ") > >() },
    { "p3074r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr union lifetime ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" stduninitializedltTgt ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" stduninitializedltTgt ") >, Rev< 3u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" trivial union was stduninitializedltTgt ") >, Rev< 4u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" trivial unions was stduninitializedltTgt ") >, Rev< 5u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" trivial unions was stduninitializedltTgt ") >, Rev< 6u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" trivial unions was stduninitializedltTgt ") >, Rev< 7u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" trivial unions was stduninitializedltTgt ") > >() },
    { "p3075r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Shafik Yaghmour ")) >(), wxS(" Adding an Undefined Behavior and IFNDR Annex ") > >() },
    { "p3079r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Rosten ")) >(), wxS(" Should ignore and observe exist for constant evaluation of contracts ") > >() },
    { "p3081r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Core safety Profiles Specification adoptability and impact ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Core safety profiles for C ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Core safety profiles for C ") > >() },
    { "p3084r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Slides for LEWG viewsmaybe  ") > >() },
    { "p3085r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" noexcept policy for SD throws nothing ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" noexcept policy for SD throws nothing ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" noexcept policy for SD throws nothing ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" noexcept policy for SD throws nothing ") > >() },
    { "p3086r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library ") >, Rev< 1u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library ") >, Rev< 2u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library ") >, Rev< 3u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library ") >, Rev< 4u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library ") > >() },
    { "p3087r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Make directinitialization for enumeration types at least as permissive as directlistinitialization ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Make directinitialization for enumeration types at least as permissive as directlistinitializatio ") > >() },
    { "p3088r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Attributes for contract assertions ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Attributes for contract assertions ") > >() },
    { "p3090r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Eric Niebler ")) >(), wxS(" stdexecution Introduction ") > >() },
    { "p3091r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better lookups for map and unorderedmap ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better lookups for map and unorderedmap ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better lookups for map and unorderedmap ") >, Rev< 3u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" Better lookups for map and unorderedmap ") > >() },
    { "p3092r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Modules ABI requirement ") > >() },
    { "p3093r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Attributes on expressions ") > >() },
    { "p3094r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 1u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 2u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 3u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 4u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 5u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") >, Rev< 6u, Arr64< Hash(wxS(" Mateusz Pusz ")) >(), wxS(" stdbasicfixedstring ") > >() },
    { "p3095r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Saksham Sharma ")) >(), wxS(" ABI comparison with reflection ") > >() },
    { "p3096r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 1u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 2u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 3u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 4u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 5u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 6u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 7u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 8u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") >, Rev< 9u, Arr64< Hash(wxS(" Adam Lach Walter Genovese ")) >(), wxS(" Function Parameter Reflection in Reflection for C ") > >() },
    { "p3097r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman ")) >(), wxS(" Contracts for C Support for virtual functions ") > >() },
    { "p3098r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne ")) >(), wxS(" Contracts for C Postcondition captures ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne ")) >(), wxS(" Contracts for C Postcondition captures ") > >() },
    { "p3100r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne ")) >(), wxS(" Undefined and erroneous behaviour are contract violations ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne ")) >(), wxS(" Undefined and erroneous behaviour are contract violations ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Implicit contract assertions ") > >() },
    { "p3101r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ran Regev Gaper Aman ")) >(), wxS(" Differentiating potentially throwing and nonthrowing violation handlers ") > >() },
    { "p3102r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Refining Contract Violation Detection Modes ") > >() },
    { "p3103r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" More bitset operations ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" More bitset operations ") >, Rev< 2u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" More bitset operations ") > >() },
    { "p3104r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Bit permutations ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Bit permutations ") >, Rev< 2u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Bit permutations ") >, Rev< 3u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Bit permutations ") > >() },
    { "p3105r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" constexpr stduncaughtexceptions ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" constexpr stduncaughtexceptions ") >, Rev< 2u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" constexpr stduncaughtexceptions ") > >() },
    { "p3106r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Clarifying rules for brace elision in aggregate initialization ") >, Rev< 1u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Clarifying rules for brace elision in aggregate initialization ") > >() },
    { "p3107r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") >, Rev< 5u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Permit an efficient implementation of stdprint ") > >() },
    { "p3109r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker Eric Niebler Kirk Shoop Lucian Radu ")) >(), wxS(" A plan for stdexecution for C ") > >() },
    { "p3110r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Array element initialization via pattern expansion ") > >() },
    { "p3111r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 4u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 5u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") >, Rev< 6u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Simon Cooksey Daniel Lustig ")) >(), wxS(" Atomic Reduction Operations ") > >() },
    { "p3112r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Specify Constructor of stdnulloptt ") > >() },
    { "p3113r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Slides Contract assertions the noexcept operator and deduced exception specifications ") > >() },
    { "p3114r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" noexceptcontractassert  slides ") > >() },
    { "p3115r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Data Member Variable and Alias Declarations Can Introduce A Pack ") > >() },
    { "p3116r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Policy for explicit ") > >() },
    { "p3117r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine Barry Revzin ")) >(), wxS(" Extending Conditionally Borrowed ") >, Rev< 1u, Arr64< Hash(wxS(" Zach Laine Barry Revzin Jonathan Mller ")) >(), wxS(" Extending Conditionally Borrowed ") > >() },
    { "p3119r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Tokyo Technical Fixes to Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Tokyo Technical Fixes to Contracts ") > >() },
    { "p3122r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" nodiscard should be Recommended Practice ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" nodiscard should be Recommended Practice ") > >() },
    { "p3123r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3124r0", RevList< Rev< 0u, Arr64< Hash(wxS("  ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3125r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" Pointer tagging ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr pointer tagging ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr pointer tagging ") >, Rev< 3u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr pointer tagging ") >, Rev< 4u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr pointer tagging ") > >() },
    { "p3126r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Overview ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Overview ") >, Rev< 2u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Overview ") >, Rev< 3u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Overview ") > >() },
    { "p3127r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Background and Terminology ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Background and Terminology ") > >() },
    { "p3128r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Algorithms ") > >() },
    { "p3129r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Views ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Views ") > >() },
    { "p3130r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Container Interface ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Container Interface ") >, Rev< 2u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Container Interface ") >, Rev< 3u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Container Interface ") > >() },
    { "p3131r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Containers ") >, Rev< 1u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Containers ") >, Rev< 2u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Containers ") >, Rev< 3u, Arr64< Hash(wxS(" Phil Ratzloff Andrew Lumsdaine ")) >(), wxS(" Graph Library Graph Containers ") > >() },
    { "p3133r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chip Hogg ")) >(), wxS(" Fast firstfactor finding function ") > >() },
    { "p3135r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Extensions ") >, Rev< 1u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Extensions ") > >() },
    { "p3136r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Retiring niebloids ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" Retiring niebloids ") > >() },
    { "p3137r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewstoinput ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewstoinput ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewstoinput ") >, Rev< 3u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewstoinput ") > >() },
    { "p3138r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelast ") >, Rev< 1u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelast ") >, Rev< 2u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelast ") >, Rev< 3u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelatest ") >, Rev< 4u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelatest ") >, Rev< 5u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" viewscachelatest ") > >() },
    { "p3139r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan Jordan Saxonberg ")) >(), wxS(" Pointer cast for uniqueptr ") >, Rev< 1u, Arr64< Hash(wxS(" Zhihao Yuan Jordan Saxonberg ")) >(), wxS(" Pointer cast for uniqueptr ") > >() },
    { "p3140r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" stdintleastt ") > >() },
    { "p3142r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Printing Blank Lines with println ") > >() },
    { "p3143r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" An indepth walk through of the example in a hrefprpdfPRa ") > >() },
    { "p3144r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith Mingo Gill John Lakos ")) >(), wxS(" Deprecate Delete of Incomplete Class Type ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Mingo Gill John Lakos ")) >(), wxS(" Deprecate Delete of Incomplete Class Type ") >, Rev< 2u, Arr64< Hash(wxS(" Alisdair Meredith Mingo Gill John Lakos ")) >(), wxS(" Deleting a Pointer to an Incomplete Type Should be Illformed ") > >() },
    { "p3146r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Clarifying stdvariant converting construction ") >, Rev< 1u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Clarifying stdvariant converting construction ") >, Rev< 2u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Clarifying stdvariant converting construction ") > >() },
    { "p3147r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" A Direction for Vector ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" A Direction for Vector ") > >() },
    { "p3148r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Formatting of chrono Time Values ") >, Rev< 1u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" Formatting of chrono Time Values ") > >() },
    { "p3149r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 1u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 10u, Arr64< Hash(wxS(" Ian Petersen Jessica Wong Dietmar Khl Jn Ondruek Kirk Shoop Lee Howes Lucian Radu Teodorescu Ruslan Arutyunyan ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 2u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 3u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 4u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 5u, Arr64< Hash(wxS(" Ian Petersen Jn Ondruek Jessica Wong Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 6u, Arr64< Hash(wxS(" Ian Petersen Jessica Wong Jn Ondruek Kirk Shoop Lee Howes Lucian Radu Teodorescu ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 7u, Arr64< Hash(wxS(" Ian Petersen Jessica Wong Dietmar Khl Jn Ondruek Kirk Shoop Lee Howes Lucian Radu Teodorescu Ruslan Arutyunyan ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 8u, Arr64< Hash(wxS(" Ian Petersen Jessica Wong Dietmar Khl Jn Ondruek Kirk Shoop Lee Howes Lucian Radu Teodorescu Ruslan Arutyunyan ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") >, Rev< 9u, Arr64< Hash(wxS(" Ian Petersen Jessica Wong Dietmar Khl Jn Ondruek Kirk Shoop Lee Howes Lucian Radu Teodorescu Ruslan Arutyunyan ")) >(), wxS(" asyncscope  Creating scopes for nonsequential concurrency ") > >() },
    { "p3150r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes  ") > >() },
    { "p3151r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3152r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Add missing constructors and assignment for indirect and polymorphic ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Coe Antony Peacock Sean Parent ")) >(), wxS(" Add missing constructors and assignment for indirect and polymorphic ") > >() },
    { "p3153r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns Pablo Halpern Ville Voutilainen ")) >(), wxS(" An allocatoraware variant type ") > >() },
    { "p3154r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Deprecating signed character types in iostreams ") >, Rev< 1u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Deprecating signed character types in iostreams ") > >() },
    { "p3155r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler John Lakos ")) >(), wxS(" noexcept policy for SD The Lakos Rule ") > >() },
    { "p3156r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" emptycheckablerange ") > >() },
    { "p3157r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Alexandrescu Bryce Lelbach Michael Garland ")) >(), wxS(" Generative Extensions for Reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Andrei Alexandrescu Barry Revzin Bryce Lelbach Michael Garland ")) >(), wxS(" Generative Extensions for Reflection ") > >() },
    { "p3158r0", RevList< Rev< 0u, Arr64< Hash(wxS(" James Touton ")) >(), wxS(" Headless Template Template Parameters ") > >() },
    { "p3159r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" C Range Adaptors and Parallel Algorithms ") > >() },
    { "p3160r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" An allocatoraware inplacevector ") >, Rev< 1u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" An allocatoraware inplacevector ") >, Rev< 2u, Arr64< Hash(wxS(" Pablo Halpern Arthur ODwyer ")) >(), wxS(" An allocatoraware inplacevector ") > >() },
    { "p3161r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Unified integer overflow arithmetic ") >, Rev< 1u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Unified integer overflow arithmetic ") >, Rev< 2u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Unified integer overflow arithmetic ") >, Rev< 3u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Unified integer overflow arithmetic ") >, Rev< 4u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Unified integer overflow arithmetic ") > >() },
    { "p3162r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Darius Neau David Sankel ")) >(), wxS(" LEWG nodiscard policy ") > >() },
    { "p3164r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Improving diagnostics for sender expressions ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Improving diagnostics for sender expressions ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Improving diagnostics for sender expressions ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Early Diagnostics for Sender Expressions ") >, Rev< 4u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Early Diagnostics for Sender Expressions ") > >() },
    { "p3165r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Contracts on virtual functions for the Contracts MVP ") > >() },
    { "p3166r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Static Exception Specifications ") > >() },
    { "p3167r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Attributes for the result name in a postcondition assertion ") > >() },
    { "p3168r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Marco Foco Darius Neau Barry Revzin ")) >(), wxS(" Give stdoptional Range Support ") >, Rev< 1u, Arr64< Hash(wxS(" David Sankel Marco Foco Darius Neau Barry Revzin ")) >(), wxS(" Give stdoptional Range Support ") >, Rev< 2u, Arr64< Hash(wxS(" David Sankel Marco Foco Darius Neau Barry Revzin ")) >(), wxS(" Give stdoptional Range Support ") > >() },
    { "p3169r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" Inherited contracts ") > >() },
    { "p3170r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" sinkable exception error message ") > >() },
    { "p3171r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov ")) >(), wxS(" Adding functionality to placeholder types ") > >() },
    { "p3172r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Using this in constructor preconditions ") > >() },
    { "p3173r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" a hrefprpdfPRa may be minimimal but it is not viable ") > >() },
    { "p3174r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p3175r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Reconsidering the stdexecutionon algorithm ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Reconsidering the stdexecutionon algorithm ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Reconsidering the stdexecutionon algorithm ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Reconsidering the stdexecutionon algorithm ") > >() },
    { "p3176r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" The Oxford variadic comma ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" The Oxford variadic comma ") > >() },
    { "p3177r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" const prvalues in the conditional operator ") > >() },
    { "p3178r0", RevList< Rev< 0u, Arr64< Hash(wxS(" TPK Healy ")) >(), wxS(" Retrieval of Exception Information ") >, Rev< 1u, Arr64< Hash(wxS(" TPK Healy ")) >(), wxS(" Retrieval of Exception Information ") > >() },
    { "p3179r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" C parallel range algorithms ") >, Rev< 1u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" C parallel range algorithms ") >, Rev< 2u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 3u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 4u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 5u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 6u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 7u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") >, Rev< 8u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov Bryce Adelstein Lelbach ")) >(), wxS(" C parallel range algorithms ") > >() },
    { "p3180r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Tokyo Mar  ") > >() },
    { "p3181r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm Dave Claussen David Goldblatt ")) >(), wxS(" Atomic stores and object lifetimes ") > >() },
    { "p3182r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Add popvalue methods to container adaptors ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi Add container pop methods that return the popped value ")) >(), wxS(" Add container pop methods that return the popped value ") > >() },
    { "p3183r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Contract testing support ") >, Rev< 1u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Contract testing support ") > >() },
    { "p3185r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Rodgers ")) >(), wxS(" A proposed direction for C Standard Networking based on IETF TAPS ") > >() },
    { "p3187r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Kirk Shoop Lewis Baker ")) >(), wxS(" remove ensurestarted and startdetached from P ") > >() },
    { "p3188r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Proxy A PointerSemanticsBased Polymorphism Library  Presentation slides for a hrefprpdfPRa ") > >() },
    { "p3189r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Andrzej Krzemieski ")) >(), wxS(" Slides for LEWG presentation of a hrefprpdfPRa Contracts for C ") > >() },
    { "p3190r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Andrzej Krzemieski ")) >(), wxS(" Slides for EWG presentation of DR Contracts for C ") > >() },
    { "p3191r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne Yeoul Na Konstantin Varlamov ")) >(), wxS(" Feedback on the scalability of contract violation handlers in P ") > >() },
    { "p3192r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" LEWGISG Presentation of a hrefprhtmlPRa Bit Permutations ") > >() },
    { "p3194r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" LEWGISG Presentation of a hrefprhtmlPRa constexpr stduncaughtexceptions ") > >() },
    { "p3196r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the March  meeting ") > >() },
    { "p3197r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler John Spicer ")) >(), wxS(" A response to the Tokyo EWG polls  on the Contracts MVP a hrefprpdfPRa ") > >() },
    { "p3198r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" A takeaway from the Tokyo LEWG meeting on Contracts MVP ") > >() },
    { "p3199r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Choices for makeoptional and value ") > >() },
    { "p3201r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely David Sankel Darius Neau ")) >(), wxS(" LEWG nodiscard policy ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely David Sankel Darius Neau ")) >(), wxS(" LEWG nodiscard policy ") > >() },
    { "p3203r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Klemens Morgenstern ")) >(), wxS(" Implementation defined coroutine extensions ") > >() },
    { "p3204r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Why Contracts ") > >() },
    { "p3205r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Jeff Snyder Andrei Zissu Ben Craig ")) >(), wxS(" Throwing from a noexcept function should be a contract violation ") > >() },
    { "p3206r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maikel Nadolski ")) >(), wxS(" A sender query for completion behaviour ") > >() },
    { "p3207r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" More amp like ") > >() },
    { "p3208r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sunghyun Min ")) >(), wxS(" import std and stream macros ") > >() },
    { "p3210r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" A Postcondition is a Pattern Match ") >, Rev< 1u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" A Postcondition is a Pattern Match ") >, Rev< 2u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" A Postcondition is a Pattern Match ") > >() },
    { "p3211r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewstransformjoin ") > >() },
    { "p3212r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" The contract of sort ") > >() },
    { "p3213r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3214r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3215r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zhihao Yuan ")) >(), wxS(" Slides Thread Attributes as Designators a hrefprhtmlPRa presentation ") > >() },
    { "p3216r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewsslice ") > >() },
    { "p3217r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Adjoints to Enabling listinitialization for algorithms findlast ") > >() },
    { "p3218r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" const references to constexpr variables ") > >() },
    { "p3220r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewsdelimit ") > >() },
    { "p3221r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" Disable pointers to contracted functions ") > >() },
    { "p3222r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by adding transposed special cases for P layouts ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by adding transposed special cases for P layouts ") > >() },
    { "p3223r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Making stdbasicistreamignore less surprising ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Making stdistreamignore less surprising ") > >() },
    { "p3224r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Slides for P  Make directinitialization for enumeration types at least as permissive as direct ") > >() },
    { "p3225r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Slides for P stdintleastt ") > >() },
    { "p3226r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts for C Naming the Louis semantic ") > >() },
    { "p3227r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Timur Doumler ")) >(), wxS(" Contracts for C Fixing the contract violation handling API ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Timur Doumler ")) >(), wxS(" Fixing the library API for contract violation handling ") > >() },
    { "p3228r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts for C Revisiting contract check elision and duplication ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contracts for C Revisiting contract check elision and duplication ") > >() },
    { "p3229r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman ")) >(), wxS(" Making erroneous behaviour compatible with Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Gaper Aman ")) >(), wxS(" Making erroneous behaviour compatible with Contracts ") > >() },
    { "p3230r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewstakedropexactly ") >, Rev< 1u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewsuncheckedtakedrop ") >, Rev< 2u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" viewsuncheckedtakedrop ") > >() },
    { "p3232r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Userdefined erroneous behaviour ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Kppe ")) >(), wxS(" Userdefined erroneous behaviour ") > >() },
    { "p3233r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Issues with P Trivial Relocatability For C ") > >() },
    { "p3234r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Glen Joseph Fernandes ")) >(), wxS(" Utility to check if a pointer is in a given range ") >, Rev< 1u, Arr64< Hash(wxS(" Glen Joseph Fernandes ")) >(), wxS(" Utility to check if a pointer is in a given range ") > >() },
    { "p3235r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdprint more types faster with less memory ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdprint more types faster with less memory ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdprint more types faster with less memory ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" stdprint more types faster with less memory ") > >() },
    { "p3236r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan de Freitas Daniel Liam Anderson Giuseppe DAngelo Hans Goudey Hartmut Kaiser Isidoros Tsaousis Jacques Lucke Krystian Stasiowski Shreyas Atre Stphane Janel Thiago Maciera ")) >(), wxS(" Please reject P and adopt P ") >, Rev< 1u, Arr64< Hash(wxS(" Alan de Freitas Daniel Liam Anderson Giuseppe DAngelo Hans Goudey Jacques Lucke Krystian Stasiowski Stphane Janel Thiago Maciera ")) >(), wxS(" Please reject P and adopt P ") > >() },
    { "p3237r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Zissu ")) >(), wxS(" Matrix Representation of Contract Semantics ") >, Rev< 1u, Arr64< Hash(wxS(" Andrei Zissu ")) >(), wxS(" Matrix Representation of Contract Semantics ") >, Rev< 2u, Arr64< Hash(wxS(" Andrei Zissu ")) >(), wxS(" Matrix Representation of Contract Semantics ") > >() },
    { "p3238r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" An alternate proposal for naming contract semantics ") > >() },
    { "p3239r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" A Relocating Swap ") > >() },
    { "p3240r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Slides for EWGI presentation on allocators Tokyo  ") > >() },
    { "p3241r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Slides for LEWG presentation on trivial relocation April  ") > >() },
    { "p3242r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolas Morales Christian Trott Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Copy and fill for mdspan ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolas Morales Christian Trott Mark Hoemmen Damien LebrunGrandie ")) >(), wxS(" Copy and fill for mdspan ") > >() },
    { "p3243r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Marco Foco Darius Neau Barry Revzin ")) >(), wxS(" Give stdoptional Range Support  Presentation Tokyo  ") > >() },
    { "p3244r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Sankel Darius Neau ")) >(), wxS(" nodiscard Policy  Presentation Tokyo  ") > >() },
    { "p3245r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Xavier Bonaventura ")) >(), wxS(" Allow nodiscard in type alias declarations ") >, Rev< 1u, Arr64< Hash(wxS(" Xavier Bonaventura ")) >(), wxS(" Allow nodiscard in type alias declarations ") >, Rev< 2u, Arr64< Hash(wxS(" Xavier Bonaventura ")) >(), wxS(" Allow nodiscard in type alias declarations ") > >() },
    { "p3247r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Deprecate the notion of trivial types ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Deprecate the notion of trivial types ") >, Rev< 2u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Deprecate the notion of trivial types ") > >() },
    { "p3248r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Require uintptrt ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Require uintptrt ") >, Rev< 2u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Require uintptrt ") >, Rev< 3u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" Require uintptrt ") > >() },
    { "p3249r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" A unified syntax for Pattern Matching and Contracts when introducing a new name ") > >() },
    { "p3250r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" C contracts with regards to function pointers ") > >() },
    { "p3251r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" C contracts and coroutines ") > >() },
    { "p3253r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Distinguishing between member and free coroutines ") > >() },
    { "p3254r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Reserve identifiers preceded by  for nonignorable annotation tokens ") > >() },
    { "p3255r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Expose whether atomic notifying operations are lockfree ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Expose whether atomic notifying operations are lockfree ") > >() },
    { "p3257r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Make the predicate of contractassert more regular ") > >() },
    { "p3258r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Formatting charNt ") > >() },
    { "p3259r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" const by default ") > >() },
    { "p3261r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Revisiting constification in Contract Assertions ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Revisiting constification in Contract Assertions ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Revisiting constification in Contract Assertions ") > >() },
    { "p3263r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tiago Freire ")) >(), wxS(" Encoded annotated char ") > >() },
    { "p3264r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Doubleevaluation of preconditions ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Doubleevaluation of preconditions ") > >() },
    { "p3265r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ship Contracts in a TS ") >, Rev< 1u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ship Contracts in a TS ") >, Rev< 2u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ship Contracts in a TS ") >, Rev< 3u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ship Contracts in a TS ") > >() },
    { "p3266r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" non referenceable types ") > >() },
    { "p3267r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" C contracts implementation strategies ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Bindels Tom Honermann ")) >(), wxS(" Approaches to C Contracts ") > >() },
    { "p3268r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" C Contracts Constification Challenges Concerning Current Code ") > >() },
    { "p3269r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler John Spicer ")) >(), wxS(" Do Not Ship Contracts as a TS ") > >() },
    { "p3270r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos Joshua Berne ")) >(), wxS(" Repetition Elision and Constification wrt contractassert ") > >() },
    { "p3271r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Function Usage Types Contracts for Function Pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Lisa Lippincott ")) >(), wxS(" Function Types with Usage Contracts for Function Pointers ") > >() },
    { "p3273r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Alexandrescu Daveed Vandevoorde David Olsen Michael Garland ")) >(), wxS(" Introspection of Closure Types ") > >() },
    { "p3274r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" A framework for Profiles development ") > >() },
    { "p3275r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Replace simd operator with getter and setter functions  or not ") > >() },
    { "p3276r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Steve Downey Jake Fevold Mungo Gill Rostislav Khlebnikov John Lakos and Alisdair Meredith ")) >(), wxS(" P Is Superior to a Contracts TS ") > >() },
    { "p3278r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nina Ranns ")) >(), wxS(" Analysis of interaction between relocation assignment and swap ") > >() },
    { "p3279r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" CWG What trivially fooable should mean ") > >() },
    { "p3281r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Contact checks should be regular C ") > >() },
    { "p3282r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Static Storage for C Concurrent boundedqueue ") > >() },
    { "p3283r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Rhidian De Wit ")) >(), wxS(" Adding first and last to strings ") > >() },
    { "p3284r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" finally writeenv and unstoppable Sender Adaptors ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" finally writeenv and unstoppable Sender Adaptors ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" writeenv and unstoppable Sender Adaptors ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" writeenv and unstoppable Sender Adaptors ") >, Rev< 4u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" writeenv and unstoppable Sender Adaptors ") > >() },
    { "p3285r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" Contracts Protecting The Protector ") > >() },
    { "p3286r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" Module Metadata Format for Distribution with PreBuilt Libraries ") > >() },
    { "p3287r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Exploration of namespaces for stdsimd ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Exploration of namespaces for stdsimd ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Exploration of namespaces for stdsimd ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Exploration of namespaces for stdsimd ") > >() },
    { "p3288r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas P K Healy ")) >(), wxS(" stdelide ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas P K Healy ")) >(), wxS(" stdelide ") >, Rev< 2u, Arr64< Hash(wxS(" Thomas P K Healy ")) >(), wxS(" stdelide ") >, Rev< 3u, Arr64< Hash(wxS(" Thomas P K Healy ")) >(), wxS(" stdelide ") > >() },
    { "p3289r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Barry Revzin ")) >(), wxS(" Consteval blocks ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Dan Katz Barry Revzin ")) >(), wxS(" Consteval blocks ") > >() },
    { "p3290r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler John Lakos ")) >(), wxS(" Integrating Existing Assertions With Contracts ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler John Lakos ")) >(), wxS(" Integrating Existing Assertions With Contracts ") >, Rev< 2u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler John Lakos ")) >(), wxS(" Integrating Existing Assertions With Contracts ") > >() },
    { "p3292r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Goldblatt ")) >(), wxS(" Provenance and Concurrency ") > >() },
    { "p3293r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov Dan Katz Daveed Vandevoorde ")) >(), wxS(" Splicing a base class subobject ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov Dan Katz Daveed Vandevoorde ")) >(), wxS(" Splicing a base class subobject ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov Dan Katz Daveed Vandevoorde ")) >(), wxS(" Splicing a base class subobject ") > >() },
    { "p3294r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Andrei Alexandrescu Daveed Vandevoorde ")) >(), wxS(" Code Injection with Token Sequences ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Andrei Alexandrescu Daveed Vandevoorde ")) >(), wxS(" Code Injection with Token Sequences ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Andrei Alexandrescu Daveed Vandevoorde ")) >(), wxS(" Code Injection with Token Sequences ") > >() },
    { "p3295r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding constexpr containers and constexpr exception types ") >, Rev< 1u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding constexpr containers and constexpr exception types ") >, Rev< 2u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding constexpr containers and constexpr exception types ") >, Rev< 3u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Freestanding constexpr containers and constexpr exception types ") > >() },
    { "p3296r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" letwithasyncscope ") >, Rev< 1u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" letwithasyncscope ") >, Rev< 2u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" letasyncscope ") >, Rev< 3u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" letasyncscope ") >, Rev< 4u, Arr64< Hash(wxS(" Anthony Williams ")) >(), wxS(" letasyncscope ") > >() },
    { "p3297r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall JeanFrancois Campeau Christian Eltzschig Mathias Kraus Pez Zarifian ")) >(), wxS(" C Needs Contract Checking ") >, Rev< 1u, Arr64< Hash(wxS(" Ryan McDougall JeanFrancois Campeau Christian Eltzschig Mathias Kraus Pez Zarifian ")) >(), wxS(" C Needs Contract Checking ") > >() },
    { "p3298r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Implicit userdefined conversion functions as operator ") >, Rev< 1u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Implicit userdefined conversion functions as operator ") > >() },
    { "p3299r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz ")) >(), wxS(" Range constructors for stdsimd ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz Ruslan Arutyunyan ")) >(), wxS(" Range constructors for stdsimd ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz Ruslan Arutyunyan ")) >(), wxS(" Range constructors for stdsimd ") >, Rev< 3u, Arr64< Hash(wxS(" Daniel Towner Matthias Kretz Ruslan Arutyunyan ")) >(), wxS(" Range constructors for stdsimd ") > >() },
    { "p3300r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bryce Adelstein Lelbach ")) >(), wxS(" C Asynchronous Parallel Algorithms ") > >() },
    { "p3301r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" inplacestoppablebase ") > >() },
    { "p3302r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" SG Unicode meeting summaries  through  ") > >() },
    { "p3303r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Fixing Lazy Sender Algorithm Customization ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" Fixing Lazy Sender Algorithm Customization ") > >() },
    { "p3304r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes  ") > >() },
    { "p3305r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3306r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi Damien LebrunGrandie ")) >(), wxS(" Atomic ReadModifyWrite Improvements ") > >() },
    { "p3307r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" FloatingPoint MaximumMinimum Function Objects ") > >() },
    { "p3308r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Christian Trott ")) >(), wxS(" mdarray design questions and answers ") > >() },
    { "p3309r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr atomic and atomicref ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr atomic and atomicref ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr atomic and atomicref ") >, Rev< 3u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr atomic and atomicref ") > >() },
    { "p3310r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving partial ordering issues introduced by a hrefprhtmlPRa ") >, Rev< 1u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving partial ordering issues introduced by a hrefprhtmlPRa ") >, Rev< 2u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving partial ordering issues introduced by a hrefprhtmlPRa ") >, Rev< 3u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving partial ordering issues introduced by a hrefprhtmlPRa ") >, Rev< 4u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving issues introduced by a hrefprhtmlPRa ") >, Rev< 5u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Solving issues introduced by relaxed template template parameter matching ") >, Rev< 6u, Arr64< Hash(wxS(" Matheus Izvekov James Touton ")) >(), wxS(" Solving issues introduced by relaxed template template parameter matching ") > >() },
    { "p3311r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" An optin approach for integration of traditional assert facilities in C contracts ") > >() },
    { "p3312r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Overload Set Types ") >, Rev< 1u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Overload Set Types ") > >() },
    { "p3313r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Khalil Estell ")) >(), wxS(" Impacts of noexept on ARM table based exception metadata ") > >() },
    { "p3314r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3315r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3316r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" A more predictable unchecked semantic ") > >() },
    { "p3317r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" Compile time resolved contracts ") > >() },
    { "p3318r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Throwing violation handlers from an application programming perspective ") > >() },
    { "p3319r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") >, Rev< 4u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") >, Rev< 5u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" Add an iota object for simd and more ") > >() },
    { "p3320r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" EWG slides for P Delete if Incomplete ") > >() },
    { "p3321r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contracts Interaction With Tooling ") > >() },
    { "p3323r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" cvqualified types in atomic and atomicref ") >, Rev< 1u, Arr64< Hash(wxS(" Gonzalo Brito Gadeschi ")) >(), wxS(" cvqualified types in atomic and atomicref ") > >() },
    { "p3324r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tom Honermann ")) >(), wxS(" Attributes for namespace aliases template parameters and lambda captures ") > >() },
    { "p3325r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") >, Rev< 3u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") >, Rev< 4u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") >, Rev< 5u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" A Utility for Creating Execution Environments ") > >() },
    { "p3326r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" favor ease of use ") > >() },
    { "p3327r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Contract assertions on function pointers ") > >() },
    { "p3328r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Observable Checkpoints During Contract Evaluation ") > >() },
    { "p3329r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolai Josuttis ")) >(), wxS(" Healing the C Filter View ") > >() },
    { "p3330r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gonzalo Brito Damien LebrunGrandie ")) >(), wxS(" Userdefined Atomic ReadModifyWrite Operations ") > >() },
    { "p3331r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nikita Sakharin ")) >(), wxS(" Accessing The First and Last Elements in Associative Containers ") >, Rev< 1u, Arr64< Hash(wxS(" Nikita Sakharin ")) >(), wxS(" Accessing The First and Last Elements in Associative Containers ") > >() },
    { "p3332r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" A simpler notation for PM ") > >() },
    { "p3334r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Coral Kashri Andrei Zissu Tal Yaakovi Inbal Levi ")) >(), wxS(" Cross Static Variables ") > >() },
    { "p3335r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Core Options ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Core Options ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Core Options ") >, Rev< 3u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Structured Core Options ") >, Rev< 4u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN Structured Core Options ") > >() },
    { "p3336r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Usage Experience for Contracts with BDE ") > >() },
    { "p3338r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Observe and ignore semantics in constant evaluation ") > >() },
    { "p3339r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell Jayesh Badwaik ")) >(), wxS(" C Ecosystem IS Open License ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN C Ecosystem IS Open License ") > >() },
    { "p3340r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" A Consistent Grammar for Sequences ") > >() },
    { "p3341r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in St Louis Jun  ") > >() },
    { "p3342r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Working Draft Standard for C Ecosystem ") >, Rev< 1u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" Working Draft Standard for C Ecosystem ") >, Rev< 2u, Arr64< Hash(wxS(" Ren Ferdinand Rivera Morell ")) >(), wxS(" WITHDRAWN Working Draft Standard for C Ecosystem ") > >() },
    { "p3343r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Contracts  What are we doing here EWG Presentation ") > >() },
    { "p3344r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler Lisa Lippincott ")) >(), wxS(" Virtual Functions on Contracts EWG  Presentation for P ") > >() },
    { "p3345r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the June  meeting ") > >() },
    { "p3346r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nat Goodspeed ")) >(), wxS(" threadlocal means fiberspecific ") > >() },
    { "p3347r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" InvalidProspective Pointer Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" InvalidProspective Pointer Operations ") >, Rev< 2u, Arr64< Hash(wxS(" Paul E McKenney Maged Michael Jens Maurer Peter Sewell Martin Uecker Hans Boehm Hubert Tong Niall Douglas Thomas Rodgers Will Deacon Michael Wong David Goldblatt Kostya Serebryany Anthony Williams  Tom Scogland and JF Bastien ")) >(), wxS(" InvalidProspective Pointer Operations ") > >() },
    { "p3348r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C should refer to C not C ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C should refer to C not C ") >, Rev< 2u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C should refer to C not C ") >, Rev< 3u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C should refer to C not C ") > >() },
    { "p3349r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Converting contiguous iterators to pointers ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Converting contiguous iterators to pointers ") > >() },
    { "p3351r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" viewsscan ") >, Rev< 1u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" viewsscan ") >, Rev< 2u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" viewsscan ") > >() },
    { "p3352r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos Martin Uecker ")) >(), wxS(" Taming the Demons C version  Undefined Behavior and Partial Program Correctness ") > >() },
    { "p3354r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" Slides for a hrefprhtmlPRa ") > >() },
    { "p3355r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix submdspan for C ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix submdspan for C ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix submdspan for C ") > >() },
    { "p3356r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jarrad J Waterloo ")) >(), wxS(" noninvalidatingvector ") > >() },
    { "p3357r0", RevList< Rev< 0u, Arr64< Hash(wxS(" TPK Healy ")) >(), wxS(" NRVO with factory and afterfactory ") > >() },
    { "p3358r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sy Brand ")) >(), wxS(" SARIF for Structured Diagnostics ") > >() },
    { "p3359r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Slides for a hrefprpdfPRa  Implicit conversion functions ") > >() },
    { "p3360r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" Slides for a hrefprpdfPRa  Overload Set Types ") > >() },
    { "p3361r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Esa Pulkkinen ")) >(), wxS(" Class invariants and contract checking philosophy ") >, Rev< 1u, Arr64< Hash(wxS(" Esa Pulkkinen ")) >(), wxS(" Class invariants and contract checking philosophy ") > >() },
    { "p3362r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Static analysis and safety of Contracts P vs PP ") > >() },
    { "p3364r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated upath overloads From C ") > >() },
    { "p3365r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove the Deprecated iterator Class Template from C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove the Deprecated iterator Class Template from C ") > >() },
    { "p3366r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Atomic Initialization API from C ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Remove Deprecated Atomic Initialization API from C ") > >() },
    { "p3367r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr coroutines ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr coroutines ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr coroutines ") >, Rev< 3u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr coroutines ") >, Rev< 4u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr coroutines ") > >() },
    { "p3369r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo ")) >(), wxS(" constexpr for uninitializeddefaultconstruct ") > >() },
    { "p3370r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Add new library headers from C ") >, Rev< 1u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Add new library headers from C ") > >() },
    { "p3371r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Fix C by making the symmetric and Hermitian rankk and rankk updates consistent with the BLAS ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen Ilya Burylov ")) >(), wxS(" Fix C by making the rank rank rankk and rankk updates consistent with the BLAS ") >, Rev< 2u, Arr64< Hash(wxS(" Mark Hoemmen Ilya Burylov ")) >(), wxS(" Fix C by making the rank rank rankk and rankk updates consistent with the BLAS ") >, Rev< 3u, Arr64< Hash(wxS(" Mark Hoemmen Ilya Burylov ")) >(), wxS(" Fix C by making the rank rank rankk and rankk updates consistent with the BLAS ") >, Rev< 4u, Arr64< Hash(wxS(" Mark Hoemmen Ilya Burylov ")) >(), wxS(" Fix C by making the rank rank rankk and rankk updates consistent with the BLAS ") > >() },
    { "p3372r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr containers and adapters ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr containers and adapters ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr containers and adapters ") >, Rev< 3u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr containers and adapters ") > >() },
    { "p3373r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Of Operation States and Their Lifetimes ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Of Operation States and Their Lifetimes ") > >() },
    { "p3374r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Liang Jiaming ")) >(), wxS(" Adding formatter for fpos ") >, Rev< 1u, Arr64< Hash(wxS(" Liang Jiaming ")) >(), wxS(" Adding formatter for fpos ") > >() },
    { "p3375r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Reproducible floatingpoint results ") >, Rev< 1u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Reproducible floatingpoint results ") >, Rev< 2u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Reproducible floatingpoint results ") >, Rev< 3u, Arr64< Hash(wxS(" Guy Davidson ")) >(), wxS(" Reproducible floatingpoint results ") > >() },
    { "p3376r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Contract assertions versus static analysis and safety ") > >() },
    { "p3378r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr exception types ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr exception types ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr exception types ") > >() },
    { "p3379r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" Constrain stdexpected equality operators ") > >() },
    { "p3380r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Extending support for class types as nontype template parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Extending support for class types as nontype template parameters ") > >() },
    { "p3381r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Andrew Sutton Faisal Vali Daveed Vandevoorde Dan Katz ")) >(), wxS(" Syntax for Reflection ") > >() },
    { "p3382r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Antony Polukhin ")) >(), wxS(" Coarse clocks and resolutions ") > >() },
    { "p3383r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephan Lachnit Xavier Bonaventura ")) >(), wxS(" mdspanat ") >, Rev< 1u, Arr64< Hash(wxS(" Stephan Lachnit Xavier Bonaventura ")) >(), wxS(" mdspanat ") >, Rev< 2u, Arr64< Hash(wxS(" Stephan Lachnit Xavier Bonaventura ")) >(), wxS(" mdspanat ") > >() },
    { "p3384r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Rifkin ")) >(), wxS(" COUNTER ") > >() },
    { "p3385r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aurelien Cassagnes Aurelien Cassagnes Roman Khoroshikh Anders Johansson ")) >(), wxS(" Attributes reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Aurelien Cassagnes Roman Khoroshikh Anders Johansson ")) >(), wxS(" Attributes reflection ") >, Rev< 2u, Arr64< Hash(wxS(" Aurelien Cassagnes Roman Khoroshikh Anders Johansson ")) >(), wxS(" Attributes reflection ") >, Rev< 3u, Arr64< Hash(wxS(" Aurelien Cassagnes Roman Khoroshikh Anders Johansson ")) >(), wxS(" Attributes reflection ") >, Rev< 4u, Arr64< Hash(wxS(" Aurelien Cassagnes ")) >(), wxS(" Attributes reflection ") >, Rev< 5u, Arr64< Hash(wxS(" Aurelien Cassagnes ")) >(), wxS(" Attributes reflection ") > >() },
    { "p3386r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Static Analysis of Contracts with P ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Static Analysis of Contracts with P ") > >() },
    { "p3387r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Iain Sandoe Peter Bindels ")) >(), wxS(" Contract assertions on coroutines ") > >() },
    { "p3388r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" When Do You Know connect Doesnt Throw ") >, Rev< 1u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" When Do You Know connect Doesnt Throw ") >, Rev< 2u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" When Do You Know connect Doesnt Throw ") > >() },
    { "p3389r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Of Operation States and Their Lifetimes LEWG Presentation  ") > >() },
    { "p3390r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sean Baxter Christian Mazakas ")) >(), wxS(" Safe C ") > >() },
    { "p3391r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr stdformat ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" constexpr stdformat ") > >() },
    { "p3392r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Inbal Levi ")) >(), wxS(" Do not promise support for function syntax of operators ") > >() },
    { "p3394r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Dan Katz ")) >(), wxS(" Annotations for Reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Dan Katz Barry Revzin ")) >(), wxS(" Annotations for Reflection ") >, Rev< 2u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Dan Katz Barry Revzin ")) >(), wxS(" Annotations for Reflection ") >, Rev< 3u, Arr64< Hash(wxS(" Daveed Vandevoorde Wyatt Childers Dan Katz Barry Revzin ")) >(), wxS(" Annotations for Reflection ") > >() },
    { "p3395r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Formatting of stderrorcode ") >, Rev< 1u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix encoding issues and add a formatter for stderrorcode ") >, Rev< 2u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix encoding issues and add a formatter for stderrorcode ") >, Rev< 3u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix encoding issues and add a formatter for stderrorcode ") >, Rev< 4u, Arr64< Hash(wxS(" Victor Zverovich ")) >(), wxS(" Fix encoding issues and add a formatter for stderrorcode ") > >() },
    { "p3396r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" stdexecution wording fixes ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" stdexecution wording fixes ") > >() },
    { "p3397r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Clarify requirements on extended floating point types ") > >() },
    { "p3398r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson ")) >(), wxS(" User specified type decay ") > >() },
    { "p3399r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Corentin Jabot Nevin Liber Robert Leahy Khalil Estell ")) >(), wxS(" Adjusting Electronic Polls to a Hybrid Workflow ") > >() },
    { "p3400r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Specifying Contract Assertion Properties with Labels ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne ")) >(), wxS(" Specifying Contract Assertion Properties with Labels ") > >() },
    { "p3401r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tian Liao Mingxin Wang ")) >(), wxS(" Enrich Creation Functions for the PointerSemanticsBased Polymorphism Library  Proxy ") > >() },
    { "p3402r0", RevList< Rev< 0u, Arr64< Hash(wxS(" MarcAndr Laverdire Christopher Lapkowski CharlesHenri Gros ")) >(), wxS(" A Safety Profile Verifying Class Initialization ") >, Rev< 1u, Arr64< Hash(wxS(" MarcAndr Laverdire Christopher Lapkowski CharlesHenri Gros ")) >(), wxS(" A Safety Profile Verifying Class Initialization ") >, Rev< 2u, Arr64< Hash(wxS(" MarcAndr Laverdire Christopher Lapkowski CharlesHenri Gros ")) >(), wxS(" A Safety Profile Verifying Initialization ") >, Rev< 3u, Arr64< Hash(wxS(" MarcAndr Laverdire Christopher Lapkowski CharlesHenri Gros ")) >(), wxS(" A Safety Profile Verifying Initialization ") > >() },
    { "p3403r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrew Tomazos ")) >(), wxS(" The Undefined Behavior Question ") > >() },
    { "p3404r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andre Kostur ")) >(), wxS(" stdat  Rangechecked accesses to arbitrary containers ") > >() },
    { "p3405r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Elias Kosunen ")) >(), wxS(" Outoforder designated initializers ") > >() },
    { "p3406r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" We need better performance testing ") > >() },
    { "p3407r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Make idiomatic usage of offsetof welldefined ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Make idiomatic usage of offsetof welldefined ") > >() },
    { "p3409r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Enabling more efficient stoptoken based cancellation of senders ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Enabling more efficient stoptoken based cancellation of senders ") > >() },
    { "p3411r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz Louis Dionne ")) >(), wxS(" anyview ") >, Rev< 1u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz Louis Dionne ")) >(), wxS(" anyview ") >, Rev< 2u, Arr64< Hash(wxS(" Hui Xie S Levent Yilmaz Louis Dionne Patrick Roberts ")) >(), wxS(" anyview ") > >() },
    { "p3412r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bengt Gustafsson Victor Zverovich ")) >(), wxS(" String interpolation ") >, Rev< 1u, Arr64< Hash(wxS(" Bengt Gustafsson Victor Zverovich ")) >(), wxS(" String interpolation ") >, Rev< 2u, Arr64< Hash(wxS(" Bengt Gustafsson Victor Zverovich ")) >(), wxS(" String interpolation ") > >() },
    { "p3413r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" A more flexible optionalvalueor else ") > >() },
    { "p3415r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Range interface in stdoptional breaks code ") > >() },
    { "p3416r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" exceptionptrcast Add ampamp  delete overload ") > >() },
    { "p3417r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman Timur Doumler ")) >(), wxS(" Improving the handling of exceptions thrown from contract predicates ") >, Rev< 1u, Arr64< Hash(wxS(" Gaper Aman Timur Doumler ")) >(), wxS(" Handling exceptions thrown from contract predicates ") > >() },
    { "p3419r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Levine ")) >(), wxS(" Reflection Syntax Options Summary ") > >() },
    { "p3420r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrei Alexandrescu Barry Revzin Daveed Vandevoorde Michael Garland ")) >(), wxS(" Reflection of Templates ") >, Rev< 1u, Arr64< Hash(wxS(" Andrei Alexandrescu Barry Revzin Daveed Vandevoorde Michael Garland ")) >(), wxS(" Reflection of Templates ") > >() },
    { "p3421r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ben Craig ")) >(), wxS(" Consteval destructors ") > >() },
    { "p3422r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow main function in named modules ") >, Rev< 1u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow main function in named modules ") > >() },
    { "p3423r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" Extending UserGenerated Diagnostic Messages ") >, Rev< 1u, Arr64< Hash(wxS(" Yihe Li ")) >(), wxS(" Extending UserGenerated Diagnostic Messages ") > >() },
    { "p3424r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Define Delete With Throwing Exception Specification ") > >() },
    { "p3425r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Reducing operationstate sizes for subobject child operations ") >, Rev< 1u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Reducing operationstate sizes for subobject child operations ") > >() },
    { "p3427r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Synchronous Reclamation ") >, Rev< 1u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Synchronous Reclamation ") > >() },
    { "p3428r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Batches ") >, Rev< 1u, Arr64< Hash(wxS(" Maged Michael Michael Wong Paul McKenney ")) >(), wxS(" Hazard Pointer Batches ") > >() },
    { "p3429r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" Reflection header should minimize standard library dependencies ") >, Rev< 1u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" Reflection header should minimize standard library dependencies ") > >() },
    { "p3430r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" simd issues explicit unsequenced identityelement position and members of disabled simd ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" simd issues explicit unsequenced identityelement position and members of disabled simd ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" simd issues explicit unsequenced identityelement position and members of disabled simd ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" simd issues explicit unsequenced identityelement position and members of disabled simd ") > >() },
    { "p3431r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" Deprecate constqualifier on beginend of views ") > >() },
    { "p3433r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dietmar Kuehl ")) >(), wxS(" Allocator Support for Operation States ") > >() },
    { "p3435r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanBaptiste VALLON HOARAU Joel FALCOU ")) >(), wxS(" Reflection and metaprogramming ") > >() },
    { "p3436r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Strategy for removing safetyrelated undefined behavior by default ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Strategy for removing safetyrelated undefined behavior by default ") > >() },
    { "p3437r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Proposed default principles Reflect C Generate C ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Proposed principles Reflect C generate C by default ") > >() },
    { "p3438r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andreas Fertig ")) >(), wxS(" Make integral overloads of stdtostring constexpr ") > >() },
    { "p3439r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Chained comparisons Safe correct efficient ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Chained comparisons Safe correct efficient ") >, Rev< 2u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Chained comparisons Safe correct efficient ") > >() },
    { "p3440r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Add nelements named constructor to stdsimd ") > >() },
    { "p3441r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Rename simdsplit to simdchunk ") >, Rev< 1u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Rename simdsplit to simdchunk ") >, Rev< 2u, Arr64< Hash(wxS(" Daniel Towner Ruslan Arutyunyan ")) >(), wxS(" Rename simdsplit to simdchunk ") > >() },
    { "p3442r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy Nicolas Fleury ")) >(), wxS(" invalidatedereferencing attribute ") >, Rev< 1u, Arr64< Hash(wxS(" Patrice Roy Nicolas Fleury ")) >(), wxS(" invalidatedereferencing attribute ") >, Rev< 2u, Arr64< Hash(wxS(" Patrice Roy Nicolas Fleury ")) >(), wxS(" invalidatedereferencing attribute ") > >() },
    { "p3443r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ran Regev ")) >(), wxS(" Reflection on SG  Process ") > >() },
    { "p3444r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Sean Baxter ")) >(), wxS(" Memory safety without lifetime parameters ") > >() },
    { "p3445r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Towner ")) >(), wxS(" Add utilities for easier typebit casting in stdsimd ") > >() },
    { "p3446r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Profile invalidation  eliminating dangling pointers ") > >() },
    { "p3447r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Profiles syntax ") > >() },
    { "p3449r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr stdgenerator ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr stdgenerator ") > >() },
    { "p3450r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Extending iswithinlifetime ") > >() },
    { "p3451r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" A Suggestion for Reflection Access Control ") > >() },
    { "p3454r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong Gonzalo Brito Fedor Pikus Maged Michael ")) >(), wxS(" Revising Atomic MaxMin Operations ") > >() },
    { "p3455r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes  ") > >() },
    { "p3456r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gor Nishanov ")) >(), wxS(" systemscheduler on Win Darwin and Linux ") > >() },
    { "p3457r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3460r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Fiselier Nina Dinka Ranns Iain Sandoe ")) >(), wxS(" Contracts Implementors Report ") > >() },
    { "p3465r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Pursue P as a Lifetime TS ") > >() },
    { "p3466r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Reaffirm design principles for future C evolution ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter ")) >(), wxS(" Reaffirm design principles for future C evolution ") > >() },
    { "p3467r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3468r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Ben Craig Nevin Liber Billy Baker Corentin Jabot ")) >(), wxS("  Library Evolution Poll Outcomes ") > >() },
    { "p3469r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mike Spertus ")) >(), wxS(" Virtual deducing this ") > >() },
    { "p3470r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daniel Ruoso ")) >(), wxS(" InterfaceUnitOnly Module Library Support ") > >() },
    { "p3471r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne ")) >(), wxS(" Standard library hardening ") >, Rev< 1u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne ")) >(), wxS(" Standard Library Hardening ") >, Rev< 2u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne ")) >(), wxS(" Standard Library Hardening ") >, Rev< 3u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne ")) >(), wxS(" Standard Library Hardening ") >, Rev< 4u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne ")) >(), wxS(" Standard Library Hardening ") > >() },
    { "p3472r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Make fibercontextcanresume const ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Make fibercontextcanresume const ") > >() },
    { "p3473r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Splicing Should Respect Access Control ") > >() },
    { "p3474r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Rifkin ")) >(), wxS(" stdarguments ") > >() },
    { "p3475r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Defang and deprecate memoryorderconsume ") >, Rev< 1u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Defang and deprecate memoryorderconsume ") >, Rev< 2u, Arr64< Hash(wxS(" Hans Boehm ")) >(), wxS(" Defang and deprecate memoryorderconsume ") > >() },
    { "p3476r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park ")) >(), wxS(" Slides for a hrefprhtmlPRa  Pattern Matching match Expression ") > >() },
    { "p3477r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") >, Rev< 1u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") >, Rev< 2u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") >, Rev< 3u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") >, Rev< 4u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") >, Rev< 5u, Arr64< Hash(wxS(" JF Bastien ")) >(), wxS(" There are exactly  bits in a byte ") > >() },
    { "p3478r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Spicer ")) >(), wxS(" Constification should not be part of the MVP ") > >() },
    { "p3479r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Cranmer ")) >(), wxS(" Enabling C pragma support in C ") > >() },
    { "p3480r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") >, Rev< 2u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") >, Rev< 3u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") >, Rev< 4u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") >, Rev< 5u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" stdsimd is a range ") > >() },
    { "p3481r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Lewis Baker Ruslan Arutyunyan ")) >(), wxS(" Summarizing stdexecutionbulk issues ") >, Rev< 1u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lewis Baker ")) >(), wxS(" stdexecutionbulk issues ") >, Rev< 2u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lewis Baker ")) >(), wxS(" stdexecutionbulk issues ") >, Rev< 3u, Arr64< Hash(wxS(" Lucian Radu Teodorescu Ruslan Arutyunyan Lewis Baker Mark Hoemmen ")) >(), wxS(" stdexecutionbulk issues ") > >() },
    { "p3482r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas W Rodgers Dietmar Kuhl ")) >(), wxS(" Proposed API for creating TAPS based networking connections ") >, Rev< 1u, Arr64< Hash(wxS(" Thomas Rodgers Woven By Toyota thomasrodgerswovenplanetglobal Dietmar Khl Bloomberg dkuhlbloombergnet ")) >(), wxS(" Design for C networking based on IETF TAPS ") > >() },
    { "p3483r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Contracts for C PreWroclaw technical clarifications ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Contracts for C PreWroclaw technical clarifications ") > >() },
    { "p3484r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Postconditions odrusing a parameter modified in an overriding function ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Postconditions odrusing a parameter modified in an overriding function ") >, Rev< 2u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Postconditions odrusing a parameter modified in an overriding function ") > >() },
    { "p3485r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Grouping using declarations with braces ") > >() },
    { "p3487r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Postconditions odrusing a parameter that may be passed in registers ") > >() },
    { "p3488r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" FloatingPoint Excess Precision ") >, Rev< 1u, Arr64< Hash(wxS(" Matthias Kretz ")) >(), wxS(" FloatingPoint Excess Precision ") > >() },
    { "p3489r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne ")) >(), wxS(" Postconditions odrusing a parameter of dependent type ") > >() },
    { "p3490r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexey Kukanov Ruslan Arutyunyan ")) >(), wxS(" Justification for ranges as the output of parallel range algorithms ") > >() },
    { "p3491r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov Daveed Vandevoorde Dan Katz ")) >(), wxS(" definestaticstringobjectarray ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Daveed Vandevoorde ")) >(), wxS(" definestaticstringobjectarray ") >, Rev< 2u, Arr64< Hash(wxS(" Barry Revzin Wyatt Childers Peter Dimov Daveed Vandevoorde ")) >(), wxS(" definestaticstringobjectarray ") > >() },
    { "p3492r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Sized deallocation for placement new ") >, Rev< 1u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Sized deallocation for placement new ") >, Rev< 2u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Sized deallocation for placement new ") > >() },
    { "p3493r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Ruminations on reflection and access ") > >() },
    { "p3495r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Oliver Rosten Mark Hoemmen ")) >(), wxS(" Remarks on Basic Statistics  a hrefprpdfPRa ") > >() },
    { "p3496r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" ImmediateEscalating Expressions ") > >() },
    { "p3497r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Wilmans ")) >(), wxS(" Guarded Objects ") > >() },
    { "p3498r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis Thomas Wise Zachary Henkel ")) >(), wxS(" Stop the Bleeding but First Do No Harm ") > >() },
    { "p3499r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lisa Lippincott Timur Doumler Joshua Berne ")) >(), wxS(" Exploring strict contract predicates ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Lisa Lippincott Joshua Berne ")) >(), wxS(" Exploring strict contract predicates ") > >() },
    { "p3500r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne ")) >(), wxS(" Are Contracts safe ") >, Rev< 1u, Arr64< Hash(wxS(" Timur Doumler Gaper Aman Joshua Berne Ryan McDougall ")) >(), wxS(" Are Contracts safe ") > >() },
    { "p3501r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" The addressing of cats ") > >() },
    { "p3502r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Slides for DR  Contracts for C ") > >() },
    { "p3503r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nicolas Morales Jonathan Wakely ")) >(), wxS(" Make typeerased allocator use in promise and packagedtask consistent ") >, Rev< 1u, Arr64< Hash(wxS(" Nicolas Morales Jonathan Wakely ")) >(), wxS(" Make typeerased allocator use in promise and packagedtask consistent ") >, Rev< 2u, Arr64< Hash(wxS(" Nicolas Morales Jonathan Wakely ")) >(), wxS(" Make typeerased allocator use in promise and packagedtask consistent ") > >() },
    { "p3504r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Wroclaw Nov  ") > >() },
    { "p3505r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Junekey Jeon ")) >(), wxS(" Fix the default floatingpoint representation in stdformat ") > >() },
    { "p3506r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" P Is Still not Ready for C ") > >() },
    { "p3508r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo Michael Schellenberger Costa ")) >(), wxS(" Wording for constexpr for specialized memory algorithms ") > >() },
    { "p3510r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nathan Myers Gaper Aman ")) >(), wxS(" Leftover properties of this in constructor preconditions ") >, Rev< 1u, Arr64< Hash(wxS(" Nathan Myers Gaper Aman ")) >(), wxS(" Leftover properties of this in constructor preconditions ") >, Rev< 2u, Arr64< Hash(wxS(" Nathan Myers Gaper Aman ")) >(), wxS(" Leftover properties of this in constructor preconditions ") > >() },
    { "p3514r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" RFC  The Security Flag for C ") > >() },
    { "p3516r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne Giuseppe DAngelo ")) >(), wxS(" Uninitialized algorithms for relocation ") >, Rev< 1u, Arr64< Hash(wxS(" Louis Dionne Giuseppe DAngelo ")) >(), wxS(" Uninitialized algorithms for relocation ") >, Rev< 2u, Arr64< Hash(wxS(" Louis Dionne Giuseppe DAngelo ")) >(), wxS(" Uninitialized algorithms for relocation ") > >() },
    { "p3517r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Slides presented to LEWG on trivial relocation in Wroclaw ") > >() },
    { "p3518r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gaper Aman ")) >(), wxS(" Slides for Standardized Constexpr Type Ordering ") > >() },
    { "p3519r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lewis Baker ")) >(), wxS(" Slides for P presentation to LEWG ") > >() },
    { "p3520r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler Joshua Berne Andrzej Krzemieski ")) >(), wxS(" Wroclaw Technical Fixes to Contracts ") > >() },
    { "p3521r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park Zach Laine ")) >(), wxS(" Pattern Matching Customization Point for Open Sum Types ") > >() },
    { "p3524r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the November  meeting ") > >() },
    { "p3525r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Explicit Implicit Template Regions ") > >() },
    { "p3526r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels Eric Fiselier ")) >(), wxS(" Container truncation ") > >() },
    { "p3527r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Park Zach Laine ")) >(), wxS(" Pattern Matching variantlike and stdexpected ") >, Rev< 1u, Arr64< Hash(wxS(" Michael Park Zach Laine ")) >(), wxS(" Pattern Matching variantlike and stdexpected ") > >() },
    { "p3530r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Boleyn Su Gaper Aman ")) >(), wxS(" Intrinsic for reading uninitialized memory ") > >() },
    { "p3533r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr virtual inheritance ") >, Rev< 1u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr virtual inheritance ") >, Rev< 2u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" constexpr virtual inheritance ") > >() },
    { "p3534r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Avoid UB When Compiling Code That Violates Library Specification ") > >() },
    { "p3537r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Presentation on Concurrent Queue API LEWG Telecon Dec ") >, Rev< 1u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Presentation on Concurrent Queue API ") > >() },
    { "p3539r0", RevList< Rev< 1u, Arr64< Hash(wxS(" Pawe Benetkiewicz ")) >(), wxS(" Consistent Function Label Naming for Sections ") > >() },
    { "p3540r0", RevList< Rev< 0u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed Parameter offset ") >, Rev< 1u, Arr64< Hash(wxS(" JeanHeyd Meneide ")) >(), wxS(" embed Parameter offset ") > >() },
    { "p3541r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Violation handlers vs noexcept ") >, Rev< 1u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Violation handlers vs noexcept ") > >() },
    { "p3542r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Abolish the term converting constructor ") > >() },
    { "p3543r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mungo Gill Corentin Jabot John Lakos Joshua Berne Timur Doumler ")) >(), wxS(" Response to Core Safety Profiles P ") > >() },
    { "p3544r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hewill Kang ")) >(), wxS(" rangesto view ") > >() },
    { "p3546r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Mejstrik ")) >(), wxS(" Explicit return type deduction for stdnumericlimits and numbers ") > >() },
    { "p3547r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Katz Ville Voutilainen ")) >(), wxS(" Modeling Access Control With Reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Dan Katz Ville Voutilainen ")) >(), wxS(" Modeling Access Control With Reflection ") > >() },
    { "p3548r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Niall Douglas ")) >(), wxS(" P stdfilesystempathview forward progress options ") > >() },
    { "p3549r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Michael Park Zach Laine Bruno Cardoso Lopes ")) >(), wxS(" Diverging expressions ") > >() },
    { "p3550r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Imports cannot  ") > >() },
    { "p3552r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dietmar Khl Maikel Nadolski ")) >(), wxS(" Add a Coroutine Lazy Type ") >, Rev< 1u, Arr64< Hash(wxS(" Dietmar Khl Maikel Nadolski ")) >(), wxS(" Add a Coroutine Task Type ") >, Rev< 2u, Arr64< Hash(wxS(" Dietmar Khl Maikel Nadolski ")) >(), wxS(" Add a Coroutine Task Type ") > >() },
    { "p3554r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov ")) >(), wxS(" Nontransient allocation with vector and basicstring ") > >() },
    { "p3555r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" An infinite range concept ") > >() },
    { "p3556r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" Input files are source files ") >, Rev< 1u, Arr64< Hash(wxS(" Alisdair Meredith Lori Hughes ")) >(), wxS(" Input files are source files ") > >() },
    { "p3557r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" HighQuality Sender Diagnostics with Constexpr Exceptions ") >, Rev< 1u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" HighQuality Sender Diagnostics with Constexpr Exceptions ") >, Rev< 2u, Arr64< Hash(wxS(" Eric Niebler ")) >(), wxS(" HighQuality Sender Diagnostics with Constexpr Exceptions ") > >() },
    { "p3558r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Core Language Contracts By Default ") >, Rev< 1u, Arr64< Hash(wxS(" Joshua Berne John Lakos ")) >(), wxS(" Core Language Contracts By Default ") > >() },
    { "p3559r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Trivial relocation One trait or two ") > >() },
    { "p3560r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov ")) >(), wxS(" Error Handling in Reflection ") >, Rev< 1u, Arr64< Hash(wxS(" Barry Revzin Peter Dimov ")) >(), wxS(" Error Handling in Reflection ") > >() },
    { "p3561r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Esa Pulkkinen ")) >(), wxS(" Index based coproduct operations on variant and library wording ") >, Rev< 1u, Arr64< Hash(wxS(" Esa Pulkkinen ")) >(), wxS(" Index based coproduct operations on variant and library wording ") >, Rev< 2u, Arr64< Hash(wxS(" Esa Pulkkinen ")) >(), wxS(" Index based coproduct operations on variant and library wording ") > >() },
    { "p3564r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen Bryce Adelstein LelbachMichael Garland ")) >(), wxS(" Make the concurrent forward progress guarantee usable in bulk ") > >() },
    { "p3565r0", RevList< Rev< 0u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Virtual floatingpoint values ") >, Rev< 1u, Arr64< Hash(wxS(" S Davis Herring ")) >(), wxS(" Virtual floatingpoint values ") > >() },
    { "p3566r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marco Foco ")) >(), wxS(" You shall not pass char  Safety concerns working with unbounded nullterminated strings ") >, Rev< 1u, Arr64< Hash(wxS(" Marco Foco ")) >(), wxS(" You shall not pass char  Safety concerns working with unbounded nullterminated strings ") > >() },
    { "p3567r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hui Xie Louis Dionne Arthur ODwyer ")) >(), wxS(" flatmeow Fixes ") > >() },
    { "p3568r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke Sarah Quiones ")) >(), wxS(" break label and continue label ") >, Rev< 1u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" break label and continue label ") > >() },
    { "p3569r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Shafik Yaghmour Aaron Ballman Erich Keane Corentin Jabot Vlad Serebrennikov ")) >(), wxS(" Split defineaggregate from Reflection ") > >() },
    { "p3570r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Fabio Fracassi ")) >(), wxS(" optional variants in senderreceiver ") >, Rev< 1u, Arr64< Hash(wxS(" Fabio Fracassi ")) >(), wxS(" optional variants in senderreceiver ") > >() },
    { "p3572r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Pattern matching ") > >() },
    { "p3573r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup Michael Hava J Daniel Garcia Sanchez  Ran Regev Gabriel Dos Reis John Spicer JC van Winkel David Vandevoorde Ville Voutilainen ")) >(), wxS(" Contract concerns ") > >() },
    { "p3574r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Constexpr Callables ") > >() },
    { "p3575r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes  ") > >() },
    { "p3576r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3577r0", RevList< Rev< 0u, Arr64< Hash(wxS(" John Lakos ")) >(), wxS(" Require a nonthrowing default contractviolation handler ") > >() },
    { "p3578r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ryan McDougall ")) >(), wxS(" Language Safety and Grandma Safety ") > >() },
    { "p3579r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Fix matching of nontype template parameters when matching template template parameters ") >, Rev< 1u, Arr64< Hash(wxS(" Matheus Izvekov ")) >(), wxS(" Fix matching of nontype template parameters when matching template template parameters ") > >() },
    { "p3580r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alan Talbot ")) >(), wxS(" The Naming of Things ") > >() },
    { "p3581r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" No inplacevector shouldnt have an Allocator ") > >() },
    { "p3582r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Observed a contract violation Skip subsequent assertions ") > >() },
    { "p3583r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" Contracts Types amp Functions ") > >() },
    { "p3584r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mingxin Wang ")) >(), wxS(" Enrich Facade Creation Facilities for the PointerSemanticsBased Polymorphism Library  Proxy ") > >() },
    { "p3585r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Pablo Halpern ")) >(), wxS(" allocatortraitsisinternallyrelocatable ") > >() },
    { "p3586r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" The Plethora of Problems With Profiles ") > >() },
    { "p3587r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lauri Vasama ")) >(), wxS(" Reconsider reflection access for C ") > >() },
    { "p3588r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Allow static data members in local and unnamed classes ") >, Rev< 1u, Arr64< Hash(wxS(" Brian Bi ")) >(), wxS(" Allow static data members in local and unnamed classes ") > >() },
    { "p3589r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Profiles The Framework ") >, Rev< 1u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Profiles The Framework ") >, Rev< 2u, Arr64< Hash(wxS(" Gabriel Dos Reis ")) >(), wxS(" C Profiles The Framework ") > >() },
    { "p3590r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Daveed Vandevoorde ")) >(), wxS(" Constexpr Coroutines Burdens ") > >() },
    { "p3591r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler ")) >(), wxS(" Contextualizing Contracts Concerns ") > >() },
    { "p3592r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler ")) >(), wxS(" Resolving Concerns with constification ") > >() },
    { "p3599r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Berne Timur Doumler ")) >(), wxS(" Initial Implicit Contract Assertions ") > >() },
    { "p3603r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" Constevalonly Values and Consteval Variables ") > >() },
    { "p3605r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nikita Sakharin ")) >(), wxS(" isqrt A function to calculate integer square root of the nonnegative integer ") > >() },
    { "p3606r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot Younan Zhang ")) >(), wxS(" On Overload Resolution Exact Matches and Clever Implementations ") > >() },
    { "p3608r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Contracts and profiles what can we reasonably ship in C ") > >() },
    { "p3611r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Dealing with pointer errors Separating static and dynamic checking ") > >() },
    { "p3613r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Tim Song ")) >(), wxS(" On the beating of horses and other matters ") > >() },
    { "p3614r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Do not remove nor postpone accesscontextunchecked ") > >() },
    { "p3615r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Wakely ")) >(), wxS(" C Standard Library Ready Issues to be moved in Hagenberg Feb  ") > >() },
    { "p3616r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ville Voutilainen ")) >(), wxS(" Remove contracts on virtual functions for now ") > >() },
    { "p3617r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Barry Revzin ")) >(), wxS(" stdmetareflectconstantarraystring ") > >() },
    { "p3618r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Allow attaching main to the global module ") > >() },
    { "p3619r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Vlad Serebrennikov Tymofii Kutlov Sergey Anisimov ")) >(), wxS(" Counterexamples for a hrefprhtmlPRa ") >, Rev< 1u, Arr64< Hash(wxS(" Vlad Serebrennikov Tymofii Kutlov Sergey Anisimov ")) >(), wxS(" Counterexamples for a hrefprhtmlPRa ") > >() },
    { "p3620r0", RevList< Rev< 0u, Arr64< Hash(wxS(" David Chisnall Matthew Taylor ")) >(), wxS(" Concerns with the proposed addition of fibers to C  ") > >() },
    { "p3623r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Arthur ODwyer ")) >(), wxS(" Add noexcept to iteratorrange LWG  ") > >() },
    { "p3625r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Florian Hava ")) >(), wxS(" either neither ") > >() },
    { "p3626r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Timur Doumler ")) >(), wxS(" Make predicate exceptions propagate by default ") > >() },
    { "p3627r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ulfar Erlingsson ")) >(), wxS(" Easytoadopt security profiles for preventing RCE remote code execution in existing C code ") > >() },
    { "p3628r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" break label and continue label tl dr ") > >() },
    { "p3630r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Slides for a hrefprhtmlPRa ") > >() },
    { "p3631r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Louis Dionne Giuseppe DAngelo ")) >(), wxS(" Cleaning up the trivial relocation APIs in C ") > >() },
    { "p3632r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" a hrefprhtmlPRa Make the concurrent forward progress guarantee usable in bulk ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" a hrefprhtmlPRa Make the concurrent forward progress guarantee usable in bulk ") > >() },
    { "p3633r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Murat Can Cagri ")) >(), wxS(" A Byte is a Byte ") > >() },
    { "p3635r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" We shouldnt rush to require either CHARBIT or uintNNt ") > >() },
    { "p3636r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Nevin Liber ")) >(), wxS(" LEWG Hagenberg presentation for P No inplacevector shouldnt have an Allocator ") > >() },
    { "p3637r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Victor Zverovich Nevin Liber Michael Hava ")) >(), wxS(" Inherit stdmetaexception from stdexception ") > >() },
    { "p3638r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jens Maurer ")) >(), wxS(" Core Language Working Group ready Issues for the February  meeting ") > >() },
    { "p3639r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" The BitInt Debate ") > >() },
    { "p3640r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonas Persson ")) >(), wxS(" Make contracts reliable by default ") > >() },
    { "p3641r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Rename stdobservable to stdobservablecheckpoint and add a featuretest macro ") > >() },
    { "p3642r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Carryless product stdclmul ") > >() },
    { "p3643r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" stdtosigned and stdtounsigned ") > >() },
    { "p3649r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jonathan Mller ")) >(), wxS(" A principled approach to safety profiles ") > >() },
    { "p3650r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" st Century C ") > >() },
    { "p3651r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" Note to the C standards committee members ") > >() },
    { "p3652r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Lnrd Szolnoki ")) >(), wxS(" Constexpr floatingpoint ltcharconvgt functions ") >, Rev< 1u, Arr64< Hash(wxS(" Lnrd Szolnoki ")) >(), wxS(" Constexpr floatingpoint ltcharconvgt functions ") > >() },
    { "p3654r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Giuseppe DAngelo Louis Dionne ")) >(), wxS(" Slides for P ") > >() },
    { "p3655r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels Hana Dusikova Jeremy Rifkin ")) >(), wxS(" zstringview ") >, Rev< 1u, Arr64< Hash(wxS(" Peter Bindels Hana Dusikova Jeremy Rifkin ")) >(), wxS(" zstringview ") > >() },
    { "p3656r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Herb Sutter Gaper Aman ")) >(), wxS(" Initial draft proposal for core language UB white paper Process and major work items ") >, Rev< 1u, Arr64< Hash(wxS(" Herb Sutter Gaper Aman ")) >(), wxS(" Initial draft proposal for core language UB white paper Process and major work items ") > >() },
    { "p3657r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alisdair Meredith ")) >(), wxS(" A Grammar for Whitespace Characters ") > >() },
    { "p3658r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robin Leroy ")) >(), wxS(" Adjust identifier following new Unicode recommendations ") >, Rev< 1u, Arr64< Hash(wxS(" Robin Leroy ")) >(), wxS(" Adjust identifier following new Unicode recommendations ") > >() },
    { "p3660r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Rifkin ")) >(), wxS(" Improve referencewrapper Ergonomics ") > >() },
    { "p3661r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Andrzej Krzemieski ")) >(), wxS(" Attributes annotations labels ") > >() },
    { "p3662r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Rifkin ")) >(), wxS(" Improve Increment and Decrement Operator Syntax ") > >() },
    { "p3663r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Futureproof submdspanmapping ") >, Rev< 1u, Arr64< Hash(wxS(" Mark Hoemmen ")) >(), wxS(" Futureproof submdspanmapping ") > >() },
    { "p3664r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Zach Laine ")) >(), wxS(" Make variantsize SFINAE friendly ") > >() },
    { "p3665r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jeremy Rifkin Levi de koning ")) >(), wxS(" Vertical Text Processing ") > >() },
    { "p3667r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jose Daniel Garcia ")) >(), wxS(" Extending rangefor loop with an expression statement ") > >() },
    { "p3668r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthew Taylor Alex ")) >(), wxS(" Defaulting Postfix Increment and Decrement Operations ") >, Rev< 1u, Arr64< Hash(wxS(" Matthew Taylor Alex ")) >(), wxS(" Defaulting Postfix Increment and Decrement Operations ") > >() },
    { "p3669r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" NonBlocking Support for stdexecution ") >, Rev< 1u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" NonBlocking Support for stdexecution ") > >() },
    { "p3670r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Pack Indexing for Template Names ") >, Rev< 1u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Pack Indexing for Template Names ") > >() },
    { "p3671r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Clarifying the interaction of the literal and execution encodings ") > >() },
    { "p3672r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" On Windows Systems APIs Text Encodings and Pragmatism ") > >() },
    { "p3676r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Stephen Berry Khalil Estell ")) >(), wxS(" Enhanced inline Keyword with Configurable Inlining Levels ") > >() },
    { "p3677r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" Preserving LCCTYPE at program start for UTF locales ") > >() },
    { "p3678r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Aurelien Cassagnes ")) >(), wxS(" Arbitrary attributes in defineaggregate ") > >() },
    { "p3679r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Hana Duskov ")) >(), wxS(" SFINAEable constexpr exceptions ") > >() },
    { "p3681r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Corentin Jabot ")) >(), wxS(" chartraits Stop the bleeding ") > >() },
    { "p3682r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Remove stdexecutionsplit ") > >() },
    { "p3685r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Robert Leahy ")) >(), wxS(" Rename asyncscopetoken ") > >() },
    { "p3686r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Chuanqi Xu ")) >(), wxS(" Allow named modules to export macros ") > >() },
    { "p3687r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Dan Katz Wyatt Childers Daveed Vandevoorde Ville Voutilainen ")) >(), wxS(" Final Adjustments to C Reflection ") > >() },
    { "p3688r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke Corentin Jabot ")) >(), wxS(" ASCII character utilities ") > >() },
    { "p3689r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Thomas Mejstrik ")) >(), wxS(" Convenience functions for Random number generation ") > >() },
    { "p3690r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Olaf Krzikalla Matthias Kretz ")) >(), wxS(" Consistency fix Make simd reductions SIMDgeneric ") > >() },
    { "p3691r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Matthias Kretz Abhilash Majumder Bryce Adelstein Lelbach Daniel Towner Ilya Burylov Mark Hoemmen Ruslan Arutyunyan ")) >(), wxS(" Reconsider naming of the namespace for stdsimd ") > >() },
    { "p3692r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Paul E McKenney Alan Stern Michael Wong and Maged Michael ")) >(), wxS(" How to Avoid OOTA Without Really Trying ") > >() },
    { "p3693r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes  ") > >() },
    { "p3694r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong ")) >(), wxS(" SG Machine Learning virtual Meeting Minutes to  ") > >() },
    { "p3695r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Deprecate implicit conversions between Unicode character types ") > >() },
    { "p3696r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Spencer ")) >(), wxS(" Discovering Header Units via Module Maps ") > >() },
    { "p3697r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Konstantin Varlamov Louis Dionne Alisdair Meredith ")) >(), wxS(" Minor additions to C standard library hardening ") > >() },
    { "p3698r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Charles Hussong ")) >(), wxS(" Crosscapacity comparisons for inplacevector ") > >() },
    { "p3699r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Detlef Vollmann ")) >(), wxS(" Rename conqueueerrc ") > >() },
    { "p3700r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" Making Safe C happen ") > >() },
    { "p3701r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Concepts for integer types not integral types ") > >() },
    { "p3702r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Jan Schultke ")) >(), wxS(" Stricter requirements for document submissions SD ") > >() },
    { "p3703r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Yoaodan Zhang Alec Cepeda Alexander Buzanis Charlie Sabino Cory Turnbaugh Guanduo Mu Hongli Zhao Joneskim Kimo Matthias Zajdela Mitch Verhelle PierrYves Sojic Steven Arellana Roshan Surabhi Wei Cai Mike Spertus ")) >(), wxS(" Constness and Locking ") > >() },
    { "p3704r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Bjarne Stroustrup ")) >(), wxS(" What are profiles ") > >() },
    { "p3705r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Eddie Nolan ")) >(), wxS(" A Sentinel for NullTerminated Strings ") > >() },
    { "p3706r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Ville Voutilainen ")) >(), wxS(" Rename join and nest in asyncscope proposal ") > >() },
    { "p3707r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Patrice Roy Gregoire Angerand ")) >(), wxS(" A stdisalwaysexhaustive trait ") > >() },
    { "p3709r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Ruslan Arutyunyan Alexey Kukanov ")) >(), wxS(" Reconsider parallel rangesrotatecopy and rangesreversecopy ") > >() },
    { "p3710r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Alexey Shevlyakov Marco Foco Joshua Krieghauser ")) >(), wxS(" zstringview a stringview with guaranteed null termination ") > >() },
    { "p3711r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Marco Foco Alexey Shevlyakov Joshua Kriegshauser ")) >(), wxS(" Safer StringViewLike Functions for Replacing char strings ") > >() },
    { "p3712r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Inbal Levi Fabio Fracassi Andreas Weis Billy Baker Nevin Liber Corentin Jabot ")) >(), wxS("  Library Evolution Polls ") > >() },
    { "p3714r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Cranmer ")) >(), wxS(" Virtual values have Virtual Value ") > >() },
    { "p3715r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Joshua Cranmer ")) >(), wxS(" Tightening floatingpoint semantics for C ") > >() },
    { "p3716r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Peter Bindels ")) >(), wxS(" Subsetting ") > >() },
    { "p3717r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Steve Downey ")) >(), wxS(" Update Annex E onto Unicode  ") > >() },
    { "p4000r0", RevList< Rev< 0u, Arr64< Hash(wxS(" Michael Wong H Hinnant R Orr B Stroustrup D Vandevoorde ")) >(), wxS(" To TS or not to TS that is the question ") > >() },
};
