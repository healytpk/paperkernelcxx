{
    {    1u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1903")) >(), wxS("Remove Deprecated Use of the register Keyword") > , Rev< 1u, Arr64< Hash(wxS("Author2074")) >(), wxS("Remove Deprecated Use of the register Keyword") >  >() },
    {    2u, RevList< Rev< 0u, Arr64< Hash(wxS("Author632")) >(), wxS("Remove Deprecated operator++(bool)") > , Rev< 1u, Arr64< Hash(wxS("Author1450")) >(), wxS("Remove Deprecated operator++(bool)") >  >() },
    {    3u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1811")) >(), wxS("Removing Deprecated Exception Specifications from C++17") > , Rev< 1u, Arr64< Hash(wxS("Author1513")) >(), wxS("Removing Deprecated Exception Specifications from C++17") > , Rev< 2u, Arr64< Hash(wxS("Author217")) >(), wxS("Removing Deprecated Exception Specifications from C++17") > , Rev< 3u, Arr64< Hash(wxS("Author112")) >(), wxS("Removing Deprecated Exception Specifications from C++17") > , Rev< 4u, Arr64< Hash(wxS("Author496")) >(), wxS("Removing Deprecated Exception Specifications from C++17") > , Rev< 5u, Arr64< Hash(wxS("Author1429")) >(), wxS("Removing Deprecated Exception Specifications from C++17") >  >() },
    {    4u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1167")) >(), wxS("Remove Deprecated iostreams aliases") > , Rev< 1u, Arr64< Hash(wxS("Author1592")) >(), wxS("Remove Deprecated iostreams aliases") >  >() },
    {    5u, RevList< Rev< 0u, Arr64< Hash(wxS("Author520")) >(), wxS("Adopt 'not_fn' from Library Fundamentals 2 for C++17") > , Rev< 1u, Arr64< Hash(wxS("Author387")) >(), wxS("Adopt 'not_fn' from Library Fundamentals 2 for C++17") > , Rev< 2u, Arr64< Hash(wxS("Author310")) >(), wxS("Adopt 'not_fn' from Library Fundamentals 2 for C++17") > , Rev< 3u, Arr64< Hash(wxS("Author143")) >(), wxS("Adopt 'not_fn' from Library Fundamentals 2 for C++17") > , Rev< 4u, Arr64< Hash(wxS("Author539")) >(), wxS("Adopt 'not_fn' from Library Fundamentals 2 for C++17") >  >() },
    {    6u, RevList< Rev< 0u, Arr64< Hash(wxS("Author638")) >(), wxS("Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17") >  >() },
    {    7u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1149")) >(), wxS("Constant View: A proposal for a 'std::as_const' helper function template") > , Rev< 1u, Arr64< Hash(wxS("Author935")) >(), wxS("Constant View: A proposal for a 'std::as_const' helper function template") >  >() },
    {    8u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2091")) >(), wxS("Title1622") >  >() },
    {    9u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r00 : Polymorphic Multidimensional Array View") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r1 : Polymorphic Multidimensional Array Reference") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r2 : Polymorphic Multidimensional Array Reference") > , Rev< 3u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r3 : Polymorphic Multidimensional Array Reference") > , Rev< 4u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r4 : Polymorphic Multidimensional Array Reference") > , Rev< 5u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0009r5 : Polymorphic Multidimensional Array Reference") > , Rev< 8u, Arr64< Hash(wxS("H. Carter")) >(), wxS("<code>mdspan</code>: A Non-Owning Multidimensional Array Reference") > , Rev< 9u, Arr64< Hash(wxS("H. Carter")) >(), wxS("<code>mdspan</code>: A Non-Owning Multidimensional Array Reference") > , Rev< 10u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("MDSPAN") > , Rev< 11u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("MDSPAN") > , Rev< 12u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("MDSPAN") > , Rev< 13u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") > , Rev< 14u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") > , Rev< 15u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") > , Rev< 16u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") > , Rev< 17u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") > , Rev< 18u, Arr64< Hash(wxS("1 [presumably")) >(), wxS("MDSPAN") >  >() },
    {   10u, RevList< Rev< 0u, Arr64< Hash(wxS("Author975")) >(), wxS("concurrent random number") >  >() },
    {   11u, RevList< Rev< 0u, Arr64< Hash(wxS("Jamie Allsop")) >(), wxS("papers/P0011R0.md - Grip") >  >() },
    {   12u, RevList< Rev< 0u, Arr64< Hash(wxS("Author21")) >(), wxS("Make exception-specifications be part of the type system, version 4") > , Rev< 1u, Arr64< Hash(wxS("Author655")) >(), wxS("Make exception-specifications be part of the type system, version 5") >  >() },
    {   13u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Logical Operator Type Traits") > , Rev< 1u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Logical Operator Type Traits (revision 1)") >  >() },
    {   14u, RevList< Rev< 0u, Arr64< Hash(wxS("Nozomu KatM")) >(), wxS("Multiline Optiion") > , Rev< 1u, Arr64< Hash(wxS("Author650")) >(), wxS("Proposal to add the multiline option to std::regex for its ECMAScript engine") >  >() },
    {   15u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0015r0") >  >() },
    {   17u, RevList< Rev< 0u, Arr64< Hash(wxS("Oleg Smolsky")) >(), wxS("Extension to aggregate initialization") > , Rev< 1u, Arr64< Hash(wxS("Oleg Smolsky")) >(), wxS("Extension to aggregate initialization") >  >() },
    {   18u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0018r00 : Lambda Capture of *this by Value") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0018r1 : Lambda Capture of *this by Value") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("Capturing <tt>*this</tt>") > , Rev< 3u, Arr64< Hash(wxS("H. Carter")) >(), wxS("Capturing <tt>*this</tt>") >  >() },
    {   19u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019r00 : Atomic View") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019R1 : Atomic View") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019r2 : Atomic View") > , Rev< 3u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019r3 : Atomic View") > , Rev< 4u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019r4 : Atomic View") > , Rev< 5u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0019r5 : Atomic View") >  >() },
    {   20u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r00 : Floating Point Atomic View") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r1 : Floating Point Atomic") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r2 : Floating Point Atomic") > , Rev< 3u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r3 : Floating Point Atomic") > , Rev< 4u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r4 : Floating Point Atomic") > , Rev< 5u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0020r5 : Floating Point Atomic") >  >() },
    {   21u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1538")) >(), wxS("C++ Technical Specification") >  >() },
    {   22u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Proxy Iterators for the Ranges Extensions") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Proxy Iterators for the Ranges Extensions") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Proxy Iterators for the Ranges Extensions") >  >() },
    {   23u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1948")) >(), wxS("Title1510") >  >() },
    {   24u, RevList< Rev< 0u, Arr64< Hash(wxS("Author134")) >(), wxS("Title115") > , Rev< 1u, Arr64< Hash(wxS("Author2083")) >(), wxS("Title1616") > , Rev< 2u, Arr64< Hash(wxS("Author2224")) >(), wxS("Title1701") >  >() },
    {   25u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1524")) >(), wxS("clamp: An algorithm to 'clamp' a value between a pair of boundary values (Draft) -") > , Rev< 1u, Arr64< Hash(wxS("Author1572")) >(), wxS("clamp: An algorithm to 'clamp' a value between a pair of boundary values -") >  >() },
    {   26u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew McAtamney-Greenwood")) >(), wxS("P0026 - MultiRange-Based For Loop Proposal - v1.1.0") >  >() },
    {   27u, RevList< Rev< 0u, Arr64< Hash(wxS("Troy Korjuslommi")) >(), wxS("named_template") >  >() },
    {   28u, RevList< Rev< 0u, Arr64< Hash(wxS("Author513")) >(), wxS("Title421") > , Rev< 1u, Arr64< Hash(wxS("Author43")) >(), wxS("Title43") > , Rev< 2u, Arr64< Hash(wxS("Author2046")) >(), wxS("Title1588") > , Rev< 3u, Arr64< Hash(wxS("Author906")) >(), wxS("Using scoped attributes") > , Rev< 4u, Arr64< Hash(wxS("Author2147")) >(), wxS("Using attribute namespaces without repetition") >  >() },
    {   29u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1943")) >(), wxS("A Unified Proposal for Composable Hashing") >  >() },
    {   30u, RevList< Rev< 0u, Arr64< Hash(wxS("Benson Ma")) >(), wxS("Microsoft Word - P0030R0.docx") > , Rev< 1u, Arr64< Hash(wxS("Benson Ma")) >(), wxS("Title128") >  >() },
    {   31u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1165")) >(), wxS("A Proposal to Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access") >  >() },
    {   32u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title1411") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title1548") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0032R2") > , Rev< 3u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title1571") >  >() },
    {   33u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Re-enabling shared_from_this") > , Rev< 1u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Re-enabling shared_from_this") >  >() },
    {   34u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1128")) >(), wxS("P0034 Civil Time") >  >() },
    {   35u, RevList< Rev< 0u, Arr64< Hash(wxS("Author12")) >(), wxS("Dynamic memory allocation for over-aligned data") > , Rev< 1u, Arr64< Hash(wxS("Author656")) >(), wxS("Dynamic memory allocation for over-aligned data") > , Rev< 2u, Arr64< Hash(wxS("Author98")) >(), wxS("Dynamic memory allocation for over-aligned data") > , Rev< 3u, Arr64< Hash(wxS("Author1039")) >(), wxS("Dynamic memory allocation for over-aligned data") > , Rev< 4u, Arr64< Hash(wxS("Author1665")) >(), wxS("Dynamic memory allocation for over-aligned data") >  >() },
    {   36u, RevList< Rev< 0u, Arr64< Hash(wxS("Thibaut Le")) >(), wxS("Title119") >  >() },
    {   37u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1232")) >(), wxS("Fixed_Point_Library_Proposal") > , Rev< 1u, Arr64< Hash(wxS("Author590")) >(), wxS("Title479") > , Rev< 2u, Arr64< Hash(wxS("Author193")) >(), wxS("Title164") > , Rev< 3u, Arr64< Hash(wxS("Author7")) >(), wxS("Title7") > , Rev< 4u, Arr64< Hash(wxS("Author1694")) >(), wxS("Title1314") > , Rev< 5u, Arr64< Hash(wxS("Author1207")) >(), wxS("Title948") > , Rev< 6u, Arr64< Hash(wxS("Author1248")) >(), wxS("Title969") > , Rev< 7u, Arr64< Hash(wxS("Author1925")) >(), wxS("p0037r7") >  >() },
    {   38u, RevList< Rev< 0u, Arr64< Hash(wxS("Sean Middleditch")) >(), wxS("Untitled Document.md") >  >() },
    {   39u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2212")) >(), wxS("Untitled Document.md") >  >() },
    {   40u, RevList< Rev< 0u, Arr64< Hash(wxS("Author324")) >(), wxS("Untitled Document.md") > , Rev< 1u, Arr64< Hash(wxS("Author1315")) >(), wxS("P0040R1") > , Rev< 2u, Arr64< Hash(wxS("Author1508")) >(), wxS("P0040R2") > , Rev< 3u, Arr64< Hash(wxS("Author770")) >(), wxS("P0040R3") >  >() },
    {   41u, RevList< Rev< 0u, Arr64< Hash(wxS("Author840")) >(), wxS("Untitled Document.md") >  >() },
    {   42u, RevList< Rev< 0u, Arr64< Hash(wxS("Author898")) >(), wxS("recover_cast.pages") >  >() },
    {   43u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1595")) >(), wxS("function_container.pages") >  >() },
    {   44u, RevList< Rev< 0u, Arr64< Hash(wxS("Author932")) >(), wxS("unwinding_state.pages") >  >() },
    {   45u, RevList< Rev< 0u, Arr64< Hash(wxS("Author558")) >(), wxS("function.pages") > , Rev< 1u, Arr64< Hash(wxS("Author1363")) >(), wxS("function.pages") >  >() },
    {   46u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Change is_transparent to metafunction") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Change is_transparent to metafunction (Revision 1)") >  >() },
    {   47u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title453") >  >() },
    {   48u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title646") >  >() },
    {   50u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title186") >  >() },
    {   51u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title1476") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("Title168") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0051R2") > , Rev< 3u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0051r3") >  >() },
    {   52u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1398")) >(), wxS("Title1089") > , Rev< 1u, Arr64< Hash(wxS("Author1040")) >(), wxS("Title835") > , Rev< 2u, Arr64< Hash(wxS("Author1299")) >(), wxS("Title1002") > , Rev< 3u, Arr64< Hash(wxS("Author820")) >(), wxS("C++ International Standard") > , Rev< 4u, Arr64< Hash(wxS("Author757")) >(), wxS("Title614") > , Rev< 5u, Arr64< Hash(wxS("Author887")) >(), wxS("Title716") > , Rev< 9u, Arr64< Hash(wxS("Author559")) >(), wxS("Title452") > , Rev< 10u, Arr64< Hash(wxS("Author260")) >(), wxS("Title218") >  >() },
    {   53u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2105")) >(), wxS("C++ Synchronized Buffered Ostream") > , Rev< 1u, Arr64< Hash(wxS("Author579")) >(), wxS("C++ Synchronized Buffered Ostream") > , Rev< 2u, Arr64< Hash(wxS("Author1561")) >(), wxS("C++ Synchronized Buffered Ostream") > , Rev< 3u, Arr64< Hash(wxS("Author452")) >(), wxS("DRAFT C++ Synchronized Buffered Ostream") > , Rev< 4u, Arr64< Hash(wxS("Author1729")) >(), wxS("DRAFT C++ Synchronized Buffered Ostream") > , Rev< 5u, Arr64< Hash(wxS("Author1864")) >(), wxS("Title1445") >  >() },
    {   54u, RevList< Rev< 0u, Arr64< Hash(wxS("Author826")) >(), wxS("D0054_ReportsFromTheField") >  >() },
    {   55u, RevList< Rev< 0u, Arr64< Hash(wxS("Author473")) >(), wxS("D0055_BetterTogether") > , Rev< 1u, Arr64< Hash(wxS("Author1253")) >(), wxS("D0055_BetterTogether") >  >() },
    {   56u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1519")) >(), wxS("D0056_SoftKeywords") >  >() },
    {   57u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") > , Rev< 1u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") > , Rev< 2u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") > , Rev< 3u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") > , Rev< 4u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") > , Rev< 5u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("C++ Technical Specification") >  >() },
    {   58u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1334")) >(), wxS("An Interface for Abstracting Execution | P0058R0") > , Rev< 1u, Arr64< Hash(wxS("Author571")) >(), wxS("An Interface for Abstracting Execution | P0058R1") >  >() },
    {   59u, RevList< Rev< 0u, Arr64< Hash(wxS("Author742")) >(), wxS("Title598") > , Rev< 1u, Arr64< Hash(wxS("Author1094")) >(), wxS("Title881") > , Rev< 2u, Arr64< Hash(wxS("Author1459")) >(), wxS("Title1138") > , Rev< 3u, Arr64< Hash(wxS("Author1172")) >(), wxS("Title928") > , Rev< 4u, Arr64< Hash(wxS("Author1485")) >(), wxS("Title1156") >  >() },
    {   60u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2")) >(), wxS("Function Object-Based Overloading of Operator Dot") >  >() },
    {   61u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1996")) >(), wxS("Feature-testing preprocessor predicates for C++17") > , Rev< 1u, Arr64< Hash(wxS("Author1127")) >(), wxS("Feature-testing preprocessor predicates for C++17") >  >() },
    {   62u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1177")) >(), wxS("When should compilers optimize atomics?") > , Rev< 1u, Arr64< Hash(wxS("Author1960")) >(), wxS("When should compilers optimize atomics?") >  >() },
    {   63u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("C++17 should refer to C11 instead of C99") > , Rev< 1u, Arr64< Hash(wxS("Author139")) >(), wxS("C++17 should refer to C11 instead of C99") > , Rev< 2u, Arr64< Hash(wxS("Author855")) >(), wxS("C++17 should refer to C11 instead of C99") > , Rev< 3u, Arr64< Hash(wxS("Author1931")) >(), wxS("C++17 should refer to C11 instead of C99") >  >() },
    {   65u, RevList< Rev< 0u, Arr64< Hash(wxS("Author664")) >(), wxS("movable-il.pages") >  >() },
    {   66u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1589")) >(), wxS("values.pages") >  >() },
    {   67u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1337")) >(), wxS("Elementary string conversions") > , Rev< 1u, Arr64< Hash(wxS("Author1540")) >(), wxS("Elementary string conversions, revision 1") > , Rev< 2u, Arr64< Hash(wxS("Author1035")) >(), wxS("Elementary string conversions, revision 2") > , Rev< 3u, Arr64< Hash(wxS("Author2214")) >(), wxS("Elementary string conversions, revision 2") > , Rev< 4u, Arr64< Hash(wxS("Author550")) >(), wxS("Elementary string conversions, revision 4") > , Rev< 5u, Arr64< Hash(wxS("Author1406")) >(), wxS("Elementary string conversions, revision 5") >  >() },
    {   68u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1268") >  >() },
    {   69u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Sander")) >(), wxS("Title1067") >  >() },
    {   70u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1808")) >(), wxS("D0070_ReturnBeforeAwait") >  >() },
    {   71u, RevList< Rev< 0u, Arr64< Hash(wxS("Author40")) >(), wxS("D0071_KeywordsForCoroutines") >  >() },
    {   72u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title1472") > , Rev< 1u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title1496") >  >() },
    {   73u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title675") > , Rev< 1u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title973") > , Rev< 2u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title937") >  >() },
    {   74u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1378")) >(), wxS("Making std::owner_less more flexible") >  >() },
    {   75u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1915")) >(), wxS("Title1481") > , Rev< 1u, Arr64< Hash(wxS("Author934")) >(), wxS("Template Library for Parallel For Loops") > , Rev< 2u, Arr64< Hash(wxS("Arch D")) >(), wxS("Template Library for Parallel For Loops") >  >() },
    {   76u, RevList< Rev< 0u, Arr64< Hash(wxS("Author280")) >(), wxS("Title231") > , Rev< 1u, Arr64< Hash(wxS("Author42")) >(), wxS("Vector and Wavefront Policies") > , Rev< 2u, Arr64< Hash(wxS("Author1863")) >(), wxS("Vector and Wavefront Policies") > , Rev< 3u, Arr64< Hash(wxS("Author55")) >(), wxS("Vector and Wavefront Policies") > , Rev< 4u, Arr64< Hash(wxS("Author783")) >(), wxS("Vector and Wavefront Policies") >  >() },
    {   77u, RevList< Rev< 0u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("is_callable, the missing INVOKE related trait") > , Rev< 1u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("is_callable, the missing INVOKE related trait") > , Rev< 2u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("is_callable, the missing INVOKE related trait") >  >() },
    {   78u, RevList< Rev< 0u, Arr64< Hash(wxS("Author398")) >(), wxS("Title338") >  >() },
    {   79u, RevList< Rev< 0u, Arr64< Hash(wxS("Author923")) >(), wxS("Title743") >  >() },
    {   80u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Title991") >  >() },
    {   81u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1355")) >(), wxS("Title1051") >  >() },
    {   82u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1993")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1498")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 2u, Arr64< Hash(wxS("Author1849")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    {   83u, RevList< Rev< 0u, Arr64< Hash(wxS("Author309")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author739")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 2u, Arr64< Hash(wxS("Author1664")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 3u, Arr64< Hash(wxS("Author526")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    {   84u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1229")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1090")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 2u, Arr64< Hash(wxS("Author417")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    {   85u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1069")) >(), wxS("Oo... adding a coherent character sequence to start octal-literals") >  >() },
    {   86u, RevList< Rev< 0u, Arr64< Hash(wxS("Author627")) >(), wxS("Variant design review.") >  >() },
    {   87u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1246")) >(), wxS("Variant: a type-safe union without undefined behavior (v2).") >  >() },
    {   88u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1601")) >(), wxS("Variant: a type-safe union that is rarely invalid (v5).") > , Rev< 1u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Variant: a type-safe union (v6).") > , Rev< 2u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Variant: a type-safe union for C++17 (v7).") > , Rev< 3u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Variant: a type-safe union for C++17 (v8).") >  >() },
    {   89u, RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("On the Effective Use Of Memory Allocators") > , Rev< 1u, Arr64< Hash(wxS("John Lakos")) >(), wxS("On Quantifying Memory-Allocation Strategies (Revision 2)") >  >() },
    {   90u, RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0090r0") >  >() },
    {   91u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1156")) >(), wxS("Template parameter deduction for constructors (Rev. 2)") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Template argument deduction for class templates (Rev. 4)") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Template argument deduction for class templates (Rev. 5)") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Template argument deduction for class templates (Rev. 6)") > , Rev< 4u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Template argument deduction for class templates (Rev. 7)") >  >() },
    {   92u, RevList< Rev< 0u, Arr64< Hash(wxS("Author406")) >(), wxS("Polishing chrono") > , Rev< 1u, Arr64< Hash(wxS("Author1901")) >(), wxS("Polishing chrono") >  >() },
    {   93u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1251") >  >() },
    {   94u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title280") >  >() },
    {   95u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1591") > , Rev< 1u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1447") > , Rev< 2u, Arr64< Hash(wxS("David Sankel")) >(), wxS("language_variant") >  >() },
    {   96u, RevList< Rev< 0u, Arr64< Hash(wxS("Author721")) >(), wxS("Feature-testing recommendations for C++") > , Rev< 1u, Arr64< Hash(wxS("Author1121")) >(), wxS("Feature-testing recommendations for C++") > , Rev< 2u, Arr64< Hash(wxS("Author712")) >(), wxS("Feature-testing recommendations for C++") > , Rev< 3u, Arr64< Hash(wxS("Author838")) >(), wxS("Feature-testing recommendations for C++") > , Rev< 4u, Arr64< Hash(wxS("Author926")) >(), wxS("Feature-testing recommendations for C++") > , Rev< 5u, Arr64< Hash(wxS("Author2115")) >(), wxS("Feature-testing recommendations for C++") >  >() },
    {   97u, RevList< Rev< 0u, Arr64< Hash(wxS("Author936")) >(), wxS("Use Cases for Thread-Local Storage") >  >() },
    {   98u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1388")) >(), wxS("Title1079") > , Rev< 1u, Arr64< Hash(wxS("Author782")) >(), wxS("Title636") >  >() },
    {   99u, RevList< Rev< 0u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("A low-level API for stackful context switching") > , Rev< 1u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("A low-level API for stackful context switching") >  >() },
    {  100u, RevList< Rev< 0u, Arr64< Hash(wxS("Author348")) >(), wxS("Comparison in C++") > , Rev< 1u, Arr64< Hash(wxS("Author772")) >(), wxS("Comparison in C++") > , Rev< 2u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Comparison in C++") >  >() },
    {  101u, RevList< Rev< 0u, Arr64< Hash(wxS("Author592")) >(), wxS("An Outline of a C++ Numbers Technical Specification") >  >() },
    {  102u, RevList< Rev< 0u, Arr64< Hash(wxS("Author344")) >(), wxS("C++ Parametric Number Type Aliases") >  >() },
    {  103u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1838")) >(), wxS("Overflow-Detecting and Double-Wide Arithmetic Operations") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Overflow-Detecting and Double-Wide Arithmetic Operations") >  >() },
    {  104u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1268")) >(), wxS("Multi-Word Integer Operations and Types") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Multi-Word Integer Operations and Types") >  >() },
    {  105u, RevList< Rev< 0u, Arr64< Hash(wxS("Author113")) >(), wxS("Rounding and Overflow in C++") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Rounding and Overflow in C++") >  >() },
    {  106u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1101")) >(), wxS("C++ Binary Fixed-Point Arithmetic") >  >() },
    {  107u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title926") >  >() },
    {  108u, RevList< Rev< 0u, Arr64< Hash(wxS("Author537")) >(), wxS("Skeleton Proposal for Thread-Local Storage (TLS)") > , Rev< 1u, Arr64< Hash(wxS("Author1057")) >(), wxS("Skeleton Proposal for Thread-Local Storage (TLS)") >  >() },
    {  109u, RevList< Rev< 0u, Arr64< Hash(wxS("Author634")) >(), wxS("Function Aliases + Extended Inheritance = Opaque Typedefs") >  >() },
    {  110u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony")) >(), wxS("P0110: Implementing the strong guarantee for variant<> assignment") >  >() },
    {  112u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library (Revision 6)") > , Rev< 1u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking Library (Revision 7)") >  >() },
    {  113u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Executors and Asynchronous Operations, Revision 2") >  >() },
    {  114u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1464")) >(), wxS("Microsoft Word - Resumable Expressions rev 2.docm") >  >() },
    {  116u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Kawulak")) >(), wxS("Boolean conversion for Standard Library types") >  >() },
    {  117u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Kawulak")) >(), wxS("Generic to_string/to_wstring functions") >  >() },
    {  118u, RevList< Rev< 0u, Arr64< Hash(wxS("Author702")) >(), wxS("Title564") >  >() },
    {  119u, RevList< Rev< 0u, Arr64< Hash(wxS("Author157")) >(), wxS("Title133") > , Rev< 1u, Arr64< Hash(wxS("Author253")) >(), wxS("Title212") > , Rev< 2u, Arr64< Hash(wxS("Author1374")) >(), wxS("Title1066") >  >() },
    {  120u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony")) >(), wxS("constexpr unions and common initial sequences") >  >() },
    {  121u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1604")) >(), wxS("C++ Technical Specification") >  >() },
    {  122u, RevList< Rev< 0u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Title256") > , Rev< 1u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0122R1") > , Rev< 2u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0122R2.docx") > , Rev< 3u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - D0122R3.docx") > , Rev< 4u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0122R3") > , Rev< 5u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0122R3") >  >() },
    {  123u, RevList< Rev< 0u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Title1230") > , Rev< 1u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0123R1") > , Rev< 2u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0123R2.docx") >  >() },
    {  124u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2069")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 1u, Arr64< Hash(wxS("Author1809")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 2u, Arr64< Hash(wxS("Author133")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 3u, Arr64< Hash(wxS("Author2012")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 4u, Arr64< Hash(wxS("Author986")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 5u, Arr64< Hash(wxS("Author1004")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 6u, Arr64< Hash(wxS("Author238")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 7u, Arr64< Hash(wxS("Author1633")) >(), wxS("Linux-Kernel Memory Model") > , Rev< 8u, Arr64< Hash(wxS("Author1239")) >(), wxS("Linux-Kernel Memory Model") >  >() },
    {  125u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1878")) >(), wxS("Untitled Document.md") >  >() },
    {  126u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("Title288") > , Rev< 1u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("Untitled") > , Rev< 2u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("synchronic") >  >() },
    {  127u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Declaring non-type template arguments with auto") > , Rev< 1u, Arr64< Hash(wxS("James Touton")) >(), wxS("Declaring non-type template arguments with auto") > , Rev< 2u, Arr64< Hash(wxS("James Touton")) >(), wxS("Declaring non-type template parameters with auto") >  >() },
    {  128u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1261")) >(), wxS("constexpr_if") > , Rev< 1u, Arr64< Hash(wxS("Author2203")) >(), wxS("constexpr if") >  >() },
    {  129u, RevList< Rev< 0u, Arr64< Hash(wxS("Author368")) >(), wxS("We cannot (realistically) get rid of throwing moves") >  >() },
    {  130u, RevList< Rev< 0u, Arr64< Hash(wxS("Author20")) >(), wxS("Title17") >  >() },
    {  131u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1025")) >(), wxS("Title819") >  >() },
    {  132u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1488")) >(), wxS("Non-throwing container operations") > , Rev< 1u, Arr64< Hash(wxS("Author1331")) >(), wxS("Non-throwing container operations") >  >() },
    {  133u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1486")) >(), wxS("Putting noexcept(auto) on hold, again") >  >() },
    {  134u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1007")) >(), wxS("Introducing a name for brace-or-equal-initializers for non-static data members") >  >() },
    {  135u, RevList< Rev< 0u, Arr64< Hash(wxS("Author663")) >(), wxS("Guaranteed copy elision through simplified value categories") > , Rev< 1u, Arr64< Hash(wxS("Author1247")) >(), wxS("Wording for guaranteed copy elision through simplified value categories") >  >() },
    {  136u, RevList< Rev< 0u, Arr64< Hash(wxS("Author698")) >(), wxS("N4429: Rewording inheriting constructors (core issue 1941 et al)") > , Rev< 1u, Arr64< Hash(wxS("Author289")) >(), wxS("Rewording inheriting constructors (core issue 1941 et al)") >  >() },
    {  137u, RevList< Rev< 0u, Arr64< Hash(wxS("Author154")) >(), wxS("Core Issue 1776: Replacement of class objects containing reference members") > , Rev< 1u, Arr64< Hash(wxS("Author2227")) >(), wxS("Core Issue 1776: Replacement of class objects containing reference members (et al)") >  >() },
    {  138u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title717") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title126") > , Rev< 2u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title513") >  >() },
    {  141u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1353") >  >() },
    {  142u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1244") >  >() },
    {  143u, RevList< Rev< 0u, Arr64< Hash(wxS("Author562")) >(), wxS("Title455") > , Rev< 1u, Arr64< Hash(wxS("Author2011")) >(), wxS("Title1551") > , Rev< 2u, Arr64< Hash(wxS("Author2037")) >(), wxS("Title1576") >  >() },
    {  144u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title481") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title258") > , Rev< 2u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title533") >  >() },
    {  145u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1271") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title84") > , Rev< 2u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1052") > , Rev< 3u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1515") >  >() },
    {  146u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1742")) >(), wxS("Regular Void") > , Rev< 1u, Arr64< Hash(wxS("Author1332")) >(), wxS("Regular Void (Revision 1)") >  >() },
    {  147u, RevList< Rev< 0u, Arr64< Hash(wxS("Author988")) >(), wxS("The Use and Implementation of Contracts") >  >() },
    {  148u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Title669") >  >() },
    {  149u, RevList< Rev< 0u, Arr64< Hash(wxS("Author481")) >(), wxS("Title400") > , Rev< 1u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1261") >  >() },
    {  151u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title81") >  >() },
    {  152u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("P0152R0 constexpr atomic<T>::is_always_lock_free") > , Rev< 1u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("P0152R1 constexpr atomic<T>::is_always_lock_free") >  >() },
    {  153u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("P0153R0 std::atomic_object_fence(mo, T&&...)") >  >() },
    {  154u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0154R0 constexpr std::hardware_{constructive,destructive}_interference_size") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0154R1 constexpr std::hardware_{constructive,destructive}_interference_size") >  >() },
    {  155u, RevList< Rev< 0u, Arr64< Hash(wxS("Author752")) >(), wxS("P0155R0 | Task Block R5") >  >() },
    {  156u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1939")) >(), wxS("Variadic lock_guard (Rev. 2)") > , Rev< 1u, Arr64< Hash(wxS("Author1291")) >(), wxS("Variadic lock_guard (Rev. 4)") > , Rev< 2u, Arr64< Hash(wxS("Author2036")) >(), wxS("Variadic lock_guard (Rev. 5)") >  >() },
    {  157u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2128")) >(), wxS("Handling Disappointment in C++") >  >() },
    {  158u, RevList< Rev< 0u, Arr64< Hash(wxS("Jamie Allsop")) >(), wxS("papers/P0158R0.md - Grip") >  >() },
    {  159u, RevList< Rev< 0u, Arr64< Hash(wxS("Author797")) >(), wxS("Technical Specification for C++ Extensions for Concurrency, DTS") >  >() },
    {  160u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1777")) >(), wxS("Wording for removing defaults for unary folds") >  >() },
    {  161u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1986")) >(), wxS("Title1539") >  >() },
    {  162u, RevList< Rev< 0u, Arr64< Hash(wxS("Author995")) >(), wxS("Microsoft Word - Response to P0055R0.docm") >  >() },
    {  163u, RevList< Rev< 0u, Arr64< Hash(wxS("Author519")) >(), wxS("shared_ptr::weak_type") >  >() },
    {  164u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2119")) >(), wxS("Core Motions") >  >() },
    {  165u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1514")) >(), wxS("C++ Standard Library Issues to be moved in Kona") > , Rev< 1u, Arr64< Hash(wxS("Author1946")) >(), wxS("C++ Standard Library Issues to be moved in Jacksonville") > , Rev< 2u, Arr64< Hash(wxS("Author1385")) >(), wxS("C++ Standard Library Issues to be moved in Oulu") > , Rev< 3u, Arr64< Hash(wxS("Author1153")) >(), wxS("C++ Standard Library Issues to be moved in Issaquah") > , Rev< 4u, Arr64< Hash(wxS("Author1652")) >(), wxS("C++ Standard Library Issues to be moved in Kona") >  >() },
    {  166u, RevList< Rev< 0u, Arr64< Hash(wxS("Author167")) >(), wxS("Title144") >  >() },
    {  167u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2054")) >(), wxS("Core \"ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author1328")) >(), wxS("Core \"ready\" Issues") > , Rev< 2u, Arr64< Hash(wxS("Author1471")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  169u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1661")) >(), wxS("regex with Unicode character types") >  >() },
    {  170u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1028")) >(), wxS("Title822") > , Rev< 1u, Arr64< Hash(wxS("Author1739")) >(), wxS("Title1343") >  >() },
    {  171u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1362")) >(), wxS("P0171_ResponseToP0114") >  >() },
    {  172u, RevList< Rev< 0u, Arr64< Hash(wxS("Author577")) >(), wxS("Abominable Function Types") >  >() },
    {  174u, RevList< Rev< 0u, Arr64< Hash(wxS("Author777")) >(), wxS("Deprecating Vestigial Library Parts in C++17") > , Rev< 1u, Arr64< Hash(wxS("Author1469")) >(), wxS("Deprecating Vestigial Library Parts in C++17") > , Rev< 2u, Arr64< Hash(wxS("Author1754")) >(), wxS("Deprecating Vestigial Library Parts in C++17") >  >() },
    {  175u, RevList< Rev< 0u, Arr64< Hash(wxS("Author88")) >(), wxS("Synopses for the C library") > , Rev< 1u, Arr64< Hash(wxS("Author1596")) >(), wxS("Synopses for the C library") >  >() },
    {  177u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1168")) >(), wxS("Cleaning up allocator_traits") > , Rev< 1u, Arr64< Hash(wxS("Author1619")) >(), wxS("Cleaning up allocator_traits") > , Rev< 2u, Arr64< Hash(wxS("Author972")) >(), wxS("Cleaning up allocator_traits") >  >() },
    {  178u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1409")) >(), wxS("Allocators and swap") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Allocators and swap") >  >() },
    {  180u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1250")) >(), wxS("Reserve a New Library Namespace Future Standardization") > , Rev< 1u, Arr64< Hash(wxS("Author1839")) >(), wxS("Reserve a New Library Namespace Future Standardization") > , Rev< 2u, Arr64< Hash(wxS("Author937")) >(), wxS("Reserve a New Library Namespace for Future Standardization") >  >() },
    {  181u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1930")) >(), wxS("Ordered By Default") > , Rev< 1u, Arr64< Hash(wxS("Author2197")) >(), wxS("Ordered By Default") >  >() },
    {  184u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Generalizing the Range-Based For Loop") >  >() },
    {  185u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Adding [nothrow-]swappable traits (Revision 2)") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Adding [nothrow-]swappable traits (Revision 3)") >  >() },
    {  186u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1852")) >(), wxS("Iterator Facade -") >  >() },
    {  187u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title470") > , Rev< 1u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1024") >  >() },
    {  188u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title611") > , Rev< 1u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1352") >  >() },
    {  189u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1333") > , Rev< 1u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1690") >  >() },
    {  190u, RevList< Rev< 0u, Arr64< Hash(wxS("Author492")) >(), wxS("Title411") > , Rev< 1u, Arr64< Hash(wxS("Author120")) >(), wxS("Title107") > , Rev< 2u, Arr64< Hash(wxS("Author726")) >(), wxS("Title586") > , Rev< 3u, Arr64< Hash(wxS("Author987")) >(), wxS("Title799") > , Rev< 4u, Arr64< Hash(wxS("Author639")) >(), wxS("Title521") >  >() },
    {  191u, RevList< Rev< 1u, Arr64< Hash(wxS("Daniel Markus")) >(), wxS("VirtualMemberFunctionPointerComparison") >  >() },
    {  192u, RevList< Rev< 0u, Arr64< Hash(wxS("Author464")) >(), wxS("Title389") > , Rev< 1u, Arr64< Hash(wxS("Boris Fomitchev")) >(), wxS("Title867") > , Rev< 4u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`short float` and fixed-size floating point types") >  >() },
    {  193u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0193R0 Where is Vectorization in C++") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0193R1 Where is Vectorization in C++") >  >() },
    {  194u, RevList< Rev< 0u, Arr64< Hash(wxS("Matus")) >(), wxS("Title1448") > , Rev< 1u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("P0194R1 Static reflection") > , Rev< 2u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("P0194R2 Static reflection") > , Rev< 3u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection") > , Rev< 4u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection") > , Rev< 5u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection") >  >() },
    {  195u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2076")) >(), wxS("Title1608") > , Rev< 1u, Arr64< Hash(wxS("Author283")) >(), wxS("Title233") > , Rev< 2u, Arr64< Hash(wxS("Author999")) >(), wxS("Pack expansions in using-declarations") >  >() },
    {  196u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0196R0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0196R1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0196R2") > , Rev< 3u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0196r3") > , Rev< 4u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0196r4") > , Rev< 5u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0196r5") >  >() },
    {  197u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0197R0") >  >() },
    {  198u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0198R0") >  >() },
    {  199u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("P0199R0") >  >() },
    {  200u, RevList< Rev< 0u, Arr64< Hash(wxS("Author670")) >(), wxS("A Proposal to Add YCombinator to the Standard Library") >  >() },
    {  201u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1606")) >(), wxS("Title1245") > , Rev< 1u, Arr64< Hash(wxS("Author569")) >(), wxS("Title461") > , Rev< 2u, Arr64< Hash(wxS("Author196")) >(), wxS("Title166") > , Rev< 3u, Arr64< Hash(wxS("Author1937")) >(), wxS("Title1498") > , Rev< 4u, Arr64< Hash(wxS("Author1182")) >(), wxS("Title930") > , Rev< 5u, Arr64< Hash(wxS("Author351")) >(), wxS("Title297") > , Rev< 6u, Arr64< Hash(wxS("Jonathan B")) >(), wxS("<code>polymorphic_value</code>: A Polymorphic Value Type for C++") >  >() },
    {  202u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1137")) >(), wxS("A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers") > , Rev< 1u, Arr64< Hash(wxS("Author2149")) >(), wxS("A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers") > , Rev< 2u, Arr64< Hash(wxS("Author137")) >(), wxS("A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers") > , Rev< 3u, Arr64< Hash(wxS("Author694")) >(), wxS("A Proposal to Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers") >  >() },
    {  203u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1174")) >(), wxS("Considerations for the design of expressive portable SIMD vectors") >  >() },
    {  205u, RevList< Rev< 0u, Arr64< Hash(wxS("Moritz Klammler")) >(), wxS("P0205R0 Allow Seeding Random Number Engines with std::random_device") > , Rev< 1u, Arr64< Hash(wxS("Moritz Klammler")) >(), wxS("P0205R1 Efficient Seeding of Random Number Engines") >  >() },
    {  206u, RevList< Rev< 0u, Arr64< Hash(wxS("Author534")) >(), wxS("Discussion about std::thread and RAII") > , Rev< 1u, Arr64< Hash(wxS("Author127")) >(), wxS("A joining thread") >  >() },
    {  207u, RevList< Rev< 0u, Arr64< Hash(wxS("Author57")) >(), wxS("Ruminations on lambda captures") >  >() },
    {  208u, RevList< Rev< 0u, Arr64< Hash(wxS("Author706")) >(), wxS("Copy-Swap Helper") > , Rev< 1u, Arr64< Hash(wxS("Author806")) >(), wxS("Copy-Swap Transaction") >  >() },
    {  209u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2061")) >(), wxS("P0209r0 | make_from_tuple: apply for construction") > , Rev< 1u, Arr64< Hash(wxS("Author302")) >(), wxS("P0209r1 | make_from_tuple: apply for construction") > , Rev< 2u, Arr64< Hash(wxS("Author957")) >(), wxS("P0209r2 | make_from_tuple: apply for construction") >  >() },
    {  210u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1625")) >(), wxS("A light-weight, compact dynamic array") >  >() },
    {  211u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1726")) >(), wxS("Allocator-aware library wrappers for dynamic allocation") > , Rev< 1u, Arr64< Hash(wxS("Author1826")) >(), wxS("Allocator-aware library wrappers for dynamic allocation") > , Rev< 2u, Arr64< Hash(wxS("Author461")) >(), wxS("Allocator-aware library wrappers for dynamic allocation") > , Rev< 3u, Arr64< Hash(wxS("Author725")) >(), wxS("Allocator-aware library wrappers for dynamic allocation") >  >() },
    {  212u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title780") > , Rev< 1u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title385") >  >() },
    {  213u, RevList< Rev< 0u, Arr64< Hash(wxS("Graham Bleaney")) >(), wxS("On the Effective Use Of Memory Allocators") >  >() },
    {  214u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R3]") > , Rev< 4u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R4]") > , Rev< 5u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Data-Parallel Vector Types & Operations [P0214R5]") >  >() },
    {  215u, RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("Title889") >  >() },
    {  216u, RevList< Rev< 0u, Arr64< Hash(wxS("Greg Miller")) >(), wxS("Title462") >  >() },
    {  217u, RevList< Rev< 0u, Arr64< Hash(wxS("Author652")) >(), wxS("Wording for structured bindings") > , Rev< 1u, Arr64< Hash(wxS("Author1710")) >(), wxS("Wording for structured bindings") > , Rev< 2u, Arr64< Hash(wxS("Author866")) >(), wxS("Wording for structured bindings") > , Rev< 3u, Arr64< Hash(wxS("Author563")) >(), wxS("Wording for structured bindings") >  >() },
    {  218u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1097")) >(), wxS("C++17 Filesystem -") > , Rev< 1u, Arr64< Hash(wxS("Author931")) >(), wxS("C++17 Filesystem -") >  >() },
    {  219u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2129")) >(), wxS("Relative Paths") > , Rev< 1u, Arr64< Hash(wxS("Author1190")) >(), wxS("Relative Paths") >  >() },
    {  220u, RevList< Rev< 0u, Arr64< Hash(wxS("Author573")) >(), wxS("C++17 Fundamentals -") > , Rev< 1u, Arr64< Hash(wxS("Author749")) >(), wxS("C++17 Fundamentals -") >  >() },
    {  221u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2208")) >(), wxS("Default comparisons") > , Rev< 1u, Arr64< Hash(wxS("Author2107")) >(), wxS("Proposed wording for default comparisons, revision 3") > , Rev< 2u, Arr64< Hash(wxS("Author1086")) >(), wxS("Proposed wording for default comparisons, revision 4") >  >() },
    {  222u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Allowing Anonymous Structs as Return Values") >  >() },
    {  223u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Class Namespace") >  >() },
    {  224u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Implicit Return Type") >  >() },
    {  225u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1965")) >(), wxS("Why I want Concepts, and why I want them sooner rather than later") >  >() },
    {  226u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1704")) >(), wxS("Mathematical Special Functions for C++17, v4") > , Rev< 1u, Arr64< Hash(wxS("Author33")) >(), wxS("Mathematical Special Functions for C++17, v5") >  >() },
    {  227u, RevList< Rev< 0u, Arr64< Hash(wxS("Thibaut Le")) >(), wxS("Title1440") >  >() },
    {  228u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Ramey")) >(), wxS("Java Printing.pdf") > , Rev< 3u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("unique_function: a move-only std::function") >  >() },
    {  229u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title426") >  >() },
    {  230u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1272") >  >() },
    {  231u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Luchangco")) >(), wxS("Title909") >  >() },
    {  232u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Title1262") >  >() },
    {  233u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title1403") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title276") > , Rev< 2u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title306") > , Rev< 3u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title651") > , Rev< 4u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title1637") > , Rev< 5u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title1564") >  >() },
    {  234u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title610") >  >() },
    {  235u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2223")) >(), wxS("Title1700") >  >() },
    {  236u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1538") >  >() },
    {  237u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1155")) >(), wxS("Title918") > , Rev< 1u, Arr64< Hash(wxS("Author1927")) >(), wxS("Wording for fundamental bit manipulation utilities") > , Rev< 2u, Arr64< Hash(wxS("Author1066")) >(), wxS("Wording for fundamental bit manipulation utilities") > , Rev< 3u, Arr64< Hash(wxS("Author162")) >(), wxS("Wording for fundamental bit manipulation utilities") > , Rev< 4u, Arr64< Hash(wxS("Author1317")) >(), wxS("Wording for fundamental bit manipulation utilities") > , Rev< 5u, Arr64< Hash(wxS("Author476")) >(), wxS("Wording for fundamental bit manipulation utilities") > , Rev< 9u, Arr64< Hash(wxS("Author2058")) >(), wxS("P0237R9") > , Rev< 10u, Arr64< Hash(wxS("Author1651")) >(), wxS("P0237R10") >  >() },
    {  238u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Return type deduction and SFINAE") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Return type deduction and SFINAE") >  >() },
    {  239u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title1585") >  >() },
    {  240u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2163")) >(), wxS("Why I want Concepts, but why they should come later rather than sooner") >  >() },
    {  241u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1713")) >(), wxS("Remove Future-Related Explicit Specializations for Void") >  >() },
    {  242u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1307")) >(), wxS("Standard Library Support for Void") >  >() },
    {  244u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Text_view: A C++ concepts and range based character encoding and code point enumeration library") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Text_view: A C++ concepts and range based character encoding and code point enumeration library") > , Rev< 2u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Text_view: A C++ concepts and range based character encoding and code point enumeration library") >  >() },
    {  245u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1532")) >(), wxS("Hexadecimal floating literals for C++") > , Rev< 1u, Arr64< Hash(wxS("Author1806")) >(), wxS("Hexadecimal floating literals for C++") >  >() },
    {  246u, RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("Title712") >  >() },
    {  247u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1603")) >(), wxS("Title1243") >  >() },
    {  248u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2201")) >(), wxS("Untitled") >  >() },
    {  249u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael McLaughlin")) >(), wxS("Input Devices for 2d GraPhics") > , Rev< 2u, Arr64< Hash(wxS("Michael McLaughlin")) >(), wxS("Input Devices for 2d GraPhics") >  >() },
    {  250u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Wording improvements for initialization and thread ids (CWG 2046)") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Wording improvements for initialization and thread ids (CWG 2046)") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Wording improvements for initialization and thread ids (CWG 2046, 1784)") > , Rev< 3u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("D0250R3: Wording improvements for initialization and thread ids (CWG 2046, 1784)") >  >() },
    {  251u, RevList< Rev< 0u, Arr64< Hash(wxS("Author735")) >(), wxS("Title593") >  >() },
    {  252u, RevList< Rev< 0u, Arr64< Hash(wxS("Author229")) >(), wxS("Title189") > , Rev< 1u, Arr64< Hash(wxS("Author1403")) >(), wxS("Title1093") > , Rev< 2u, Arr64< Hash(wxS("Author1834")) >(), wxS("Title1425") >  >() },
    {  253u, RevList< Rev< 0u, Arr64< Hash(wxS("Author458")) >(), wxS("BMH Wording") > , Rev< 1u, Arr64< Hash(wxS("Author1945")) >(), wxS("P0253R1") >  >() },
    {  254u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2117")) >(), wxS("Integrating string_view") > , Rev< 1u, Arr64< Hash(wxS("Author1426")) >(), wxS("Integrating string_viewR1") > , Rev< 2u, Arr64< Hash(wxS("Author2063")) >(), wxS("Integrating string_viewR2") >  >() },
    {  255u, RevList< Rev< 0u, Arr64< Hash(wxS("Cleiton Santoia")) >(), wxS("C++ International Standard") >  >() },
    {  256u, RevList< Rev< 0u, Arr64< Hash(wxS("Cleiton Santoia")) >(), wxS("C++ International Standard") >  >() },
    {  257u, RevList< Rev< 0u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0257R0") > , Rev< 1u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0257R1.docx") >  >() },
    {  258u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2021")) >(), wxS("is_contiguous_layout") > , Rev< 1u, Arr64< Hash(wxS("Author1436")) >(), wxS("is_contiguous_layout") > , Rev< 2u, Arr64< Hash(wxS("Author2207")) >(), wxS("P0258R2 has_unique_object_representations - wording") >  >() },
    {  259u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Price")) >(), wxS("Title1560") >  >() },
    {  260u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 2u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 3u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 4u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 5u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 6u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 7u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 8u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 9u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 10u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 11u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 12u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 13u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 14u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 15u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 16u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") > , Rev< 17u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Queues") >  >() },
    {  261u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Distributed Counters") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Distributed Counters") > , Rev< 2u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Distributed Counters") > , Rev< 3u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Distributed Counters") > , Rev< 4u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Distributed Counters") >  >() },
    {  262u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("A Class for Status and Optional Value") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("A Class for Status and Optional Value") >  >() },
    {  263u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1478")) >(), wxS("Core \"tentatively ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author1205")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  264u, RevList< Rev< 0u, Arr64< Hash(wxS("Author531")) >(), wxS("auto operator= considered dangerous") >  >() },
    {  265u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title821") >  >() },
    {  266u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1873")) >(), wxS("Lifting Restrictions on requires-Expressions") > , Rev< 1u, Arr64< Hash(wxS("Author1130")) >(), wxS("Lifting Restrictions on requires-Expressions") > , Rev< 2u, Arr64< Hash(wxS("Author1617")) >(), wxS("Lifting Restrictions on requires-Expressions") >  >() },
    {  267u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1934")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 1u, Arr64< Hash(wxS("Author1602")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 2u, Arr64< Hash(wxS("Author1117")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 3u, Arr64< Hash(wxS("Author1142")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 4u, Arr64< Hash(wxS("Author341")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 5u, Arr64< Hash(wxS("Author892")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 8u, Arr64< Hash(wxS("Author1188")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 9u, Arr64< Hash(wxS("Author1767")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") > , Rev< 10u, Arr64< Hash(wxS("Author801")) >(), wxS("A Proposal to Add 2D Graphics Rendering and Display to C++") >  >() },
    {  268u, RevList< Rev< 0u, Arr64< Hash(wxS("Author540")) >(), wxS("Title438") >  >() },
    {  269u, RevList< Rev< 0u, Arr64< Hash(wxS("mike_spertus@symantec.com Authors")) >(), wxS("Title406") >  >() },
    {  270u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Removing C dependencies from signal handler wording") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Removing C dependencies from signal handler wording") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Removing C dependencies from signal handler wording") > , Rev< 3u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Removing C dependencies from signal handler wording") >  >() },
    {  271u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Title949") >  >() },
    {  272u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title784") > , Rev< 1u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title887") >  >() },
    {  273u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1468")) >(), wxS("Title1141") > , Rev< 1u, Arr64< Hash(wxS("Author1070")) >(), wxS("Title861") >  >() },
    {  274u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("P0274R0 Clump - A Vector-like Contiguous Sequence Container with Embedded Storage.pages") >  >() },
    {  275u, RevList< Rev< 0u, Arr64< Hash(wxS("Author301")) >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") > , Rev< 1u, Arr64< Hash(wxS("Author1105")) >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") > , Rev< 2u, Arr64< Hash(wxS("Author1659")) >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") > , Rev< 3u, Arr64< Hash(wxS("Author2060")) >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") > , Rev< 4u, Arr64< Hash(wxS("Author1719")) >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") >  >() },
    {  276u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1732")) >(), wxS("A Proposal to add Attribute [[visible]]") >  >() },
    {  277u, RevList< Rev< 0u, Arr64< Hash(wxS("Author298")) >(), wxS("Title252") > , Rev< 1u, Arr64< Hash(wxS("Author920")) >(), wxS("Title741") >  >() },
    {  278u, RevList< Rev< 0u, Arr64< Hash(wxS("Jon Kalb")) >(), wxS("P0278r0 - volatile solutions") >  >() },
    {  279u, RevList< Rev< 0u, Arr64< Hash(wxS("Author959")) >(), wxS("Read-Copy Update (RCU) for C++") > , Rev< 1u, Arr64< Hash(wxS("Author716")) >(), wxS("Title578") >  >() },
    {  280u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Initialize unspecified aggregate members with direct list initialization") >  >() },
    {  281u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Remove comma elision in variadic function declarations") >  >() },
    {  282u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Const-preserving overloads for the strtox family of functions") >  >() },
    {  283u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2043")) >(), wxS("Title1582") > , Rev< 1u, Arr64< Hash(wxS("Author1670")) >(), wxS("Title1299") > , Rev< 2u, Arr64< Hash(wxS("Author1797")) >(), wxS("Standard and non-standard attributes") >  >() },
    {  284u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Unqualified enumerators in case labels") >  >() },
    {  285u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Using customization points to unify executors") >  >() },
    {  286u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("A networking library extension to support co_await-based coroutines") >  >() },
    {  287u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1188") >  >() },
    {  288u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1220")) >(), wxS("unique_function.pages") > , Rev< 1u, Arr64< Hash(wxS("Author1376")) >(), wxS("unique_function.pages") > , Rev< 4u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("any_invocable") > , Rev< 5u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("any_invocable") > , Rev< 6u, Arr64< Hash(wxS("Matt Calabrese")) >(), wxS("any_invocable") > , Rev< 7u, Arr64< Hash(wxS("Matt Calabrese")) >(), wxS("any_invocable") > , Rev< 8u, Arr64< Hash(wxS("Matt Calabrese")) >(), wxS("move_only_function") > , Rev< 9u, Arr64< Hash(wxS("Matt Calabrese")) >(), wxS("move_only_function") >  >() },
    {  289u, RevList< Rev< 0u, Arr64< Hash(wxS("Author18")) >(), wxS("Title16") >  >() },
    {  290u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony")) >(), wxS("apply() for synchronized_value<T>") > , Rev< 1u, Arr64< Hash(wxS("Anthony")) >(), wxS("apply() for synchronized_value<T>") > , Rev< 2u, Arr64< Hash(wxS("Anthony")) >(), wxS("apply() for synchronized_value<T>") > , Rev< 3u, Arr64< Hash(wxS("Anthony")) >(), wxS("apply() for synchronized_value<T>") > , Rev< 4u, Arr64< Hash(wxS("Anthony")) >(), wxS("apply() for synchronized_value<T>") >  >() },
    {  292u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1322")) >(), wxS("constexpr if: A slightly different syntax") > , Rev< 1u, Arr64< Hash(wxS("Author1407")) >(), wxS("constexpr if: A slightly different syntax") > , Rev< 2u, Arr64< Hash(wxS("Author165")) >(), wxS("constexpr if: A slightly different syntax") >  >() },
    {  293u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1386")) >(), wxS("Title1077") >  >() },
    {  295u, RevList< Rev< 0u, Arr64< Hash(wxS("Author418")) >(), wxS("Adopt Selected Library Fundamentals V2 Components for C++17") >  >() },
    {  296u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Forward progress guarantees: Base definitions") > , Rev< 1u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Forward progress guarantees: Base definitions") > , Rev< 2u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Forward progress guarantees: Base definitions") >  >() },
    {  298u, RevList< Rev< 0u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0298R0.docx") > , Rev< 1u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - D0298R1.docx") > , Rev< 2u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - P0298R2.docx") > , Rev< 3u, Arr64< Hash(wxS("Neil MacIntosh")) >(), wxS("Microsoft Word - D0298R3") >  >() },
    {  299u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Forward progress guarantees for the Parallelism TS v2") > , Rev< 1u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Forward progress guarantees for Parallelism TS features") >  >() },
    {  301u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1917")) >(), wxS("Wording for Unified Call Syntax") > , Rev< 1u, Arr64< Hash(wxS("Author720")) >(), wxS("Wording for Unified Call Syntax (revision 1)") >  >() },
    {  302u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1411")) >(), wxS("Deprecating Allocator Support in std::function") > , Rev< 1u, Arr64< Hash(wxS("Author1144")) >(), wxS("Removing Allocator Support in std::function (rev 1)") >  >() },
    {  303u, RevList< Rev< 0u, Arr64< Hash(wxS("Boris Fomitchev")) >(), wxS("C++ International Standard") >  >() },
    {  304u, RevList< Rev< 0u, Arr64< Hash(wxS("Author904")) >(), wxS("C++ Standard Library Issues Resolved Directly") > , Rev< 1u, Arr64< Hash(wxS("Author389")) >(), wxS("C++ Standard Library Issues Resolved Directly In Issaquah") >  >() },
    {  305u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1441")) >(), wxS("If statement with initializer") > , Rev< 1u, Arr64< Hash(wxS("Author1134")) >(), wxS("Selection statements with initializer") >  >() },
    {  306u, RevList< Rev< 0u, Arr64< Hash(wxS("Author900")) >(), wxS("Comma omission and comma deletion") > , Rev< 1u, Arr64< Hash(wxS("Author195")) >(), wxS("Comma omission and comma deletion") > , Rev< 2u, Arr64< Hash(wxS("Author969")) >(), wxS("Comma omission and comma deletion") > , Rev< 3u, Arr64< Hash(wxS("Author1064")) >(), wxS("Comma omission and comma deletion") > , Rev< 4u, Arr64< Hash(wxS("Author1899")) >(), wxS("Comma omission and comma deletion") >  >() },
    {  307u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title713") > , Rev< 2u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title856") >  >() },
    {  308u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1646")) >(), wxS("Title1275") >  >() },
    {  309u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniele Bordes")) >(), wxS("Title300") >  >() },
    {  310u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1245")) >(), wxS("Node allocators") >  >() },
    {  311u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("A Unified Vision for Manipulating Tuple-like Objects") >  >() },
    {  312u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Microsoft Word - Pointers to Members.docx") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Make Pointers to Members Callable") >  >() },
    {  313u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2002")) >(), wxS("Comparison operators in fold-expressions") >  >() },
    {  314u, RevList< Rev< 0u, Arr64< Hash(wxS("Author536")) >(), wxS("Title435") >  >() },
    {  315u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1636") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title787") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title55") > , Rev< 3u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title985") > , Rev< 4u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1492") >  >() },
    {  316u, RevList< Rev< 0u, Arr64< Hash(wxS("Miro Knejp")) >(), wxS("allocate_unique and allocator_delete") >  >() },
    {  317u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1855")) >(), wxS("Directory Entry Caching") > , Rev< 1u, Arr64< Hash(wxS("Author1076")) >(), wxS("Directory Entry Caching") >  >() },
    {  318u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0318r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0318r1") >  >() },
    {  319u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0319r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0319r1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0319r2") >  >() },
    {  320u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0320r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0320r1") >  >() },
    {  322u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0322r0 : exception_list") >  >() },
    {  323u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0323r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0323r1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0323r2") > , Rev< 3u, Arr64< Hash(wxS("Make bad_expected_access")) >(), wxS("p0323r3") > , Rev< 4u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("p0323r4: std::expected") > , Rev< 5u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("p0323r5: std::expected") > , Rev< 7u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") > , Rev< 8u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") > , Rev< 9u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") > , Rev< 10u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") > , Rev< 11u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") > , Rev< 12u, Arr64< Hash(wxS("Vicente Botet")) >(), wxS("std::expected") >  >() },
    {  324u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1183")) >(), wxS("One Concept Definition Syntax") >  >() },
    {  325u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Propose to adopt make_array in C++17") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Propose to adopt make_array into the IS") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("to_array from LFTS with updates - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("to_array from LFTS with updates - HackMD") > , Rev< 4u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("to_array from LFTS with updates - HackMD") >  >() },
    {  326u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0326r0") >  >() },
    {  327u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0327r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0327r1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0327r2") > , Rev< 3u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0327r3") >  >() },
    {  329u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2215")) >(), wxS("Title1695") > , Rev< 1u, Arr64< Hash(wxS("Author1446")) >(), wxS("Title1123") > , Rev< 2u, Arr64< Hash(wxS("Author1203")) >(), wxS("Title947") > , Rev< 3u, Arr64< Hash(wxS("Author871")) >(), wxS("Title698") > , Rev< 4u, Arr64< Hash(wxS("Author31")) >(), wxS("Title26") >  >() },
    {  330u, RevList< Rev< 0u, Arr64< Hash(wxS("Rein Halbersma")) >(), wxS("Title225") > , Rev< 1u, Arr64< Hash(wxS("Rein Halbersma")) >(), wxS("Title56") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffixes for ptrdiff_t and size_t") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffixes for ptrdiff_t and size_t") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffixes for ptrdiff_t and size_t") > , Rev< 6u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffixes for ptrdiff_t and size_t") > , Rev< 7u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffixes for ptrdiff_t and size_t") > , Rev< 8u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Literal Suffix for (signed) size_t") >  >() },
    {  331u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0331r0 : Motivation and Examples for Multidimensional Array") >  >() },
    {  332u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0332r0 : Relaxed Incomplete Multidimensional Array Type Declaration") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0332r1 : Relaxed Incomplete Multidimensional Array Type Declaration") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("p0332R2: Relaxed Incomplete Multidimensional Array Type Declaration") >  >() },
    {  333u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0333r0 : Improving Parallel Algorithm Exception Handling") >  >() },
    {  334u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0334r0 : Immutable Persistent Containers") >  >() },
    {  335u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Context Tokens for Parallel Algorithms") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Context Tokens for Parallel Algorithms") >  >() },
    {  336u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better Names for Parallel Execution Policies in C++17") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better Names for Parallel Execution Policies in C++17") >  >() },
    {  337u, RevList< Rev< 0u, Arr64< Hash(wxS("Author408")) >(), wxS("P0337r0 | Delete operator= for polymorphic_allocator") >  >() },
    {  338u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0338r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0338r1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0338r2") > , Rev< 3u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0338r3") >  >() },
    {  339u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<void> as a vocabulary type") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") > , Rev< 2u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") > , Rev< 3u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") > , Rev< 4u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") > , Rev< 5u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") > , Rev< 6u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<> as a vocabulary type") >  >() },
    {  340u, RevList< Rev< 0u, Arr64< Hash(wxS("Author4")) >(), wxS("P0340R0") > , Rev< 1u, Arr64< Hash(wxS("Author823")) >(), wxS("Making std::underlying_type SFINAE-friendly") > , Rev< 2u, Arr64< Hash(wxS("Author1506")) >(), wxS("D0340R2: Making std::underlying_type SFINAE-friendly") > , Rev< 3u, Arr64< Hash(wxS("Author10")) >(), wxS("Making std::underlying_type SFINAE-friendly") >  >() },
    {  341u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0Mike Spertus")) >(), wxS("Leveraging parameter packs outside of templates") >  >() },
    {  342u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0Mike Spertus")) >(), wxS("Timing barriers") > , Rev< 1u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Title1502") > , Rev< 2u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("pessimize_hint") >  >() },
    {  343u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0343r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0343r1") >  >() },
    {  345u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Allowing any unsigned integral type as parameter type for literal operators") >  >() },
    {  346u, RevList< Rev< 0u, Arr64< Hash(wxS("Author91")) >(), wxS("A <random> Nomenclature Tweak") > , Rev< 1u, Arr64< Hash(wxS("Author2148")) >(), wxS("A <random> Nomenclature Tweak") >  >() },
    {  347u, RevList< Rev< 0u, Arr64< Hash(wxS("R. Tim")) >(), wxS("P0347R0") > , Rev< 1u, Arr64< Hash(wxS("R. Tim")) >(), wxS("Simplifying simple uses of <random>") >  >() },
    {  348u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemienski")) >(), wxS("Validity testing issues") >  >() },
    {  349u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Assumptions about the size of datapar [P0349R0]") >  >() },
    {  350u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Integrating datapar with parallel algorithms and executors [P0350R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Integrating simd with parallel algorithms [P0350R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Integrating simd with parallel algorithms [P0350R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Integrating simd with parallel algorithms [P0350R3]") > , Rev< 4u, Arr64< Hash(wxS("Ma hias")) >(), wxS("Integrating simd with parallel algorithms [P0350R4]") >  >() },
    {  352u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1733")) >(), wxS("Title1339") > , Rev< 1u, Arr64< Hash(wxS("Author1394")) >(), wxS("Title1083") >  >() },
    {  353u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1605")) >(), wxS("Unicode Encoding conversions") > , Rev< 1u, Arr64< Hash(wxS("Author1189")) >(), wxS("Unicode Encoding conversions") >  >() },
    {  354u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title924") >  >() },
    {  355u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1815")) >(), wxS("Extending <chrono> to Calendars and Time Zones") > , Rev< 1u, Arr64< Hash(wxS("Author2070")) >(), wxS("Extending <chrono> to Calendars and Time Zones") > , Rev< 2u, Arr64< Hash(wxS("Author1345")) >(), wxS("Extending <chrono> to Calendars and Time Zones") > , Rev< 3u, Arr64< Hash(wxS("Author1002")) >(), wxS("Extending <chrono> to Calendars and Time Zones") > , Rev< 4u, Arr64< Hash(wxS("Author316")) >(), wxS("Extending <chrono> to Calendars and Time Zones") > , Rev< 5u, Arr64< Hash(wxS("Author1531")) >(), wxS("Extending <chrono> to Calendars and Time Zones") >  >() },
    {  356u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") > , Rev< 4u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") > , Rev< 5u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Simplified partial function application") >  >() },
    {  357u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("'reference_wrapper' for incomplete types") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("'reference_wrapper' for incomplete types") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("'reference_wrapper' for incomplete types") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("'reference_wrapper' for incomplete types") >  >() },
    {  358u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixes for 'not_fn'") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixes for 'not_fn'") >  >() },
    {  359u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title588") >  >() },
    {  360u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title916") >  >() },
    {  361u, RevList< Rev< 0u, Arr64< Hash(wxS("Hartmut Kaiser")) >(), wxS("Title1424") > , Rev< 1u, Arr64< Hash(wxS("Hartmut Kaiser")) >(), wxS("Title1417") >  >() },
    {  362u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title796") >  >() },
    {  363u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1096") >  >() },
    {  364u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1200") >  >() },
    {  365u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1558") >  >() },
    {  366u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Luchangco")) >(), wxS("Title1398") >  >() },
    {  367u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1688")) >(), wxS("Title1310") >  >() },
    {  369u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1221") >  >() },
    {  370u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Design Updates Omnibus") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Design Updates Omnibus") > , Rev< 2u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Design Updates Omnibus") > , Rev< 3u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Design Updates Omnibus") >  >() },
    {  371u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Temporarily deprecate memory_order_consume") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Temporarily discourage memory_order_consume") >  >() },
    {  372u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1224")) >(), wxS("P0372R0 - A type for utf-8 data") >  >() },
    {  373u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title899") >  >() },
    {  374u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1045")) >(), wxS("Title840") >  >() },
    {  375u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title803") >  >() },
    {  376u, RevList< Rev< 0u, Arr64< Hash(wxS("Author635")) >(), wxS("A Single Generalization of std::invoke, std::apply, and std::visit") >  >() },
    {  377u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1058")) >(), wxS("std::integral_constant with a Deduced Value Type") >  >() },
    {  379u, RevList< Rev< 0u, Arr64< Hash(wxS("Author405")) >(), wxS("Why a joining thread from P0206 is a Bad Idea") >  >() },
    {  380u, RevList< Rev< 0u, Arr64< Hash(wxS("Author380")) >(), wxS("Title323") > , Rev< 1u, Arr64< Hash(wxS("Author696")) >(), wxS("Title559") >  >() },
    {  381u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1949")) >(), wxS("Title1511") > , Rev< 1u, Arr64< Hash(wxS("Author859")) >(), wxS("Title683") >  >() },
    {  382u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Comments on P0119: Overload sets as function arguments") >  >() },
    {  384u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1702")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  385u, RevList< Rev< 0u, Arr64< Hash(wxS("Matus")) >(), wxS("Title1697") > , Rev< 1u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Title1378") > , Rev< 2u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Title932") >  >() },
    {  386u, RevList< Rev< 0u, Arr64< Hash(wxS("Author169")) >(), wxS("Title146") > , Rev< 2u, Arr64< Hash(wxS("Author669")) >(), wxS("Title541") >  >() },
    {  387u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Memory Model Issues for Concurrent Data Structures") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Memory Model Issues for Concurrent Data Structures") >  >() },
    {  388u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2172")) >(), wxS("Proposal: conversions to arrays of unknown bound") > , Rev< 1u, Arr64< Hash(wxS("Author1622")) >(), wxS("Proposal: conversions to arrays of unknown bound") > , Rev< 2u, Arr64< Hash(wxS("Author570")) >(), wxS("Proposal: conversions to arrays of unknown bound") > , Rev< 3u, Arr64< Hash(wxS("Author832")) >(), wxS("Proposal: conversions to arrays of unknown bound") > , Rev< 4u, Arr64< Hash(wxS("Author2130")) >(), wxS("Proposal: conversions to arrays of unknown bound") >  >() },
    {  389u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1554")) >(), wxS("Proposal: template keyword in unqualified-ids") >  >() },
    {  390u, RevList< Rev< 0u, Arr64< Hash(wxS("Nickolas Pokhylets")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0390r0") >  >() },
    {  391u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2182")) >(), wxS("Introducing the term \"templated entity\"") >  >() },
    {  392u, RevList< Rev< 0u, Arr64< Hash(wxS("Author979")) >(), wxS("Microsoft Word - P0392_stringview4path_160623.docx") >  >() },
    {  393u, RevList< Rev< 3u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Variant: relational operators.") >  >() },
    {  394u, RevList< Rev< 4u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling") >  >() },
    {  396u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1071")) >(), wxS("C++ Concepts Active Issues List (Snapshot of Revision 4)") >  >() },
    {  397u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1046")) >(), wxS("C++ Standard Library Priority 1 Issues Resolved Directly In Oulu") >  >() },
    {  398u, RevList< Rev< 0u, Arr64< Hash(wxS("Author673")) >(), wxS("Core issue 1518: Explicit default constructors and copy-list-initialization") >  >() },
    {  399u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1558")) >(), wxS("Networking TS & Threadpool") >  >() },
    {  400u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1330")) >(), wxS("P0400R0 2016-06-25") >  >() },
    {  401u, RevList< Rev< 0u, Arr64< Hash(wxS("Author510")) >(), wxS("Extensions to the Allocator interface") > , Rev< 1u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") > , Rev< 2u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") > , Rev< 3u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") > , Rev< 4u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") > , Rev< 5u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") > , Rev< 6u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Providing size feedback in the Allocator interface") >  >() },
    {  403u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1234")) >(), wxS("Literal suffixes for basic_string_view") > , Rev< 1u, Arr64< Hash(wxS("Author795")) >(), wxS("Literal suffixes for basic_string_view") >  >() },
    {  404u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert Tong")) >(), wxS("Matching Types: 404 Syntax Not found") >  >() },
    {  405u, RevList< Rev< 0u, Arr64< Hash(wxS("Author578")) >(), wxS("Wording for Networking TS changes discussed in Kona") >  >() },
    {  406u, RevList< Rev< 1u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("Intrusive Containers") >  >() },
    {  407u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1325")) >(), wxS("Title1022") > , Rev< 1u, Arr64< Hash(wxS("Author1427")) >(), wxS("Title1106") > , Rev< 2u, Arr64< Hash(wxS("Author525")) >(), wxS("Title430") >  >() },
    {  408u, RevList< Rev< 0u, Arr64< Hash(wxS("Author313")) >(), wxS("Title265") > , Rev< 1u, Arr64< Hash(wxS("Author1846")) >(), wxS("Title1431") > , Rev< 2u, Arr64< Hash(wxS("Author52")) >(), wxS("Title52") > , Rev< 3u, Arr64< Hash(wxS("Author922")) >(), wxS("Title742") > , Rev< 4u, Arr64< Hash(wxS("Author2146")) >(), wxS("Title1654") > , Rev< 5u, Arr64< Hash(wxS("Author1522")) >(), wxS("Title1184") > , Rev< 6u, Arr64< Hash(wxS("Author1408")) >(), wxS("Title1095") > , Rev< 7u, Arr64< Hash(wxS("Author352")) >(), wxS("Title298") >  >() },
    {  409u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2103")) >(), wxS("Allow lambda capture [=, this]") > , Rev< 1u, Arr64< Hash(wxS("Author1819")) >(), wxS("Allow lambda capture [=, this]") > , Rev< 2u, Arr64< Hash(wxS("Author275")) >(), wxS("Allow lambda capture [=, this]") >  >() },
    {  411u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1912")) >(), wxS("Separating Library Requirements and Preconditions") >  >() },
    {  412u, RevList< Rev< 0u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("Benchmarking Primitives") >  >() },
    {  413u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Updating Parallel Execution Policy Names in the Parallelism TS") >  >() },
    {  414u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1272")) >(), wxS("Merging shared_ptr changes from Library Fundamentals to C++17") > , Rev< 1u, Arr64< Hash(wxS("Author954")) >(), wxS("Merging shared_ptr changes from Library Fundamentals to C++17") > , Rev< 2u, Arr64< Hash(wxS("Author396")) >(), wxS("Merging shared_ptr changes from Library Fundamentals to C++17") >  >() },
    {  415u, RevList< Rev< 0u, Arr64< Hash(wxS("Author152")) >(), wxS("Constexpr for std::complex") > , Rev< 1u, Arr64< Hash(wxS("Author1585")) >(), wxS("Constexpr for std::complex") >  >() },
    {  416u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2028")) >(), wxS("dot P0416") > , Rev< 1u, Arr64< Hash(wxS("Author825")) >(), wxS("Title657") >  >() },
    {  417u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1075")) >(), wxS("ISO 10646:2014") > , Rev< 1u, Arr64< Hash(wxS("Author339")) >(), wxS("ISO 10646:2014") >  >() },
    {  418u, RevList< Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0418r1: Fail or succeed: there is no atomic lattice") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0418r2: Fail or succeed: there is no atomic lattice") >  >() },
    {  421u, RevList< Rev< 0u, Arr64< Hash(wxS("Mariusz Moczala")) >(), wxS("Title401") >  >() },
    {  422u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2033")) >(), wxS("Out-of-Thin-Air Execution is Vacuous") >  >() },
    {  423u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1711")) >(), wxS("Variable templates for Networking TS traits") >  >() },
    {  424u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title450") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title47") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title527") >  >() },
    {  425u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1225") >  >() },
    {  426u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1600")) >(), wxS("Constexpr for std::char_traits") > , Rev< 1u, Arr64< Hash(wxS("Author1181")) >(), wxS("Constexpr for std::char_traits") >  >() },
    {  428u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title567") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1150") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title858") >  >() },
    {  429u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1588")) >(), wxS("Title1232") > , Rev< 1u, Arr64< Hash(wxS("Author1674")) >(), wxS("Title1300") > , Rev< 2u, Arr64< Hash(wxS("Author889")) >(), wxS("Title718") > , Rev< 3u, Arr64< Hash(wxS("Author718")) >(), wxS("Title580") > , Rev< 4u, Arr64< Hash(wxS("Author1484")) >(), wxS("A Standard flatmap") > , Rev< 5u, Arr64< Hash(wxS("Author1817")) >(), wxS("A Standard flatmap") > , Rev< 6u, Arr64< Hash(wxS("Author257")) >(), wxS("A Standard flatmap") > , Rev< 7u, Arr64< Hash(wxS("Author454")) >(), wxS("A Standard flatmap") > , Rev< 8u, Arr64< Hash(wxS("Author636")) >(), wxS("A Standard flatmap") > , Rev< 9u, Arr64< Hash(wxS("Author1983")) >(), wxS("A Standard flatmap") >  >() },
    {  430u, RevList< Rev< 0u, Arr64< Hash(wxS("Jason Liu")) >(), wxS("Microsoft Word - open LWG issue (Autosaved).docx") > , Rev< 1u, Arr64< Hash(wxS("Jason Liu")) >(), wxS("Microsoft Word - P0430R1.docx") > , Rev< 2u, Arr64< Hash(wxS("Jason Liu")) >(), wxS("Title1208") >  >() },
    {  431u, RevList< Rev< 0u, Arr64< Hash(wxS("Hyman Rosen")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0431r0") >  >() },
    {  432u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title857") >  >() },
    {  433u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Toward a resolution of US7 and US14: Integrating templatededuction for class templates into the standard library") >  >() },
    {  434u, RevList< Rev< 0u, Arr64< Hash(wxS("BRETT SEARLES")) >(), wxS("P0434 Portable Interrupt Library") >  >() },
    {  435u, RevList< Rev< 0u, Arr64< Hash(wxS("Author524")) >(), wxS("Resolving LWG Issues re common_type") > , Rev< 1u, Arr64< Hash(wxS("Author74")) >(), wxS("Resolving LWG Issues re common_type") >  >() },
    {  436u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1941")) >(), wxS("An Extensible Approach to Obtaining Selected Operators") > , Rev< 1u, Arr64< Hash(wxS("Author992")) >(), wxS("An Extensible Approach to Obtaining Selected Operators") >  >() },
    {  437u, RevList< Rev< 0u, Arr64< Hash(wxS("Author17")) >(), wxS("Numeric Traits for the Next Standard Library") > , Rev< 1u, Arr64< Hash(wxS("Author151")) >(), wxS("Numeric Traits for the Standard Library") >  >() },
    {  438u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1813")) >(), wxS("Toward a <random> Technical Specification") >  >() },
    {  439u, RevList< Rev< 0u, Arr64< Hash(wxS("Author108")) >(), wxS("Make std::memory_order a scoped enumeration") >  >() },
    {  440u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0440r0 : Floating Point Atomic View") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0440r1 : Floating Point Atomic View") >  >() },
    {  441u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges: Merging Writable and MoveWritable") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges: Merging Writable and MoveWritable") >  >() },
    {  443u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title517") > , Rev< 1u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title655") > , Rev< 2u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title90") > , Rev< 3u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title692") > , Rev< 4u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title882") > , Rev< 5u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title30") > , Rev< 9u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title734") > , Rev< 10u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title820") > , Rev< 11u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("A Unified Executors Proposal for C++ | P0443R11") > , Rev< 12u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("A Unified Executors Proposal for C++ | P0443R12") > , Rev< 13u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("A Unified Executors Proposal for C++ | P0443R13") > , Rev< 14u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("A Unified Executors Proposal for C++ | P0443R14") >  >() },
    {  444u, RevList< Rev< 0u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("P0444") >  >() },
    {  445u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1355") >  >() },
    {  446u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title271") >  >() },
    {  447u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 1u, Arr64< Hash(wxS("Author263")) >(), wxS("Title222") > , Rev< 2u, Arr64< Hash(wxS("Author989")) >(), wxS("Title800") > , Rev< 3u, Arr64< Hash(wxS("Author1959")) >(), wxS("Title1524") > , Rev< 4u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 8u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 9u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 10u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 11u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 12u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 13u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 14u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::colony to the standard library") > , Rev< 15u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 16u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 17u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 18u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 19u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 20u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 21u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 22u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 23u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 24u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 25u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 26u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 27u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") > , Rev< 28u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Introduction of std::hive to the standard library") >  >() },
    {  448u, RevList< Rev< 0u, Arr64< Hash(wxS("Author506")) >(), wxS("Title417") > , Rev< 1u, Arr64< Hash(wxS("Author2041")) >(), wxS("Title1578") > , Rev< 2u, Arr64< Hash(wxS("Author9")) >(), wxS("Title12") > , Rev< 3u, Arr64< Hash(wxS("Author760")) >(), wxS("Title617") > , Rev< 4u, Arr64< Hash(wxS("Author1271")) >(), wxS("Title984") >  >() },
    {  451u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0451r0: Future-Proofing Parallel Algorithms Exception Handling") >  >() },
    {  452u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0452r0: Binary-Binary transform_reduce(): The Missing Overload") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0452r1: Unifying <numeric> Parallel Algorithms") >  >() },
    {  454u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0454r0: Wording for a Minimal mdspan<>") >  >() },
    {  457u, RevList< Rev< 0u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("String Prefix and Suffix Checking") > , Rev< 1u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("String Prefix and Suffix Checking") > , Rev< 2u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("String Prefix and Suffix Checking") >  >() },
    {  458u, RevList< Rev< 0u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("Checking for Existence of an Element in Associative Containers") > , Rev< 1u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("Checking for Existence of an Element in Associative Containers") > , Rev< 2u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("Checking for Existence of an Element in Associative Containers") >  >() },
    {  459u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1432")) >(), wxS("Working Draft, C++ Extensions for Ranges") >  >() },
    {  460u, RevList< Rev< 0u, Arr64< Hash(wxS("Sean Middleditch")) >(), wxS("Title1240") >  >() },
    {  461u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1933")) >(), wxS("Title1494") > , Rev< 1u, Arr64< Hash(wxS("Author1618")) >(), wxS("Title1254") > , Rev< 2u, Arr64< Hash(wxS("Author1056")) >(), wxS("Title847") >  >() },
    {  462u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1340")) >(), wxS("Title1031") > , Rev< 1u, Arr64< Hash(wxS("Author1944")) >(), wxS("Title1506") >  >() },
    {  463u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1512")) >(), wxS("endian") > , Rev< 1u, Arr64< Hash(wxS("Author1477")) >(), wxS("endian") >  >() },
    {  464u, RevList< Rev< 0u, Arr64< Hash(wxS("Author403")) >(), wxS("Title344") > , Rev< 1u, Arr64< Hash(wxS("Tony van")) >(), wxS("Revisiting the meaning of foo(ConceptName,ConceptName)") > , Rev< 2u, Arr64< Hash(wxS("Tony van")) >(), wxS("Revisiting the meaning of foo(ConceptName,ConceptName)") >  >() },
    {  465u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title943") >  >() },
    {  466u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title23") > , Rev< 1u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1303") > , Rev< 2u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title656") > , Rev< 3u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1383") > , Rev< 4u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title198") > , Rev< 5u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1172") >  >() },
    {  467u, RevList< Rev< 0u, Arr64< Hash(wxS("Author527")) >(), wxS("Iterator Concerns for Parallel Algorithms") > , Rev< 1u, Arr64< Hash(wxS("Author1701")) >(), wxS("Iterator Concerns for Parallel Algorithms") > , Rev< 2u, Arr64< Hash(wxS("Author993")) >(), wxS("Iterator Concerns for Parallel Algorithms") >  >() },
    {  468u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("P0468R0 : An Intrusive Smart Pointer") > , Rev< 1u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("An Intrusive Smart Pointer") >  >() },
    {  469u, RevList< Rev< 0u, Arr64< Hash(wxS("R. Tim")) >(), wxS("Sample in place") >  >() },
    {  471u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1331") >  >() },
    {  472u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1691") > , Rev< 1u, Arr64< Hash(wxS("David Sankel")) >(), wxS("P0472R1 - Put std::monostate in <utility>") > , Rev< 2u, Arr64< Hash(wxS("David Sankel")) >(), wxS("P0472R2 - Put std::monostate in <utility>") > , Rev< 3u, Arr64< Hash(wxS("David Sankel")) >(), wxS("P0472R3 - Put std::monostate in <utility>") >  >() },
    {  473u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title342") >  >() },
    {  474u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Comparison in C++: Basic Facilities") >  >() },
    {  475u, RevList< Rev< 0u, Arr64< Hash(wxS("Author179")) >(), wxS("LWG 2511: guaranteed copy elision for piecewise construction") > , Rev< 1u, Arr64< Hash(wxS("Author1038")) >(), wxS("LWG 2511: guaranteed copy elision for piecewise construction (rev. 1)") >  >() },
    {  476u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0476r0: Bit-casting object representations") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0476r1: Bit-casting object representations") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0476r2: Bit-casting object representations") >  >() },
    {  477u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1110")) >(), wxS("std::monostate_function<>") >  >() },
    {  478u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Manganelli")) >(), wxS("Title1652") >  >() },
    {  479u, RevList< Rev< 0u, Arr64< Hash(wxS("Clay Trychta")) >(), wxS("Attributes for Likely and Unlikely Branches") > , Rev< 1u, Arr64< Hash(wxS("Clay Trychta")) >(), wxS("Attributes for Likely and Unlikely Statements") > , Rev< 2u, Arr64< Hash(wxS("Clay Trychta")) >(), wxS("Attributes for Likely and Unlikely Statements") > , Rev< 4u, Arr64< Hash(wxS("Clay Trychta")) >(), wxS("Proposed wording for likely and unlikely attributes (Revision 4)") > , Rev< 5u, Arr64< Hash(wxS("Clay Trychta")) >(), wxS("Proposed wording for likely and unlikely attributes (Revision 5)") >  >() },
    {  480u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1341")) >(), wxS("Explicit type checking with structured bindings") > , Rev< 1u, Arr64< Hash(wxS("Author2071")) >(), wxS("Structured bindings with explicit types") >  >() },
    {  481u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title637") >  >() },
    {  482u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 1)") > , Rev< 2u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 2)") > , Rev< 3u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 3)") > , Rev< 4u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 4)") > , Rev< 5u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 5)") > , Rev< 6u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t: A type for UTF-8 characters and strings (Revision 6)") >  >() },
    {  483u, RevList< Rev< 0u, Arr64< Hash(wxS("Patrice Roy")) >(), wxS("Title1438") >  >() },
    {  484u, RevList< Rev< 0u, Arr64< Hash(wxS("Patrice Roy")) >(), wxS("Title439") > , Rev< 1u, Arr64< Hash(wxS("Patrice Roy")) >(), wxS("Title1281") >  >() },
    {  485u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Manganelli")) >(), wxS("Title1234") >  >() },
    {  486u, RevList< Rev< 0u, Arr64< Hash(wxS("Ildus Nezametdinov")) >(), wxS("Title1108") >  >() },
    {  487u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Fixing operator>>(basic_istream&, CharT*) (LWG 2499)") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Fixing operator>>(basic_istream&, CharT*) (LWG 2499)") >  >() },
    {  488u, RevList< Rev< 0u, Arr64< Hash(wxS("Author104")) >(), wxS("Title95") >  >() },
    {  489u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2023")) >(), wxS("Title1565") >  >() },
    {  490u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1308")) >(), wxS("Core language changes addressing National Body comments for CD C++17") >  >() },
    {  492u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2134")) >(), wxS("Filesystem NB Comments C++17") > , Rev< 1u, Arr64< Hash(wxS("Author651")) >(), wxS("Filesystem NB Comments C++17") > , Rev< 2u, Arr64< Hash(wxS("Author2188")) >(), wxS("Filesystem NB Comments C++17") >  >() },
    {  493u, RevList< Rev< 0u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Title1231") > , Rev< 1u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Title1009") > , Rev< 2u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Title1512") > , Rev< 3u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Atomic minimum/maximum") > , Rev< 4u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Atomic minimum/maximum") > , Rev< 5u, Arr64< Hash(wxS("Al Grant")) >(), wxS("Atomic minimum/maximum") >  >() },
    {  494u, RevList< Rev< 0u, Arr64< Hash(wxS("Ildus Nezametdinov")) >(), wxS("Title27") >  >() },
    {  495u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Concurrency Safety in C++ Data Structures") >  >() },
    {  497u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1597")) >(), wxS("Fixes to shared_ptr support for arrays") >  >() },
    {  500u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title545") >  >() },
    {  501u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title896") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1159") > , Rev< 2u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title753") > , Rev< 3u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title484") >  >() },
    {  502u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0502r0: Throwing out of a parallel algorithm terminatesbut how?") >  >() },
    {  503u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1326")) >(), wxS("Correcting library usage of \"literal type\"") >  >() },
    {  504u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1460")) >(), wxS("Revisiting in-place tag types for any/optional/variant") >  >() },
    {  505u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1825")) >(), wxS("Wording for GB 50") >  >() },
    {  506u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1761")) >(), wxS("Title1367") > , Rev< 1u, Arr64< Hash(wxS("Author1999")) >(), wxS("Title1546") > , Rev< 2u, Arr64< Hash(wxS("Author1179")) >(), wxS("Title929") >  >() },
    {  507u, RevList< Rev< 0u, Arr64< Hash(wxS("Author38")) >(), wxS("Core Issue 1343: Sequencing of non-class initialization") >  >() },
    {  508u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1885")) >(), wxS("Wording for GB 58") >  >() },
    {  509u, RevList< Rev< 1u, Arr64< Hash(wxS("Author1610")) >(), wxS("P0509R1") >  >() },
    {  510u, RevList< Rev< 0u, Arr64< Hash(wxS("Author294")) >(), wxS("Disallowing references, incomplete types, arrays, and Empty Variants") >  >() },
    {  511u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Deduction guide for") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Deduction guide for std::array") >  >() },
    {  512u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1150")) >(), wxS("Title914") >  >() },
    {  513u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1277") >  >() },
    {  514u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("D0514R0") > , Rev< 1u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("D0514R1") > , Rev< 2u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("D0514R1") > , Rev< 3u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("D0514R1") > , Rev< 4u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("D0514R1") >  >() },
    {  515u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title8") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1446") > , Rev< 2u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title571") > , Rev< 3u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1012") >  >() },
    {  516u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0516r0: Clarify That shared_futures Copy Operations have Wide Contracts") >  >() },
    {  517u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0517r0: Make future_error Constructible") >  >() },
    {  518u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("p0518r0: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11") > , Rev< 1u, Arr64< Hash(wxS("David S")) >(), wxS("P0518r1: Allowing copies as arguments to function objects given to parallel algorithms in response to CH11") >  >() },
    {  519u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1502")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  520u, RevList< Rev< 0u, Arr64< Hash(wxS("Author249")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  521u, RevList< Rev< 0u, Arr64< Hash(wxS("Stephan T")) >(), wxS("P0521r0: Proposed Resolution for CA 14 (shared_ptr use_count/unique)") >  >() },
    {  522u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("DR: Matching of template template-arguments excludes compatible templates") >  >() },
    {  523u, RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Wording for CH 10: Complexity of parallel algorithms") > , Rev< 1u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Wording for CH 10: Complexity of parallel algorithms") >  >() },
    {  527u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Untitled Document.md") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title1419") >  >() },
    {  528u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("P0528r0: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0528r1: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0528R2: The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange") > , Rev< 3u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange") >  >() },
    {  529u, RevList< Rev< 0u, Arr64< Hash(wxS("Author758")) >(), wxS("Title615") >  >() },
    {  532u, RevList< Rev< 0u, Arr64< Hash(wxS("Author86")) >(), wxS("Microsoft Word - P0532R0_onlaunder_170114.docx") >  >() },
    {  533u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1323")) >(), wxS("Title1020") > , Rev< 1u, Arr64< Hash(wxS("Author1435")) >(), wxS("Title1115") > , Rev< 2u, Arr64< Hash(wxS("Author286")) >(), wxS("Title239") > , Rev< 3u, Arr64< Hash(wxS("Author1714")) >(), wxS("Title1324") > , Rev< 4u, Arr64< Hash(wxS("Author879")) >(), wxS("Title706") > , Rev< 5u, Arr64< Hash(wxS("Author1523")) >(), wxS("Title1185") > , Rev< 6u, Arr64< Hash(wxS("Author793")) >(), wxS("Title642") > , Rev< 7u, Arr64< Hash(wxS("Author1989")) >(), wxS("Title1540") > , Rev< 8u, Arr64< Hash(wxS("Author299")) >(), wxS("Title253") > , Rev< 9u, Arr64< Hash(wxS("Author915")) >(), wxS("Title736") >  >() },
    {  534u, RevList< Rev< 0u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("call/cc: A low-level API for stackful context switching") > , Rev< 1u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("call/cc: A low-level API for stackful context switching") > , Rev< 2u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("call/cc: A low-level API for stackful context switching") > , Rev< 3u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("call/cc: A low-level API for stackful context switching") >  >() },
    {  535u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Generalized Unpacking and Parameter Pack Slicing") >  >() },
    {  536u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Implicit Return Type and Allowing Anonymous Types as Return Values") >  >() },
    {  537u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Allow Attributes on Template Explicit Instantiations") >  >() },
    {  538u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("A Qualified Replacement for #pragma once") >  >() },
    {  539u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2082")) >(), wxS("A Proposal to add wide_int Class") > , Rev< 1u, Arr64< Hash(wxS("Author1620")) >(), wxS("A Proposal to add wide_int Class") > , Rev< 2u, Arr64< Hash(wxS("Author116")) >(), wxS("A Proposal to add wide_int Class") > , Rev< 3u, Arr64< Hash(wxS("Author1431")) >(), wxS("A Proposal to add wide_int Class") > , Rev< 4u, Arr64< Hash(wxS("Author1807")) >(), wxS("A Proposal to add wide_int Class") > , Rev< 5u, Arr64< Hash(wxS("Author816")) >(), wxS("A Proposal to add wideint Template Class") >  >() },
    {  540u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1084")) >(), wxS("A Proposal to Add split/join of string/string_view to the Standard Library") > , Rev< 1u, Arr64< Hash(wxS("Author2062")) >(), wxS("A Proposal to Add split/join of string/string_view to the Standard Library") >  >() },
    {  541u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Ranges TS: Post-Increment on Input and Output Iterators") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Ranges TS: Post-Increment on Input and Output Iterators") >  >() },
    {  542u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2006")) >(), wxS("Support for contract based programming in C++") > , Rev< 1u, Arr64< Hash(wxS("Author544")) >(), wxS("Support for contract based programming in C++") > , Rev< 2u, Arr64< Hash(wxS("Author600")) >(), wxS("Support for contract based programming in C++") > , Rev< 3u, Arr64< Hash(wxS("Author1586")) >(), wxS("Support for contract based programming in C++") > , Rev< 4u, Arr64< Hash(wxS("Author463")) >(), wxS("Support for contract based programming in C++") > , Rev< 5u, Arr64< Hash(wxS("Author441")) >(), wxS("Support for contract based programming in C++") >  >() },
    {  543u, RevList< Rev< 0u, Arr64< Hash(wxS("Author779")) >(), wxS("Saturation arithmetic") > , Rev< 1u, Arr64< Hash(wxS("Author1991")) >(), wxS("Saturation arithmetic") > , Rev< 2u, Arr64< Hash(wxS("Author1003")) >(), wxS("Saturation arithmetic") > , Rev< 3u, Arr64< Hash(wxS("Author2015")) >(), wxS("Saturation arithmetic") >  >() },
    {  544u, RevList< Rev< 0u, Arr64< Hash(wxS("Author416")) >(), wxS("User Injection of Filesystems") >  >() },
    {  545u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrey Semashev")) >(), wxS("Title778") >  >() },
    {  546u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0546r0 : Span - foundation for the future") > , Rev< 1u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0546r1 : Span - foundation for the future") > , Rev< 2u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0546r2 : Span - foundation for the future") >  >() },
    {  547u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Ranges TS: Assorted Object Concept Fixes") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Ranges TS: Assorted Object Concept Fixes") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Ranges TS: Assorted Object Concept Fixes") >  >() },
    {  548u, RevList< Rev< 0u, Arr64< Hash(wxS("Author500")) >(), wxS("commontype and duration") > , Rev< 1u, Arr64< Hash(wxS("Author102")) >(), wxS("commontype and duration") >  >() },
    {  549u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1158")) >(), wxS("Adjuncts to std::hash") > , Rev< 1u, Arr64< Hash(wxS("Author858")) >(), wxS("Adjuncts to std::hash") > , Rev< 2u, Arr64< Hash(wxS("Author1026")) >(), wxS("Adjuncts to std::hash") > , Rev< 3u, Arr64< Hash(wxS("Author883")) >(), wxS("Adjuncts to std::hash") > , Rev< 4u, Arr64< Hash(wxS("Author1656")) >(), wxS("Adjuncts to std::hash") > , Rev< 5u, Arr64< Hash(wxS("Author568")) >(), wxS("Adjuncts to std::hash") > , Rev< 6u, Arr64< Hash(wxS("Author803")) >(), wxS("Adjuncts to std::hash") > , Rev< 7u, Arr64< Hash(wxS("Author978")) >(), wxS("Adjuncts to std::hash") >  >() },
    {  550u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1449")) >(), wxS("Transformation Trait uncvref") > , Rev< 1u, Arr64< Hash(wxS("Author753")) >(), wxS("Transformation Trait uncvref") > , Rev< 2u, Arr64< Hash(wxS("Author1576")) >(), wxS("Transformation Trait removecvref") >  >() },
    {  551u, RevList< Rev< 0u, Arr64< Hash(wxS("Author875")) >(), wxS("Thou Shalt Not Specialize std Function Templates!") > , Rev< 1u, Arr64< Hash(wxS("Author697")) >(), wxS("Thou Shalt Not Specialize std Function Templates!") > , Rev< 2u, Arr64< Hash(wxS("Author574")) >(), wxS("Thou Shalt Not Specialize std Function Templates!") > , Rev< 3u, Arr64< Hash(wxS("Author982")) >(), wxS("Thou Shalt Not Specialize std Function Templates!") >  >() },
    {  552u, RevList< Rev< 0u, Arr64< Hash(wxS("Author145")) >(), wxS("enableif vs. requires: A Case Study") >  >() },
    {  553u, RevList< Rev< 0u, Arr64< Hash(wxS("Author45")) >(), wxS("Bit operations") > , Rev< 1u, Arr64< Hash(wxS("Author150")) >(), wxS("Bit operations") > , Rev< 2u, Arr64< Hash(wxS("Author626")) >(), wxS("Bit operations") > , Rev< 3u, Arr64< Hash(wxS("Author1753")) >(), wxS("Bit operations") > , Rev< 4u, Arr64< Hash(wxS("Author1942")) >(), wxS("Bit operations") >  >() },
    {  554u, RevList< Rev< 0u, Arr64< Hash(wxS("Author930")) >(), wxS("Title752") > , Rev< 1u, Arr64< Hash(wxS("Author919")) >(), wxS("p0554r1") >  >() },
    {  555u, RevList< Rev< 0u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("string_view for source_location") >  >() },
    {  556u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1195")) >(), wxS("Integral power-of-2 operations") > , Rev< 1u, Arr64< Hash(wxS("Author1793")) >(), wxS("Integral power-of-2 operations") > , Rev< 2u, Arr64< Hash(wxS("Author1537")) >(), wxS("Integral power-of-2 operations") > , Rev< 3u, Arr64< Hash(wxS("Author601")) >(), wxS("Integral power-of-2 operations") >  >() },
    {  557u, RevList< Rev< 0u, Arr64< Hash(wxS("Author661")) >(), wxS("Title535") >  >() },
    {  558u, RevList< Rev< 0u, Arr64< Hash(wxS("Author890")) >(), wxS("Title719") > , Rev< 1u, Arr64< Hash(wxS("Author359")) >(), wxS("Title303") >  >() },
    {  559u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1539")) >(), wxS("Title1192") >  >() },
    {  560u, RevList< Rev< 0u, Arr64< Hash(wxS("Miro Knejp")) >(), wxS("Class template deduction guides for \"diamond operators\"") >  >() },
    {  561u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2039")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 1u, Arr64< Hash(wxS("Author2153")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 2u, Arr64< Hash(wxS("Author1298")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 3u, Arr64< Hash(wxS("Author2232")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 4u, Arr64< Hash(wxS("Author176")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 5u, Arr64< Hash(wxS("Author47")) >(), wxS("An RAII Interface for Deferred Reclamation") > , Rev< 6u, Arr64< Hash(wxS("Author708")) >(), wxS("An RAII Interface for Deferred Reclamation") >  >() },
    {  562u, RevList< Rev< 0u, Arr64< Hash(wxS("Author494")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1735")) >(), wxS("Initialization List Symmetry") > , Rev< 2u, Arr64< Hash(wxS("Author951")) >(), wxS("Initialization List Symmetry") >  >() },
    {  563u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1947")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    {  564u, RevList< Rev< 0u, Arr64< Hash(wxS("Author929")) >(), wxS("Wording for three-way comparisons") >  >() },
    {  565u, RevList< Rev< 0u, Arr64< Hash(wxS("Author373")) >(), wxS("P0565") >  >() },
    {  566u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title358") > , Rev< 1u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1366") > , Rev< 2u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title329") > , Rev< 3u, Arr64< Hash(wxS("Michael")) >(), wxS("Title361") > , Rev< 4u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1013") > , Rev< 5u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1375") >  >() },
    {  567u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("index.html") > , Rev< 1u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("P0567r1.html") >  >() },
    {  568u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title866") >  >() },
    {  569u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title350") >  >() },
    {  570u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1174") >  >() },
    {  571u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0571r0: Type Requirements for <numeric> Algorithms") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("p0571r1: Type Requirements for <numeric> Algorithms") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Type Requirements for `<numeric>` Algorithms") >  >() },
    {  572u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("p0572r0: bit_sizeof and bit_offsetof") > , Rev< 1u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("p0572r1: bit_sizeof and bit_offsetof") > , Rev< 2u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("p0572R2: Static reflection of bit fields") >  >() },
    {  573u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("abbreviated lambdas") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Abbreviated Lambdas for Fun and Profit") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Abbreviated Lambdas for Fun and Profit") >  >() },
    {  574u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony")) >(), wxS("Algorithm Complexity Constraints and Parallel Overloads") > , Rev< 1u, Arr64< Hash(wxS("Anthony")) >(), wxS("P0574r1: Algorithm Complexity Constraints and Parallel Overloads") >  >() },
    {  575u, RevList< Rev< 0u, Arr64< Hash(wxS("Author456")) >(), wxS("Core \"ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author205")) >(), wxS("Core \"ready\" Issues") > , Rev< 2u, Arr64< Hash(wxS("Author2195")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  576u, RevList< Rev< 0u, Arr64< Hash(wxS("Author767")) >(), wxS("Core \"tentatively ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author748")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  577u, RevList< Rev< 0u, Arr64< Hash(wxS("Author593")) >(), wxS("Title483") > , Rev< 1u, Arr64< Hash(wxS("Author1613")) >(), wxS("Title1250") >  >() },
    {  578u, RevList< Rev< 0u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Title1703") > , Rev< 1u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Title1070") >  >() },
    {  579u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Constexpr for <experimental/ranges/iterator>") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Constexpr for <experimental/ranges/iterator>") >  >() },
    {  581u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1457") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1400") >  >() },
    {  582u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title830") >  >() },
    {  583u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title542") >  >() },
    {  584u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1350") >  >() },
    {  586u, RevList< Rev< 0u, Arr64< Hash(wxS("Federico Kircheis")) >(), wxS("Safe integral comparisons") > , Rev< 1u, Arr64< Hash(wxS("Federico Kircheis")) >(), wxS("Safe integral comparisons") > , Rev< 2u, Arr64< Hash(wxS("Federico Kircheis")) >(), wxS("Safe integral comparisons") >  >() },
    {  587u, RevList< Rev< 0u, Arr64< Hash(wxS("Author470")) >(), wxS("Title395") >  >() },
    {  588u, RevList< Rev< 0u, Arr64< Hash(wxS("Author75")) >(), wxS("Title76") > , Rev< 1u, Arr64< Hash(wxS("Author1677")) >(), wxS("Simplifying implicit lambda capture") >  >() },
    {  589u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1280")) >(), wxS("p0589r0") >  >() },
    {  590u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1014")) >(), wxS("p0590r0") >  >() },
    {  591u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1804")) >(), wxS("P0591r0 | Utility functions to implement uses-allocator construction") > , Rev< 1u, Arr64< Hash(wxS("Author1770")) >(), wxS("P0591r1 | Utility functions to implement uses-allocator construction") > , Rev< 2u, Arr64< Hash(wxS("Author44")) >(), wxS("P0591r2 | Utility functions to implement uses-allocator construction") > , Rev< 3u, Arr64< Hash(wxS("Author123")) >(), wxS("P0591r3 | Utility functions to implement uses-allocator construction") > , Rev< 4u, Arr64< Hash(wxS("Author668")) >(), wxS("P0591r4 | Utility functions to implement uses-allocator construction") >  >() },
    {  592u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1077")) >(), wxS("To boldly suggest an overall plan for C++20") > , Rev< 1u, Arr64< Hash(wxS("Author966")) >(), wxS("To boldly suggest an overall plan for C++23") > , Rev< 2u, Arr64< Hash(wxS("Author1836")) >(), wxS("To boldly suggest an overall plan for C++23") > , Rev< 3u, Arr64< Hash(wxS("Author2184")) >(), wxS("To boldly suggest an overall plan for C++23") > , Rev< 4u, Arr64< Hash(wxS("Author1499")) >(), wxS("To boldly suggest an overall plan for C++23") > , Rev< 5u, Arr64< Hash(wxS("Author2174")) >(), wxS("To boldly suggest an overall plan for C++26") >  >() },
    {  593u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1283")) >(), wxS("What to do with buffers that are not arrays, and undefined behavior thereof?") > , Rev< 1u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("p0593r1: Implicit creation of objects for low-level object manipulation") > , Rev< 2u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("p0593r2: Implicit creation of objects for low-level object manipulation") > , Rev< 3u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Implicit creation of objects for low-level object manipulation") > , Rev< 4u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Implicit creation of objects for low-level object manipulation") > , Rev< 5u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Implicit creation of objects for low-level object manipulation") > , Rev< 6u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Implicit creation of objects for low-level object manipulation") >  >() },
    {  594u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1641")) >(), wxS("Relative comparisons and std::less<T*>") >  >() },
    {  595u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1281")) >(), wxS("Title994") > , Rev< 1u, Arr64< Hash(wxS("Author1313")) >(), wxS("std::is_constant_evaluated") > , Rev< 2u, Arr64< Hash(wxS("Author450")) >(), wxS("std::is_constant_evaluated") >  >() },
    {  596u, RevList< Rev< 0u, Arr64< Hash(wxS("Author587")) >(), wxS("Title478") > , Rev< 1u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Title772") >  >() },
    {  597u, RevList< Rev< 0u, Arr64< Hash(wxS("Author76")) >(), wxS("Title77") >  >() },
    {  598u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2226")) >(), wxS("Title1702") >  >() },
    {  599u, RevList< Rev< 0u, Arr64< Hash(wxS("Author291")) >(), wxS("Microsoft Word - P0599R0_hash_noexcept_170206.docx") > , Rev< 1u, Arr64< Hash(wxS("Author786")) >(), wxS("P0599R1 noexcept for hash functions (US140)") >  >() },
    {  600u, RevList< Rev< 0u, Arr64< Hash(wxS("Author918")) >(), wxS("Microsoft Word - P0600R0_nodiscard_in_the_library_170206.docx") > , Rev< 1u, Arr64< Hash(wxS("Author1243")) >(), wxS("P0600R1 [[nodiscard]] in the library") >  >() },
    {  601u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1389")) >(), wxS("Establishing a direction for SIMD-enabled functions") >  >() },
    {  602u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("variant and optional should propagate copy/move triviality") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("variant and optional should propagate copy/move triviality") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("variant and optional should propagate copy/move triviality") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("variant and optional should propagate copy/move triviality") > , Rev< 4u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("variant and optional should propagate copy/move triviality") >  >() },
    {  603u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1920")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0603r0") >  >() },
    {  604u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Resolving GB 55, US 84, US 85, US 86") >  >() },
    {  606u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title498") >  >() },
    {  607u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Inline Variables for the Standard Library") >  >() },
    {  608u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("A sane variant converting constructor (LEWG 227)") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("A sane variant converting constructor - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1089")) >(), wxS("(Foswiki login) Html < Wg21rapperswil2018/StrawPolls < Foswiki") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("A sane variant converting constructor - HackMD") >  >() },
    {  609u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title988") > , Rev< 1u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title1029") > , Rev< 2u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title1005") > , Rev< 3u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title1651") >  >() },
    {  610u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1476")) >(), wxS("C++ Standard Library \"Review\" Issues Resolved in Kona") >  >() },
    {  611u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("More Better Operators") >  >() },
    {  612u, RevList< Rev< 0u, Arr64< Hash(wxS("Author457")) >(), wxS("NB comment CH 2: volatile") >  >() },
    {  613u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0")) >(), wxS("GB15: Issue 2011 resolution") >  >() },
    {  614u, RevList< Rev< 0u, Arr64< Hash(wxS("Author837")) >(), wxS("Range-based for statements with initializer") > , Rev< 1u, Arr64< Hash(wxS("Author683")) >(), wxS("Range-based for statements with initializer") >  >() },
    {  615u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1823")) >(), wxS("Renaming for structured bindings") >  >() },
    {  616u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1030")) >(), wxS("Title825") >  >() },
    {  618u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1967")) >(), wxS("Deprecating <codecvt>") >  >() },
    {  619u, RevList< Rev< 0u, Arr64< Hash(wxS("Author591")) >(), wxS("Reviewing Deprecated Facilities of C++17 for C++20") > , Rev< 1u, Arr64< Hash(wxS("Author1746")) >(), wxS("Reviewing Deprecated Facilities of C++17 for C++20") > , Rev< 2u, Arr64< Hash(wxS("Author1669")) >(), wxS("Reviewing Deprecated Facilities of C++17 for C++20") > , Rev< 3u, Arr64< Hash(wxS("Author868")) >(), wxS("Reviewing Deprecated Facilities of C++17 for C++20") > , Rev< 4u, Arr64< Hash(wxS("Author1609")) >(), wxS("Reviewing Deprecated Facilities of C++17 for C++20") >  >() },
    {  620u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1259")) >(), wxS("Drafting for class template argument deduction issues") >  >() },
    {  621u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ready Ranges TS Issues") >  >() },
    {  622u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1627")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  623u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0623r0: Final C++17 Parallel Algorithms Fixes") >  >() },
    {  624u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title422") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title827") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1085") >  >() },
    {  625u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1227")) >(), wxS("C++ Standard Library Issues Resolved Directly In Kona") >  >() },
    {  627u, RevList< Rev< 0u, Arr64< Hash(wxS("Melissa Mears")) >(), wxS("Attribute to mark unreachable code") > , Rev< 1u, Arr64< Hash(wxS("Melissa Mears")) >(), wxS("Unreachable Attribute R1") > , Rev< 3u, Arr64< Hash(wxS("Melissa Mears")) >(), wxS("Title1283") > , Rev< 5u, Arr64< Hash(wxS("Melissa Mears")) >(), wxS("Title449") > , Rev< 6u, Arr64< Hash(wxS("Melissa Mears")) >(), wxS("Title147") >  >() },
    {  629u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2157")) >(), wxS("Title1661") >  >() },
    {  630u, RevList< Rev< 0u, Arr64< Hash(wxS("Author833")) >(), wxS("To boldly suggest a pub crawl for C++ Toronto") >  >() },
    {  631u, RevList< Rev< 0u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title1572") > , Rev< 1u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title761") > , Rev< 2u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title886") > , Rev< 3u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title1602") > , Rev< 4u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title622") > , Rev< 5u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title676") > , Rev< 6u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title923") > , Rev< 7u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title1222") > , Rev< 8u, Arr64< Hash(wxS("Lev Minkovsky")) >(), wxS("Title1242") >  >() },
    {  632u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1861")) >(), wxS("Proposal of [[uninitialized]] attribute") >  >() },
    {  633u, RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Title710") >  >() },
    {  634u, RevList< Rev< 0u, Arr64< Hash(wxS("Author364")) >(), wxS("Untitled") > , Rev< 1u, Arr64< Hash(wxS("Author842")) >(), wxS("Down with typename!") > , Rev< 2u, Arr64< Hash(wxS("Author1791")) >(), wxS("Down with typename!") > , Rev< 3u, Arr64< Hash(wxS("Author23")) >(), wxS("Down with typename!") >  >() },
    {  635u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("p0635r0 - c_array addition proposal (090617).pages") >  >() },
    {  636u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1730")) >(), wxS("Changes between C++14 and C++17") > , Rev< 1u, Arr64< Hash(wxS("Author248")) >(), wxS("Changes between C++14 and C++17") > , Rev< 2u, Arr64< Hash(wxS("Author451")) >(), wxS("Changes between C++14 and C++17") > , Rev< 3u, Arr64< Hash(wxS("Author688")) >(), wxS("Changes between C++14 and C++17") >  >() },
    {  637u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1473")) >(), wxS("Capture *this with initializer") >  >() },
    {  638u, RevList< Rev< 0u, Arr64< Hash(wxS("Ed Schouten")) >(), wxS("Title859") >  >() },
    {  639u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1686")) >(), wxS("Changing attack vector of the constexpr_vector") >  >() },
    {  640u, RevList< Rev< 0u, Arr64< Hash(wxS("Emil Dotchevski")) >(), wxS("Title1133") >  >() },
    {  641u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)") > , Rev< 2u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)") >  >() },
    {  642u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1249") > , Rev< 1u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title530") > , Rev< 2u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1062") > , Rev< 3u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1018") > , Rev< 4u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title73") >  >() },
    {  643u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title154") >  >() },
    {  644u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Forward without forward") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Forward without forward") >  >() },
    {  645u, RevList< Rev< 0u, Arr64< Hash(wxS("Author872")) >(), wxS("Text Formatting") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 5u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 7u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 9u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") > , Rev< 10u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Formatting") >  >() },
    {  646u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title619") > , Rev< 1u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title1237") >  >() },
    {  647u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1594")) >(), wxS("Title1235") > , Rev< 1u, Arr64< Hash(wxS("Author1373")) >(), wxS("Title1065") >  >() },
    {  648u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0648r0") >  >() },
    {  649u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0649r0") >  >() },
    {  650u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0650r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0650r1") > , Rev< 2u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0650r2") >  >() },
    {  651u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Switch the Ranges TS to Use Variable Concepts") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Switch the Ranges TS to Use Variable Concepts") >  >() },
    {  652u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1171")) >(), wxS("Concurrent associative data structure with unsynchronized view") > , Rev< 1u, Arr64< Hash(wxS("Author888")) >(), wxS("Concurrent associative data structure with unsynchronized view") > , Rev< 2u, Arr64< Hash(wxS("Author1219")) >(), wxS("Concurrent associative data structure with unsynchronized view") > , Rev< 3u, Arr64< Hash(wxS("Author2056")) >(), wxS("Concurrent associative data structure with unsynchronized view") >  >() },
    {  653u, RevList< Rev< 0u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("pointer_traits utility to convert to raw pointer") > , Rev< 1u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Utility to convert a pointer to a raw pointer") > , Rev< 2u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Utility to convert a pointer to a raw pointer") >  >() },
    {  654u, RevList< Rev< 0u, Arr64< Hash(wxS("Lo\uF8E0Joly")) >(), wxS("Title1371") >  >() },
    {  655u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("visit<R>: Explicit Return Type for visit") > , Rev< 1u, Arr64< Hash(wxS("Michael Park")) >(), wxS("visit<R>: Explicit Return Type for visit") >  >() },
    {  656u, RevList< Rev< 0u, Arr64< Hash(wxS("Author126")) >(), wxS("Reducing <ratio>") >  >() },
    {  657u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1918")) >(), wxS("Deprecate Certain Declarations in the Global Namespace") > , Rev< 1u, Arr64< Hash(wxS("Author1507")) >(), wxS("Deprecate Certain Declarations in the Global Namespace") > , Rev< 2u, Arr64< Hash(wxS("Author1905")) >(), wxS("Deprecate Certain Declarations in the Global Namespace") >  >() },
    {  658u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("P0658R0 -- Proposal for adding alias declarations to concepts") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("wg21 | For documenting all WG21-related proposals") >  >() },
    {  659u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2084")) >(), wxS("Microsoft Word - P0659R0_futurestatus_draft_170613.docx") >  >() },
    {  660u, RevList< Rev< 0u, Arr64< Hash(wxS("Author869")) >(), wxS("P0660R0") > , Rev< 2u, Arr64< Hash(wxS("Author1349")) >(), wxS("P0660R3") > , Rev< 3u, Arr64< Hash(wxS("Author276")) >(), wxS("P0660R3") > , Rev< 4u, Arr64< Hash(wxS("Author1225")) >(), wxS("C++ International Standard") > , Rev< 5u, Arr64< Hash(wxS("Author479")) >(), wxS("C++ International Standard") > , Rev< 6u, Arr64< Hash(wxS("Author401")) >(), wxS("P0660R6 A Cooperatively Interruptible Joining Thread, Rev 6") > , Rev< 7u, Arr64< Hash(wxS("Author1913")) >(), wxS("P0660R7 Interrupt Tokens and a Joining Thread, Rev 7") > , Rev< 8u, Arr64< Hash(wxS("Author764")) >(), wxS("C++ International Standard") > , Rev< 9u, Arr64< Hash(wxS("Author13")) >(), wxS("P0660R9") > , Rev< 10u, Arr64< Hash(wxS("Author68")) >(), wxS("P0660") >  >() },
    {  661u, RevList< Rev< 0u, Arr64< Hash(wxS("Allan Deutsch")) >(), wxS("Title773") >  >() },
    {  662u, RevList< Rev< 0u, Arr64< Hash(wxS("Author863")) >(), wxS("Working Draft, C++ Extensions for Ranges") >  >() },
    {  663u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Ready Issues for the July 2017 (Toronto) meeting") >  >() },
    {  664u, RevList< Rev< 0u, Arr64< Hash(wxS("Author234")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 1u, Arr64< Hash(wxS("Author2095")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 2u, Arr64< Hash(wxS("Author51")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 3u, Arr64< Hash(wxS("Author147")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 4u, Arr64< Hash(wxS("Author1277")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 5u, Arr64< Hash(wxS("Author414")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 6u, Arr64< Hash(wxS("Author864")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 7u, Arr64< Hash(wxS("Author2102")) >(), wxS("C++ Coroutine TS Issues") > , Rev< 8u, Arr64< Hash(wxS("Author2234")) >(), wxS("C++ Coroutine TS Issues") >  >() },
    {  665u, RevList< Rev< 0u, Arr64< Hash(wxS("Tristan Brindle")) >(), wxS("Title41") > , Rev< 1u, Arr64< Hash(wxS("Tristan Brindle")) >(), wxS("Title878") >  >() },
    {  666u, RevList< Rev< 0u, Arr64< Hash(wxS("Alasdair Mackintosh")) >(), wxS("C++ Latches and Barriers") > , Rev< 1u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("P0666R1") > , Rev< 2u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("P0666R2") >  >() },
    {  667u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Moving std::future extensions forward") >  >() },
    {  668u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Moving std::future extensions forward") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Revising the C++ memory model") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Revising the C++ memory model") > , Rev< 3u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Revising the C++ memory model") > , Rev< 4u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Revising the C++ memory model") > , Rev< 5u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Revising the C++ memory model") >  >() },
    {  669u, RevList< Rev< 0u, Arr64< Hash(wxS("Author581")) >(), wxS("Title473") >  >() },
    {  670u, RevList< Rev< 0u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection of functions") > , Rev< 1u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection of functions") > , Rev< 2u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Static reflection of functions") > , Rev< 3u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Function reflection") > , Rev< 4u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Function reflection") >  >() },
    {  671u, RevList< Rev< 0u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Parametric Functions") > , Rev< 1u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Function Arguments That Speak") > , Rev< 2u, Arr64< Hash(wxS("Axel Naumann")) >(), wxS("Self-explanatory Function Arguments") >  >() },
    {  672u, RevList< Rev< 0u, Arr64< Hash(wxS("Joel Falcou")) >(), wxS("Title63") >  >() },
    {  673u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title367") >  >() },
    {  674u, RevList< Rev< 0u, Arr64< Hash(wxS("Author830")) >(), wxS("Extending make_shared to Support Arrays") > , Rev< 1u, Arr64< Hash(wxS("Author780")) >(), wxS("Extending make_shared to Support Arrays") >  >() },
    {  675u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2166")) >(), wxS("Title1667") >  >() },
    {  676u, RevList< Rev< 0u, Arr64< Hash(wxS("Felix Petriconi")) >(), wxS("future_proposal_P0676R0") >  >() },
    {  678u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1637")) >(), wxS("Title1266") >  >() },
    {  679u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title607") >  >() },
    {  680u, RevList< Rev< 0u, Arr64< Hash(wxS("Torvald Riegel")) >(), wxS("Title653") >  >() },
    {  681u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1228") >  >() },
    {  682u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1799")) >(), wxS("Repairing elementary string conversions (LWG 2955)") > , Rev< 1u, Arr64< Hash(wxS("Author1257")) >(), wxS("Repairing elementary string conversions (LWG 2955)") >  >() },
    {  683u, RevList< Rev< 0u, Arr64< Hash(wxS("Author821")) >(), wxS("Default member initializers for bit-fields") > , Rev< 1u, Arr64< Hash(wxS("Author1727")) >(), wxS("Default member initializers for bit-fields (revision 1)") >  >() },
    {  684u, RevList< Rev< 0u, Arr64< Hash(wxS("Author224")) >(), wxS("Title182") > , Rev< 1u, Arr64< Hash(wxS("Author831")) >(), wxS("Title659") > , Rev< 2u, Arr64< Hash(wxS("Author1416")) >(), wxS("Title1101") >  >() },
    {  685u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title263") >  >() },
    {  686u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title261") >  >() },
    {  687u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruyman Reyes")) >(), wxS("Title1041") >  >() },
    {  688u, RevList< Rev< 0u, Arr64< Hash(wxS("Chris Kohlhoff")) >(), wxS("Title1166") >  >() },
    {  689u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1618") >  >() },
    {  690u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0690r0: Tearable Atomics") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0690r1: Tearable Atomics") >  >() },
    {  691u, RevList< Rev< 0u, Arr64< Hash(wxS("Author322")) >(), wxS("Title272") >  >() },
    {  692u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1921")) >(), wxS("Access Checking on Specializations") > , Rev< 1u, Arr64< Hash(wxS("Author2156")) >(), wxS("Access Checking on Specializations") >  >() },
    {  694u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1031")) >(), wxS("Title828") >  >() },
    {  695u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1762")) >(), wxS("Title1368") >  >() },
    {  696u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Remove abbreviated functions and template-introduction syntax from the Concepts TS") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Remove abbreviated functions and template-introduction syntax from the Concepts TS") >  >() },
    {  697u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title32") >  >() },
    {  698u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1643")) >(), wxS("C++ Standard Library Issues to be moved in Toronto") >  >() },
    {  699u, RevList< Rev< 0u, Arr64< Hash(wxS("Author282")) >(), wxS("C++ Standard Library Issues Resolved Directly In Toronto") >  >() },
    {  700u, RevList< Rev< 0u, Arr64< Hash(wxS("Author331")) >(), wxS("Title277") >  >() },
    {  701u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("P0701r0: Back to the std2::future") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("p0701r1: Back to the std2::future Part II") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("p0701r2: Back to the std2::future Part II") >  >() },
    {  702u, RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Language support for Constructor Template Argument Deduction") > , Rev< 1u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Language support for Constructor Template Argument Deduction") >  >() },
    {  703u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Title1107") >  >() },
    {  704u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Fixing const-qualified pointers to members") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Fixing const-qualified pointers to members") >  >() },
    {  705u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title1504") >  >() },
    {  706u, RevList< Rev< 0u, Arr64< Hash(wxS("Author678")) >(), wxS("Efficient headers for modules (or not)") >  >() },
    {  707u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1704") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1170") > , Rev< 2u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title206") > , Rev< 3u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1360") > , Rev< 4u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title242") > , Rev< 5u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title356") >  >() },
    {  709u, RevList< Rev< 0u, Arr64< Hash(wxS("Outcome is")) >(), wxS("Title970") > , Rev< 1u, Arr64< Hash(wxS("Outcome is")) >(), wxS("Title755") > , Rev< 2u, Arr64< Hash(wxS("Outcome is")) >(), wxS("Title1631") > , Rev< 3u, Arr64< Hash(wxS("Outcome is")) >(), wxS("Title316") > , Rev< 4u, Arr64< Hash(wxS("Outcome is")) >(), wxS("Title673") >  >() },
    {  710u, RevList< Rev< 0u, Arr64< Hash(wxS("Author811")) >(), wxS("Core \"ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author2077")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  711u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2219")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  712u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1982")) >(), wxS("p0712") >  >() },
    {  713u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2162")) >(), wxS("Untitled") > , Rev< 1u, Arr64< Hash(wxS("Author1728")) >(), wxS("Title1336") >  >() },
    {  714u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1017")) >(), wxS("Title812") >  >() },
    {  715u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1439")) >(), wxS("Title1118") >  >() },
    {  716u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1720")) >(), wxS("Title1328") >  >() },
    {  717u, RevList< Rev< 0u, Arr64< Hash(wxS("Author100")) >(), wxS("Title93") > , Rev< 1u, Arr64< Hash(wxS("Author370")) >(), wxS("Title315") >  >() },
    {  718u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1745")) >(), wxS("Revising atomic_shared_ptr for C++20") > , Rev< 2u, Arr64< Hash(wxS("Author1495")) >(), wxS("Revising atomic_shared_ptr for C++20") >  >() },
    {  721u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1862")) >(), wxS("Title1444") >  >() },
    {  722u, RevList< Rev< 0u, Arr64< Hash(wxS("Author227")) >(), wxS("ISO/IEC JTC1/SC22/WG21p0722r0") > , Rev< 1u, Arr64< Hash(wxS("Author1006")) >(), wxS("Title808") > , Rev< 2u, Arr64< Hash(wxS("Author1304")) >(), wxS("Efficient sized delete for variable sized classes") > , Rev< 3u, Arr64< Hash(wxS("Author1333")) >(), wxS("Efficient sized delete for variable sized classes") >  >() },
    {  723u, RevList< Rev< 0u, Arr64< Hash(wxS("Author946")) >(), wxS("Response to Clarifying the status of feature test macros") >  >() },
    {  724u, RevList< Rev< 0u, Arr64< Hash(wxS("Author828")) >(), wxS("Merge the Concepts TS Working Draft into the C++20 working draft") >  >() },
    {  725u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Remove the requirement for constrained-type-specifiers to be deduced to the same type from the Concepts TS") >  >() },
    {  726u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1202")) >(), wxS("Does the Concepts TS Improve on C++17?") >  >() },
    {  727u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2027")) >(), wxS("Core Issue 1299: Temporary objects vs temporary expressions") >  >() },
    {  728u, RevList< Rev< 0u, Arr64< Hash(wxS("Author482")) >(), wxS("Wording for Networking PDTS ballot comment 005") >  >() },
    {  729u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Proposed wording for Networking TS NB comment GB 9") >  >() },
    {  730u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Options for addressing requires-clause syntax ambiguities") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("requires-clause syntax ambiguities: wording to apply custom grammar") >  >() },
    {  731u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1309")) >(), wxS("Title1014") >  >() },
    {  732u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1227") > , Rev< 1u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title963") > , Rev< 2u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1645") >  >() },
    {  734u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1621")) >(), wxS("C++ Technical Specification") >  >() },
    {  735u, RevList< Rev< 0u, Arr64< Hash(wxS("Will Deacon")) >(), wxS("Interaction of memory_order_consume with release sequences") > , Rev< 1u, Arr64< Hash(wxS("Will Deacon")) >(), wxS("Interaction of memory_order_consume with release sequences") >  >() },
    {  736u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Nameless parameters and unutterable specializations") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Nameless parameters and unutterable specializations") >  >() },
    {  737u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0737r0 : Execution Context of Execution Agents") >  >() },
    {  738u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("I Stream, You Stream, We All Stream for istream_iterator") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("I Stream, You Stream, We All Stream for istream_iterator") > , Rev< 2u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("I Stream, You Stream, We All Stream for istream_iterator") >  >() },
    {  739u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Some improvements to class template argument deduction integration into the standard library") >  >() },
    {  740u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Ranges TS Immediate Issues from the July 2017 (Toronto) meeting") >  >() },
    {  742u, RevList< Rev< 0u, Arr64< Hash(wxS("Author346")) >(), wxS("Wording for Networking PDTS ballot comment resolutions") >  >() },
    {  745u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title482") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1295") >  >() },
    {  746u, RevList< Rev< 0u, Arr64< Hash(wxS("Author740")) >(), wxS("Wording for Networking PDTS ballot comment 011 (US-10)") >  >() },
    {  747u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1129")) >(), wxS("Wording for Networking PDTS ballot comments 026 (GB-15) and 027 (GB-16)") > , Rev< 1u, Arr64< Hash(wxS("Author1951")) >(), wxS("Wording for Networking PDTS ballot comment 026 (GB-15), but not 027 (GB-16)") >  >() },
    {  748u, RevList< Rev< 0u, Arr64< Hash(wxS("Author711")) >(), wxS("Wording for Networking PDTS ballot comments on reentrancy") >  >() },
    {  749u, RevList< Rev< 0u, Arr64< Hash(wxS("Author928")) >(), wxS("Title748") >  >() },
    {  750u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0750r0: Consume") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0750r1: Consume") >  >() },
    {  752u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1372")) >(), wxS("Title1064") >  >() },
    {  753u, RevList< Rev< 0u, Arr64< Hash(wxS("Author895")) >(), wxS("Title724") > , Rev< 1u, Arr64< Hash(wxS("Author1683")) >(), wxS("Title1308") > , Rev< 2u, Arr64< Hash(wxS("Author1541")) >(), wxS("Title1194") >  >() },
    {  754u, RevList< Rev< 0u, Arr64< Hash(wxS("Author952")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1994")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 2u, Arr64< Hash(wxS("Author662")) >(), wxS("Version Header 06 P0754R2") >  >() },
    {  756u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1685")) >(), wxS("Lambda syntax should be more liberal in what it accepts") >  >() },
    {  757u, RevList< Rev< 0u, Arr64< Hash(wxS("Author841")) >(), wxS("regex_iterator should be iterable") >  >() },
    {  758u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Implicit conversion traits and utility functions") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Implicit conversion traits and utility functions") >  >() },
    {  759u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("fpos requirements") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("fpos requirements") >  >() },
    {  761u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title1586") > , Rev< 1u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title883") > , Rev< 2u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title826") >  >() },
    {  762u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title432") >  >() },
    {  766u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1590")) >(), wxS("Fixing small-ish functionality gaps in constraints") > , Rev< 1u, Arr64< Hash(wxS("Author1273")) >(), wxS("Fixing small-ish functionality gaps in constraints") >  >() },
    {  767u, RevList< Rev< 0u, Arr64< Hash(wxS("Author472")) >(), wxS("Expunge POD") > , Rev< 1u, Arr64< Hash(wxS("Author1050")) >(), wxS("Deprecate POD") >  >() },
    {  768u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1658")) >(), wxS("Library Support for the Spaceship (Comparison) Operator") > , Rev< 1u, Arr64< Hash(wxS("Author705")) >(), wxS("Library Support for the Spaceship (Comparison) Operator") >  >() },
    {  769u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("shift proposal P0769R0.pages") > , Rev< 1u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("shift proposal P0769R1.pages") > , Rev< 2u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("shift proposal P0769R2.pages") >  >() },
    {  770u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1342")) >(), wxS("Title1033") >  >() },
    {  771u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title560") > , Rev< 1u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title66") >  >() },
    {  772u, RevList< Rev< 0u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("Title511") > , Rev< 1u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("Title1178") >  >() },
    {  773u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1776")) >(), wxS("Towards meaningful fancy pointers") >  >() },
    {  774u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1164")) >(), wxS("Module Declaration Location") >  >() },
    {  775u, RevList< Rev< 0u, Arr64< Hash(wxS("Author332")) >(), wxS("Module Partitions") >  >() },
    {  776u, RevList< Rev< 0u, Arr64< Hash(wxS("Author486")) >(), wxS("Rebase the Parallelism TS onto the C++17 Standard") > , Rev< 1u, Arr64< Hash(wxS("Author300")) >(), wxS("Rebase the Parallelism TS onto the C++17 Standard") >  >() },
    {  777u, RevList< Rev< 0u, Arr64< Hash(wxS("Author498")) >(), wxS("Treating Unnecessary decay") > , Rev< 1u, Arr64< Hash(wxS("Author2127")) >(), wxS("Treating Unnecessary decay") >  >() },
    {  778u, RevList< Rev< 0u, Arr64< Hash(wxS("Author723")) >(), wxS("Module Names") >  >() },
    {  779u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title630") >  >() },
    {  780u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pack expansion in lambda init-capture") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pack expansion in lambda init-capture") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pack expansion in lambda init-capture") >  >() },
    {  781u, RevList< Rev< 0u, Arr64< Hash(wxS("Author896")) >(), wxS("A Modern C++ Signature for Main") >  >() },
    {  782u, RevList< Rev< 0u, Arr64< Hash(wxS("Author384")) >(), wxS("A Case for Simplifying/Improving Natural Syntax Concepts") > , Rev< 1u, Arr64< Hash(wxS("Author1380")) >(), wxS("Title1071") > , Rev< 2u, Arr64< Hash(wxS("Author1910")) >(), wxS("Title1473") >  >() },
    {  783u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("P0783: Continuations without overcomplicating the future") >  >() },
    {  784u, RevList< Rev< 0u, Arr64< Hash(wxS("Author78")) >(), wxS("Title79") > , Rev< 1u, Arr64< Hash(wxS("Author63")) >(), wxS("Title67") > , Rev< 2u, Arr64< Hash(wxS("Author1001")) >(), wxS("Title807") > , Rev< 3u, Arr64< Hash(wxS("Author867")) >(), wxS("More constexpr containers") > , Rev< 4u, Arr64< Hash(wxS("Author106")) >(), wxS("More constexpr containers") > , Rev< 5u, Arr64< Hash(wxS("Author279")) >(), wxS("More constexpr containers") > , Rev< 6u, Arr64< Hash(wxS("Author1072")) >(), wxS("More constexpr containers") > , Rev< 7u, Arr64< Hash(wxS("Author2110")) >(), wxS("More constexpr containers") >  >() },
    {  785u, RevList< Rev< 0u, Arr64< Hash(wxS("Author493")) >(), wxS("Runtime-sized arrays and a C++ wrapper") >  >() },
    {  786u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0786r0") > , Rev< 1u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p0786r1") >  >() },
    {  787u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1470")) >(), wxS("Proclaimed Ownership Declarations") >  >() },
    {  788u, RevList< Rev< 0u, Arr64< Hash(wxS("Author296")) >(), wxS("Standard Library Specification in a Concepts and Contracts World") > , Rev< 1u, Arr64< Hash(wxS("Author805")) >(), wxS("Standard Library Specification in a Concepts and Contracts World") > , Rev< 2u, Arr64< Hash(wxS("Author1141")) >(), wxS("Standard Library Specification in a Concepts and Contracts World") > , Rev< 3u, Arr64< Hash(wxS("Author1969")) >(), wxS("Standard Library Specification in a Concepts and Contracts World") >  >() },
    {  789u, RevList< Rev< 0u, Arr64< Hash(wxS("Author769")) >(), wxS("Range Adaptors and Utilities") > , Rev< 1u, Arr64< Hash(wxS("Author850")) >(), wxS("Range Adaptors and Utilities") > , Rev< 2u, Arr64< Hash(wxS("Author2005")) >(), wxS("Range Adaptors and Utilities") > , Rev< 3u, Arr64< Hash(wxS("Author1608")) >(), wxS("Range Adaptors and Utilities") >  >() },
    {  790u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("library-operator-spaceship") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title162") > , Rev< 2u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title1634") >  >() },
    {  791u, RevList< Rev< 0u, Arr64< Hash(wxS("Author834")) >(), wxS("Title662") >  >() },
    {  792u, RevList< Rev< 0u, Arr64< Hash(wxS("Author419")) >(), wxS("Title359") > , Rev< 1u, Arr64< Hash(wxS("Author371")) >(), wxS("Untitled") > , Rev< 2u, Arr64< Hash(wxS("Author1958")) >(), wxS("Untitled") > , Rev< 3u, Arr64< Hash(wxS("Author2204")) >(), wxS("Untitled") > , Rev< 4u, Arr64< Hash(wxS("Author732")) >(), wxS("Untitled") > , Rev< 5u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a non-owning reference to a Callable") > , Rev< 6u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 7u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 8u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 9u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 10u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 11u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 12u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 13u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") > , Rev< 14u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("function_ref: a type-erased callable reference - HackMD") >  >() },
    {  793u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1566") >  >() },
    {  794u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1666") >  >() },
    {  795u, RevList< Rev< 0u, Arr64< Hash(wxS("Simon")) >(), wxS("Title42") >  >() },
    {  796u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon")) >(), wxS("Title919") > , Rev< 1u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title14") > , Rev< 2u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title798") > , Rev< 3u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title468") >  >() },
    {  797u, RevList< Rev< 0u, Arr64< Hash(wxS("Matti")) >(), wxS("Title54") > , Rev< 1u, Arr64< Hash(wxS("Matti Rintala")) >(), wxS("Title262") > , Rev< 2u, Arr64< Hash(wxS("Matti Rintala")) >(), wxS("Title1298") >  >() },
    {  798u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1639")) >(), wxS("p0798r0: Monadic operations for std::optional") > , Rev< 2u, Arr64< Hash(wxS("Simon Brand")) >(), wxS("p0798R2: Monadic operations for std::optional") > , Rev< 3u, Arr64< Hash(wxS("Simon Brand")) >(), wxS("p0798R3: Monadic operations for std::optional") > , Rev< 4u, Arr64< Hash(wxS("Simon Brand")) >(), wxS("p0798R4: Monadic operations for std::optional") > , Rev< 6u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("p0798R6: Monadic operations for std::optional") > , Rev< 8u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("Monadic operations for std::optional") >  >() },
    {  799u, RevList< Rev< 0u, Arr64< Hash(wxS("Stephen")) >(), wxS("Title142") > , Rev< 1u, Arr64< Hash(wxS("Stephen Michel")) >(), wxS("Baseline for Ed 2 of TR 24772") >  >() },
    {  800u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("wg21 | For documenting all WG21-related proposals") >  >() },
    {  801u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title966") >  >() },
    {  802u, RevList< Rev< 0u, Arr64< Hash(wxS("Beman Dawes")) >(), wxS("Standard Library Concepts -") >  >() },
    {  803u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1420")) >(), wxS("Endian RFC") >  >() },
    {  804u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Impact of the Modules TS on the C++ tools ecosystem") >  >() },
    {  805u, RevList< Rev< 0u, Arr64< Hash(wxS("Marshall Clow")) >(), wxS("Title723") > , Rev< 1u, Arr64< Hash(wxS("Author1868")) >(), wxS("Comparing Containers") > , Rev< 2u, Arr64< Hash(wxS("Author950")) >(), wxS("Comparing Containers") >  >() },
    {  806u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2199")) >(), wxS("Deprecate Implicit Capture of this") > , Rev< 1u, Arr64< Hash(wxS("Author2225")) >(), wxS("Deprecate implicit capture of this via [=]") > , Rev< 2u, Arr64< Hash(wxS("Author1146")) >(), wxS("Deprecate implicit capture of this via [=]") >  >() },
    {  807u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2022")) >(), wxS("An Adjective Syntax for Concepts") >  >() },
    {  808u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2066")) >(), wxS("Title1600") >  >() },
    {  809u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1616")) >(), wxS("Title1252") >  >() },
    {  810u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Deane")) >(), wxS("Title1482") >  >() },
    {  811u, RevList< Rev< 0u, Arr64< Hash(wxS("Author326")) >(), wxS("Well-behaved interpolation for numbers and pointers") > , Rev< 1u, Arr64< Hash(wxS("Author1233")) >(), wxS("Well-behaved interpolation for numbers and pointers") > , Rev< 2u, Arr64< Hash(wxS("Author1919")) >(), wxS("Well-behaved interpolation for numbers and pointers") > , Rev< 3u, Arr64< Hash(wxS("Author2155")) >(), wxS("Well-behaved interpolation for numbers and pointers") >  >() },
    {  812u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1375")) >(), wxS("copy-list-initialization is inherently un-=") >  >() },
    {  813u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1085")) >(), wxS("Microsoft Word - P0813R0_retval_construct.docx") > , Rev< 1u, Arr64< Hash(wxS("Author1743")) >(), wxS("P0813R1") >  >() },
    {  814u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2090")) >(), wxS("Microsoft Word - P0814R0_hash_combine.docx") > , Rev< 2u, Arr64< Hash(wxS("Author1992")) >(), wxS("Microsoft Word - P0814R2_hash_combine.docx") >  >() },
    {  815u, RevList< Rev< 0u, Arr64< Hash(wxS("Author824")) >(), wxS("C++ Standard Library Issues to be moved in Albuquerque") >  >() },
    {  816u, RevList< Rev< 0u, Arr64< Hash(wxS("Author262")) >(), wxS("Title221") >  >() },
    {  817u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1339")) >(), wxS("Core \"ready\" Issues") >  >() },
    {  818u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2064")) >(), wxS("Core \"tentatively ready\" Issues") > , Rev< 1u, Arr64< Hash(wxS("Author613")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  819u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2158")) >(), wxS("Microsoft Word - P0819R0_feature_macros.docx") >  >() },
    {  820u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1122")) >(), wxS("Title895") > , Rev< 1u, Arr64< Hash(wxS("Author1736")) >(), wxS("Title1340") > , Rev< 2u, Arr64< Hash(wxS("Author232")) >(), wxS("Title193") > , Rev< 3u, Arr64< Hash(wxS("Author1998")) >(), wxS("Title1545") > , Rev< 4u, Arr64< Hash(wxS("Author177")) >(), wxS("Title151") >  >() },
    {  821u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1712")) >(), wxS("Title1322") >  >() },
    {  822u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title977") >  >() },
    {  824u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur")) >(), wxS("Title1038") > , Rev< 1u, Arr64< Hash(wxS("Author278")) >(), wxS("Summary of SG14 discussion on <system_error>") >  >() },
    {  825u, RevList< Rev< 0u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("A friendlier tuple get") > , Rev< 1u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("A friendlier tuple get") >  >() },
    {  826u, RevList< Rev< 0u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("SFINAE-friendly std::bind") >  >() },
    {  827u, RevList< Rev< 0u, Arr64< Hash(wxS("Author360")) >(), wxS("Title305") >  >() },
    {  828u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2123")) >(), wxS("Title1642") > , Rev< 1u, Arr64< Hash(wxS("John McFarlane")) >(), wxS("Title1309") >  >() },
    {  829u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Title618") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Title959") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Title299") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Title1532") > , Rev< 4u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Title1255") >  >() },
    {  830u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2051")) >(), wxS("Microsoft Word - P0830R0_requires_in_lib.docx") >  >() },
    {  831u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Keep alias syntax extendable") >  >() },
    {  832u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Module TS Wording Does Not Support Intended Use Case") >  >() },
    {  834u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("p0834r0: Lifting overload sets into objects") >  >() },
    {  835u, RevList< Rev< 0u, Arr64< Hash(wxS("Author395")) >(), wxS("Adopt SD-6 feature macros into the C++20 working draft") >  >() },
    {  836u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title1267") > , Rev< 1u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title1288") >  >() },
    {  837u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1123")) >(), wxS("Ruminations on modular macros") >  >() },
    {  838u, RevList< Rev< 0u, Arr64< Hash(wxS("Author272")) >(), wxS("Title226") >  >() },
    {  839u, RevList< Rev< 0u, Arr64< Hash(wxS("Author924")) >(), wxS("Recursive lambdas") >  >() },
    {  840u, RevList< Rev< 0u, Arr64< Hash(wxS("Author802")) >(), wxS("Language support for empty objects") > , Rev< 1u, Arr64< Hash(wxS("Author939")) >(), wxS("Language support for empty objects") > , Rev< 2u, Arr64< Hash(wxS("Author1201")) >(), wxS("Language support for empty objects") >  >() },
    {  841u, RevList< Rev< 0u, Arr64< Hash(wxS("Author641")) >(), wxS("ModulesAtScale") >  >() },
    {  842u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1037")) >(), wxS("Unknown Exports by Example") >  >() },
    {  843u, RevList< Rev< 0u, Arr64< Hash(wxS("Author212")) >(), wxS("fixed_capacity_vector") > , Rev< 1u, Arr64< Hash(wxS("Author1752")) >(), wxS("P0843r1: fixed_capacity_vector") > , Rev< 2u, Arr64< Hash(wxS("Author1566")) >(), wxS("static_vector") > , Rev< 3u, Arr64< Hash(wxS("Author204")) >(), wxS("README.md - Grip") > , Rev< 4u, Arr64< Hash(wxS("Author1886")) >(), wxS("README.md - Grip") > , Rev< 5u, Arr64< Hash(wxS("Author50")) >(), wxS("static_vector") > , Rev< 6u, Arr64< Hash(wxS("Author2000")) >(), wxS("static_vector") > , Rev< 7u, Arr64< Hash(wxS("Author1079")) >(), wxS("inplace_vector") > , Rev< 8u, Arr64< Hash(wxS("Author2138")) >(), wxS("inplace_vector") > , Rev< 9u, Arr64< Hash(wxS("Author95")) >(), wxS("`inplace_vector`") > , Rev< 10u, Arr64< Hash(wxS("Author1853")) >(), wxS("inplace_vector") > , Rev< 11u, Arr64< Hash(wxS("Author1145")) >(), wxS("`inplace_vector`") > , Rev< 12u, Arr64< Hash(wxS("Author192")) >(), wxS("`inplace_vector`") > , Rev< 13u, Arr64< Hash(wxS("Author1908")) >(), wxS("`inplace_vector` - HackMD") > , Rev< 14u, Arr64< Hash(wxS("Author1490")) >(), wxS("`inplace_vector` - HackMD") >  >() },
    {  844u, RevList< Rev< 0u, Arr64< Hash(wxS("J. Monnon")) >(), wxS("Type functions and beyond") >  >() },
    {  845u, RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Common Subset of C++03 and C++17: Binders") >  >() },
    {  846u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1667")) >(), wxS("ADL and Function Templates that are not Visible") >  >() },
    {  847u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("p0847R0: Deducing this") > , Rev< 1u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") > , Rev< 2u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") > , Rev< 4u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") > , Rev< 5u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") > , Rev< 6u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") > , Rev< 7u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Deducing this") >  >() },
    {  848u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally Trivial Special Member Functions") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally Trivial Special Member Functions") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally Trivial Special Member Functions") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally Trivial Special Member Functions") >  >() },
    {  849u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): DECAY_COPY in the language - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 4u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 5u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 6u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 7u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") > , Rev< 8u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("auto(x): decay-copy in the language - HackMD") >  >() },
    {  851u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("simd<T> is neither a product type nor a container type [P0851R0]") >  >() },
    {  856u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("p0856r0: Restrict Access Property for <code>mdspan</code> and <code>span</code>") >  >() },
    {  857u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1223")) >(), wxS("Wording for functionality gaps in constraints") >  >() },
    {  858u, RevList< Rev< 0u, Arr64< Hash(wxS("Author829")) >(), wxS("Constexpr iterator requirements") >  >() },
    {  859u, RevList< Rev< 0u, Arr64< Hash(wxS("Author815")) >(), wxS("Core Issue 1581: When are constexpr member functions defined?") >  >() },
    {  860u, RevList< Rev< 0u, Arr64< Hash(wxS("H. Carter")) >(), wxS("P0860r0 : Atomic Access Property for span and mdspan") > , Rev< 1u, Arr64< Hash(wxS("Dan Sunderland")) >(), wxS("p0860R1: Atomic Access Property for mdspan") >  >() },
    {  863u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1439") > , Rev< 1u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1001") >  >() },
    {  864u, RevList< Rev< 0u, Arr64< Hash(wxS("Author647")) >(), wxS("C++ Standard Library Issues Resolved Directly In Albuquerque") >  >() },
    {  866u, RevList< Rev< 0u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("Title65") >  >() },
    {  867u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1760")) >(), wxS("'Module Interface' is Misleading") >  >() },
    {  868u, RevList< Rev< 0u, Arr64< Hash(wxS("Author25")) >(), wxS("Title19") > , Rev< 1u, Arr64< Hash(wxS("Author2116")) >(), wxS("Title1635") > , Rev< 2u, Arr64< Hash(wxS("Author666")) >(), wxS("Title539") >  >() },
    {  870u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1579")) >(), wxS("A proposal for a type trait to detect narrowing conversions") > , Rev< 1u, Arr64< Hash(wxS("Author681")) >(), wxS("A proposal for a type trait to detect narrowing conversions") > , Rev< 2u, Arr64< Hash(wxS("Author252")) >(), wxS("A proposal for a type trait to detect narrowing conversions") > , Rev< 3u, Arr64< Hash(wxS("Author1962")) >(), wxS("A proposal for a type trait to detect narrowing conversions") > , Rev< 4u, Arr64< Hash(wxS("Author792")) >(), wxS("A proposal for a type trait to detect narrowing conversions") > , Rev< 5u, Arr64< Hash(wxS("Author773")) >(), wxS("A proposal for a type trait to detect narrowing conversions") >  >() },
    {  873u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin jabot")) >(), wxS("p0873R0: A plea for a consistent, terse and intuitive declaration syntax") > , Rev< 1u, Arr64< Hash(wxS("Corentin jabot")) >(), wxS("p0873R1: A plea for a consistent, terse and intuitive declaration syntax") >  >() },
    {  874u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("p0874R0: Syntax to anonymously refer to the current declaration contexts") >  >() },
    {  876u, RevList< Rev< 0u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fibers without scheduler") > , Rev< 2u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fibers without scheduler") > , Rev< 3u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fibers without scheduler") > , Rev< 5u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 6u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 8u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 9u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 10u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 11u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 12u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 13u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 14u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 15u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 16u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 17u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 18u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 19u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") > , Rev< 20u, Arr64< Hash(wxS("Oliver Kowalke")) >(), wxS("fiberswithoutscheduler") >  >() },
    {  877u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("A proposal for modular macros") >  >() },
    {  878u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1615")) >(), wxS("Copy elision for subobjects") >  >() },
    {  879u, RevList< Rev< 0u, Arr64< Hash(wxS("Author499")) >(), wxS("Constexpr for swap and swap related functions") >  >() },
    {  880u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2217")) >(), wxS("Numbers interaction") > , Rev< 1u, Arr64< Hash(wxS("Author218")) >(), wxS("Numbers interaction") > , Rev< 2u, Arr64< Hash(wxS("Author1157")) >(), wxS("Numbers interaction") >  >() },
    {  881u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1487")) >(), wxS("A Proposal to add stack trace library") > , Rev< 1u, Arr64< Hash(wxS("Author1080")) >(), wxS("A Proposal to add stack trace library") > , Rev< 2u, Arr64< Hash(wxS("Author1292")) >(), wxS("A Proposal to add stack trace library") > , Rev< 3u, Arr64< Hash(wxS("Author1288")) >(), wxS("A Proposal to add stacktrace library") > , Rev< 4u, Arr64< Hash(wxS("Author132")) >(), wxS("A Proposal to add stacktrace library") > , Rev< 5u, Arr64< Hash(wxS("Author1705")) >(), wxS("A Proposal to add stacktrace library") > , Rev< 6u, Arr64< Hash(wxS("Author1974")) >(), wxS("A Proposal to add stacktrace library") > , Rev< 7u, Arr64< Hash(wxS("Author594")) >(), wxS("A Proposal to add stacktrace library") >  >() },
    {  882u, RevList< Rev< 0u, Arr64< Hash(wxS("Yonggang Li")) >(), wxS("User-defined Literals for std::filesystem::path - HackMD") >  >() },
    {  883u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1290")) >(), wxS("Microsoft Word - P0883R0_atomicinit.docx") > , Rev< 1u, Arr64< Hash(wxS("Author1837")) >(), wxS("P0883R1") > , Rev< 2u, Arr64< Hash(wxS("Author1520")) >(), wxS("P0883R2 Fixing Atomic Initialization") >  >() },
    {  884u, RevList< Rev< 0u, Arr64< Hash(wxS("Author243")) >(), wxS("Microsoft Word - P0884R0_noexceptpolicy.docx") >  >() },
    {  886u, RevList< Rev< 0u, Arr64< Hash(wxS("Author876")) >(), wxS("Title702") >  >() },
    {  887u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2228")) >(), wxS("Title1705") > , Rev< 1u, Arr64< Hash(wxS("Author288")) >(), wxS("Title241") >  >() },
    {  888u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2216")) >(), wxS("C++ Standard Library Issues to be moved in Jacksonville") >  >() },
    {  889u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1364")) >(), wxS("Ultimate copy elision") > , Rev< 1u, Arr64< Hash(wxS("Author1749")) >(), wxS("Ultimate copy elision") >  >() },
    {  891u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Title227") > , Rev< 1u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Everyone Deserves a Little Order") > , Rev< 2u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Make strong_order a Customization Point!") >  >() },
    {  892u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("explicit(bool)") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("explicit(bool)") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("explicit(bool)") >  >() },
    {  893u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Chaining Comparisons") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Chaining Comparisons") >  >() },
    {  894u, RevList< Rev< 0u, Arr64< Hash(wxS("Author129")) >(), wxS("Title111") > , Rev< 1u, Arr64< Hash(wxS("Author96")) >(), wxS("Title92") >  >() },
    {  895u, RevList< Rev< 0u, Arr64< Hash(wxS("Author608")) >(), wxS("Microsoft Word - P0895R0_renamingcell.docx") >  >() },
    {  896u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1263")) >(), wxS("Range Adaptors and Utilities") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Standard Library Concepts") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Merge the Ranges TS") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Merge the Ranges TS") > , Rev< 4u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Merge the Ranges TS") >  >() },
    {  897u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrey Semashev")) >(), wxS("Title574") >  >() },
    {  898u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2040")) >(), wxS("Standard Library Concepts") > , Rev< 1u, Arr64< Hash(wxS("Author759")) >(), wxS("Standard Library Concepts") > , Rev< 2u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Standard Library Concepts") > , Rev< 3u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Standard Library Concepts") >  >() },
    {  899u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("LWG 3016 is Not a Defect") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("LWG 3016 is Not a Defect") >  >() },
    {  900u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("p0900r0: An Ontology for Properties of <code>mdspan</code>") >  >() },
    {  901u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("p0901r0: Size feedback in operator new") > , Rev< 1u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 2u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 3u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 4u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 5u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 6u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 7u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 8u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 9u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 10u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") > , Rev< 11u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("Size feedback in operator new") >  >() },
    {  902u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Hunter")) >(), wxS("p0902r0: Move-only iterators") >  >() },
    {  903u, RevList< Rev< 0u, Arr64< Hash(wxS("Author478")) >(), wxS("Title398") > , Rev< 1u, Arr64< Hash(wxS("Author1425")) >(), wxS("Title1105") > , Rev< 2u, Arr64< Hash(wxS("Author265")) >(), wxS("Title223") >  >() },
    {  904u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Title10") >  >() },
    {  905u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Symmetry for spaceship") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Symmetry for spaceship") >  >() },
    {  906u, RevList< Rev< 0u, Arr64< Hash(wxS("Author131")) >(), wxS("Improvement suggestions for the Modules TS") > , Rev< 1u, Arr64< Hash(wxS("Author271")) >(), wxS("Improvement suggestions for the Modules TS") >  >() },
    {  907u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0907r0: Signed Integers are Twos Complement") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0907R1: Signed Integers are Twos Complement") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0907R2: Signed Integers are Twos Complement") > , Rev< 3u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Signed Integers are Twos Complement") > , Rev< 4u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Signed Integers are Twos Complement") >  >() },
    {  908u, RevList< Rev< 0u, Arr64< Hash(wxS("Eddie Kohler")) >(), wxS("p0908r0: Offsetof for Pointers to Members") >  >() },
    {  909u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Module TS Supports Legacy Integration") >  >() },
    {  911u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1465")) >(), wxS("Title1140") > , Rev< 1u, Arr64< Hash(wxS("Author1302")) >(), wxS("Title1006") >  >() },
    {  912u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1650")) >(), wxS("Title1280") > , Rev< 1u, Arr64< Hash(wxS("Author2042")) >(), wxS("Title1581") > , Rev< 2u, Arr64< Hash(wxS("Author153")) >(), wxS("Title129") > , Rev< 3u, Arr64< Hash(wxS("Author609")) >(), wxS("Title500") > , Rev< 4u, Arr64< Hash(wxS("Author695")) >(), wxS("Abstract") > , Rev< 5u, Arr64< Hash(wxS("Author1763")) >(), wxS("P0912R5 - Merge Coroutines TS into C++20 working draft") >  >() },
    {  913u, RevList< Rev< 0u, Arr64< Hash(wxS("Author798")) >(), wxS("Add symmetric coroutine control transfer") > , Rev< 1u, Arr64< Hash(wxS("Author2194")) >(), wxS("Add symmetric coroutine control transfer") >  >() },
    {  914u, RevList< Rev< 0u, Arr64< Hash(wxS("Author880")) >(), wxS("Add parameter preview to coroutine promise constructor") > , Rev< 1u, Arr64< Hash(wxS("Author1260")) >(), wxS("Add parameter preview to coroutine promise constructor") >  >() },
    {  915u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1751")) >(), wxS("Untitled") >  >() },
    {  916u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Naming implementation-defined simd_abi tag types [P0916R0]") >  >() },
    {  917u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Making operator?: overloadable [P0917R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Making operator?: overloadable [P0917R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Making operator?: overloadable [P0917R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Making operator?: overloadable [P0917R3]") >  >() },
    {  918u, RevList< Rev< 0u, Arr64< Hash(wxS("Author509")) >(), wxS("Title420") > , Rev< 1u, Arr64< Hash(wxS("Author1741")) >(), wxS("Title1347") > , Rev< 2u, Arr64< Hash(wxS("Author84")) >(), wxS("Title85") >  >() },
    {  919u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("p0919r0: Heterogeneous lookup for unordered containers") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("p0919R1: Heterogeneous lookup for unordered containers") > , Rev< 2u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Heterogeneous lookup for unordered containers") > , Rev< 3u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Heterogeneous lookup for unordered containers") >  >() },
    {  920u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Precalculated hash values in lookup") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Precalculated hash values in lookup") > , Rev< 2u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Precalculated hash values in lookup") >  >() },
    {  921u, RevList< Rev< 0u, Arr64< Hash(wxS("Author956")) >(), wxS("Title776") > , Rev< 2u, Arr64< Hash(wxS("Titus Winters")) >(), wxS("Title6") >  >() },
    {  922u, RevList< Rev< 0u, Arr64< Hash(wxS("Author66")) >(), wxS("Title70") >  >() },
    {  923u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1591")) >(), wxS("Modules:Dependent ADL") > , Rev< 1u, Arr64< Hash(wxS("Author1053")) >(), wxS("Modules:Dependent ADL") >  >() },
    {  924u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1856")) >(), wxS("Modules:Context-Sensitive Keyword") > , Rev< 1u, Arr64< Hash(wxS("Author1501")) >(), wxS("Modules:Context-Sensitive Keyword") >  >() },
    {  925u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2233")) >(), wxS("Modules:Unqualified Using Declarations") >  >() },
    {  927u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1013")) >(), wxS("Title811") > , Rev< 1u, Arr64< Hash(wxS("James Dennett")) >(), wxS("Title145") > , Rev< 2u, Arr64< Hash(wxS("James Dennett")) >(), wxS("Title764") >  >() },
    {  928u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2001")) >(), wxS("Title1547") > , Rev< 1u, Arr64< Hash(wxS("Author1557")) >(), wxS("Title1207") >  >() },
    {  929u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1314")) >(), wxS("Checking for abstract class types") > , Rev< 1u, Arr64< Hash(wxS("Author168")) >(), wxS("Checking for abstract class types") > , Rev< 2u, Arr64< Hash(wxS("Author2024")) >(), wxS("Checking for abstract class types") >  >() },
    {  930u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Title1292") >  >() },
    {  931u, RevList< Rev< 0u, Arr64< Hash(wxS("Author747")) >(), wxS("Title605") >  >() },
    {  932u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1434")) >(), wxS("Title1113") > , Rev< 1u, Arr64< Hash(wxS("Author766")) >(), wxS("Title625") >  >() },
    {  933u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1647")) >(), wxS("Title1276") > , Rev< 1u, Arr64< Hash(wxS("Author646")) >(), wxS("Title526") >  >() },
    {  934u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1464") >  >() },
    {  935u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Eradicating unnecessarily explicit default constructors from the standard library") >  >() },
    {  936u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1249")) >(), wxS("Microsoft Word - P0936R0_boundparam.docx") >  >() },
    {  937u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title163") >  >() },
    {  938u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title795") >  >() },
    {  939u, RevList< Rev< 0u, Arr64< Hash(wxS("Author703")) >(), wxS("Title565") > , Rev< 1u, Arr64< Hash(wxS("Author469")) >(), wxS("Title394") > , Rev< 2u, Arr64< Hash(wxS("Author927")) >(), wxS("Title747") > , Rev< 3u, Arr64< Hash(wxS("Author1338")) >(), wxS("Title1030") > , Rev< 4u, Arr64< Hash(wxS("Author130")) >(), wxS("Title112") >  >() },
    {  940u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1279") > , Rev< 1u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title608") > , Rev< 2u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1569") > , Rev< 3u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1598") >  >() },
    {  941u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1318")) >(), wxS("Integrating feature-test macros into the C++ WD") > , Rev< 1u, Arr64< Hash(wxS("Author755")) >(), wxS("Integrating feature-test macros into the C++ WD") > , Rev< 2u, Arr64< Hash(wxS("Author1565")) >(), wxS("Integrating feature-test macros into the C++ WD") >  >() },
    {  942u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1132")) >(), wxS("Introducing a <smart_ptr> header") >  >() },
    {  943u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 3u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 4u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 5u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") > , Rev< 6u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Support C atomics in C++") >  >() },
    {  944u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Contiguous Ranges") >  >() },
    {  945u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("p0945r0: Generalizing alias declarations") >  >() },
    {  946u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("p0946r0: Towards consistency between <=> and other comparison operators") >  >() },
    {  947u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("p0947R0: Another take on Modules") > , Rev< 1u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Another take on Modules") >  >() },
    {  949u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1717")) >(), wxS("Adding support for type-based metaprogramming to the standard library") >  >() },
    {  952u, RevList< Rev< 0u, Arr64< Hash(wxS("Author191")) >(), wxS("A new specification for std::generate_canonical") > , Rev< 1u, Arr64< Hash(wxS("Author93")) >(), wxS("A new specification for std::generate_canonical") > , Rev< 2u, Arr64< Hash(wxS("Author1563")) >(), wxS("A new specification for std::generate_canonical") >  >() },
    {  953u, RevList< Rev< 0u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("constexpr reflexpr") > , Rev< 1u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("constexpr reflexpr") > , Rev< 2u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("constexpr reflexpr") >  >() },
    {  954u, RevList< Rev< 0u, Arr64< Hash(wxS("Author847")) >(), wxS("Title667") >  >() },
    {  955u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1320")) >(), wxS("Title1019") >  >() },
    {  956u, RevList< Rev< 0u, Arr64< Hash(wxS("Author886")) >(), wxS("Title715") >  >() },
    {  957u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1537") > , Rev< 1u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("WG21 Paper P0957R1") > , Rev< 2u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1629") > , Rev< 3u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title264") > , Rev< 4u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title671") > , Rev< 5u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1136") > , Rev< 6u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title939") > , Rev< 7u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title813") > , Rev< 8u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title621") > , Rev< 9u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title658") >  >() },
    {  958u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to support proposed Executors TS") > , Rev< 1u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to support proposed Executors TS") > , Rev< 2u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to support proposed Executors TS") > , Rev< 3u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to support proposed Executors TS") >  >() },
    {  959u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1115")) >(), wxS("Title890") > , Rev< 1u, Arr64< Hash(wxS("Author58")) >(), wxS("Title61") > , Rev< 2u, Arr64< Hash(wxS("Author657")) >(), wxS("Title532") >  >() },
    {  960u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1279")) >(), wxS("Allow initializing aggregates from a parenthesized list of values") > , Rev< 1u, Arr64< Hash(wxS("Author784")) >(), wxS("Allow initializing aggregates from a parenthesized list of values") > , Rev< 2u, Arr64< Hash(wxS("Author1654")) >(), wxS("Allow initializing aggregates from a parenthesized list of values") > , Rev< 3u, Arr64< Hash(wxS("Author199")) >(), wxS("Allow initializing aggregates from a parenthesized list of values") >  >() },
    {  961u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1517")) >(), wxS("Relaxing the structured bindings customization point finding rules") > , Rev< 1u, Arr64< Hash(wxS("Author1840")) >(), wxS("Relaxing the structured bindings customization point finding rules") >  >() },
    {  962u, RevList< Rev< 0u, Arr64< Hash(wxS("Author874")) >(), wxS("Relaxing the range-for loop customization point finding rules") > , Rev< 1u, Arr64< Hash(wxS("Author751")) >(), wxS("Relaxing the range-for loop customization point finding rules") >  >() },
    {  963u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Structured binding declaration as a condition - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Structured binding declaration as a _condition_ - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Structured binding declaration as a _condition_ - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Structured binding declaration as a _condition_ - HackMD") >  >() },
    {  964u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Finding the right set of traits for simd<T> [P0964R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Finding the right set of traits for simd<T> [P0964R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Finding the right set of traits for simd<T> [P0964R2]") >  >() },
    {  965u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1649")) >(), wxS("Initializers of objects with automatic and dynamic storage duration have funny inconsistencies") >  >() },
    {  966u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Zeren")) >(), wxS("P0966r0: <code>string::reserve</code> Should Not Shrink") > , Rev< 1u, Arr64< Hash(wxS("Mark Zeren")) >(), wxS("p0966R1: <code>string::reserve</code> Should Not Shrink") >  >() },
    {  968u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1671")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    {  969u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1644")) >(), wxS("Title1273") >  >() },
    {  970u, RevList< Rev< 0u, Arr64< Hash(wxS("Author439")) >(), wxS("Better, Safer Range Access Customization Points") > , Rev< 1u, Arr64< Hash(wxS("Author333")) >(), wxS("Better, Safer Range Access Customization Points") >  >() },
    {  972u, RevList< Rev< 0u, Arr64< Hash(wxS("Billy Robert")) >(), wxS("Microsoft Word - d0972r0.docx") >  >() },
    {  973u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1305")) >(), wxS("Title1008") >  >() },
    {  974u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Ringle")) >(), wxS("A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration") >  >() },
    {  975u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1240")) >(), wxS("Title968") >  >() },
    {  976u, RevList< Rev< 0u, Arr64< Hash(wxS("Author237")) >(), wxS("Title197") >  >() },
    {  977u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1569")) >(), wxS("Title1214") >  >() },
    {  978u, RevList< Rev< 0u, Arr64< Hash(wxS("the library")) >(), wxS("Title582") >  >() },
    {  980u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title579") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title341") >  >() },
    {  981u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1551")) >(), wxS("Title1203") >  >() },
    {  982u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Weaken release sequences") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Weaken release sequences") >  >() },
    {  983u, RevList< Rev< 0u, Arr64< Hash(wxS("Gabriel Dos")) >(), wxS("Title278") >  >() },
    {  984u, RevList< Rev< 0u, Arr64< Hash(wxS("Author948")) >(), wxS("Title766") >  >() },
    {  985u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2167")) >(), wxS("LWG Chair post-meeting report") > , Rev< 1u, Arr64< Hash(wxS("Author521")) >(), wxS("LWG Chair post-meeting report") > , Rev< 2u, Arr64< Hash(wxS("Author67")) >(), wxS("LWG Chair post-meeting report") > , Rev< 3u, Arr64< Hash(wxS("Author311")) >(), wxS("LWG Chair post-meeting report") > , Rev< 4u, Arr64< Hash(wxS("Author1518")) >(), wxS("LWG Chair post-meeting report") >  >() },
    {  986u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Comparison of Modules Proposals") >  >() },
    {  987u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("polymorphic_allocator<byte> instead of type-erasure") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Microsoft Word - P0987_polyalloc_instead_of_erasure.docx") > , Rev< 2u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Microsoft Word - P0987R2_polyalloc_instead_of_erasure.docx") >  >() },
    {  988u, RevList< Rev< 0u, Arr64< Hash(wxS("Author603")) >(), wxS("Title494") >  >() },
    {  989u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title1032") >  >() },
    {  990u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title18") >  >() },
    {  991u, RevList< Rev< 0u, Arr64< Hash(wxS("Author72")) >(), wxS("Title74") >  >() },
    {  992u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Constexpr") >  >() },
    {  993u, RevList< Rev< 0u, Arr64< Hash(wxS("Author397")) >(), wxS("Reflection") >  >() },
    {  994u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2078")) >(), wxS("Title1609") >  >() },
    {  995u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("p0995R0: Improving atomic_flag") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Improving atomic_flag") >  >() },
    {  996u, RevList< Rev< 1u, Arr64< Hash(wxS("Author2047")) >(), wxS("Rebase Library Fundamentals TS on C++17") >  >() },
    {  997u, RevList< Rev< 0u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Title823") >  >() },
    {  999u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1740")) >(), wxS("Title1346") >  >() },
    { 1000u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1055") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title993") > , Rev< 2u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1655") > , Rev< 3u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1433") > , Rev< 4u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title440") > , Rev< 5u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title693") > , Rev< 6u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1381") >  >() },
    { 1001u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1580")) >(), wxS("Target Vectorization Policies from Parallelism V2 TS to C++20") > , Rev< 1u, Arr64< Hash(wxS("Author235")) >(), wxS("Target Vectorization Policies from Parallelism V2 TS to C++20") > , Rev< 2u, Arr64< Hash(wxS("Author1628")) >(), wxS("Target Vectorization Policies from Parallelism V2 TS to C++20") >  >() },
    { 1002u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title334") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title572") >  >() },
    { 1003u, RevList< Rev< 0u, Arr64< Hash(wxS("Author15")) >(), wxS("C++ Standard Library Issues Resolved Directly In Jacksonville") >  >() },
    { 1004u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title568") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title346") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title547") >  >() },
    { 1005u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("p1005r0: namespace std { namespace fs = filesystem; }") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("`namespace std { namespace fs = filesystem; }`") >  >() },
    { 1006u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1264") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title854") >  >() },
    { 1007u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1217")) >(), wxS("Title954") > , Rev< 1u, Arr64< Hash(wxS("Author1681")) >(), wxS("Title1306") > , Rev< 2u, Arr64< Hash(wxS("Author1454")) >(), wxS("Title1132") > , Rev< 3u, Arr64< Hash(wxS("Author1835")) >(), wxS("Title1426") >  >() },
    { 1008u, RevList< Rev< 0u, Arr64< Hash(wxS("Author244")) >(), wxS("Title200") > , Rev< 1u, Arr64< Hash(wxS("Author1269")) >(), wxS("Title983") >  >() },
    { 1009u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1775")) >(), wxS("Title1379") > , Rev< 1u, Arr64< Hash(wxS("Author1792")) >(), wxS("Title1393") > , Rev< 2u, Arr64< Hash(wxS("Author2101")) >(), wxS("Title1628") >  >() },
    { 1010u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Zeren")) >(), wxS("p1010R0: Container support for implicit lifetime types") > , Rev< 1u, Arr64< Hash(wxS("Mark Zeren")) >(), wxS("Container support for implicit lifetime types") >  >() },
    { 1011u, RevList< Rev< 0u, Arr64< Hash(wxS("Author734")) >(), wxS("Title591") >  >() },
    { 1012u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2135")) >(), wxS("Title1647") > , Rev< 1u, Arr64< Hash(wxS("Frank Zingsheim")) >(), wxS("Title1332") >  >() },
    { 1013u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2176")) >(), wxS("Explicit concept expressions") > , Rev< 1u, Arr64< Hash(wxS("Author1491")) >(), wxS("Explicit concept expressions") >  >() },
    { 1014u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Unit type") >  >() },
    { 1015u, RevList< Rev< 0u, Arr64< Hash(wxS("Author567")) >(), wxS("Title460") >  >() },
    { 1016u, RevList< Rev< 0u, Arr64< Hash(wxS("Author985")) >(), wxS("P1016R0") >  >() },
    { 1017u, RevList< Rev< 0u, Arr64< Hash(wxS("Hartmut Kaiser")) >(), wxS("Title1692") >  >() },
    { 1018u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2140")) >(), wxS("Evolution status after Jacksonville 2018") > , Rev< 1u, Arr64< Hash(wxS("Author547")) >(), wxS("Evolution status after Rapperswil 2018") > , Rev< 2u, Arr64< Hash(wxS("Author1087")) >(), wxS("Evolution status after San Diego 2018") > , Rev< 3u, Arr64< Hash(wxS("Author422")) >(), wxS("Evolution status after Kona 2019") > , Rev< 4u, Arr64< Hash(wxS("Author1832")) >(), wxS("Evolution status after Cologne 2019") > , Rev< 5u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Language Evolution status after Belfast 2019") > , Rev< 6u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Language Evolution status after Prague 2020") > , Rev< 7u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2020/032020/10") > , Rev< 8u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2020/112021/01") > , Rev< 9u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/012021/03") > , Rev< 10u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/04") > , Rev< 11u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/05") > , Rev< 12u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/062021/08") > , Rev< 13u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/082021/09") > , Rev< 14u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2021/092022/01") > , Rev< 15u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2022/012022/02") > , Rev< 16u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2022/022022/06") > , Rev< 17u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2022/062022/07") > , Rev< 18u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status pandemic edition 2022/072022/11") > , Rev< 19u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("C++ Language Evolution status") >  >() },
    { 1019u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title722") > , Rev< 1u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title423") > , Rev< 2u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title1391") >  >() },
    { 1020u, RevList< Rev< 0u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Smart pointer creation with default initialization") > , Rev< 1u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Smart pointer creation with default initialization") >  >() },
    { 1021u, RevList< Rev< 0u, Arr64< Hash(wxS("Author910")) >(), wxS("Extensions to Class Template Argument Deduction") > , Rev< 1u, Arr64< Hash(wxS("Author1916")) >(), wxS("Filling holes in Class Template Argument Deduction") > , Rev< 2u, Arr64< Hash(wxS("Author90")) >(), wxS("Filling holes in Class Template Argument Deduction") > , Rev< 3u, Arr64< Hash(wxS("Author161")) >(), wxS("Filling holes in Class Template Argument Deduction") > , Rev< 4u, Arr64< Hash(wxS("Author1068")) >(), wxS("Filling holes in Class Template Argument Deduction") > , Rev< 5u, Arr64< Hash(wxS("Author1112")) >(), wxS("Filling holes in Class Template Argument Deduction") > , Rev< 6u, Arr64< Hash(wxS("Author944")) >(), wxS("Filling holes in Class Template Argument Deduction") >  >() },
    { 1022u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title699") >  >() },
    { 1023u, RevList< Rev< 0u, Arr64< Hash(wxS("Author434")) >(), wxS("Title369") >  >() },
    { 1024u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2151")) >(), wxS("Title1658") > , Rev< 1u, Arr64< Hash(wxS("Author2181")) >(), wxS("Title1676") > , Rev< 2u, Arr64< Hash(wxS("Author1474")) >(), wxS("Title1144") > , Rev< 3u, Arr64< Hash(wxS("Author117")) >(), wxS("Title103") >  >() },
    { 1025u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Update The Reference To The Unicode Standard") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Update The Reference To The Unicode Standard") >  >() },
    { 1026u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title229") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title563") >  >() },
    { 1028u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1361") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title11") > , Rev< 2u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title536") > , Rev< 3u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title91") > , Rev< 4u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1049") > , Rev< 5u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1325") > , Rev< 6u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1522") >  >() },
    { 1029u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title392") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title2") > , Rev< 2u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1349") > , Rev< 3u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title855") >  >() },
    { 1030u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1429") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title123") > , Rev< 2u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title283") > , Rev< 3u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1605") > , Rev< 4u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title824") > , Rev< 5u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1500") > , Rev< 6u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title196") > , Rev< 7u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title537") > , Rev< 8u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title120") >  >() },
    { 1031u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title287") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title183") > , Rev< 2u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title592") >  >() },
    { 1032u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1788")) >(), wxS("Misc constexpr bits") > , Rev< 1u, Arr64< Hash(wxS("Author1206")) >(), wxS("Misc constexpr bits") >  >() },
    { 1033u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("P1033R0 Rangify the uninitialised memory algorithms!") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("P1033R1 Rangify the uninitialised memory algorithms!") >  >() },
    { 1035u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("p1035R0: Input range adaptors") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input range adaptors") > , Rev< 2u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input range adaptors") > , Rev< 3u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input range adaptors") > , Rev< 4u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input range adaptors") > , Rev< 5u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input Range Adaptors") > , Rev< 6u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input Range Adaptors") > , Rev< 7u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Input Range Adaptors") >  >() },
    { 1037u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Deep Integration of the Ranges TS") >  >() },
    { 1039u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("I got you, FAM - Flexible Array Members for C++") >  >() },
    { 1040u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("p1040R0: std::embed") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("p1040R1: std::embed") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") > , Rev< 5u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") > , Rev< 6u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") > , Rev< 7u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::embed") >  >() },
    { 1041u, RevList< Rev< 0u, Arr64< Hash(wxS("Author442")) >(), wxS("Title372") > , Rev< 1u, Arr64< Hash(wxS("cpp@rmf.io")) >(), wxS("Make char16_t/char32_t string literals be UTF-16/32") > , Rev< 3u, Arr64< Hash(wxS("cpp@rmf.io")) >(), wxS("Make char16_t/char32_t string literals be UTF-16/32") > , Rev< 4u, Arr64< Hash(wxS("cpp@rmf.io")) >(), wxS("Make char16_t/char32_t string literals be UTF-16/32") >  >() },
    { 1042u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("__VA_OPT__ wording clarifications") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("__VA_OPT__ wording clarifications") >  >() },
    { 1043u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1399")) >(), wxS("P1043r0 Narrow contracts in <code>string_view</code> versus P0903R1") >  >() },
    { 1044u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("p1044R0: std::async() in an Executors World") >  >() },
    { 1045u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title49") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("`constexpr` Function Parameters") >  >() },
    { 1046u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title469") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("Automatically Generate More Operators") > , Rev< 2u, Arr64< Hash(wxS("David Stone")) >(), wxS("Automatically Generate More Operators") >  >() },
    { 1048u, RevList< Rev< 0u, Arr64< Hash(wxS("Juan Alday")) >(), wxS("Title194") > , Rev< 1u, Arr64< Hash(wxS("Juan Alday")) >(), wxS("P1048R1") >  >() },
    { 1050u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1433")) >(), wxS("Title1112") > , Rev< 1u, Arr64< Hash(wxS("Author1544")) >(), wxS("p1050r1") >  >() },
    { 1051u, RevList< Rev< 0u, Arr64< Hash(wxS("Vicente J")) >(), wxS("p1051r0") >  >() },
    { 1052u, RevList< Rev< 0u, Arr64< Hash(wxS("Author881")) >(), wxS("Modules, Macros, and Build Systems") >  >() },
    { 1053u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("p1053R0: Future-proofing continuations for executors") > , Rev< 1u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Future-proofing continuations for executors") >  >() },
    { 1054u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("p1054R0: A Unified Futures Proposal for C++") >  >() },
    { 1055u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Title281") >  >() },
    { 1056u, RevList< Rev< 0u, Arr64< Hash(wxS("Author615")) >(), wxS("Add coroutine task type") > , Rev< 1u, Arr64< Hash(wxS("Author1148")) >(), wxS("Add coroutine lazy type") >  >() },
    { 1059u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("p1059R0: Adapting Asio to use std::expected") >  >() },
    { 1061u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 5u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 6u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 7u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 8u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 9u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") > , Rev< 10u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Structured Bindings can introduce a Pack") >  >() },
    { 1062u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("p1062R0: Diet Graphics") >  >() },
    { 1063u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2098")) >(), wxS("Title1626") > , Rev< 1u, Arr64< Hash(wxS("Author2186")) >(), wxS("Title1680") > , Rev< 2u, Arr64< Hash(wxS("Author940")) >(), wxS("Title758") >  >() },
    { 1064u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1048")) >(), wxS("Allowing Virtual Function Calls in Constant Expressions") >  >() },
    { 1065u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr INVOKE") > , Rev< 1u, Arr64< Hash(wxS("Tomasz Kami\u0144ski")) >(), wxS("constexpr INVOKE") > , Rev< 2u, Arr64< Hash(wxS("Tomasz Kami\u0144ski")) >(), wxS("constexpr INVOKE") >  >() },
    { 1066u, RevList< Rev< 0u, Arr64< Hash(wxS("Mathias Stearn")) >(), wxS("p1066R0: How to catch an exception_ptr without even try-ing") > , Rev< 1u, Arr64< Hash(wxS("Mathias Stearn")) >(), wxS("How to catch an exception_ptr without even try-ing") >  >() },
    { 1067u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1264")) >(), wxS("C++ Dependency Management: Package Consumption vs Development") >  >() },
    { 1068u, RevList< Rev< 0u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title448") > , Rev< 1u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title1418") > , Rev< 2u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title1696") > , Rev< 3u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title228") > , Rev< 4u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title1176") > , Rev< 5u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title782") > , Rev< 6u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R6.docx") > , Rev< 7u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R7.docx") > , Rev< 8u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R8") > , Rev< 9u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R9") > , Rev< 10u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R10") > , Rev< 11u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P1068R11") >  >() },
    { 1069u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Refining standard library support for Class Template Argument Deduction") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0\u00A0Mike Spertus")) >(), wxS("Inferencing heap objects") >  >() },
    { 1070u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title270") >  >() },
    { 1071u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1183") >  >() },
    { 1072u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1553")) >(), wxS("Title1204") > , Rev< 1u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Optimized Initialization for basic_string and vector") > , Rev< 2u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_default_init") > , Rev< 3u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_default_init") > , Rev< 4u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_default_init") > , Rev< 5u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_default_init") > , Rev< 6u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_and_overwrite") > , Rev< 7u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_and_overwrite") > , Rev< 8u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_and_overwrite") > , Rev< 9u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_and_overwrite") > , Rev< 10u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("basic_string::resize_and_overwrite") >  >() },
    { 1073u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1883")) >(), wxS("Title1460") > , Rev< 1u, Arr64< Hash(wxS("Author522")) >(), wxS("Title429") > , Rev< 2u, Arr64< Hash(wxS("Author1324")) >(), wxS("Title1021") > , Rev< 3u, Arr64< Hash(wxS("Author1346")) >(), wxS("Title1040") >  >() },
    { 1074u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged Michael")) >(), wxS("Title1229") >  >() },
    { 1076u, RevList< Rev< 0u, Arr64< Hash(wxS("Author5")) >(), wxS("Editorial clause reorganization") > , Rev< 1u, Arr64< Hash(wxS("Author201")) >(), wxS("Editorial clause reorganization") >  >() },
    { 1077u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1489")) >(), wxS("Allowing Virtual Destructors to be \"Trivial\"") >  >() },
    { 1079u, RevList< Rev< 0u, Arr64< Hash(wxS("Author916")) >(), wxS("Title737") >  >() },
    { 1080u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2018/03/28 - 2018/04/25") >  >() },
    { 1081u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1312")) >(), wxS("P1081R0") >  >() },
    { 1082u, RevList< Rev< 0u, Arr64< Hash(wxS("Author565")) >(), wxS("C++ Standard Library Issues to be moved in Rapperswil") >  >() },
    { 1083u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1422")) >(), wxS("Title1104") > , Rev< 1u, Arr64< Hash(wxS("Author19")) >(), wxS("P1083r1 | Move resource_adaptor from Library TS to the C++ WP") > , Rev< 2u, Arr64< Hash(wxS("Author465")) >(), wxS("P1083r2 | Move resource_adaptor from Library TS to the C++ WP") > , Rev< 3u, Arr64< Hash(wxS("Author1581")) >(), wxS("P1083r3 | Move resource_adaptor from Library TS to the C++ WP") > , Rev< 4u, Arr64< Hash(wxS("Author754")) >(), wxS("Title612") > , Rev< 5u, Arr64< Hash(wxS("Author938")) >(), wxS("Title757") > , Rev< 6u, Arr64< Hash(wxS("Author11")) >(), wxS("Title13") > , Rev< 7u, Arr64< Hash(wxS("Author1255")) >(), wxS("Title976") > , Rev< 8u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Move `resource_adaptor` from Library TS to the C++ WP") >  >() },
    { 1084u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1321")) >(), wxS("Today's return-type-requirements Are Insufficient") > , Rev< 1u, Arr64< Hash(wxS("Author435")) >(), wxS("Today's return-type-requirements Are Insufficient") > , Rev< 2u, Arr64< Hash(wxS("Author1851")) >(), wxS("Today's return-type-requirements Are Insufficient") >  >() },
    { 1085u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2137")) >(), wxS("Title1648") > , Rev< 1u, Arr64< Hash(wxS("Author1841")) >(), wxS("Title1427") > , Rev< 2u, Arr64< Hash(wxS("Author2059")) >(), wxS("Title1597") >  >() },
    { 1086u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title370") >  >() },
    { 1087u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("C++ Modules") >  >() },
    { 1089u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Douglas")) >(), wxS("Title660") > , Rev< 2u, Arr64< Hash(wxS("Robert Douglas")) >(), wxS("Title1456") >  >() },
    { 1090u, RevList< Rev< 0u, Arr64< Hash(wxS("Author170")) >(), wxS("Aggregate initialization in the presence of deleted constructors") >  >() },
    { 1091u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Title816") > , Rev< 1u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Title492") > , Rev< 2u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Extending structured bindings to be more like variable declarations") > , Rev< 3u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Extending structured bindings to be more like variable declarations") >  >() },
    { 1093u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1542")) >(), wxS("Title1195") >  >() },
    { 1094u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1744")) >(), wxS("Nested Inline Namespaces") > , Rev< 1u, Arr64< Hash(wxS("Author2104")) >(), wxS("Nested Inline Namespaces") > , Rev< 2u, Arr64< Hash(wxS("Author1814")) >(), wxS("Nested Inline Namespaces") >  >() },
    { 1095u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1499") >  >() },
    { 1096u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1360")) >(), wxS("Title1057") >  >() },
    { 1097u, RevList< Rev< 0u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Named character escapes") > , Rev< 1u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Title1171") > , Rev< 2u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Named character escapes") >  >() },
    { 1099u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("p1099R0: Using Enum") > , Rev< 2u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("p1099R2: Using Enum") > , Rev< 3u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Using Enum") > , Rev< 4u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Using Enum") > , Rev< 5u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Using Enum") >  >() },
    { 1100u, RevList< Rev< 0u, Arr64< Hash(wxS("Vinnie Falco")) >(), wxS("Efficient composition with DynamicBuffer") >  >() },
    { 1101u, RevList< Rev< 0u, Arr64< Hash(wxS("Mikhail Maltsev")) >(), wxS("Vector Length Agnostic SIMD") >  >() },
    { 1102u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("Down with ()!") > , Rev< 1u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("Down with <code>()</code>!") > , Rev< 2u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("Down with ()!") >  >() },
    { 1103u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1404")) >(), wxS("C++ Technical Specification") > , Rev< 1u, Arr64< Hash(wxS("Author2019")) >(), wxS("Merging Modules") > , Rev< 2u, Arr64< Hash(wxS("Author1529")) >(), wxS("Merging Modules") > , Rev< 3u, Arr64< Hash(wxS("Author1159")) >(), wxS("Merging Modules") >  >() },
    { 1105u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Leaving no room for a lower-level language: A C++ Subset") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Leaving no room for a lower-level language: A C++ Subset") >  >() },
    { 1108u, RevList< Rev< 0u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("web_view") > , Rev< 1u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("web_view") > , Rev< 2u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("web_view") > , Rev< 3u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("web_view") > , Rev< 4u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("web_view") >  >() },
    { 1109u, RevList< Rev< 0u, Arr64< Hash(wxS("Author70")) >(), wxS("P1109") > , Rev< 1u, Arr64< Hash(wxS("Author1984")) >(), wxS("P1109R1") >  >() },
    { 1110u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeffrey Yasskin")) >(), wxS("A placeholder with no name") >  >() },
    { 1111u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Resolutions to NB Comments on the Parallelism TS v2") >  >() },
    { 1112u, RevList< Rev< 0u, Arr64< Hash(wxS("Author947")) >(), wxS("Microsoft Word - cppprop3d.doc") > , Rev< 1u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - p1112r1.doc") > , Rev< 2u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - p1112r2.doc") > , Rev< 3u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - p1112r3.doc") > , Rev< 4u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - p1112r4.doc") > , Rev< 5u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - p1112r5.doc") >  >() },
    { 1113u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1424")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 1114u, RevList< Rev< 0u, Arr64< Hash(wxS("Author643")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 1115u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title319") > , Rev< 1u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title348") > , Rev< 2u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title872") > , Rev< 3u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title507") >  >() },
    { 1116u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title1544") >  >() },
    { 1118u, RevList< Rev< 0u, Arr64< Hash(wxS("Author679")) >(), wxS("Title550") >  >() },
    { 1119u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("ABI for std::hardware_{constructive,destructive}_interference_size") >  >() },
    { 1120u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Consistency improvements for <=> and other comparison operators") >  >() },
    { 1121u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title832") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title131") > , Rev< 2u, Arr64< Hash(wxS("Maged M")) >(), wxS("Title28") > , Rev< 3u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointers") >  >() },
    { 1122u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Title1491") > , Rev< 1u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Title1152") > , Rev< 2u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Title677") > , Rev< 3u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)") > , Rev< 4u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)") >  >() },
    { 1123u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Sunderland")) >(), wxS("Editorial Guidance for merging P0019r8 and P0528r3") >  >() },
    { 1128u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1082")) >(), wxS("Summer 2018 WG21 Batavia LWG Meeting Information") >  >() },
    { 1130u, RevList< Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Module Resource Requirement Propagation") >  >() },
    { 1131u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1827")) >(), wxS("Core Issue 2292: simple-template-id is ambiguous between class-name and type-name") > , Rev< 1u, Arr64< Hash(wxS("Author1175")) >(), wxS("Core Issue 2292: simple-template-id is ambiguous between class-name and type-name") > , Rev< 2u, Arr64< Hash(wxS("Author1241")) >(), wxS("Core Issue 2292: simple-template-id is ambiguous between class-name and type-name") >  >() },
    { 1132u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("p1132R0: out_ptr - a scalable output pointer abstraction") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 5u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 6u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 7u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") > , Rev< 8u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("out_ptr - a scalable output pointer abstraction") >  >() },
    { 1133u, RevList< Rev< 0u, Arr64< Hash(wxS("Vinnie Falco")) >(), wxS("Networking TS Associations For Call Wrappers") >  >() },
    { 1135u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 3u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 4u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 5u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") > , Rev< 6u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("The C++20 Synchronization Library") >  >() },
    { 1136u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1549")) >(), wxS("Title1202") >  >() },
    { 1137u, RevList< Rev< 0u, Arr64< Hash(wxS("maintain consistency")) >(), wxS("SG16: Unicode meeting summaries 2018/05/16 - 2018/06/20") >  >() },
    { 1138u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title805") >  >() },
    { 1139u, RevList< Rev< 0u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Address wording issues related to ISO 10646") > , Rev< 1u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Address wording issues related to ISO 10646") > , Rev< 2u, Arr64< Hash(wxS("R. Martinho")) >(), wxS("Address wording issues related to ISO 10646") >  >() },
    { 1141u, RevList< Rev< 0u, Arr64< Hash(wxS("Author273")) >(), wxS("Yet another approach for constrained declarations") > , Rev< 1u, Arr64< Hash(wxS("Author226")) >(), wxS("Yet another approach for constrained declarations") > , Rev< 2u, Arr64< Hash(wxS("Author1370")) >(), wxS("Yet another approach for constrained declarations") >  >() },
    { 1142u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1099")) >(), wxS("Thoughts on a conservative terse syntax for constraints") >  >() },
    { 1143u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1521")) >(), wxS("Title1182") > , Rev< 1u, Arr64< Hash(wxS("Author925")) >(), wxS("Title745") > , Rev< 2u, Arr64< Hash(wxS("Author649")) >(), wxS("Title529") >  >() },
    { 1144u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 4u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 5u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 6u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Object relocation in terms of move plus destroy") > , Rev< 7u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") > , Rev< 8u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") > , Rev< 9u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") > , Rev< 10u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") > , Rev< 11u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") > , Rev< 12u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_trivially_relocatable") >  >() },
    { 1145u, RevList< Rev< 0u, Arr64< Hash(wxS("Vinnie Falco")) >(), wxS("Buffer Sequence Adaptors") >  >() },
    { 1147u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Printing `volatile` Pointers") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Printing `volatile` Pointers") >  >() },
    { 1148u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1152")) >(), wxS("Cleaning up [strings]") >  >() },
    { 1149u, RevList< Rev< 0u, Arr64< Hash(wxS("Author507")) >(), wxS("Constexpr regex") >  >() },
    { 1152u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>") > , Rev< 3u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>") > , Rev< 4u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>") >  >() },
    { 1153u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Copying volatile subobjects is not trivial") >  >() },
    { 1154u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Type traits for structural comparison") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Type traits for structural comparison") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Type traits for structural comparison") >  >() },
    { 1155u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("More implicit moves") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("More implicit moves") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("More implicit moves") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("More implicit moves") >  >() },
    { 1156u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2144")) >(), wxS("Merged Modules and Tooling") >  >() },
    { 1157u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Multi-argument constrained-parameter - HackMD") >  >() },
    { 1158u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Concept-defined placeholder types - HackMD") >  >() },
    { 1159u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1413")) >(), wxS("Title1100") >  >() },
    { 1160u, RevList< Rev< 0u, Arr64< Hash(wxS("Attila Feh")) >(), wxS("P1160R0") > , Rev< 1u, Arr64< Hash(wxS("Author1755")) >(), wxS("Microsoft Word - P1160R1") >  >() },
    { 1161u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Deprecate uses of the comma operator in subscripting expressions") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Deprecate uses of the comma operator in subscripting expressions") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Deprecate uses of the comma operator in subscripting expressions") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Deprecate uses of the comma operator in subscripting expressions") >  >() },
    { 1163u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title211") >  >() },
    { 1164u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1184")) >(), wxS("Microsoft Word - D1164R0_create_directory_180824.docx") > , Rev< 1u, Arr64< Hash(wxS("Author1098")) >(), wxS("Microsoft Word - P1164R1R1_create_directory_190222.docx") >  >() },
    { 1165u, RevList< Rev< 0u, Arr64< Hash(wxS("Author225")) >(), wxS("Title184") > , Rev< 1u, Arr64< Hash(wxS("Author1950")) >(), wxS("Make stateful allocator propagation more consistent for `operator+(basic_string)`") >  >() },
    { 1166u, RevList< Rev< 0u, Arr64< Hash(wxS("Author489")) >(), wxS("Title408") >  >() },
    { 1167u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1964")) >(), wxS("Improving function templates with Class Template Argument Deduction") >  >() },
    { 1168u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1221")) >(), wxS("How to make Terse Notation soar with Class Template Argument Deduction") >  >() },
    { 1169u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("static operator()") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("static `operator()`") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("static `operator()`") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("static operator()") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("static operator()") >  >() },
    { 1170u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Overload sets as function parameters") >  >() },
    { 1171u, RevList< Rev< 0u, Arr64< Hash(wxS("Author448")) >(), wxS("Title377") >  >() },
    { 1172u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title569") > , Rev< 1u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1356") >  >() },
    { 1175u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("a simple and practical optional reference for C++") >  >() },
    { 1177u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1335")) >(), wxS("Title1027") > , Rev< 1u, Arr64< Hash(wxS("Author1493")) >(), wxS("Title1161") >  >() },
    { 1178u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1798")) >(), wxS("C++ Compile") >  >() },
    { 1179u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1120") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title327") >  >() },
    { 1180u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Response to P1156") >  >() },
    { 1181u, RevList< Rev< 0u, Arr64< Hash(wxS("Morwenn")) >(), wxS("Proposing <code>unless</code>") >  >() },
    { 1182u, RevList< Rev< 0u, Arr64< Hash(wxS("Author551")) >(), wxS("New names for the power-of-2 templates (and their header)") >  >() },
    { 1184u, RevList< Rev< 0u, Arr64< Hash(wxS("Author548")) >(), wxS("A Module Mapper") > , Rev< 1u, Arr64< Hash(wxS("Author2169")) >(), wxS("A Module Mapper") > , Rev< 2u, Arr64< Hash(wxS("Author2004")) >(), wxS("A Module Mapper") >  >() },
    { 1185u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("<=> != ==") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("<=> != ==") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("<=> != ==") >  >() },
    { 1186u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("When do you actually use <=>?") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("When do you actually use <=>?") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("When do you actually use <=>?") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("When do you actually use <=>?") >  >() },
    { 1187u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A type trait for std::compare_3way()'s type") >  >() },
    { 1188u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Library utilities for <=>") >  >() },
    { 1189u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Adding <=> to library") >  >() },
    { 1190u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title386") >  >() },
    { 1191u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title1260") >  >() },
    { 1192u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("p1192R0: Experience report - integrating Executors with Parallel Algorithms") > , Rev< 1u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("p1192R1: Experience report - integrating Executors with Parallel Algorithms") >  >() },
    { 1193u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Explicitly Specified Returns for (Implicit) Conversions") >  >() },
    { 1194u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("P1194: The Compromise Executors Proposal: A lazy simplification of P0443") >  >() },
    { 1195u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1421")) >(), wxS("Making <system_error> constexpr") >  >() },
    { 1196u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1773")) >(), wxS("Value-based std::error_category comparison") >  >() },
    { 1197u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2142")) >(), wxS("A non-allocating overload of error_category::message()") >  >() },
    { 1198u, RevList< Rev< 0u, Arr64< Hash(wxS("Author297")) >(), wxS("Adding error_category::failed()") >  >() },
    { 1199u, RevList< Rev< 0u, Arr64< Hash(wxS("Author974")) >(), wxS("A simple proposal for unifying generic and object-oriented programming") >  >() },
    { 1200u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2122")) >(), wxS("Title1641") >  >() },
    { 1201u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1764")) >(), wxS("variant direct comparisons with held types") >  >() },
    { 1202u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title415") > , Rev< 1u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title213") > , Rev< 2u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title178") > , Rev< 3u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Asymmetric Fences") > , Rev< 4u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("P1202R4") > , Rev< 5u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("P1202R5") >  >() },
    { 1203u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1981")) >(), wxS("Modular main()") >  >() },
    { 1204u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1218")) >(), wxS("Canonical Project Structure") >  >() },
    { 1205u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("Teleportation via <code>co_await</code>") >  >() },
    { 1206u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title509") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title137") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1374") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title680") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title962") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title804") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1543") > , Rev< 7u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1387") >  >() },
    { 1207u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Movability of Single-pass Iterators") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Movability of Single-pass Iterators") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1660") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title553") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title304") >  >() },
    { 1208u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Adopt source_location from Library Fundamentals V3 for C++20") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Adopt source_location from Library Fundamentals V3 for C++20") > , Rev< 3u, Arr64< Hash(wxS("Author2190")) >(), wxS("Title1682") > , Rev< 4u, Arr64< Hash(wxS("Author1252")) >(), wxS("Title972") > , Rev< 5u, Arr64< Hash(wxS("Author1091")) >(), wxS("Title877") > , Rev< 6u, Arr64< Hash(wxS("Author29")) >(), wxS("Title22") >  >() },
    { 1209u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1703")) >(), wxS("Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20") >  >() },
    { 1210u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2168")) >(), wxS("Completing the Rebase of Library Fundamentals, Version 3, Working Draft") >  >() },
    { 1212u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Modules and Freestanding") >  >() },
    { 1213u, RevList< Rev< 0u, Arr64< Hash(wxS("Author625")) >(), wxS("Global Module Fragment is Unnecessary") > , Rev< 1u, Arr64< Hash(wxS("Author1634")) >(), wxS("Global Module Fragment is Unnecessary") >  >() },
    { 1214u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Pointer to Member Functions and Member Objects are just Callables!") >  >() },
    { 1217u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Out-of-thin-air, revisited, again") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Out-of-thin-air, revisited, again") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Out-of-thin-air, revisited, again") >  >() },
    { 1218u, RevList< Rev< 0u, Arr64< Hash(wxS("Author89")) >(), wxS("Redefinitions in Legacy Imports") >  >() },
    { 1219u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Homogeneous variadic function parameters") > , Rev< 1u, Arr64< Hash(wxS("James Touton")) >(), wxS("Homogeneous variadic function parameters") > , Rev< 2u, Arr64< Hash(wxS("James Touton")) >(), wxS("Homogeneous variadic function parameters") >  >() },
    { 1220u, RevList< Rev< 0u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Controlling When Inline Functions are Emitted") >  >() },
    { 1221u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1663")) >(), wxS("Title1293") > , Rev< 1u, Arr64< Hash(wxS("Author2126")) >(), wxS("Title1643") >  >() },
    { 1222u, RevList< Rev< 0u, Arr64< Hash(wxS("Author597")) >(), wxS("Title488") > , Rev< 1u, Arr64< Hash(wxS("Author605")) >(), wxS("A Standard flatset") > , Rev< 2u, Arr64< Hash(wxS("Author1350")) >(), wxS("A Standard flatset") > , Rev< 3u, Arr64< Hash(wxS("Author255")) >(), wxS("A Standard flatset") > , Rev< 4u, Arr64< Hash(wxS("Author1301")) >(), wxS("A Standard flatset") >  >() },
    { 1223u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1430")) >(), wxS("Title1110") > , Rev< 1u, Arr64< Hash(wxS("Author1562")) >(), wxS("Title1210") > , Rev< 2u, Arr64< Hash(wxS("Author894")) >(), wxS("findast") > , Rev< 3u, Arr64< Hash(wxS("Author588")) >(), wxS("findlast") > , Rev< 4u, Arr64< Hash(wxS("Author445")) >(), wxS("findlast") > , Rev< 5u, Arr64< Hash(wxS("Author1865")) >(), wxS("findlast") >  >() },
    { 1224u, RevList< Rev< 0u, Arr64< Hash(wxS("Author736")) >(), wxS("C++ Standard Library Issues to be moved in San Diego") >  >() },
    { 1225u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Feedback on 2D Graphics") >  >() },
    { 1227u, RevList< Rev< 0u, Arr64< Hash(wxS("Jorg Brown")) >(), wxS("p1227R0: Signed size() functions") > , Rev< 1u, Arr64< Hash(wxS("Jorg Brown")) >(), wxS("p1227R1: Signed ssize() functions, unsigned size() functions") > , Rev< 2u, Arr64< Hash(wxS("Author843")) >(), wxS("Signed ssize() functions, unsigned size() functions") >  >() },
    { 1228u, RevList< Rev< 1u, Arr64< Hash(wxS("Author2136")) >(), wxS("A proposal to add an efficient string concatenation routine to the Standard Library (P1228)") >  >() },
    { 1229u, RevList< Rev< 0u, Arr64< Hash(wxS("Jorg Brown")) >(), wxS("p1229R0: Labelled Parameters") >  >() },
    { 1230u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1409") >  >() },
    { 1231u, RevList< Rev< 0u, Arr64< Hash(wxS("Author533")) >(), wxS("Title434") >  >() },
    { 1232u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("p1232_integrating_executors_with_the_standard_library.md - Grip") >  >() },
    { 1233u, RevList< Rev< 0u, Arr64< Hash(wxS("Ashley Hedberg")) >(), wxS("Title906") > , Rev< 1u, Arr64< Hash(wxS("Ashley Hedberg")) >(), wxS("Shift-by-negative in `shift_left` and `shift_right`") >  >() },
    { 1235u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Title1103") >  >() },
    { 1236u, RevList< Rev< 0u, Arr64< Hash(wxS("Author183")) >(), wxS("Alternative Wording for P0907R4 Signed Integers are Two's Complement") > , Rev< 1u, Arr64< Hash(wxS("Author2185")) >(), wxS("Alternative Wording for P0907R4 Signed Integers are Two's Complement") >  >() },
    { 1237u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2018/07/11 - 2018/10/03") >  >() },
    { 1238u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode Direction") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode Direction") >  >() },
    { 1239u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Lustig")) >(), wxS("Placed Before") >  >() },
    { 1240u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title1380") > , Rev< 1u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Title1056") > , Rev< 2u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Scalable Reflection") >  >() },
    { 1241u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("p1241_in_support_of_coroutines.md - Grip") >  >() },
    { 1242u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title1327") > , Rev< 1u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Title915") >  >() },
    { 1243u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R0 - Rangify New Algorithms") > , Rev< 1u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R1 - Rangify New Algorithms") > , Rev< 2u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R2 - Rangify New Algorithms") > , Rev< 3u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R3 - Rangify New Algorithms") > , Rev< 4u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R4") >  >() },
    { 1244u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("Title1474") >  >() },
    { 1245u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("<code>export module containing [[attribute]];</code>") >  >() },
    { 1246u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("The <code>no_float</code> function attribute") >  >() },
    { 1247u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("Disabling static destructors: introducing <code>no_destroy</code> and <code>always_destroy</code> attributes") >  >() },
    { 1248u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixing 'Relation's") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Remove 'CommonReference' requirement from 'StrictWeakOrdering'") >  >() },
    { 1249u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("std::forward from std::initializer_list") >  >() },
    { 1250u, RevList< Rev< 0u, Arr64< Hash(wxS("Titus Winters")) >(), wxS("Title433") >  >() },
    { 1251u, RevList< Rev< 0u, Arr64< Hash(wxS("Author378")) >(), wxS("Title321") > , Rev< 1u, Arr64< Hash(wxS("Author103")) >(), wxS("Title94") >  >() },
    { 1252u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Merge the Ranges TS") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Merge the Ranges TS") > , Rev< 2u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Merge the Ranges TS") >  >() },
    { 1253u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Title956") >  >() },
    { 1254u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Notes on C++ Package Management") >  >() },
    { 1255u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: <code>view::maybe</code>") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: <code>view::maybe</code>") > , Rev< 2u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: <code>view::maybe</code>") > , Rev< 3u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: <code>view::maybe</code>") > , Rev< 4u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: <code>view::maybe</code>") > , Rev< 5u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: views::maybe") > , Rev< 6u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements:") > , Rev< 7u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("A view of 0 or 1 elements: `views::maybe`") > , Rev< 8u, Arr64< Hash(wxS("Author325")) >(), wxS("Title275") > , Rev< 9u, Arr64< Hash(wxS("Author704")) >(), wxS("Title566") > , Rev< 10u, Arr64< Hash(wxS("Author82")) >(), wxS("Title82") > , Rev< 11u, Arr64< Hash(wxS("Author1796")) >(), wxS("Title1396") > , Rev< 12u, Arr64< Hash(wxS("Author1395")) >(), wxS("Title1086") > , Rev< 13u, Arr64< Hash(wxS("Author1012")) >(), wxS("Title810") > , Rev< 14u, Arr64< Hash(wxS("Author1559")) >(), wxS("Title1209") >  >() },
    { 1256u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1737")) >(), wxS("Title1341") >  >() },
    { 1257u, RevList< Rev< 0u, Arr64< Hash(wxS("Author171")) >(), wxS("Implementation experience on trying to implement concurrent data and control structures with executors") >  >() },
    { 1258u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1170")) >(), wxS("Title927") >  >() },
    { 1259u, RevList< Rev< 0u, Arr64< Hash(wxS("Author905")) >(), wxS("Title732") > , Rev< 1u, Arr64< Hash(wxS("Author22")) >(), wxS("Merge most of Networking TS into C++ Working Draft") >  >() },
    { 1260u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Pattern Matching") >  >() },
    { 1261u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title454") >  >() },
    { 1263u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1657") >  >() },
    { 1264u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title100") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1416") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title1129") >  >() },
    { 1267u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Title201") >  >() },
    { 1269u, RevList< Rev< 0u, Arr64< Hash(wxS("Jason Carey")) >(), wxS("Three Years with the Networking TS") >  >() },
    { 1271u, RevList< Rev< 0u, Arr64< Hash(wxS("Author885")) >(), wxS("P1271r0 | Move resource_adaptor from Library TS to the C++ WP") >  >() },
    { 1272u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Byteswapping for fun&&nuf") > , Rev< 1u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Byteswapping for fun&&nuf") > , Rev< 2u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Byteswapping for fun&&nuf") > , Rev< 3u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Byteswapping for fun&&nuf") > , Rev< 4u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Byteswapping for fun&&nuf") >  >() },
    { 1273u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("86 The Absurd (From Exceptions)") >  >() },
    { 1274u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Bang For The Buck") >  >() },
    { 1275u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Desert Sessions: Improving hostile environment interactions") >  >() },
    { 1276u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Void Main") >  >() },
    { 1277u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Subscripts On Parade") >  >() },
    { 1278u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("offsetof For the Modern Era") >  >() },
    { 1279u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("std::breakpoint") >  >() },
    { 1280u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Integer Width Literals") > , Rev< 1u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Integer Width Literals") > , Rev< 2u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Integer Width Literals") >  >() },
    { 1281u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Feature Presentation") >  >() },
    { 1282u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Ceci Nest Pas Une Pipe: Adding a workflow operator to C++") >  >() },
    { 1283u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Sharing is Caring") >  >() },
    { 1284u, RevList< Rev< 0u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Allowing Inlining of Replaceable Functions") >  >() },
    { 1285u, RevList< Rev< 0u, Arr64< Hash(wxS("Author250")) >(), wxS("Improving Completeness Requirements for Type Traits") >  >() },
    { 1286u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Contra CWG DR1778") > , Rev< 1u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Contra CWG DR1778") > , Rev< 2u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Contra CWG DR1778") >  >() },
    { 1287u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1448")) >(), wxS("Title1124") >  >() },
    { 1288u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2178")) >(), wxS("Title1673") >  >() },
    { 1289u, RevList< Rev< 0u, Arr64< Hash(wxS("Author111")) >(), wxS("Title99") > , Rev< 1u, Arr64< Hash(wxS("Author1801")) >(), wxS("Title1397") >  >() },
    { 1290u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1932")) >(), wxS("Title1493") > , Rev< 1u, Arr64< Hash(wxS("Author141")) >(), wxS("Title121") > , Rev< 2u, Arr64< Hash(wxS("Author2035")) >(), wxS("Title1573") > , Rev< 3u, Arr64< Hash(wxS("Author897")) >(), wxS("Title726") >  >() },
    { 1291u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1059")) >(), wxS("std::ranges::less<> Should Be More!") >  >() },
    { 1292u, RevList< Rev< 0u, Arr64< Hash(wxS("Matt Calabrese")) >(), wxS("Customization Point Functions") >  >() },
    { 1293u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1626")) >(), wxS("ostream_joiner") > , Rev< 1u, Arr64< Hash(wxS("Author2072")) >(), wxS("ostream_joiner") > , Rev< 2u, Arr64< Hash(wxS("Author1614")) >(), wxS("ostream_joiner") >  >() },
    { 1294u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1632")) >(), wxS("Microsoft Word - N3254.docx") >  >() },
    { 1295u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Spaceship library update") >  >() },
    { 1296u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Miller")) >(), wxS("Title862") >  >() },
    { 1298u, RevList< Rev< 0u, Arr64< Hash(wxS("Olivier Giroux")) >(), wxS("Reserve more freedom for atomic_ref implementers") >  >() },
    { 1299u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1354")) >(), wxS("Module Preamble is Unnecessary") > , Rev< 1u, Arr64< Hash(wxS("Author961")) >(), wxS("Module Preamble is Unnecessarily Fragile") > , Rev< 3u, Arr64< Hash(wxS("Author287")) >(), wxS("Module Preamble is Unnecessarily Fragile") >  >() },
    { 1300u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2093")) >(), wxS("Remember the FORTRAN") >  >() },
    { 1301u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("nodiscard should have a reason") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("[[nodiscard(\"should have a reason\")]]") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("[[nodiscard(\"should have a reason\")]]") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("[[nodiscard(\"should have a reason\")]]") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("[[nodiscard(\"should have a reason\")]]") >  >() },
    { 1302u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Implicit Module Partition Lookup") > , Rev< 1u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Implicit Module Partition Lookup") >  >() },
    { 1303u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Inline Module Partitions") >  >() },
    { 1304u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Simplifying Extern Template") >  >() },
    { 1305u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Deprecate The Addressof Operator") >  >() },
    { 1306u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title351") > , Rev< 1u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title1531") > , Rev< 2u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Expansion statements r2") > , Rev< 3u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("P1306 (Expansion statements)") >  >() },
    { 1307u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title1023") >  >() },
    { 1308u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("pattern_matching") >  >() },
    { 1310u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title88") >  >() },
    { 1312u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title425") >  >() },
    { 1313u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Woehlke")) >(), wxS("Let's Talk About Package Specification") >  >() },
    { 1314u, RevList< Rev< 0u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("unique_val") > , Rev< 1u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("unique_val") >  >() },
    { 1315u, RevList< Rev< 0u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_val") > , Rev< 1u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_val") > , Rev< 2u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear") > , Rev< 3u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear") > , Rev< 4u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear") > , Rev< 5u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear") > , Rev< 6u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear (update to N2599)") > , Rev< 7u, Arr64< Hash(wxS("Miguel Ojeda")) >(), wxS("secure_clear") >  >() },
    { 1316u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1954")) >(), wxS("Title1517") >  >() },
    { 1317u, RevList< Rev< 0u, Arr64< Hash(wxS("Author977")) >(), wxS("Title785") > , Rev< 1u, Arr64< Hash(wxS("Author618")) >(), wxS("Title504") >  >() },
    { 1318u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1104")) >(), wxS("Title885") >  >() },
    { 1319u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1015")) >(), wxS("Changes between C++11 and C++14") >  >() },
    { 1320u, RevList< Rev< 0u, Arr64< Hash(wxS("Author270")) >(), wxS("Allowing contract predicates on non-first declarations") > , Rev< 1u, Arr64< Hash(wxS("Author213")) >(), wxS("Allowing contract predicates on non-first declarations") > , Rev< 2u, Arr64< Hash(wxS("Author762")) >(), wxS("Allowing contract predicates on non-first declarations") >  >() },
    { 1321u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1555")) >(), wxS("UB in contract violations") >  >() },
    { 1322u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS enhancement to enable custom I/O executors") > , Rev< 1u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS enhancement to enable custom I/O executors") > , Rev< 2u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS enhancement to enable custom I/O executors") > , Rev< 3u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS enhancement to enable custom I/O executors") >  >() },
    { 1323u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Contract postconditions and return type deduction") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Contract postconditions and return type deduction") > , Rev< 2u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Contract postconditions and return type deduction") >  >() },
    { 1324u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("[RE] Yet another") > , Rev< 1u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("[RE]YetAnother") >  >() },
    { 1327u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1875")) >(), wxS("Allowing dynamic_cast, polymorphic typeid in Constant Expressions") > , Rev< 1u, Arr64< Hash(wxS("Author1254")) >(), wxS("Allowing dynamic_cast, polymorphic typeid in Constant Expressions") >  >() },
    { 1328u, RevList< Rev< 0u, Arr64< Hash(wxS("Author790")) >(), wxS("Making std::type_info::operator== constexpr") > , Rev< 1u, Arr64< Hash(wxS("Author554")) >(), wxS("Making std::type_info::operator== constexpr") >  >() },
    { 1329u, RevList< Rev< 0u, Arr64< Hash(wxS("Author984")) >(), wxS("Title793") >  >() },
    { 1330u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Title679") >  >() },
    { 1331u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1850")) >(), wxS("Title1437") > , Rev< 1u, Arr64< Hash(wxS("Author81")) >(), wxS("Title80") > , Rev< 2u, Arr64< Hash(wxS("Author2133")) >(), wxS("Title1646") >  >() },
    { 1332u, RevList< Rev< 0u, Arr64< Hash(wxS("Author877")) >(), wxS("Title703") >  >() },
    { 1333u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1896")) >(), wxS("Title1466") >  >() },
    { 1334u, RevList< Rev< 0u, Arr64< Hash(wxS("Author502")) >(), wxS("Title413") >  >() },
    { 1335u, RevList< Rev< 0u, Arr64< Hash(wxS("Author722")) >(), wxS("Title581") >  >() },
    { 1337u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1821")) >(), wxS("Title1413") >  >() },
    { 1338u, RevList< Rev< 0u, Arr64< Hash(wxS("Author809")) >(), wxS("P1338") > , Rev< 1u, Arr64< Hash(wxS("Author2079")) >(), wxS("P1338R1") >  >() },
    { 1339u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1790")) >(), wxS("Title1392") > , Rev< 1u, Arr64< Hash(wxS("Author878")) >(), wxS("Title704") >  >() },
    { 1341u, RevList< Rev< 0u, Arr64< Hash(wxS("Author315")) >(), wxS("Microsoft Word - Unifying asynchronous APIs in C++ standard library.docx") >  >() },
    { 1342u, RevList< Rev< 0u, Arr64< Hash(wxS("Author933")) >(), wxS("Microsoft Word - Unified Coroutines.docx") >  >() },
    { 1344u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1379")) >(), wxS("Title1069") > , Rev< 1u, Arr64< Hash(wxS("Author251")) >(), wxS("Title208") >  >() },
    { 1347u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1890")) >(), wxS("Modules: ADL & Internal Linkage") > , Rev< 1u, Arr64< Hash(wxS("Author1204")) >(), wxS("Modules: ADL & Internal Linkage") >  >() },
    { 1348u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("An Executor Property for Occupancy of Execution Agents") >  >() },
    { 1349u, RevList< Rev< 0u, Arr64< Hash(wxS("Vinnie Falco")) >(), wxS("Better Integration of Sender Executors") >  >() },
    { 1350u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1185")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 1351u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Zeren")) >(), wxS("Intrusive smart pointer feedback") >  >() },
    { 1353u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1940")) >(), wxS("Missing Feature Test Macros") >  >() },
    { 1354u, RevList< Rev< 0u, Arr64< Hash(wxS("Chandler Carruth")) >(), wxS("SG7 Guidelines for Review of Proposals") >  >() },
    { 1355u, RevList< Rev< 0u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Exposing a narrow contract for ceil2") > , Rev< 1u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Exposing a narrow contract for ceil2") > , Rev< 2u, Arr64< Hash(wxS("Chris Kennelly")) >(), wxS("Exposing a narrow contract for ceil2") >  >() },
    { 1356u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1032")) >(), wxS("C++ Coroutine TS Issues") >  >() },
    { 1357u, RevList< Rev< 0u, Arr64< Hash(wxS("Author617")) >(), wxS("Traits for [Un]bounded Arrays") > , Rev< 1u, Arr64< Hash(wxS("Author1978")) >(), wxS("Traits for [Un]bounded Arrays") >  >() },
    { 1358u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1582")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 1359u, RevList< Rev< 0u, Arr64< Hash(wxS("Author292")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 1360u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1300")) >(), wxS("Title1004") >  >() },
    { 1361u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Integration of chrono with text formatting") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Integration of chrono with text formatting") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Integration of chrono with text formatting") >  >() },
    { 1362u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title1338") >  >() },
    { 1364u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title247") >  >() },
    { 1365u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title1507") >  >() },
    { 1367u, RevList< Rev< 0u, Arr64< Hash(wxS("ogiroux@nvidia.com")) >(), wxS("Title1699") > , Rev< 1u, Arr64< Hash(wxS("ogiroux@nvidia.com")) >(), wxS("Title105") >  >() },
    { 1368u, RevList< Rev< 0u, Arr64< Hash(wxS("Author854")) >(), wxS("Multiplication and division of fixed-point numbers") > , Rev< 1u, Arr64< Hash(wxS("Author1457")) >(), wxS("Multiplication and division of fixed-point numbers") >  >() },
    { 1369u, RevList< Rev< 0u, Arr64< Hash(wxS("Author654")) >(), wxS("Guidelines for Formulating Library Semantics Specifications") >  >() },
    { 1370u, RevList< Rev< 0u, Arr64< Hash(wxS("Author459")) >(), wxS("Title387") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Generic numerical algorithm development with(out) <code>numeric_limits</code>") >  >() },
    { 1371u, RevList< Rev< 0u, Arr64< Hash(wxS("Sergei Murzin")) >(), wxS("Pattern Matching") > , Rev< 1u, Arr64< Hash(wxS("Sergei Murzin")) >(), wxS("Pattern Matching") > , Rev< 2u, Arr64< Hash(wxS("Sergei Murzin")) >(), wxS("Pattern Matching") > , Rev< 3u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("Pattern Matching") >  >() },
    { 1372u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("Giving <code>atomic_ref</code> implementers more flexibility by providing customization points for non-lock-free implementation") >  >() },
    { 1373u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1034")) >(), wxS("Title833") >  >() },
    { 1374u, RevList< Rev< 0u, Arr64< Hash(wxS("Author515")) >(), wxS("Resolving LWG #2307 for C++20: Consistently Explicit Constructors") >  >() },
    { 1375u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("More Constrained: Apples or Oranges? On the road to semantic constraint matching") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("More Constrained: Apples or Oranges? On the road to semantic constraint matching") > , Rev< 2u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("More Constrained: Apples or Oranges? On the road to semantic constraint matching") >  >() },
    { 1376u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Summary of freestanding evening session discussions") >  >() },
    { 1377u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Summary of Dec 2018 SG14 freestanding discussions") >  >() },
    { 1378u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::string_literal") >  >() },
    { 1380u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Ambiguity and Insecurities with Three-Way Comparison") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Ambiguity and Insecurities with Three-Way Comparison") >  >() },
    { 1381u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Reference capture of structured bindings") > , Rev< 1u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("Reference capture of structured bindings") >  >() },
    { 1382u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Title1226") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Title944") >  >() },
    { 1383u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2088")) >(), wxS("Title1620") > , Rev< 1u, Arr64< Hash(wxS("Author1828")) >(), wxS("Title1420") > , Rev< 2u, Arr64< Hash(wxS("Author385")) >(), wxS("Title330") >  >() },
    { 1385u, RevList< Rev< 0u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("[linear.algebra]R0: A proposal to add linear algebra support to the C++ standard library") > , Rev< 1u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("[linear.algebra]R1: A proposal to add linear algebra support to the C++ standard library") > , Rev< 2u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("[linear.algebra]R2: A proposal to add linear algebra support to the C++ standard library") > , Rev< 3u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("A proposal to add linear algebra support to the C++ standard library") > , Rev< 4u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("A proposal to add linear algebra support to the C++ standard library") > , Rev< 5u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("A proposal to add linear algebra support to the C++ standard library") > , Rev< 6u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("A proposal to add linear algebra support to the C++ standard library") > , Rev< 7u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("Untitled document") >  >() },
    { 1386u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1365")) >(), wxS("Title1059") > , Rev< 1u, Arr64< Hash(wxS("Author2017")) >(), wxS("Title1557") > , Rev< 2u, Arr64< Hash(wxS("Author724")) >(), wxS("Title584") >  >() },
    { 1388u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1936")) >(), wxS("Title1497") >  >() },
    { 1389u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Standing Document for SG20: Guidelines for Teaching C++ to Beginners") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Standing Document for SG20: Guidelines for Teaching C++ to Beginners") >  >() },
    { 1390u, RevList< Rev< 0u, Arr64< Hash(wxS("Mata Chochl")) >(), wxS("Suggested Reflection TS NB Resolutions") > , Rev< 1u, Arr64< Hash(wxS("Mat\u00FA\u0161 Chochl\u00EDk")) >(), wxS("Reflection TS NB comment resolutions: summary and rationale") >  >() },
    { 1391u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1388") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title768") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title185") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1216") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1621") >  >() },
    { 1392u, RevList< Rev< 0u, Arr64< Hash(wxS("Author672")) >(), wxS("Differences Between Functions and Function Templates") >  >() },
    { 1393u, RevList< Rev< 0u, Arr64< Hash(wxS("David Hollman")) >(), wxS("properties") >  >() },
    { 1394u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title846") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title251") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1639") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title117") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title599") >  >() },
    { 1395u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2124")) >(), wxS("Modules: Partitions Are Not a Panacea") >  >() },
    { 1401u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1319")) >(), wxS("Title1017") > , Rev< 1u, Arr64< Hash(wxS("Andrzej Krzemie\u0144ski")) >(), wxS("constexpr_bool_conv_r1") > , Rev< 2u, Arr64< Hash(wxS("Author917")) >(), wxS("Title738") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Narrowing contextual conversions to bool") > , Rev< 4u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Narrowing contextual conversions to bool") > , Rev< 5u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Narrowing contextual conversions to bool") >  >() },
    { 1402u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title897") >  >() },
    { 1403u, RevList< Rev< 0u, Arr64< Hash(wxS("David S")) >(), wxS("Experience Report: Implementing a Coroutines TS Frontend to an Existing Tasking Library") >  >() },
    { 1404u, RevList< Rev< 0u, Arr64< Hash(wxS("Author412")) >(), wxS("Title354") > , Rev< 1u, Arr64< Hash(wxS("Andrzej Krzemie\u0144ski")) >(), wxS("bad_alloc_r1") >  >() },
    { 1405u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("C++20 Executors are Resilient to ABI Breakage | P1405R0") >  >() },
    { 1406u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Add more std::hash specializations") > , Rev< 1u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title1236") >  >() },
    { 1407u, RevList< Rev< 0u, Arr64< Hash(wxS("Scott Schurr")) >(), wxS("P1407R0_SignedIntOverflow") > , Rev< 1u, Arr64< Hash(wxS("Scott Schurr")) >(), wxS("P1407R1_SignedIntOverflow") >  >() },
    { 1408u, RevList< Rev< 0u, Arr64< Hash(wxS("Author182")) >(), wxS("Title157") >  >() },
    { 1410u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2164")) >(), wxS("Title1665") >  >() },
    { 1411u, RevList< Rev< 0u, Arr64< Hash(wxS("Author164")) >(), wxS("Title139") >  >() },
    { 1412u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1410")) >(), wxS("Title1098") >  >() },
    { 1413u, RevList< Rev< 0u, Arr64< Hash(wxS("Author728")) >(), wxS("Title587") > , Rev< 1u, Arr64< Hash(wxS("Author508")) >(), wxS("Title419") > , Rev< 2u, Arr64< Hash(wxS("Author1140")) >(), wxS("Title907") > , Rev< 3u, Arr64< Hash(wxS("Author1966")) >(), wxS("Title1528") >  >() },
    { 1415u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title158") > , Rev< 1u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1092") >  >() },
    { 1416u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1765")) >(), wxS("Title1369") >  >() },
    { 1417u, RevList< Rev< 0u, Arr64< Hash(wxS("Author407")) >(), wxS("Title347") >  >() },
    { 1419u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title118") >  >() },
    { 1421u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1083")) >(), wxS("Title873") >  >() },
    { 1422u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2018/10/17 - 2019/01/09") >  >() },
    { 1423u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t backward compatibility remediation") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t backward compatibility remediation") > , Rev< 2u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t backward compatibility remediation") > , Rev< 3u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("char8_t backward compatibility remediation") >  >() },
    { 1424u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1275")) >(), wxS("'constexpr' feature macro concerns") > , Rev< 1u, Arr64< Hash(wxS("Author1548")) >(), wxS("'constexpr' feature macro concerns") >  >() },
    { 1425u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title380") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1011") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title561") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title600") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1689") >  >() },
    { 1426u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1500")) >(), wxS("Title1165") >  >() },
    { 1427u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1995")) >(), wxS("Title1542") >  >() },
    { 1428u, RevList< Rev< 0u, Arr64< Hash(wxS("Author787")) >(), wxS("Title639") >  >() },
    { 1429u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title25") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1650") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1550") > , Rev< 3u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title888") >  >() },
    { 1430u, RevList< Rev< 0u, Arr64< Hash(wxS("Author402")) >(), wxS("Title343") > , Rev< 1u, Arr64< Hash(wxS("Author1833")) >(), wxS("Title1423") >  >() },
    { 1433u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Title1587") >  >() },
    { 1434u, RevList< Rev< 0u, Arr64< Hash(wxS("Author584")) >(), wxS("Discussing Pointer Provenance") >  >() },
    { 1436u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("d1436r0.html") > , Rev< 1u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("d1436r1.html") > , Rev< 2u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("d1436r2.html") > , Rev< 3u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title431") >  >() },
    { 1438u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0")) >(), wxS("P1438R0 - A Rational Number Library for C++") > , Rev< 1u, Arr64< Hash(wxS("\u00A0")) >(), wxS("P1438R1 - A Rational Number Library for C++") >  >() },
    { 1439u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Charset Transcoding, Transformation, and Transliteration") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Charset Transcoding, Transformation, and Transliteration") >  >() },
    { 1440u, RevList< Rev< 0u, Arr64< Hash(wxS("Johel Guerrero")) >(), wxS("is_clamped") >  >() },
    { 1441u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1074")) >(), wxS("Title865") > , Rev< 1u, Arr64< Hash(wxS("Author1961")) >(), wxS("Title1526") >  >() },
    { 1442u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1892")) >(), wxS("A Medley of Networking TS improvements") >  >() },
    { 1443u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title762") >  >() },
    { 1444u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1153") >  >() },
    { 1445u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1670") >  >() },
    { 1446u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("html5 Reconsider the Networking TS for inclusion in C++20") >  >() },
    { 1447u, RevList< Rev< 0u, Arr64< Hash(wxS("Mata Chochl")) >(), wxS("constexpr C++ is not constexpr C") >  >() },
    { 1448u, RevList< Rev< 0u, Arr64< Hash(wxS("Nathan Burgers")) >(), wxS("Title1404") >  >() },
    { 1449u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1437")) >(), wxS("Title1117") >  >() },
    { 1450u, RevList< Rev< 0u, Arr64< Hash(wxS("Author242")) >(), wxS("P1450R0") > , Rev< 1u, Arr64< Hash(wxS("Author2179")) >(), wxS("http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r1.pdfP1450R1") > , Rev< 2u, Arr64< Hash(wxS("Author1794")) >(), wxS("http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1450r2.pdfP1450R2") > , Rev< 3u, Arr64< Hash(wxS("Author1270")) >(), wxS("P1450R3") >  >() },
    { 1452u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("On the non-uniform semantics of return-type-requirements") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("On the non-uniform semantics of return-type-requirements") > , Rev< 2u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("On the non-uniform semantics of return-type-requirements") >  >() },
    { 1453u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Modularizing the Standard Library is a Reorganization Opportunity") >  >() },
    { 1456u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Move-only views") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Move-only views") >  >() },
    { 1457u, RevList< Rev< 0u, Arr64< Hash(wxS("Author426")) >(), wxS("C++ Standard Library Issues to be moved in Kona") >  >() },
    { 1458u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1412")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author1036")) >(), wxS("C++ International Standard") >  >() },
    { 1459u, RevList< Rev< 0u, Arr64< Hash(wxS("Author245")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author409")) >(), wxS("C++ International Standard") >  >() },
    { 1460u, RevList< Rev< 0u, Arr64< Hash(wxS("Author746")) >(), wxS("Mandating the Standard Library: Clause 20") > , Rev< 1u, Arr64< Hash(wxS("Author1196")) >(), wxS("Mandating the Standard Library: Clause 20") >  >() },
    { 1462u, RevList< Rev< 0u, Arr64< Hash(wxS("Author136")) >(), wxS("Mandating the Standard Library: Clause 20 - Strings library") > , Rev< 1u, Arr64< Hash(wxS("Author611")) >(), wxS("Mandating the Standard Library: Clause 20 - Strings library") >  >() },
    { 1463u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1822")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author307")) >(), wxS("C++ International Standard") >  >() },
    { 1464u, RevList< Rev< 0u, Arr64< Hash(wxS("Author379")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author1854")) >(), wxS("C++ International Standard") >  >() },
    { 1465u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title573") >  >() },
    { 1466u, RevList< Rev< 0u, Arr64< Hash(wxS("Author902")) >(), wxS("chrono fixes") > , Rev< 1u, Arr64< Hash(wxS("Author2222")) >(), wxS("chrono fixes") > , Rev< 2u, Arr64< Hash(wxS("Author1583")) >(), wxS("chrono fixes") > , Rev< 3u, Arr64< Hash(wxS("Author1222")) >(), wxS("chrono fixes") >  >() },
    { 1467u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Extended floating-point types") > , Rev< 1u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Extended floating-point types") > , Rev< 2u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Extended floating-point types") > , Rev< 3u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types") > , Rev< 4u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") > , Rev< 5u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") > , Rev< 6u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") > , Rev< 7u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") > , Rev< 8u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") > , Rev< 9u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Extended floating-point types and standard names") >  >() },
    { 1468u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Fixed-layout floating-point type aliases") > , Rev< 1u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Fixed-layout floating-point type aliases") > , Rev< 2u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Fixed-layout floating-point type aliases") > , Rev< 3u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Fixed-layout floating-point type aliases") > , Rev< 4u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Fixed-layout floating-point type aliases") >  >() },
    { 1469u, RevList< Rev< 0u, Arr64< Hash(wxS("Sergei Murzin")) >(), wxS("Disallow _ Usage in C++20 for Pattern Matching in C++23") >  >() },
    { 1470u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title1365") >  >() },
    { 1471u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("html5 The trouble with coroutine_traits") >  >() },
    { 1472u, RevList< Rev< 0u, Arr64< Hash(wxS("SG5 minutes")) >(), wxS("Title1501") >  >() },
    { 1473u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Move-only views") >  >() },
    { 1474u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Move-only views") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Amazing Stuff") >  >() },
    { 1477u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1390")) >(), wxS("Title1080") > , Rev< 1u, Arr64< Hash(wxS("Author230")) >(), wxS("Title190") >  >() },
    { 1478u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("P1478: Byte-wise atomic memcpy") > , Rev< 1u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 2u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 3u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 4u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 5u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 6u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 7u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") > , Rev< 8u, Arr64< Hash(wxS("Hans-J. Boehm")) >(), wxS("Byte-wise atomic memcpy") >  >() },
    { 1479u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Kawulak")) >(), wxS("ostringstream wrapper") >  >() },
    { 1481u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolas Lesser")) >(), wxS("constexpr structured bindings") >  >() },
    { 1482u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("Modules Feedback") >  >() },
    { 1484u, RevList< Rev< 1u, Arr64< Hash(wxS("Peter Bindels")) >(), wxS("Title1198") >  >() },
    { 1485u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1900")) >(), wxS("Better keywords for the Coroutines TS") > , Rev< 1u, Arr64< Hash(wxS("Author1789")) >(), wxS("Better keywords for the Coroutines") >  >() },
    { 1486u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1093")) >(), wxS("Title880") > , Rev< 1u, Arr64< Hash(wxS("Author1689")) >(), wxS("Title1312") >  >() },
    { 1487u, RevList< Rev< 0u, Arr64< Hash(wxS("Author899")) >(), wxS("Title728") >  >() },
    { 1490u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemie\u0144ski")) >(), wxS("P1490r0 Contract-Related Issues") >  >() },
    { 1491u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1955")) >(), wxS("Title1520") >  >() },
    { 1492u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Title714") >  >() },
    { 1493u, RevList< Rev< 0u, Arr64< Hash(wxS("Geoffrey Romer")) >(), wxS("Title96") >  >() },
    { 1494u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1784")) >(), wxS("Partial program correctness") > , Rev< 1u, Arr64< Hash(wxS("Author415")) >(), wxS("Partial program correctness") > , Rev< 2u, Arr64< Hash(wxS("Author1139")) >(), wxS("Partial program correctness") > , Rev< 3u, Arr64< Hash(wxS("Author1209")) >(), wxS("Partial program correctness") > , Rev< 4u, Arr64< Hash(wxS("Author794")) >(), wxS("Partial program correctness") > , Rev< 5u, Arr64< Hash(wxS("Author1575")) >(), wxS("Partial program correctness") >  >() },
    { 1496u, RevList< Rev< 0u, Arr64< Hash(wxS("Alan Talbot")) >(), wxS("Formatting of negative zero") > , Rev< 1u, Arr64< Hash(wxS("Author54")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 2u, Arr64< Hash(wxS("Author1400")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    { 1498u, RevList< Rev< 0u, Arr64< Hash(wxS("Chandler Carruth")) >(), wxS("Constrained Internal Linkage for Modules") > , Rev< 1u, Arr64< Hash(wxS("Chandler Carruth")) >(), wxS("Constrained Internal Linkage for Modules") >  >() },
    { 1502u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Standard library header units for C++20") > , Rev< 1u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Standard library header units for C++20") >  >() },
    { 1505u, RevList< Rev< 0u, Arr64< Hash(wxS("Author945")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author530")) >(), wxS("C++ International Standard") >  >() },
    { 1510u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1768")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 1517u, RevList< Rev< 0u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Contract Requirements for Iterative High-Assurance Systems") >  >() },
    { 1518u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Stop overconstraining allocators in container deduction guides") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Stop overconstraining allocators in container deduction guides") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Stop overconstraining allocators in container deduction guides") >  >() },
    { 1520u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title1125") >  >() },
    { 1522u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Iterator Difference Type and Integer Overflow") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Iterator Difference Type and Integer Overflow") >  >() },
    { 1523u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Views and Size Types") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Views and Size Types") >  >() },
    { 1525u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("One-Way execute is a Poor Basis Operation") > , Rev< 1u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("One-Way is a Poor Basis Operation") >  >() },
    { 1601u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1708")) >(), wxS("Recommendations for Specifying ``Hidden Friends''") >  >() },
    { 1602u, RevList< Rev< 0u, Arr64< Hash(wxS("Author710")) >(), wxS("Make Me A Module") >  >() },
    { 1604u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("The inline keyword is not in line with the design of modules.") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("The inline keyword is not in line with the design of modules.") >  >() },
    { 1605u, RevList< Rev< 0u, Arr64< Hash(wxS("Author745")) >(), wxS("Member Layout Control") >  >() },
    { 1606u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title29") >  >() },
    { 1607u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title50") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title763") >  >() },
    { 1609u, RevList< Rev< 0u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("C++ Should Support Just-in-Time Compilation") > , Rev< 1u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("C++ Should Support Just-in-Time Compilation") > , Rev< 2u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("C++ Should Support Just-in-Time Compilation") > , Rev< 3u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("C++ Should Support Just-in-Time Compilation") >  >() },
    { 1610u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1230")) >(), wxS("D1610 Rename await_resume() to await_result().md") >  >() },
    { 1611u, RevList< Rev< 0u, Arr64< Hash(wxS("Author392")) >(), wxS("Rod-Kona-P1611") >  >() },
    { 1612u, RevList< Rev< 0u, Arr64< Hash(wxS("Author413")) >(), wxS("Relocate Endian's Specification") > , Rev< 1u, Arr64< Hash(wxS("Author2143")) >(), wxS("Relocate Endian's Specification") >  >() },
    { 1614u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("The Mothership Has Landed Adding <=> to the Library") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("The Mothership has Landed") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("The Mothership has Landed") >  >() },
    { 1616u, RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Using unconstrained template template parameters with constrained templates") > , Rev< 1u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Using unconstrained template template parameters with constrained templates") >  >() },
    { 1619u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1694") > , Rev< 1u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title291") > , Rev< 2u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1348") >  >() },
    { 1622u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1187")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author181")) >(), wxS("C++ International Standard") > , Rev< 2u, Arr64< Hash(wxS("Author337")) >(), wxS("P1622R2") > , Rev< 3u, Arr64< Hash(wxS("Author1528")) >(), wxS("P1622R3") >  >() },
    { 1624u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Resolving technical issues in parameter mapping equivalence and related problems") > , Rev< 1u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Resolving technical issues in parameter mapping equivalence and related problems") >  >() },
    { 1625u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1311")) >(), wxS("Contracts: why the house is not on fire (i.e. why the status quo is tolerable)") >  >() },
    { 1628u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title524") >  >() },
    { 1629u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Standard Text Encoding") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Transcoding the - Standard Text Encoding") >  >() },
    { 1630u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Spaceship needs a tune-up") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Spaceship needs a tune-up") >  >() },
    { 1631u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1126") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1503") >  >() },
    { 1633u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Amendments to the C++20 Synchronization Library") > , Rev< 1u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Amendments to the C++20 Synchronization Library") >  >() },
    { 1634u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Naming guidelines for modules") >  >() },
    { 1635u, RevList< Rev< 0u, Arr64< Hash(wxS("Author490")) >(), wxS("Title409") >  >() },
    { 1636u, RevList< Rev< 0u, Arr64< Hash(wxS("Lars Gullik")) >(), wxS("Formatters for library types") > , Rev< 1u, Arr64< Hash(wxS("Lars Gullik")) >(), wxS("Formatters for library types") > , Rev< 2u, Arr64< Hash(wxS("Lars Gullik")) >(), wxS("Formatters for library types") >  >() },
    { 1638u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1685") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title441") >  >() },
    { 1639u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title83") >  >() },
    { 1640u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Error size benchmarking") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Error size benchmarking: Redux") >  >() },
    { 1641u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Rewording the Status Quo") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("D1641R1.0: Freestanding Library: Rewording the Status Quo") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Rewording the Status Quo") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Rewording the Status Quo") >  >() },
    { 1642u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities]") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 4u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 5u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 6u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("P1642R6 Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 7u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("P1642R7 Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 8u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 9u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 10u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") > , Rev< 11u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Easy [utilities], [ranges], and [iterators]") >  >() },
    { 1643u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Add wait/notify to atomic_ref<T>") > , Rev< 1u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Add wait/notify to atomic_ref<T>") >  >() },
    { 1644u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Add wait/notify to atomic<shared_ptr<T>>") >  >() },
    { 1645u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Deane")) >(), wxS("constexpr for <numeric> algorithms") > , Rev< 1u, Arr64< Hash(wxS("Ben Deane")) >(), wxS("constexpr for <numeric> algorithms") >  >() },
    { 1648u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1359") > , Rev< 1u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1428") > , Rev< 2u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title266") >  >() },
    { 1649u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title447") >  >() },
    { 1650u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Output std::chrono::days with 'd' suffix") >  >() },
    { 1651u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("bind_front should not unwrap reference_wrapper") >  >() },
    { 1652u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Printf corner cases in std::format - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Printf corner cases in std::format - HackMD") >  >() },
    { 1654u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1511")) >(), wxS("ABI breakage - summary of initial comments") > , Rev< 1u, Arr64< Hash(wxS("Author511")) >(), wxS("ABI breakage - summary of initial comments") >  >() },
    { 1655u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("LEWG Omnibus Design Policy Paper") >  >() },
    { 1656u, RevList< Rev< 0u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("\"Throws: Nothing\" should be noexcept") > , Rev< 1u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("\"Throws: Nothing\" should be noexcept") > , Rev< 2u, Arr64< Hash(wxS("Agust\u00EDn Berg\u00E9")) >(), wxS("\"Throws: Nothing\" should be noexcept") >  >() },
    { 1657u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul Fee")) >(), wxS("Title257") >  >() },
    { 1658u, RevList< Rev< 0u, Arr64< Hash(wxS("Author3")) >(), wxS("Suggestions for Consensus on Executors | P1658") >  >() },
    { 1659u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("starts_with and ends_with") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("starts_with and ends_with") > , Rev< 2u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("starts_with and ends_with") > , Rev< 3u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("starts_with and ends_with") >  >() },
    { 1660u, RevList< Rev< 0u, Arr64< Hash(wxS("Jared Hoberock")) >(), wxS("A Compromise Executor Design Sketch") >  >() },
    { 1661u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Remove dedicated precalculated hash lookup interface") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Remove dedicated precalculated hash lookup interface") >  >() },
    { 1662u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1483")) >(), wxS("Title1155") >  >() },
    { 1663u, RevList< Rev< 0u, Arr64< Hash(wxS("Author146")) >(), wxS("Title125") >  >() },
    { 1664u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 5u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 6u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") > , Rev< 7u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("reconstructible_range - a concept for putting ranges back together") >  >() },
    { 1665u, RevList< Rev< 0u, Arr64< Hash(wxS("John Bandela")) >(), wxS("Title324") >  >() },
    { 1666u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2019/01/23 - 2019/05/22") >  >() },
    { 1667u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Concept-aware `noexcept` specifiers") >  >() },
    { 1668u, RevList< Rev< 0u, Arr64< Hash(wxS("Erich Keane")) >(), wxS("Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions") > , Rev< 1u, Arr64< Hash(wxS("Erich Keane")) >(), wxS("Enabling Constexpr Intrinsics By Permitting Unevaluated inline-asm in Constexpr Functions") >  >() },
    { 1669u, RevList< Rev< 0u, Arr64< Hash(wxS("Erich Keane")) >(), wxS("Callsite Based Inlining Hints: [[always_inline]] and [[never_inline]]") >  >() },
    { 1670u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Title224") >  >() },
    { 1671u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title850") >  >() },
    { 1672u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1490") >  >() },
    { 1673u, RevList< Rev< 0u, Arr64< Hash(wxS("Author576")) >(), wxS("Title467") > , Rev< 1u, Arr64< Hash(wxS("Author377")) >(), wxS("Title320") > , Rev< 2u, Arr64< Hash(wxS("Author1666")) >(), wxS("Title1296") > , Rev< 3u, Arr64< Hash(wxS("Author1570")) >(), wxS("Title1217") > , Rev< 4u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("D1673R4R4: D1673R4: A free function linear algebra interface based on the BLAS") > , Rev< 5u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("P1673R5R5: P1673R5: A free function linear algebra interface based on the BLAS") > , Rev< 6u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("P1673R6: A free function linear algebra interface based on the BLAS") > , Rev< 7u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 8u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 9u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 10u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 11u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 12u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") > , Rev< 13u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("A free function linear algebra interface based on the BLAS") >  >() },
    { 1674u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1445")) >(), wxS("Title1122") > , Rev< 1u, Arr64< Hash(wxS("Author1829")) >(), wxS("Title1421") > , Rev< 2u, Arr64< Hash(wxS("Author1997")) >(), wxS("Evolving a Standard C++ Linear Algebra Library from the BLAS") >  >() },
    { 1675u, RevList< Rev< 0u, Arr64< Hash(wxS("Author737")) >(), wxS("Title594") > , Rev< 1u, Arr64< Hash(wxS("Author353")) >(), wxS("rethrow_exception must be allowed to copy") > , Rev< 2u, Arr64< Hash(wxS("Author1629")) >(), wxS("rethrow_exception must be allowed to copy") >  >() },
    { 1676u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title1462") >  >() },
    { 1677u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Cancellation is not an Error") > , Rev< 1u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Cancellation is not an Error") > , Rev< 2u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Cancellation is serendipitous-success") >  >() },
    { 1678u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Callbacks and Composition") > , Rev< 1u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Callbacks and Composition") > , Rev< 2u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Callbacks and Composition") >  >() },
    { 1679u, RevList< Rev< 0u, Arr64< Hash(wxS("Wim Leflere")) >(), wxS("String Contains function") > , Rev< 1u, Arr64< Hash(wxS("Wim Leflere")) >(), wxS("String Contains function") > , Rev< 2u, Arr64< Hash(wxS("Wim Leflere")) >(), wxS("string contains function") > , Rev< 3u, Arr64< Hash(wxS("Wim Leflere")) >(), wxS("string contains function") >  >() },
    { 1680u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1023")) >(), wxS("p1680r0") >  >() },
    { 1681u, RevList< Rev< 0u, Arr64< Hash(wxS("Gor Nishanov")) >(), wxS("Title1116") >  >() },
    { 1682u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::to_underlying for enumerations") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::to_underlying for enumerations") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::to_underlying for enumerations") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("std::to_underlying for enumerations") >  >() },
    { 1683u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("References for Standard Library Vocabulary Types - an optional<> case study") >  >() },
    { 1684u, RevList< Rev< 0u, Arr64< Hash(wxS("David Hollman")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") > , Rev< 1u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") > , Rev< 2u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") > , Rev< 3u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") > , Rev< 4u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") > , Rev< 5u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdarray: An Owning Multidimensional Array Analog of mdspan") >  >() },
    { 1685u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Microsoft Word - P1685_replaceable_default_resource.docx") >  >() },
    { 1686u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1111")) >(), wxS("C++ International Standard") > , Rev< 1u, Arr64< Hash(wxS("Author187")) >(), wxS("C++ International Standard") > , Rev< 2u, Arr64< Hash(wxS("Author523")) >(), wxS("Mandating the Standard Library: Clause 27 - Time library") >  >() },
    { 1687u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Summary of the Tooling Study Groups Pre-Cologne Telecons on Modules Tooling Interactions") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Summary of the Tooling Study Groups Modules Ecosystem Technical Report Telecons") >  >() },
    { 1688u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Towards a C++ Ecosystem Technical Report") >  >() },
    { 1689u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1516")) >(), wxS("Format for describing dependencies of source files") > , Rev< 1u, Arr64< Hash(wxS("Author1120")) >(), wxS("Format for describing dependencies of source files") > , Rev< 2u, Arr64< Hash(wxS("Author321")) >(), wxS("Format for describing dependencies of source files") > , Rev< 3u, Arr64< Hash(wxS("Author908")) >(), wxS("Format for describing dependencies of source files") > , Rev< 4u, Arr64< Hash(wxS("Author343")) >(), wxS("Format for describing dependencies of source files") > , Rev< 5u, Arr64< Hash(wxS("Author614")) >(), wxS("Format for describing dependencies of source files") >  >() },
    { 1690u, RevList< Rev< 0u, Arr64< Hash(wxS("Xiao Shi")) >(), wxS("Refinement Proposal for P0919 Heterogeneous lookup for unordered containers") > , Rev< 1u, Arr64< Hash(wxS("Xiao Shi")) >(), wxS("Refinement Proposal for P0919 Heterogeneous lookup for unordered containers") >  >() },
    { 1696u, RevList< Rev< 0u, Arr64< Hash(wxS("Xiao Shi")) >(), wxS("Refinement proposal for P0920 Precalculated hash values in lookup") >  >() },
    { 1697u, RevList< Rev< 0u, Arr64< Hash(wxS("Botond Ballo")) >(), wxS("Require a diagnostic for \"declaration changes meaning\"") >  >() },
    { 1700u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Audience Tables") >  >() },
    { 1701u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1192")) >(), wxS("Inline Namespaces: Fragility Bites") > , Rev< 1u, Arr64< Hash(wxS("Author264")) >(), wxS("Inline Namespaces: Fragility Bites") > , Rev< 2u, Arr64< Hash(wxS("Author808")) >(), wxS("Inline Namespaces: Fragility Bites") >  >() },
    { 1702u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title783") >  >() },
    { 1703u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1029")) >(), wxS("Recognizing Header Unit Imports Requires Full Preprocessing") > , Rev< 1u, Arr64< Hash(wxS("Author1160")) >(), wxS("Recognizing Header Unit Imports Requires Full Preprocessing") >  >() },
    { 1704u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("axiom_level_contract_statements") >  >() },
    { 1705u, RevList< Rev< 0u, Arr64< Hash(wxS("Shafik Yaghmour")) >(), wxS("Enumerating Core Undefined Behavior") > , Rev< 1u, Arr64< Hash(wxS("Shafik Yaghmour")) >(), wxS("Enumerating Core Undefined Behavior") >  >() },
    { 1706u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1435") > , Rev< 1u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title631") > , Rev< 2u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title735") > , Rev< 3u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Programming Language Vulnerabilities for Safety Critical C++") >  >() },
    { 1708u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title1422") > , Rev< 1u, Arr64< Hash(wxS("Author2150")) >(), wxS("Title1656") > , Rev< 2u, Arr64< Hash(wxS("Author156")) >(), wxS("Title132") > , Rev< 3u, Arr64< Hash(wxS("Author345")) >(), wxS("Title289") > , Rev< 4u, Arr64< Hash(wxS("Author942")) >(), wxS("Title760") > , Rev< 5u, Arr64< Hash(wxS("Author73")) >(), wxS("Title75") > , Rev< 6u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title1321") > , Rev< 7u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title442") > , Rev< 8u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title1058") > , Rev< 9u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title1099") >  >() },
    { 1709u, RevList< Rev< 0u, Arr64< Hash(wxS("Phillip Ratzloff")) >(), wxS("Title538") > , Rev< 1u, Arr64< Hash(wxS("Phillip Ratzloff")) >(), wxS("Title451") > , Rev< 2u, Arr64< Hash(wxS("Phillip Ratzloff")) >(), wxS("Title946") > , Rev< 3u, Arr64< Hash(wxS("Phillip Ratzloff")) >(), wxS("Graph Proposal") > , Rev< 4u, Arr64< Hash(wxS("Author1161")) >(), wxS("Title921") > , Rev< 5u, Arr64< Hash(wxS("Author1194")) >(), wxS("Title936") >  >() },
    { 1710u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1880")) >(), wxS("Adding a global contract assumption mode") >  >() },
    { 1711u, RevList< Rev< 0u, Arr64< Hash(wxS("Author37")) >(), wxS("Title33") >  >() },
    { 1713u, RevList< Rev< 0u, Arr64< Hash(wxS("Author404")) >(), wxS("Title345") >  >() },
    { 1714u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1725")) >(), wxS("NTTP are incomplete without float, double, and long double!") > , Rev< 1u, Arr64< Hash(wxS("Author1830")) >(), wxS("NTTP are incomplete without float, double, and long double!") >  >() },
    { 1715u, RevList< Rev< 0u, Arr64< Hash(wxS("Author400")) >(), wxS("Loosen restrictions on \"_t\" typedefs.") > , Rev< 1u, Arr64< Hash(wxS("Author2170")) >(), wxS("Loosen restrictions on \"_t\" typedefs.") >  >() },
    { 1716u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("ranges compare algorithm are over-constrained") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("ranges compare algorithm are over-constrained") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("ranges compare algorithm are over-constrained") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("ranges compare algorithm are over-constrained") >  >() },
    { 1717u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title750") >  >() },
    { 1718u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1011")) >(), wxS("Mandating the Standard Library: Clause 25") > , Rev< 1u, Arr64< Hash(wxS("Author334")) >(), wxS("Mandating the Standard Library: Clause 25") > , Rev< 2u, Arr64< Hash(wxS("Author1979")) >(), wxS("Mandating the Standard Library: Clause 25") >  >() },
    { 1719u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1173")) >(), wxS("Mandating the Standard Library: Clause 26") > , Rev< 1u, Arr64< Hash(wxS("Author2171")) >(), wxS("Mandating the Standard Library: Clause 26") > , Rev< 2u, Arr64< Hash(wxS("Author32")) >(), wxS("Mandating the Standard Library: Clause 26") >  >() },
    { 1720u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1108")) >(), wxS("Mandating the Standard Library: Clause 28") > , Rev< 1u, Arr64< Hash(wxS("Author356")) >(), wxS("Mandating the Standard Library: Clause 28") > , Rev< 2u, Arr64< Hash(wxS("Author79")) >(), wxS("Mandating the Standard Library: Clause 28") >  >() },
    { 1721u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1687")) >(), wxS("Mandating the Standard Library: Clause 29") > , Rev< 1u, Arr64< Hash(wxS("Author2120")) >(), wxS("Mandating the Standard Library: Clause 29") > , Rev< 2u, Arr64< Hash(wxS("Author202")) >(), wxS("Mandating the Standard Library: Clause 29") >  >() },
    { 1722u, RevList< Rev< 0u, Arr64< Hash(wxS("Author440")) >(), wxS("Mandating the Standard Library: Clause 25") > , Rev< 1u, Arr64< Hash(wxS("Author92")) >(), wxS("Mandating the Standard Library: Clause 30") > , Rev< 2u, Arr64< Hash(wxS("Author2193")) >(), wxS("Mandating the Standard Library: Clause 30") >  >() },
    { 1723u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1787")) >(), wxS("Mandating the Standard Library: Clause 25") > , Rev< 1u, Arr64< Hash(wxS("Author128")) >(), wxS("Mandating the Standard Library: Clause 31") > , Rev< 2u, Arr64< Hash(wxS("Author386")) >(), wxS("Mandating the Standard Library: Clause 31") >  >() },
    { 1724u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1327")) >(), wxS("C++ Standard Library Issues to be moved in Cologne") >  >() },
    { 1725u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Modular Topic Design") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Modular Topic Design") >  >() },
    { 1726u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1044")) >(), wxS("Title836") > , Rev< 1u, Arr64< Hash(wxS("Author1771")) >(), wxS("Title1377") > , Rev< 2u, Arr64< Hash(wxS("Author714")) >(), wxS("Title576") > , Rev< 3u, Arr64< Hash(wxS("Author1624")) >(), wxS("Title1258") > , Rev< 4u, Arr64< Hash(wxS("Author305")) >(), wxS("Title259") > , Rev< 5u, Arr64< Hash(wxS("Paul E")) >(), wxS("P1726R5 Pointer lifetime-end zap") >  >() },
    { 1727u, RevList< Rev< 0u, Arr64< Hash(wxS("Denis Yaroshevskiy")) >(), wxS("Issues with current flat_map proposal") >  >() },
    { 1728u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrzej Krzemie\u0144ski")) >(), wxS("contracts_explained") >  >() },
    { 1729u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Parsing") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Text Parsing") > , Rev< 2u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Text Parsing") > , Rev< 3u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Text Parsing") > , Rev< 4u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Text Parsing") > , Rev< 5u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Text Parsing") >  >() },
    { 1730u, RevList< Rev< 0u, Arr64< Hash(wxS("Author849")) >(), wxS("Title668") >  >() },
    { 1731u, RevList< Rev< 0u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Microsoft Word - P1731R0_memory_helpers.docx") > , Rev< 1u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Title1390") >  >() },
    { 1732u, RevList< Rev< 0u, Arr64< Hash(wxS("Author48")) >(), wxS("Title51") > , Rev< 1u, Arr64< Hash(wxS("Author210")) >(), wxS("Title174") > , Rev< 2u, Arr64< Hash(wxS("Author1211")) >(), wxS("Title950") > , Rev< 3u, Arr64< Hash(wxS("Author27")) >(), wxS("Title21") > , Rev< 4u, Arr64< Hash(wxS("Author1215")) >(), wxS("Title952") >  >() },
    { 1733u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("User-friendly and Evolution-friendly Reflection: A Compromise") >  >() },
    { 1734u, RevList< Rev< 0u, Arr64< Hash(wxS("Author449")) >(), wxS("Title378") >  >() },
    { 1735u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title682") >  >() },
    { 1736u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title774") >  >() },
    { 1737u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1614") >  >() },
    { 1738u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("The Executor Concept Hierarchy Needs a Single Root") >  >() },
    { 1739u, RevList< Rev< 0u, Arr64< Hash(wxS("Author390")) >(), wxS("Title333") > , Rev< 1u, Arr64< Hash(wxS("Author606")) >(), wxS("Title496") > , Rev< 2u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Avoid template bloat for forwarding ranges in combination with subrange-y view adaptors.") > , Rev< 3u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Avoid template bloat for safe_ranges in combination with subrange-y view adaptors.") > , Rev< 4u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Avoid template bloat for s in combination with subrange-y view adaptors.") >  >() },
    { 1743u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1382")) >(), wxS("Title1074") >  >() },
    { 1744u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1593")) >(), wxS("Title1233") >  >() },
    { 1745u, RevList< Rev< 0u, Arr64< Hash(wxS("Author254")) >(), wxS("Title214") >  >() },
    { 1746u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Powell")) >(), wxS("Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio") > , Rev< 1u, Arr64< Hash(wxS("Richard Powell")) >(), wxS("D1746R1: Feedback on <a data-link-type=\"biblio\" href=\"#biblio-p1386r2\">[P1386R2]</a> std::audio") >  >() },
    { 1747u, RevList< Rev< 0u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Dont use `char8_t` and `std::u8string` yet in P1389") >  >() },
    { 1748u, RevList< Rev< 0u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Fill in [delay.cpp] TODO in P1389") > , Rev< 1u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Fill in [delay.cpp] TODO in P1389") >  >() },
    { 1749u, RevList< Rev< 0u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Access control for reflection") >  >() },
    { 1750u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1697")) >(), wxS("D1750R0 A Proposal to Add Process Management to the C++ Standard Library") > , Rev< 1u, Arr64< Hash(wxS("Author503")) >(), wxS("P1750R1 A Proposal to Add Process Management to the C++ Standard Library") >  >() },
    { 1751u, RevList< Rev< 0u, Arr64< Hash(wxS("Author973")) >(), wxS("p1751r0") >  >() },
    { 1753u, RevList< Rev< 0u, Arr64< Hash(wxS("Author682")) >(), wxS("Name Lookup Should ``Find the First Thing of That Name''") >  >() },
    { 1754u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1672") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title310") >  >() },
    { 1759u, RevList< Rev< 0u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handle from file streams") > , Rev< 1u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handle from file streams") > , Rev< 2u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handle from file streams") > , Rev< 3u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handles and file streams") > , Rev< 4u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handles and file streams") > , Rev< 5u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handles and file streams") > , Rev< 6u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Native handles and file streams") >  >() },
    { 1760u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2160")) >(), wxS("Title1662") >  >() },
    { 1761u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title156") >  >() },
    { 1762u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title967") >  >() },
    { 1764u, RevList< Rev< 0u, Arr64< Hash(wxS("Tony Van")) >(), wxS("Title543") >  >() },
    { 1766u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Mitigating minor modules maladies") > , Rev< 1u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Mitigating minor modules maladies") >  >() },
    { 1767u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Packaging C++ Modules") >  >() },
    { 1768u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title97") >  >() },
    { 1769u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2175")) >(), wxS("The \"default\" contract build-level and continuation-mode should be implementation-defined") >  >() },
    { 1770u, RevList< Rev< 0u, Arr64< Hash(wxS("Author848")) >(), wxS("On vectors, tensors, matrices, and hypermatrices") >  >() },
    { 1771u, RevList< Rev< 0u, Arr64< Hash(wxS("Author676")) >(), wxS("Title548") > , Rev< 1u, Arr64< Hash(wxS("Author399")) >(), wxS("Title340") >  >() },
    { 1772u, RevList< Rev< 0u, Arr64< Hash(wxS("Author557")) >(), wxS("P1772R0") > , Rev< 1u, Arr64< Hash(wxS("Author2211")) >(), wxS("P1772R1") >  >() },
    { 1773u, RevList< Rev< 0u, Arr64< Hash(wxS("Author424")) >(), wxS("Title363") >  >() },
    { 1774u, RevList< Rev< 0u, Arr64< Hash(wxS("Author707")) >(), wxS("Title570") > , Rev< 1u, Arr64< Hash(wxS("Author367")) >(), wxS("Title313") > , Rev< 2u, Arr64< Hash(wxS("Author853")) >(), wxS("Title672") > , Rev< 3u, Arr64< Hash(wxS("Author599")) >(), wxS("Title491") > , Rev< 4u, Arr64< Hash(wxS("Author2075")) >(), wxS("Title1607") > , Rev< 5u, Arr64< Hash(wxS("Author852")) >(), wxS("Title670") > , Rev< 6u, Arr64< Hash(wxS("Author2213")) >(), wxS("Title1693") > , Rev< 7u, Arr64< Hash(wxS("Author110")) >(), wxS("Title98") > , Rev< 8u, Arr64< Hash(wxS("Author907")) >(), wxS("Title733") >  >() },
    { 1779u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1366")) >(), wxS("ABI isolation for member functions") > , Rev< 1u, Arr64< Hash(wxS("Author882")) >(), wxS("ABI isolation for member functions") > , Rev< 2u, Arr64< Hash(wxS("Author1262")) >(), wxS("ABI isolation for member functions") > , Rev< 3u, Arr64< Hash(wxS("Author1723")) >(), wxS("ABI isolation for member functions") >  >() },
    { 1780u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Batty")) >(), wxS("D1780R0: Modular Relaxed Dependencies: A new approach to the Out-Of-Thin-Air Problem") >  >() },
    { 1782u, RevList< Rev< 0u, Arr64< Hash(wxS("Author382")) >(), wxS("Local contract restrictions") > , Rev< 1u, Arr64< Hash(wxS("Author290")) >(), wxS("Local contract restrictions") >  >() },
    { 1786u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1612")) >(), wxS("Title1247") >  >() },
    { 1787u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1695")) >(), wxS("Declarations and where to find them") > , Rev< 1u, Arr64< Hash(wxS("Author1922")) >(), wxS("Declarations and where to find them") > , Rev< 2u, Arr64< Hash(wxS("Author430")) >(), wxS("Declarations and where to find them") > , Rev< 3u, Arr64< Hash(wxS("Author1005")) >(), wxS("Declarations and where to find them") > , Rev< 4u, Arr64< Hash(wxS("Author394")) >(), wxS("Declarations and where to find them") > , Rev< 5u, Arr64< Hash(wxS("Author194")) >(), wxS("Declarations and where to find them") > , Rev< 6u, Arr64< Hash(wxS("Author1556")) >(), wxS("Declarations and where to find them") >  >() },
    { 1788u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1578")) >(), wxS("Title1223") > , Rev< 2u, Arr64< Hash(wxS("Author1393")) >(), wxS("Title1082") > , Rev< 3u, Arr64< Hash(wxS("Author776")) >(), wxS("Title633") >  >() },
    { 1789u, RevList< Rev< 0u, Arr64< Hash(wxS("Author328")) >(), wxS("Library Support for Expansion Statements") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Library Support for Expansion Statements") >  >() },
    { 1790u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to enable better DynamicBuffer composition") > , Rev< 1u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to enable better DynamicBuffer composition") >  >() },
    { 1791u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Evolution of the P0443 Unified Executors Proposal to accommodate new requirements") >  >() },
    { 1792u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Simplifying and generalising Sender/Receiver for asynchronous operations") >  >() },
    { 1793u, RevList< Rev< 0u, Arr64< Hash(wxS("Author965")) >(), wxS("Proposal Template") >  >() },
    { 1795u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("p1795r0.html") > , Rev< 1u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("d1795r1.html") > , Rev< 2u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title243") >  >() },
    { 1796u, RevList< Rev< 0u, Arr64< Hash(wxS("Author660")) >(), wxS("Effective types: examples (P1796R0)") >  >() },
    { 1797u, RevList< Rev< 0u, Arr64< Hash(wxS("Author765")) >(), wxS("C/C++ Memory Object Model Papers - Introduction (P1797R0)") >  >() },
    { 1798u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title986") >  >() },
    { 1801u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1241") >  >() },
    { 1803u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("packexpr(args, I) -- compile-time friendly pack inspection") >  >() },
    { 1807u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title38") >  >() },
    { 1808u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Contra P0339 \"`polymorphic_allocator<>` as a vocabulary type\"") >  >() },
    { 1810u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("A Quick Look at What P1754 Will Change") >  >() },
    { 1811u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Relaxing redefinition restrictions for re-exportation robustness") >  >() },
    { 1812u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1535")) >(), wxS("Title1190") >  >() },
    { 1813u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1715")) >(), wxS("A Concept Design for the Numeric Algorithms") >  >() },
    { 1814u, RevList< Rev< 0u, Arr64< Hash(wxS("Author336")) >(), wxS("Wording for Class Template Argument Deduction for Alias Templates") >  >() },
    { 1815u, RevList< Rev< 0u, Arr64< Hash(wxS("Author763")) >(), wxS("Translation-unit-local entities") > , Rev< 1u, Arr64< Hash(wxS("Author1027")) >(), wxS("Translation-unit-local entities") > , Rev< 2u, Arr64< Hash(wxS("Author178")) >(), wxS("Translation-unit-local entities") >  >() },
    { 1816u, RevList< Rev< 0u, Arr64< Hash(wxS("Author980")) >(), wxS("Title791") >  >() },
    { 1818u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Narrowing and Widening Conversions") > , Rev< 1u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("Narrowing and Widening Conversions") >  >() },
    { 1819u, RevList< Rev< 0u, Arr64< Hash(wxS("Author173")) >(), wxS("Untitled") >  >() },
    { 1820u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("p1820r0.html") >  >() },
    { 1823u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1816")) >(), wxS("d1823r0") >  >() },
    { 1825u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title314") >  >() },
    { 1830u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("Title514") > , Rev< 1u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("Title1575") >  >() },
    { 1831u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>: library") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Deprecating <code>volatile</code>: library") >  >() },
    { 1832u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1587")) >(), wxS("p1832r0") >  >() },
    { 1837u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Remove NTTPs of class type from C++20") >  >() },
    { 1838u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Title1479") >  >() },
    { 1839u, RevList< Rev< 0u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Accessing Object Representations") > , Rev< 1u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Accessing Object Representations") > , Rev< 2u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Accessing Object Representations") > , Rev< 3u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Accessing Object Representations") > , Rev< 4u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Accessing Object Representations") > , Rev< 5u, Arr64< Hash(wxS("Author1396")) >(), wxS("Title1087") > , Rev< 6u, Arr64< Hash(wxS("Timur Doumler")) >(), wxS("Accessing object representations") > , Rev< 7u, Arr64< Hash(wxS("Timur Doumler")) >(), wxS("Accessing object representations") >  >() },
    { 1840u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2106")) >(), wxS("Rod-Cologne") >  >() },
    { 1841u, RevList< Rev< 0u, Arr64< Hash(wxS("Author186")) >(), wxS("Wording for Individually Specializable Numeric Traits") > , Rev< 1u, Arr64< Hash(wxS("Author1442")) >(), wxS("Wording for Individually Specializable Numeric Traits") > , Rev< 2u, Arr64< Hash(wxS("Author497")) >(), wxS("Wording for Individually Specializable Numeric Traits") > , Rev< 3u, Arr64< Hash(wxS("Author1975")) >(), wxS("Wording for Individually Specializable Numeric Traits") >  >() },
    { 1842u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1598")) >(), wxS("Generalized Module (Dependency?) Mapper") >  >() },
    { 1843u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1526")) >(), wxS("comparison and hasher requirements") >  >() },
    { 1844u, RevList< Rev< 0u, Arr64< Hash(wxS("Author240")) >(), wxS("Enhancement of regex") > , Rev< 1u, Arr64< Hash(wxS("Author1567")) >(), wxS("Enhancement of regex") >  >() },
    { 1845u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2019-09-21 Denver Tooling Meeting") >  >() },
    { 1846u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1008")) >(), wxS("p1846r0") >  >() },
    { 1847u, RevList< Rev< 0u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1847R0.doc") > , Rev< 1u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1847R1.doc") > , Rev< 2u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1847R2.doc") > , Rev< 3u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1847R3.doc") > , Rev< 4u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1847R4.doc") >  >() },
    { 1848u, RevList< Rev< 0u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - P1848R0.doc") >  >() },
    { 1851u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("Guidelines For snake_case Concept Naming") >  >() },
    { 1854u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1443") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title869") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title602") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title58") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1131") >  >() },
    { 1855u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0Ben Craig")) >(), wxS("Make <compare> freestanding") >  >() },
    { 1856u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1458")) >(), wxS("P1856R0") >  >() },
    { 1857u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("<code>remove.dots.in.module.names</code>") > , Rev< 1u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Modules Dependency Discovery") > , Rev< 2u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Modules Dependency Discovery") > , Rev< 3u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Modules Dependency Discovery") >  >() },
    { 1858u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Generalized pack declaration and usage") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Generalized pack declaration and usage") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Generalized pack declaration and usage") >  >() },
    { 1859u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Standard terminology character sets and encodings") >  >() },
    { 1860u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("C++ Networking Must Be Secure By Default") >  >() },
    { 1861u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("D1861R0: Secure Connections in Networking TS") > , Rev< 1u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("Secure Networking in C++") >  >() },
    { 1862u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title301") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1344") >  >() },
    { 1863u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1285")) >(), wxS("Title996") > , Rev< 1u, Arr64< Hash(wxS("Author1884")) >(), wxS("Title1461") >  >() },
    { 1864u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Defining Target Tuplets") >  >() },
    { 1865u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Add max() to latch and barrier") > , Rev< 1u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Add max() to latch and barrier") >  >() },
    { 1868u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("width: clarifying units of width and precision in std::format") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("width: clarifying units of width and precision in std::format") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("width: clarifying units of width and precision in std::format") >  >() },
    { 1869u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Rename 'condition_variable_any' interruptible wait methods") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Rename 'condition_variable_any' interruptible wait methods") >  >() },
    { 1870u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("forwarding-range<T> is too subtle") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("forwarding-range<T> is too subtle") >  >() },
    { 1871u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Should concepts be enabled or disabled?") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Concept traits should be named after concepts") >  >() },
    { 1872u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1486") >  >() },
    { 1873u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("<code>remove.dots.in.module.names</code>") > , Rev< 1u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("<code>remove.dots.in.module.names</code>") >  >() },
    { 1874u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Dynamic Initialization Order of Non-Local Variables in Modules") > , Rev< 1u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Dynamic Initialization Order of Non-Local Variables in Modules") >  >() },
    { 1875u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spear")) >(), wxS("Title1604") > , Rev< 1u, Arr64< Hash(wxS("Michael Spear")) >(), wxS("Title689") > , Rev< 2u, Arr64< Hash(wxS("Michael Spear")) >(), wxS("Title650") >  >() },
    { 1876u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1530")) >(), wxS("All The Module Names") > , Rev< 1u, Arr64< Hash(wxS("Author2087")) >(), wxS("All The Module Names") >  >() },
    { 1877u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Saving Private Ranges: Recovering Lost Information from Comparison and Predicate Algorithms") >  >() },
    { 1878u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Constraining Readable Types") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Constraining Readable Types") >  >() },
    { 1879u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Please Don't Rewrite My String Literals") >  >() },
    { 1880u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("uNstring Arguments Shall Be UTF-N Encoded") >  >() },
    { 1881u, RevList< Rev< 0u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("Epochs: a backward-compatible language evolution mechanism") > , Rev< 1u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("Epochs: a backward-compatible language evolution mechanism") >  >() },
    { 1882u, RevList< Rev< 0u, Arr64< Hash(wxS("Noel Tchidjo")) >(), wxS("Title604") >  >() },
    { 1883u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title942") > , Rev< 1u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title797") > , Rev< 2u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title1574") >  >() },
    { 1884u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1463")) >(), wxS("Private Module Fragment: An Inconsistent Boundary") >  >() },
    { 1885u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title849") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1206") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title437") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title209") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title558") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1590") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title965") > , Rev< 7u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1044") > , Rev< 8u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title794") > , Rev< 9u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1289") > , Rev< 10u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1239") > , Rev< 11u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title694") > , Rev< 12u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1410") >  >() },
    { 1886u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Error speed benchmarking") >  >() },
    { 1887u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title169") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1372") >  >() },
    { 1888u, RevList< Rev< 0u, Arr64< Hash(wxS("Matti Rintala")) >(), wxS("Title1160") >  >() },
    { 1889u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1428")) >(), wxS("C++ Numerics Work In Progress") > , Rev< 1u, Arr64< Hash(wxS("Author97")) >(), wxS("C++ Numerics Work In Progress") >  >() },
    { 1890u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1109")) >(), wxS("C++ Numerics Work In Progress Issues") >  >() },
    { 1891u, RevList< Rev< 0u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("Title53") >  >() },
    { 1892u, RevList< Rev< 0u, Arr64< Hash(wxS("Author374")) >(), wxS("Title317") > , Rev< 1u, Arr64< Hash(wxS("Author2229")) >(), wxS("Title1706") >  >() },
    { 1893u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1053") >  >() },
    { 1894u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1688") >  >() },
    { 1895u, RevList< Rev< 0u, Arr64< Hash(wxS("Author689")) >(), wxS("Title555") >  >() },
    { 1896u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2019/06/12 - 2019/09/25") >  >() },
    { 1897u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Towards C++23 executors: A proposal for an initial set of algorithms") > , Rev< 1u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Towards C++23 executors: A proposal for an initial set of algorithms") > , Rev< 2u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Towards C++23 executors: A proposal for an initial set of algorithms") > , Rev< 3u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Towards C++23 executors: A proposal for an initial set of algorithms") >  >() },
    { 1898u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Forward progress delegation for executors") > , Rev< 1u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Forward progress delegation for executors") >  >() },
    { 1899u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1678")) >(), wxS("strideview") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`stride_view`") > , Rev< 2u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("stride_view") > , Rev< 3u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("stride_view") >  >() },
    { 1900u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Concepts-Adjacent Problems") >  >() },
    { 1901u, RevList< Rev< 0u, Arr64< Hash(wxS("Daryl Haresign")) >(), wxS("P1901R0 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers") > , Rev< 1u, Arr64< Hash(wxS("Daryl Haresign")) >(), wxS("P1901R1 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers") > , Rev< 2u, Arr64< Hash(wxS("Daryl Haresign")) >(), wxS("P1901R2 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers") >  >() },
    { 1902u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Missing feature-test macros 2018-2019") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Missing feature-test macros 2017-2019") >  >() },
    { 1905u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title999") >  >() },
    { 1906u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1571")) >(), wxS("Title1219") >  >() },
    { 1907u, RevList< Rev< 0u, Arr64< Hash(wxS("Author475")) >(), wxS("Inconsistencies with non-type template parameters") > , Rev< 1u, Arr64< Hash(wxS("Author1293")) >(), wxS("Inconsistencies with non-type template parameters") >  >() },
    { 1908u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title379") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1583") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1180") >  >() },
    { 1909u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1149") >  >() },
    { 1910u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1442") >  >() },
    { 1911u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1189") >  >() },
    { 1912u, RevList< Rev< 0u, Arr64< Hash(wxS("Author873")) >(), wxS("Title700") > , Rev< 1u, Arr64< Hash(wxS("Author340")) >(), wxS("Title286") >  >() },
    { 1913u, RevList< Rev< 0u, Arr64< Hash(wxS("Author140")) >(), wxS("Comments on Audio Devices") >  >() },
    { 1914u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1510")) >(), wxS("P1914R0") >  >() },
    { 1915u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Expected Feedback from simd in the Parallelism TS 2 [P1915R0]") >  >() },
    { 1916u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Title106") >  >() },
    { 1917u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1706")) >(), wxS("C++ Standard Library Issues to be moved in Belfast") >  >() },
    { 1919u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title255") > , Rev< 1u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title396") > , Rev< 2u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title554") > , Rev< 3u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1335") >  >() },
    { 1920u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Title1259") >  >() },
    { 1921u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title508") >  >() },
    { 1922u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title908") >  >() },
    { 1923u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title853") >  >() },
    { 1924u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title801") >  >() },
    { 1925u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title551") >  >() },
    { 1926u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title1668") >  >() },
    { 1927u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title244") >  >() },
    { 1928u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Merge data-parallel types from the Parallelism TS 2 [P1928R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Merge data-parallel types from the Parallelism TS 2 [P1928R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Merge data-parallel types from the Parallelism TS 2 [P1928R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Merge data-parallel types from the Parallelism TS 2 [P1928R3]") > , Rev< 4u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R4]") > , Rev< 5u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R5]") > , Rev< 6u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R6]") > , Rev< 7u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R7]") > , Rev< 8u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R8]") > , Rev< 9u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R9]") > , Rev< 10u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R10]") > , Rev< 11u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R11]") > , Rev< 12u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R12]") > , Rev< 13u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R13]") > , Rev< 14u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R14]") > , Rev< 15u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd merge data-parallel types from the Parallelism TS 2 [P1928R15]") >  >() },
    { 1929u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexander Zaitsev")) >(), wxS("Title307") >  >() },
    { 1930u, RevList< Rev< 0u, Arr64< Hash(wxS("Author807")) >(), wxS("Title648") >  >() },
    { 1932u, RevList< Rev< 0u, Arr64< Hash(wxS("Pavel Dyakov")) >(), wxS("Title711") >  >() },
    { 1933u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1662")) >(), wxS("Suggestions for bulk_execute | P1933") >  >() },
    { 1934u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Amazing Stuff") >  >() },
    { 1935u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("A C++ Approach to Physical Units") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("A C++ Approach to Physical Units") > , Rev< 2u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("A C++ Approach to Physical Units") >  >() },
    { 1936u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("Title1294") >  >() },
    { 1937u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Fixing inconsistencies between `constexpr` and `consteval` functions") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("Fixing inconsistencies between `constexpr` and `consteval` functions") > , Rev< 2u, Arr64< Hash(wxS("David Stone")) >(), wxS("Fixing inconsistencies between `constexpr` and `consteval` functions") >  >() },
    { 1938u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("if consteval") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("if-consteval") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`if consteval`") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`if consteval`") >  >() },
    { 1943u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("Networking TS changes to improve completion token flexibility and performance") >  >() },
    { 1944u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1088")) >(), wxS("Title875") > , Rev< 1u, Arr64< Hash(wxS("Author677")) >(), wxS("Title549") >  >() },
    { 1945u, RevList< Rev< 0u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Making More Objects Contiguous") >  >() },
    { 1946u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Allow defaulting comparisons by value") >  >() },
    { 1947u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2121")) >(), wxS("Title1640") >  >() },
    { 1948u, RevList< Rev< 0u, Arr64< Hash(wxS("Author236")) >(), wxS("Title195") >  >() },
    { 1949u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 2u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 3u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 4u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 5u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 6u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") > , Rev< 7u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("C++ Identifier Syntax using Unicode Standard Annex 31") >  >() },
    { 1950u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan B")) >(), wxS("<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++") > , Rev< 1u, Arr64< Hash(wxS("Jonathan B")) >(), wxS("<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++") > , Rev< 2u, Arr64< Hash(wxS("Jonathan B")) >(), wxS("<code>indirect_value</code>: A Free-Store-Allocated Value Type For C++") >  >() },
    { 1951u, RevList< Rev< 0u, Arr64< Hash(wxS("Logan R")) >(), wxS("Default Arguments for pair's Forwarding Constructor") > , Rev< 1u, Arr64< Hash(wxS("Logan R")) >(), wxS("Default Arguments for pair's Forwarding Constructor") >  >() },
    { 1953u, RevList< Rev< 0u, Arr64< Hash(wxS("Author997")) >(), wxS("Title806") >  >() },
    { 1955u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1802")) >(), wxS("Top Level Is Constant Evaluated") > , Rev< 1u, Arr64< Hash(wxS("Author428")) >(), wxS("Top Level Is Constant Evaluated") >  >() },
    { 1956u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1282")) >(), wxS("P1956R0") > , Rev< 1u, Arr64< Hash(wxS("Author921")) >(), wxS("P1956R1") >  >() },
    { 1957u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Converting from T* to bool should be considered narrowing (re: US 212) - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Converting from T* to bool should be considered narrowing (re: US 212) - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Converting from T* to bool should be considered narrowing (re: US 212) - HackMD") >  >() },
    { 1958u, RevList< Rev< 0u, Arr64< Hash(wxS("Lawrence Crowl")) >(), wxS("C++ Concurrent Buffer Queue") >  >() },
    { 1959u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Remove std::weak_equality and std::strong_equality") >  >() },
    { 1960u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("NB Comment Changes Reviewed by SG1") >  >() },
    { 1961u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Harmonizing the definitions of total order for pointers") >  >() },
    { 1962u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1971")) >(), wxS("Title1533") >  >() },
    { 1963u, RevList< Rev< 0u, Arr64< Hash(wxS("Author49")) >(), wxS("P1963R0 Fixing US 313") >  >() },
    { 1964u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Casting convertible_to<bool> considered harmful") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Wording for boolean-testable") > , Rev< 2u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Wording for boolean-testable") >  >() },
    { 1965u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1805")) >(), wxS("Blanket Wording for Specifying ``Hidden Friends''") >  >() },
    { 1967u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1700")) >(), wxS("Preprocessor embed") > , Rev< 1u, Arr64< Hash(wxS("Author433")) >(), wxS("Preprocessor embed - Binary Resource Inclusion") > , Rev< 2u, Arr64< Hash(wxS("Author295")) >(), wxS("Preprocessor embed - Binary Resource Inclusion") > , Rev< 3u, Arr64< Hash(wxS("Author680")) >(), wxS("Preprocessor embed - Binary Resource Inclusion | r4") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 5u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 6u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 7u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 8u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 9u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 10u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 11u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 12u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 13u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") > , Rev< 14u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed - a scannable, tooling-friendly binary resource inclusion mechanism") >  >() },
    { 1968u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2230")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 1969u, RevList< Rev< 0u, Arr64< Hash(wxS("Author266")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 1970u, RevList< Rev< 0u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Consistency for size() functions") > , Rev< 1u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Consistency for size() functions") > , Rev< 2u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("Consistency for size() functions: Add ranges::ssize") >  >() },
    { 1971u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1383")) >(), wxS("Core NB Comment Resolutions") >  >() },
    { 1972u, RevList< Rev< 0u, Arr64< Hash(wxS("Author175")) >(), wxS("US105 Check satisfaction of constraints for non-templates when forming pointer to function") >  >() },
    { 1973u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2145")) >(), wxS("Rename _default_init Functions") > , Rev< 1u, Arr64< Hash(wxS("Author528")) >(), wxS("Rename _default_init Functions") >  >() },
    { 1974u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Snyder")) >(), wxS("Non-transient constexpr allocation using") >  >() },
    { 1975u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1568")) >(), wxS("Fixing the wording of parenthesized aggregate-initialization") >  >() },
    { 1976u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixed-size 'span' construction from dynamic-size range") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixed-size 'span' construction from dynamic-size range") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Fixed-size 'span' construction from dynamic-size range") >  >() },
    { 1978u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Rename `_default_init` functions and do nothing more") >  >() },
    { 1979u, RevList< Rev< 0u, Arr64< Hash(wxS("Mathias Stearn")) >(), wxS("Title87") >  >() },
    { 1980u, RevList< Rev< 0u, Arr64< Hash(wxS("Jason Merrill")) >(), wxS("Drafting for CA096: Declaration matching for non-dependent requires-clauses") >  >() },
    { 1981u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1466")) >(), wxS("Rename leap to leap_second") >  >() },
    { 1982u, RevList< Rev< 0u, Arr64< Hash(wxS("Author362")) >(), wxS("Rename link to time_zone_link") >  >() },
    { 1983u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Wording for GB301, US296, US292, US291, and US283") >  >() },
    { 1985u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Universal Template Parameters") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Universal Template Parameters") > , Rev< 3u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Universal Template Parameters") >  >() },
    { 1988u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Allow Templates in Local Classes") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Allow Templates in Local Classes") >  >() },
    { 1989u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title138") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title472") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title161") >  >() },
    { 1990u, RevList< Rev< 0u, Arr64< Hash(wxS("Author612")) >(), wxS("Title502") > , Rev< 1u, Arr64< Hash(wxS("Author628")) >(), wxS("Title510") >  >() },
    { 1991u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1534")) >(), wxS("Rod-Belfast-P1991") >  >() },
    { 1993u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1276")) >(), wxS("Restore factories to bulk_execute | P1993R0") > , Rev< 1u, Arr64< Hash(wxS("Author1296")) >(), wxS("Restore shared state to bulk_execute | P1993R1") >  >() },
    { 1994u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("elements_view needs its own sentinel") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("elements_view needs its own sentinel") >  >() },
    { 1995u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("P1995R0 Contract Use Cases") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("P1995R1 Contract Use Cases") >  >() },
    { 1996u, RevList< Rev< 0u, Arr64< Hash(wxS("Dmitry Sokolov")) >(), wxS("Title1555") >  >() },
    { 1997u, RevList< Rev< 0u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Relaxing Restrictions on Arrays") > , Rev< 1u, Arr64< Hash(wxS("Krystian Stasiowski")) >(), wxS("Relaxing Restrictions on Arrays") >  >() },
    { 1998u, RevList< Rev< 0u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title616") > , Rev< 1u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title1224") >  >() },
    { 1999u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1690")) >(), wxS("Process proposal: double-check evolutionary material via a Tentatively Ready status") >  >() },
    { 2000u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1251")) >(), wxS("Title971") > , Rev< 1u, Arr64< Hash(wxS("Author2100")) >(), wxS("Title1627") > , Rev< 2u, Arr64< Hash(wxS("Author281")) >(), wxS("Title232") > , Rev< 3u, Arr64< Hash(wxS("Author1113")) >(), wxS("P2000r3: Direction for ISO C++") > , Rev< 4u, Arr64< Hash(wxS("Author1336")) >(), wxS("P2000r4: Direction for ISO C++") >  >() },
    { 2002u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1889")) >(), wxS("Defaulted comparison specification fixes") > , Rev< 1u, Arr64< Hash(wxS("Author549")) >(), wxS("Defaulted comparison specification fixes") >  >() },
    { 2003u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Fixing Internal and External Linkage Entities in Header Units") >  >() },
    { 2004u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1100")) >(), wxS("Numbers and their Scopes") >  >() },
    { 2005u, RevList< Rev< 0u, Arr64< Hash(wxS("James Berrow")) >(), wxS("2D Graphics: A Brief Review") >  >() },
    { 2006u, RevList< Rev< 0u, Arr64< Hash(wxS("Author487")) >(), wxS("Title407") > , Rev< 1u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Eliminating heap-allocations in sender/receiver with connect()/start() as basis operations") >  >() },
    { 2007u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("std::from_chars should work with std::string_view") >  >() },
    { 2008u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Enable variable template template parameters") >  >() },
    { 2009u, RevList< Rev< 0u, Arr64< Hash(wxS("The proposal")) >(), wxS("SG16: Unicode meeting summaries 2019-10-09 through 2019-12-11") >  >() },
    { 2010u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1956")) >(), wxS("Markdown To PDF") >  >() },
    { 2011u, RevList< Rev< 0u, Arr64< Hash(wxS("Colby Pike")) >(), wxS("A pipeline-rewrite operator") > , Rev< 1u, Arr64< Hash(wxS("Colby Pike")) >(), wxS("A pipeline-rewrite operator") >  >() },
    { 2012u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1707")) >(), wxS("P2012R0") > , Rev< 1u, Arr64< Hash(wxS("Author1440")) >(), wxS("Fix the rangebased for loop, Rev1") > , Rev< 2u, Arr64< Hash(wxS("Author357")) >(), wxS("Fix the range-based for loop, Rev 2") >  >() },
    { 2013u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") > , Rev< 4u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") > , Rev< 5u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Language: Optional <code>::operator new</code>") >  >() },
    { 2014u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1351")) >(), wxS("Title1046") > , Rev< 1u, Arr64< Hash(wxS("Author1747")) >(), wxS("Title1354") > , Rev< 2u, Arr64< Hash(wxS("Author1295")) >(), wxS("Proposed resolution for US061+US063 - aligned allocation of coroutine frames") >  >() },
    { 2016u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title603") >  >() },
    { 2017u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally safe ranges") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Conditionally borrowed ranges") >  >() },
    { 2019u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1484") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title974") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1568") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title843") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1154") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1529") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title958") > , Rev< 7u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title749") > , Rev< 8u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1215") >  >() },
    { 2020u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title308") >  >() },
    { 2021u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Negative zero strikes again") >  >() },
    { 2022u, RevList< Rev< 0u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("Rangified version of lexicographical_compare_three_way") > , Rev< 1u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("Rangified version of lexicographical_compare_three_way") > , Rev< 2u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("Rangified version of lexicographical_compare_three_way") > , Rev< 3u, Arr64< Hash(wxS("Alex Dathskovsky")) >(), wxS("P2022R3 - Rangified version of lexicographical_compare_three_way") >  >() },
    { 2024u, RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Bloomberg Analysis of Unified Executors") >  >() },
    { 2025u, RevList< Rev< 0u, Arr64< Hash(wxS("Anton Zhilin")) >(), wxS("Guaranteed copy elision for named return objects") > , Rev< 1u, Arr64< Hash(wxS("Anton Zhilin")) >(), wxS("Guaranteed copy elision for return variables") > , Rev< 2u, Arr64< Hash(wxS("Anton Zhilin")) >(), wxS("Guaranteed copy elision for return variables") >  >() },
    { 2026u, RevList< Rev< 0u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title789") >  >() },
    { 2027u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1266")) >(), wxS("Title980") >  >() },
    { 2028u, RevList< Rev< 0u, Arr64< Hash(wxS("Author575")) >(), wxS("Title465") >  >() },
    { 2029u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals") > , Rev< 2u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals") > , Rev< 3u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals") > , Rev< 4u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Proposed resolution for core issues 411, 1656, and 2333; numeric and universalcharacter escapes in character and string literals") >  >() },
    { 2030u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1395") >  >() },
    { 2031u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1683") >  >() },
    { 2032u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("P2032R0 Contract Use Cases") >  >() },
    { 2033u, RevList< Rev< 0u, Arr64< Hash(wxS("Author411")) >(), wxS("Title352") >  >() },
    { 2034u, RevList< Rev< 0u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title418") > , Rev< 1u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title337") > , Rev< 2u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Title990") > , Rev< 3u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Partially Mutable Lambda Captures") > , Rev< 4u, Arr64< Hash(wxS("Ryan McDougall")) >(), wxS("Partially Mutable Lambda Captures") >  >() },
    { 2035u, RevList< Rev< 0u, Arr64< Hash(wxS("Author219")) >(), wxS("Microsoft Word - AP0_value_prop.docx") >  >() },
    { 2036u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Change scope of lambda trailing-return-type") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Change scope of lambda *trailing-return-type*") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Change scope of lambda *trailing-return-type*") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Change scope of lambda trailing-return-type") >  >() },
    { 2037u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("P2037R0 String's gratuitous assignment") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("P2037R1 String's gratuitous assignment") >  >() },
    { 2038u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("P2038R0 Proposed nomenclature for contract-related proposals") >  >() },
    { 2039u, RevList< Rev< 0u, Arr64< Hash(wxS("Menashe Rosemberg")) >(), wxS("Title934") >  >() },
    { 2040u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title424") >  >() },
    { 2041u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Deleting variable templates") > , Rev< 1u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title647") >  >() },
    { 2042u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("P2042R0 Alternate names for make_shared_default_init") >  >() },
    { 2043u, RevList< Rev< 0u, Arr64< Hash(wxS("David Sankel")) >(), wxS("Don't constexpr All The Things") >  >() },
    { 2044u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title503") > , Rev< 1u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title955") > , Rev< 2u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title152") >  >() },
    { 2045u, RevList< Rev< 0u, Arr64< Hash(wxS("Author844")) >(), wxS("Missing Mandates for the standard library") > , Rev< 1u, Arr64< Hash(wxS("Author85")) >(), wxS("Missing Mandates for the standard library") >  >() },
    { 2046u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Raviv")) >(), wxS("P1243R3 - Rangify New Algorithms") >  >() },
    { 2047u, RevList< Rev< 0u, Arr64< Hash(wxS("Author727")) >(), wxS("An allocator-aware optional type") > , Rev< 1u, Arr64< Hash(wxS("Author624")) >(), wxS("An allocator-aware optional type") > , Rev< 2u, Arr64< Hash(wxS("Author306")) >(), wxS("An allocator-aware optional type") > , Rev< 3u, Arr64< Hash(wxS("Author1897")) >(), wxS("An allocator-aware optional type") > , Rev< 4u, Arr64< Hash(wxS("Author2118")) >(), wxS("An allocator-aware optional type") > , Rev< 5u, Arr64< Hash(wxS("Author1887")) >(), wxS("An allocator-aware optional type") > , Rev< 6u, Arr64< Hash(wxS("Author1718")) >(), wxS("An allocator-aware optional type") > , Rev< 7u, Arr64< Hash(wxS("Author604")) >(), wxS("An allocator-aware optional type") >  >() },
    { 2048u, RevList< Rev< 0u, Arr64< Hash(wxS("Vittorio Romeo")) >(), wxS("Prohibit zero and NULL from being used as null pointer literals") >  >() },
    { 2049u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title292") >  >() },
    { 2050u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Sutton")) >(), wxS("Title721") >  >() },
    { 2051u, RevList< Rev< 0u, Arr64< Hash(wxS("Author369")) >(), wxS("C++ Standard Library Issues to be moved in Prague") >  >() },
    { 2052u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title678") >  >() },
    { 2053u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1455")) >(), wxS("Title1134") > , Rev< 1u, Arr64< Hash(wxS("Author2067")) >(), wxS("Title1601") >  >() },
    { 2054u, RevList< Rev< 0u, Arr64< Hash(wxS("Author258")) >(), wxS("Title215") > , Rev< 1u, Arr64< Hash(wxS("Author142")) >(), wxS("Title122") >  >() },
    { 2055u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1118")) >(), wxS("Title892") >  >() },
    { 2057u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title274") >  >() },
    { 2058u, RevList< Rev< 0u, Arr64< Hash(wxS("Martin HoYeHovsk")) >(), wxS("Title110") >  >() },
    { 2059u, RevList< Rev< 0u, Arr64< Hash(wxS("Martin HoYeHovsk")) >(), wxS("Title456") >  >() },
    { 2060u, RevList< Rev< 0u, Arr64< Hash(wxS("Martin HoYeHovsk")) >(), wxS("Title1130") >  >() },
    { 2061u, RevList< Rev< 0u, Arr64< Hash(wxS("Author467")) >(), wxS("Title391") >  >() },
    { 2062u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Title834") >  >() },
    { 2064u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1577") >  >() },
    { 2065u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("naming and aliases") >  >() },
    { 2066u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael L")) >(), wxS("Suggested draft TS for C++ Extensions for Transaction Memory Light") > , Rev< 1u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 2u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 3u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 4u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 5u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 6u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 7u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 8u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 9u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") > , Rev< 10u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Suggested draft TS for C++ Extensions for Minimal Transactional Memory") >  >() },
    { 2067u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title817") >  >() },
    { 2068u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title207") >  >() },
    { 2069u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title815") >  >() },
    { 2070u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Title727") >  >() },
    { 2071u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Named universal character escapes") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Named universal character escapes") > , Rev< 2u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Named universal character escapes") >  >() },
    { 2072u, RevList< Rev< 0u, Arr64< Hash(wxS("Marco Foco")) >(), wxS("Title191") > , Rev< 1u, Arr64< Hash(wxS("Marco Foco")) >(), wxS("Title353") >  >() },
    { 2073u, RevList< Rev< 0u, Arr64< Hash(wxS("Author30")) >(), wxS("Title24") >  >() },
    { 2074u, RevList< Rev< 0u, Arr64< Hash(wxS("Author640")) >(), wxS("Title522") >  >() },
    { 2075u, RevList< Rev< 0u, Arr64< Hash(wxS("Pavel Dyakov")) >(), wxS("Title941") > , Rev< 1u, Arr64< Hash(wxS("Pavel Dyakov")) >(), wxS("Title917") > , Rev< 2u, Arr64< Hash(wxS("Pavel Dyakov")) >(), wxS("P2075R2.docx") > , Rev< 3u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P2075R3.docx") > , Rev< 4u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P2075R4.docx") > , Rev< 5u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P2075R5.docx") > , Rev< 6u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("P2075R6.docx") >  >() },
    { 2076u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1453")) >(), wxS("Previous disagreements on Contracts") >  >() },
    { 2077u, RevList< Rev< 0u, Arr64< Hash(wxS("Boyarinov, Konstantin")) >(), wxS("Title282") > , Rev< 1u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Heterogeneous erasure overloads for associative containers") > , Rev< 2u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Heterogeneous erasure overloads for associative containers") > , Rev< 3u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Heterogeneous erasure overloads for associative containers") >  >() },
    { 2078u, RevList< Rev< 0u, Arr64< Hash(wxS("Bob Steagall")) >(), wxS("Add new traits type std::is_complex<T>") >  >() },
    { 2079u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan")) >(), wxS("Title1330") > , Rev< 1u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("Parallel Executor") > , Rev< 2u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("System execution context") > , Rev< 3u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("System execution context") > , Rev< 4u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("System execution context") > , Rev< 5u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("System execution context") > , Rev< 6u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("System execution context") > , Rev< 7u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("Parallel scheduler") >  >() },
    { 2080u, RevList< Rev< 0u, Arr64< Hash(wxS("Author410")) >(), wxS("Polymorphic allocators: There is no such thing as One True Vocabulary Type") >  >() },
    { 2081u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1533")) >(), wxS("Rebase the Library Fundamentals v3 TS on C++20") > , Rev< 1u, Arr64< Hash(wxS("Author717")) >(), wxS("Rebase the Library Fundamentals v3 TS on C++20") >  >() },
    { 2082u, RevList< Rev< 0u, Arr64< Hash(wxS("Author381")) >(), wxS("Title326") > , Rev< 1u, Arr64< Hash(wxS("Author2097")) >(), wxS("Title1625") >  >() },
    { 2085u, RevList< Rev< 0u, Arr64< Hash(wxS("Author914")) >(), wxS("Consistent defaulted comparisons") >  >() },
    { 2087u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Reflection Naming: fix reflexpr") >  >() },
    { 2088u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Reflection Naming: Reification") >  >() },
    { 2089u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Function parameter constraints are fragile") >  >() },
    { 2091u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Issues with range access CPOs") >  >() },
    { 2092u, RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Title373") >  >() },
    { 2093u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 5u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 6u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 7u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 8u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 9u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 10u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 11u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 12u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 13u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") > , Rev< 14u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatted output") >  >() },
    { 2095u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Resolve lambda init-capture pack grammar (CWG2378)") >  >() },
    { 2096u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Generalized wording for partial specializations") > , Rev< 1u, Arr64< Hash(wxS("James Touton")) >(), wxS("Generalized wording for partial specializations") > , Rev< 2u, Arr64< Hash(wxS("James Touton")) >(), wxS("Generalized wording for partial specializations") >  >() },
    { 2098u, RevList< Rev< 0u, Arr64< Hash(wxS("Author437")) >(), wxS("Proposing std::isspecializationof") > , Rev< 1u, Arr64< Hash(wxS("Author517")) >(), wxS("Proposing std::isspecializationof") >  >() },
    { 2100u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("D2100R0: Keep unhandled_exception of a promise type mandatory - a response to US062 and FR066") >  >() },
    { 2101u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Models subsumes satisfies (Wording for US298 and US300)") >  >() },
    { 2102u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Make implicit expression variations more explicit (Wording for US185)") >  >() },
    { 2103u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1574")) >(), wxS("Core NB Comment Resolutions") >  >() },
    { 2104u, RevList< Rev< 0u, Arr64< Hash(wxS("Author962")) >(), wxS("Resolution for GB046 - Disallow changing concept values") >  >() },
    { 2106u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Alternative wording for GB315 and GB316") >  >() },
    { 2107u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Core Issue 2436: US064 Copy semantics of coroutine parameters") >  >() },
    { 2108u, RevList< Rev< 0u, Arr64< Hash(wxS("Author504")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2109u, RevList< Rev< 0u, Arr64< Hash(wxS("Author542")) >(), wxS("US084: Disallow \"export import foo\" outside of module interface") >  >() },
    { 2113u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("Proposed resolution for 2019 comment CA 112") >  >() },
    { 2114u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("P2114R0 Minimal Contract Use Cases") >  >() },
    { 2115u, RevList< Rev< 0u, Arr64< Hash(wxS("Author585")) >(), wxS("US069: Merging of multiple definitionsfor unnamed unscoped enumerations") >  >() },
    { 2116u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Remove tuple-like protocol support from fixed-extent span") >  >() },
    { 2117u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1911")) >(), wxS("C++ Standard Library Issues Resolved Directly In Prague") >  >() },
    { 2119u, RevList< Rev< 0u, Arr64< Hash(wxS("Jolanta Opara")) >(), wxS("Feedback on P1708: Simple Statistical Functions") >  >() },
    { 2120u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Simplified structured bindings protocol with pack aliases") >  >() },
    { 2123u, RevList< Rev< 0u, Arr64< Hash(wxS("Hal Finkel")) >(), wxS("Extending the Type System to Provide API and ABI Flexibility") >  >() },
    { 2125u, RevList< Rev< 0u, Arr64< Hash(wxS("Titus Winters")) >(), wxS("Title1562") >  >() },
    { 2126u, RevList< Rev< 0u, Arr64< Hash(wxS("Author423")) >(), wxS("Microsoft Word - AP1_unleashing.docx") >  >() },
    { 2127u, RevList< Rev< 0u, Arr64< Hash(wxS("Author610")) >(), wxS("Title501") >  >() },
    { 2128u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title101") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title519") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title627") > , Rev< 3u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title664") > , Rev< 4u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title684") > , Rev< 5u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title1167") > , Rev< 6u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Title1525") >  >() },
    { 2130u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1256")) >(), wxS("P2130-Rod-Prague") >  >() },
    { 2131u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2089")) >(), wxS("Changes between C++17 and C++20") >  >() },
    { 2133u, RevList< Rev< 0u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - incu.doc") >  >() },
    { 2134u, RevList< Rev< 0u, Arr64< Hash(wxS("Balog, Pal")) >(), wxS("Microsoft Word - kaizen.doc") >  >() },
    { 2135u, RevList< Rev< 1u, Arr64< Hash(wxS("Author2068")) >(), wxS("Title1603") >  >() },
    { 2136u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("invoke<R> - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("invoke_r - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("invoke_r - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("invoke_r - HackMD") >  >() },
    { 2137u, RevList< Rev< 0u, Arr64< Hash(wxS("Chandler Carruth")) >(), wxS("Goals and priorities for C++") >  >() },
    { 2138u, RevList< Rev< 0u, Arr64< Hash(wxS("Author771")) >(), wxS("Rules of Design<=>Wording engagement") > , Rev< 1u, Arr64< Hash(wxS("Author1990")) >(), wxS("Rules of Design<=>Wording engagement") > , Rev< 2u, Arr64< Hash(wxS("Author804")) >(), wxS("Rules of Design<=>Specification engagement") > , Rev< 3u, Arr64< Hash(wxS("Author425")) >(), wxS("Rules of Design<=>Specification engagement") > , Rev< 4u, Arr64< Hash(wxS("Author34")) >(), wxS("Rules of Design<=>Specification engagement") >  >() },
    { 2139u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1329")) >(), wxS("Reviewing Deprecated Facilities of C++20 for C++23") > , Rev< 1u, Arr64< Hash(wxS("Author1785")) >(), wxS("Reviewing Deprecated Facilities of C++20 for C++23") > , Rev< 2u, Arr64< Hash(wxS("Author2132")) >(), wxS("Reviewing Deprecated Facilities of C++20 for C++23") >  >() },
    { 2141u, RevList< Rev< 0u, Arr64< Hash(wxS("Author28")) >(), wxS("Aggregates are named tuples") > , Rev< 1u, Arr64< Hash(wxS("Author2210")) >(), wxS("Aggregates are named tuples") > , Rev< 2u, Arr64< Hash(wxS("Author514")) >(), wxS("Aggregates are named tuples") >  >() },
    { 2142u, RevList< Rev< 1u, Arr64< Hash(wxS("Author970")) >(), wxS("Markdown To PDF") >  >() },
    { 2145u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Evolving C++ Remotely") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Evolving C++ Remotely") >  >() },
    { 2146u, RevList< Rev< 0u, Arr64< Hash(wxS("Amanda Kornoushenko")) >(), wxS("Modern std::byte stream IO for C++") > , Rev< 1u, Arr64< Hash(wxS("Amanda Kornoushenko")) >(), wxS("Modern std::byte stream IO for C++") > , Rev< 2u, Arr64< Hash(wxS("Amanda Kornoushenko")) >(), wxS("Modern std::byte stream IO for C++") >  >() },
    { 2148u, RevList< Rev< 0u, Arr64< Hash(wxS("Author453")) >(), wxS("Title381") >  >() },
    { 2149u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title1097") >  >() },
    { 2150u, RevList< Rev< 0u, Arr64< Hash(wxS("Author209")) >(), wxS("Down with typename in the Library!") >  >() },
    { 2152u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Title160") > , Rev< 1u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Title1157") >  >() },
    { 2155u, RevList< Rev< 0u, Arr64< Hash(wxS("Gordon Brown")) >(), wxS("Title238") >  >() },
    { 2156u, RevList< Rev< 0u, Arr64< Hash(wxS("Erich Keane")) >(), wxS("Title709") > , Rev< 1u, Arr64< Hash(wxS("Erich Keane")) >(), wxS("Title754") >  >() },
    { 2159u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0")) >(), wxS("Unbounded Decimal") > , Rev< 1u, Arr64< Hash(wxS("\u00A0")) >(), wxS("P2159R1, A Big Decimal") >  >() },
    { 2160u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Locks lock lockables") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Locks lock lockables") >  >() },
    { 2161u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title1679") > , Rev< 1u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title1016") > , Rev< 2u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Title254") >  >() },
    { 2162u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Inheriting from std::variant") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Inheriting from `std::variant`") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Inheriting from `std::variant`") >  >() },
    { 2163u, RevList< Rev< 0u, Arr64< Hash(wxS("Author659")) >(), wxS("nativetuple/draft2.md at master accelerated/nativetuple GitHub") >  >() },
    { 2164u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title245") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title534") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1513") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1563") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1708") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title495") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title499") > , Rev< 7u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1043") > , Rev< 8u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1050") > , Rev< 9u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1199") >  >() },
    { 2165u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title279") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title893") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title851") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1402") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title205") >  >() },
    { 2166u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2161")) >(), wxS("Title1663") > , Rev< 1u, Arr64< Hash(wxS("Author960")) >(), wxS("Title779") >  >() },
    { 2167u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Proposed wording for LWG 2114") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)") > , Rev< 2u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)") > , Rev< 3u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Proposed wording for LWG 2114 (contextually convertible to <tt>bool</tt>)") >  >() },
    { 2168u, RevList< Rev< 0u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Title1483") > , Rev< 1u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Title1181") > , Rev< 2u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Title383") > , Rev< 3u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Title172") >  >() },
    { 2169u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1412") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1039") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title428") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title322") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title520") >  >() },
    { 2170u, RevList< Rev< 0u, Arr64< Hash(wxS("Charles Salvia")) >(), wxS("Feedback on designing the proposed `std::error` type") >  >() },
    { 2171u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2205")) >(), wxS("Rebasing the Networking TS on C++20") > , Rev< 1u, Arr64< Hash(wxS("Author1898")) >(), wxS("Rebasing the Networking TS on C++20") > , Rev< 2u, Arr64< Hash(wxS("Author1963")) >(), wxS("Rebasing the Networking TS on C++20") >  >() },
    { 2172u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1114") >  >() },
    { 2173u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Title759") > , Rev< 1u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Attributes on Lambda-Expressions") >  >() },
    { 2174u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Compound Literals - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Compound Literals - HackMD") >  >() },
    { 2175u, RevList< Rev< 0u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Composable cancellation for sender-based async operations") >  >() },
    { 2176u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("A different take on inexpressible conditions") >  >() },
    { 2178u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title155") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1311") >  >() },
    { 2179u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2020-01-08 through 2020-05-27") >  >() },
    { 2181u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1154")) >(), wxS("Correcting the Design of Bulk Execution") > , Rev< 1u, Arr64< Hash(wxS("Author943")) >(), wxS("Correcting the Design of Bulk Execution") >  >() },
    { 2182u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract Support: Defining the Minimum Viable Feature Set") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract Support: Defining the Minimum Viable Feature Set") >  >() },
    { 2183u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Executors Review: Properties") >  >() },
    { 2184u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1675")) >(), wxS("Title1301") >  >() },
    { 2185u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2044")) >(), wxS("Contracts Use Case Categorization - HackMD") >  >() },
    { 2186u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Removing Garbage Collection Support") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Removing Garbage Collection Support") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Removing Garbage Collection Support") >  >() },
    { 2187u, RevList< Rev< 0u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Title294") > , Rev< 3u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Title767") > , Rev< 4u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Title1287") > , Rev< 5u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Title1527") >  >() },
    { 2188u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony")) >(), wxS("DXXXX: Zap the Zap: Pointers should just be bags of bits") > , Rev< 1u, Arr64< Hash(wxS("Anthony")) >(), wxS("Zap the Zap: Pointers are sometimes just bags of bits") >  >() },
    { 2191u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2003")) >(), wxS("Modules: ADL & GMFs do not play together well (anymore)") >  >() },
    { 2192u, RevList< Rev< 0u, Arr64< Hash(wxS("Author56")) >(), wxS("Title57") > , Rev< 1u, Arr64< Hash(wxS("Author1405")) >(), wxS("Title1094") > , Rev< 2u, Arr64< Hash(wxS("Author429")) >(), wxS("Title368") > , Rev< 3u, Arr64< Hash(wxS("Author2092")) >(), wxS("Title1623") >  >() },
    { 2193u, RevList< Rev< 0u, Arr64< Hash(wxS("Author845")) >(), wxS("Title666") > , Rev< 1u, Arr64< Hash(wxS("Author484")) >(), wxS("Title404") >  >() },
    { 2194u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2050")) >(), wxS("Title1592") >  >() },
    { 2195u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Electronic Straw Polls") > , Rev< 1u, Arr64< Hash(wxS("Author303")) >(), wxS("Electronic Straw Polls") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Electronic Straw Polls") >  >() },
    { 2196u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1462")) >(), wxS("P2196R0") >  >() },
    { 2197u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Tesch")) >(), wxS("Formatting for std::complex") >  >() },
    { 2198u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 4u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 5u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 6u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") > , Rev< 7u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Feature-Test Macros and Implementation-Defined Extensions") >  >() },
    { 2199u, RevList< Rev< 0u, Arr64< Hash(wxS("Isabella Muerte")) >(), wxS("Concepts to Differentiate Types") >  >() },
    { 2201u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Mixed string literal concatenation") > , Rev< 1u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Mixed string literal concatenation") >  >() },
    { 2202u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Executors review Senders and Receivers") >  >() },
    { 2203u, RevList< Rev< 0u, Arr64< Hash(wxS("Tomasz KamiDski")) >(), wxS("Title860") >  >() },
    { 2205u, RevList< Rev< 0u, Arr64< Hash(wxS("Chris Kohlhoff")) >(), wxS("Executors Review - Polymorphic Executor") >  >() },
    { 2206u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("Executors Thread Pool review report") >  >() },
    { 2207u, RevList< Rev< 0u, Arr64< Hash(wxS("- name")) >(), wxS("Title1175") >  >() },
    { 2209u, RevList< Rev< 0u, Arr64< Hash(wxS("Lee Howes")) >(), wxS("Bulk schedule") >  >() },
    { 2210u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Superior String Splitting") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Superior String Splitting") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Superior String Splitting") >  >() },
    { 2211u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("Exhaustiveness Checking for Pattern Matching") >  >() },
    { 2212u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexey Dmitriev")) >(), wxS("Relax Requirements for time_point::clock") > , Rev< 1u, Arr64< Hash(wxS("Alexey Dmitriev")) >(), wxS("Relax Requirements for time_point::clock") > , Rev< 2u, Arr64< Hash(wxS("Alexey Dmitriev")) >(), wxS("Relax Requirements for time_point::clock") >  >() },
    { 2213u, RevList< Rev< 0u, Arr64< Hash(wxS("Amir Kirsh")) >(), wxS("Title786") > , Rev< 1u, Arr64< Hash(wxS("Amir Kirsh")) >(), wxS("Title1119") >  >() },
    { 2214u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Plan for C++23 Ranges") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Plan for C++23 Ranges") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Plan for C++23 Ranges") >  >() },
    { 2215u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2189")) >(), wxS("Title1681") > , Rev< 1u, Arr64< Hash(wxS("Author741")) >(), wxS("Title597") >  >() },
    { 2216u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::format improvements") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::format improvements") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::format improvements") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::format improvements") >  >() },
    { 2217u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2020-06-10 through 2020-08-26") >  >() },
    { 2218u, RevList< Rev< 0u, Arr64< Hash(wxS("value")) >(), wxS("Title1212") >  >() },
    { 2219u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2053")) >(), wxS("P0433 Executors Issues Needing Resolution | P2219R0") >  >() },
    { 2220u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("redefine properties in P0443") >  >() },
    { 2221u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("define P0443 cpos with tag_invoke") >  >() },
    { 2223u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title410") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title459") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title629") >  >() },
    { 2224u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1812")) >(), wxS("A Better bulk_schedule") >  >() },
    { 2226u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("A proposal for an idiom to move from an object and reset it to its default constructed state") >  >() },
    { 2227u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1560")) >(), wxS("Update normative reference to POSIX") >  >() },
    { 2228u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1267")) >(), wxS("Title982") >  >() },
    { 2231u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Missing `constexpr` in `std::optional` and `std::variant`") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Missing `constexpr` in `std::optional` and `std::variant`") >  >() },
    { 2232u, RevList< Rev< 0u, Arr64< Hash(wxS("Emil Dotchevski")) >(), wxS("Zero-Overhead Deterministic Exceptions: Catching Values") >  >() },
    { 2233u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2020 Fall Library Evolution Polls") > , Rev< 1u, Arr64< Hash(wxS("Author59")) >(), wxS("2020 Fall Library Evolution Polls") > , Rev< 2u, Arr64< Hash(wxS("Author1297")) >(), wxS("D2233R2: 2020 Fall Library Evolution Polls") > , Rev< 3u, Arr64< Hash(wxS("Author2109")) >(), wxS("2020 Fall Library Evolution Polls") >  >() },
    { 2234u, RevList< Rev< 0u, Arr64< Hash(wxS("Scott Schurr")) >(), wxS("P2234R0-UB_and_IF-NDR_Audit") > , Rev< 1u, Arr64< Hash(wxS("Scott Schurr")) >(), wxS("P2234R1-UB_and_IF-NDR_Audit") >  >() },
    { 2235u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1193")) >(), wxS("Disentangling schedulers and executors") >  >() },
    { 2236u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1316")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, Nov. 2020") >  >() },
    { 2237u, RevList< Rev< 0u, Arr64< Hash(wxS("Author350")) >(), wxS("Title296") >  >() },
    { 2238u, RevList< Rev< 0u, Arr64< Hash(wxS("Author355")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 2242u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2221")) >(), wxS("Non-literal variables (and labels and gotos) in constexpr functions") > , Rev< 1u, Arr64< Hash(wxS("Author827")) >(), wxS("Non-literal variables (and labels and gotos) in constexpr functions") > , Rev< 2u, Arr64< Hash(wxS("Author911")) >(), wxS("Non-literal variables (and labels and gotos) in constexpr functions") > , Rev< 3u, Arr64< Hash(wxS("Author1199")) >(), wxS("Non-literal variables (and labels and gotos) in constexpr functions") >  >() },
    { 2244u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1291") >  >() },
    { 2245u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1554") >  >() },
    { 2246u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title891") > , Rev< 1u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title414") >  >() },
    { 2247u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1504")) >(), wxS("2020 Library Evolution Report") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2020 Library Evolution Report") >  >() },
    { 2248u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 2u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 3u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 4u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 5u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 6u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 7u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") > , Rev< 8u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Enabling list-initialization for algorithms") >  >() },
    { 2249u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 2u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 3u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 4u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 5u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") > , Rev< 6u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Mixed comparisons for smart pointers") >  >() },
    { 2250u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1043")) >(), wxS("Scheduler_Vs_Executor") >  >() },
    { 2251u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1414") > , Rev< 1u, Arr64< Hash(wxS("1")) >(), wxS("Title1205") >  >() },
    { 2253u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2020-09-09 through 2020-11-11") >  >() },
    { 2254u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1527")) >(), wxS("Title1187") >  >() },
    { 2255u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("A type trait to detect reference binding to temporary") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("A type trait to detect reference binding to temporary") > , Rev< 2u, Arr64< Hash(wxS("Tim Song")) >(), wxS("A type trait to detect reference binding to temporary") >  >() },
    { 2257u, RevList< Rev< 0u, Arr64< Hash(wxS("Dalton M")) >(), wxS("Title839") >  >() },
    { 2259u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Repairing input range adaptors and counted_iterator") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Repairing input range adaptors and counted_iterator") >  >() },
    { 2260u, RevList< Rev< 0u, Arr64< Hash(wxS("Author602")) >(), wxS("Title493") >  >() },
    { 2262u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2020 Fall Library Evolution Poll Outcomes") >  >() },
    { 2263u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("A call for a WG21 managed chat service") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("A call for a WG21 managed chat service") >  >() },
    { 2264u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 1u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 2u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 3u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 4u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 5u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 6u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") > , Rev< 7u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make assert() macro user friendly for C and C++") >  >() },
    { 2265u, RevList< Rev< 0u, Arr64< Hash(wxS("Kevlin Henney")) >(), wxS("Title325") > , Rev< 1u, Arr64< Hash(wxS("Kevlin Henney")) >(), wxS("Title1436") >  >() },
    { 2266u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Simpler implicit move") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Simpler implicit move") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Simpler implicit move") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Simpler implicit move") >  >() },
    { 2267u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Library Evolution Policies") > , Rev< 1u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Library Evolution Policies") >  >() },
    { 2268u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Roadmap") >  >() },
    { 2272u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1052")) >(), wxS("Title844") >  >() },
    { 2273u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1423")) >(), wxS("Making std::unique_ptr constexpr") > , Rev< 1u, Arr64< Hash(wxS("Author1869")) >(), wxS("Making std::unique_ptr constexpr") > , Rev< 2u, Arr64< Hash(wxS("Author785")) >(), wxS("Making std::unique_ptr constexpr") > , Rev< 3u, Arr64< Hash(wxS("Author1019")) >(), wxS("Making std::unique_ptr constexpr") >  >() },
    { 2274u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title1109") >  >() },
    { 2276u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2206")) >(), wxS("Fix std::cbegin(), ranges::cbegin, and provide const_iterator support for std::span") > , Rev< 1u, Arr64< Hash(wxS("Author285")) >(), wxS("Microsoft Word - P2276R1_fix_cbegin_210909.docx") >  >() },
    { 2277u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Packs outside of Templates") >  >() },
    { 2278u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`cbegin` should always return a constant iterator") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("cbegin should always return a constant iterator") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("cbegin should always return a constant iterator") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("cbegin should always return a constant iterator") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("cbegin should always return a constant iterator") >  >() },
    { 2279u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("We need a language mechanism for customization points") >  >() },
    { 2280u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Using unknown references in constant expressions") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Using unknown references in constant expressions") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Using unknown pointers and references in constant expressions") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Using unknown pointers and references in constant expressions") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Using unknown pointers and references in constant expressions") >  >() },
    { 2281u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Clarifying range adaptor objects") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Clarifying range adaptor objects") >  >() },
    { 2283u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Schellenberger")) >(), wxS("constexpr for specialized memory algorithms") > , Rev< 1u, Arr64< Hash(wxS("Michael Schellenberger")) >(), wxS("constexpr for specialized memory algorithms") > , Rev< 2u, Arr64< Hash(wxS("Michael Schellenberger")) >(), wxS("constexpr for specialized memory algorithms") >  >() },
    { 2285u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Are default function arguments in the immediate context?") >  >() },
    { 2286u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 5u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 6u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 7u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") > , Rev< 8u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Formatting Ranges") >  >() },
    { 2287u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Designated-initializers for Base Classes") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Designated-initializers for Base Classes") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Designated-initializers for Base Classes") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Designated-initializers for Base Classes") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Designated-initializers for Base Classes") >  >() },
    { 2289u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Winter Library Evolution Polls") >  >() },
    { 2290u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1357") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title546") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1373") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title444") >  >() },
    { 2291u, RevList< Rev< 0u, Arr64< Hash(wxS("Author967")) >(), wxS("Title781") > , Rev< 1u, Arr64< Hash(wxS("Daniil Goncharov")) >(), wxS("Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header") > , Rev< 2u, Arr64< Hash(wxS("Daniil Goncharov")) >(), wxS("Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header") > , Rev< 3u, Arr64< Hash(wxS("Daniil Goncharov")) >(), wxS("Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header") >  >() },
    { 2295u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1351") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title204") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1148") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title466") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title730") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1269") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1401") >  >() },
    { 2297u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title443") >  >() },
    { 2299u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("`mdspan` and CTAD") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("`mdspan` and CTAD") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("`mdspan` and CTAD") > , Rev< 3u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("`mdspan`s of All Dynamic Extents") > , Rev< 4u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("mdspans of All Dynamic Extents") >  >() },
    { 2300u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 1u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 2u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 3u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 4u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 5u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 6u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 7u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 8u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 9u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") > , Rev< 10u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`std::execution`") >  >() },
    { 2301u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Add a `pmr` alias for `std::stacktrace`") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Add a `pmr` alias for `std::stacktrace`") >  >() },
    { 2302u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("Prefer std::ranges::contains over std::basic_string_view::contains") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::ranges::contains`") > , Rev< 2u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::ranges::contains`") > , Rev< 3u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::ranges::contains`") > , Rev< 4u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::ranges::contains`") >  >() },
    { 2303u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2081")) >(), wxS("Title1613") > , Rev< 1u, Arr64< Hash(wxS("Author443")) >(), wxS("Title374") > , Rev< 2u, Arr64< Hash(wxS("Author468")) >(), wxS("Title393") > , Rev< 3u, Arr64< Hash(wxS("Author1515")) >(), wxS("Title1177") > , Rev< 4u, Arr64< Hash(wxS("Author607")) >(), wxS("Title497") >  >() },
    { 2304u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1780")) >(), wxS("Title1382") > , Rev< 1u, Arr64< Hash(wxS("Author358")) >(), wxS("Title302") > , Rev< 2u, Arr64< Hash(wxS("Author700")) >(), wxS("Title562") > , Rev< 3u, Arr64< Hash(wxS("Author485")) >(), wxS("Title405") >  >() },
    { 2305u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1709")) >(), wxS("Title1320") > , Rev< 1u, Arr64< Hash(wxS("Author1611")) >(), wxS("Title1246") > , Rev< 2u, Arr64< Hash(wxS("Author862")) >(), wxS("Title687") > , Rev< 3u, Arr64< Hash(wxS("Author800")) >(), wxS("Title645") > , Rev< 4u, Arr64< Hash(wxS("Author166")) >(), wxS("Title143") > , Rev< 5u, Arr64< Hash(wxS("Author983")) >(), wxS("Type inference for object definitions") >  >() },
    { 2306u, RevList< Rev< 0u, Arr64< Hash(wxS("Author768")) >(), wxS("Title626") > , Rev< 1u, Arr64< Hash(wxS("Author1024")) >(), wxS("Title818") > , Rev< 2u, Arr64< Hash(wxS("Author2016")) >(), wxS("Title1556") > , Rev< 3u, Arr64< Hash(wxS("Author247")) >(), wxS("Title203") >  >() },
    { 2307u, RevList< Rev< 0u, Arr64< Hash(wxS("Author822")) >(), wxS("Title654") > , Rev< 1u, Arr64< Hash(wxS("Author1197")) >(), wxS("Title938") > , Rev< 2u, Arr64< Hash(wxS("Author1668")) >(), wxS("Title1297") >  >() },
    { 2308u, RevList< Rev< 0u, Arr64< Hash(wxS("Author598")) >(), wxS("Template parameter initialization") > , Rev< 1u, Arr64< Hash(wxS("Author1244")) >(), wxS("Template parameter initialization") >  >() },
    { 2309u, RevList< Rev< 0u, Arr64< Hash(wxS("Author329")) >(), wxS("CORE:202101") >  >() },
    { 2310u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1278")) >(), wxS("Title989") > , Rev< 1u, Arr64< Hash(wxS("Author2202")) >(), wxS("Title1687") >  >() },
    { 2311u, RevList< Rev< 0u, Arr64< Hash(wxS("Author901")) >(), wxS("Title729") > , Rev< 1u, Arr64< Hash(wxS("Author2141")) >(), wxS("Title1649") > , Rev< 2u, Arr64< Hash(wxS("Author1894")) >(), wxS("Title1463") >  >() },
    { 2312u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2113")) >(), wxS("Title1632") > , Rev< 1u, Arr64< Hash(wxS("Author1904")) >(), wxS("Title1470") >  >() },
    { 2313u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2125")) >(), wxS("Core \"tentatively ready\" Issues") >  >() },
    { 2314u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Character sets and encodings") > , Rev< 1u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Character sets and encodings") > , Rev< 2u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Character sets and encodings") > , Rev< 3u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Character sets and encodings") > , Rev< 4u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Character sets and encodings") >  >() },
    { 2315u, RevList< Rev< 0u, Arr64< Hash(wxS("Author744")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2021") >  >() },
    { 2316u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title176") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title72") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title40") >  >() },
    { 2317u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1216")) >(), wxS("Title953") >  >() },
    { 2318u, RevList< Rev< 0u, Arr64< Hash(wxS("Author198")) >(), wxS("Title167") > , Rev< 1u, Arr64< Hash(wxS("Author2013")) >(), wxS("Title1553") >  >() },
    { 2319u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Prevent path presentation problems") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Prevent path presentation problems") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Prevent path presentation problems") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Prevent path presentation problems") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Prevent path presentation problems") >  >() },
    { 2320u, RevList< Rev< 0u, Arr64< Hash(wxS("Author955")) >(), wxS("The Syntax of Static Reflection") >  >() },
    { 2321u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("zip") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("zip") > , Rev< 2u, Arr64< Hash(wxS("Tim Song")) >(), wxS("zip") >  >() },
    { 2322u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`ranges::fold`") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`ranges::fold`") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`ranges::fold`") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("`ranges::fold`") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("ranges::fold") > , Rev< 5u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("ranges::fold") > , Rev< 6u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("ranges::fold") >  >() },
    { 2323u, RevList< Rev< 0u, Arr64< Hash(wxS("Martin Uecker")) >(), wxS("Title1121") >  >() },
    { 2324u, RevList< Rev< 0u, Arr64< Hash(wxS("Martin Uecker")) >(), wxS("Title150") > , Rev< 1u, Arr64< Hash(wxS("Martin Uecker")) >(), wxS("Title293") > , Rev< 2u, Arr64< Hash(wxS("Martin Uecker")) >(), wxS("Title964") >  >() },
    { 2325u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Views should not be required to be default constructible") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Views should not be required to be default constructible") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Views should not be required to be default constructible") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Views should not be required to be default constructible") >  >() },
    { 2327u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul M")) >(), wxS("Title771") > , Rev< 1u, Arr64< Hash(wxS("Paul M")) >(), wxS("Title240") >  >() },
    { 2328u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("join_view should join all views of ranges") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("join_view should join all views of ranges") >  >() },
    { 2329u, RevList< Rev< 0u, Arr64< Hash(wxS("Author564")) >(), wxS("Title457") >  >() },
    { 2330u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1882")) >(), wxS("Title1459") >  >() },
    { 2331u, RevList< Rev< 0u, Arr64< Hash(wxS("Author26")) >(), wxS("Title20") >  >() },
    { 2332u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Establishing std::hive as replacement name for the proposed std::colony container") >  >() },
    { 2333u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Winter Library Evolution Poll Outcomes") >  >() },
    { 2334u, RevList< Rev< 0u, Arr64< Hash(wxS("Melanie Blower")) >(), wxS("Title1606") > , Rev< 1u, Arr64< Hash(wxS("Melanie Blower")) >(), wxS("Title490") >  >() },
    { 2337u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1623")) >(), wxS("Title1257") >  >() },
    { 2338u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Character primitives and the C library") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Character primitives and the C library") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Character primitives and the C library") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Character primitives and the C library") > , Rev< 4u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: Character primitives and the C library") >  >() },
    { 2339u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract violation handlers") >  >() },
    { 2340u, RevList< Rev< 0u, Arr64< Hash(wxS("Author616")) >(), wxS("Clarifying the status of the C headers") > , Rev< 1u, Arr64< Hash(wxS("Author1061")) >(), wxS("Clarifying the status of the C headers") >  >() },
    { 2342u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title71") >  >() },
    { 2345u, RevList< Rev< 0u, Arr64< Hash(wxS("Sean Parent")) >(), wxS("Relaxing Requirements of Moved-From Objects") >  >() },
    { 2347u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1146") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title362") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1201") >  >() },
    { 2348u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title37") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title516") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title913") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title45") >  >() },
    { 2350u, RevList< Rev< 0u, Arr64< Hash(wxS("Author71")) >(), wxS("constexpr class") > , Rev< 1u, Arr64< Hash(wxS("Author318")) >(), wxS("constexpr class") > , Rev< 2u, Arr64< Hash(wxS("Author1369")) >(), wxS("constexpr class") >  >() },
    { 2351u, RevList< Rev< 0u, Arr64< Hash(wxS("hana.dusikova@avast.com")) >(), wxS("nodiscard casts") >  >() },
    { 2352u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2020-12-09 through 2021-03-24") >  >() },
    { 2353u, RevList< Rev< 0u, Arr64< Hash(wxS("David Rector")) >(), wxS("Title814") >  >() },
    { 2355u, RevList< Rev< 0u, Arr64< Hash(wxS("Author87")) >(), wxS("Postfix fold expressions") > , Rev< 1u, Arr64< Hash(wxS("Author903")) >(), wxS("Postfix fold expressions") > , Rev< 2u, Arr64< Hash(wxS("Author730")) >(), wxS("Postfix fold expressions") >  >() },
    { 2356u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1870")) >(), wxS("Title1449") >  >() },
    { 2358u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Defining Contracts") >  >() },
    { 2360u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Extend init-statement to allow alias-declaration") >  >() },
    { 2361u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title688") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1078") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1480") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title349") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title609") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title188") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1653") >  >() },
    { 2362u, RevList< Rev< 0u, Arr64< Hash(wxS("Author644")) >(), wxS("Title523") > , Rev< 1u, Arr64< Hash(wxS("Author159")) >(), wxS("Title136") > , Rev< 2u, Arr64< Hash(wxS("Author207")) >(), wxS("Title171") > , Rev< 3u, Arr64< Hash(wxS("Author1935")) >(), wxS("Title1495") >  >() },
    { 2363u, RevList< Rev< 0u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > , Rev< 1u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > , Rev< 2u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > , Rev< 3u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > , Rev< 4u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > , Rev< 5u, Arr64< Hash(wxS("Konstantin Boyarinov")) >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >  >() },
    { 2367u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Remove misuses of list-initialization from Clause 24") >  >() },
    { 2368u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Spring Library Evolution Polls") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Spring Library Evolution Polls") >  >() },
    { 2370u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2086")) >(), wxS("Stacktrace from exception") > , Rev< 1u, Arr64< Hash(wxS("Author16")) >(), wxS("Stacktrace from exception") > , Rev< 2u, Arr64< Hash(wxS("Author2220")) >(), wxS("Stacktrace from exception") >  >() },
    { 2372u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fixing locale handling in chrono formatters") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fixing locale handling in chrono formatters") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fixing locale handling in chrono formatters") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fixing locale handling in chrono formatters") >  >() },
    { 2374u, RevList< Rev< 0u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("XXXXR0: views::cartesian_product") > , Rev< 1u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("views::cartesian_product") > , Rev< 2u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("views::cartesian_product") > , Rev< 3u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("`views::cartesian_product`") > , Rev< 4u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("`views::cartesian_product`") >  >() },
    { 2375u, RevList< Rev< 0u, Arr64< Hash(wxS("Author383")) >(), wxS("Title328") > , Rev< 1u, Arr64< Hash(wxS("Author631")) >(), wxS("Title512") >  >() },
    { 2376u, RevList< Rev< 0u, Arr64< Hash(wxS("Author462")) >(), wxS("Title388") >  >() },
    { 2377u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("[[nodiscard]] in the Standard Library: Clause 23 Iterators library") >  >() },
    { 2378u, RevList< Rev< 0u, Arr64< Hash(wxS("Author211")) >(), wxS("Title175") > , Rev< 1u, Arr64< Hash(wxS("Author690")) >(), wxS("Title556") >  >() },
    { 2380u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Paper") > , Rev< 1u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Paper R1") >  >() },
    { 2381u, RevList< Rev< 0u, Arr64< Hash(wxS("Jarrad J")) >(), wxS("Pattern Matching with Exception Handling") >  >() },
    { 2382u, RevList< Rev< 0u, Arr64< Hash(wxS("Author214")) >(), wxS("Bright Blue") >  >() },
    { 2384u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Spring Library Evolution Poll Outcomes") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Spring Library Evolution Poll Outcomes") >  >() },
    { 2385u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2010")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, June 2021") >  >() },
    { 2386u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1352")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2387u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pipe support for user-defined range adaptors") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pipe support for user-defined range adaptors") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pipe support for user-defined range adaptors") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Pipe support for user-defined range adaptors") >  >() },
    { 2388u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Abort-only contract support") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Minimum Contract Support: either Ignore or Check_and_abort") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Minimum Contract Support: either Ignore or Check_and_abort") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Minimum Contract Support: either No_eval or Eval_and_abort") > , Rev< 4u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Minimum Contract Support: either No_eval or Eval_and_abort") >  >() },
    { 2389u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("dextents Index Type Parameter") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("dextents Index Type Parameter") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("dextents Index Type Parameter") >  >() },
    { 2390u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1914")) >(), wxS("Title1478") > , Rev< 1u, Arr64< Hash(wxS("Author1049")) >(), wxS("Title842") > , Rev< 2u, Arr64< Hash(wxS("Author208")) >(), wxS("Title173") >  >() },
    { 2391u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title1541") >  >() },
    { 2392u, RevList< Rev< 0u, Arr64< Hash(wxS("structure_map")) >(), wxS("Title234") > , Rev< 1u, Arr64< Hash(wxS("structure_map")) >(), wxS("Title1256") > , Rev< 2u, Arr64< Hash(wxS("structure_map")) >(), wxS("Title744") > , Rev< 3u, Arr64< Hash(wxS("structure_map")) >(), wxS("Title1091") >  >() },
    { 2393u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Cleaning up integer-class types") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Cleaning up integer-class types") >  >() },
    { 2395u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1929")) >(), wxS("WG21 2021-06 Virtual Meeting Record of Discussion.docx") >  >() },
    { 2396u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("Concurrency TS 2 fixes") > , Rev< 1u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("P2396R1") >  >() },
    { 2397u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2021-04-14 through 2021-05-26") >  >() },
    { 2400u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Library Evolution Report: 2020-10-27 to 2021-02-16") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Library Evolution Report: 2021-02-23 to 2021-05-25") > , Rev< 2u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Library Evolution Report: 2021-06-01 to 2021-09-20") > , Rev< 3u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Library Evolution Report: 2021-09-28 to 2022-01-25") >  >() },
    { 2401u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Add a conditional noexcept specification to std::exchange") >  >() },
    { 2402u, RevList< Rev< 0u, Arr64< Hash(wxS("Author432")) >(), wxS("PowerPoint Presentation") >  >() },
    { 2403u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1676")) >(), wxS("Slide 1") >  >() },
    { 2404u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Bassett")) >(), wxS("Title382") > , Rev< 1u, Arr64< Hash(wxS("Justin Bassett")) >(), wxS("Title1218") > , Rev< 2u, Arr64< Hash(wxS("Justin Bassett")) >(), wxS("Title1238") > , Rev< 3u, Arr64< Hash(wxS("Justin Bassett")) >(), wxS("Title124") >  >() },
    { 2405u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Bassett")) >(), wxS("Title46") >  >() },
    { 2406u, RevList< Rev< 0u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Fix `counted_iterator` interaction with input iterators") > , Rev< 1u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Fix `counted_iterator` interaction with input iterators") > , Rev< 2u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Add `lazy_counted_iterator`") > , Rev< 3u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Add `lazy_counted_iterator`") > , Rev< 4u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Add `lazy_counted_iterator`") > , Rev< 5u, Arr64< Hash(wxS("Yehezkel Bernat")) >(), wxS("Add `lazy_counted_iterator`") >  >() },
    { 2407u, RevList< Rev< 0u, Arr64< Hash(wxS("Emil Meissner")) >(), wxS("Freestanding Library: Partial Classes") > , Rev< 1u, Arr64< Hash(wxS("Emil Meissner")) >(), wxS("Freestanding Library: Partial Classes") > , Rev< 2u, Arr64< Hash(wxS("\u2003\u2003Emil Meissner")) >(), wxS("Freestanding Library: Partial Classes") > , Rev< 3u, Arr64< Hash(wxS("\u2003\u2003Ben Craig")) >(), wxS("Freestanding Library: Partial Classes") > , Rev< 4u, Arr64< Hash(wxS("\u2003\u2003Ben Craig")) >(), wxS("Freestanding Library: Partial Classes") > , Rev< 5u, Arr64< Hash(wxS("\u2003\u2003Ben Craig")) >(), wxS("Freestanding Library: Partial Classes") >  >() },
    { 2408u, RevList< Rev< 0u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges views as inputs to non-Ranges algorithms") > , Rev< 1u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges views as inputs to non-Ranges algorithms") > , Rev< 2u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges iterators as inputs to non-Ranges algorithms") > , Rev< 3u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges iterators as inputs to non-Ranges algorithms") > , Rev< 4u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges iterators as inputs to non-Ranges algorithms") > , Rev< 5u, Arr64< Hash(wxS("David Olsen")) >(), wxS("Ranges iterators as inputs to non-Ranges algorithms") >  >() },
    { 2409u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Requirements for Usage of C++ Modules at Bloomberg") >  >() },
    { 2410u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1782")) >(), wxS("Title1384") >  >() },
    { 2411u, RevList< Rev< 0u, Arr64< Hash(wxS("Author856")) >(), wxS("Title681") >  >() },
    { 2412u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1536")) >(), wxS("Title1191") >  >() },
    { 2413u, RevList< Rev< 0u, Arr64< Hash(wxS("L\u00E9n\u00E1rd Szolnoki")) >(), wxS("Remove unsafe conversions of unique_ptr<T>") > , Rev< 1u, Arr64< Hash(wxS("L\u00E9n\u00E1rd Szolnoki")) >(), wxS("Remove unsafe conversions of unique_ptr<T>") >  >() },
    { 2414u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R0 Pointer lifetime-end zap proposed solutions") > , Rev< 1u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R1 Pointer lifetime-end zap proposed solutions") > , Rev< 2u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R2 Pointer lifetime-end zap proposed solutions") > , Rev< 3u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R3 Pointer lifetime-end zap proposed solutions: atomics and volatile") > , Rev< 4u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R4 Pointer lifetime-end zap proposed solutions: atomics and volatile") > , Rev< 5u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R5 Pointer lifetime-end zap proposed solutions: atomics and volatile") > , Rev< 6u, Arr64< Hash(wxS("Paul E")) >(), wxS("P2414R6 Pointer lifetime-end zap proposed solutions: atomics and volatile") >  >() },
    { 2415u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("What is a `view`?") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("What is a `view`?") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("What is a view?") >  >() },
    { 2416u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Title1559") > , Rev< 1u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Title871") > , Rev< 2u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Title1659") >  >() },
    { 2417u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1877")) >(), wxS("Title1453") > , Rev< 1u, Arr64< Hash(wxS("Author221")) >(), wxS("Title180") > , Rev< 2u, Arr64< Hash(wxS("Author1757")) >(), wxS("Title1363") >  >() },
    { 2418u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Add support for <code>std::generator</code>-like types to <code>std::format</code>") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Add support for <code>std::generator</code>-like types to <code>std::format</code>") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Add support for <code>std::generator</code>-like types to <code>std::format</code>") >  >() },
    { 2419u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Clarify handling of encodings in localized formatting of chrono types") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Clarify handling of encodings in localized formatting of chrono types") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Clarify handling of encodings in localized formatting of chrono types") >  >() },
    { 2420u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Summer Library Evolution Polls") >  >() },
    { 2422u, RevList< Rev< 0u, Arr64< Hash(wxS("Author203")) >(), wxS("Remove nodiscard annotations from the standard library specification") > , Rev< 1u, Arr64< Hash(wxS("Author1831")) >(), wxS("Remove nodiscard annotations from the standard library specification") >  >() },
    { 2423u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1672")) >(), wxS("C++ Liaison CFP C Summary") >  >() },
    { 2424u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Abbreviated Parameters") >  >() },
    { 2425u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Expression Function Body") >  >() },
    { 2428u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2032")) >(), wxS("Title1570") >  >() },
    { 2429u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1503")) >(), wxS("Title1168") >  >() },
    { 2430u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("SenderReceiverPartial") >  >() },
    { 2431u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1258")) >(), wxS("Slide 1") >  >() },
    { 2432u, RevList< Rev< 0u, Arr64< Hash(wxS("Author375")) >(), wxS("P2432R0") > , Rev< 1u, Arr64< Hash(wxS("Author1635")) >(), wxS("Fix istream_view, Rev 1") >  >() },
    { 2434u, RevList< Rev< 0u, Arr64< Hash(wxS("Author589")) >(), wxS("Nondeterministic pointer provenance") > , Rev< 1u, Arr64< Hash(wxS("Author1106")) >(), wxS("Nondeterministic pointer provenance") > , Rev< 2u, Arr64< Hash(wxS("Author1041")) >(), wxS("Nondeterministic pointer provenance") > , Rev< 3u, Arr64< Hash(wxS("Author1738")) >(), wxS("Nondeterministic pointer provenance") >  >() },
    { 2435u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Summer Library Evolution Poll Outcomes") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 Summer Library Evolution Poll Outcomes") >  >() },
    { 2436u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 September Library Evolution Polls") >  >() },
    { 2437u, RevList< Rev< 0u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title705") > , Rev< 1u, Arr64< Hash(wxS("Aaron Ballman")) >(), wxS("Title829") >  >() },
    { 2438u, RevList< Rev< 0u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::string::substr() &&") > , Rev< 1u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::string::substr() &&") > , Rev< 2u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::string::substr() &&") >  >() },
    { 2439u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("What is a view?") >  >() },
    { 2440u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("ranges::iota, ranges::shift_left, and ranges::shift_right") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("ranges::iota, ranges::shift_left, and ranges::shift_right") >  >() },
    { 2441u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::join_with") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::join_with") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::join_with") >  >() },
    { 2442u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Windowing range adaptors: views::chunk and views::slide") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Windowing range adaptors: views::chunk and views::slide") >  >() },
    { 2443u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::chunk_by") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::chunk_by") >  >() },
    { 2444u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2052")) >(), wxS("TheAsioAsyncModel") >  >() },
    { 2445u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("std::forward_like") > , Rev< 1u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("std::forward_like") >  >() },
    { 2446u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::move") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::all_move") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("views::as_rvalue") >  >() },
    { 2447u, RevList< Rev< 0u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::span and the missing constructor") > , Rev< 1u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::span and the missing constructor") > , Rev< 2u, Arr64< Hash(wxS("federico.kircheis@gmail.com")) >(), wxS("std::span and the missing constructor") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("<code>std::span</code> over an initializer list") > , Rev< 4u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("<code>std::span</code> over an initializer list") > , Rev< 5u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("<code>std::span</code> over an initializer list") > , Rev< 6u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("<code>std::span</code> over an initializer list") >  >() },
    { 2448u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Relaxing some constexpr restrictions") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Relaxing some constexpr restrictions") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Relaxing some constexpr restrictions") >  >() },
    { 2450u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1357")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021") >  >() },
    { 2451u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 September Library Evolution Poll Outcomes") >  >() },
    { 2452u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 October Library Evolution and Concurrency Polls on Networking and Executors") >  >() },
    { 2453u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 October Library Evolution and Concurrency Networking and Executors Poll Outcomes") >  >() },
    { 2454u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 November Library Evolution Polls") >  >() },
    { 2455u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 November Library Evolution Poll Outcomes") >  >() },
    { 2456u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 December Library Evolution Polls") >  >() },
    { 2457u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2021 December Library Evolution Poll Outcomes") >  >() },
    { 2458u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022 January Library Evolution Polls") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022 January Library Evolution Polls") >  >() },
    { 2459u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022 January Library Evolution Poll Outcomes") >  >() },
    { 2460u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title165") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1508") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1") >  >() },
    { 2461u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Closure-Based Syntax for Contracts") > , Rev< 1u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Closure-Based Syntax for Contracts") >  >() },
    { 2462u, RevList< Rev< 0u, Arr64< Hash(wxS("Author114")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2463u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Kohlhoff")) >(), wxS("AsioAsyncModel") >  >() },
    { 2464u, RevList< Rev< 0u, Arr64< Hash(wxS("Author813")) >(), wxS("Ruminations on networking and executors") >  >() },
    { 2465u, RevList< Rev< 0u, Arr64< Hash(wxS("Author572")) >(), wxS("Title463") > , Rev< 1u, Arr64< Hash(wxS("Author64")) >(), wxS("Title68") > , Rev< 2u, Arr64< Hash(wxS("Author239")) >(), wxS("Title199") > , Rev< 3u, Arr64< Hash(wxS("Author185")) >(), wxS("Title159") >  >() },
    { 2466u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("The notes on contract annotations") >  >() },
    { 2467u, RevList< Rev< 0u, Arr64< Hash(wxS("Author216")) >(), wxS("Support exclusive mode for fstreams") > , Rev< 1u, Arr64< Hash(wxS("Author2073")) >(), wxS("Support exclusive mode for fstreams") >  >() },
    { 2468u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("The Equality Operator You Are Looking For") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("P2468R1R1: The Equality Operator You Are Looking For") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("The Equality Operator You Are Looking For") >  >() },
    { 2469u, RevList< Rev< 0u, Arr64< Hash(wxS("Jamie Allsop")) >(), wxS("Response to P2464") >  >() },
    { 2470u, RevList< Rev< 0u, Arr64< Hash(wxS("Author685")) >(), wxS("Slide 1") >  >() },
    { 2471u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("NetTS, ASIO and Sender Library Design Comparison") > , Rev< 1u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("NetTS, ASIO and Sender Library Design Comparison") >  >() },
    { 2472u, RevList< Rev< 0u, Arr64< Hash(wxS("Jarrad J")) >(), wxS("make_function_ref: A More Functional function_ref") > , Rev< 1u, Arr64< Hash(wxS("Author941")) >(), wxS("make_function_ref_more_functional") > , Rev< 2u, Arr64< Hash(wxS("Author342")) >(), wxS("make_function_ref_more_functional") > , Rev< 3u, Arr64< Hash(wxS("Author1783")) >(), wxS("make function_ref more functional - HackMD") >  >() },
    { 2473u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel")) >(), wxS("Title1084") > , Rev< 1u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Distributing C++ Module Libraries") >  >() },
    { 2474u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`views::repeat`") > , Rev< 1u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`views::repeat`") > , Rev< 2u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("`views::repeat`") >  >() },
    { 2475u, RevList< Rev< 0u, Arr64< Hash(wxS("Author675")) >(), wxS("WG21 2021-10 Virtual Meeting Record of Discussion.docx") >  >() },
    { 2477u, RevList< Rev< 0u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow programmer to control and detect coroutine elision by static constexpr bool should_elide() and coroutine_handle::elided()") > , Rev< 1u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow programmer to control and detect coroutine elision by static constexpr bool must_elide() and coroutine_handle::elided()") > , Rev< 2u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow programmer to control and detect coroutine elision") > , Rev< 3u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow programmers to control coroutine elision") >  >() },
    { 2478u, RevList< Rev< 0u, Arr64< Hash(wxS("Hubert S.K")) >(), wxS("_Thread_local for better C++ interoperability with C") >  >() },
    { 2479u, RevList< Rev< 0u, Arr64< Hash(wxS("Author41")) >(), wxS("Title36") >  >() },
    { 2480u, RevList< Rev< 0u, Arr64< Hash(wxS("Jamie Allsop")) >(), wxS("Response to P2471") >  >() },
    { 2481u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Forwarding reference to specific type/template") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Forwarding reference to specific type/template") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Forwarding reference to specific type/template") >  >() },
    { 2483u, RevList< Rev< 0u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("Support Non-copyable Types for `single_view`") >  >() },
    { 2484u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Smith")) >(), wxS("Extending support for class types as non-type template parameters") >  >() },
    { 2485u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1214")) >(), wxS("Do not add value_exists and value_or to C++23") >  >() },
    { 2486u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Structured naming for function object and CPO values") > , Rev< 1u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("Structured naming for function object and CPO values") >  >() },
    { 2487u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Attribute-like syntax for contract annotations") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Is attribute-like syntax adequate for contract annotations?") >  >() },
    { 2489u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Library Evolution Plan for Completing C++23") >  >() },
    { 2490u, RevList< Rev< 0u, Arr64< Hash(wxS("Ed Catmur")) >(), wxS("Zero-overhead exception stacktraces") > , Rev< 3u, Arr64< Hash(wxS("Ed Catmur")) >(), wxS("Zero-overhead exception stacktraces") >  >() },
    { 2491u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Text encodings follow-up") >  >() },
    { 2492u, RevList< Rev< 0u, Arr64< Hash(wxS("Author976")) >(), wxS("Attending C++ Standards Committee Meetings During a Pandemic") >  >() },
    { 2493u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Missing feature test macros for C++20 core papers") >  >() },
    { 2494u, RevList< Rev< 0u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Relaxing range adaptors to allow for move only types") > , Rev< 1u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Relaxing range adaptors to allow for move only types") > , Rev< 2u, Arr64< Hash(wxS("Micha\u0142 Dominiak")) >(), wxS("Relaxing range adaptors to allow for move only types") >  >() },
    { 2495u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1669") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title366") > , Rev< 2u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1485") > , Rev< 3u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1137") >  >() },
    { 2497u, RevList< Rev< 0u, Arr64< Hash(wxS("Author109")) >(), wxS("Testing for success or failure of <charconv> functions") >  >() },
    { 2498u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1367")) >(), wxS("Title1060") > , Rev< 1u, Arr64< Hash(wxS("Author1976")) >(), wxS("Title1536") >  >() },
    { 2499u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("`string_view` range constructor should be `explicit`") >  >() },
    { 2500u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++17 parallel algorithms and P2300") > , Rev< 1u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel algorithms and P2300") > , Rev< 2u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel algorithms and P2300") >  >() },
    { 2501u, RevList< Rev< 0u, Arr64< Hash(wxS("Author65")) >(), wxS("Undo the rename of views::move and views::as_const") >  >() },
    { 2502u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Title725") > , Rev< 1u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Title1163") > , Rev< 2u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("Title3") >  >() },
    { 2504u, RevList< Rev< 0u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("Computations as a global solution to concurrency") >  >() },
    { 2505u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R0 Monadic Functions for <code>std::expected</code>") > , Rev< 1u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R1 Monadic Functions for <code>std::expected</code>") > , Rev< 2u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R2 Monadic Functions for <code>std::expected</code>") > , Rev< 3u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R3 Monadic Functions for <code>std::expected</code>") > , Rev< 4u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R4 Monadic Functions for <code>std::expected</code>") > , Rev< 5u, Arr64< Hash(wxS("Jeff Garland")) >(), wxS("P2505R5 Monadic Functions for <code>std::expected</code>") >  >() },
    { 2506u, RevList< Rev< 0u, Arr64< Hash(wxS("Casey Carter")) >(), wxS("P2506") >  >() },
    { 2507u, RevList< Rev< 0u, Arr64< Hash(wxS("Author438")) >(), wxS("Title371") > , Rev< 1u, Arr64< Hash(wxS("Author1265")) >(), wxS("Title978") >  >() },
    { 2508u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Expose std::$basic-format-string$<charT, Args...>") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Expose std::$basic-format-string$<charT, Args...>") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Expose std::$basic-format-string$<charT, Args...>") >  >() },
    { 2509u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("A proposal for a type trait to detect value-preserving conversions") >  >() },
    { 2510u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark de")) >(), wxS("Title531") > , Rev< 1u, Arr64< Hash(wxS("Mark de")) >(), wxS("Title1677") > , Rev< 2u, Arr64< Hash(wxS("Mark de")) >(), wxS("Title336") > , Rev< 3u, Arr64< Hash(wxS("Mark de")) >(), wxS("Title1615") >  >() },
    { 2511u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Beyond operator(): NTTP callables in type-erased call wrappers - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Beyond operator(): NTTP callables in type-erased call wrappers - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Beyond operator(): NTTP callables in type-erased call wrappers - HackMD") >  >() },
    { 2512u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2021-06-09 through 2021-12-15") >  >() },
    { 2513u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("char8_t Compatibility and Portability Fixes") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("char8_t Compatibility and Portability Fix") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("char8_t Compatibility and Portability Fix") > , Rev< 3u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("D2513R3: char8_t Compatibility and Portability Fix") > , Rev< 4u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("char8_t Compatibility and Portability Fix") >  >() },
    { 2514u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("std::breakpoint") >  >() },
    { 2515u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("std::is_debugger_present") >  >() },
    { 2516u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("<code>string_view</code> is implicitly convertible from what?") >  >() },
    { 2517u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1065")) >(), wxS("Add a conditional noexcept specification to std::apply") > , Rev< 1u, Arr64< Hash(wxS("Author1377")) >(), wxS("Add a conditional noexcept specification to std::apply") >  >() },
    { 2520u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("move_iterator<T*> should be a random access iterator") >  >() },
    { 2521u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Working Paper") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Working Paper") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Working Paper") > , Rev< 3u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Record of SG21 consensus") > , Rev< 4u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Record of SG21 consensus") > , Rev< 5u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract support Record of SG21 consensus") >  >() },
    { 2523u, RevList< Rev< 0u, Arr64< Hash(wxS("This was")) >(), wxS("Request for re-inclusion of std::hive proposal in C++23") >  >() },
    { 2524u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1102") >  >() },
    { 2525u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title848") >  >() },
    { 2527u, RevList< Rev< 0u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("std::variant_alternative_index and std::variant_alternative_index_v") > , Rev< 1u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("std::variant_alternative_index and std::tuple_element_index") > , Rev< 2u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("std::variant_alternative_index and std::tuple_element_index") > , Rev< 3u, Arr64< Hash(wxS("Alex Christensen")) >(), wxS("std::variant_alternative_index and std::tuple_element_index") >  >() },
    { 2528u, RevList< Rev< 0u, Arr64< Hash(wxS("Reini Urban")) >(), wxS("P2528R0") >  >() },
    { 2529u, RevList< Rev< 0u, Arr64< Hash(wxS("Mathias Stearn")) >(), wxS("generator<T> should have T&& reference_type") >  >() },
    { 2530u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Why Hazard Pointers Should be in C++26") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Why Hazard Pointers Should be in C++26") > , Rev< 2u, Arr64< Hash(wxS("Maged M")) >(), wxS("Why Hazard Pointers Should be in C++26") > , Rev< 3u, Arr64< Hash(wxS("Maged M")) >(), wxS("Why Hazard Pointers Should be in C++26") >  >() },
    { 2531u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1546")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2022") >  >() },
    { 2532u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Removing exception_ptr from the Receiver Concepts") >  >() },
    { 2533u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2065")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2534u, RevList< Rev< 0u, Arr64< Hash(wxS("Author314")) >(), wxS("function_ref in the wild") >  >() },
    { 2535u, RevList< Rev< 0u, Arr64< Hash(wxS("dlustig@nvidia.com, ogiroux@nvidia.com")) >(), wxS("Title458") >  >() },
    { 2536u, RevList< Rev< 0u, Arr64< Hash(wxS("Olga Arkhipova")) >(), wxS("Microsoft Word - Distributing C++ Module Libraries with dependencies json files.docx") >  >() },
    { 2537u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Relax va_start Requirements to Match C") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Relax va_start Requirements to Match C") > , Rev< 2u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("Relax va_start Requirements to Match C") >  >() },
    { 2538u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("ADL-proof std::projected") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("ADL-proof std::projected") >  >() },
    { 2539u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Should the output of std::print to a terminal be synchronized with the underlying stream?") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Should the output of std::print to a terminal be synchronized with the underlying stream?") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Should the output of std::print to a terminal be synchronized with the underlying stream?") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Should the output of std::print to a terminal be synchronized with the underlying stream?") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Should the output of std::print to a terminal be synchronized with the underlying stream?") >  >() },
    { 2540u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Empty Product for certain Views") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Empty Product for certain Views") >  >() },
    { 2541u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Consider renaming remove_quals.docx") >  >() },
    { 2542u, RevList< Rev< 0u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 1u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 2u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 3u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 4u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 5u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 6u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 7u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") > , Rev< 8u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`views::concat`") >  >() },
    { 2544u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Neumann")) >(), wxS("C++ exceptions are becoming more and more problematic") >  >() },
    { 2545u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Why RCU Should be in C++26") > , Rev< 1u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Why RCU Should be in C++26") > , Rev< 2u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Why RCU Should be in C++26") > , Rev< 3u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Why RCU Should be in C++26") > , Rev< 4u, Arr64< Hash(wxS("Paul McKenney")) >(), wxS("Read-Copy Update (RCU)") >  >() },
    { 2546u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Debugging Support") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Debugging Support") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Debugging Support") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Debugging Support") > , Rev< 4u, Arr64< Hash(wxS("1")) >(), wxS("Debugging Support") > , Rev< 5u, Arr64< Hash(wxS("1")) >(), wxS("Debugging Support") >  >() },
    { 2547u, RevList< Rev< 0u, Arr64< Hash(wxS("Author99")) >(), wxS("P2547R0 - Language support for customisable functions") > , Rev< 1u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Language Support for Customisable Functions") >  >() },
    { 2548u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title528") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title790") > , Rev< 2u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1455") > , Rev< 3u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title48") > , Rev< 4u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1315") > , Rev< 5u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1026") > , Rev< 6u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1034") >  >() },
    { 2549u, RevList< Rev< 0u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("std::unexpected<E> should have error() as member accessor") > , Rev< 1u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("std::unexpected<E> should have error() as member accessor") >  >() },
    { 2550u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("ranges::copy should say output_iterator somewhere") >  >() },
    { 2551u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Clarify intent of P1841 numeric traits [P2551R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Clarify intent of P1841 numeric traits [P2551R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Clarify intent of P1841 numeric traits [P2551R2]") >  >() },
    { 2552u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1169")) >(), wxS("Title925") > , Rev< 1u, Arr64< Hash(wxS("Author733")) >(), wxS("Title590") > , Rev< 2u, Arr64< Hash(wxS("Author483")) >(), wxS("Title403") > , Rev< 3u, Arr64< Hash(wxS("Author538")) >(), wxS("Title436") >  >() },
    { 2553u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Make mdspan size_type controllable") > , Rev< 1u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Make mdspan size_type controllable") >  >() },
    { 2554u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("C-Array Interoperability of MDSpan") >  >() },
    { 2555u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("DxxxxR0: Naming improvements for std::execution") > , Rev< 1u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Naming improvements for std::execution") >  >() },
    { 2557u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1547")) >(), wxS("WG21 2022-02 Virtual Meeting Record of Discussion.docx") >  >() },
    { 2558u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Add @, $, and ` to the basic character set") > , Rev< 1u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Add @, $, and ` to the basic character set") > , Rev< 2u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Add @, $, and ` to the basic character set") >  >() },
    { 2559u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Plan for Concurrency Technical Specification Version 2") > , Rev< 1u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("Plan for Concurrency Technical Specification Version 2") >  >() },
    { 2560u, RevList< Rev< 0u, Arr64< Hash(wxS("Author633")) >(), wxS("Title515") >  >() },
    { 2561u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("operator??") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("An error propagation operator") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A control flow operator") >  >() },
    { 2562u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1758")) >(), wxS("Title1364") > , Rev< 1u, Arr64< Hash(wxS("Author220")) >(), wxS("Title179") >  >() },
    { 2564u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry \u201CPatch\u201D")) >(), wxS("consteval needs to propagate up") > , Rev< 1u, Arr64< Hash(wxS("Barry \u201CPatch\u201D")) >(), wxS("consteval needs to propagate up") > , Rev< 2u, Arr64< Hash(wxS("Barry \u201CPatch\u201D")) >(), wxS("consteval needs to propagate up") > , Rev< 3u, Arr64< Hash(wxS("Barry \u201CPatch\u201D")) >(), wxS("consteval needs to propagate up") >  >() },
    { 2565u, RevList< Rev< 0u, Arr64< Hash(wxS("Bret Brown")) >(), wxS("D2565R0_Supporting_User-Defined_Attributes") >  >() },
    { 2568u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P2568R0 Proposal of std::map::at_ptr") >  >() },
    { 2569u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1114")) >(), wxS("N2797: *_HAS_SUBNORM==0 implies what?") >  >() },
    { 2570u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("On side effects in contract annotations") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract predicates that are not predicates") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract predicates that are not predicates") >  >() },
    { 2572u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639") > , Rev< 1u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("std::format() fill character allowances;proposed resolution for LWG issues 3576 and 3639") >  >() },
    { 2573u, RevList< Rev< 0u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("<code>= delete(\"should have a reason\");</code>") > , Rev< 1u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("= delete(\"should have a reason\");") > , Rev< 2u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("= delete(\"should have a reason\");") >  >() },
    { 2574u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-05 Library Evolution Polls") >  >() },
    { 2575u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-05 Library Evolution Poll Outcomes") >  >() },
    { 2576u, RevList< Rev< 0u, Arr64< Hash(wxS("Author446")) >(), wxS("The constexpr specifier for object definitions") >  >() },
    { 2577u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Discovering C++ modules in pre-built library releases") > , Rev< 1u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Discovering C++ modules in pre-built library releases") > , Rev< 2u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Discovering C++ modules in pre-built library releases") >  >() },
    { 2579u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1599") >  >() },
    { 2580u, RevList< Rev< 0u, Arr64< Hash(wxS("Paolo Di")) >(), wxS("Tuple protocol for C-style arrays T[N]") >  >() },
    { 2581u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Specifying the Interoperability of Binary Module Interface Files") > , Rev< 1u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Specifying the Interoperability of Built Module Interface Files") > , Rev< 2u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Specifying the Interoperability of Built Module Interface Files") >  >() },
    { 2582u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1543")) >(), wxS("Title1196") > , Rev< 1u, Arr64< Hash(wxS("Author1047")) >(), wxS("Title841") >  >() },
    { 2584u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1211") >  >() },
    { 2585u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Improve default container formatting") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Improve default container formatting") >  >() },
    { 2586u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title931") >  >() },
    { 2587u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("<code>to_string</code> or not <code>to_string</code>") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("D2587R1: <code>to_string</code> or not <code>to_string</code>") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("<code>to_string</code> or not <code>to_string</code>") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("<code>to_string</code> or not <code>to_string</code>") >  >() },
    { 2588u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("barriers phase completion guarantees - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("barriers phase completion guarantees") > , Rev< 2u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("barriers phase completion guarantees") > , Rev< 3u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("barriers phase completion guarantees - HackMD") >  >() },
    { 2589u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1477") > , Rev< 1u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1633") >  >() },
    { 2590u, RevList< Rev< 0u, Arr64< Hash(wxS("Author949")) >(), wxS("Title769") > , Rev< 1u, Arr64< Hash(wxS("Author546")) >(), wxS("Title445") > , Rev< 2u, Arr64< Hash(wxS("Author621")) >(), wxS("Title506") >  >() },
    { 2591u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") > , Rev< 2u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") > , Rev< 3u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") > , Rev< 4u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") > , Rev< 5u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Concatenation of strings and string views") >  >() },
    { 2592u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Hashing support for std::chrono value classes") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Hashing support for std::chrono value classes") > , Rev< 2u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Hashing support for std::chrono value classes") > , Rev< 3u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Hashing support for std::chrono value classes") >  >() },
    { 2593u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Allowing static_assert(false)") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Allowing static_assert(false)") >  >() },
    { 2594u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1638")) >(), wxS("Title1270") > , Rev< 1u, Arr64< Hash(wxS("Author1060")) >(), wxS("Title852") >  >() },
    { 2596u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Improve std::hive::reshape") >  >() },
    { 2598u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1509")) >(), wxS("\"Changing scope for lambda trailing-return-type\" (P2036) should not be a DR") >  >() },
    { 2599u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title480") > , Rev< 1u, Arr64< Hash(wxS("__ 1")) >(), wxS("Title1111") > , Rev< 2u, Arr64< Hash(wxS("__ 1")) >(), wxS("Title1142") >  >() },
    { 2600u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("A minimal ADL restriction to avoid ill-formed template instantiation [P2600R0]") >  >() },
    { 2601u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Cooke")) >(), wxS("Title1290") > , Rev< 1u, Arr64< Hash(wxS("Justin Cooke")) >(), wxS("Title295") >  >() },
    { 2602u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Poison Pills are Too Toxic") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Poison Pills are Too Toxic") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Poison Pills are Too Toxic") >  >() },
    { 2603u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1419")) >(), wxS("member function pointer to function pointer - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1693")) >(), wxS("member function pointer to function pointer - HackMD") >  >() },
    { 2604u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("mdspan: rename pointer and contiguous") >  >() },
    { 2605u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2022-01-12 through 2022-06-08") >  >() },
    { 2607u, RevList< Rev< 0u, Arr64< Hash(wxS("Author596")) >(), wxS("Title487") >  >() },
    { 2608u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Cooke")) >(), wxS("Title961") >  >() },
    { 2609u, RevList< Rev< 0u, Arr64< Hash(wxS("John Eivind")) >(), wxS("Relaxing Ranges Just A Smidge") > , Rev< 1u, Arr64< Hash(wxS("John Eivind")) >(), wxS("Relaxing Ranges Just A Smidge") > , Rev< 2u, Arr64< Hash(wxS("John Eivind")) >(), wxS("Relaxing Ranges Just A Smidge") > , Rev< 3u, Arr64< Hash(wxS("John Eivind")) >(), wxS("Relaxing Ranges Just A Smidge") >  >() },
    { 2610u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-07 Library Evolution Polls") >  >() },
    { 2611u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-07 Library Evolution Poll Outcomes") >  >() },
    { 2613u, RevList< Rev< 0u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("Add the missing empty to mdspan") > , Rev< 1u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("Add the missing empty to mdspan") >  >() },
    { 2614u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Deprecate numeric_limits::has_denorm [P2614R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Deprecate numeric_limits::has_denorm [P2614R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Deprecate numeric_limits::has_denorm [P2614R2]") >  >() },
    { 2615u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1845")) >(), wxS("Meaningful exports") > , Rev< 1u, Arr64< Hash(wxS("Author1126")) >(), wxS("Meaningful exports") >  >() },
    { 2616u, RevList< Rev< 0u, Arr64< Hash(wxS("Author846")) >(), wxS("Making std::atomic notification/wait operations usable in more situations") > , Rev< 1u, Arr64< Hash(wxS("Author893")) >(), wxS("Revision History") > , Rev< 2u, Arr64< Hash(wxS("Author630")) >(), wxS("Making std::atomic notification/wait operations usable in more situations") > , Rev< 3u, Arr64< Hash(wxS("Author62")) >(), wxS("Making std::atomic notification/wait operations usable in more situations") > , Rev< 4u, Arr64< Hash(wxS("Author77")) >(), wxS("Making std::atomic notification/wait operations usable in more situations") >  >() },
    { 2617u, RevList< Rev< 0u, Arr64< Hash(wxS("Jens Maurer")) >(), wxS("Responses to NB comments on DTS 12907 \"Extensions to C++ forTransactional Memory Version 2\"") >  >() },
    { 2618u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1010")) >(), wxS("C++ Standard Library Issues to be moved in Virtual Plenary, Jul. 2022") >  >() },
    { 2620u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1318") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1519") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1035") >  >() },
    { 2621u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1467") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title355") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1045") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title249") >  >() },
    { 2622u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1800")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2623u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1210")) >(), wxS("implicit constant initialization - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author2173")) >(), wxS("implicit constant initialization - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1022")) >(), wxS("implicit constant initialization - HackMD") >  >() },
    { 2624u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Cooke")) >(), wxS("Title220") >  >() },
    { 2625u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2154")) >(), wxS("Life without operator()") >  >() },
    { 2626u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1173") >  >() },
    { 2627u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1401")) >(), wxS("P2627 WG21 2022-07 Virtual Meeting Record of Discussion.docx") >  >() },
    { 2628u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Extend barrier APIs with memory_order") >  >() },
    { 2629u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("barrier token-less split arrive/wait") >  >() },
    { 2630u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Submdspan") > , Rev< 1u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Submdspan") > , Rev< 2u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Submdspan") > , Rev< 3u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Submdspan") > , Rev< 4u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Submdspan") >  >() },
    { 2631u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1438")) >(), wxS("Publish TS Library Fundamentals 3 Now!") >  >() },
    { 2632u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title792") >  >() },
    { 2633u, RevList< Rev< 0u, Arr64< Hash(wxS("Justin Cooke")) >(), wxS("Title230") >  >() },
    { 2634u, RevList< Rev< 0u, Arr64< Hash(wxS("Author447")) >(), wxS("Title376") >  >() },
    { 2635u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1803")) >(), wxS("Title1399") >  >() },
    { 2636u, RevList< Rev< 0u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("References to ranges should always be viewable") > , Rev< 1u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("References to ranges should always be viewable") > , Rev< 2u, Arr64< Hash(wxS("Hannes Hauswedell")) >(), wxS("References to ranges should always be viewable") >  >() },
    { 2637u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Member visit and apply") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Member visit") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Member visit") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Member visit") >  >() },
    { 2638u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1842")) >(), wxS("Title1430") >  >() },
    { 2639u, RevList< Rev< 0u, Arr64< Hash(wxS("Torben Thaysen")) >(), wxS("Title1158") >  >() },
    { 2640u, RevList< Rev< 0u, Arr64< Hash(wxS("Author913")) >(), wxS("Modules: Inner-scope Namespace Entities: Exported or Not?") > , Rev< 1u, Arr64< Hash(wxS("Author789")) >(), wxS("Modules: Inner-scope Namespace Entities: Exported or Not?") > , Rev< 2u, Arr64< Hash(wxS("Author1772")) >(), wxS("Modules: Inner-scope Namespace Entities: Exported or Not?") >  >() },
    { 2641u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Checking if a union alternative is active") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Checking if a union alternative is active") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Checking if a union alternative is active") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Checking if a union alternative is active") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Checking if a union alternative is active") >  >() },
    { 2642u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Padded mdspan layouts") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Padded mdspan layouts") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Padded mdspan layouts") > , Rev< 3u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Padded mdspan layouts") > , Rev< 4u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Padded mdspan layouts") > , Rev< 5u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Padded mdspan layouts") > , Rev< 6u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Title1619") >  >() },
    { 2643u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Improving C++ concurrency features") > , Rev< 1u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Improving C++ concurrency features") > , Rev< 2u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Improving C++ concurrency features") >  >() },
    { 2644u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Final Fix of Broken Range-based for Loop") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Final Fix of Broken Range-Based for Loop") >  >() },
    { 2645u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("path_view: a design that took a wrong turn") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("path_view: a design that took a wrong turn") >  >() },
    { 2646u, RevList< Rev< 0u, Arr64< Hash(wxS("Parsa Amini")) >(), wxS("Title624") >  >() },
    { 2647u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Permitting static constexpr variables in constexpr functions") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Permitting static constexpr variables in constexpr functions") >  >() },
    { 2648u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-10 Library Evolution Polls") >  >() },
    { 2649u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-10 Library Evolution Poll Outcomes") >  >() },
    { 2650u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2022-11 Library Evolution Polls") >  >() },
    { 2652u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2009")) >(), wxS("Disallow user specialization of allocator_traits") > , Rev< 1u, Arr64< Hash(wxS("Author190")) >(), wxS("Disallow User Specialization of allocator_traits") > , Rev< 2u, Arr64< Hash(wxS("Author61")) >(), wxS("Disallow User Specialization of allocator_traits") >  >() },
    { 2653u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2048")) >(), wxS("Title1589") > , Rev< 1u, Arr64< Hash(wxS("Author1881")) >(), wxS("Title1458") >  >() },
    { 2654u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Macros And Standard Library Modules") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Macros And Standard Library Modules") >  >() },
    { 2655u, RevList< Rev< 0u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`common_reference_t` of `reference_wrapper` Should Be a Reference Type") > , Rev< 1u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`common_reference_t` of `reference_wrapper` Should Be a Reference Type") > , Rev< 2u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`common_reference_t` of `reference_wrapper` Should Be aReference Type") > , Rev< 3u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`common_reference_t` of `reference_wrapper` Should Be aReference Type") >  >() },
    { 2656u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("C++ Ecosystem International Standard") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("C++ Ecosystem International Standard") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("C++ Ecosystem International Standard") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("C++ Ecosystem International Standard") > , Rev< 4u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: C++ Ecosystem International Standard") >  >() },
    { 2657u, RevList< Rev< 0u, Arr64< Hash(wxS("Author101")) >(), wxS("C++ is the next C++ - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1")) >(), wxS("C++ is the next C++ - HackMD") >  >() },
    { 2658u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1042")) >(), wxS("temporary storage class specifiers - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1095")) >(), wxS("temporary storage class specifiers - HackMD") >  >() },
    { 2659u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1545")) >(), wxS("A Proposal to Publish a Technical Specification for Contracts") > , Rev< 1u, Arr64< Hash(wxS("Author444")) >(), wxS("A Proposal to Publish a Technical Specificationfor Contracts") > , Rev< 2u, Arr64< Hash(wxS("Author471")) >(), wxS("A Proposal to Publish a Technical Specificationfor Contracts") >  >() },
    { 2660u, RevList< Rev< 0u, Arr64< Hash(wxS("Author909")) >(), wxS("C++ Information technology Extensions for contracts") >  >() },
    { 2661u, RevList< Rev< 0u, Arr64< Hash(wxS("Author206")) >(), wxS("Miscellaneous amendments to the Contracts TS") >  >() },
    { 2662u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title933") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title113") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title235") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1450") >  >() },
    { 2663u, RevList< Rev< 0u, Arr64< Hash(wxS("Author83")) >(), wxS("Title") > , Rev< 1u, Arr64< Hash(wxS("Author107")) >(), wxS("Title") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") > , Rev< 3u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") > , Rev< 4u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") > , Rev< 5u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") > , Rev< 6u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") > , Rev< 7u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Interleaved complex values support in std::simd") >  >() },
    { 2664u, RevList< Rev< 0u, Arr64< Hash(wxS("Author149")) >(), wxS("Title") > , Rev< 1u, Arr64< Hash(wxS("Author1391")) >(), wxS("Title") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend std::simd with permutation API") > , Rev< 3u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend std::simd with permutation API") > , Rev< 4u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend std::simd with permutation API") > , Rev< 5u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend std::simd with permutation API") > , Rev< 6u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend std::simd with permutation API") > , Rev< 7u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend std::simd with permutation API") > , Rev< 8u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend std::simd with permutation API") > , Rev< 9u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend std::simd with permutation API") >  >() },
    { 2665u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Title364") >  >() },
    { 2666u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Title740") >  >() },
    { 2667u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Title1326") >  >() },
    { 2668u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Title485") >  >() },
    { 2669u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Title518") >  >() },
    { 2670u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Non-transient constexpr allocation") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Non-transient constexpr allocation") >  >() },
    { 2671u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Syntax Choices for Generalized Pack Declaration and Usage") >  >() },
    { 2672u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Exploring the Design Space for a Pipeline Operator") >  >() },
    { 2673u, RevList< Rev< 0u, Arr64< Hash(wxS("Author713")) >(), wxS("Title575") >  >() },
    { 2674u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2057")) >(), wxS("Title1595") > , Rev< 1u, Arr64< Hash(wxS("Author1480")) >(), wxS("Title1151") >  >() },
    { 2675u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1607")) >(), wxS("LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)") > , Rev< 1u, Arr64< Hash(wxS("Author674")) >(), wxS("LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)") >  >() },
    { 2676u, RevList< Rev< 0u, Arr64< Hash(wxS("Dave Abrahams")) >(), wxS("The Val Object Model") >  >() },
    { 2677u, RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Title701") > , Rev< 2u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Title957") >  >() },
    { 2678u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2022-06-22 through 2022-09-28") >  >() },
    { 2679u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1456")) >(), wxS("Title1135") > , Rev< 1u, Arr64< Hash(wxS("Author135")) >(), wxS("Title116") > , Rev< 2u, Arr64< Hash(wxS("Author1125")) >(), wxS("Title898") >  >() },
    { 2680u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title1248") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title870") >  >() },
    { 2681u, RevList< Rev< 0u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title1286") > , Rev< 1u, Arr64< Hash(wxS("Richard Dosselmann")) >(), wxS("Title170") >  >() },
    { 2682u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title489") >  >() },
    { 2683u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title649") >  >() },
    { 2684u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1451") >  >() },
    { 2685u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1778")) >(), wxS("Language Support For Scoped Allocators") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Language Support For Scoped Objects") >  >() },
    { 2686u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title39") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title935") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title707") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1143") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1048") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title746") >  >() },
    { 2687u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1630")) >(), wxS("Title1263") >  >() },
    { 2688u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Pattern Matching Discussion for Kona 2022") > , Rev< 1u, Arr64< Hash(wxS("structure_map")) >(), wxS("Pattern Matching: Expression") > , Rev< 2u, Arr64< Hash(wxS("structure_map")) >(), wxS("Pattern Matching: `match` Expression") > , Rev< 3u, Arr64< Hash(wxS("structure_map")) >(), wxS("Pattern Matching: `match` Expression") > , Rev< 4u, Arr64< Hash(wxS("structure_map")) >(), wxS("Pattern Matching: `match` Expression") > , Rev< 5u, Arr64< Hash(wxS("structure_map")) >(), wxS("Pattern Matching: `match` Expression") >  >() },
    { 2689u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("atomic_accessor") > , Rev< 1u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Atomic Refs Bounded to Memory Orderings & Atomic Accessors") > , Rev< 2u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Atomic Refs Bound to Memory Orderings & Atomic Accessors") > , Rev< 3u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Atomic Refs Bound to Memory Orderings & Atomic Accessors") >  >() },
    { 2690u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++17 parallel algorithms and P2300") > , Rev< 1u, Arr64< Hash(wxS("Author1988")) >(), wxS("Corporate PowerPoint Template Use Intel Clear For All Text (General Employee Usage)") >  >() },
    { 2691u, RevList< Rev< 0u, Arr64< Hash(wxS("Author284")) >(), wxS("Title236") >  >() },
    { 2692u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Generic Programming is just Programming") >  >() },
    { 2693u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1186") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title765") >  >() },
    { 2695u, RevList< Rev< 0u, Arr64< Hash(wxS("Author160")) >(), wxS("A proposed plan for contracts in C++") > , Rev< 1u, Arr64< Hash(wxS("Author580")) >(), wxS("A proposed plan for contracts in C++") >  >() },
    { 2696u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("Introduce Cpp17Swappable as additional convenience requirements") >  >() },
    { 2697u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1305") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("Title1162") >  >() },
    { 2698u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2131")) >(), wxS("Title1644") >  >() },
    { 2700u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1893")) >(), wxS("Questions on P2680 Contracts for C++: Prioritizing Safety") > , Rev< 1u, Arr64< Hash(wxS("Author431")) >(), wxS("Questions on P2680 Contracts for C++: Prioritizing Safety") >  >() },
    { 2701u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Translating Linker Input Files to Module Metadata Files") >  >() },
    { 2702u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Specifying Importable Headers") >  >() },
    { 2703u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1810")) >(), wxS("C++ Standard Library Issues to be moved in Kona") >  >() },
    { 2704u, RevList< Rev< 0u, Arr64< Hash(wxS("Author560")) >(), wxS("C++ Standard Library Immediate Issues to be moved in Kona, Nov. 2022") >  >() },
    { 2705u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1359")) >(), wxS("C++ Library Fundamentals TS Issues to be moved in Kona") >  >() },
    { 2706u, RevList< Rev< 0u, Arr64< Hash(wxS("Author857")) >(), wxS("Drafting for US 26-061") >  >() },
    { 2708u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1734")) >(), wxS("No Further Fundamentals TSes") > , Rev< 1u, Arr64< Hash(wxS("Author501")) >(), wxS("No Further Fundamentals TSes") >  >() },
    { 2709u, RevList< Rev< 0u, Arr64< Hash(wxS("Author80")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2710u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1876")) >(), wxS("Core \"NB\" Issues") >  >() },
    { 2711u, RevList< Rev< 0u, Arr64< Hash(wxS("Author267")) >(), wxS("Making multi-param (and other converting) constructors of views explicit") > , Rev< 1u, Arr64< Hash(wxS("Author731")) >(), wxS("Making multi-param constructors of views explicit") >  >() },
    { 2712u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title665") >  >() },
    { 2713u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Escaping improvements in std::format") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Escaping improvements in std::format") >  >() },
    { 2714u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Bind front and back to NTTP callables - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Bind front and back to NTTP callables - HackMD") >  >() },
    { 2717u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 4u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 5u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Tool Introspection") > , Rev< 6u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: Tool Introspection") >  >() },
    { 2718u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolai Josuttis")) >(), wxS("D2718R0: Wording for P2644R1 Fix for Range-based for Loop") >  >() },
    { 2719u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Type-aware allocation and deallocation functions") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Type-aware allocation and deallocation functions") > , Rev< 2u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Type-aware allocation and deallocation functions") > , Rev< 3u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Type-aware allocation and deallocation functions") > , Rev< 4u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Type-aware allocation and deallocation functions") >  >() },
    { 2721u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("P2721R0") >  >() },
    { 2722u, RevList< Rev< 0u, Arr64< Hash(wxS("Author14")) >(), wxS("Beyond operator()") >  >() },
    { 2723u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Zero-initialize objects of automatic storage duration") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Zero-initialize objects of automatic storage duration") >  >() },
    { 2724u, RevList< Rev< 0u, Arr64< Hash(wxS("Author629")) >(), wxS("constant dangling - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author2008")) >(), wxS("constant dangling - HackMD") >  >() },
    { 2725u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::integral_constant` Literals") > , Rev< 1u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::integral_constant` Literals") >  >() },
    { 2726u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Better `std::tuple` Indexing") >  >() },
    { 2727u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::iterator_interface`") > , Rev< 1u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::iterator_interface`") > , Rev< 2u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::iterator_interface`") > , Rev< 3u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::iterator_interface`") > , Rev< 4u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("`std::iterator_interface`") >  >() },
    { 2728u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 1u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 2u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 3u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 4u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 5u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 6u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") > , Rev< 7u, Arr64< Hash(wxS("1")) >(), wxS("Unicode in the Library, Part 1: UTF Transcoding") >  >() },
    { 2729u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Unicode in the Library, Part 2: Normalization") >  >() },
    { 2730u, RevList< Rev< 0u, Arr64< Hash(wxS("Author692")) >(), wxS("variable scope - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author119")) >(), wxS("variable scope - HackMD") >  >() },
    { 2732u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1648")) >(), wxS("P2732 WG21 2022-11 Kona Record of Discussion.docx") >  >() },
    { 2733u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix handling of empty specifiers in std::format") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix handling of empty specifiers in std::format") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix handling of empty specifiers in std::format") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix handling of empty specifiers in std::format") >  >() },
    { 2734u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc Mutz")) >(), wxS("Title140") >  >() },
    { 2735u, RevList< Rev< 0u, Arr64< Hash(wxS("Author775")) >(), wxS("Title632") >  >() },
    { 2736u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title78") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title464") >  >() },
    { 2737u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Proposal of Condition-centric Contracts Syntax") >  >() },
    { 2738u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title638") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title135") >  >() },
    { 2739u, RevList< Rev< 0u, Arr64< Hash(wxS("Author583")) >(), wxS("Title476") >  >() },
    { 2740u, RevList< Rev< 0u, Arr64< Hash(wxS("Author693")) >(), wxS("Simpler implicit dangling resolution - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author552")) >(), wxS("Simpler implicit dangling resolution - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author2196")) >(), wxS("Simpler implicit dangling resolution - HackMD") >  >() },
    { 2741u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title863") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title416") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1197") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title149") >  >() },
    { 2742u, RevList< Rev< 0u, Arr64< Hash(wxS("Author327")) >(), wxS("indirect dangling identification - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author427")) >(), wxS("indirect dangling identification - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1228")) >(), wxS("indirect dangling identification - HackMD") >  >() },
    { 2743u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1055")) >(), wxS("Contracts for C++: Priorotizing Safety") >  >() },
    { 2746u, RevList< Rev< 0u, Arr64< Hash(wxS("Author981")) >(), wxS("Fenv rounding") > , Rev< 1u, Arr64< Hash(wxS("Author968")) >(), wxS("Fenv rounding") > , Rev< 2u, Arr64< Hash(wxS("Author1176")) >(), wxS("Fenv rounding") > , Rev< 3u, Arr64< Hash(wxS("Author1957")) >(), wxS("Fenv rounding") > , Rev< 4u, Arr64< Hash(wxS("Author512")) >(), wxS("Fenv rounding") > , Rev< 5u, Arr64< Hash(wxS("Author1135")) >(), wxS("Fenv rounding") > , Rev< 6u, Arr64< Hash(wxS("Author1655")) >(), wxS("Fenv rounding") > , Rev< 7u, Arr64< Hash(wxS("Author1467")) >(), wxS("Fenv rounding") >  >() },
    { 2747u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Limited support for constexpr void*") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr placement new") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr placement new") >  >() },
    { 2748u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned glvalue to a Temporary") > , Rev< 1u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") > , Rev< 2u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") > , Rev< 3u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") > , Rev< 4u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") > , Rev< 5u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") >  >() },
    { 2749u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1686") >  >() },
    { 2750u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1361")) >(), wxS("C Dangling Reduction - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author2055")) >(), wxS("C Dangling Reduction - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1642")) >(), wxS("C Dangling Reduction - HackMD") >  >() },
    { 2751u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title620") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1638") >  >() },
    { 2752u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Static storage for braced initializers") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Static storage for braced initializers") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Static storage for braced initializers") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Static storage for braced initializers") >  >() },
    { 2754u, RevList< Rev< 0u, Arr64< Hash(wxS("Jake Fevold")) >(), wxS("Deconstructing the Avoidance of Uninitialized Reads of AutoVariables") >  >() },
    { 2755u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1282") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title309") >  >() },
    { 2756u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("D2756R0 Proposal of Simple Contract Side Effect Semantics") >  >() },
    { 2757u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Type-checking format args") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Type-checking format args") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Type-checking format args") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Type-checking format args") >  >() },
    { 2758u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") > , Rev< 5u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Emitting messages at compile time") >  >() },
    { 2759u, RevList< Rev< 0u, Arr64< Hash(wxS("Author818")) >(), wxS("D2759R0: DG Opinion on Safety for ISO C++") > , Rev< 1u, Arr64< Hash(wxS("Author1843")) >(), wxS("DG Opinion on Safety for ISO C++") >  >() },
    { 2760u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Plan for C++26 Ranges") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Plan for C++26 Ranges") >  >() },
    { 2761u, RevList< Rev< 0u, Arr64< Hash(wxS("Author996")) >(), wxS("If structured binding") > , Rev< 1u, Arr64< Hash(wxS("Author1631")) >(), wxS("If structured binding") > , Rev< 2u, Arr64< Hash(wxS("Author1552")) >(), wxS("Evaluating structured binding as a condition") > , Rev< 3u, Arr64< Hash(wxS("Author1287")) >(), wxS("Title998") >  >() },
    { 2762u, RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Sender/Receiver Interface For Networking") > , Rev< 1u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Sender/Receiver Interface For Networking") > , Rev< 2u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Sender/Receiver Interface For Networking") >  >() },
    { 2763u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("layout_stride static extents default constructor fix") > , Rev< 1u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("layout_stride static extents default constructor fix") >  >() },
    { 2764u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1593") >  >() },
    { 2765u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Title1342") >  >() },
    { 2766u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2022-10-12 through 2022-12-14") >  >() },
    { 2767u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("flat_map/flat_set omnibus") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("flat_map/flat_set omnibus") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("flat_map/flat_set omnibus") >  >() },
    { 2769u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("get_element customization point object") > , Rev< 1u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("get_element customization point object") > , Rev< 2u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("get_element customization point object") > , Rev< 3u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("get_element customization point object") >  >() },
    { 2770u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Stashing stashing iterators for proper flattening") >  >() },
    { 2771u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Neumann")) >(), wxS("Towards memory safety in C++") > , Rev< 1u, Arr64< Hash(wxS("Thomas Neumann")) >(), wxS("R2771R1: Towards memory safety in C++") >  >() },
    { 2772u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::integral_constant literals do not suffice constexpr_t? [P2772R0]") >  >() },
    { 2773u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1068") >  >() },
    { 2774u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D2774 - Scoped thread-local storage") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D2774 - Concurrent object pool") >  >() },
    { 2775u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2023-05 Library Evolution Polls") >  >() },
    { 2776u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("2023-05 Library Evolution Poll Outcomes") >  >() },
    { 2779u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Make basic_string_views range construction conditionally explicit") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("D2779R1: Make basic_string_views range construction conditionally explicit") >  >() },
    { 2780u, RevList< Rev< 0u, Arr64< Hash(wxS("Author990")) >(), wxS("Caller-side precondition checking, and Eval_and_throw") >  >() },
    { 2781u, RevList< Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("`std::constexpr_v`") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("`std::constexpr_v`") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("`std::constexpr_v`") > , Rev< 4u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("`std::constant_wrapper`") > , Rev< 5u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("`std::constant_wrapper`") > , Rev< 6u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("`std::constant_wrapper`") > , Rev< 7u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("`std::constant_wrapper`") > , Rev< 8u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("`std::constant_wrapper`") >  >() },
    { 2782u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("A proposal for a type trait to detect if value initialization can be achieved by zero-filling") >  >() },
    { 2784u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Not halting the program after detected contract violation") >  >() },
    { 2785u, RevList< Rev< 0u, Arr64< Hash(wxS("S\u00E9bastien Bini")) >(), wxS("D2785R1: Relocating prvalues") > , Rev< 1u, Arr64< Hash(wxS("S\u00E9bastien Bini")) >(), wxS("Relocating prvalues") > , Rev< 2u, Arr64< Hash(wxS("S\u00E9bastien Bini")) >(), wxS("D2785R2: Relocating prvalues") > , Rev< 3u, Arr64< Hash(wxS("S\u00E9bastien Bini")) >(), wxS("Relocating prvalues") >  >() },
    { 2786u, RevList< Rev< 0u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial relocatability options") > , Rev< 1u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial relocatability options") > , Rev< 2u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial relocatability options") > , Rev< 3u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 4u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 5u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 6u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 7u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 8u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 9u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 10u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 11u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 12u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability For C++26") > , Rev< 13u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Trivial Relocatability For C++26") >  >() },
    { 2787u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1679")) >(), wxS("Title1304") > , Rev< 1u, Arr64< Hash(wxS("Author619")) >(), wxS("Title505") >  >() },
    { 2788u, RevList< Rev< 0u, Arr64< Hash(wxS("Author835")) >(), wxS("Linkage for modular constants") >  >() },
    { 2789u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1858")) >(), wxS("C++ Standard Library Issues to be moved in Issaquah, Feb. 2023") >  >() },
    { 2790u, RevList< Rev< 0u, Arr64< Hash(wxS("Author686")) >(), wxS("C++ Standard Library Immediate Issues to be moved in Issaquah, Feb. 2023") >  >() },
    { 2791u, RevList< Rev< 0u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("P2791R0") >  >() },
    { 2795u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1344")) >(), wxS("Correct and incorrect code, and erroneous behaviour") > , Rev< 1u, Arr64< Hash(wxS("Author963")) >(), wxS("Erroneous behaviour for uninitialized reads") > , Rev< 2u, Arr64< Hash(wxS("Author1417")) >(), wxS("Erroneous behaviour for uninitialized reads") > , Rev< 3u, Arr64< Hash(wxS("Author363")) >(), wxS("Erroneous behaviour for uninitialized reads") > , Rev< 4u, Arr64< Hash(wxS("Author53")) >(), wxS("Erroneous behaviour for uninitialized reads") > , Rev< 5u, Arr64< Hash(wxS("Author158")) >(), wxS("Erroneous behaviour for uninitialized reads") >  >() },
    { 2796u, RevList< Rev< 0u, Arr64< Hash(wxS("Author719")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2797u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Proposed resolution for CWG2692 Static and explicit objectmember functions with the same parameter-type-lists") >  >() },
    { 2798u, RevList< Rev< 0u, Arr64< Hash(wxS("Christian Trott")) >(), wxS("Fix layout mappings all static extent default constructor") >  >() },
    { 2799u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Closed ranges may be a problem; breaking counted_iterator is not the solution") >  >() },
    { 2800u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1124")) >(), wxS("Dependency flag soup needs some fiber") >  >() },
    { 2802u, RevList< Rev< 0u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("P1385R7") >  >() },
    { 2803u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1779")) >(), wxS("std::simd") >  >() },
    { 2805u, RevList< Rev< 0u, Arr64< Hash(wxS("Author671")) >(), wxS("Slide 1") >  >() },
    { 2806u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("do expressions") > , Rev< 1u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("do expressions") > , Rev< 2u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("do expressions") > , Rev< 3u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("do expressions") >  >() },
    { 2807u, RevList< Rev< 0u, Arr64< Hash(wxS("Author8")) >(), wxS("Title9") >  >() },
    { 2808u, RevList< Rev< 0u, Arr64< Hash(wxS("Author118")) >(), wxS("Internal linkage in the global module") >  >() },
    { 2809u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Trivial infinite loops are not Undefined Behavior") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Trivial infinite loops are not Undefined Behavior") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Trivial infinite loops are not Undefined Behavior") > , Rev< 3u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("Trivial infinite loops are not Undefined Behavior") >  >() },
    { 2810u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("is_debugger_present is_replaceable") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("is_debugger_present is_replaceable") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("is_debugger_present is_replaceable") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("is_debugger_present is_replaceable") > , Rev< 4u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("is_debugger_present is_replaceable") >  >() },
    { 2811u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title471") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title623") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title141") > , Rev< 3u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title134") > , Rev< 4u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title412") > , Rev< 5u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title975") > , Rev< 6u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title248") > , Rev< 7u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title268") >  >() },
    { 2812u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("P2812: P1673R11 LEWG presentation") >  >() },
    { 2814u, RevList< Rev< 0u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability Comparing P1144 with P2786") > , Rev< 1u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Trivial Relocatability Comparing P1144 with P2786") >  >() },
    { 2815u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2029")) >(), wxS("Pointers are sometimes just bags of bits") >  >() },
    { 2816u, RevList< Rev< 0u, Arr64< Hash(wxS("Author810")) >(), wxS("Upcoming Changes to C++") >  >() },
    { 2817u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("The idea behind the contracts MVP") >  >() },
    { 2818u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Uniform Call Syntax for explicit-object memberfunctions") >  >() },
    { 2819u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D2819 - Add tuple protocol to complex") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D2819 - Add tuple protocol to complex") > , Rev< 2u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D2819 - Add tuple protocol to complex") >  >() },
    { 2821u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1235")) >(), wxS("span.at() - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1103")) >(), wxS("span.at() - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1116")) >(), wxS("span.at() - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Author535")) >(), wxS("span.at() - HackMD") > , Rev< 4u, Arr64< Hash(wxS("Author304")) >(), wxS("span.at() - HackMD") > , Rev< 5u, Arr64< Hash(wxS("Author2192")) >(), wxS("span.at() - HackMD") >  >() },
    { 2822u, RevList< Rev< 0u, Arr64< Hash(wxS("Author184")) >(), wxS("Providing user control of associated entities of class types") > , Rev< 1u, Arr64< Hash(wxS("Author1402")) >(), wxS("Providing user control of associated entities of class types") > , Rev< 2u, Arr64< Hash(wxS("Author274")) >(), wxS("Providing user control of associated entities of class types") >  >() },
    { 2824u, RevList< Rev< 0u, Arr64< Hash(wxS("Author200")) >(), wxS("P2824 WG21 2023-02 Issaquah Record of Discussion.docx") >  >() },
    { 2825u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("calltarget(unevaluated-call-expression)") > , Rev< 1u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("declcall(unevaluated-postfix-expression)") > , Rev< 2u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("declcall(unevaluated-postfix-expression)") > , Rev< 3u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Overload resolution hook: declcall( unevaluated-call-expression)") > , Rev< 4u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Overload resolution hook: declcall( unevaluated-call-expression)") > , Rev< 5u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Overload resolution hook: declcall( unevaluated-call-expression)") >  >() },
    { 2826u, RevList< Rev< 0u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Replacement function") > , Rev< 1u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Replacement function") > , Rev< 2u, Arr64< Hash(wxS("Ga\u0161per A\u017Eman")) >(), wxS("Replacement function") >  >() },
    { 2827u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Floating-point overflow and underflow in from_chars (LWG 3081) - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Floating-point overflow and underflow in `from_chars` (LWG 3081) - HackMD") >  >() },
    { 2828u, RevList< Rev< 0u, Arr64< Hash(wxS("Author653")) >(), wxS("Copy elision for direct-initialization with a conversion function (Coreissue 2327)") > , Rev< 1u, Arr64< Hash(wxS("Author466")) >(), wxS("Copy elision for direct-initialization with a conversion function (Coreissue 2327)") > , Rev< 2u, Arr64< Hash(wxS("Author994")) >(), wxS("Copy elision for direct-initialization with a conversion function (Coreissue 2327)") >  >() },
    { 2829u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("Proposal of Contracts Supporting Const-On-Definition Style") >  >() },
    { 2830u, RevList< Rev< 0u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Type Ordering") > , Rev< 1u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Type Ordering") > , Rev< 2u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 3u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 4u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 5u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 6u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 7u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 8u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 9u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Standardized Constexpr Type Ordering") > , Rev< 10u, Arr64< Hash(wxS("Nate Nichols")) >(), wxS("Constexpr Type Ordering") >  >() },
    { 2831u, RevList< Rev< 0u, Arr64< Hash(wxS("Author756")) >(), wxS("Title613") >  >() },
    { 2833u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: inout expected span") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: inout expected span") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: inout expected span") >  >() },
    { 2834u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1362") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1454") >  >() },
    { 2835u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose std::atomic_ref 's object address") > , Rev< 1u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 2u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 3u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 4u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 5u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 6u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") > , Rev< 7u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Expose `std::atomic_ref` 's object address") >  >() },
    { 2836u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::const_iterator` often produces an unexpected type") > , Rev< 1u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("`std::basic_const_iterator` should follow its underlying type'sconvertibility") >  >() },
    { 2837u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Planning to Revisit the Lakos Rule") >  >() },
    { 2838u, RevList< Rev< 0u, Arr64< Hash(wxS("Author699")) >(), wxS("Unconditional contract violation handling of any kind is a serious problem") >  >() },
    { 2839u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Nontrivial Relocation via a New *owning reference* Type") >  >() },
    { 2841u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1505") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1179") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1128") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title831") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title585") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title446") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1552") > , Rev< 7u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1003") >  >() },
    { 2842u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Destructor Semantics Do Not Affect Constructible Traits") >  >() },
    { 2843u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Preprocessing is never undefined") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Preprocessing is never undefined") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Preprocessing is never undefined") >  >() },
    { 2845u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("D2845R4: Formatting of std::filesystem::path") > , Rev< 5u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 6u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 7u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") > , Rev< 8u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::filesystem::path") >  >() },
    { 2846u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title237") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title312") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1345") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1376") > , Rev< 4u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title365") > , Rev< 5u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title981") > , Rev< 6u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title5") >  >() },
    { 2848u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_uniqued") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("std::is_uniqued") >  >() },
    { 2849u, RevList< Rev< 0u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("async-object - aka async-RAII") >  >() },
    { 2850u, RevList< Rev< 0u, Arr64< Hash(wxS("2.6")) >(), wxS("Title104") >  >() },
    { 2852u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Contract violation handling semantics for the contracts MVP") >  >() },
    { 2853u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P2853R0 Proposal of std::contract_violation") >  >() },
    { 2855u, RevList< Rev< 0u, Arr64< Hash(wxS("Author884")) >(), wxS("Member customization points for Senders and Receivers") > , Rev< 1u, Arr64< Hash(wxS("Author1387")) >(), wxS("Member customization points for Senders and Receivers") >  >() },
    { 2857u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Improve std::hive::reshape") >  >() },
    { 2858u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Noexcept vs contract violations") >  >() },
    { 2861u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1766")) >(), wxS("Title1370") >  >() },
    { 2862u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("text_encoding::name() should never return null values") > , Rev< 1u, Arr64< Hash(wxS("Daniel Kr\u00FCgler")) >(), wxS("text_encoding::name() should never return null values") >  >() },
    { 2863u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 4u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 5u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 6u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 7u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 8u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") > , Rev< 9u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Review Annex D for C++26") >  >() },
    { 2864u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C++26") >  >() },
    { 2865u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 4u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 5u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") > , Rev< 6u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Array Comparisons from C++26") >  >() },
    { 2866u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features from C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features from C++26") > , Rev< 4u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features from C++26") > , Rev< 5u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Volatile Features from C++26") >  >() },
    { 2867u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated strstreams From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated strstreams From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated strstreams From C++26") >  >() },
    { 2868u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Typedef From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Typedef From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Typedef From C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Typedef From C++26") >  >() },
    { 2869u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Access APIs From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Access APIs From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Access APIs From C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Access APIs from C++26") > , Rev< 4u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Access APIs from C++26") >  >() },
    { 2870u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") >  >() },
    { 2871u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Unicode Conversion Facets From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Unicode Conversion Facets From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Unicode Conversion Facets from C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Unicode Conversion Facets from C++26") >  >() },
    { 2872u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove From C++26") >  >() },
    { 2873u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Locale Category Facets For Unicode from C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Locale Category Facets For Unicode from C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Locale-Category Facets for Unicode from C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Locale-Category Facets for Unicode from C++26") >  >() },
    { 2874u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Mandating Annex D") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Mandating Annex D") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Mandating Annex D") >  >() },
    { 2875u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Undeprecate For C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Undeprecate `polymorphic_allocator::destroy` For C++26") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Undeprecate for C++26") > , Rev< 3u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Undeprecate for C++26") > , Rev< 4u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Undeprecate for C++26") >  >() },
    { 2876u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("D2876R0: Proposal to extend <code>std::simd</code> with more constructors and accessors") > , Rev< 1u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend <code>std::simd</code> with more constructors and accessors") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend <code>std::simd</code> with more constructors and accessors") >  >() },
    { 2877u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1610") >  >() },
    { 2878u, RevList< Rev< 0u, Arr64< Hash(wxS("Author582")) >(), wxS("Reference checking - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1180")) >(), wxS("Reference checking - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author1212")) >(), wxS("Reference checking - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Author637")) >(), wxS("Reference checking - HackMD") > , Rev< 4u, Arr64< Hash(wxS("Author1016")) >(), wxS("Reference checking - HackMD") > , Rev< 5u, Arr64< Hash(wxS("Author814")) >(), wxS("Reference checking - HackMD") > , Rev< 6u, Arr64< Hash(wxS("Author2034")) >(), wxS("Reference checking - HackMD") >  >() },
    { 2879u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P2879R0 Proposal of std::dump") >  >() },
    { 2880u, RevList< Rev< 0u, Arr64< Hash(wxS("Ilya Burylov")) >(), wxS("Algorithm-like vs std::simd based RNG API") >  >() },
    { 2881u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("Generator-based for loop") >  >() },
    { 2882u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1033")) >(), wxS("An Event Model for C++ Executors") >  >() },
    { 2883u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Should Be A Keyword In C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Should Be a Keyword in C++26") >  >() },
    { 2884u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Should Be A Keyword In C++26") >  >() },
    { 2885u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2025")) >(), wxS("Requirements for a Contracts syntax") > , Rev< 1u, Arr64< Hash(wxS("Author1673")) >(), wxS("Requirements for a Contracts syntax") > , Rev< 2u, Arr64< Hash(wxS("Author60")) >(), wxS("Requirements for a Contracts syntax") > , Rev< 3u, Arr64< Hash(wxS("Author1938")) >(), wxS("Requirements for a Contracts syntax") >  >() },
    { 2886u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("p2886r0: concurrency ts2 editor's report") >  >() },
    { 2887u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("P2887r0.docx") >  >() },
    { 2888u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("P2888r0.docx") >  >() },
    { 2889u, RevList< Rev< 0u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Distributed Arrays") >  >() },
    { 2890u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1284")) >(), wxS("Title995") > , Rev< 1u, Arr64< Hash(wxS("Author667")) >(), wxS("Title540") > , Rev< 2u, Arr64< Hash(wxS("Author308")) >(), wxS("Title260") >  >() },
    { 2891u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2023-01-11 through 2023-05-10") >  >() },
    { 2892u, RevList< Rev< 0u, Arr64< Hash(wxS("Joe Jevnik")) >(), wxS("Types Should be Regular") >  >() },
    { 2893u, RevList< Rev< 0u, Arr64< Hash(wxS("Jody Hagins")) >(), wxS("Variadic Friends") > , Rev< 1u, Arr64< Hash(wxS("Author1051")) >(), wxS("Untitled") > , Rev< 2u, Arr64< Hash(wxS("Jody Hagins")) >(), wxS("Variadic friends") > , Rev< 3u, Arr64< Hash(wxS("Jody Hagins")) >(), wxS("Variadic friends") >  >() },
    { 2894u, RevList< Rev< 0u, Arr64< Hash(wxS("Author46")) >(), wxS("Title44") > , Rev< 1u, Arr64< Hash(wxS("Author595")) >(), wxS("Title486") > , Rev< 2u, Arr64< Hash(wxS("Author1310")) >(), wxS("Title1015") >  >() },
    { 2895u, RevList< Rev< 0u, Arr64< Hash(wxS("Sebastian Theophil")) >(), wxS("noncopyable and nonmovable utility classes") >  >() },
    { 2896u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2099")) >(), wxS("Outstanding design questions for the Contracts MVP") >  >() },
    { 2897u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 3u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 4u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 5u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer overalignment") > , Rev< 6u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer over-alignment") > , Rev< 7u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("aligned_accessor: An mdspan accessor expressing pointer over-alignment") >  >() },
    { 2898u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Importable Headers are Not Universally Implementable") > , Rev< 1u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Build System Requirements for Importable Headers") >  >() },
    { 2899u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title644") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title696") >  >() },
    { 2900u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1415") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1674") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title390") > , Rev< 3u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1389") > , Rev< 4u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title474") > , Rev< 5u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title911") > , Rev< 6u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1147") > , Rev< 7u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1028") > , Rev< 8u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1253") > , Rev< 9u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1535") > , Rev< 10u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1302") > , Rev< 11u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1406") > , Rev< 12u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title130") > , Rev< 13u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title357") > , Rev< 14u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1549") >  >() },
    { 2901u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Extending Linear Algebra Support to Batched Operations") >  >() },
    { 2902u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1653")) >(), wxS("Title1285") > , Rev< 1u, Arr64< Hash(wxS("Author891")) >(), wxS("Title720") >  >() },
    { 2904u, RevList< Rev< 0u, Arr64< Hash(wxS("Anoop Rana")) >(), wxS("Title731") >  >() },
    { 2905u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings") >  >() },
    { 2906u, RevList< Rev< 0u, Arr64< Hash(wxS("Bernhard Manfred")) >(), wxS("Structured bindings for <code>std::extents</code>") >  >() },
    { 2909u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Dude, wheres my char?") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix formatting of code units as integers<br>(Dude, wheres my char?)") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix formatting of code units as integers<br>(Dude, wheres my char?)") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix formatting of code units as integers<br>(Dude, wheres my char?)") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix formatting of code units as integers<br>(Dude, wheres my char?)") >  >() },
    { 2910u, RevList< Rev< 0u, Arr64< Hash(wxS("Author532")) >(), wxS("C++ Standard Library Issues to be moved in Varna 2023") >  >() },
    { 2911u, RevList< Rev< 0u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Title661") > , Rev< 1u, Arr64< Hash(wxS("Author1303")) >(), wxS("Title1007") >  >() },
    { 2912u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1242")) >(), wxS("p2912r0: Concurrent queues and sender/receivers") >  >() },
    { 2915u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1660")) >(), wxS("Proposed resolution to CWG1223") >  >() },
    { 2917u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2096")) >(), wxS("An in-line defaulted destructor should keep the copy- and move-operations") > , Rev< 1u, Arr64< Hash(wxS("Author836")) >(), wxS("An in-line defaulted destructor should keep the copy- and move-operations") >  >() },
    { 2918u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings II") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings II") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Runtime format strings II") >  >() },
    { 2920u, RevList< Rev< 0u, Arr64< Hash(wxS("Author543")) >(), wxS("2023_06__iso_cpp_varna__library_evolution_leadership_understanding_of_narrow_noexcept_policy_history__r4") >  >() },
    { 2921u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1774")) >(), wxS("p2921r0: Exploring std::expected based API alternatives for buffer_queue") >  >() },
    { 2922u, RevList< Rev< 0u, Arr64< Hash(wxS("Author505")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 2925u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1447")) >(), wxS("inplace_vector D0843R7") >  >() },
    { 2926u, RevList< Rev< 0u, Arr64< Hash(wxS("Author586")) >(), wxS("Title477") >  >() },
    { 2927u, RevList< Rev< 0u, Arr64< Hash(wxS("Author36")) >(), wxS("Inspecting exception_ptr") > , Rev< 1u, Arr64< Hash(wxS("Author1584")) >(), wxS("Inspecting exception_ptr") > , Rev< 2u, Arr64< Hash(wxS("Author665")) >(), wxS("Inspecting exception_ptr") >  >() },
    { 2929u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to add simd_invoke to std::simd") >  >() },
    { 2930u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark de")) >(), wxS("Formatter specializations for the standard library") >  >() },
    { 2931u, RevList< Rev< 0u, Arr64< Hash(wxS("Author460")) >(), wxS("P2931 WG21 2023-06 Varna Record of Discussion.docx") >  >() },
    { 2932u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title920") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title674") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title544") > , Rev< 3u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title589") >  >() },
    { 2933u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to allow simd overloads for standard C++ <bit> header") > , Rev< 1u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend <code><bit></code> header function with overloads for <code>std::simd</code>") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend <code><bit></code> header function with overloads for <code>std::simd</code>") > , Rev< 3u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend <code><bit></code> header function with overloads for <code>std::simd</code>") > , Rev< 4u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Extend <bit> header function with overloads for std::simd") >  >() },
    { 2935u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title788") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1475") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1145") > , Rev< 3u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1081") > , Rev< 4u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1278") >  >() },
    { 2937u, RevList< Rev< 0u, Arr64< Hash(wxS("\u2003\u2003Ben Craig")) >(), wxS("Freestanding: Remove <code>strtok</code>") >  >() },
    { 2940u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("switch for Pattern Matching") >  >() },
    { 2941u, RevList< Rev< 0u, Arr64< Hash(wxS("Mihail Naydenov")) >(), wxS("Identifiers for Pattern Matching") >  >() },
    { 2944u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Comparisons for reference_wrapper") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Comparisons for reference_wrapper") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Comparisons for reference_wrapper") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Comparisons for reference_wrapper") >  >() },
    { 2945u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Additional format specifiers for time_point") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Additional format specifiers for time_point") >  >() },
    { 2946u, RevList< Rev< 0u, Arr64< Hash(wxS("Author912")) >(), wxS("A Flexible Solution to the Problems of noexcept") > , Rev< 1u, Arr64< Hash(wxS("Author1928")) >(), wxS("A Flexible Solution to the Problems of noexcept") >  >() },
    { 2947u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrei Zissu")) >(), wxS("D2947R0") >  >() },
    { 2949u, RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("Microsoft Word - PxxxxR0.docx") >  >() },
    { 2950u, RevList< Rev< 0u, Arr64< Hash(wxS("Christopher Di")) >(), wxS("P2836R1 Slides") >  >() },
    { 2951u, RevList< Rev< 0u, Arr64< Hash(wxS("Author138")) >(), wxS("Shadowing is good for safety - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author556")) >(), wxS("Shadowing is good for safety - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Author2152")) >(), wxS("Shadowing is good for safety - HackMD") > , Rev< 3u, Arr64< Hash(wxS("Author1769")) >(), wxS("Shadowing is good for safety - HackMD") >  >() },
    { 2952u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("auto& operator=(X&&) = default") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("auto& operator=(X&&) = default") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("auto& operator=(X&&) = default") >  >() },
    { 2953u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Forbid defaulting operator=(X&&) &&") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Forbid defaulting operator=(X&&) &&") >  >() },
    { 2954u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1451")) >(), wxS("Contracts and virtual functions for the Contracts MVP") >  >() },
    { 2955u, RevList< Rev< 0u, Arr64< Hash(wxS("Author998")) >(), wxS("Safer Range Access - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author2108")) >(), wxS("Safer Range Access - HackMD") >  >() },
    { 2956u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Allow <code>std::simd</code> overloads for saturating operations") >  >() },
    { 2957u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contracts and coroutines") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contracts and coroutines") > , Rev< 2u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contracts and coroutines") >  >() },
    { 2958u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("typeof and typeof_unqual for C++") >  >() },
    { 2959u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Relocation Within Containers") >  >() },
    { 2960u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("P2960R0 Concurrency TS2 Editors report for N4953") >  >() },
    { 2961u, RevList< Rev< 0u, Arr64< Hash(wxS("Author791")) >(), wxS("Title641") > , Rev< 1u, Arr64< Hash(wxS("Author1859")) >(), wxS("Title1441") > , Rev< 2u, Arr64< Hash(wxS("Author687")) >(), wxS("Title552") >  >() },
    { 2962u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Communicating the Baseline Compile Command for C++ Modules support") >  >() },
    { 2963u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title250") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title475") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1664") > , Rev< 3u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title979") >  >() },
    { 2964u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Adding support for user-defined element types in std::simd") > , Rev< 1u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Adding support for user-defined element types (UDT) in <code>std::simd</code>") >  >() },
    { 2966u, RevList< Rev< 0u, Arr64< Hash(wxS("Patrice Roy")) >(), wxS("Title960") > , Rev< 1u, Arr64< Hash(wxS("Patrice Roy")) >(), wxS("Title940") >  >() },
    { 2967u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Relocation Has A Library Interface") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Relocation Has A Library Interface") >  >() },
    { 2968u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make std::ignore a first-class object") > , Rev< 1u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make std::ignore a first-class object") > , Rev< 2u, Arr64< Hash(wxS("Peter Sommerlad")) >(), wxS("Make std::ignore a first-class object") >  >() },
    { 2969u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1698")) >(), wxS("Title1316") >  >() },
    { 2971u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2165")) >(), wxS("Implication for C++") > , Rev< 1u, Arr64< Hash(wxS("Author729")) >(), wxS("Implication for C++") > , Rev< 2u, Arr64< Hash(wxS("Author1067")) >(), wxS("Implication for C++") > , Rev< 3u, Arr64< Hash(wxS("Author215")) >(), wxS("Implication for C++") >  >() },
    { 2972u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2023-09 Library Evolution Polls") >  >() },
    { 2973u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2198")) >(), wxS("Erroneous behaviour for missing return from assignment") >  >() },
    { 2976u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: algorithm, numeric, and random") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding Library: algorithm, numeric, and random") >  >() },
    { 2977u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1972")) >(), wxS("Module configuration files") > , Rev< 1u, Arr64< Hash(wxS("Author223")) >(), wxS("Build database files") > , Rev< 2u, Arr64< Hash(wxS("Author620")) >(), wxS("Build database files") >  >() },
    { 2978u, RevList< Rev< 0u, Arr64< Hash(wxS("HassanSajjad")) >(), wxS("A New Approach For Compiling C++") >  >() },
    { 2979u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("The Need for Design Policies in WG21") >  >() },
    { 2980u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("A motivation, scope, and plan for a physical quantities andunits library") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("A motivation, scope, and plan for a quantities and unitslibrary") >  >() },
    { 2981u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Improving our safety with a physical quantities and unitslibrary") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Improving our safety with a physical quantities and unitslibrary") >  >() },
    { 2982u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::quantity` as a numeric type") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::quantity` as a numeric type") >  >() },
    { 2984u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Reconsider Redeclaring static constexpr Data Members") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Reconsider Redeclaring static constexpr Data Members") >  >() },
    { 2985u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("A type trait for detecting virtual base classes") >  >() },
    { 2986u, RevList< Rev< 0u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Generic Function Pointer") >  >() },
    { 2988u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("std::optional<T&>") > , Rev< 1u, Arr64< Hash(wxS("Author2020")) >(), wxS("Title1561") > , Rev< 2u, Arr64< Hash(wxS("Author839")) >(), wxS("Title663") > , Rev< 3u, Arr64< Hash(wxS("Author958")) >(), wxS("Title777") > , Rev< 4u, Arr64< Hash(wxS("Author715")) >(), wxS("Title577") > , Rev< 5u, Arr64< Hash(wxS("Author319")) >(), wxS("Title269") > , Rev< 6u, Arr64< Hash(wxS("Author1162")) >(), wxS("Title922") > , Rev< 7u, Arr64< Hash(wxS("Author1505")) >(), wxS("Title1169") > , Rev< 8u, Arr64< Hash(wxS("Author474")) >(), wxS("Title397") > , Rev< 9u, Arr64< Hash(wxS("Author1092")) >(), wxS("Title879") > , Rev< 10u, Arr64< Hash(wxS("Author261")) >(), wxS("Title219") > , Rev< 11u, Arr64< Hash(wxS("Author35")) >(), wxS("Title31") > , Rev< 12u, Arr64< Hash(wxS("Author778")) >(), wxS("Title634") >  >() },
    { 2989u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title596") > , Rev< 1u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1323") > , Rev< 2u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title34") >  >() },
    { 2990u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("C++ Modules Roadmap") >  >() },
    { 2991u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Stop Forcing `std::move` to Pessimize") >  >() },
    { 2992u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Attribute [[discard]] and attributes on expressions") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Attribute [[discard(\"reason\")]]") >  >() },
    { 2993u, RevList< Rev< 0u, Arr64< Hash(wxS("Luke Valenty")) >(), wxS("Constrained Numbers") >  >() },
    { 2994u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("On the Naming of Packs") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("On the Naming of Packs") >  >() },
    { 2995u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2023-05-24 through 2023-09-27") >  >() },
    { 2996u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 1u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 2u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 3u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 4u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 5u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 6u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 7u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 8u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 9u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 10u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") > , Rev< 11u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Reflection for C++26") >  >() },
    { 2997u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Removing the common reference requirement from the indirectly invocable concepts") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Removing the common reference requirement from the indirectly invocable concepts") >  >() },
    { 2998u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Deducing function parameter types using alias templateCTAD") >  >() },
    { 2999u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Sender Algorithm Customization") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Sender Algorithm Customization") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Sender Algorithm Customization") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Sender Algorithm Customization") >  >() },
    { 3001u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("std::hive and containers like it are not a good fit for thestandard library") >  >() },
    { 3002u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1231")) >(), wxS("Guidelines for Allocators in New Library Classes") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Policies for Using Allocators in Library Classes") >  >() },
    { 3003u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1987")) >(), wxS("P3003R0 The design of a library of number concepts") >  >() },
    { 3004u, RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("Principled Design for WG21") >  >() },
    { 3005u, RevList< Rev< 0u, Arr64< Hash(wxS("John Lakos")) >(), wxS("Memorializing Principled-Design Policies for WG21") >  >() },
    { 3006u, RevList< Rev< 0u, Arr64< Hash(wxS("Author799")) >(), wxS("Launder less") > , Rev< 1u, Arr64< Hash(wxS("Author1680")) >(), wxS("Launder less") >  >() },
    { 3007u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1274")) >(), wxS("Title987") >  >() },
    { 3008u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1781")) >(), wxS("Atomic floating-point min/max semantics") > , Rev< 1u, Arr64< Hash(wxS("Author1191")) >(), wxS("Atomic floating-point min/max semantics") > , Rev< 2u, Arr64< Hash(wxS("Author555")) >(), wxS("Atomic floating-point min/max semantics") > , Rev< 3u, Arr64< Hash(wxS("Author233")) >(), wxS("Atomic floating-point min/max") > , Rev< 4u, Arr64< Hash(wxS("Author851")) >(), wxS("Atomic floating-point min/max") >  >() },
    { 3009u, RevList< Rev< 0u, Arr64< Hash(wxS("Joe Jevnik")) >(), wxS("Injected class name in the base specifier list") >  >() },
    { 3010u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Katz")) >(), wxS("P3010R0 - Using Reflection to Replace a Metalanguage for Generating JS Bindings") >  >() },
    { 3011u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Title1385") >  >() },
    { 3012u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Bentley")) >(), wxS("Title1530") >  >() },
    { 3014u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("Customizing std::expected's exception") >  >() },
    { 3015u, RevList< Rev< 0u, Arr64< Hash(wxS("Howard E")) >(), wxS("Rebuttal to Additional format specifiers for time_point") >  >() },
    { 3016u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for <code>valarray</code> and braced initializer lists") > , Rev< 2u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for valarray and braced initializer lists") > , Rev< 3u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for valarray and braced initializer lists") > , Rev< 4u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for valarray and braced initializer lists") > , Rev< 5u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for valarray and braced initializer lists") > , Rev< 6u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve inconsistencies in begin/end for valarray and braced initializer lists") >  >() },
    { 3018u, RevList< Rev< 0u, Arr64< Hash(wxS("Andreas Weis")) >(), wxS("Title945") >  >() },
    { 3019u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2026")) >(), wxS("Title1567") > , Rev< 1u, Arr64< Hash(wxS("Author347")) >(), wxS("Title290") > , Rev< 2u, Arr64< Hash(wxS("Author366")) >(), wxS("Title311") > , Rev< 3u, Arr64< Hash(wxS("Author743")) >(), wxS("Title601") > , Rev< 4u, Arr64< Hash(wxS("Author420")) >(), wxS("Title360") > , Rev< 5u, Arr64< Hash(wxS("Author691")) >(), wxS("Title557") > , Rev< 6u, Arr64< Hash(wxS("Author115")) >(), wxS("Title102") > , Rev< 7u, Arr64< Hash(wxS("Author991")) >(), wxS("Title802") > , Rev< 8u, Arr64< Hash(wxS("Author1847")) >(), wxS("Title1432") > , Rev< 9u, Arr64< Hash(wxS("Author2085")) >(), wxS("Title1617") > , Rev< 10u, Arr64< Hash(wxS("Author259")) >(), wxS("Title216") > , Rev< 11u, Arr64< Hash(wxS("Author1973")) >(), wxS("Title1534") > , Rev< 12u, Arr64< Hash(wxS("Author6")) >(), wxS("Title4") > , Rev< 13u, Arr64< Hash(wxS("Author1461")) >(), wxS("Title1139") > , Rev< 14u, Arr64< Hash(wxS("Author1636")) >(), wxS("Title1265") >  >() },
    { 3020u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2023-09 Library Evolution Poll Outcomes") >  >() },
    { 3021u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title690") >  >() },
    { 3022u, RevList< Rev< 0u, Arr64< Hash(wxS("Author495")) >(), wxS("A Boring Thread Attributes Interface - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Darius Neau")) >(), wxS("A Boring Thread Attributes Interface") >  >() },
    { 3023u, RevList< Rev< 0u, Arr64< Hash(wxS("Author24")) >(), wxS("C++ Should Be C++ - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author2112")) >(), wxS("C++ Should Be C++ - HackMD") >  >() },
    { 3024u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1009")) >(), wxS("Title809") >  >() },
    { 3025u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("P3025R0.docx") >  >() },
    { 3026u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("P3026R0.docx") >  >() },
    { 3027u, RevList< Rev< 0u, Arr64< Hash(wxS("Author349")) >(), wxS("UFCS is a breaking change, of the absolutely worst kind") >  >() },
    { 3028u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1075") >  >() },
    { 3029u, RevList< Rev< 0u, Arr64< Hash(wxS("Author189")) >(), wxS("Better <code>mdspan</code>'s CTAD") > , Rev< 1u, Arr64< Hash(wxS("Author1208")) >(), wxS("Better <code>mdspan</code>'s CTAD") >  >() },
    { 3031u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Resolve CWG2561, conversion function for lambda with explicit object parameter") >  >() },
    { 3032u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Less transient constexpr allocation") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Less transient constexpr allocation") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Less transient constexpr allocation (and more constevalrelaxation)") >  >() },
    { 3033u, RevList< Rev< 0u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Should we import function bodies to get the better optimizations?") >  >() },
    { 3034u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Module Declarations Shouldnt be Macros") > , Rev< 1u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Module Declarations Shouldnt be Macros") >  >() },
    { 3037u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title427") > , Rev< 1u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title739") > , Rev< 2u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title62") > , Rev< 3u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title202") > , Rev< 4u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title1594") > , Rev< 5u, Arr64< Hash(wxS("Paul Keir")) >(), wxS("Title15") >  >() },
    { 3038u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1820")) >(), wxS("Title1407") >  >() },
    { 3039u, RevList< Rev< 0u, Arr64< Hash(wxS("David Stone")) >(), wxS("Title1088") >  >() },
    { 3040u, RevList< Rev< 0u, Arr64< Hash(wxS("Author391")) >(), wxS("C++ Standard Library Issues to be moved in Kona, Nov. 2023") >  >() },
    { 3041u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com")) >(), wxS("Title1684") >  >() },
    { 3042u, RevList< Rev< 0u, Arr64< Hash(wxS("Author39")) >(), wxS("Title35") >  >() },
    { 3043u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2209")) >(), wxS("Using variable template template without meta programming") >  >() },
    { 3044u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("P3044R0") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("P3044R1") >  >() },
    { 3045u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") > , Rev< 2u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") > , Rev< 3u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") > , Rev< 4u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") > , Rev< 5u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("Quantities and units library") >  >() },
    { 3046u, RevList< Rev< 0u, Arr64< Hash(wxS("Author361")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 3047u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Namespace relops From C++26") >  >() },
    { 3049u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("P3049R0") > , Rev< 1u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("P3049R1") >  >() },
    { 3050u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Optimize linalg::conjugated for noncomplex value types") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by optimizing linalg::conjugated for noncomplex value types") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by optimizing linalg::conjugated for noncomplex value types") > , Rev< 3u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by optimizing linalg::conjugated for noncomplex value types") >  >() },
    { 3051u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Response Files") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Response Files") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Response Files") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: Structured Response Files") >  >() },
    { 3052u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1748")) >(), wxS("<code>view_interface::at</code>") > , Rev< 1u, Arr64< Hash(wxS("Author1472")) >(), wxS("<code>view_interface::at</code>") >  >() },
    { 3053u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2023-12 Library Evolution Polls") >  >() },
    { 3054u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2023-12 Library Evolution Poll Outcomes") >  >() },
    { 3055u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Relax wording to permit relocation optimizations in the STL") > , Rev< 1u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Relax wording to permit relocation optimizations in the STL") >  >() },
    { 3056u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1891")) >(), wxS("what ostream exception - HackMD") >  >() },
    { 3057u, RevList< Rev< 0u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Two finer-grained compilation model for named modules") >  >() },
    { 3059u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2159")) >(), wxS("Making user-defined constructors of view iterators/sentinels private") > , Rev< 1u, Arr64< Hash(wxS("Author1716")) >(), wxS("Making user-defined constructors of view iterators/sentinels private") >  >() },
    { 3060u, RevList< Rev< 0u, Arr64< Hash(wxS("Weile Wei")) >(), wxS("std::ranges::upto(n) - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Weile Wei")) >(), wxS("Add std::views::upto(n) - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Weile Wei")) >(), wxS("Add std::views::indices(n) - HackMD") >  >() },
    { 3061u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1682")) >(), wxS("P3061 WG21 2023-11 Kona Record of Discussion.docx") >  >() },
    { 3062u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1952")) >(), wxS("Title1514") >  >() },
    { 3064u, RevList< Rev< 0u, Arr64< Hash(wxS("Author323")) >(), wxS("Title273") > , Rev< 1u, Arr64< Hash(wxS("Author2045")) >(), wxS("Title1584") > , Rev< 2u, Arr64< Hash(wxS("Author860")) >(), wxS("Title685") >  >() },
    { 3066u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1143")) >(), wxS("Title910") >  >() },
    { 3067u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Named permutation functions for `std::simd`") >  >() },
    { 3068u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr-throw") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr-throw R2") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Allowing exception throwing in constant-evaluation") > , Rev< 3u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Allowing exception throwing in constant-evaluation") > , Rev< 4u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Allowing exception throwing in constant-evaluation") > , Rev< 5u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("D3068R5: Allowing exception throwing in constant-evaluation") > , Rev< 6u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("Allowing exception throwing in constant-evaluation") >  >() },
    { 3070u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting enums") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting enums") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting enums") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting enums") >  >() },
    { 3071u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1348")) >(), wxS("Protection against modifications in contracts") > , Rev< 1u, Arr64< Hash(wxS("Author1550")) >(), wxS("Protection against modifications in contracts") >  >() },
    { 3072u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Hassle-free thread attributes - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Hassle-free thread attributes - HackMD") > , Rev< 2u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Hassle-free thread attributes - HackMD") >  >() },
    { 3073u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1286")) >(), wxS("Title997") >  >() },
    { 3074u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr union lifetime") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("std::uninitialized<T>") > , Rev< 2u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("std::uninitialized<T>") > , Rev< 3u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("trivial union (was std::uninitialized<T>)") > , Rev< 4u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("trivial unions (was std::uninitialized<T>)") > , Rev< 5u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("trivial unions (was std::uninitialized<T>)") > , Rev< 6u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("trivial unions (was std::uninitialized<T>)") > , Rev< 7u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("trivial unions (was std::uninitialized<T>)") >  >() },
    { 3075u, RevList< Rev< 0u, Arr64< Hash(wxS("Shafik Yaghmour")) >(), wxS("Title775") >  >() },
    { 3079u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1564")) >(), wxS("Should ignore and observe exist for constant evaluation of contracts?") >  >() },
    { 3081u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title187") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1061") > , Rev< 2u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1317") >  >() },
    { 3084u, RevList< Rev< 0u, Arr64< Hash(wxS("Author180")) >(), wxS("Title153") >  >() },
    { 3085u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("noexcept policy for SD-9 (throws nothing)") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("noexcept policy for SD-9 (throws nothing)") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("noexcept policy for SD-9 (throws nothing)") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("noexcept policy for SD-9 (throws nothing)") >  >() },
    { 3086u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title525") > , Rev< 1u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title177") > , Rev< 2u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title903") > , Rev< 3u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title1523") >  >() },
    { 3087u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Make direct-initialization for enumeration types at least as permissive as direct-list-initialization") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Make direct-initialization for enumeration types at least as permissive as direct-list-initialization") >  >() },
    { 3088u, RevList< Rev< 0u, Arr64< Hash(wxS("Author148")) >(), wxS("Title127") > , Rev< 1u, Arr64< Hash(wxS("Author455")) >(), wxS("Title384") >  >() },
    { 3090u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("std::execution Introduction") >  >() },
    { 3091u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better lookups for `map` and `unordered_map`") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better Lookups for `map` and `unordered_map`") > , Rev< 2u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better Lookups for `map` and `unordered_map`") > , Rev< 3u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("Better Lookups for `map` and `unordered_map`") >  >() },
    { 3092u, RevList< Rev< 0u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Modules ABI Requirement") >  >() },
    { 3093u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Attributes on expressions") >  >() },
    { 3094u, RevList< Rev< 0u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 1u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 2u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 3u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 4u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 5u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") > , Rev< 6u, Arr64< Hash(wxS("Mateusz Pusz")) >(), wxS("`std::basic_fixed_string`") >  >() },
    { 3095u, RevList< Rev< 0u, Arr64< Hash(wxS("Saksham Sharma")) >(), wxS("P3095R0") >  >() },
    { 3096u, RevList< Rev< 0u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 1u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 2u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 3u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 4u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 5u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 6u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 7u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") > , Rev< 8u, Arr64< Hash(wxS("Adam Lach")) >(), wxS("Function Parameter Reflection in Reflection for C++26") >  >() },
    { 3097u, RevList< Rev< 0u, Arr64< Hash(wxS("Timur Doumler")) >(), wxS("Title1468") >  >() },
    { 3098u, RevList< Rev< 0u, Arr64< Hash(wxS("Author709")) >(), wxS("Contracts for C++: Postcondition captures") > , Rev< 1u, Arr64< Hash(wxS("Author553")) >(), wxS("Contracts for C++: Postcondition captures") >  >() },
    { 3100u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1381")) >(), wxS("Title1073") > , Rev< 1u, Arr64< Hash(wxS("Author480")) >(), wxS("Title399") >  >() },
    { 3101u, RevList< Rev< 0u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("Differentiating potentially throwing and non throwing violation handlers") >  >() },
    { 3102u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title86") >  >() },
    { 3103u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("More bitset operations") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("More bitset operations") > , Rev< 2u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("More bitset operations") >  >() },
    { 3104u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Bit permutations") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Bit permutations") > , Rev< 2u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Bit permutations") > , Rev< 3u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Bit permutations") >  >() },
    { 3105u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("constexpr std::uncaught_exceptions()") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("constexpr std::uncaught_exceptions()") > , Rev< 2u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("constexpr std::uncaught_exceptions()") >  >() },
    { 3106u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Clarifying rules for brace elision in aggregateinitialization") > , Rev< 1u, Arr64< Hash(wxS("James Touton")) >(), wxS("Clarifying rules for brace elision in aggregateinitialization") >  >() },
    { 3107u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") > , Rev< 4u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") > , Rev< 5u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Permit an efficient implementation of std::print") >  >() },
    { 3109u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1289")) >(), wxS("Title1000") >  >() },
    { 3110u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Array element initialization via pattern expansion") >  >() },
    { 3111u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1492")) >(), wxS("Atomic Reduction Operations") > , Rev< 1u, Arr64< Hash(wxS("Author1238")) >(), wxS("Atomic Reduction Operations") > , Rev< 2u, Arr64< Hash(wxS("Author372")) >(), wxS("Atomic Reduction Operations") > , Rev< 3u, Arr64< Hash(wxS("Author393")) >(), wxS("Atomic Reduction Operations") > , Rev< 4u, Arr64< Hash(wxS("Author330")) >(), wxS("Atomic Reduction Operations") > , Rev< 5u, Arr64< Hash(wxS("Author1977")) >(), wxS("Atomic Reduction Operations") >  >() },
    { 3112u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Specify Constructor of `std::nullopt_t`") >  >() },
    { 3113u, RevList< Rev< 0u, Arr64< Hash(wxS("Author761")) >(), wxS("2024-02-01 telecon") >  >() },
    { 3114u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1599")) >(), wxS("dwdwedwed") >  >() },
    { 3115u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title838") >  >() },
    { 3116u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Policy for `explicit`") >  >() },
    { 3117u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Extending Conditionally Borrowed") > , Rev< 1u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Extending Conditionally Borrowed") >  >() },
    { 3119u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1037") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1408") >  >() },
    { 3122u, RevList< Rev< 0u, Arr64< Hash(wxS("Author421")) >(), wxS("Using [[nodiscard]] should be Recommended Practice") > , Rev< 1u, Arr64< Hash(wxS("Author320")) >(), wxS("Using [[nodiscard]] should be Recommended Practice") >  >() },
    { 3123u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-02 Library Evolution Polls") >  >() },
    { 3124u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-02 Library Evolution Poll Outcomes") >  >() },
    { 3125u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("D3125R0: Pointer Tagging") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr pointer tagging") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr pointer tagging") > , Rev< 3u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr pointer tagging") >  >() },
    { 3126u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3126r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3126r1") > , Rev< 2u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3126r2") > , Rev< 3u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3126r3") >  >() },
    { 3127u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3127r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3127r1") >  >() },
    { 3128u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3128r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3128r1") > , Rev< 2u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3128r2") > , Rev< 3u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3128r3") >  >() },
    { 3129u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3129r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3129r2") >  >() },
    { 3130u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3130r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3130r1") > , Rev< 2u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3130r2") > , Rev< 3u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3130r3") >  >() },
    { 3131u, RevList< Rev< 0u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3131r0") > , Rev< 1u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3131r1") > , Rev< 2u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3131r2") > , Rev< 3u, Arr64< Hash(wxS("Phil Ratzloff")) >(), wxS("Test document for P3131r3") >  >() },
    { 3133u, RevList< Rev< 0u, Arr64< Hash(wxS("Chip Hogg")) >(), wxS("Fast first-factor finding function") >  >() },
    { 3135u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Extensions") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Extensions") >  >() },
    { 3136u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Retiring niebloids") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("Retiring niebloids") >  >() },
    { 3137u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::to_input") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::to_input") > , Rev< 2u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::to_input") > , Rev< 3u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::to_input") >  >() },
    { 3138u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_last") > , Rev< 1u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_last") > , Rev< 2u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_last") > , Rev< 3u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_latest") > , Rev< 4u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_latest") > , Rev< 5u, Arr64< Hash(wxS("Tim Song")) >(), wxS("views::cache_latest") >  >() },
    { 3139u, RevList< Rev< 0u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Pointer cast for unique_ptr - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Zhihao Yuan")) >(), wxS("Pointer cast for unique_ptr - HackMD") >  >() },
    { 3140u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("std::int_least128_t") >  >() },
    { 3142u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1166")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") >  >() },
    { 3143u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1888")) >(), wxS("An in-depth walk-through of the example in P3090R0") >  >() },
    { 3144u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Deprecate Delete of a Pointer to an Incomplete Type") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Deprecate Delete of a Pointer to an Incomplete Type") > , Rev< 2u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Deleting a Pointer to an Incomplete Type Should be Ill-formed") >  >() },
    { 3146u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Clarifying std::variant converting construction") > , Rev< 1u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Clarifying std::variant converting construction") > , Rev< 2u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Clarifying std::variant converting construction") >  >() },
    { 3147u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1577")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1926")) >(), wxS("A Direction for Vector") >  >() },
    { 3148u, RevList< Rev< 0u, Arr64< Hash(wxS("Author312")) >(), wxS("Some Proposed Improvements to the Presentation of Requirements for Functions") > , Rev< 1u, Arr64< Hash(wxS("Author1848")) >(), wxS("Formatting of chrono Time Values") >  >() },
    { 3149u, RevList< Rev< 0u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("Creating scopes for non-sequential concurrency") > , Rev< 1u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("Creating scopes for non-sequential concurrency") > , Rev< 2u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("Creating scopes for non-sequential concurrency") > , Rev< 3u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 4u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 5u, Arr64< Hash(wxS("Ian Petersen")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 6u, Arr64< Hash(wxS("2")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 7u, Arr64< Hash(wxS("2")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 8u, Arr64< Hash(wxS("2")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") > , Rev< 9u, Arr64< Hash(wxS("2")) >(), wxS("`async_scope` -- Creating scopes for non-sequentialconcurrency") >  >() },
    { 3150u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG14 2024/02/15 P3150R0.docx") >  >() },
    { 3151u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG19 2024/02/15 P3151R0.docx") >  >() },
    { 3152u, RevList< Rev< 0u, Arr64< Hash(wxS("Author781")) >(), wxS("Title635") > , Rev< 1u, Arr64< Hash(wxS("Author1138")) >(), wxS("Title905") >  >() },
    { 3153u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1119")) >(), wxS("An allocator-aware optional type") >  >() },
    { 3154u, RevList< Rev< 0u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Deprecating signed character types in iostreams") > , Rev< 1u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Deprecating signed character types in iostreams") >  >() },
    { 3155u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1371")) >(), wxS("Title1063") >  >() },
    { 3156u, RevList< Rev< 0u, Arr64< Hash(wxS("Author122")) >(), wxS("<tt>empty_checkable_range</tt>") >  >() },
    { 3157u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1924")) >(), wxS("Title1488") > , Rev< 1u, Arr64< Hash(wxS("Andrei Alexandrescu")) >(), wxS("Generative Extensions for Reflection") >  >() },
    { 3158u, RevList< Rev< 0u, Arr64< Hash(wxS("James Touton")) >(), wxS("Headless Template Template Parameters") >  >() },
    { 3159u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("C++ Range Adaptors and Parallel Algorithms") >  >() },
    { 3160u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("An Allocator-aware `inplace_vector`") > , Rev< 1u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("An Allocator-Aware `inplace_vector`") > , Rev< 2u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("An Allocator-Aware `inplace_vector`") >  >() },
    { 3161u, RevList< Rev< 0u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("P3161R0 - Unified integer overflow arithmetic") > , Rev< 1u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("D3161R1 - Unified integer overflow arithmetic") > , Rev< 2u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("R3161R2 - Unified integer overflow arithmetic") > , Rev< 3u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("R3161R3 - Unified integer overflow arithmetic") > , Rev< 4u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("R3161R4 - Unified integer overflow arithmetic") >  >() },
    { 3162u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1397")) >(), wxS("LEWG [[nodiscard]] policy - HackMD") >  >() },
    { 3164u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Improving diagnostics for sender expressions") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Improving diagnostics for sender expressions") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Improving diagnostics for sender expressions") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Early Diagnostics for Sender Expressions") >  >() },
    { 3165u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1640")) >(), wxS("Contracts on virtual functions for the Contracts MVP") >  >() },
    { 3166u, RevList< Rev< 0u, Arr64< Hash(wxS("Lewis Baker")) >(), wxS("Static Exception Specifications") >  >() },
    { 3167u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Attributes for the result name in a postcondition assertion") >  >() },
    { 3168u, RevList< Rev< 0u, Arr64< Hash(wxS("Author788")) >(), wxS("Give std::optional range support - HackMD") > , Rev< 1u, Arr64< Hash(wxS("4")) >(), wxS("Give std::optional range support - HackMD") > , Rev< 2u, Arr64< Hash(wxS("4")) >(), wxS("Give std::optional range support - HackMD") >  >() },
    { 3169u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("Inherited contracts") >  >() },
    { 3170u, RevList< Rev< 0u, Arr64< Hash(wxS("Author566")) >(), wxS("sinkable exception error message - HackMD") >  >() },
    { 3171u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Adding functionality to placeholder types") >  >() },
    { 3172u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Using `this` in constructor preconditions") >  >() },
    { 3173u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title1434") >  >() },
    { 3174u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21") >  >() },
    { 3175u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Reconsidering the std::execution::on algorithm") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Reconsidering the std::execution::on algorithm") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Reconsidering the std::execution::on algorithm") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Reconsidering the std::execution::on algorithm") >  >() },
    { 3176u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("The Oxford variadic comma") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("The Oxford variadic comma") >  >() },
    { 3177u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("const prvalues in the conditional operator") >  >() },
    { 3178u, RevList< Rev< 0u, Arr64< Hash(wxS("TPK Healy")) >(), wxS("PxxxxR0: std::exception_typeid") > , Rev< 1u, Arr64< Hash(wxS("Thomas PK")) >(), wxS("Retrieval of Exception Information") >  >() },
    { 3179u, RevList< Rev< 0u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 1u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 2u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 3u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 4u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 5u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 6u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") > , Rev< 7u, Arr64< Hash(wxS("Ruslan Arutyunyan")) >(), wxS("C++ parallel range algorithms") >  >() },
    { 3180u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1482")) >(), wxS("C++ Standard Library Issues to be moved in Tokyo, Mar. 2024") >  >() },
    { 3181u, RevList< Rev< 0u, Arr64< Hash(wxS("Hans Boehm")) >(), wxS("Atomic stores and object lifetimes") >  >() },
    { 3182u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Add `pop_value` methods to container adaptors") > , Rev< 1u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Add container pop methods that return the popped value") >  >() },
    { 3183u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Contract testing support") > , Rev< 1u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Contract testing support") >  >() },
    { 3185u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("A proposed direction for C++ Standard Networking based on IETF TAPS") >  >() },
    { 3187u, RevList< Rev< 1u, Arr64< Hash(wxS("Kirk Shoop")) >(), wxS("remove ensure_started and start_detached from P2300") >  >() },
    { 3188u, RevList< Rev< 0u, Arr64< Hash(wxS("Author121")) >(), wxS("Proxy: A Pointer-Semantics-Based Polymorphism Library") >  >() },
    { 3189u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1750")) >(), wxS("P3189R0") >  >() },
    { 3190u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2139")) >(), wxS("talk_ewg") >  >() },
    { 3191u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Feedback on the scalability of contract violation handlers in P2900") >  >() },
    { 3192u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("PowerPoint-Prsentation") >  >() },
    { 3194u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("PowerPoint-Prsentation") >  >() },
    { 3196u, RevList< Rev< 0u, Arr64< Hash(wxS("Author971")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 3197u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1102")) >(), wxS("A response to the Tokyo EWG polls on the Contracts MVP") >  >() },
    { 3198u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("A takeaway from the Tokyo LEWG meeting on Contracts MVP") >  >() },
    { 3199u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Choices for ~make_optional~ and ~value_or()~") >  >() },
    { 3201u, RevList< Rev< 0u, Arr64< Hash(wxS("Author69")) >(), wxS("LEWG [[nodiscard]] policy - HackMD") > , Rev< 1u, Arr64< Hash(wxS("Author1970")) >(), wxS("LEWG [[nodiscard]] policy - HackMD") >  >() },
    { 3203u, RevList< Rev< 0u, Arr64< Hash(wxS("name")) >(), wxS("Title640") >  >() },
    { 3204u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title332") >  >() },
    { 3205u, RevList< Rev< 0u, Arr64< Hash(wxS("Gaaper A~man")) >(), wxS("Throwing from a function should be a contract violation.") >  >() },
    { 3206u, RevList< Rev< 0u, Arr64< Hash(wxS("Maikel Nadolski")) >(), wxS("A sender query for completion behaviour") >  >() },
    { 3207u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1178")) >(), wxS("More & like - HackMD") >  >() },
    { 3208u, RevList< Rev< 0u, Arr64< Hash(wxS("Sunghyun Min")) >(), wxS("Title1671") >  >() },
    { 3210u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P3210R0 A Postcondition *is* a Pattern Match") > , Rev< 1u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P3210R1 A Postcondition *is* a Pattern Match") > , Rev< 2u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P3210R2 A Postcondition *is* a Pattern Match") >  >() },
    { 3211u, RevList< Rev< 0u, Arr64< Hash(wxS("Author648")) >(), wxS("<code>views::transform_join</code>") >  >() },
    { 3212u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("The contract of sort()") >  >() },
    { 3213u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-04 Library Evolution Polls") >  >() },
    { 3214u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-04 Library Evolution Poll Outcomes") >  >() },
    { 3215u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1699")) >(), wxS("Using variable template template without meta programming") >  >() },
    { 3216u, RevList< Rev< 0u, Arr64< Hash(wxS("Author144")) >(), wxS("<code>views::slice</code>") >  >() },
    { 3217u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Adjoints to \"Enabling list-initialization for algorithms\": find_last") >  >() },
    { 3218u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1062")) >(), wxS("const references to constexpr variables - HackMD") >  >() },
    { 3220u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1756")) >(), wxS("<code>views::delimit</code>") >  >() },
    { 3221u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("Disable pointers to contracted functions") >  >() },
    { 3222u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by adding transposed special cases for P2642 layouts") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by adding transposed special cases for P2642 layouts") >  >() },
    { 3223u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1496")) >(), wxS("Making std::basic_istream::ignore less surprising") > , Rev< 1u, Arr64< Hash(wxS("Author1021")) >(), wxS("Making std::istream::ignore less surprising") >  >() },
    { 3224u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("PowerPoint-Prsentation") >  >() },
    { 3225u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("PowerPoint-Prsentation") >  >() },
    { 3226u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1818")) >(), wxS("Title1405") >  >() },
    { 3227u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1186")) >(), wxS("Fixing the library API for contract violation handling") > , Rev< 1u, Arr64< Hash(wxS("Author1415")) >(), wxS("Fixing the library API for contract violation handling") >  >() },
    { 3228u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2080")) >(), wxS("Title1612") > , Rev< 1u, Arr64< Hash(wxS("Author2094")) >(), wxS("Title1624") >  >() },
    { 3229u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1347")) >(), wxS("Title1042") > , Rev< 1u, Arr64< Hash(wxS("Author1645")) >(), wxS("Title1274") >  >() },
    { 3230u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2018")) >(), wxS("<code>views::(take|drop)_exactly</code>") > , Rev< 1u, Arr64< Hash(wxS("Author1874")) >(), wxS("<code>views::unchecked_(take|drop)</code>") > , Rev< 2u, Arr64< Hash(wxS("Author365")) >(), wxS("<code>views::unchecked_(take|drop)</code>") >  >() },
    { 3232u, RevList< Rev< 0u, Arr64< Hash(wxS("Author155")) >(), wxS("User-defined erroneous behaviour") > , Rev< 1u, Arr64< Hash(wxS("Author1443")) >(), wxS("User-defined erroneous behaviour") >  >() },
    { 3233u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Issues with P2786 (\"Trivial Relocatability For C++26\")") >  >() },
    { 3234u, RevList< Rev< 0u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Utility to check if a pointer is in a given range") > , Rev< 1u, Arr64< Hash(wxS("Glen Joseph")) >(), wxS("Utility to check if a pointer is in a given range") >  >() },
    { 3235u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::print more types faster with less memory") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::print more types faster with less memory") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::print more types faster with less memory") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("std::print more types faster with less memory") >  >() },
    { 3236u, RevList< Rev< 0u, Arr64< Hash(wxS("Alan de")) >(), wxS("Please reject P2786 and adopt P1144") > , Rev< 1u, Arr64< Hash(wxS("Alan de")) >(), wxS("Please reject P2786 and adopt P1144") >  >() },
    { 3237u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrei Zissu")) >(), wxS("Matrix Representation of Contract Semantics") > , Rev< 1u, Arr64< Hash(wxS("Andrei Zissu")) >(), wxS("P3237 - Matrix Representation of Contract Semantics") > , Rev< 2u, Arr64< Hash(wxS("Andrei Zissu")) >(), wxS("P3237 - Matrix Representation of Contract Semantics") >  >() },
    { 3238u, RevList< Rev< 0u, Arr64< Hash(wxS("Author518")) >(), wxS("An alternate proposal for naming contract semantics") >  >() },
    { 3239u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("A Relocating Swap") >  >() },
    { 3240u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1902")) >(), wxS("p3240") >  >() },
    { 3241u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1200")) >(), wxS("P3241") >  >() },
    { 3242u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolas Morales")) >(), wxS("Copy and fill for mdspan") > , Rev< 1u, Arr64< Hash(wxS("Nicolas Morales")) >(), wxS("Copy and fill for mdspan") >  >() },
    { 3243u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1294")) >(), wxS("Give <code>std::optional</code> Range Support") >  >() },
    { 3244u, RevList< Rev< 0u, Arr64< Hash(wxS("Author269")) >(), wxS("<code>[[nodiscard]]</code> Policy") >  >() },
    { 3245u, RevList< Rev< 0u, Arr64< Hash(wxS("Xavier Bonaventura")) >(), wxS("Allow `[[nodiscard]]` in type alias declarations") > , Rev< 1u, Arr64< Hash(wxS("Xavier Bonaventura")) >(), wxS("Allow `[[nodiscard]]` in type alias declarations") > , Rev< 2u, Arr64< Hash(wxS("Xavier Bonaventura")) >(), wxS("Allow `[[nodiscard]]` in type alias declarations") >  >() },
    { 3247u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1872")) >(), wxS("Deprecate the notion of trivial types") > , Rev< 1u, Arr64< Hash(wxS("Author188")) >(), wxS("Deprecate the notion of trivial types") > , Rev< 2u, Arr64< Hash(wxS("Author1696")) >(), wxS("Deprecate the notion of trivial types") >  >() },
    { 3248u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Require [u]intptr_t") > , Rev< 1u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Require [u]intptr_t") > , Rev< 2u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Require [u]intptr_t") > , Rev< 3u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("Require [u]intptr_t") >  >() },
    { 3249u, RevList< Rev< 0u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("P3249R0 - unified pattern matching and contracts syntax") >  >() },
    { 3250u, RevList< Rev< 0u, Arr64< Hash(wxS("Author642")) >(), wxS("C++ contracts with regards to function pointers") >  >() },
    { 3251u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1906")) >(), wxS("C++ Contracts and Coroutines") >  >() },
    { 3253u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Distinguishing between member and free coroutines") >  >() },
    { 3254u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Reserve identifiers preceded by `@` for non-ignorableannotation tokens") >  >() },
    { 3255u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Expose whether atomic notifying operations are lockfree") > , Rev< 1u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Expose whether atomic notifying operations are lockfree") >  >() },
    { 3257u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1691")) >(), wxS("Make the predicate of <TT>contract_assert</TT> more regular") >  >() },
    { 3258u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title402") >  >() },
    { 3259u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2187")) >(), wxS("const by default - HackMD") >  >() },
    { 3261u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title114") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title606") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1580") >  >() },
    { 3263u, RevList< Rev< 0u, Arr64< Hash(wxS("Tiago Freire")) >(), wxS("P3263R0 - Encoding annotated char") >  >() },
    { 3264u, RevList< Rev< 0u, Arr64< Hash(wxS("Author701")) >(), wxS("Double-evaluation of preconditions") > , Rev< 1u, Arr64< Hash(wxS("Author953")) >(), wxS("Double-evaluation of preconditions") >  >() },
    { 3265u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1392")) >(), wxS("Ship Contracts in a TS") > , Rev< 1u, Arr64< Hash(wxS("Author124")) >(), wxS("Ship Contracts in a TS") > , Rev< 2u, Arr64< Hash(wxS("Author491")) >(), wxS("Ship Contracts in a TS") > , Rev< 3u, Arr64< Hash(wxS("Author645")) >(), wxS("Ship Contracts in a TS") >  >() },
    { 3266u, RevList< Rev< 0u, Arr64< Hash(wxS("Author817")) >(), wxS("non referenceable types - HackMD") >  >() },
    { 3267u, RevList< Rev< 0u, Arr64< Hash(wxS("Author477")) >(), wxS("C++ contracts implementation strategies") > , Rev< 1u, Arr64< Hash(wxS("Author964")) >(), wxS("C++ contracts implementation strategies") >  >() },
    { 3268u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1867")) >(), wxS("C++ Contracts Constification Challenges Concerning Current Code") >  >() },
    { 3269u, RevList< Rev< 0u, Arr64< Hash(wxS("Author228")) >(), wxS("Do Not Ship Contracts as a TS") >  >() },
    { 3270u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1036") >  >() },
    { 3271u, RevList< Rev< 0u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title60") > , Rev< 1u, Arr64< Hash(wxS("Lisa Lippincott")) >(), wxS("Title1284") >  >() },
    { 3273u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Introspection of Closure Types") >  >() },
    { 3274u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1692")) >(), wxS("Title1313") >  >() },
    { 3275u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Replace simd operator[] with getter and setter functions or not [P3275R0]") >  >() },
    { 3276u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title59") >  >() },
    { 3278u, RevList< Rev< 0u, Arr64< Hash(wxS("Nina Ranns")) >(), wxS("P3278R0") >  >() },
    { 3279u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("CWG2463: What \"trivially fooable\" should mean") >  >() },
    { 3281u, RevList< Rev< 0u, Arr64< Hash(wxS("Author545")) >(), wxS("Contract Checks Should be Regular C++") >  >() },
    { 3282u, RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Static Storage for C++ Concurrent <tt>bounded_queue</tt>") >  >() },
    { 3283u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1824")) >(), wxS("P3283. Adding .first() and .last() to strings") >  >() },
    { 3284u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("`finally`, `write_env`, and `unstoppable` SenderAdaptors") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("`finally`, `write_env`, and `unstoppable` SenderAdaptors") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("`write_env` and `unstoppable` Sender Adaptors") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("`write_env` and `unstoppable` Sender Adaptors") >  >() },
    { 3285u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title108") >  >() },
    { 3286u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Module Metadata Distributed With Pre-Built Libraries") >  >() },
    { 3287u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Exploration of namespaces for std::simd [P3287R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Exploration of namespaces for std::simd [P3287R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Exploration of namespaces for std::simd [P3287R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Exploration of namespaces for std::simd [P3287R3]") >  >() },
    { 3288u, RevList< Rev< 0u, Arr64< Hash(wxS("TPK Healy")) >(), wxS("std::elide") > , Rev< 1u, Arr64< Hash(wxS("Thomas PK")) >(), wxS("std::elide") > , Rev< 2u, Arr64< Hash(wxS("Thomas PK")) >(), wxS("std::elide") > , Rev< 3u, Arr64< Hash(wxS("Thomas PK")) >(), wxS("std::elide") >  >() },
    { 3289u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("consteval blocks") > , Rev< 1u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("consteval blocks") >  >() },
    { 3290u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title192") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1334") > , Rev< 2u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1072") >  >() },
    { 3292u, RevList< Rev< 0u, Arr64< Hash(wxS("David Goldblatt")) >(), wxS("P3292R0R0: Provenance and Concurrency") >  >() },
    { 3293u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Splicing a base class subobject") > , Rev< 1u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Splicing a base class subobject") >  >() },
    { 3294u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrei Alexandrescu")) >(), wxS("Code Injection with Token Sequences") > , Rev< 1u, Arr64< Hash(wxS("Andrei Alexandrescu")) >(), wxS("Code Injection with Token Sequences") > , Rev< 2u, Arr64< Hash(wxS("Andrei Alexandrescu")) >(), wxS("Code Injection with Token Sequences") >  >() },
    { 3295u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding constexpr containers and constexpr exception types") > , Rev< 1u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding constexpr containers and constexpr exception types") > , Rev< 2u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding constexpr containers and constexpr exception types") > , Rev< 3u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Freestanding constexpr containers and constexpr exception types") >  >() },
    { 3296u, RevList< Rev< 0u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("let_async_scope.html") > , Rev< 1u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("let_async_scope.html") > , Rev< 2u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("let_async_scope.html") > , Rev< 3u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("let_async_scope.html") > , Rev< 4u, Arr64< Hash(wxS("Anthony Williams")) >(), wxS("let_async_scope.html") >  >() },
    { 3297u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1236")) >(), wxS("C++26 Needs Contract Checking") > , Rev< 1u, Arr64< Hash(wxS("Author1481")) >(), wxS("C++26 Needs Contract Checking") >  >() },
    { 3298u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Implicit user-defined conversion functions as operator.()") > , Rev< 1u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Implicit user-defined conversion functions as operator.()") >  >() },
    { 3299u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend <code>std::simd</code> with range constructors") > , Rev< 1u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend <code>std::simd</code> with range constructors") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend <code>std::simd</code> with range constructors") > , Rev< 3u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Proposal to extend std::simd with range constructors") >  >() },
    { 3300u, RevList< Rev< 0u, Arr64< Hash(wxS("Bryce Adelstein")) >(), wxS("C++ Asynchronous Parallel Algorithms") >  >() },
    { 3301u, RevList< Rev< 0u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("inplace_stoppable_base") >  >() },
    { 3302u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("SG16: Unicode meeting summaries 2024-03-13 through 2024-05-08") >  >() },
    { 3303u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Fixing Lazy Sender Algorithm Customization") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("Fixing Lazy Sender Algorithm Customization") >  >() },
    { 3304u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG14 2024/02/15 P3304R0.docx") >  >() },
    { 3305u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG19 2024/05/22 P3305R0.docx") >  >() },
    { 3306u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2049")) >(), wxS("Atomic Read-Modify-Write Improvements") >  >() },
    { 3307u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1871")) >(), wxS("Floating-Point Maximum/Minimum Function Objects") >  >() },
    { 3308u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("mdarray design questions and answers") >  >() },
    { 3309u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr atomic<T> and atomic_ref<T>") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr atomic<T> and atomic_ref<T>") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr atomic<T> and atomic_ref<T>") > , Rev< 3u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("atomic<T> and atomic_ref<T>") >  >() },
    { 3310u, RevList< Rev< 0u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving partial ordering issues introduced by P0522R0") > , Rev< 1u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving partial ordering issues introduced by P0522R0") > , Rev< 2u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving partial ordering issues introduced by P0522R0") > , Rev< 3u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving partial ordering issues introduced by P0522R0") > , Rev< 4u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving issues introduced by P0522R0") > , Rev< 5u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Solving issues introduced by relaxed template templateparameter matching") >  >() },
    { 3311u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("An opt-in approach for integration of traditional assert facilities in C++ contracts") >  >() },
    { 3312u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Overload Set Types") > , Rev< 1u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("Overload Set Types") >  >() },
    { 3313u, RevList< Rev< 0u, Arr64< Hash(wxS("Khalil Estell")) >(), wxS("Impacts of noexept on ARM table based exception metadata") >  >() },
    { 3314u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-07 Library Evolution Polls") >  >() },
    { 3315u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-07 Library Evolution Poll Outcomes") >  >() },
    { 3316u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("A more predictable unchecked semantic") >  >() },
    { 3317u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("Compile time resolved contracts") >  >() },
    { 3318u, RevList< Rev< 0u, Arr64< Hash(wxS("Author529")) >(), wxS("Throwing violation handlers, from an application programming perspective") >  >() },
    { 3319u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R3]") > , Rev< 4u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R4]") > , Rev< 5u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Add an iota object for simd (and more) [P3319R5]") >  >() },
    { 3320u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1444")) >(), wxS("DeleteIfIncomplete") >  >() },
    { 3321u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title89") >  >() },
    { 3323u, RevList< Rev< 0u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("cv-qualified types in atomic and atomic_ref") > , Rev< 1u, Arr64< Hash(wxS("Gonzalo Brito")) >(), wxS("cv-qualified types in atomic and atomic_ref") >  >() },
    { 3324u, RevList< Rev< 0u, Arr64< Hash(wxS("Tom Honermann")) >(), wxS("Attributes for namespace aliases, template parameters, and lambda captures") >  >() },
    { 3325u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") > , Rev< 2u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") > , Rev< 3u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") > , Rev< 4u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") > , Rev< 5u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("A Utility for Creating Execution Environments") >  >() },
    { 3326u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1684")) >(), wxS("favor ease of use - HackMD") >  >() },
    { 3327u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1073")) >(), wxS("Title864") >  >() },
    { 3328u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title756") >  >() },
    { 3329u, RevList< Rev< 0u, Arr64< Hash(wxS("Audience")) >(), wxS("P3329R0 Healing the Filter View") >  >() },
    { 3330u, RevList< Rev< 0u, Arr64< Hash(wxS("Author222")) >(), wxS("User-defined Atomic Read-Modify-Write Operations") >  >() },
    { 3331u, RevList< Rev< 0u, Arr64< Hash(wxS("Author819")) >(), wxS("Title652") > , Rev< 1u, Arr64< Hash(wxS("Author1358")) >(), wxS("Title1054") >  >() },
    { 3332u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1923")) >(), wxS("Title1487") >  >() },
    { 3334u, RevList< Rev< 0u, Arr64< Hash(wxS("Coral Kashri")) >(), wxS("Cross Static Variables") >  >() },
    { 3335u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Core Options") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Core Options") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Core Options") > , Rev< 3u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("Structured Core Options") > , Rev< 4u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: Structured Core Options") >  >() },
    { 3336u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title992") >  >() },
    { 3338u, RevList< Rev< 0u, Arr64< Hash(wxS("Author516")) >(), wxS("Observe and ignore semantics in constant evaluation") >  >() },
    { 3339u, RevList< Rev< 0u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("C++ Ecosystem IS Open License") > , Rev< 1u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: C++ Ecosystem IS Open License") >  >() },
    { 3340u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("A Consistent Grammar for Sequences") >  >() },
    { 3341u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1657")) >(), wxS("C++ Standard Library Issues to be moved in St. Louis") >  >() },
    { 3342u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1063")) >(), wxS("C++ Ecosystem Working Draft") > , Rev< 1u, Arr64< Hash(wxS("Author812")) >(), wxS("C++ Ecosystem Working Draft") > , Rev< 2u, Arr64< Hash(wxS("Ren\u00E9 Ferdinand")) >(), wxS("WITHDRAWN: Working Draft, Standard for C++ Ecosystem") >  >() },
    { 3343u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1909")) >(), wxS("Contracts: What we are doing here - P3343R0") >  >() },
    { 3344u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1879")) >(), wxS("Contracts on Virtual Functions - P3343R0 - Presentation on P3097R0") >  >() },
    { 3345u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1721")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 3346u, RevList< Rev< 0u, Arr64< Hash(wxS("Nat Goodspeed")) >(), wxS("threadlocalmeansfiber-specific") >  >() },
    { 3347u, RevList< Rev< 0u, Arr64< Hash(wxS("Paul E")) >(), wxS("P3347R0 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers") > , Rev< 1u, Arr64< Hash(wxS("Paul E")) >(), wxS("P3347R1 Pointer lifetime-end zap proposed solutions: Tighten IDB for invalid and prospective pointers") >  >() },
    { 3348u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("C++26 should refer to C23 not C17") > , Rev< 1u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Title884") > , Rev< 2u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Title64") > , Rev< 3u, Arr64< Hash(wxS("Jonathan Wakely")) >(), wxS("Title1127") >  >() },
    { 3349u, RevList< Rev< 0u, Arr64< Hash(wxS("Author277")) >(), wxS("Converting contiguous iterators to pointers") > , Rev< 1u, Arr64< Hash(wxS("Author197")) >(), wxS("Converting contiguous iterators to pointers") >  >() },
    { 3351u, RevList< Rev< 0u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("views::scan") > , Rev< 1u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("views::scan") > , Rev< 2u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("views::scan") >  >() },
    { 3352u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("P3352R0 Taming the Demons (C++ version) Undefined Behavior and Partial Program Correctness") >  >() },
    { 3354u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1226")) >(), wxS("Issues with P2786 (\"Trivial Relocatability For C++26\")") >  >() },
    { 3355u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix submdspan for C++26") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix submdspan for C++26") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix submdspan for C++26") >  >() },
    { 3356u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1163")) >(), wxS("non_invalidating_vector - HackMD") >  >() },
    { 3357u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas PK")) >(), wxS("NRVO with factory and after_factory") >  >() },
    { 3358u, RevList< Rev< 0u, Arr64< Hash(wxS("Sy Brand")) >(), wxS("SARIF for Structured Diagnostics") >  >() },
    { 3359u, RevList< Rev< 0u, Arr64< Hash(wxS("Author293")) >(), wxS("P2667R0++") >  >() },
    { 3360u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1151")) >(), wxS("P2667R0++") >  >() },
    { 3361u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1844")) >(), wxS("contracts.dvi") > , Rev< 1u, Arr64< Hash(wxS("Author1020")) >(), wxS("contracts.dvi") >  >() },
    { 3362u, RevList< Rev< 0u, Arr64< Hash(wxS("Author94")) >(), wxS("Static analysis and 'safety' of Contracts, P2900 vs. P2680/P3285") >  >() },
    { 3364u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated u8path overloads From C++26") >  >() },
    { 3365u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove the Deprecated Class Template from C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove the Deprecated Class Template from C++26") >  >() },
    { 3366u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Initialization API from C++26") > , Rev< 1u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Remove Deprecated Atomic Initialization API from C++26") >  >() },
    { 3367u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr coroutines") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr coroutines") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr coroutines") > , Rev< 3u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr coroutines") > , Rev< 4u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr coroutines") >  >() },
    { 3369u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("constexpr for uninitialized_default_construct") >  >() },
    { 3370u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1475")) >(), wxS("Add new library headers from C23") > , Rev< 1u, Arr64< Hash(wxS("Author1018")) >(), wxS("Add new library headers from C23") >  >() },
    { 3371u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by making the symmetric and Hermitian rank-k and rank-2k updates consistent with the BLAS") > , Rev< 1u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS") > , Rev< 2u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS") > , Rev< 3u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS") > , Rev< 4u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS") >  >() },
    { 3372u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr containers") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr containers") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr containers") > , Rev< 3u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr containers") >  >() },
    { 3373u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Paper") > , Rev< 1u, Arr64< Hash(wxS("1")) >(), wxS("Paper R1") >  >() },
    { 3374u, RevList< Rev< 0u, Arr64< Hash(wxS("Liang Jiaming")) >(), wxS("Adding formatter for fpos<mbstate_t>") > , Rev< 1u, Arr64< Hash(wxS("Liang Jiaming")) >(), wxS("Adding formatter for fpos<mbstate_t>") >  >() },
    { 3375u, RevList< Rev< 0u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("Reproducible floating-point results") > , Rev< 1u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("Reproducible floating-point results") > , Rev< 2u, Arr64< Hash(wxS("Guy Davidson")) >(), wxS("Reproducible floating-point results") >  >() },
    { 3376u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Contract assertions versus static analysis and 'safety'") >  >() },
    { 3378u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr exception types") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr exception types") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr exception types") >  >() },
    { 3379u, RevList< Rev< 0u, Arr64< Hash(wxS("Author684")) >(), wxS("Constrain std::expected equality operators") >  >() },
    { 3380u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Extending support for class types as non-type templateparameters") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Extending support for class types as non-type templateparameters") >  >() },
    { 3381u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Syntax for Reflection") >  >() },
    { 3382u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1866")) >(), wxS("Coarse clocks and resolutions") >  >() },
    { 3383u, RevList< Rev< 0u, Arr64< Hash(wxS("Stephan Lachnit")) >(), wxS("mdspan.at()") > , Rev< 1u, Arr64< Hash(wxS("Stephan Lachnit")) >(), wxS("mdspan.at()") > , Rev< 2u, Arr64< Hash(wxS("Stephan Lachnit")) >(), wxS("mdspan.at()") >  >() },
    { 3384u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Rifkin")) >(), wxS("__COUNTER__") >  >() },
    { 3385u, RevList< Rev< 0u, Arr64< Hash(wxS("Aurelien Cassagnes")) >(), wxS("Attributes reflection") > , Rev< 1u, Arr64< Hash(wxS("Aurelien Cassagnes")) >(), wxS("Attributes reflection") > , Rev< 2u, Arr64< Hash(wxS("Aurelien Cassagnes")) >(), wxS("Attributes reflection") > , Rev< 3u, Arr64< Hash(wxS("Aurelien Cassagnes")) >(), wxS("Attributes reflection") > , Rev< 4u, Arr64< Hash(wxS("Aurelien Cassagnes")) >(), wxS("Attributes reflection") >  >() },
    { 3386u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title708") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1193") >  >() },
    { 3387u, RevList< Rev< 0u, Arr64< Hash(wxS("Author174")) >(), wxS("Title148") >  >() },
    { 3388u, RevList< Rev< 0u, Arr64< Hash(wxS("Robert Leahy")) >(), wxS("Paper") > , Rev< 1u, Arr64< Hash(wxS("1 Authors")) >(), wxS("Paper R1") > , Rev< 2u, Arr64< Hash(wxS("1")) >(), wxS("Paper R2") >  >() },
    { 3389u, RevList< Rev< 0u, Arr64< Hash(wxS("Author750")) >(), wxS("Slides") >  >() },
    { 3390u, RevList< Rev< 0u, Arr64< Hash(wxS("Sean Baxter")) >(), wxS("Safe C++") >  >() },
    { 3391u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr std::format") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("constexpr std::format") >  >() },
    { 3392u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Do not promise support for function syntax of operators") >  >() },
    { 3394u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Annotations for Reflection") > , Rev< 1u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Annotations for Reflection") > , Rev< 2u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("Annotations for Reflection") >  >() },
    { 3395u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Formatting of std::error_code") > , Rev< 1u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix encoding issues and add a formatter for std::error_code") > , Rev< 2u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix encoding issues and add a formatter for std::error_code") > , Rev< 3u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix encoding issues and add a formatter for std::error_code") >  >() },
    { 3396u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2183")) >(), wxS("Title1678") > , Rev< 1u, Arr64< Hash(wxS("Author1731")) >(), wxS("Title1337") >  >() },
    { 3397u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2007")) >(), wxS("Clarify requirements on extended floating point types") >  >() },
    { 3398u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("User specified type decay") >  >() },
    { 3399u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("Title1090") >  >() },
    { 3400u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title628") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title210") >  >() },
    { 3401u, RevList< Rev< 0u, Arr64< Hash(wxS("Tian Liao")) >(), wxS("Title69") >  >() },
    { 3402u, RevList< Rev< 0u, Arr64< Hash(wxS("Marc-Andr\u00E9 Laverdi\u00E8re")) >(), wxS("A Safety Profile Verifying Class Initialization") > , Rev< 1u, Arr64< Hash(wxS("Marc-Andr\u00E9 Laverdi\u00E8re")) >(), wxS("A Safety Profile Verifying Class Initialization") > , Rev< 2u, Arr64< Hash(wxS("Marc-Andr\u00E9 Laverdi\u00E8re")) >(), wxS("A Safety Profile Verifying Initialization") >  >() },
    { 3403u, RevList< Rev< 0u, Arr64< Hash(wxS("Andrew Tomazos")) >(), wxS("The Undefined Behavior Question") >  >() },
    { 3404u, RevList< Rev< 0u, Arr64< Hash(wxS("Andre Kostur")) >(), wxS("std::at : Range-checked accesses to arbitrary containers") >  >() },
    { 3405u, RevList< Rev< 0u, Arr64< Hash(wxS("Elias Kosunen")) >(), wxS("Out-of-order designated initializers") >  >() },
    { 3406u, RevList< Rev< 0u, Arr64< Hash(wxS("Author861")) >(), wxS("Title686") >  >() },
    { 3407u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Make idiomatic usage of `offsetof` well-defined") > , Rev< 1u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Make idiomatic usage of `offsetof` well-defined") >  >() },
    { 3409u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1795")) >(), wxS("Enabling more efficient stop-token based cancellation of senders") > , Rev< 1u, Arr64< Hash(wxS("Author1452")) >(), wxS("Enabling more efficient stop-token based cancellation of senders") >  >() },
    { 3411u, RevList< Rev< 0u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`any_view`") > , Rev< 1u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("`any_view`") >  >() },
    { 3412u, RevList< Rev< 0u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("String interpolation") > , Rev< 1u, Arr64< Hash(wxS("Bengt Gustafsson")) >(), wxS("String interpolation") >  >() },
    { 3413u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1596") >  >() },
    { 3415u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Range interface in std::optional breaks code!") >  >() },
    { 3416u, RevList< Rev< 0u, Arr64< Hash(wxS("Author561")) >(), wxS("exception_ptr_cast: Add && = delete overload") >  >() },
    { 3417u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2014")) >(), wxS("Improve the handling of exceptions thrown from contract predicates") > , Rev< 1u, Arr64< Hash(wxS("Author354")) >(), wxS("Improve the handling of exceptions thrown from contract predicates") >  >() },
    { 3419u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Levine")) >(), wxS("Reflection Syntax Options Summary") >  >() },
    { 3420u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Reflection of Templates") > , Rev< 1u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Reflection of Templates") >  >() },
    { 3421u, RevList< Rev< 0u, Arr64< Hash(wxS("Ben Craig")) >(), wxS("Consteval destructors") >  >() },
    { 3422u, RevList< Rev< 0u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow main function in named modules") > , Rev< 1u, Arr64< Hash(wxS("Chuanqi Xu")) >(), wxS("Allow main function in named modules") >  >() },
    { 3423u, RevList< Rev< 0u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("Extending User-Generated Diagnostic Messages") > , Rev< 1u, Arr64< Hash(wxS("Yihe Li")) >(), wxS("Extending User-Generated Diagnostic Messages") >  >() },
    { 3424u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Define Delete With Throwing Exception Specification") >  >() },
    { 3425u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1985")) >(), wxS("Reducing operation-state sizes for subobject child operations") > , Rev< 1u, Arr64< Hash(wxS("Author1494")) >(), wxS("D3425R1: Reducing operation-state sizes for subobject child operations") >  >() },
    { 3427u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Synchronous Reclamation") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Synchronous Reclamation") >  >() },
    { 3428u, RevList< Rev< 0u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Batches") > , Rev< 1u, Arr64< Hash(wxS("Maged M")) >(), wxS("Hazard Pointer Batches") >  >() },
    { 3429u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("<meta> should minimize standard librarydependencies") > , Rev< 1u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("<meta> should minimize standard librarydependencies") >  >() },
    { 3430u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("simd issues: explicit, unsequenced, identity-element position, and members of disabled simd [P3430R3]") >  >() },
    { 3431u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("Deprecate `const`-qualifier on begin/end of views") >  >() },
    { 3433u, RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Allocator Support for Operation States") >  >() },
    { 3435u, RevList< Rev< 0u, Arr64< Hash(wxS("Jean-Baptiste VALLON")) >(), wxS("Reflection and meta-programming") >  >() },
    { 3436u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title837") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1319") >  >() },
    { 3437u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title770") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title246") >  >() },
    { 3438u, RevList< Rev< 0u, Arr64< Hash(wxS("Andreas Fertig")) >(), wxS("Make integral overloads of std::to_string constexpr") >  >() },
    { 3439u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1611") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title109") >  >() },
    { 3440u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Add n_elements named constructor to std::simd") >  >() },
    { 3441u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Rename <code>simd_split</code> to <code>simd_chunk</code>") > , Rev< 1u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Rename <code>simd_split</code> to <code>simd_chunk</code>") > , Rev< 2u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Rename <code>simd_split</code> to <code>simd_chunk</code>") >  >() },
    { 3442u, RevList< Rev< 0u, Arr64< Hash(wxS("Author796")) >(), wxS("Title643") > , Rev< 1u, Arr64< Hash(wxS("Author738")) >(), wxS("Title595") >  >() },
    { 3443u, RevList< Rev< 0u, Arr64< Hash(wxS("Ran Regev")) >(), wxS("P3443R0 - Reflection on SG21s 2024 Process") >  >() },
    { 3444u, RevList< Rev< 0u, Arr64< Hash(wxS("Sean Baxter")) >(), wxS("Memory Safety without Lifetime Parameters") >  >() },
    { 3445u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Towner")) >(), wxS("Add utilities for easier type/bit casting in std::simd") >  >() },
    { 3446u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1497")) >(), wxS("Title1164") >  >() },
    { 3447u, RevList< Rev< 0u, Arr64< Hash(wxS("Author335")) >(), wxS("Title284") >  >() },
    { 3449u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr std::generator") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr generator") >  >() },
    { 3450u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Extend std::is_within_lifetime") >  >() },
    { 3451u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("A Suggestion for Reflection Access Control") >  >() },
    { 3454u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("Revising Atomic Max/Min Operations") >  >() },
    { 3455u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG14 2024/05/22 P3455R0.docx") >  >() },
    { 3456u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1968")) >(), wxS("system_scheduler on Win32, Darwin and Linux") >  >() },
    { 3457u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG19 2024/10/15 P3457R0.docx") >  >() },
    { 3460u, RevList< Rev< 0u, Arr64< Hash(wxS("Author658")) >(), wxS("Implementors Notes") >  >() },
    { 3465u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title874") >  >() },
    { 3466u, RevList< Rev< 0u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title1518") > , Rev< 1u, Arr64< Hash(wxS("Herb Sutter")) >(), wxS("Title751") >  >() },
    { 3467u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("P3467R0R0: 2024-10 Library Evolution Polls") >  >() },
    { 3468u, RevList< Rev< 0u, Arr64< Hash(wxS("Inbal Levi")) >(), wxS("2024-10 Library Evolution Poll Outcomes") >  >() },
    { 3469u, RevList< Rev< 0u, Arr64< Hash(wxS("Mike Spertus")) >(), wxS("Virtual deducing") >  >() },
    { 3470u, RevList< Rev< 0u, Arr64< Hash(wxS("Daniel Ruoso")) >(), wxS("Interface-Unit-Only Module Library Support") >  >() },
    { 3471u, RevList< Rev< 0u, Arr64< Hash(wxS("Konstantin Varlamov")) >(), wxS("Standard library hardening") > , Rev< 1u, Arr64< Hash(wxS("Konstantin Varlamov")) >(), wxS("Standard library hardening") > , Rev< 2u, Arr64< Hash(wxS("Konstantin Varlamov")) >(), wxS("Standard library hardening") > , Rev< 3u, Arr64< Hash(wxS("Konstantin Varlamov")) >(), wxS("Standard library hardening") > , Rev< 4u, Arr64< Hash(wxS("Konstantin Varlamov")) >(), wxS("Standard library hardening") >  >() },
    { 3472u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Make fiber_context::can_resume() const") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Make fiber_context::can_resume() const") >  >() },
    { 3473u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("Splicing Should Respect Access Control") >  >() },
    { 3474u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Rifkin")) >(), wxS("std::arguments") >  >() },
    { 3475u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2038")) >(), wxS("Defang and deprecate memory_order::consume") > , Rev< 1u, Arr64< Hash(wxS("Author1081")) >(), wxS("Defang and deprecate memory_order::consume") > , Rev< 2u, Arr64< Hash(wxS("Author1000")) >(), wxS("Defang and deprecate memory_order::consume") >  >() },
    { 3476u, RevList< Rev< 0u, Arr64< Hash(wxS("Author163")) >(), wxS("p2688r2") >  >() },
    { 3477u, RevList< Rev< 0u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") > , Rev< 1u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") > , Rev< 2u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") > , Rev< 3u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") > , Rev< 4u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") > , Rev< 5u, Arr64< Hash(wxS("JF Bastien")) >(), wxS("There are exactly 8 bits in a byte") >  >() },
    { 3478u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1860")) >(), wxS("p3478r0") >  >() },
    { 3479u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Cranmer")) >(), wxS("Enabling C pragma support in C++") >  >() },
    { 3480u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd is a range [P3480R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd is a range [P3480R1]") > , Rev< 2u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd is a range [P3480R2]") > , Rev< 3u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd is a range [P3480R3]") > , Rev< 4u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("std::simd is a range [P3480R4]") >  >() },
    { 3481u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1907")) >(), wxS("Title1471") > , Rev< 1u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("std::execution::bulk() issues") > , Rev< 2u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("std::execution::bulk() issues") > , Rev< 3u, Arr64< Hash(wxS("Lucian Radu")) >(), wxS("std::execution::bulk() issues") >  >() },
    { 3482u, RevList< Rev< 0u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("Design for C++ networking based on IETF TAPS") > , Rev< 1u, Arr64< Hash(wxS("Thomas Rodgers")) >(), wxS("Design for C++ networking based on IETF TAPS") >  >() },
    { 3483u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1213")) >(), wxS("Title951") > , Rev< 1u, Arr64< Hash(wxS("Author2231")) >(), wxS("Title1707") >  >() },
    { 3484u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1384")) >(), wxS("Title1076") > , Rev< 1u, Arr64< Hash(wxS("Author865")) >(), wxS("Title691") > , Rev< 2u, Arr64< Hash(wxS("Author870")) >(), wxS("Title695") >  >() },
    { 3485u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Grouping using declarations with braces") >  >() },
    { 3487u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1786")) >(), wxS("Title1386") >  >() },
    { 3488u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Floating-Point Excess Precision [P3488R0]") > , Rev< 1u, Arr64< Hash(wxS("Matthias Kretz")) >(), wxS("Floating-Point Excess Precision [P3488R1]") >  >() },
    { 3489u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1895")) >(), wxS("Title1465") >  >() },
    { 3490u, RevList< Rev< 0u, Arr64< Hash(wxS("Alexey Kukanov")) >(), wxS("Justification for ranges as the output of parallel rangealgorithms") >  >() },
    { 3491u, RevList< Rev< 0u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("define_static_{string,object,array}") > , Rev< 1u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("define_static_{string,object,array}") > , Rev< 2u, Arr64< Hash(wxS("Wyatt Childers")) >(), wxS("define_static_{string,object,array}") >  >() },
    { 3492u, RevList< Rev< 0u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Sized deallocation for placement new") > , Rev< 1u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Sized deallocation for placement new") > , Rev< 2u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Sized deallocation for placement new") >  >() },
    { 3493u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1414")) >(), wxS("Ruminations on reflection and access") >  >() },
    { 3495u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1147")) >(), wxS("Title912") >  >() },
    { 3496u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Immediate-Escalating Expressions") >  >() },
    { 3497u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Wilmans")) >(), wxS("Title1394") >  >() },
    { 3498u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title335") >  >() },
    { 3499u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1573")) >(), wxS("Title1220") > , Rev< 1u, Arr64< Hash(wxS("Author338")) >(), wxS("Title285") >  >() },
    { 3500u, RevList< Rev< 0u, Arr64< Hash(wxS("Author105")) >(), wxS("P3500 v2") > , Rev< 1u, Arr64< Hash(wxS("Author241")) >(), wxS("P3500 Are Contracts \"safe\"?") >  >() },
    { 3501u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2031")) >(), wxS("The ad-dressing of cats") >  >() },
    { 3502u, RevList< Rev< 0u, Arr64< Hash(wxS("Author488")) >(), wxS("p3502r0") >  >() },
    { 3503u, RevList< Rev< 0u, Arr64< Hash(wxS("Nicolas Morales")) >(), wxS("Make type-erased allocator use in promise and packaged_taskconsistent") > , Rev< 1u, Arr64< Hash(wxS("Nicolas Morales")) >(), wxS("Make type-erased allocator use in `promise` and `packaged_task`consistent") > , Rev< 2u, Arr64< Hash(wxS("Nicolas Morales")) >(), wxS("Make type-erased allocator use in `promise` and `packaged_task`consistent") >  >() },
    { 3504u, RevList< Rev< 0u, Arr64< Hash(wxS("Author172")) >(), wxS("C++ Standard Library Issues to be moved in Wrocaw, Nov. 2024") >  >() },
    { 3505u, RevList< Rev< 0u, Arr64< Hash(wxS("Victor Zverovich")) >(), wxS("Fix the default floating-point representation in std::format") >  >() },
    { 3506u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title583") >  >() },
    { 3508u, RevList< Rev< 0u, Arr64< Hash(wxS("Giuseppe D'Angelo")) >(), wxS("Wording for \"constexpr for specialized memory algorithms\"") >  >() },
    { 3510u, RevList< Rev< 0u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Leftover properties of `this` in constructorpreconditions") > , Rev< 1u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Leftover properties of `this` in constructorpreconditions") > , Rev< 2u, Arr64< Hash(wxS("Nathan Myers")) >(), wxS("Leftover properties of `this` in constructorpreconditions") >  >() },
    { 3514u, RevList< Rev< 0u, Arr64< Hash(wxS("Steve Downey")) >(), wxS("\"RFC 3514: The Security Flag\" for C++") >  >() },
    { 3516u, RevList< Rev< 0u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Uninitialized algorithms for relocation") > , Rev< 1u, Arr64< Hash(wxS("Louis Dionne")) >(), wxS("Uninitialized algorithms for relocation") >  >() },
    { 3517u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1368")) >(), wxS("P3517R0") >  >() },
    { 3518u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1479")) >(), wxS("constexpr type ordering (P2830R4)") >  >() },
    { 3519u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1343")) >(), wxS("P3425 Reducing operation-state sizes for sub-object child operations") >  >() },
    { 3520u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1353")) >(), wxS("Title1047") >  >() },
    { 3521u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Pattern Matching: Customization Point for Open SumTypes") >  >() },
    { 3524u, RevList< Rev< 0u, Arr64< Hash(wxS("Author774")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 3525u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Explicit Implicit Template Regions") >  >() },
    { 3526u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1096")) >(), wxS("Container truncation") >  >() },
    { 3527u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Pattern Matching: *variant-like* and `std::expected`") > , Rev< 1u, Arr64< Hash(wxS("Michael Park")) >(), wxS("Pattern Matching: *variant-like* and `std::expected`") >  >() },
    { 3530u, RevList< Rev< 0u, Arr64< Hash(wxS("Boleyn Su")) >(), wxS("Intrinsic for reading uninitialized memory") >  >() },
    { 3533u, RevList< Rev< 0u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr virtual inheritance") > , Rev< 1u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr virtual inheritance") > , Rev< 2u, Arr64< Hash(wxS("Hana Dusikova")) >(), wxS("constexpr virtual inheritance") >  >() },
    { 3534u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Avoid UB When Compiling Code That Violates Library Specification") >  >() },
    { 3537u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2191")) >(), wxS("Concurrent Queues API - P0260R13") > , Rev< 1u, Arr64< Hash(wxS("Author1237")) >(), wxS("Concurrent Queues API - P0260R15 / P3537R1") >  >() },
    { 3539u, RevList< Rev< 1u, Arr64< Hash(wxS("PaweB Benetkiewicz")) >(), wxS("Consistent Function Label Naming for Sections") >  >() },
    { 3540u, RevList< Rev< 0u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed offset parameter") > , Rev< 1u, Arr64< Hash(wxS("JeanHeyd Meneide")) >(), wxS("#embed offset parameter") >  >() },
    { 3541u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Violation handlers vs `noexcept`") > , Rev< 1u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Violation handlers vs `noexcept`") >  >() },
    { 3542u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1356")) >(), wxS("Abolish the term \"converting constructor\"") >  >() },
    { 3543u, RevList< Rev< 0u, Arr64< Hash(wxS("Mungo Gill")) >(), wxS("Response to Core Safety Profiles (P3081)") >  >() },
    { 3544u, RevList< Rev< 0u, Arr64< Hash(wxS("Author436")) >(), wxS("<code>ranges::to<view></code>") >  >() },
    { 3546u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1306")) >(), wxS("Title1010") >  >() },
    { 3547u, RevList< Rev< 0u, Arr64< Hash(wxS("Dan Katz")) >(), wxS("Modeling Access Control With Reflection") > , Rev< 1u, Arr64< Hash(wxS("Dan Katz")) >(), wxS("Modeling Access Control With Reflection") >  >() },
    { 3548u, RevList< Rev< 0u, Arr64< Hash(wxS("Niall Douglas")) >(), wxS("Title876") >  >() },
    { 3549u, RevList< Rev< 0u, Arr64< Hash(wxS("Bruno Cardoso")) >(), wxS("Diverging Expressions") >  >() },
    { 3550u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Imports cannot &") >  >() },
    { 3552u, RevList< Rev< 0u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Add a Coroutine Lazy Type") > , Rev< 1u, Arr64< Hash(wxS("Dietmar Khl")) >(), wxS("Add a Coroutine Task Type") >  >() },
    { 3554u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Non-transient allocation with std::vector andstd::basic_string") >  >() },
    { 3555u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonathan M\u00FCller")) >(), wxS("An infinite range concept") >  >() },
    { 3556u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("Input Files Are Source Files") >  >() },
    { 3557u, RevList< Rev< 0u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("High-Quality Sender Diagnostics with ConstexprExceptions") > , Rev< 1u, Arr64< Hash(wxS("Eric Niebler")) >(), wxS("High-Quality Sender Diagnostics with ConstexprExceptions") >  >() },
    { 3558u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1213") > , Rev< 1u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title217") >  >() },
    { 3559u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("is_trivially_relocatable: One trait or two?") >  >() },
    { 3560u, RevList< Rev< 0u, Arr64< Hash(wxS("Peter Dimov")) >(), wxS("Error Handling in Reflection") >  >() },
    { 3561u, RevList< Rev< 0u, Arr64< Hash(wxS("Author622")) >(), wxS("coproducts.dvi") > , Rev< 1u, Arr64< Hash(wxS("Author2200")) >(), wxS("coproducts.dvi") > , Rev< 2u, Arr64< Hash(wxS("Author1198")) >(), wxS("coproducts.dvi") >  >() },
    { 3564u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Make the concurrent forward progress guarantee usable in bulk") >  >() },
    { 3565u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2177")) >(), wxS("Virtual floating-point values") >  >() },
    { 3566u, RevList< Rev< 0u, Arr64< Hash(wxS("Author256")) >(), wxS("P3566R0 - You shall not pass `char*` - Google Docs") >  >() },
    { 3567u, RevList< Rev< 0u, Arr64< Hash(wxS("Hui Xie")) >(), wxS("flat_meow Fixes") >  >() },
    { 3568u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("break label; and continue label;") > , Rev< 1u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("break label; and continue label;") >  >() },
    { 3569u, RevList< Rev< 0u, Arr64< Hash(wxS("Shafik Yaghmour")) >(), wxS("SplitOutDefineAggregate") >  >() },
    { 3570u, RevList< Rev< 0u, Arr64< Hash(wxS("Fabio Fracassi")) >(), wxS("optional variants in sender/receiver") >  >() },
    { 3572u, RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Title1521") >  >() },
    { 3573u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Hava")) >(), wxS("Title894") >  >() },
    { 3574u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1724")) >(), wxS("Title1329") >  >() },
    { 3575u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG14 2025/01/13 P3575R0.docx") >  >() },
    { 3576u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Wong")) >(), wxS("SG19 2025/1/13 P3576R0.docx") >  >() },
    { 3577u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1133")) >(), wxS("Title902") >  >() },
    { 3578u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1525")) >(), wxS("The \"Grandma Safety\" Paper") >  >() },
    { 3579u, RevList< Rev< 0u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Fix matching of non-type template parameters when matchingtemplate template parameters") > , Rev< 1u, Arr64< Hash(wxS("Matheus Izvekov")) >(), wxS("Fix matching of non-type template parameters when matchingtemplate template parameters") >  >() },
    { 3580u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1857")) >(), wxS("The Naming of Things") >  >() },
    { 3581u, RevList< Rev< 0u, Arr64< Hash(wxS("1")) >(), wxS("Title1025") >  >() },
    { 3582u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Observed a contract violation? Skip subsequent assertions!") >  >() },
    { 3583u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("Contracts, Types & Functions") >  >() },
    { 3584u, RevList< Rev< 0u, Arr64< Hash(wxS("Mingxin Wang")) >(), wxS("Title375") >  >() },
    { 3585u, RevList< Rev< 0u, Arr64< Hash(wxS("Pablo Halpern")) >(), wxS("`allocator_traits::is_internally_relocatable`") >  >() },
    { 3586u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("The Plethora of Problems With Profiles") >  >() },
    { 3587u, RevList< Rev< 0u, Arr64< Hash(wxS("Lauri Vasama")) >(), wxS("Reconsider reflection access for C++26") >  >() },
    { 3588u, RevList< Rev< 0u, Arr64< Hash(wxS("Brian Bi")) >(), wxS("Allow static data members in local and unnamed classes") >  >() },
    { 3589u, RevList< Rev< 0u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title1579") > , Rev< 1u, Arr64< Hash(wxS("gdr@microsoft.com Audience")) >(), wxS("Title181") >  >() },
    { 3590u, RevList< Rev< 0u, Arr64< Hash(wxS("Daveed Vandevoorde")) >(), wxS("Constexpr Coroutine Burdens") >  >() },
    { 3591u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title339") >  >() },
    { 3592u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title1452") >  >() },
    { 3599u, RevList< Rev< 0u, Arr64< Hash(wxS("Joshua Berne")) >(), wxS("Title900") >  >() },
    { 3603u, RevList< Rev< 0u, Arr64< Hash(wxS("Barry Revzin")) >(), wxS("Consteval-only Values and Consteval Variables") >  >() },
    { 3605u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1131")) >(), wxS("Title901") >  >() },
    { 3606u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("On Overload Resolution, Exact Matches, and CleverImplementations") >  >() },
    { 3608u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1980")) >(), wxS("Contracts and profiles: what can we reasonably ship in C++26") >  >() },
    { 3611u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2180")) >(), wxS("Title1675") >  >() },
    { 3613u, RevList< Rev< 0u, Arr64< Hash(wxS("Tim Song")) >(), wxS("On the beating of horses, and other matters") >  >() },
    { 3614u, RevList< Rev< 0u, Arr64< Hash(wxS("Author231")) >(), wxS("Do not remove nor postpone access_context::unchecked") >  >() },
    { 3615u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1722")) >(), wxS("C++ Standard Library Issues to be moved in Hagenberg, Feb. 2025") >  >() },
    { 3616u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1759")) >(), wxS("Remove contracts on virtual functions for now") >  >() },
    { 3618u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Spencer")) >(), wxS("Allow attaching main to the global module") >  >() },
    { 3619u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2030")) >(), wxS("Counter-examples for P2688R5") > , Rev< 1u, Arr64< Hash(wxS("Author246")) >(), wxS("Counter-examples for P2688R5") >  >() },
    { 3620u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1953")) >(), wxS("Title1516") >  >() },
    { 3623u, RevList< Rev< 0u, Arr64< Hash(wxS("Arthur O'Dwyer")) >(), wxS("Add noexcept to [iterator.range] (LWG 3537)") >  >() },
    { 3625u, RevList< Rev< 0u, Arr64< Hash(wxS("Michael Florian")) >(), wxS("D3625 - either neither") >  >() },
    { 3626u, RevList< Rev< 0u, Arr64< Hash(wxS("Author388")) >(), wxS("Title331") >  >() },
    { 3627u, RevList< Rev< 0u, Arr64< Hash(wxS("Author125")) >(), wxS("RCE-defense security profiles for existing C++ code") >  >() },
    { 3628u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("break label; and continue label;, tl; dr") >  >() },
    { 3630u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("PowerPoint-Prsentation") >  >() },
    { 3632u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1136")) >(), wxS("Title904") > , Rev< 1u, Arr64< Hash(wxS("Author2218")) >(), wxS("Title1698") >  >() },
    { 3633u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1107")) >(), wxS("A Byte is a Byte") >  >() },
    { 3635u, RevList< Rev< 0u, Arr64< Hash(wxS("Nevin ")) >(), wxS("Title1469") >  >() },
    { 3636u, RevList< Rev< 0u, Arr64< Hash(wxS("Author268")) >(), wxS("P3636 No, inplace_vector shouldn't have an Allocator") >  >() },
    { 3637u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2114")) >(), wxS("Inherit std::meta::exception from std::exception - Google Docs") >  >() },
    { 3638u, RevList< Rev< 0u, Arr64< Hash(wxS("Author541")) >(), wxS("Core \"ready\" Issues") >  >() },
    { 3639u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("The _BitInt Debate") >  >() },
    { 3640u, RevList< Rev< 0u, Arr64< Hash(wxS("Jonas Persson")) >(), wxS("Make contracts reliable by default") >  >() },
    { 3641u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Rename std::observable to std::observable_checkpoint, and add a feature-test macro") >  >() },
    { 3642u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("Carry-less product: std::clmul") >  >() },
    { 3643u, RevList< Rev< 0u, Arr64< Hash(wxS("Jan Schultke")) >(), wxS("std::to_signed and std::to_unsigned") >  >() },
    { 3650u, RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Title1307") >  >() },
    { 3651u, RevList< Rev< 0u, Arr64< Hash(wxS("Bjarne Stroustrup")) >(), wxS("Title697") >  >() },
    { 3652u, RevList< Rev< 0u, Arr64< Hash(wxS("L\u00E9n\u00E1rd Szolnoki")) >(), wxS("Constexpr floating-point <charconv> functions") > , Rev< 1u, Arr64< Hash(wxS("L\u00E9n\u00E1rd Szolnoki")) >(), wxS("Constexpr floating-point <charconv> functions") >  >() },
    { 3654u, RevList< Rev< 0u, Arr64< Hash(wxS("Author2111")) >(), wxS("Title1630") >  >() },
    { 3655u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1418")) >(), wxS("std::zstring_view") >  >() },
    { 3656u, RevList< Rev< 0u, Arr64< Hash(wxS("Author1078")) >(), wxS("Title868") > , Rev< 1u, Arr64< Hash(wxS("Author1054")) >(), wxS("Title845") >  >() },
    { 3657u, RevList< Rev< 0u, Arr64< Hash(wxS("Alisdair Meredith")) >(), wxS("A Grammar for Whitespace Characters") >  >() },
    { 3658u, RevList< Rev< 0u, Arr64< Hash(wxS("Author376")) >(), wxS("Title318") >  >() },
    { 3660u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Rifkin")) >(), wxS("Improve reference_wrapper Ergonomics") >  >() },
    { 3661u, RevList< Rev< 0u, Arr64< Hash(wxS("\u00A0\u00A0")) >(), wxS("Attributes, annotations, labels") >  >() },
    { 3662u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Rifkin")) >(), wxS("Improve Increment and Decrement Operator Syntax") >  >() },
    { 3663u, RevList< Rev< 0u, Arr64< Hash(wxS("Mark Hoemmen")) >(), wxS("Future-proof submdspan_mapping?") >  >() },
    { 3664u, RevList< Rev< 0u, Arr64< Hash(wxS("Zach Laine")) >(), wxS("Make `variant_size` SFINAE friendly") >  >() },
    { 3665u, RevList< Rev< 0u, Arr64< Hash(wxS("Jeremy Rifkin")) >(), wxS("Vertical Text Processing") >  >() },
    { 3667u, RevList< Rev< 0u, Arr64< Hash(wxS("Author317")) >(), wxS("Title267") >  >() },
    { 3668u, RevList< Rev< 0u, Arr64< Hash(wxS("Matthew Taylor")) >(), wxS("Defaulting Postfix Increment and Decrement Operations") >  >() },
    { 3669u, RevList< Rev< 0u, Arr64< Hash(wxS("Detlef Vollmann")) >(), wxS("Non-Blocking Support for `std::execution`") >  >() },
    { 3670u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1489") >  >() },
    { 3671u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1358") >  >() },
    { 3672u, RevList< Rev< 0u, Arr64< Hash(wxS("Corentin Jabot")) >(), wxS("Title1509") >  >() },
    { 4000u, RevList< Rev< 0u, Arr64< Hash(wxS("Author623")) >(), wxS("TS or not TS") >  >() },
}
