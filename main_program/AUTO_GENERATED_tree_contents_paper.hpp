{
    { "n1208", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Issues List Revision ") > >() },
    { "n1212", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean A. Corfield") >(), wxS("J Record of Discussion") > >() },
    { "n1213", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean A. Corfield") >(), wxS("WG Formal Minutes") > >() },
    { "n1214", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean A. Corfield") >(), wxS("J Formal Minutes") > >() },
    { "n1215", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Exit Processing Order") > >() },
    { "n1216", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Allocating Zero Bytes or Objects") > >() },
    { "n1217", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core WG Defect Resolutions") > >() },
    { "n1218", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas R. Wilcox") >(), wxS("Clarifying the Definition of Accessible Base Class Rev ") > >() },
    { "n1219", 0u, RevList< Rev< 0u, ArrHash< Hash("Judy Ward"), Hash("Matthew Austern") >(), wxS("Proposed Resolution to Library Issue ") > >() },
    { "n1220", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Motion for Kona") > >() },
    { "n1221", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of US TAG Meeting") > >() },
    { "n1222", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1223", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1224", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1225", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda SCWG C Tokyo Japan") > >() },
    { "n1226", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1227", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1228", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1229", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Friend Declaration Issues") > >() },
    { "n1230", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No ") > >() },
    { "n1231", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Miscellaneous Template Issues for Tokyo Meeting") > >() },
    { "n1232", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("The core language autoptr problem") > >() },
    { "n1233", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Kristoffersensors") >(), wxS("Technical Report on Basic IO Hardware Addressing") > >() },
    { "n1234", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Proposed Resolution for Core Issue ") > >() },
    { "n1235", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("October  Meeting of WGJ Travel Information") > >() },
    { "n1236", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1237", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1238", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1239", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1240", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1241", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1242", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1243", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1244", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1245", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Binder Problem and Reference Proposal Revised") > >() },
    { "n1246", 0u, RevList< Rev< 0u, ArrHash< Hash("AFNOR") >(), wxS("Fixing valarray for RealWorld Use") > >() },
    { "n1247", 0u, RevList< Rev< 0u, ArrHash< Hash("Seiji Hayashida") >(), wxS("Programmerdirected Optimizations") > >() },
    { "n1248", 0u, RevList< Rev< 0u, ArrHash< Hash("Performance WG") >(), wxS("Draft Technical Report on Performance Issues") > >() },
    { "n1249", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Drafting from Tokyo Meeting  Revision ") > >() },
    { "n1250", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Motions for Tokyo") > >() },
    { "n1251", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Definition of Dependent Name") > >() },
    { "n1252", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Griffiths") >(), wxS("Shades of Namespace std Functions") > >() },
    { "n1253", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Minutes SCWG C Tokyo Japan") > >() },
    { "n1254", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin J. O'Riordan") >(), wxS("Member Access Control  Proposed Revisions") > >() },
    { "n1255", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes J  WG Meeting Tokyo") > >() },
    { "n1256", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda SCWG C Toronto Canada") > >() },
    { "n1257", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Business Plan and Conveners Report ISOIEC JTCISCWGC") > >() },
    { "n1258", 0u, RevList< Rev< 0u, ArrHash< Hash("Seiji Hayashida") >(), wxS("ROMability Performance Group") > >() },
    { "n1259", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1260", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1261", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1262", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No ") > >() },
    { "n1263", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Default Arguments and Friend Declarations") > >() },
    { "n1265", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1266", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1267", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1268", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Griffiths"), Hash("Mark Radford") >(), wxS("Member Access Control and Nested Classes") > >() },
    { "n1269", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1270", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1271", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1272", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1273", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1274", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1275", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1276", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting October  ") > >() },
    { "n1278", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan E. Caves") >(), wxS("October  WGWG Meeting") > >() },
    { "n1279", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Definition of Dependent Name  Revision ") > >() },
    { "n1280", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Formal Motions") > >() },
    { "n1281", 0u, RevList< Rev< 0u, ArrHash< Hash("Performance WG") >(), wxS("Performance TR  Working Paper") > >() },
    { "n1282", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Request for Library TR") > >() },
    { "n1283", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("A New Work Item Proposal Technical Report for Library Issues") > >() },
    { "n1285", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of US TAG Meeting October  ") > >() },
    { "n1286", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("The point of destruction of a call argument temporary") > >() },
    { "n1287", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda SCWG C Copenhagen Denmark") > >() },
    { "n1288", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No WG Meeting No  April May  ") > >() },
    { "n1289", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Library issues  and ") > >() },
    { "n1290", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Kristoffersensors") >(), wxS("Extensions for the programming language C to support embedded proces") > >() },
    { "n1291", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1292", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1293", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1294", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan E. Caves") >(), wxS("October  WGWG Meeting") > >() },
    { "n1295", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Partial Specialization of Function Templates") > >() },
    { "n1296", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Usersupplied Specializations of Standard Library Algorithms") > >() },
    { "n1297", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Siek") >(), wxS("Improved Iterator Categories and Requirements") > >() },
    { "n1298", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Active Issues Revision ") > >() },
    { "n1299", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Defect Reports Revision ") > >() },
    { "n1300", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Closed Issues Revision ") > >() },
    { "n1301", 0u, RevList< Rev< 0u, ArrHash< Hash("Keld Jorn Simonsen") >(), wxS("DTR  Specification Method for Cultural Conventions") > >() },
    { "n1302", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core WG Defect Resolutions") > >() },
    { "n1303", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1304", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Robert Klarer") >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting April May ") > >() },
    { "n1305", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda SCWG C Redmond Washington USA") > >() },
    { "n1306", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Active Issues Revision ") > >() },
    { "n1307", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Defect Reports Revision ") > >() },
    { "n1308", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Core Language Closed Issues Revision ") > >() },
    { "n1309", 0u, RevList< Rev< 0u, ArrHash< Hash("Performance WG") >(), wxS("Technical Report on C Performance DRAFT") > >() },
    { "n1310", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1311", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1312", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1313", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams") >(), wxS("Binary Search with Heterogeneous Comparison") > >() },
    { "n1314", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Notes on standard library extensions") > >() },
    { "n1315", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Business Plan and Convenors Report") > >() },
    { "n1316", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Koenig") >(), wxS("Draft Expanded Technical Corrigendum") > >() },
    { "n1317", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1318", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1319", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1320", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No WG Meeting No  October  ") > >() },
    { "n1321", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Core Language Active Issues Revision ") > >() },
    { "n1322", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Core Language Defect Reports Revision ") > >() },
    { "n1323", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Core Language Closed Issues Revision ") > >() },
    { "n1324", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Issue  POD classes and operator") > >() },
    { "n1325", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Proposals List Trial Balloon") > >() },
    { "n1326", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("A Proposal to Add Hashtables to the Standard Library") > >() },
    { "n1327", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1328", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting  October ") > >() },
    { "n1329", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of J TAG Meeting  October ") > >() },
    { "n1330", 0u, RevList< Rev< 0u, ArrHash< Hash("Michiel Salters") >(), wxS("Spring  Meeting") > >() },
    { "n1331", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("ISO WG Meeting October   Record of Discussion") > >() },
    { "n1332", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("ANSI J and ISO WG Colocated Meeting  October  Record of Discussion") > >() },
    { "n1333", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("J TAG Meeting  October  Record of Discussion") > >() },
    { "n1334", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Koenig") >(), wxS("Draft Consolidated Technical Corrigendum") > >() },
    { "n1335", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda SCWG C Curacao") > >() },
    { "n1336", 0u, RevList< Rev< 0u, ArrHash< Hash("Performance WG") >(), wxS("Technical Report on C Performance DRAFT") > >() },
    { "n1337", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1338", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1339", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1340", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("WG and J C Joint Mailing and Meeting Information") > >() },
    { "n1341", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1342", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1343", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1344", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Namespaces and Library Versioning") > >() },
    { "n1345", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("Type Traits Proposal") > >() },
    { "n1346", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No  April  ") > >() },
    { "n1347", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1348", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1349", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1350", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1351", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1352", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1353", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Local Classes and Linkage") > >() },
    { "n1354", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed C Library Additions to C") > >() },
    { "n1355", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin J. O'Riordan") >(), wxS("Technical Report on C Performance DRAFT") > >() },
    { "n1356", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Ralf W. Grosse-Kunstleve") >(), wxS("Predictable data layout for certain nonPOD types") > >() },
    { "n1357", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1358", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting  April ") > >() },
    { "n1359", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin J. O'Riordan") >(), wxS("Technical Report on C Performance DRAFT") > >() },
    { "n1360", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("constcorrectness and other safety issues in clause  inputoutput library") > >() },
    { "n1361", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Proposals and Issues List Revision ") > >() },
    { "n1362", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Agenda for October  Meeting of WG") > >() },
    { "n1363", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("C Support for Delegation") > >() },
    { "n1364", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Evolution WG Proposal Skeleton") > >() },
    { "n1365", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("October  meeting information in Santa Cruz CA") > >() },
    { "n1366", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1367", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1368", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1369", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1370", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1371", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1372", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed C Library Additions to C Revised") > >() },
    { "n1374", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("WG Business Plan and Conveners Report") > >() },
    { "n1375", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A Proposal to add a Polymorphic Function Object Wrapper to the Standard Library") > >() },
    { "n1376", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Consolidated edits for core issues   et al") > >() },
    { "n1377", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Howard E. Hinnant"), Hash("Peter Dimov") >(), wxS("A Proposal to Add Move Semantics Support to the C Language") > >() },
    { "n1378", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1379", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1380", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1381", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock"), Hash("Robert Klarer") >(), wxS("Proposal to Add Static Assertions to the Core Language") > >() },
    { "n1382", 0u, RevList< Rev< 0u, ArrHash< Hash("Jaakko J\\u00E4rvi") >(), wxS("Proposal for adding tuple type into the standard library") > >() },
    { "n1383", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No  October  ") > >() },
    { "n1384", 0u, RevList< Rev< 0u, ArrHash< Hash("John Wiegley") >(), wxS("PME Properties methods and events") > >() },
    { "n1385", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("The Forwarding Problem Arguments") > >() },
    { "n1386", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("A Proposal to add Regular Expressions to the Standard Library") > >() },
    { "n1387", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Proposed Resolution to LWG Issues   ") > >() },
    { "n1388", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Enhancing numerical support") > >() },
    { "n1390", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1391", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1392", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1393", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer"), Hash("John Wiegley") >(), wxS("Revisions to Partial Ordering Rules") > >() },
    { "n1394", 0u, RevList< Rev< 0u, ArrHash< Hash("David Miller") >(), wxS("Some proposed extensions to C language") > >() },
    { "n1395", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Aspects of Forwarding was C Support For Delegation") > >() },
    { "n1396", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin J. O'Riordan") >(), wxS("Technical Report on C Performance") > >() },
    { "n1397", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Proposals and Issues List Revision ") > >() },
    { "n1398", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("A Proposal to Add an Extensible Random Number Facility to the Standard Library") > >() },
    { "n1399", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("A proposal to add Hash Tables to the Standard Library revision ") > >() },
    { "n1400", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Toward standardization of dynamic libraries") > >() },
    { "n1401", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Kristoffersensors") >(), wxS("Atomic operations with multithreaded environments") > >() },
    { "n1402", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A Proposal to add a Polymorphic Function Object Wrapper to the Standard Library") > >() },
    { "n1403", 0u, RevList< Rev< 0u, ArrHash< Hash("Jaakko J\\u00E4rvi") >(), wxS("Proposal for adding tuple types into the standard library") > >() },
    { "n1404", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Evolution Working Group Record of Discussion") > >() },
    { "n1405", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Minutes of ANSI J and ISO WG Colocated Meeting  October ") > >() },
    { "n1406", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Proposed Addition to C Typedef Templates") > >() },
    { "n1408", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams") >(), wxS("Qualified Namespaces") > >() },
    { "n1409", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG meeting October  ") > >() },
    { "n1411", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1412", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1413", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1414", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1415", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1416", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1417", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Oxford meeting information") > >() },
    { "n1418", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Dynamic Libraries in C") > >() },
    { "n1419", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG Agenda") > >() },
    { "n1420", 0u, RevList< Rev< 0u, ArrHash< Hash("Carl Daniel") >(), wxS("Proposed Addition to C Class Namespaces") > >() },
    { "n1421", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No  April  ") > >() },
    { "n1422", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Add Mathematical Special Functions to the C Standard Library") > >() },
    { "n1423", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS(" FiveYear Maintenance Review") > >() },
    { "n1424", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("A Proposal to add Type Traits to the Standard Library") > >() },
    { "n1425", 0u, RevList< Rev< 0u, ArrHash< Hash("Martyn Lovell") >(), wxS("Proposal for Technical Report on C Standard Library Security") > >() },
    { "n1426", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Thomas Plum") >(), wxS("Why We Cant Afford Export") > >() },
    { "n1427", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Making Local Templates more Useful") > >() },
    { "n1428", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for Dynamic Library Support in C") > >() },
    { "n1429", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("A Proposal to add Regular Expression to the Standard Library") > >() },
    { "n1430", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Technical Report on C Performance") > >() },
    { "n1431", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("G. Colvin"), Hash("Peter Dimov") >(), wxS("A Proposal to Add General Purpose Smart Pointers to the Library Technical Report") > >() },
    { "n1432", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("A Proposal to Add an Enhanced Member Pointer Adaptor to the Library Technical Report") > >() },
    { "n1433", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1434", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1435", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1436", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A proposal to add a reference wrapper to the standard library") > >() },
    { "n1437", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A uniform method for computing function object return types") > >() },
    { "n1438", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi"), Hash("Peter Dimov") >(), wxS("A Proposal to Add an Enhanced Binder to the Library Technical Report") > >() },
    { "n1439", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Proposed Resolution to LWG issues   ") > >() },
    { "n1440", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1441", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1442", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1443", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("A Proposal to Add Hash Tables to the Standard Library revision ") > >() },
    { "n1444", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Proposals and Issues List Revision ") > >() },
    { "n1445", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Class defaults") > >() },
    { "n1448", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("M. Marcus") >(), wxS("Controling Implicit Template Instantiation") > >() },
    { "n1449", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("M. Marcus") >(), wxS("Proposal to add template aliases to C") > >() },
    { "n1450", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("G. Colvin"), Hash("Peter Dimov") >(), wxS("A Proposal to Add General Purpose Smart Pointers to the Library Technical Report") > >() },
    { "n1451", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Case for Template Aliasing") > >() },
    { "n1452", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("A Proposal to Add an Extensible Random Number Facility to the Standard Library Revision ") > >() },
    { "n1453", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Peter Dimov") >(), wxS("A proposal to add a reference wrapper to the standard library revision ") > >() },
    { "n1454", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A uniform method for computing function object return types revision ") > >() },
    { "n1455", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi"), Hash("Peter Dimov") >(), wxS("A Proposal to Add an Enhanced Binder to the Library Technical Report revision ") > >() },
    { "n1456", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("A Proposal to Add Hash Tables to the Standard Library revision ") > >() },
    { "n1457", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Technical Report on C Performance") > >() },
    { "n1458", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1459", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n1460", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG agenda") > >() },
    { "n1461", 0u, RevList< Rev< 0u, ArrHash< Hash("Martyn Lovell") >(), wxS("Security and Standard C Libraries") > >() },
    { "n1462", 0u, RevList< Rev< 0u, ArrHash< Hash("Brandon Bray") >(), wxS("Safe Exceptions and Compiler Security Checks") > >() },
    { "n1463", 0u, RevList< Rev< 0u, ArrHash< Hash("Julian Smith") >(), wxS("Draft proposal for adding Multimethods to C") > >() },
    { "n1464", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Anonymous array members") > >() },
    { "n1465", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Constant inheritance") > >() },
    { "n1466", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Expliciting default parameters") > >() },
    { "n1467", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Non default constructors for arrays") > >() },
    { "n1468", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Self methods") > >() },
    { "n1469", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Inline Constants") > >() },
    { "n1470", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Enum Type checking for SWITCH statements") > >() },
    { "n1471", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Reflective Metaprogramming in C") > >() },
    { "n1472", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1473", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1474", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1475", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Proposals and Issues List Revision ") > >() },
    { "n1476", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("Iterator Facade and Adaptor") > >() },
    { "n1477", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("New Iterator Concepts") > >() },
    { "n1478", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("Jaakko J\\u00e4rvi"), Hash("Jeremy Siek") >(), wxS("Decltype and auto") > >() },
    { "n1479", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Proposal to Add a Fixed Size Array Wrapper to the Standard Library Technical Report") > >() },
    { "n1480", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1481", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1482", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1483", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Typesafe Variablelength Function and Template Argument Lists") > >() },
    { "n1486", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n1487", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Technical Report on C Performance") > >() },
    { "n1488", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("A name for the null pointer nullptr") > >() },
    { "n1489", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Template aliases for C") > >() },
    { "n1490", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Proposed resolution of core issue ") > >() },
    { "n1491", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No  October   Kona Hawaii") > >() },
    { "n1492", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Exclusive Inheritance") > >() },
    { "n1493", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Braces Initialization Overloading") > >() },
    { "n1494", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Pure implementation method declaration") > >() },
    { "n1496", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Draft Proposal for Dynamic Libraries in C Revision ") > >() },
    { "n1499", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Simplifying Interfaces in basicregex") > >() },
    { "n1500", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Regular Expressions Internationalization and Customization") > >() },
    { "n1501", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Information for MarchApril  WGWG Meetings in Sydney NSW Australia") > >() },
    { "n1502", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed Signature Changes for Special Math Functions in TR") > >() },
    { "n1503", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed Additions to TR to Improve Compatibility with C") > >() },
    { "n1504", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1505", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1506", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1507", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("Errata to the Regular Expression Proposal") > >() },
    { "n1508", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("Proposal to add Deletion Traits to the Standard Library") > >() },
    { "n1509", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Generalized Initializer Lists") > >() },
    { "n1510", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Concept checking  A more abstract complement to type checking") > >() },
    { "n1511", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Literals for userdefined types") > >() },
    { "n1512", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Evolution WG issues list") > >() },
    { "n1513", 0u, RevList< Rev< 0u, ArrHash< Hash("David Miller") >(), wxS("Improving Enumeration Types") > >() },
    { "n1514", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Add Mathematical Special Functions to the C Standard Library version ") > >() },
    { "n1515", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issuess List Revision ") > >() },
    { "n1516", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1517", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1518", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1519", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("Type Traits Issue List") > >() },
    { "n1520", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Extended friend Declarations") > >() },
    { "n1521", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Generalized Constant Expressions") > >() },
    { "n1522", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Concepts  Design choices for template argument checking") > >() },
    { "n1523", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Proposed Resolution To LWG issues    revision ") > >() },
    { "n1524", 0u, RevList< Rev< 0u, ArrHash< Hash("Jon Jagger") >(), wxS("Nested Namespace Definition Proposal") > >() },
    { "n1526", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Proposal to add namespace references to C") > >() },
    { "n1527", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Mechanisms for querying types of expressions decltype and auto revisited") > >() },
    { "n1528", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Syntactic Disambiguation Using the Template Keyword") > >() },
    { "n1529", 0u, RevList< Rev< 0u, ArrHash< Hash("Julian Smith") >(), wxS("Draft proposal for adding Multimethods to C") > >() },
    { "n1530", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("Iterator Facade and Adaptor") > >() },
    { "n1531", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("New Iterator Concepts") > >() },
    { "n1532", 0u, RevList< Rev< 0u, ArrHash< Hash("Keld Jorn Simonsen") >(), wxS("WG liaison report") > >() },
    { "n1534", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Rosenberg") >(), wxS("Proposed addition of func predefined identifier from C") > >() },
    { "n1535", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Random Number Generators Issues List") > >() },
    { "n1536", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Concepts  syntax and composition") > >() },
    { "n1537", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1538", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1539", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1540", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1541", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1542", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Add Mathematical Special Functions to the C Standard Library version ") > >() },
    { "n1543", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Analysis and Proposed Resolution for Core Issue ") > >() },
    { "n1544", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Comments about Issues with Random Number Generators") > >() },
    { "n1545", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul Mensonides") >(), wxS("Variadic Macros and Placemarkers") > >() },
    { "n1546", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Alignment Proposal") > >() },
    { "n1547", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno") >(), wxS("Comments on the Initialization of Random Engines") > >() },
    { "n1548", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Proposal to Add a Fixed Size Array Wrapper to the Standard Library Technical Report") > >() },
    { "n1549", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Const correctness in unordered associative containers") > >() },
    { "n1550", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("New Iterator Concepts") > >() },
    { "n1551", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Changes to N to Implement N Parts  and ") > >() },
    { "n1552", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1553", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1554", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1555", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1556", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1557", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("CCLI Overview") > >() },
    { "n1558", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Component Detection") > >() },
    { "n1559", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG Agenda") > >() },
    { "n1563", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report to WG") > >() },
    { "n1564", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Issue  and ConditionallySupported Behavior") > >() },
    { "n1565", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding the long long type to C") > >() },
    { "n1566", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Synchronizing the C preprocessor with C") > >() },
    { "n1567", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Critique of WGN decimal floatingpoint arithmetic") > >() },
    { "n1568", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed additions to TR to improve compatibility with C") > >() },
    { "n1569", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed fixes to library inconsistencies") > >() },
    { "n1570", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Corrections to domainerror reporting for TR chapter on special math functions") > >() },
    { "n1571", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1572", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1573", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1575", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Technical Report Component Detection Revision ") > >() },
    { "n1576", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem library query") > >() },
    { "n1577", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger"), Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1578", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger"), Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n1579", 0u, RevList< Rev< 0u, ArrHash< Hash("David Miller"), Hash("Herb Sutter") >(), wxS("Strongly Typed Enums") > >() },
    { "n1580", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No  March   Sydney Australia") > >() },
    { "n1581", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow"), Hash("Herb Sutter") >(), wxS("Delegating Constructors") > >() },
    { "n1582", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Compiler Generated Defaults") > >() },
    { "n1583", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Inheriting Constructors") > >() },
    { "n1584", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Regularizing Initialization Syntax") > >() },
    { "n1585", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Uniform Calling Syntax Reopening public interfaces") > >() },
    { "n1588", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno") >(), wxS("On RandomNumber Distributions for Cx") > >() },
    { "n1589", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("complex and issue ") > >() },
    { "n1590", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Smart Pointer Comparison Operators") > >() },
    { "n1591", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("October  Meeting Information") > >() },
    { "n1592", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Explicit Conversion Operators") > >() },
    { "n1593", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1594", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1595", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1596", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1597", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1598", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde") >(), wxS("Evolution WG issues list") > >() },
    { "n1599", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Issue  Swapping containers with unequal allocators") > >() },
    { "n1600", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("CCLI Properties") > >() },
    { "n1601", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n1602", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Class Scope Using Declarations  private Members") > >() },
    { "n1603", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Variadic Templates") > >() },
    { "n1604", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("John Maddock"), Hash("Robert Klarer") >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1605", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("Extending Template Type Parameters I Namespace and scope") > >() },
    { "n1607", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Decltype and auto revision ") > >() },
    { "n1608", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1609", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("More on Issues with Random Number Generators in the Library TR Proposal") > >() },
    { "n1610", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("G. Powell") >(), wxS("Clarification of Initialization of Class Objects by rvalues") > >() },
    { "n1611", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("ImplicitlyCallable Functions in Cx") > >() },
    { "n1612", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("How we might remove the remaining shortcomings of stdcomplexT") > >() },
    { "n1613", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Proposal to add Design by Contract to C") > >() },
    { "n1614", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("scope A simple scoping mechanism for the CC preprocessor") > >() },
    { "n1615", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("C Properties  a Library Solution") > >() },
    { "n1616", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1617", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("John Maddock"), Hash("Robert Klarer") >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1618", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow"), Hash("Herb Sutter") >(), wxS("Delegating Constructors revision ") > >() },
    { "n1619", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1620", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Dimension and Rank") > >() },
    { "n1621", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Resolution to TR issue ") > >() },
    { "n1622", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Resolutions to unordered associative container issues") > >() },
    { "n1623", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Resolutions to regular expression issues") > >() },
    { "n1624", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Resolutions to fixedsize array issues") > >() },
    { "n1625", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("scope for CC") > >() },
    { "n1626", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Proposed Resolution for Core Issue  Rev ") > >() },
    { "n1627", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("ConditionallySupported Behavior Rev ") > >() },
    { "n1628", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Extensions for the Programming Language C to Support New Character Data Types") > >() },
    { "n1629", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  March  ") > >() },
    { "n1630", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting March  ") > >() },
    { "n1631", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("David Abrahams"), Hash("Jeremy Siek") >(), wxS("Electronic review process") > >() },
    { "n1632", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1633", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1634", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1635", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1636", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1637", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1638", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1639", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n1640", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("New Iterator Concepts") > >() },
    { "n1641", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Jeremy Siek"), Hash("T. Witt") >(), wxS("Iterator Facade and Adaptor") > >() },
    { "n1642", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Rosenberg") >(), wxS("Adoption of Cs func predefined identifier and improved default argument behavior") > >() },
    { "n1647", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1648", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Motivation Objectives and Design Decisions") > >() },
    { "n1649", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Right Angle Brackets") > >() },
    { "n1650", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Herb Sutter") >(), wxS("C Evolution Working Group  Active Proposals Revision ") > >() },
    { "n1651", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG agenda") > >() },
    { "n1652", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG Agenda") > >() },
    { "n1653", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Working draft changes for C preprocessor synchronization") > >() },
    { "n1654", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1655", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Unofficial Working Draft Standard for Programming Language C") > >() },
    { "n1656", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n1657", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1658", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1659", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1660", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1661", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1662", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG Business Plan and Conveners Report") > >() },
    { "n1663", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1664", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Toward Improved Optimization Opportunities in Cx") > >() },
    { "n1665", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Marraffino"), Hash("Marc Paterno") >(), wxS("Guidelines for Domain Errors in Mathematical Special Functions") > >() },
    { "n1666", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Technical Report on C Performance") > >() },
    { "n1667", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Accessing the target of a trfunction object") > >() },
    { "n1668", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul A Bristow") >(), wxS("A Proposal to add Mathematical Functions for Statistics to the C Standard Library") > >() },
    { "n1669", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1671", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Overloading Operator  Operator") > >() },
    { "n1672", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Adapting N To Cx") > >() },
    { "n1673", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker"), Hash("Peter Dimov") >(), wxS("Unifying TR Function Object Type Specifications") > >() },
    { "n1674", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Improve constiterator Use from CX Containers") > >() },
    { "n1675", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1676", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("Nonmember overloaded copy assignment operator") > >() },
    { "n1677", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1678", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1679", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1680", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("B. Pugh"), Hash("D. Lea"), Hash("Hans J. Boehm"), Hash("Kevlin Henney") >(), wxS("Memory Model for multithreaded C") > >() },
    { "n1681", 0u, RevList< Rev< 0u, ArrHash< Hash("David B. Held") >(), wxS("A Proposal to Add a PolicyBased Smart Pointer Framework to the Standard Library") > >() },
    { "n1682", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("A Multithreading Library for Standard C") > >() },
    { "n1683", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed Library Additions for Code Conversions") > >() },
    { "n1684", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1685", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1686", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1687", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1688", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List Revision ") > >() },
    { "n1689", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist") > >() },
    { "n1690", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Howard E. Hinnant"), Hash("Peter Dimov") >(), wxS("A Proposal to Add an Rvalue Reference to the C Language") > >() },
    { "n1691", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams") >(), wxS("Explicit Namespaces") > >() },
    { "n1692", 0u, RevList< Rev< 0u, ArrHash< Hash("M. J. Kronenburg") >(), wxS("A Proposal to add the Infinite Precision Integer to the C Standard Library") > >() },
    { "n1693", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1694", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("A Proposal to Extend the Function Call Operator") > >() },
    { "n1695", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("A Proposal to Make Pointers to Members Callable") > >() },
    { "n1696", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Language Support for Restricted Templates") > >() },
    { "n1697", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Restrictions on Order Parameters for Bessels and Other Function Families") > >() },
    { "n1698", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No  Oct   Redmond Washington") > >() },
    { "n1700", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Herb Sutter") >(), wxS("C Evolution Working Group  Active Proposals Revision b") > >() },
    { "n1701", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Regularizing Initialization Syntax revision ") > >() },
    { "n1702", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("explicit class and default definitions") > >() },
    { "n1703", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Function Qualifiers") > >() },
    { "n1704", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Variadic Templates Exploring the Design Space") > >() },
    { "n1705", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Decltype and Auto revision ") > >() },
    { "n1706", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Toward Opaque typedefs in CX") > >() },
    { "n1707", 0u, RevList< Rev< 0u, ArrHash< Hash("Keld Jorn Simonsen") >(), wxS("Invitation April  meeting") > >() },
    { "n1708", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1709", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1710", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1711", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on Standard Library Extensions") > >() },
    { "n1712", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1713", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposed Resolution to TR Issues   and ") > >() },
    { "n1714", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1715", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1717", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow"), Hash("Lois Goldthwaite") >(), wxS("Explicit class and default definitions") > >() },
    { "n1718", 0u, RevList< Rev< 0u, ArrHash< Hash("M. J. Kronenburg") >(), wxS("A Proposal to add the Infinite Precision Integer and Rational to the C Standard Library") > >() },
    { "n1719", 0u, RevList< Rev< 0u, ArrHash< Hash("David Miller"), Hash("Herb Sutter") >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n1720", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("John Maddock"), Hash("Robert Klarer") >(), wxS("Proposal to Add Static Assertions to the Core Language Revision ") > >() },
    { "n1721", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Deducing the type of variable from its initializer expression") > >() },
    { "n1722", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1723", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Proposed Resolutions to Library TR Issues") > >() },
    { "n1724", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("A Library Approach to Initialization") > >() },
    { "n1725", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Copy Elision in Exception Handling") > >() },
    { "n1726", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Macro scopes") > >() },
    { "n1727", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Changing Undefined Behavior into Diagnosable Errors") > >() },
    { "n1729", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1730", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1731", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1732", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1733", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1734", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n1735", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1736", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n1737", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Restore Multideclarator auto Declarations") > >() },
    { "n1738", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("B. Pugh"), Hash("D. Lea"), Hash("Hans J. Boehm"), Hash("Kevlin Henney"), Hash("Maged M. Michael") >(), wxS("Memory Model for Multithreaded C") > >() },
    { "n1739", 0u, RevList< Rev< 0u, ArrHash< Hash("David B. Held") >(), wxS("Adding a PolicyBased Smart Pointer Framework to the Standard Library") > >() },
    { "n1740", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("The scope extension for the CC preprocessor") > >() },
    { "n1741", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Proposal for Extending the switch statement") > >() },
    { "n1742", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow") >(), wxS("Auxiliary class interfaces") > >() },
    { "n1743", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n1744", 0u, RevList< Rev< 0u, ArrHash< Hash("Michiel Salters") >(), wxS("Big Integer Library Proposal for Cx") > >() },
    { "n1745", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Proposed Draft Technical Report on C Library Extensions") > >() },
    { "n1746", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding extended integer types to C") > >() },
    { "n1747", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1748", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1749", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1750", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Critique of Code Conversion Proposal N") > >() },
    { "n1751", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Aspects of Reflection in C") > >() },
    { "n1752", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1753", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1754", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1755", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1756", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1757", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Right Angle Brackets Revision ") > >() },
    { "n1758", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Concepts for Cx") > >() },
    { "n1759", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1760", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1761", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1762", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision ") > >() },
    { "n1763", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision ") > >() },
    { "n1764", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision ") > >() },
    { "n1765", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1766", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1767", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1768", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1769", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1770", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Hommel"), Hash("David Abrahams"), Hash("Howard E. Hinnant"), Hash("J. Stephen Adamczyk"), Hash("Peter Dimov") >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording") > >() },
    { "n1771", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Hommel"), Hash("Alisdair Meredith"), Hash("David Abrahams"), Hash("Douglas Gregor"), Hash("Howard E. Hinnant"), Hash("Peter Dimov") >(), wxS("Impact of the rvalue reference on the Standard Library") > >() },
    { "n1772", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda") > >() },
    { "n1773", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("James Widman"), Hash("Lawrence Crowl"), Hash("Thorsten Ottosen") >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1774", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("On the Future Evolution of C") > >() },
    { "n1775", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Case for Reflection") > >() },
    { "n1776", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Decimal Types for C") > >() },
    { "n1777", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("B. Hutchings"), Hash("B. Pugh"), Hash("D. Lea"), Hash("Hans J. Boehm"), Hash("Kevlin Henney") >(), wxS("Memory model for multithreaded C Issues") > >() },
    { "n1778", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n1780", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Comments on LWG issue  Insertion hints in associative containers") > >() },
    { "n1781", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Rules of thumb for the design of Cx") > >() },
    { "n1782", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("A concept design Rev ") > >() },
    { "n1783", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1784", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("A proposal to add lvalue member function qualifier") > >() },
    { "n1785", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Toward a Proposal for Object Templates in Cx") > >() },
    { "n1786", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1787", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1788", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1789", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n1790", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1791", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Extended friend Declarations Rev ") > >() },
    { "n1792", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A Modest Proposal Fixing ADL") > >() },
    { "n1794", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Deducing the type of variable from its initializer expression revision ") > >() },
    { "n1796", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Proposal for new forloop") > >() },
    { "n1798", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Explicit model definitions are necessary") > >() },
    { "n1799", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock"), Hash("Jaakko J\\u00E4rvi"), Hash("Jeremy Siek"), Hash("R. Garcia") >(), wxS("C Language Support for Generic Programming") > >() },
    { "n1800", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Thorsten Ottosen") >(), wxS("Contract Programming For Cx") > >() },
    { "n1801", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Proposed resolution of core issue ") > >() },
    { "n1802", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Uniform Use of stdstring") > >() },
    { "n1803", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Simple Numeric Access") > >() },
    { "n1804", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1805", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n1806", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1807", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1808", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1809", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1810", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("Matthew Austern") >(), wxS("Library Extension TR Call for Proposals") > >() },
    { "n1811", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding the long long type to C Revision ") > >() },
    { "n1814", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen Michell") >(), wxS("October  Meeting Information Revision ") > >() },
    { "n1815", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ISO C Strategic Plan for Multithreading") > >() },
    { "n1816", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n1817", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n1818", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1819", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1820", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1821", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki"), Hash("Daveed Vandevoorde") >(), wxS("Extending Move Semantics To this Revision ") > >() },
    { "n1822", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul A Bristow") >(), wxS("A Proposal to add a max significant decimal digits value to the C Standard Library Numeric limits") > >() },
    { "n1823", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("New Character Types in C") > >() },
    { "n1824", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Extending Aggregate Initialization") > >() },
    { "n1825", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Addressing Exception Specifications for Next Generation of C") > >() },
    { "n1827", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("C. Uzdavinis") >(), wxS("An Explicit Override Syntax for C") > >() },
    { "n1830", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1831", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1832", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1833", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent Garbage Collection for C") > >() },
    { "n1834", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("A Pleading for Reasonable Parallel Processing Support in C") > >() },
    { "n1835", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("stdinth for C") > >() },
    { "n1836", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Draft Technical Report on C Library Extensions") > >() },
    { "n1837", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Library Extension Technical Report  Issues List") > >() },
    { "n1838", 0u, RevList< Rev< 0u, ArrHash< Hash("Joseph S. Berr\\uFFFDos") >(), wxS("A Proposal to Add Sockets to the Standard Library") > >() },
    { "n1839", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Decimal Types for C Second Draft") > >() },
    { "n1840", 0u, RevList< Rev< 0u, ArrHash< Hash("Herv\\u00e9 Br\\u00f6nnimann") >(), wxS("Cx Proposal Function template stdminmax and  or algorithm stdminmaxelement") > >() },
    { "n1841", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal") > >() },
    { "n1842", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul A Bristow") >(), wxS("A Proposal to add two iostream manipulators to the C Standard Library") > >() },
    { "n1843", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Herv\\u00e9 Br\\u00f6nnimann"), Hash("Sylvain Pion") >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library") > >() },
    { "n1844", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1845", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1846", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1847", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("vectorbool More Problems Better Solutions") > >() },
    { "n1848", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Implementing Concepts") > >() },
    { "n1849", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Concepts for Cx Revision ") > >() },
    { "n1850", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Towards a Better Allocator Model") > >() },
    { "n1851", 0u, RevList< Rev< 0u, ArrHash< Hash("I. Rocha"), Hash("V. Kliatchko") >(), wxS("Improving Usability and Performance of TR Smart Pointers") > >() },
    { "n1852", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1853", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1854", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1855", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Hommel"), Hash("David Abrahams"), Hash("Howard E. Hinnant"), Hash("Peter Dimov") >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording") > >() },
    { "n1856", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1857", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1858", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1859", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1860", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1861", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1862", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rvalue Reference Recommendations for Chapter ") > >() },
    { "n1864", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG liaison report") > >() },
    { "n1865", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Improve constiterator Use version ") > >() },
    { "n1866", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Thorsten Ottosen") >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1867", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Thorsten Ottosen") >(), wxS("Synergies between Contract Programming Concepts and Static Assertions") > >() },
    { "n1868", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Proposal for new forloop revision ") > >() },
    { "n1869", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for imaginary numbers") > >() },
    { "n1870", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS(" crazy ideas for the standard library in Cx") > >() },
    { "n1871", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Range Library Proposal") > >() },
    { "n1872", 0u, RevList< Rev< 0u, ArrHash< Hash("Pavol Droba"), Hash("Thorsten Ottosen") >(), wxS("Proposal for new string algorithms in Cx") > >() },
    { "n1873", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Dietmar K\\u00FChl") >(), wxS("The CursorProperty Map Abstraction") > >() },
    { "n1874", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n1875", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Threads") > >() },
    { "n1876", 0u, RevList< Rev< 0u, ArrHash< Hash("B. Pugh"), Hash("D. Lea"), Hash("Hans J. Boehm") >(), wxS("Memory model for multithreaded C August  status update") > >() },
    { "n1877", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Adding Alignment Support to the C Programming Language") > >() },
    { "n1878", 0u, RevList< Rev< 0u, ArrHash< Hash("Fernando Cacciola") >(), wxS("A proposal to add an utility class to represent optional objects Revision ") > >() },
    { "n1879", 0u, RevList< Rev< 0u, ArrHash< Hash("Fernando Cacciola") >(), wxS("A proposal to add a general purpose rangedchecked numericcast Revision ") > >() },
    { "n1880", 0u, RevList< Rev< 0u, ArrHash< Hash("Fernando Cacciola") >(), wxS("A proposal to extend numericlimits for consistent range query Revision ") > >() },
    { "n1882", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA") > >() },
    { "n1883", 0u, RevList< Rev< 0u, ArrHash< Hash("Kevlin Henney") >(), wxS("Preliminary Threading Library Proposal for TR") > >() },
    { "n1884", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Walker"), Hash("P.J. Plauger") >(), wxS("Further Restrictions on Special Math Functions") > >() },
    { "n1885", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("A formalism for C") > >() },
    { "n1886", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Specifying C concepts") > >() },
    { "n1887", 0u, RevList< Rev< 0u, ArrHash< Hash("Cord Wischhoeffer") >(), wxS("Meeting information for SC WG  Meetings in Berlin") > >() },
    { "n1888", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Defining Members of Explicit Specializations") > >() },
    { "n1889", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1890", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Initialization and initializers") > >() },
    { "n1891", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Progress toward Opaque Typedefs for CX") > >() },
    { "n1892", 0u, RevList< Rev< 0u, ArrHash< Hash("I. McIntosh"), Hash("Michael Wong"), Hash("R. Mak") >(), wxS("Extensible Literals") > >() },
    { "n1893", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A Modest Proposal Fixing ADL revision ") > >() },
    { "n1894", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Deducing the type of variable from its initializer expression revision ") > >() },
    { "n1895", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow"), Hash("Herb Sutter") >(), wxS("Delegating Constructors revision ") > >() },
    { "n1896", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Proposed resolution of core issue  revision ") > >() },
    { "n1898", 0u, RevList< Rev< 0u, ArrHash< Hash("M. Michaud"), Hash("Michael Wong") >(), wxS("Forwarding and inherited constructors") > >() },
    { "n1899", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Concept proposal comparison") > >() },
    { "n1900", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Proposal to Add DateTime to the C Standard Library") > >() },
    { "n1901", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n1902", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1903", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1904", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1905", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n1906", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n1907", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("A Multithreading Library for Standard C Revision ") > >() },
    { "n1908", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1909", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1910", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1911", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Memory Model for C Status update") > >() },
    { "n1912", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("A sketch for a namespace operator") > >() },
    { "n1913", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Improve constiterator Use version ") > >() },
    { "n1914", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("A Proposal to Add RandomNumber Distributions to Cx") > >() },
    { "n1915", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n1916", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n1917", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n1919", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Initializer lists") > >() },
    { "n1924", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("TG Liaison Report ") > >() },
    { "n1925", 0u, RevList< Rev< 0u, ArrHash< Hash("Gerhard Wesp") >(), wxS("Networking proposal for TR rev ") > >() },
    { "n1926", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1927", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1928", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1929", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1930", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1931", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1932", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Random Number Generation in CX A Comprehensive Proposal") > >() },
    { "n1933", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Improvements to TRs Facility for Random Number Generation") > >() },
    { "n1934", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1935", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1936", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1937", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n1938", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Lookup Issues in Destructor and PseudoDestructor References") > >() },
    { "n1939", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Kevlin Henney") >(), wxS("Any Library Proposal for TR") > >() },
    { "n1940", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("Why POSIX Threads Are Unsuitable for C") > >() },
    { "n1941", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("Agenda J Meeting No  WG Meeting No ") > >() },
    { "n1942", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("A Memory Model for C Strawman Proposal") > >() },
    { "n1943", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent Garbage Collection for C") > >() },
    { "n1944", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("A finergrained alternative to sequence points") > >() },
    { "n1945", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Names Linkage and Templates") > >() },
    { "n1946", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Portland meeting information") > >() },
    { "n1947", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("The Memory Model and the C Library NonMemory Actions etc") > >() },
    { "n1949", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n1950", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n1951", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n1952", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording Revision ") > >() },
    { "n1953", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Upgrading the Interface of Allocators using API Versioning") > >() },
    { "n1954", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("LWG Paper Summary") > >() },
    { "n1955", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("New Character Types in C") > >() },
    { "n1956", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A Design Rationale for CCLI Version ") > >() },
    { "n1957", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed Library Additions for Code Conversion") > >() },
    { "n1958", 0u, RevList< Rev< 0u, ArrHash< Hash("Valentin Samko") >(), wxS("A proposal to add lambda functions to the C standard") > >() },
    { "n1959", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Class member initializers") > >() },
    { "n1960", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Adding extern template") > >() },
    { "n1961", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for rangebased forloop") > >() },
    { "n1962", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Thorsten Ottosen") >(), wxS("Proposal to add Contract Programming to C revision ") > >() },
    { "n1963", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("Generic Support for Threading Models") > >() },
    { "n1964", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n1965", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Decimal Types for C Draft ") > >() },
    { "n1966", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n1968", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("J. Willcock"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Lambda expressions and closures for C") > >() },
    { "n1969", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution before Berlin  Meeting") > >() },
    { "n1970", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Compatibility  func and predeclared identifiers") > >() },
    { "n1971", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Adding Alignment Support to the C Programming Language") > >() },
    { "n1972", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Generalized Constant Expressions  Revision ") > >() },
    { "n1973", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Kevlin Henney") >(), wxS("Lexical Conversion Library Proposal for TR") > >() },
    { "n1974", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Boost Network Library Query") > >() },
    { "n1975", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal for TR Revision ") > >() },
    { "n1976", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Dynamic Shared Objects Survey and Issues") > >() },
    { "n1977", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Decimal Types for C Draft ") > >() },
    { "n1978", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Decltype revision ") > >() },
    { "n1980", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Generalized Constant Expressions Revision ") > >() },
    { "n1981", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Uniform Use of stdstring Revision ") > >() },
    { "n1982", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Simple Numeric Access Revision ") > >() },
    { "n1983", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("long long size t and compatibility") > >() },
    { "n1984", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Deducing the type of variable from its initializer expression revision ") > >() },
    { "n1985", 0u, RevList< Rev< 0u, ArrHash< Hash("Jack W. Reeves") >(), wxS("Request the Standard Provide Explicit Specialization of chartraits For All Builtin Character Types") > >() },
    { "n1986", 0u, RevList< Rev< 0u, ArrHash< Hash("Francis Glassborow"), Hash("Herb Sutter") >(), wxS("Delegating Constructors revision ") > >() },
    { "n1987", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Adding extern template version ") > >() },
    { "n1988", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Adding extended integer types to C Revision ") > >() },
    { "n1990", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Proposed Text for minmax N") > >() },
    { "n1991", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Proposed Text for defaultfloat N") > >() },
    { "n1992", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n1993", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n1997", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n1998", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n1999", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2000", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2001", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2002", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2003", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("LWG Paper Summary") > >() },
    { "n2004", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Impact of Language Changes on LWG Schedule") > >() },
    { "n2005", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul A Bristow") >(), wxS("A maximum significant decimal digits value for the Cx Standard Library Numeric limits") > >() },
    { "n2006", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Accessibility and Visibility in C Modules") > >() },
    { "n2007", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Proposed Library Additions for Code Conversion") > >() },
    { "n2008", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2009", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2010", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Memory Model Overview") > >() },
    { "n2011", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution after Berlin  Meeting") > >() },
    { "n2012", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Thread Subcommittee Minutes from Berlin") > >() },
    { "n2013", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Versioning with Namespaces") > >() },
    { "n2014", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("C and POSIX Compatibility") > >() },
    { "n2015", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Plugins in C") > >() },
    { "n2016", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Nick Maclaren") >(), wxS("Should volatile Acquire Atomicity and Thread Visibility Semantics") > >() },
    { "n2018", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("New Character Types in C") > >() },
    { "n2019", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n2020", 0u, RevList< Rev< 0u, ArrHash< Hash("M. J. Kronenburg") >(), wxS("Proposal for an Infinite Precision Integer for Library Technical Report  Revision ") > >() },
    { "n2021", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business plan and convenors report") > >() },
    { "n2022", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul A Bristow") >(), wxS("Input  Output of NaN and infinity for the C Standard Library") > >() },
    { "n2023", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("eraseiterator for unordered containers should not return an iterator") > >() },
    { "n2024", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2025", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2026", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2027", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Bronek Kozicki"), Hash("Howard E. Hinnant") >(), wxS("A Brief Introduction to Rvalue References") > >() },
    { "n2028", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Minor Modifications to the type traits Wording") > >() },
    { "n2029", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2030", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2031", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2032", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Random Number Generation in CX A Comprehensive Proposal version ") > >() },
    { "n2033", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Proposal to Consolidate the SubtractwithCarry Engines") > >() },
    { "n2034", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Cx Standard Library wishlist revision ") > >() },
    { "n2035", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Minimal Unicode support for the standard library") > >() },
    { "n2036", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Approach") > >() },
    { "n2037", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Introduction") > >() },
    { "n2038", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Utilities") > >() },
    { "n2039", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Iterators") > >() },
    { "n2040", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Algorithms") > >() },
    { "n2041", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Numerics") > >() },
    { "n2042", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor") >(), wxS("Concepts") > >() },
    { "n2043", 0u, RevList< Rev< 0u, ArrHash< Hash("Ion Gazta\\uFFFDaga") >(), wxS("Simplifying And Extending Mutex and Scoped Lock Types For C MultiThreading Library") > >() },
    { "n2044", 0u, RevList< Rev< 0u, ArrHash< Hash("Ion Gazta\\uFFFDaga") >(), wxS("Memory Mapped Files And Shared Memory For C") > >() },
    { "n2045", 0u, RevList< Rev< 0u, ArrHash< Hash("Ion Gazta\\uFFFDaga") >(), wxS("Improving STL Allocators") > >() },
    { "n2046", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Herv\\u00e9 Br\\u00f6nnimann"), Hash("Sylvain Pion") >(), wxS("Boolset multivalued logic") > >() },
    { "n2047", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("An Atomic Operations Library for C") > >() },
    { "n2049", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Conceptualizing the RangeBased for Loop") > >() },
    { "n2050", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Gennaro Prot"), Hash("Jamie Allsop") >(), wxS("Proposal to Add a Dynamically Sizeable Bitset to the Standard Library Technical Report Revision ") > >() },
    { "n2051", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Evolution of the C Standard Library") > >() },
    { "n2052", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("Sequencing and the concurrency memory model") > >() },
    { "n2053", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Raw String Literals") > >() },
    { "n2054", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal for TR") > >() },
    { "n2055", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2056", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2057", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2058", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Proposed Text for Proposal to add DateTime to the Standard Library ") > >() },
    { "n2059", 0u, RevList< Rev< 0u, ArrHash< Hash("Pavol Droba") >(), wxS("Proposal for new string algorithms in TR") > >() },
    { "n2061", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Exception Propagation Support") > >() },
    { "n2062", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited") > >() },
    { "n2063", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No ") > >() },
    { "n2065", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("A proposal to add stream objects based on fixed memory buffers") > >() },
    { "n2066", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("TR Diagnostics Enhancements") > >() },
    { "n2067", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Herv\\u00e9 Br\\u00f6nnimann"), Hash("Sylvain Pion") >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library") > >() },
    { "n2068", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Range Library Core") > >() },
    { "n2069", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Yet another typetrait decay") > >() },
    { "n2070", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Enhancing the timeget facet for POSIX compatibility") > >() },
    { "n2071", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Iostream manipulators for convenient extraction and insertion of struct tm objects") > >() },
    { "n2072", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Iostream manipulators for convenient extraction and insertion of monetary values") > >() },
    { "n2073", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n2074", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Plugins in C") > >() },
    { "n2075", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Prism A PrincipleBased Sequential Memory Model for Microsoft Native Code Platforms") > >() },
    { "n2076", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Oxford meeting invitation") > >() },
    { "n2079", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Random Number Generation in CX A Comprehensive Proposal version ") > >() },
    { "n2080", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Variadic Templates Revision ") > >() },
    { "n2081", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor") >(), wxS("Concepts Revision ") > >() },
    { "n2082", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2083", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2084", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2085", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Containers") > >() },
    { "n2086", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Signals and Slots for Library TR") > >() },
    { "n2087", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A Brief Introduction to Variadic Templates") > >() },
    { "n2088", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("IEEE R Support and Threading and Decimal") > >() },
    { "n2089", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("Asynchronous Exceptions for Threads") > >() },
    { "n2090", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("A Threading API for C") > >() },
    { "n2091", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2092", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2093", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2094", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Multithreading API for CX  A Layered Approach") > >() },
    { "n2095", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("long long Goes to the Library") > >() },
    { "n2096", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Transporting Values and Exceptions between Threads") > >() },
    { "n2098", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Siek") >(), wxS("Scoped Concept Maps") > >() },
    { "n2099", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS(" of the least crazy ideas for the standard library in Cx") > >() },
    { "n2100", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Initializer lists") > >() },
    { "n2101", 0u, RevList< Rev< 0u, ArrHash< Hash("B. Reiter"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Hierarchical Data Structures and Related Concepts for the C Standard Library") > >() },
    { "n2102", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2103", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A Modest Proposal Fixing ADL revision ") > >() },
    { "n2104", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison") >(), wxS("A Proposal to Add Parallel Iteration to the Standard Library") > >() },
    { "n2105", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Proposed Cx Keywords Considered") > >() },
    { "n2106", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Cloning and Throwing Dynamically Typed Exceptions") > >() },
    { "n2107", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("Exception Propagation across Threads") > >() },
    { "n2108", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("Explicit Virtual Overides") > >() },
    { "n2109", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n2110", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  October  ") > >() },
    { "n2111", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Kowalkowski"), Hash("M. Fischler"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Random Number Generation in CX A Comprehensive Proposal version ") > >() },
    { "n2112", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Templates Aliases") > >() },
    { "n2114", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("long long Goes to the Library Revision ") > >() },
    { "n2115", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Decltype revision  proposed wording") > >() },
    { "n2116", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jens Maurer") >(), wxS("Generalized Constant Expressions Revision ") > >() },
    { "n2117", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Minimal Dynamic Library Support") > >() },
    { "n2118", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("A Proposal to Add an Rvalue Reference to the C Language Proposed Wording Revision ") > >() },
    { "n2119", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors") > >() },
    { "n2120", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("April  Meeting") > >() },
    { "n2121", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Proposed Improvements to the Presentation of Requirements for Functions") > >() },
    { "n2122", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution after Portland  Meeting") > >() },
    { "n2123", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Adding the prohibited access specifier to C") > >() },
    { "n2125", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2126", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2127", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2128", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2129", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent Garbage Collection for C Revised") > >() },
    { "n2130", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2131", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2132", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2133", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2134", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2135", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Programming Languages C") > >() },
    { "n2136", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Herv\\u00e9 Br\\u00f6nnimann"), Hash("Sylvain Pion") >(), wxS("Boolset multivalued logic revision ") > >() },
    { "n2137", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Herv\\u00e9 Br\\u00f6nnimann"), Hash("Sylvain Pion") >(), wxS("A Proposal to add Interval Arithmetic to the C Standard Library revision ") > >() },
    { "n2138", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("A Less Formal Explanation of the Proposed C Concurrency Memory Model") > >() },
    { "n2139", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Thoughts on a Thread Library for C") > >() },
    { "n2140", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Adding Alignment Support to the C Programming Language  Consolidated") > >() },
    { "n2141", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Strong Typedefs in CRevisited") > >() },
    { "n2142", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution between Portland and Oxford  Meetings") > >() },
    { "n2143", 0u, RevList< Rev< 0u, ArrHash< Hash("M. J. Kronenburg") >(), wxS("Proposal for an Infinite Precision Integer for Library Technical Report  Revision ") > >() },
    { "n2144", 0u, RevList< Rev< 0u, ArrHash< Hash("M. J. Kronenburg") >(), wxS("Proposal for exact specification of is modulo") > >() },
    { "n2145", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C Atomic Types and Operations") > >() },
    { "n2146", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Raw String Literals Revision ") > >() },
    { "n2147", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n2148", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2149", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("New Character Types in C") > >() },
    { "n2150", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Extending sizeof to apply to nonstatic data members without an object") > >() },
    { "n2151", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Variadic Templates for the Cx Standard Library") > >() },
    { "n2152", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00e4rvi"), Hash("Jason Merrill"), Hash("Jens Maurer") >(), wxS("Proposed Wording for Variadic Templates") > >() },
    { "n2153", 0u, RevList< Rev< 0u, ArrHash< Hash("B. Blainey"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("R. Silvera") >(), wxS("A simple and efficient memory model for weaklyordered architectures") > >() },
    { "n2154", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2155", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2156", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2157", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Minor Modifications to the type traits Wording Revision ") > >() },
    { "n2158", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("LWG Issue  Linking newdelete operators") > >() },
    { "n2159", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("UTF String Literals") > >() },
    { "n2160", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Issue  Fixing vectorbool") > >() },
    { "n2161", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Considering Concept Constraint Combinators") > >() },
    { "n2162", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2163", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2164", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2165", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2166", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n2167", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Overview of LinuxKernel Reference Counting") > >() },
    { "n2168", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("July  Meeting of WGJ Travel Information") > >() },
    { "n2169", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution preOxford  Meeting") > >() },
    { "n2170", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Universal Character Names in Literals") > >() },
    { "n2171", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("Sequencing and the concurrency memory model revised") > >() },
    { "n2172", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2173", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Core Extensions for Evolution") > >() },
    { "n2174", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Diagnostics Enhancements for Cx") > >() },
    { "n2175", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal for TR Revision ") > >() },
    { "n2176", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Memory Model Rationales") > >() },
    { "n2177", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Sequential Consistency for Atomics") > >() },
    { "n2178", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Proposed Text for Chapter  Thread Support Library threads") > >() },
    { "n2179", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Language Support for Transporting Exceptions between Threads") > >() },
    { "n2180", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2181", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2182", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2183", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Issues From Batavia") > >() },
    { "n2184", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Thread Launching for CX") > >() },
    { "n2185", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Proposed Text for Parallel Task Execution") > >() },
    { "n2186", 0u, RevList< Rev< 0u, ArrHash< Hash("James Kanze") >(), wxS("Some Small Additions to iostream") > >() },
    { "n2187", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Names Linkage and Templates rev ") > >() },
    { "n2188", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2189", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2190", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2191", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00e4rvi"), Hash("Jason Merrill"), Hash("Jens Maurer") >(), wxS("Proposed Wording for Variadic Templates Revision ") > >() },
    { "n2192", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00E4rvi") >(), wxS("Variadic Templates for the Cx Standard Library Revision ") > >() },
    { "n2193", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor") >(), wxS("Proposed Wording for Concepts") > >() },
    { "n2194", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00E4rvi") >(), wxS("decltype for the Cx Standard Library") > >() },
    { "n2195", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Proposed Text for Chapter  Atomic Operations Library atomics") > >() },
    { "n2196", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2197", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Prism A PrincipleBased Sequential Memory Model for Microsoft Native Code Platforms") > >() },
    { "n2198", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Extension for the programming language C to support decimal floatingpoint arithmetic") > >() },
    { "n2199", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Improved minmax") > >() },
    { "n2200", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("G. Powell"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Operator Overloading") > >() },
    { "n2201", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No  April   Oxford UK") > >() },
    { "n2202", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("C Compatibility  func and predeclared identifiers") > >() },
    { "n2203", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors") > >() },
    { "n2204", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Specification to deprecate vectorbool") > >() },
    { "n2206", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Consistent Insertion into Standard Containers") > >() },
    { "n2207", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Minimal Unicode support for the standard library revision ") > >() },
    { "n2209", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("UTF String Literals") > >() },
    { "n2210", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2211", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Enhancing the timeget facet for POSIX compatibility Revision ") > >() },
    { "n2212", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Support for sequence inplace construction") > >() },
    { "n2213", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("David Miller"), Hash("Herb Sutter") >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n2214", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n2215", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Initializer lists Rev ") > >() },
    { "n2216", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("P. Pirkelbauer"), Hash("Y. Solodkyy") >(), wxS("Report on language support for MultiMethods and OpenMethods for C") > >() },
    { "n2217", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Placement Insert for Containers") > >() },
    { "n2219", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Constant Expressions in the Standard Library") > >() },
    { "n2220", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Initializer Lists for Standard Containers") > >() },
    { "n2221", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("An analysis of concept intersection") > >() },
    { "n2222", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Toronto Agenda") > >() },
    { "n2223", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite"), Hash("Michael Wong") >(), wxS("Explicit Conversion Operator Draft Working Paper") > >() },
    { "n2224", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Seeking a Syntax for Attributes in C") > >() },
    { "n2225", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Improved integration with C arrays and strings") > >() },
    { "n2228", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution preOxford  Meeting") > >() },
    { "n2229", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Cloning and Throwing Dynamically Typed Exceptions Rev ") > >() },
    { "n2230", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2231", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("STL singly linked lists") > >() },
    { "n2232", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Peter Dimov") >(), wxS("Improving sharedptr for Cx") > >() },
    { "n2233", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("basicstring operator ") > >() },
    { "n2234", 0u, RevList< Rev< 0u, ArrHash< Hash("AFNOR") >(), wxS("French Panel AFNOR Position") > >() },
    { "n2235", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jens Maurer") >(), wxS("Generalized Constant ExpressionsRevision ") > >() },
    { "n2236", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C") > >() },
    { "n2237", 0u, RevList< Rev< 0u, ArrHash< Hash("B. Blainey"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("R. Silvera") >(), wxS("A simple and efficient memory model for weaklyordered architectures") > >() },
    { "n2238", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Minimal Unicode support for the standard library revision ") > >() },
    { "n2239", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("A finergrained alternative to sequence points revised") > >() },
    { "n2240", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Two missing traits enableif and conditional") > >() },
    { "n2241", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Diagnostics Enhancements for Cx Rev ") > >() },
    { "n2242", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Jaakko J\\u00e4rvi"), Hash("Jason Merrill"), Hash("Jens Maurer") >(), wxS("Proposed Wording for Variadic Templates Revision ") > >() },
    { "n2243", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2244", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for decay makepair and maketuple") > >() },
    { "n2245", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Range Utilities for Cx") > >() },
    { "n2246", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS(" of the least crazy ideas for the standard library in Cx") > >() },
    { "n2248", 0u, RevList< Rev< 0u, ArrHash< Hash("Lois Goldthwaite") >(), wxS("Toward a More Perfect Union") > >() },
    { "n2249", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("New Character Types in C") > >() },
    { "n2251", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("C Compatibility  func and predeclared identifiers revision ") > >() },
    { "n2252", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr"), Hash("Clark Nelson") >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2253", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Extending sizeof to apply to nonstatic data members without an object revision ") > >() },
    { "n2254", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2255", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Minor Modifications to the type traits Wording Revision ") > >() },
    { "n2256", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Container inserterase and iterator constness") > >() },
    { "n2257", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Removing unused allocator functions") > >() },
    { "n2258", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Templates Aliases") > >() },
    { "n2259", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Specify header dependency for iostream") > >() },
    { "n2260", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering") > >() },
    { "n2261", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Optimizationrobust finalization") > >() },
    { "n2262", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov"), Hash("R. Silvera") >(), wxS("Explicit Memory Fences") > >() },
    { "n2263", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2264", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2265", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2266", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  April  ") > >() },
    { "n2267", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting April  ") > >() },
    { "n2268", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Placement Insert for Containers Revision ") > >() },
    { "n2269", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA July   Toronto Ontario Canada") > >() },
    { "n2270", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Matthew Austern") >(), wxS("Incompatible changes in Cx") > >() },
    { "n2271", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul Pedriana") >(), wxS("EASTL  Electronic Arts Standard Template Library") > >() },
    { "n2272", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("Optional Sequential Consistency") > >() },
    { "n2273", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("NonMemory Actions Core Aspects") > >() },
    { "n2274", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("Object Aliasing and Threads") > >() },
    { "n2275", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Maclaren") >(), wxS("NonMemory Actions Library") > >() },
    { "n2276", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Thread Pools and Futures") > >() },
    { "n2277", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2278", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2279", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2280", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n2281", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Digit Separators") > >() },
    { "n2282", 0u, RevList< Rev< 0u, ArrHash< Hash("I. McIntosh"), Hash("Michael Wong"), Hash("R. Mak"), Hash("Robert Klarer") >(), wxS("Extensible Literals revision ") > >() },
    { "n2283", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n2284", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2285", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("A Multithreading Library for Standard C Revision ") > >() },
    { "n2286", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Programmer Directed GC for C") > >() },
    { "n2287", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2288", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Constant Expressions in the Standard Library Revision ") > >() },
    { "n2289", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("October  Meeting") > >() },
    { "n2290", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business plan and convenors report") > >() },
    { "n2291", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution Toronto  Meeting") > >() },
    { "n2292", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Standard Library Applications for Deleted Functions") > >() },
    { "n2293", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Standard Library Applications for Explicit Conversion Operators") > >() },
    { "n2294", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2295", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Lawrence Crowl") >(), wxS("Raw and Unicode String Literals Unified Proposal") > >() },
    { "n2296", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Beman Dawes") >(), wxS("Diagnostics Enhancements Resolution of Small Issues") > >() },
    { "n2297", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Peter Dimov") >(), wxS("Improving sharedptr for Cx Revision ") > >() },
    { "n2298", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Herb Sutter"), Hash("Peter Dimov") >(), wxS("ThreadSafety in the Standard Library") > >() },
    { "n2299", 0u, RevList< Rev< 0u, ArrHash< Hash("Joe Gottman") >(), wxS("Concatenating tuples") > >() },
    { "n2300", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("Concurrency memory model revised") > >() },
    { "n2301", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr"), Hash("Clark Nelson") >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2303", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Revised systemerror") > >() },
    { "n2304", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2305", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2306", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2307", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2308", 0u, RevList< Rev< 0u, ArrHash< Hash("Emil Dotchevski") >(), wxS("Adding allocator support to stdfunction for Cx") > >() },
    { "n2309", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Errorhandling and Exceptionrelated library changes for Cx") > >() },
    { "n2310", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Transparent ProgrammerDirected Garbage Collection for C") > >() },
    { "n2311", 0u, RevList< Rev< 0u, ArrHash< Hash("INCITS Secretariat") >(), wxS(" Fees for Participation on INCITS Technical Committees and Task Groups") > >() },
    { "n2312", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Namespace Regions") > >() },
    { "n2314", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n2315", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2316", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n2317", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2318", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2319", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2320", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("Jeff Garland"), Hash("Lawrence Crowl") >(), wxS("Multithreading Library for Standard C") > >() },
    { "n2321", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Enhancing the timeget facet for POSIX compatibility Revision ") > >() },
    { "n2322", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2323", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2324", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C Atomic Types and Operations") > >() },
    { "n2325", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2326", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2327", 0u, RevList< Rev< 0u, ArrHash< Hash("Cosmin Truta") >(), wxS("Inconsistencies in IOStreams Numeric Extraction") > >() },
    { "n2328", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Proposal for DateTime Types in Cx To Support Threading APIs") > >() },
    { "n2329", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Lawrence Crowl") >(), wxS("Lambda expressions and closures for C Revision ") > >() },
    { "n2331", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Namespace Association strong using") > >() },
    { "n2332", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Argument Deduction for Constructors") > >() },
    { "n2333", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Lois Goldthwaite"), Hash("Michael Wong") >(), wxS("Explicit Conversion Operator Draft Working Paper Revision ") > >() },
    { "n2334", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("Concurrency memory model revised again") > >() },
    { "n2336", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution Toronto  Meeting") > >() },
    { "n2337", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("The Syntax of auto Declarations") > >() },
    { "n2338", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Concurrency memory model compiler consequences") > >() },
    { "n2339", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Response to N Removing unused allocator functions") > >() },
    { "n2340", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("C Compatibility  func and predeclared identifiers revision ") > >() },
    { "n2341", 0u, RevList< Rev< 0u, ArrHash< Hash("Attila (Farkas) Feh\\uFFFDr"), Hash("Clark Nelson") >(), wxS("Adding Alignment Support to the C Programming Language  Wording") > >() },
    { "n2342", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("PODs Revisited Resolving Core Issue  Revision ") > >() },
    { "n2343", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jaakko J\\u00e4rvi") >(), wxS("Decltype revision  proposed wording") > >() },
    { "n2345", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Placement Insert for Containers Revision ") > >() },
    { "n2346", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Defaulted and Deleted Functions") > >() },
    { "n2347", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("David Miller"), Hash("Herb Sutter") >(), wxS("Strongly Typed Enums revision ") > >() },
    { "n2348", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno") >(), wxS("Wording for stdnumericlimitsTlowest") > >() },
    { "n2349", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Constant Expressions in the Standard Library Revision ") > >() },
    { "n2350", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Matthew Austern") >(), wxS("Container inserterase and iterator constness Revision ") > >() },
    { "n2351", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Peter Dimov") >(), wxS("Improving sharedptr for Cx Revision ") > >() },
    { "n2353", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Specification for vectorbool") > >() },
    { "n2354", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Class member initializers") > >() },
    { "n2355", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No WG Meeting No  July  ") > >() },
    { "n2356", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting July  ") > >() },
    { "n2359", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Atomics") > >() },
    { "n2360", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Memory Model") > >() },
    { "n2361", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2362", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("Converting Memory Fences to N Form") > >() },
    { "n2363", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report postToronto  Meeting") > >() },
    { "n2364", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Development of C Standard C Library Technical Report no ") > >() },
    { "n2365", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("Explicit Virtual Overides") > >() },
    { "n2366", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2367", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2368", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2369", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2370", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2371", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2372", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2373", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2374", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG agenda") > >() },
    { "n2375", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  WG Meeting No  October   Kona Hawaii") > >() },
    { "n2376", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2377", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki"), Hash("Daveed Vandevoorde") >(), wxS("Extending move semantics to this revised wording") > >() },
    { "n2378", 0u, RevList< Rev< 0u, ArrHash< Hash("I. McIntosh"), Hash("Michael Wong"), Hash("R. Mak"), Hash("Robert Klarer") >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2379", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2380", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Lois Goldthwaite"), Hash("Michael Wong") >(), wxS("Explicit Conversion Operator Draft Working Paper revision ") > >() },
    { "n2381", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C Atomic Types and Operations") > >() },
    { "n2382", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2383", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Abandoning a Process") > >() },
    { "n2384", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Lawrence Crowl") >(), wxS("Raw and Unicode String Literals Unified Proposal Rev ") > >() },
    { "n2385", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("J. Stephen Adamczyk") >(), wxS("Initializer lists WP wording") > >() },
    { "n2386", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Namespace Regions") > >() },
    { "n2387", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Omnibus Allocator Fixup Proposals") > >() },
    { "n2388", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Pointer Arithmetic for sharedptr") > >() },
    { "n2389", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution preKona  Meeting") > >() },
    { "n2390", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report preKona  Meeting") > >() },
    { "n2391", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Recommendations for Resolving Issues re rand") > >() },
    { "n2392", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("A Memory Model for C Sequential Consistency for RaceFree Programs") > >() },
    { "n2393", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C Atomic Types and Operations") > >() },
    { "n2394", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2395", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2396", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2397", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2398", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2399", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("A Tour of the Concepts Wording") > >() },
    { "n2400", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan E. Caves") >(), wxS("February  Meeting") > >() },
    { "n2401", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Code Conversion Facets for the Standard C Library") > >() },
    { "n2402", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Names Linkage and Templates rev ") > >() },
    { "n2403", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2404", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2405", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2406", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Mutex Lock Condition Variable Rationale") > >() },
    { "n2407", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Dynamic Library Support") > >() },
    { "n2408", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Simple Numeric Access Revision ") > >() },
    { "n2409", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock") >(), wxS("Proposed Resolutions for the Outstanding Issues in Chapter  Regular expressions library") > >() },
    { "n2410", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Herb Sutter"), Hash("Peter Dimov") >(), wxS("ThreadSafety in the Standard Library Rev ") > >() },
    { "n2411", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Proposal for DateTime Types in Cx To Support Threading APIs v") > >() },
    { "n2412", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Lawrence Crowl"), Hash("Lois Goldthwaite") >(), wxS("Unrestricted Unions") > >() },
    { "n2413", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Lawrence Crowl") >(), wxS("Lambda Expressions and Closures Wording for Monomorphic Lambdas") > >() },
    { "n2414", 0u, RevList< Rev< 0u, ArrHash< Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Scoped Concept Maps") > >() },
    { "n2415", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Christopher Kohlhoff") >(), wxS("Diagnostics Issues Rev ") > >() },
    { "n2416", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n2417", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Cx Timing Options for Kona Discussion") > >() },
    { "n2418", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2420", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Nick Stoughton") >(), wxS("POSIXC Liaison Report") > >() },
    { "n2421", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2422", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Christopher Kohlhoff") >(), wxS("Diagnostics Issues Rev ") > >() },
    { "n2423", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Recommendations for Resolving Issues re rand Version ") > >() },
    { "n2424", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Recommendations for Resolving the  Issues re rand") > >() },
    { "n2425", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("DRAFT C Dynamic Library Support") > >() },
    { "n2426", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Class member initializers") > >() },
    { "n2427", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C Atomic Types and Operations") > >() },
    { "n2429", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("Concurrency memory model final revision") > >() },
    { "n2430", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Jens Maurer"), Hash("Lawrence Crowl"), Hash("Lois Goldthwaite") >(), wxS("Unrestricted Unions Revision ") > >() },
    { "n2431", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("A name for the null pointer nullptr revision ") > >() },
    { "n2432", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution postKona  Meeting") > >() },
    { "n2433", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report postKona  Meeting") > >() },
    { "n2434", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Standard Library Applications for Explicit Conversion Operators") > >() },
    { "n2435", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Explicit bool for Smart Pointers") > >() },
    { "n2436", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Small Allocator Fixups") > >() },
    { "n2437", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Lois Goldthwaite"), Hash("Michael Wong") >(), wxS("Explicit Conversion Operator Draft Working Paper revision ") > >() },
    { "n2438", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2439", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("Extending move semantics to this revised wording") > >() },
    { "n2440", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Abandoning a Process") > >() },
    { "n2442", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Lawrence Crowl") >(), wxS("Raw and Unicode String Literals Unified Proposal Rev ") > >() },
    { "n2444", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2445", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("New Function Declarator Syntax Wording") > >() },
    { "n2446", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("The Scoped Allocator Model") > >() },
    { "n2447", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Christopher Kohlhoff"), Hash("Dietmar K\\u00FChl"), Hash("Howard E. Hinnant"), Hash("Jeff Garland") >(), wxS("Multithreading Library for Standard C") > >() },
    { "n2448", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("STL singly linked lists revision ") > >() },
    { "n2449", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2450", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2451", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2452", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of WG Meeting No  October  ") > >() },
    { "n2453", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No  October  ") > >() },
    { "n2454", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting October  ") > >() },
    { "n2455", 0u, RevList< Rev< 0u, ArrHash< Hash("WG 14") >(), wxS("Thread Cancellation") > >() },
    { "n2456", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2457", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2458", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2459", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Allow atomics use in signal handlers") > >() },
    { "n2461", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2462", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2464", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n2465", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan E. Caves") >(), wxS("Winter  Meeting Version ") > >() },
    { "n2466", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Bijanki"), Hash("J. Benito"), Hash("Jonathan M\\u00FCller"), Hash("Nick Stoughton"), Hash("Thomas Plum") >(), wxS("WG  Towards Attributes for C") > >() },
    { "n2472", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Jean-Paul Rigault"), Hash("Sylvain Pion") >(), wxS("June  Meeting") > >() },
    { "n2473", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2474", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2475", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2476", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  February   Mar   Bellevue WA") > >() },
    { "n2477", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Uniform initialization design choices") > >() },
    { "n2478", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Add typedef defaultrandomengine to CX") > >() },
    { "n2479", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("Normative Language to Describe Value Copy Semantics") > >() },
    { "n2480", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("A Less Formal Explanation of the Proposed C Concurrency Memory Model") > >() },
    { "n2481", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection") > >() },
    { "n2482", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2483", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2484", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2485", 0u, RevList< Rev< 0u, ArrHash< Hash("Sylvain Pion") >(), wxS("A variadic stdminT  for the C Standard Library") > >() },
    { "n2486", 0u, RevList< Rev< 0u, ArrHash< Hash("Lance Diduck") >(), wxS("Alternative Allocators and Standard Containers") > >() },
    { "n2487", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Lawrence Crowl") >(), wxS("Lambda Expressions and Closures Wording for Monomorphic Lambdas Revision ") > >() },
    { "n2488", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Eric A Niebler") >(), wxS("Extending Variadic Template Template Parameters") > >() },
    { "n2492", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2493", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2494", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2495", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2496", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2497", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Beman Dawes"), Hash("Howard E. Hinnant"), Hash("Jeff Garland"), Hash("Lawrence Crowl") >(), wxS("Multithreading Library for Standard C Revision ") > >() },
    { "n2498", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant"), Hash("Jeff Garland") >(), wxS("Custom Time Duration Support") > >() },
    { "n2499", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("Forward declaration of enumerations") > >() },
    { "n2500", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library") > >() },
    { "n2501", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2502", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Core Concepts for the Cx Standard Library") > >() },
    { "n2503", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Beman Dawes") >(), wxS("Indicating iostream failures with systemerror") > >() },
    { "n2504", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2505", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2506", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2507", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution PreBellevue  Mailing") > >() },
    { "n2508", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report Belleuve  Mailing") > >() },
    { "n2509", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Nesting Exceptions") > >() },
    { "n2510", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("BSI Position on Lambda Functions") > >() },
    { "n2511", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Named Lambdas and Local Functions") > >() },
    { "n2512", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2513", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2514", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Implicit Conversion Operators for Atomics") > >() },
    { "n2516", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Threads API Review Committee Report") > >() },
    { "n2517", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Jean-Paul Rigault"), Hash("Sylvain Pion") >(), wxS("June  Meeting") > >() },
    { "n2518", 0u, RevList< Rev< 0u, ArrHash< Hash("James Widman") >(), wxS("Compiler Support for typetraits") > >() },
    { "n2519", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Library threadsafety from a users point of view with wording") > >() },
    { "n2520", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Changes from Revision  to Revision ") > >() },
    { "n2521", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2522", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2523", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("The Scoped Allocator Model Rev ") > >() },
    { "n2524", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Conservative Swap and Move with Stateful Allocators") > >() },
    { "n2525", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocatorspecific Swap and Move Behavior") > >() },
    { "n2526", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("Why duration Should Be a Type in CX") > >() },
    { "n2527", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection revised") > >() },
    { "n2528", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Timedmutex in Cx") > >() },
    { "n2529", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Lawrence Crowl") >(), wxS("Lambda Expressions and Closures Wording for Monomorphic Lambdas Revision ") > >() },
    { "n2530", 0u, RevList< Rev< 0u, ArrHash< Hash("James Kanze") >(), wxS("Making It Easier to Use stdtypeinfo as an Index in an Associative Container") > >() },
    { "n2531", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("J. Stephen Adamczyk") >(), wxS("Initializer lists WP wording") > >() },
    { "n2532", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Uniform initialization design choices Revision ") > >() },
    { "n2533", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Tuples and Pairs") > >() },
    { "n2534", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Peter Dimov") >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2535", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Namespace Association inline namespace") > >() },
    { "n2536", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Stoughton") >(), wxS("POSIX Liaison Report") > >() },
    { "n2537", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Fall  meeting") > >() },
    { "n2538", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Removal of System error support") > >() },
    { "n2539", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("A New Interface for C stdduration Type") > >() },
    { "n2540", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Inheriting Constructors revision ") > >() },
    { "n2541", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("New Function Declarator Syntax Wording") > >() },
    { "n2542", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Reserved namespaces for POSIX") > >() },
    { "n2543", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("STL singly linked lists revision ") > >() },
    { "n2544", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Jens Maurer"), Hash("Lawrence Crowl"), Hash("Lois Goldthwaite") >(), wxS("Unrestricted Unions Revision ") > >() },
    { "n2545", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n2546", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jens Maurer") >(), wxS("Removal of auto as a storageclass specifier") > >() },
    { "n2547", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Allow atomics use in signal handlers") > >() },
    { "n2549", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Excision of Clause ") > >() },
    { "n2550", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Lawrence Crowl") >(), wxS("Lambda Expressions and Closures Wording for Monomorphic Lambdas Revision ") > >() },
    { "n2551", 0u, RevList< Rev< 0u, ArrHash< Hash("Sylvain Pion") >(), wxS("A variadic stdminT  for the C Standard Library Revision ") > >() },
    { "n2552", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Using ytime for Times in the Thread Support Library") > >() },
    { "n2553", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2554", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("The Scoped Allocator Model Rev ") > >() },
    { "n2555", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Eric A Niebler") >(), wxS("Extending Variadic Template Template Parameters Revision ") > >() },
    { "n2556", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2559", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Nesting Exception Objects Revision ") > >() },
    { "n2561", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Detlef Vollmann"), Hash("Howard E. Hinnant") >(), wxS("An Asynchronous Future Value") > >() },
    { "n2562", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2563", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2564", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2565", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution PostBellevue  Mailing") > >() },
    { "n2566", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report PostBellevue  Mailing") > >() },
    { "n2568", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2569", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("More STL algorithms") > >() },
    { "n2570", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2572", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Core Concepts for the Cx Standard Library Revision ") > >() },
    { "n2573", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2574", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2575", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jason Merrill") >(), wxS("Initializer Lists  Alternative Mechanism and Rationale") > >() },
    { "n2576", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("TypeSoundness and Optimization in the Concepts Proposal") > >() },
    { "n2577", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2578", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2579", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2580", 0u, RevList< Rev< 0u, ArrHash< Hash("James Kanze") >(), wxS("Some More Small Additions to iostream") > >() },
    { "n2581", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("C. Jefferson"), Hash("James Widman"), Hash("Walter E. Brown") >(), wxS("Named Requirements for CX Concepts") > >() },
    { "n2582", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2583", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Default Move Functions") > >() },
    { "n2584", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Default Swap Functions") > >() },
    { "n2585", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection") > >() },
    { "n2586", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection revised") > >() },
    { "n2587", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Garbage Collection Status API") > >() },
    { "n2588", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2589", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2590", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Simplifying swap overloads") > >() },
    { "n2591", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("F. Oram") >(), wxS("Refactoring numericlimits") > >() },
    { "n2592", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of J Meeting No  February March  ") > >() },
    { "n2593", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting February  ") > >() },
    { "n2595", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG Agenda") > >() },
    { "n2596", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Unofficial Record of Discussion J Meeting No  February March  ") > >() },
    { "n2597", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution PreAntipolis  Mailing") > >() },
    { "n2598", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report PreAntipolis  Mailing") > >() },
    { "n2600", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("noncopyable utility class") > >() },
    { "n2601", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Sexagesimal Numbers in C") > >() },
    { "n2602", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Anthony Williams"), Hash("Roger Orr") >(), wxS("BSI Requirements for a systemtime library in Cx") > >() },
    { "n2604", 0u, RevList< Rev< 0u, ArrHash< Hash("Nick Stoughton") >(), wxS("Thoughts on Implementing errno as a Macro") > >() },
    { "n2605", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("Changing some undefined behavior into illformed") > >() },
    { "n2606", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2607", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2608", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2609", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2610", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2611", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA J Meeting No  June   Sophia Antipolis France") > >() },
    { "n2612", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2613", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2614", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2615", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant"), Hash("Jeff Garland"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("A Foundation to Sleep On") > >() },
    { "n2617", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2618", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Beman Dawes"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Chapter  Introduction Revision ") > >() },
    { "n2619", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("CONCEPTS FOR CLAUSE ") > >() },
    { "n2620", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Daniel Kr\\u00FCgler"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Diagnostics library") > >() },
    { "n2621", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Core Concepts for the Cx Standard Library Revision ") > >() },
    { "n2622", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2623", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Pablo Halpern") >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2624", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2625", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2626", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2627", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Detlef Vollmann"), Hash("Howard E. Hinnant") >(), wxS("An Asynchronous Future Value revised") > >() },
    { "n2628", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Nonstatic data member initializers") > >() },
    { "n2629", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Detailed Reporting for InputOutput Library Errors") > >() },
    { "n2631", 0u, RevList< Rev< 0u, ArrHash< Hash("James Kanze") >(), wxS("Resolving the difference between C and C with regards to object representation of integers") > >() },
    { "n2632", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Peter Dimov") >(), wxS("Sharedptr atomic access") > >() },
    { "n2633", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Improved support for bidirectional fences") > >() },
    { "n2634", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk"), Hash("John H. Spicer") >(), wxS("Solving the SFINAE problem for expressions") > >() },
    { "n2635", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Local and Unnamed Types as Template Arguments") > >() },
    { "n2636", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Beman Dawes"), Hash("Jeff Garland"), Hash("Nick Stoughton") >(), wxS("Error Handling Specification for Chapter  Threads") > >() },
    { "n2637", 0u, RevList< Rev< 0u, ArrHash< Hash("Herv\\u00e9 Br\\u00f6nnimann") >(), wxS("Revisiting stdsharedptr comparison") > >() },
    { "n2638", 0u, RevList< Rev< 0u, ArrHash< Hash("Herv\\u00e9 Br\\u00f6nnimann") >(), wxS("Improving the wording of stdsharedptr") > >() },
    { "n2639", 0u, RevList< Rev< 0u, ArrHash< Hash("Herv\\u00e9 Br\\u00f6nnimann") >(), wxS("Algorithms for permutations and combinations with and without repetitions") > >() },
    { "n2640", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jason Merrill") >(), wxS("Initializer Lists  Alternative Mechanism and Rationale v ") > >() },
    { "n2641", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocator Concepts") > >() },
    { "n2642", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Proposed Wording for Placement Insert") > >() },
    { "n2643", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2644", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda") > >() },
    { "n2645", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Gottschling"), Hash("Walter E. Brown") >(), wxS("Fundamental Mathematical Concepts for the STL in Cx") > >() },
    { "n2646", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Gottschling") >(), wxS("Concept Implication and Requirement Propagation") > >() },
    { "n2647", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Daniel Kr\\u00FCgler"), Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Peter Dimov") >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2648", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("C Dynamic Arrays") > >() },
    { "n2649", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Proposed Resolution for Valarray Constructors") > >() },
    { "n2650", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Gottschling"), Hash("Walter E. Brown") >(), wxS("Toward a More Complete Taxonomy of Algebraic Properties for Numeric Libraries in TR") > >() },
    { "n2651", 0u, RevList< Rev< 0u, ArrHash< Hash("Jaakko J\\u00e4rvi"), Hash("Peter Dimov") >(), wxS("Constness of Lambda Functions") > >() },
    { "n2652", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution PostAntipolis  Mailing") > >() },
    { "n2653", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report PostAntipolis  Mailing") > >() },
    { "n2654", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocator Concepts revision ") > >() },
    { "n2655", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Detailed Reporting for InputOutput Library Errors Revision ") > >() },
    { "n2656", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("Core issue  wording") > >() },
    { "n2657", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Local and Unnamed Types as Template Arguments") > >() },
    { "n2658", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Freeman"), Hash("Jaakko J\\u00e4rvi"), Hash("Peter Dimov") >(), wxS("Constness of Lambda Functions Revision ") > >() },
    { "n2659", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("ThreadLocal Storage") > >() },
    { "n2660", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynamic Initialization and Destruction with Concurrency") > >() },
    { "n2661", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant"), Hash("Jeff Garland"), Hash("Marc Paterno"), Hash("Walter E. Brown") >(), wxS("A Foundation to Sleep On") > >() },
    { "n2664", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Atomics and Memory Model") > >() },
    { "n2666", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("More STL algorithms revision ") > >() },
    { "n2667", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Reserved namespaces for POSIX") > >() },
    { "n2668", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Daniel Kr\\u00FCgler"), Hash("Hans J. Boehm"), Hash("Lawrence Crowl"), Hash("Peter Dimov") >(), wxS("Concurrency Modifications to Basic String") > >() },
    { "n2669", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Hans J. Boehm"), Hash("Herb Sutter"), Hash("Lawrence Crowl"), Hash("Peter Dimov") >(), wxS("ThreadSafety in the Standard Library Rev ") > >() },
    { "n2670", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("Michael Spertus") >(), wxS("Minimal Support for Garbage Collection and ReachabilityBased Leak Detection revised") > >() },
    { "n2671", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Detlef Vollmann"), Hash("Howard E. Hinnant") >(), wxS("An Asynchronous Future Value Proposed Wording") > >() },
    { "n2672", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jason Merrill") >(), wxS("Initializer List proposed wording") > >() },
    { "n2673", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Nonstatic data member initializers with draft of initializer list wording") > >() },
    { "n2674", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Peter Dimov") >(), wxS("Sharedptr atomic access revision ") > >() },
    { "n2675", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("noncopyable utility class revision ") > >() },
    { "n2676", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2677", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Foundational Concepts for the Cx Standard Library Revision ") > >() },
    { "n2678", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Beman Dawes"), Hash("Jeff Garland"), Hash("Nick Stoughton") >(), wxS("Error Handling Specification for Chapter  Threads") > >() },
    { "n2679", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Initializer Lists for Standard Containers Revision ") > >() },
    { "n2680", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Proposed Wording for Placement Insert Revision ") > >() },
    { "n2681", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of PL Meeting No  June  ") > >() },
    { "n2682", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of ISO WG Meeting June  ") > >() },
    { "n2683", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("issue  problems and solutions") > >() },
    { "n2684", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2685", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2686", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2687", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2688", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2689", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2690", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2691", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2692", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2693", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Requirements on programs and backwards compatibility") > >() },
    { "n2694", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("Pablo Halpern") >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2695", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2696", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2697", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of WG Meeting June  ") > >() },
    { "n2698", 0u, RevList< Rev< 0u, ArrHash< Hash("Rodrigo Castro Campos") >(), wxS("Additional type traits hastrivialdestructoraftermove and hastrivialreallocation") > >() },
    { "n2699", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2700", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2701", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2702", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2703", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2704", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2705", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution Midterm  Mailing") > >() },
    { "n2706", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report Midterm  Mailing") > >() },
    { "n2707", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Expedited core issues handling") > >() },
    { "n2708", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n2709", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Packaging Tasks for Asynchronous Execution") > >() },
    { "n2710", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2711", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("WG July  Meeting") > >() },
    { "n2712", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Nonstatic data member initializers") > >() },
    { "n2713", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Allow auto for nonstatic data members") > >() },
    { "n2714", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2715", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2716", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2717", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Extensions to the C Library to Support Mathematical Special Functions") > >() },
    { "n2718", 0u, RevList< Rev< 0u, ArrHash< Hash("Rodrigo Castro Campos") >(), wxS("Additional type traits hastrivialdestructoraftermove and hastrivialreallocation rev") > >() },
    { "n2719", 0u, RevList< Rev< 0u, ArrHash< Hash("Rodrigo Castro Campos") >(), wxS("Initializer lists and move semantics") > >() },
    { "n2720", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  September   San Francisco California") > >() },
    { "n2722", 0u, RevList< Rev< 0u, ArrHash< Hash("Lo\\u00efc Joly") >(), wxS("Variadic functions Variadic templates or initializer lists") > >() },
    { "n2723", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2724", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2727", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2728", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2729", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2730", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Expedited core issues handling revision ") > >() },
    { "n2731", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Proposed Text for Bidirectional Fences") > >() },
    { "n2732", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Extension for the programming language C to support decimal floatingpoint arithmetic") > >() },
    { "n2733", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Appendix C ISO C  Compatibility") > >() },
    { "n2734", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2735", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2736", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Numerics Revision ") > >() },
    { "n2737", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Foundational Concepts for the Cx Standard Library Revision ") > >() },
    { "n2738", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("Pablo Halpern") >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2739", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2740", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2741", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2742", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Simplifying unique copy") > >() },
    { "n2743", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Unifying Operator and FunctionObject Variants of Standard Library Algorithms") > >() },
    { "n2744", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Comments on Asynchronous Future Value Proposal") > >() },
    { "n2745", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney"), Hash("R. Silvera") >(), wxS("Example POWER Implementation for CC Memory Model") > >() },
    { "n2746", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Rationale for the C working paper definition of memory location") > >() },
    { "n2747", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Ambiguity and Insecurity with UserDefined Literals") > >() },
    { "n2748", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Strong Compare and Exchange") > >() },
    { "n2749", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Lawrence Crowl") >(), wxS("Not so Trivial Issues with Trivial") > >() },
    { "n2750", 0u, RevList< Rev< 0u, ArrHash< Hash("I. McIntosh"), Hash("Michael Wong"), Hash("R. Mak"), Hash("Robert Klarer") >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2751", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2752", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Peter Dimov") >(), wxS("Proposed Text for Bidirectional Fences") > >() },
    { "n2753", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Stephen Adamczyk") >(), wxS("March  meeting information") > >() },
    { "n2754", 0u, RevList< Rev< 0u, ArrHash< Hash("Rodrigo Castro Campos") >(), wxS("Additional concepts TriviallyDestructibleAfterMove and TriviallyReallocatable") > >() },
    { "n2755", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Beman Dawes"), Hash("Douglas Gregor"), Hash("J. Willcock") >(), wxS("Concepts for the Cx Standard Library Chapter  Introduction Revision ") > >() },
    { "n2756", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Michael Spertus") >(), wxS("Nonstatic data member initializers") > >() },
    { "n2757", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("William M. (Mike) Miller") >(), wxS("Expedited core issues handling revision ") > >() },
    { "n2758", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("Jeremy Siek") >(), wxS("Iterator Concepts for the Cx Standard Library Revision ") > >() },
    { "n2759", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Concepts for the Cx Standard Library Algorithms Revision ") > >() },
    { "n2760", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("InputOutput Library Thread Safety") > >() },
    { "n2761", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong") >(), wxS("Towards support for attributes in C Revision ") > >() },
    { "n2762", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Lawrence Crowl"), Hash("William M. (Mike) Miller") >(), wxS("Not so Trivial Issues with Trivial") > >() },
    { "n2763", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2764", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("Forward declaration of enumerations rev ") > >() },
    { "n2765", 0u, RevList< Rev< 0u, ArrHash< Hash("I. McIntosh"), Hash("Michael Wong"), Hash("R. Mak"), Hash("Robert Klarer") >(), wxS("Userdefined Literals aka Extensible Literals revision ") > >() },
    { "n2768", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocator Concepts part  revision ") > >() },
    { "n2769", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Detailed Reporting for InputOutput Library Errors Revision ") > >() },
    { "n2770", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Utilities Revision ") > >() },
    { "n2771", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("LWG Issues") > >() },
    { "n2772", 0u, RevList< Rev< 0u, ArrHash< Hash("Lo\\u00efc Joly"), Hash("Robert Klarer") >(), wxS("Variadic functions Variadic templates or initializer lists  Revision ") > >() },
    { "n2773", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Douglas Gregor"), Hash("James Widman"), Hash("Jeremy Siek") >(), wxS("Proposed Wording for Concepts Revision ") > >() },
    { "n2774", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("T. Witt") >(), wxS("Foundational Concepts for the Cx Standard Library Revision ") > >() },
    { "n2775", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Hans J. Boehm") >(), wxS("Small library threadsafety revisions") > >() },
    { "n2776", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("M. Marcus"), Hash("Pablo Halpern") >(), wxS("Concepts for the Cx Standard Library Containers Revision ") > >() },
    { "n2777", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Douglas Gregor") >(), wxS("Concepts for the Cx Standard Library Iterators Revision ") > >() },
    { "n2778", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Wording for rangebased forloop revision ") > >() },
    { "n2779", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Concepts for Clause  Part ") > >() },
    { "n2780", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("C. Jefferson"), Hash("James Widman"), Hash("Walter E. Brown") >(), wxS("Named Requirements for CX Concepts version ") > >() },
    { "n2781", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Concepts for Random Number Generation in CX") > >() },
    { "n2782", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Paul E. McKenney") >(), wxS("C DataDependency Ordering Function Annotation") > >() },
    { "n2783", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Collected Issues with Atomics") > >() },
    { "n2784", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of WG Meeting September  ") > >() },
    { "n2785", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of PL Meeting September  ") > >() },
    { "n2786", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("Simplifying unique copy Revision ") > >() },
    { "n2791", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2792", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2793", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2794", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2795", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2796", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2797", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  March   Summit NJ") > >() },
    { "n2798", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2799", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2800", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Programming Languages  C") > >() },
    { "n2801", 0u, RevList< Rev< 0u, ArrHash< Hash("Rodrigo Castro Campos") >(), wxS("Initializer lists and move semantics") > >() },
    { "n2802", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("A plea to reconsider detachondestruction for thread objects") > >() },
    { "n2803", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2804", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2805", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2806", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2807", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2808", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2809", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Support for hybrid error handling") > >() },
    { "n2810", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Defects and Proposed Resolutions for Allocator Concepts") > >() },
    { "n2811", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Sylvain Pion") >(), wxS("Directed Rounding Arithmetic Operations") > >() },
    { "n2812", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("A Safety Problem with RValue References and what to do about it") > >() },
    { "n2813", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Issue Resolutions for Conceptenabled Random Number Generation in CX") > >() },
    { "n2814", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Tasker") >(), wxS("Fixing freestanding") > >() },
    { "n2815", 0u, RevList< Rev< 0u, ArrHash< Hash("Rani Sharoni") >(), wxS("Improving the standard librarys exception specifications") > >() },
    { "n2816", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2817", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2818", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2819", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Niels Dekker") >(), wxS("Refqualifiers for assignment operators of the Standard Library") > >() },
    { "n2820", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("Adding heterogeneous comparison lookup to associative containers") > >() },
    { "n2821", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2822", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2823", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2824", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  July   Frankfurt Germany") > >() },
    { "n2825", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2826", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("William M. (Mike) Miller") >(), wxS("Issues with Constexpr") > >() },
    { "n2827", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Nick Stoughton"), Hash("P.J. Plauger") >(), wxS("Thread Unsafe Standard Functions") > >() },
    { "n2828", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Support for Hybrid Error Handling Rev ") > >() },
    { "n2829", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Defects and Proposed Resolutions for Allocator Concepts Rev ") > >() },
    { "n2830", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Douglas Gregor"), Hash("John H. Spicer") >(), wxS("Problems with referenceclosure") > >() },
    { "n2831", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("Fixing a Safety Problem with Rvalue References Proposed Wording") > >() },
    { "n2832", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Concepts and Refqualifiers") > >() },
    { "n2834", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Several Proposals to Simplify pair") > >() },
    { "n2835", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("forward") > >() },
    { "n2836", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Wording Tweaks for Conceptenabled Random Number Generation in CX") > >() },
    { "n2837", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("CX CD  National Body Comments") > >() },
    { "n2838", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Library Support for Hybrid Error Handling Rev ") > >() },
    { "n2839", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Response to Problems with referenceclosure") > >() },
    { "n2840", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Defects and Proposed Resolutions for Allocator Concepts Rev ") > >() },
    { "n2841", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Consolidated QuasiEditorial Changes for National Body Comments Concerning the Core Language") > >() },
    { "n2842", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Another numeric facet") > >() },
    { "n2843", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("Pack Expansion and Attributes") > >() },
    { "n2844", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("Fixing a Safety Problem with Rvalue References Proposed Wording Revision ") > >() },
    { "n2845", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor"), Hash("Lawrence Crowl") >(), wxS("Remove stdreferenceclosure") > >() },
    { "n2847", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n2848", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n2849", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Extension for the programming language C to support decimal floatingpoint arithmetic") > >() },
    { "n2850", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Extensions to the C Library to Support Mathematical Special Functions") > >() },
    { "n2851", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Changes to the Decimal TR since the PDTR Ballot") > >() },
    { "n2852", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("C. Uzdavinis"), Hash("Jens Maurer"), Hash("Ville Voutilainen") >(), wxS("Explicit Virtual Overrides") > >() },
    { "n2853", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Constraining uniqueptr") > >() },
    { "n2855", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("Rvalue References and Exception Safety") > >() },
    { "n2857", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2858", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2859", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("New wording for Cx Lambdas") > >() },
    { "n2860", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2861", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2862", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2863", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status") > >() },
    { "n2864", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Nick Stoughton"), Hash("P.J. Plauger") >(), wxS("Thread Unsafe Standard Functions") > >() },
    { "n2866", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2867", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2868", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2869", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("State of C Evolution Post San Francisco ") > >() },
    { "n2870", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Library Working Group Status Report Post San Francisco ") > >() },
    { "n2871", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Summary of Cx Standard  CD ") > >() },
    { "n2872", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Ensuring Certain Cx Features just work") > >() },
    { "n2873", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2874", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2875", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2876", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Sylvain Pion") >(), wxS("Directed Rounding Arithmetic Operations Revision ") > >() },
    { "n2877", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2878", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2879", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2880", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Lawrence Crowl") >(), wxS("C object lifetime interactions with the threads API") > >() },
    { "n2881", 0u, RevList< Rev< 0u, ArrHash< Hash("James Widman"), Hash("Thorsten Ottosen") >(), wxS("Base Class Aliases for TheCAfterx") > >() },
    { "n2882", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("Adding heterogeneous comparison lookup to associative containers for TR Rev ") > >() },
    { "n2883", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Report of the htmhtmhtm Batavia Meeting") > >() },
    { "n2884", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Cx Stream Positioning") > >() },
    { "n2886", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Tasker") >(), wxS("Fixing freestanding iteration ") > >() },
    { "n2887", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Axioms Semantics Aspects of C Concepts") > >() },
    { "n2888", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Moving Futures  Proposed Wording for UK comments    and ") > >() },
    { "n2889", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("An Asynchronous Call for C") > >() },
    { "n2890", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2891", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  October   Santa Cruz California") > >() },
    { "n2892", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Some Concerns About Axioms") > >() },
    { "n2893", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Tasker") >(), wxS("The long pole gets longer") > >() },
    { "n2894", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2895", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2896", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2898", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status") > >() },
    { "n2899", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Melquiond"), Hash("Sylvain Pion") >(), wxS("Directed Rounding Arithmetic Operations Revision ") > >() },
    { "n2900", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Ensuring Certain Cx Features just work  Revision ") > >() },
    { "n2901", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A simple async") > >() },
    { "n2902", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n2903", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("New wording for Cx Lambdas") > >() },
    { "n2904", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Defining default copy and move") > >() },
    { "n2905", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Aggregation headers") > >() },
    { "n2906", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Simplifying the use of concepts") > >() },
    { "n2907", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Managing the lifetime of threadlocal variables with contexts") > >() },
    { "n2908", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Pablo Halpern") >(), wxS("Several Proposals to Simplify pair Rev ") > >() },
    { "n2909", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Specifying the complexity of size") > >() },
    { "n2910", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("I. McIntosh"), Hash("Michael Wong"), Hash("Robert Klarer") >(), wxS("Comment on Proposed Trigraph Deprecation") > >() },
    { "n2911", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("D. Bacon"), Hash("D. Tsafrir"), Hash("R. Wisniewksi") >(), wxS("Minimizing Dependencies within Generic Classes for Faster and Smaller Programs") > >() },
    { "n2913", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("D. Tsafrir"), Hash("Michael Wong"), Hash("Robert Klarer") >(), wxS("SCARY Iterator Assignment and Initialization") > >() },
    { "n2914", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2915", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2916", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("David Abrahams") >(), wxS("Intentional Concept Mapping") > >() },
    { "n2917", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("N Distilled and a New Issue With Function Statics") > >() },
    { "n2918", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor") >(), wxS("Exported Concept Maps") > >() },
    { "n2919", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Ville Voutilainen") >(), wxS("Concept mapping unconstrained templates") > >() },
    { "n2920", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of WG Meeting July  ") > >() },
    { "n2921", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Klarer") >(), wxS("Minutes of PL Meeting July  ") > >() },
    { "n2923", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Specifying the complexity of sizeRevision ") > >() },
    { "n2924", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("ImplicitlyDeleted Special Member Functions") > >() },
    { "n2925", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("More Collected Issues with Atomics") > >() },
    { "n2926", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Cx Stream Positioning  Revision ") > >() },
    { "n2927", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("New wording for Cx Lambdas rev ") > >() },
    { "n2928", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("C. Uzdavinis"), Hash("Jens Maurer"), Hash("Ville Voutilainen") >(), wxS("Explicit Virtual Overrides") > >() },
    { "n2929", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("LWG Papers to ReMerge into Cx After Removing Concepts") > >() },
    { "n2930", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Douglas Gregor") >(), wxS("RangeBased For Loop Wording Without Concepts") > >() },
    { "n2931", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2932", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Tasker") >(), wxS("Fixing freestanding iteration ") > >() },
    { "n2933", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jens Maurer") >(), wxS("Pack Expansion and Attributes") > >() },
    { "n2935", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Fall  WG Meeting Information") > >() },
    { "n2936", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2937", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2938", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2939", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n2940", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2941", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2942", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2943", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocators without Concepts preview") > >() },
    { "n2944", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Equality Comparison for Unordered Containers") > >() },
    { "n2945", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n2946", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocators post Removal of C Concepts") > >() },
    { "n2947", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Beman Dawes"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Additional Type Traits for Cx") > >() },
    { "n2948", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n2949", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n2950", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n2951", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("forward") > >() },
    { "n2952", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Accessing current exception during unwinding") > >() },
    { "n2953", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Lawrence Crowl") >(), wxS("Defining Move Special Member Functions") > >() },
    { "n2954", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2955", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Batty") >(), wxS("Comments on the C Memory Model Following a Partial Formalization Attempt") > >() },
    { "n2956", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Seacord") >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n2957", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Reaching Scope of Lambda Expressions") > >() },
    { "n2958", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Moving Swap Forward") > >() },
    { "n2959", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Managing the lifetime of threadlocal variables with contexts Revision ") > >() },
    { "n2960", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n2961", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n2962", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n2963", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n2964", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n2965", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Type traits and base classes") > >() },
    { "n2967", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Detlef Vollmann") >(), wxS("Issues on Futures") > >() },
    { "n2969", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Background for issue  Clocks and Condition Variables") > >() },
    { "n2970", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A simple async revision ") > >() },
    { "n2971", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  decltype name qualifiers") > >() },
    { "n2972", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Attribute nothrow") > >() },
    { "n2973", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("An Asynchronous Call for C") > >() },
    { "n2974", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("An Analysis of Async and Futures") > >() },
    { "n2975", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Collected Issues for Tuples") > >() },
    { "n2976", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("constexpr in the library take ") > >() },
    { "n2977", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Pairs do not make good ranges") > >() },
    { "n2978", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Replacing Trigraphs") > >() },
    { "n2979", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Moving Swap Forward revision ") > >() },
    { "n2980", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("D. Tsafrir"), Hash("Michael Wong"), Hash("Robert Klarer") >(), wxS("SCARY Iterator Assignment and Initialization Revision ") > >() },
    { "n2981", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n2982", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocators post Removal of C Concepts Rev ") > >() },
    { "n2983", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor"), Hash("Rani Sharoni") >(), wxS("Allowing Move Constructors to Throw") > >() },
    { "n2984", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Beman Dawes"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Additional Type Traits for Cx Revision ") > >() },
    { "n2985", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C and C Thread Compatibility") > >() },
    { "n2986", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Equality Comparison for Unordered Containers") > >() },
    { "n2987", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Lawrence Crowl") >(), wxS("Defining Move Special Member Functions") > >() },
    { "n2988", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("LWG Issue  and other small changes to forwardlist") > >() },
    { "n2989", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Unified Function Syntax") > >() },
    { "n2990", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Fixing Raw Strings wrt Trigraphs") > >() },
    { "n2991", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  decltype name qualifiers") > >() },
    { "n2992", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("More Collected Issues with Atomics") > >() },
    { "n2993", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Expanding the meaning of variable") > >() },
    { "n2994", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("constexpr in the library take ") > >() },
    { "n2995", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Pairs do not make good ranges") > >() },
    { "n2996", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Lawrence Crowl") >(), wxS("A Simple Asynchronous Call") > >() },
    { "n2997", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Detlef Vollmann") >(), wxS("Issues on Futures Rev ") > >() },
    { "n2998", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Reaching Scope of Lambda Expressions") > >() },
    { "n2999", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Background for issue  Clocks and Condition Variables Rev ") > >() },
    { "n3000", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3001", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3002", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Gaussian Integers in the Standard Library") > >() },
    { "n3003", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting October  ") > >() },
    { "n3004", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting October  ") > >() },
    { "n3006", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3007", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3008", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3009", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3010", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Rvalue References as Funny Lvalues") > >() },
    { "n3011", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3012", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3013", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3014", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  March   Pittsburgh PA") > >() },
    { "n3015", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Fall  WG Meeting Information") > >() },
    { "n3016", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("SUMMER  JTCSCWG C STANDARDS COMMITTEE MEETING") > >() },
    { "n3017", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting ") > >() },
    { "n3018", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3019", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3020", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3021", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Harmonizing Effects and Returns Elements in Clause ") > >() },
    { "n3023", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Defaulting nonpublic special member functions on first declaration") > >() },
    { "n3024", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n3025", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Specifying PointerLike Requirements") > >() },
    { "n3026", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3027", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3028", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3029", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3030", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Rvalue References as Funny Lvalues") > >() },
    { "n3031", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issues  and  Additional decltype uses") > >() },
    { "n3032", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Explicit specialization outside a templates parent") > >() },
    { "n3033", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Various Attribute Issues") > >() },
    { "n3034", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Disambiguating ") > >() },
    { "n3035", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3036", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3037", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Conceptless Random Number Generation in CX") > >() },
    { "n3038", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Managing the lifetime of threadlocal variables with contexts Revision ") > >() },
    { "n3039", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Constexpr functions with const reference parameters a summary") > >() },
    { "n3040", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Various threads issues in the library LWG ") > >() },
    { "n3041", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Futures and Async Cleanup") > >() },
    { "n3042", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Renaming launchany and what asyncs really might be") > >() },
    { "n3043", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Converting Lambdas to Function Pointers") > >() },
    { "n3044", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Lawrence Crowl") >(), wxS("Defining Move Special Member Functions") > >() },
    { "n3045", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Updates to C Memory Model Based on Formalization") > >() },
    { "n3046", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Iterators in Cx") > >() },
    { "n3047", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Fixing isconstructible and isexplicitlyconvertible") > >() },
    { "n3048", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Michael Spertus"), Hash("Stefanus du Toit"), Hash("Walter E. Brown") >(), wxS("Defining Swappable Requirements") > >() },
    { "n3049", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issues  and  Additional decltype uses revision ") > >() },
    { "n3050", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Douglas Gregor"), Hash("Rani Sharoni") >(), wxS("Allowing Move Constructors to Throw Rev ") > >() },
    { "n3051", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Deprecating Exception Specifications") > >() },
    { "n3052", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Lawrence Crowl") >(), wxS("Converting Lambdas to Function Pointers") > >() },
    { "n3053", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Lawrence Crowl") >(), wxS("Defining Move Special Member Functions") > >() },
    { "n3054", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision D") > >() },
    { "n3055", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("A Taxonomy of Expression Value Categories") > >() },
    { "n3056", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Conceptless Random Number Generation in CX version ") > >() },
    { "n3057", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Explicit Initializers for Atomics") > >() },
    { "n3058", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Futures and Async Cleanup Rev") > >() },
    { "n3059", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Proposal to Simplify pair rev ") > >() },
    { "n3060", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Extensions to the C Library to Support Mathematical Special Functions") > >() },
    { "n3061", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Record of Response") > >() },
    { "n3062", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Fixing Raw Strings wrt Trigraphs revision ") > >() },
    { "n3063", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Disambiguating  revision ") > >() },
    { "n3064", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Explicit specialization outside a templates parent revision ") > >() },
    { "n3065", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Removing Export") > >() },
    { "n3066", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Iterators in Cx") > >() },
    { "n3067", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Core issue  Various Attribute Issues revision ") > >() },
    { "n3068", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Equality Comparison for Unordered Containers Rev ") > >() },
    { "n3069", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Various threads issues in the library LWG ") > >() },
    { "n3070", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Handling Detached Threads and threadlocal Variables") > >() },
    { "n3071", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Renaming launchany and what asyncs really might be Rev") > >() },
    { "n3072", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Sebor") >(), wxS("Harmonizing Effects and Returns Elements in Clause ") > >() },
    { "n3073", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Walter E. Brown") >(), wxS("Specifying PointerLike Requirements Revision ") > >() },
    { "n3074", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Updates to C Memory Model Based on Formalization") > >() },
    { "n3075", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("CX CD  National Body Comments and Responses") > >() },
    { "n3076", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("SUMMER  JTCSCWG C STANDARDS COMMITTEE MEETING REVISION ") > >() },
    { "n3077", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Alternative approach to Raw String issues") > >() },
    { "n3078", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Constexpr functions with reference parameters") > >() },
    { "n3079", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill"), Hash("John H. Spicer") >(), wxS("Redrafting issues    ") > >() },
    { "n3080", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n3081", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n3082", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Cx Meeting Schedule") > >() },
    { "n3083", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3084", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3085", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3086", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3087", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3088", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3089", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3090", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3091", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3092", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Programming Languages  C") > >() },
    { "n3093", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3094", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting March   Revision  ") > >() },
    { "n3095", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting March   Revision ") > >() },
    { "n3096", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  August   Rapperswil Switzerland") > >() },
    { "n3097", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3101", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3102", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC FCD  CX National Body Comments") > >() },
    { "n3103", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Wesie"), Hash("D. Kohlbrenner"), Hash("David Svoboda") >(), wxS("Security impact of noexcept") > >() },
    { "n3104", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3105", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report ISOIEC JTCSCWG C") > >() },
    { "n3106", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Proposed Resolution for US  Revision of N and Issue  to adopt it into the Standard") > >() },
    { "n3108", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Proposed Resolution for US  Smallstring optimization not possible with current swap specification") > >() },
    { "n3109", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("US ") > >() },
    { "n3110", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Problems with bitmask types in the library") > >() },
    { "n3111", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3112", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Proposed Resolution for CH  Double check copy and move semantics of classes due to new rules for default move constructors and assignment operators") > >() },
    { "n3113", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Async Launch Policies CH ") > >() },
    { "n3114", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("throw becomes noexcept") > >() },
    { "n3115", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3116", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3117", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3118", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C FCD Comment Status") > >() },
    { "n3119", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting August  ") > >() },
    { "n3120", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting August  ") > >() },
    { "n3121", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3122", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Observers for the three handler functions") > >() },
    { "n3123", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Bringing resultof near to INVOKE") > >() },
    { "n3124", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Lawrence Crowl") >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3125", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Mark Batty"), Hash("Paul E. McKenney") >(), wxS("Omnibus Memory Model and Atomics Paper") > >() },
    { "n3126", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3127", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3128", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Timeout Specification") > >() },
    { "n3129", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Managing C Associated Asynchronous State") > >() },
    { "n3130", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Lockable requirements for Cx") > >() },
    { "n3131", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Compiletime rational arithmetic and overflow") > >() },
    { "n3132", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Batty"), Hash("Peter Sewell"), Hash("S. Sarkar"), Hash("Scott Owens"), Hash("T. Weber") >(), wxS("Mathematizing C Concurrency The PostRapperswil Model") > >() },
    { "n3133", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3134", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3135", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3136", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Mark Batty"), Hash("Michael Wong") >(), wxS("Coherence Requirements Detailed") > >() },
    { "n3137", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C and C Liaison Compatibility for Atomics") > >() },
    { "n3138", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  Novermber   Batavia IL") > >() },
    { "n3139", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("An Incomplete Language Feature") > >() },
    { "n3140", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Cleanup of pair and tuple") > >() },
    { "n3141", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC FCD  CX National Body Comments") > >() },
    { "n3142", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Gabriel Dos Reis"), Hash("Howard E. Hinnant"), Hash("Jason Merrill") >(), wxS("Adjustments to constructor and assignment traits") > >() },
    { "n3143", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Howard E. Hinnant") >(), wxS("Proposed wording for US ") > >() },
    { "n3144", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Wording for US ") > >() },
    { "n3145", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Deprecating unaryfunction and binaryfunction") > >() },
    { "n3146", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Recommendations for extended identifier characters for C and C") > >() },
    { "n3148", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("throw becomes noexcept Version ") > >() },
    { "n3149", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("From Throws Nothing to noexcept") > >() },
    { "n3150", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Removing nonempty dynamic exception specifications from the library") > >() },
    { "n3151", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Keywords for override control") > >() },
    { "n3152", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Pablo Halpern") >(), wxS("Progress guarantees for Cx US  and US ") > >() },
    { "n3153", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams") >(), wxS("Implicit Move Must Go") > >() },
    { "n3154", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("US  Ambiguous use of use") > >() },
    { "n3155", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the language support library") > >() },
    { "n3156", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the diagnostics library") > >() },
    { "n3157", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the General Utilities Library") > >() },
    { "n3158", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Missing preconditions for defaultconstructed matchresult objects") > >() },
    { "n3159", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3160", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3161", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3162", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3163", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Override Control Using Contextual Keywords") > >() },
    { "n3164", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Adjusting C Atomics for C Compatibility") > >() },
    { "n3165", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocator Requirements Alternatives to US") > >() },
    { "n3166", 0u, RevList< Rev< 0u, ArrHash< Hash("David Svoboda") >(), wxS("Destructors default to noexcept") > >() },
    { "n3167", 0u, RevList< Rev< 0u, ArrHash< Hash("David Svoboda") >(), wxS("Delete operators default to noexcept") > >() },
    { "n3168", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("Problems with Iostreams Member Functions Amended from US ") > >() },
    { "n3169", 0u, RevList< Rev< 0u, ArrHash< Hash("P.J. Plauger") >(), wxS("A Few Small Library Issues") > >() },
    { "n3170", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Howard E. Hinnant"), Hash("Lawrence Crowl") >(), wxS("Clarifying C Futures") > >() },
    { "n3171", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Proposed resolution for US Allocatoraware regular expressions") > >() },
    { "n3172", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Allocators for stringstream US") > >() },
    { "n3173", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Terminology for constructing container elements US") > >() },
    { "n3174", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("To move or not to move") > >() },
    { "n3175", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3176", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3177", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3178", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("emplace Broken for Associative Containers") > >() },
    { "n3179", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move and swap for IO streams US") > >() },
    { "n3180", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the Strings Library") > >() },
    { "n3181", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3182", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3183", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3186", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Appendix C ISO C  Compatibility Revision ") > >() },
    { "n3187", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the Containers Library") > >() },
    { "n3188", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Revision to N Async Launch Policies CH ") > >() },
    { "n3189", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Observers for the three handler functions") > >() },
    { "n3190", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Lawrence Crowl") >(), wxS("C and C Alignment Compatibility") > >() },
    { "n3191", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Timeout Specification") > >() },
    { "n3192", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Managing C Associated Asynchronous State") > >() },
    { "n3193", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Adjusting C Atomics for C Compatibility") > >() },
    { "n3194", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Howard E. Hinnant"), Hash("Lawrence Crowl") >(), wxS("Clarifying C Futures") > >() },
    { "n3195", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("From Throws Nothing to noexcept version ") > >() },
    { "n3196", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Mark Batty"), Hash("Paul E. McKenney") >(), wxS("Omnibus Memory Model and Atomics Paper") > >() },
    { "n3197", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Lockable requirements for Cx") > >() },
    { "n3198", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Deprecating unaryfunction and binaryfunction Revision ") > >() },
    { "n3199", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the General Utilities Library version ") > >() },
    { "n3201", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Moving right along") > >() },
    { "n3202", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("To which extent can noexcept be deduced") > >() },
    { "n3203", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Tightening the conditions for generating implicit moves") > >() },
    { "n3204", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Deducing noexcept for destructors") > >() },
    { "n3205", 0u, RevList< Rev< 0u, ArrHash< Hash("David Svoboda") >(), wxS("Delete operators default to noexcept") > >() },
    { "n3206", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Mark Hall"), Hash("Ville Voutilainen") >(), wxS("Override control Eliminating Attributes") > >() },
    { "n3207", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("noexceptauto") > >() },
    { "n3208", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Library Working group Issues resolved in Batavia") > >() },
    { "n3209", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Pablo Halpern") >(), wxS("Progress guarantees for Cx US  and US revised") > >() },
    { "n3210", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("New wording for arithmetic on ratios") > >() },
    { "n3211", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3212", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting November  ") > >() },
    { "n3213", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting November  ") > >() },
    { "n3214", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("US  Ambiguous use of use version ") > >() },
    { "n3215", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Fixing LWG  Explicit CopyConstructible requirements are insufficient") > >() },
    { "n3216", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Jason Merrill") >(), wxS("Removing Implicit Move Constructors and Move Assignment Operators") > >() },
    { "n3217", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Wording for braceinitializers as default arguments") > >() },
    { "n3218", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Unclear definition of potential constant expression DE  GB ") > >() },
    { "n3220", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  March   Madrid Spain") > >() },
    { "n3221", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3222", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3223", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3224", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3225", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3226", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3227", 0u, RevList< Rev< 0u, ArrHash< Hash("Thorsten Ottosen") >(), wxS("Please reconsider noexcept") > >() },
    { "n3228", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Constexpr Library Additions complex") > >() },
    { "n3229", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Constexpr Library Additions chrono") > >() },
    { "n3230", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Constexpr Library Additions future") > >() },
    { "n3231", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Constexpr Library Additions supportutilities") > >() },
    { "n3232", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3233", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Eric A Niebler"), Hash("James Widman") >(), wxS("USDE Revisited Decltype and Call Expressions") > >() },
    { "n3234", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Remove explicit from classhead") > >() },
    { "n3235", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Generalized pointer casts") > >() },
    { "n3236", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3237", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3238", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3239", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Update for TR Preliminary") > >() },
    { "n3240", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3241", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("CH and US Clarifying the state of movedfrom objects") > >() },
    { "n3242", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3243", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors Report") > >() },
    { "n3244", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("R. Lowe") >(), wxS("WG C Standards Committee Meeting Summer ") > >() },
    { "n3245", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3246", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3247", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3248", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos") >(), wxS("noexcept Prevents Library Validation") > >() },
    { "n3249", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3250", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("US Removing UserDefined Literals") > >() },
    { "n3251", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Wong") >(), wxS("noexcept for the Atomics Library") > >() },
    { "n3252", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Wong") >(), wxS("A review of noexcept in the threads library") > >() },
    { "n3253", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Tweak Certain C Contextual Conversions") > >() },
    { "n3254", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Proposed resolution for US Allocatoraware regular expressions rev ") > >() },
    { "n3255", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Lawrence Crowl") >(), wxS("C Decay Copy") > >() },
    { "n3256", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati"), Hash("Lawrence Crowl") >(), wxS("C Freestanding and Conditionally Supported") > >() },
    { "n3257", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Jonathan Wakely") >(), wxS("Rangebased for statements and ADL") > >() },
    { "n3258", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("US Removing Inheriting Constructors") > >() },
    { "n3259", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Globalscope  in elaboratedtypespecifier") > >() },
    { "n3260", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Consolidated corrections for a cluster of constexpr concerns") > >() },
    { "n3261", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3262", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Additional Core Language Issue Resolutions for Madrid") > >() },
    { "n3263", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("More on noexcept for the Containers Library revision") > >() },
    { "n3264", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("CH and US Clarifying the state of movedfrom objects Revision ") > >() },
    { "n3265", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  August   Bloomington IN") > >() },
    { "n3266", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Revision  of Proposed Resolution for CH  Double check copy and move semantics of classes due to new rules for default move constructors and assignment operators") > >() },
    { "n3267", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Wong") >(), wxS("A review of noexcept in the threads library revised") > >() },
    { "n3268", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("staticassert and listinitialization in constexpr functions") > >() },
    { "n3269", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("sharedfuturefutureR rhs should be allowed to throw") > >() },
    { "n3270", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Variadic Templates Wording for Core Issues   and ") > >() },
    { "n3271", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Wording for RangeBased For Loop Option ") > >() },
    { "n3272", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Followup on override control") > >() },
    { "n3273", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3274", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of WG Meeting March  ") > >() },
    { "n3275", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Minutes of PL Meeting March  ") > >() },
    { "n3276", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Eric A Niebler"), Hash("James Widman") >(), wxS("USDE Revisited Decltype and Call Expressions") > >() },
    { "n3277", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core issues  References and constexpr") > >() },
    { "n3278", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Recent Concurrency Issue Resolutions") > >() },
    { "n3279", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos") >(), wxS("Conservative use of noexcept in the Library") > >() },
    { "n3280", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati"), Hash("Lawrence Crowl") >(), wxS("C Freestanding and Conditionally Supported") > >() },
    { "n3281", 0u, RevList< Rev< 0u, ArrHash< Hash("James Widman") >(), wxS(" Partial ordering of variadic class template partial specializations") > >() },
    { "n3282", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("James Widman") >(), wxS("Resolution for core issues  and ") > >() },
    { "n3283", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Dependent Bases and the Current Instantiation Wording for Core Issue ") > >() },
    { "n3284", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Madrid Resolutions") > >() },
    { "n3285", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3286", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3287", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3288", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik") >(), wxS("Appendix C ISO C  Compatibility Revision ") > >() },
    { "n3289", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC FCD  CX Responses to National Body Comments") > >() },
    { "n3290", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Programming Languages  C") > >() },
    { "n3291", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3292", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Editors report") > >() },
    { "n3293", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3294", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3295", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3296", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("William M. (Mike) Miller") >(), wxS("C FCD Comment Status Rev ") > >() },
    { "n3297", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC FCD  CX Responses to National Body Comments Rev ") > >() },
    { "n3298", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Conveners report") > >() },
    { "n3299", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Thomas Plum") >(), wxS("February  Meeting") > >() },
    { "n3300", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3301", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Defect Report Terminology for Container Element Requirements") > >() },
    { "n3302", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler"), Hash("Gabriel Dos Reis") >(), wxS("Constexpr Library Additions complex v") > >() },
    { "n3303", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions chrono v") > >() },
    { "n3304", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions containers") > >() },
    { "n3305", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions utilities v") > >() },
    { "n3306", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Tweak Certain C Contextual Conversions v") > >() },
    { "n3307", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Majnemer"), Hash("Logan R. Smith"), Hash("S. Hunt"), Hash("S. Redl") >(), wxS("Issues Found Implementing Cx") > >() },
    { "n3308", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor"), Hash("Logan R. Smith") >(), wxS("constexpr consternation") > >() },
    { "n3309", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3310", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3311", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3312", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3313", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3314", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3315", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No  WG Meeting No   August  Bloomington Indiana USA") > >() },
    { "n3316", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No  WG Meeting No   August  Bloomington Indiana USA") > >() },
    { "n3317", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  February   Kona Hawaii") > >() },
    { "n3318", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3319", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3320", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3321", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for Upcoming WG Telecon Meetings") > >() },
    { "n3322", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Preliminary Proposal for a Static if") > >() },
    { "n3323", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal to Tweak Certain C Contextual Conversions v") > >() },
    { "n3324", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Terminology indirection versus dereference") > >() },
    { "n3325", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("HTML for C Standards Documents") > >() },
    { "n3326", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Sequential access to data members and base subobjects") > >() },
    { "n3327", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Niklas Gustafsson") >(), wxS("A Standard Programmatic Interface for Asynchronous Operations") > >() },
    { "n3328", 0u, RevList< Rev< 0u, ArrHash< Hash("Niklas Gustafsson") >(), wxS("Resumable Functions") > >() },
    { "n3329", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Herb Sutter"), Hash("W. Bright") >(), wxS("Proposal static if declaration") > >() },
    { "n3330", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3331", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3332", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3333", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Jeffrey Yasskin") >(), wxS("Hashing UserDefined Types in Cy") > >() },
    { "n3334", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Proposing arrayrefT and stringref") > >() },
    { "n3335", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library for CTR Revision ") > >() },
    { "n3336", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Adapting Standard Library Strings and IO to a Unicode World") > >() },
    { "n3337", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3338", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Editors Report") > >() },
    { "n3339", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Preliminary Proposal for a DeepCopying Smart Pointer") > >() },
    { "n3340", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("Rich Pointers") > >() },
    { "n3341", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("J. Gottschlich"), Hash("Michael Wong"), Hash("T. Shpeisman") >(), wxS("Transactional Language Constructs for C") > >() },
    { "n3342", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Digit Separators coming back") > >() },
    { "n3343", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Portland meeting information") > >() },
    { "n3344", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos"), Hash("S. Pacifico") >(), wxS("Toward a Standard C Date Class") > >() },
    { "n3345", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva"), Hash("Stefanus du Toit") >(), wxS("C Language Constructs for Parallel Programming") > >() },
    { "n3346", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Defect Report Terminology for Container Element Requirements  Rev ") > >() },
    { "n3347", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Modules in C Revision ") > >() },
    { "n3348", 0u, RevList< Rev< 0u, ArrHash< Hash("Nikhil Joshi") >(), wxS("Scoping of operator new") > >() },
    { "n3349", 0u, RevList< Rev< 0u, ArrHash< Hash("Nikhil Joshi") >(), wxS("Ease of using namespaces") > >() },
    { "n3350", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("A minimal stdrangeIter") > >() },
    { "n3351", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup") >(), wxS("A Concept Design for the STL") > >() },
    { "n3352", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Binary FixedPoint Arithmetic") > >() },
    { "n3353", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") > >() },
    { "n3354", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Stream Mutexes") > >() },
    { "n3355", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") > >() },
    { "n3356", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen") >(), wxS("C Mutable Threads") > >() },
    { "n3357", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3358", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3359", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3360", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Status Report") > >() },
    { "n3361", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva"), Hash("Stefanus du Toit") >(), wxS("C Language Constructs for Parallel Programming") > >() },
    { "n3362", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Terminology indirection versus dereference revision ") > >() },
    { "n3363", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") > >() },
    { "n3365", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3366", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays with automatic storage duration") > >() },
    { "n3367", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3368", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3369", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3370", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Call for Library Proposals") > >() },
    { "n3371", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Status List for Library Proposals") > >() },
    { "n3373", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  October    Portland Oregon") > >() },
    { "n3374", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper"), Hash("Neal Meyer") >(), wxS("SG Networking") > >() },
    { "n3375", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3376", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3377", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("C Editors Report February ") > >() },
    { "n3378", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Chris Mysen"), Hash("Jeffrey Yasskin"), Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("A preliminary proposal for work executors") > >() },
    { "n3379", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3380", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Meeting No   February  Kona Hawaii USA") > >() },
    { "n3381", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No   February  Kona Hawaii USA") > >() },
    { "n3382", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3383", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports Revision ") > >() },
    { "n3384", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3386", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Return type deduction for normal functions") > >() },
    { "n3387", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Overload resolution tiebreakers for integer types") > >() },
    { "n3388", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Using Asio with C") > >() },
    { "n3389", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Urdl a simple library for accessing web content") > >() },
    { "n3390", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Kevlin Henney") >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3391", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Stefanus du Toit") >(), wxS("ISO C SG Meeting Minutes for May ") > >() },
    { "n3392", 0u, RevList< Rev< 0u, ArrHash< Hash("Neal Meyer") >(), wxS("Minutes WGSG Meeting  May  Redmond Washington USA") > >() },
    { "n3393", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n3394", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("deprecated attribute") > >() },
    { "n3395", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Stream Mutexes") > >() },
    { "n3396", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") > >() },
    { "n3397", 0u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr") >(), wxS("Spring  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3398", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("String Interoperation Library") > >() },
    { "n3399", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3400", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan de Boyne Pollard") >(), wxS("A proposal for eliminating the underscore madness that library writers have to suffer") > >() },
    { "n3401", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Generating move operations elaborating on Core ") > >() },
    { "n3402", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for Standard Library Types") > >() },
    { "n3403", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Use Cases for CompileTime Reflection") > >() },
    { "n3404", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Tuple Tidbits") > >() },
    { "n3405", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Template Tidbits") > >() },
    { "n3406", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola") >(), wxS("A proposal to add a utility class to represent optional objects Revision ") > >() },
    { "n3407", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("Proposal to Add Decimal Floating Point Support to C") > >() },
    { "n3408", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Marathe"), Hash("Jared Hoberock"), Hash("Olivier Girioux"), Hash("V. Grover") >(), wxS("Parallelizing The Standard Algorithms Library") > >() },
    { "n3409", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Strict ForkJoin Parallelism") > >() },
    { "n3410", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("L. Singh"), Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("Rich Pointers with Dynamic and Static Introspection") > >() },
    { "n3411", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Additional Searching Algorithms") > >() },
    { "n3412", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3413", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Allowing arbitrary literal types for nontype template parameters") > >() },
    { "n3414", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") > >() },
    { "n3415", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Database Access Library") > >() },
    { "n3416", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Packaging Parameter Packs") > >() },
    { "n3417", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3418", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Faisal Vali"), Hash("Herb Sutter") >(), wxS("Proposal for Generic Polymorphic Lambda Expressions") > >() },
    { "n3419", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Geva") >(), wxS("Vector loops and Parallel Loops") > >() },
    { "n3420", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("A URI Library for C") > >() },
    { "n3421", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Making Operator Functors greater") > >() },
    { "n3422", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Gottschlich"), Hash("Michael Wong") >(), wxS("SG Software Transactional Memory TM Status Report") > >() },
    { "n3423", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Software Transactional Memory TM Meeting Minutes") > >() },
    { "n3424", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Lambda Correctness and Usability Issues") > >() },
    { "n3425", 0u, RevList< Rev< 0u, ArrHash< Hash("Anton Malakhov"), Hash("Arch D. Robison"), Hash("Artur Laksberg") >(), wxS("Concurrent Unordered Associative Containers for C") > >() },
    { "n3426", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Experience with PreParsed Headers") > >() },
    { "n3427", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Shared locking in C") > >() },
    { "n3428", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("A Standard Programmatic Interface for Asynchronous Operations") > >() },
    { "n3429", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("S. Mithani") >(), wxS("A C Library Solution To Parallelism") > >() },
    { "n3430", 0u, RevList< Rev< 0u, ArrHash< Hash("Greg Miller") >(), wxS("Proposing stdsplit") > >() },
    { "n3431", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Quoted Strings Library Proposal") > >() },
    { "n3432", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Sized Deallocation") > >() },
    { "n3433", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Lawrence Crowl") >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3434", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") > >() },
    { "n3435", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Standardized featuretest macros") > >() },
    { "n3436", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Walker"), Hash("Eric A Niebler"), Hash("J. de Guzman") >(), wxS("stdresultof and SFINAE") > >() },
    { "n3437", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Type Name Strings For C") > >() },
    { "n3438", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3439", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3440", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3441", 0u, RevList< Rev< 0u, ArrHash< Hash("Aurelian Melinte") >(), wxS("Call Stack Utilities and stdexception Extension Proposal") > >() },
    { "n3442", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringref a nonowning reference to a string") > >() },
    { "n3443", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Powell"), Hash("T. Blechmann") >(), wxS("Priority Queue Changes and Additions") > >() },
    { "n3444", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Relaxing syntactic constraints on constexpr function definitions") > >() },
    { "n3445", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Pass by Const Reference or Value") > >() },
    { "n3446", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Berkan"), Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Mapreduce") > >() },
    { "n3448", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Painless Digit Separation") > >() },
    { "n3449", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Y. Solodkyy") >(), wxS("Open and Efficient Type Switch for C") > >() },
    { "n3450", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("IteratorRelated Improvements to Containers") > >() },
    { "n3451", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("async and future") > >() },
    { "n3453", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3454", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Meeting No   October  Portland Oregon USA") > >() },
    { "n3455", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No   October  Portland Oregon USA") > >() },
    { "n3456", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Range arguments for container constructors and methods with wording") > >() },
    { "n3457", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Algorithm stdiota and its modifications") > >() },
    { "n3458", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Neumann") >(), wxS("Simple Database Integration in C") > >() },
    { "n3459", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Comparison of Two Database Access Methodologies") > >() },
    { "n3462", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Walker"), Hash("Eric A Niebler"), Hash("J. de Guzman") >(), wxS("stdresultof and SFINAE") > >() },
    { "n3463", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Portable Program Source Files") > >() },
    { "n3465", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz") >(), wxS("Adding heterogeneous comparison lookup to associative containers for TR Rev ") > >() },
    { "n3466", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("More Perfect Forwarding") > >() },
    { "n3467", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3468", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for Standard Library Types version ") > >() },
    { "n3469", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions chrono v") > >() },
    { "n3470", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions containers v") > >() },
    { "n3471", 0u, RevList< Rev< 0u, ArrHash< Hash("Bejnamin Kosnik"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Constexpr Library Additions utilities v") > >() },
    { "n3472", 0u, RevList< Rev< 0u, ArrHash< Hash("James Dennett") >(), wxS("Binary Literals in the C Core Language") > >() },
    { "n3473", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3474", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3475", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3477", 0u, RevList< Rev< 0u, ArrHash< Hash("Aleksandar Fabijanic"), Hash("G. Obiltschnig") >(), wxS("C Internet Protocol Classes") > >() },
    { "n3478", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Pointer comparison vs qualification conversions") > >() },
    { "n3479", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Powell"), Hash("T. Blechmann") >(), wxS("Priority Queue Queue and Stack Changes and Additions") > >() },
    { "n3480", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3481", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3482", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3484", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("A URI Library for C") > >() },
    { "n3485", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3486", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("C Editors Report October ") > >() },
    { "n3487", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("TLS and Parallelism") > >() },
    { "n3488", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Working Group paper status") > >() },
    { "n3489", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") > >() },
    { "n3490", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams") >(), wxS("ADL Control for C") > >() },
    { "n3491", 0u, RevList< Rev< 0u, ArrHash< Hash("Aleksandar Fabijanic") >(), wxS("Minutes SG Networking October ") > >() },
    { "n3492", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Use Cases for CompileTime Reflection Rev ") > >() },
    { "n3493", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Compiletime integer sequences") > >() },
    { "n3494", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("A proposal to add special mathematical functions according to the ISOIEC  standard") > >() },
    { "n3495", 0u, RevList< Rev< 0u, ArrHash< Hash("Ariane van der Steldt") >(), wxS("inplace realloc") > >() },
    { "n3496", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  April    Bristol UK") > >() },
    { "n3497", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3498", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Pointer comparison vs qualification conversions revision ") > >() },
    { "n3499", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Digit Separators") > >() },
    { "n3500", 0u, RevList< Rev< 0u, ArrHash< Hash("Olaf van der Spek") >(), wxS("New assert variants") > >() },
    { "n3501", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3502", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3503", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3505", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Library Proposal Revision ") > >() },
    { "n3506", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("A printflike Interface for the Streams Library") > >() },
    { "n3507", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("A URI Library for C") > >() },
    { "n3508", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Kevlin Henney") >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3509", 0u, RevList< Rev< 0u, ArrHash< Hash("Olaf van der Spek") >(), wxS("Operator Bool for Ranges") > >() },
    { "n3510", 0u, RevList< Rev< 0u, ArrHash< Hash("Greg Miller") >(), wxS("stdsplit An algorithm for splitting strings") > >() },
    { "n3511", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("exchange utility function") > >() },
    { "n3512", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringref a nonowning reference to a string revision ") > >() },
    { "n3513", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Range arguments for container constructors and methods wording revision ") > >() },
    { "n3514", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer") > >() },
    { "n3515", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Toward Opaque Typedefs for CY") > >() },
    { "n3516", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3517", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3518", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3519", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Feb   SG Teleconference Announcement and Agenda") > >() },
    { "n3520", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Geva") >(), wxS("Critical sections in vector loops") > >() },
    { "n3521", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("convert utility function") > >() },
    { "n3522", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3523", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3524", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3525", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Polymorphic Allocators") > >() },
    { "n3526", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Uniform initialization for arrays and class aggregate types") > >() },
    { "n3527", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola") >(), wxS("A proposal to add a utility class to represent optional objects Revision ") > >() },
    { "n3528", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Minutes of Feb   SG Phone Call") > >() },
    { "n3529", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3530", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Gove"), Hash("Michael Wong"), Hash("N. Copty") >(), wxS("Leveraging OpenMP infrastructure for language level parallelisation") > >() },
    { "n3531", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for Standard Library Types version ") > >() },
    { "n3532", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("C Dynamic Arrays") > >() },
    { "n3533", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") > >() },
    { "n3534", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Berkan"), Hash("Alasdair Mackintosh") >(), wxS("C Pipelines") > >() },
    { "n3535", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Stream Mutexes") > >() },
    { "n3536", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Sized Deallocation") > >() },
    { "n3537", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Lawrence Crowl") >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3538", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Pass by Const Reference or Value") > >() },
    { "n3539", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3540", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3541", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3542", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3543", 0u, RevList< Rev< 0u, ArrHash< Hash("G. Powell"), Hash("T. Blechmann") >(), wxS("Priority Queue Queue and Stack Changes and Additions") > >() },
    { "n3544", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3545", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("An Incremental Improvement to integralconstant") > >() },
    { "n3546", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("TransformationTraits Redux") > >() },
    { "n3547", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Three randomrelated Proposals") > >() },
    { "n3548", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Conditionallysupported Special Math Functions for C") > >() },
    { "n3549", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("sboundextent") > >() },
    { "n3550", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposed C Value Classification") > >() },
    { "n3551", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Random Number Generation in C") > >() },
    { "n3552", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Introducing Object Aliases") > >() },
    { "n3553", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing a CY Swap Operator") > >() },
    { "n3554", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jared Hoberock"), Hash("Olivier Girioux"), Hash("V. Grover") >(), wxS("A Parallel Algorithms Library") > >() },
    { "n3556", 0u, RevList< Rev< 0u, ArrHash< Hash("C. Leiserson"), Hash("Pablo Halpern") >(), wxS("ThreadLocal Storage in XParallel Computations") > >() },
    { "n3557", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Considering a ForkJoin Parallelism Library") > >() },
    { "n3558", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("A Standardized Representation of Asynchronous Operations") > >() },
    { "n3559", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Faisal Vali"), Hash("Herb Sutter") >(), wxS("Proposal for Generic Polymorphic Lambda Expressions") > >() },
    { "n3560", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Faisal Vali"), Hash("Herb Sutter") >(), wxS("Proposal for Assorted Extensions to Lambda Expressions") > >() },
    { "n3561", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Robert Geva") >(), wxS("Semantics of Vector Loops") > >() },
    { "n3562", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Lawrence Crowl"), Hash("Matthew Austern"), Hash("Niklas Gustafsson") >(), wxS("Executors and schedulers revision ") > >() },
    { "n3563", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Berkan"), Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Mapreduce") > >() },
    { "n3564", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Brewis"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Resumable Functions") > >() },
    { "n3565", 0u, RevList< Rev< 0u, ArrHash< Hash("Aleksandar Fabijanic") >(), wxS("IP Address Design Constraints") > >() },
    { "n3566", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Open Issues") > >() },
    { "n3567", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Closed Issues") > >() },
    { "n3568", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Shared locking in C") > >() },
    { "n3569", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("SPRING  JTCSCWG C STANDARDS COMMITTEE MEETING Preliminary Information") > >() },
    { "n3570", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Quoted Strings Library Proposal Revision ") > >() },
    { "n3571", 0u, RevList< Rev< 0u, ArrHash< Hash("Jo\\u00EBl Falcou"), Hash("Mathias Gaunard"), Hash("P. Est\\u00E9rie") >(), wxS("A Proposal to add Single Instruction Multiple Data Computation to the Standard Library") > >() },
    { "n3572", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Boyall") >(), wxS("Unicode Support in the Standard Library") > >() },
    { "n3573", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Boyall") >(), wxS("Heterogenous extensions to unordered containers") > >() },
    { "n3574", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Boyall") >(), wxS("Binding stateful functions as function pointers") > >() },
    { "n3575", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Boyall") >(), wxS("Additional Standard allocation schemes") > >() },
    { "n3576", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("SG Concepts Teleconference Minutes  ") > >() },
    { "n3577", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Fall  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3578", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing the Rule of Five") > >() },
    { "n3579", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("A type trait for signatures") > >() },
    { "n3580", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Concepts Lite Constraining Templates with Predicates") > >() },
    { "n3581", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Delimited iterators") > >() },
    { "n3582", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Return type deduction for normal functions") > >() },
    { "n3583", 0u, RevList< Rev< 0u, ArrHash< Hash("Scott Schurr") >(), wxS("Exploring constexpr at Runtime") > >() },
    { "n3584", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Wording for Accessing Tuple Fields by Type") > >() },
    { "n3585", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("IteratorRelated Improvements to Containers Revision ") > >() },
    { "n3586", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Howard E. Hinnant") >(), wxS("Splicing Maps and Sets") > >() },
    { "n3587", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("For Loop Exit Strategies") > >() },
    { "n3588", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("makeunique") > >() },
    { "n3589", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("J. Gottschlich"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Summary of Progress Since Portland towards Transactional Language Constructs for C") > >() },
    { "n3591", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("J. Gottschlich"), Hash("M. Moir"), Hash("Michael Wong") >(), wxS("Summary of Discussions on Explicit Cancellation in Transactional Language Constructs for C") > >() },
    { "n3592", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("Alternative cancellation and data escape mechanisms for transactions") > >() },
    { "n3593", 0u, RevList< Rev< 0u, ArrHash< Hash("Greg Miller") >(), wxS("stdsplit An algorithm for splitting strings") > >() },
    { "n3594", 0u, RevList< Rev< 0u, ArrHash< Hash("Greg Miller") >(), wxS("stdjoin An algorithm for joining a range of elements") > >() },
    { "n3595", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Gottschling") >(), wxS("Simplifying ArgumentDependent Lookup Rules") > >() },
    { "n3596", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Gottschling") >(), wxS("Code Reuse in Class Template Specialization") > >() },
    { "n3597", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Relaxing constraints on constexpr functions") > >() },
    { "n3598", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("constexpr member functions and implicit const") > >() },
    { "n3599", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Literal operator templates for strings") > >() },
    { "n3600", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh") >(), wxS("C Latches and Barriers") > >() },
    { "n3601", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Michael Spertus") >(), wxS("Implicit template parameters") > >() },
    { "n3602", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Michael Spertus") >(), wxS("Template parameter deduction for constructors") > >() },
    { "n3603", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("A ThreeClass IP Address Proposal") > >() },
    { "n3604", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts") > >() },
    { "n3605", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Member initializers and aggregates") > >() },
    { "n3606", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Extending stdsearch to use Additional Searching Algorithms") > >() },
    { "n3607", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Pall"), Hash("Michael Spertus") >(), wxS("Making nonmodifying sequence operations more robust") > >() },
    { "n3608", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("exchange utility function revision ") > >() },
    { "n3609", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3610", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Generic lambdacapture initializers supporting capturebymove") > >() },
    { "n3611", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") > >() },
    { "n3612", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Neumann") >(), wxS("Desiderata of a C Database Interface") > >() },
    { "n3613", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Static If Considered") > >() },
    { "n3614", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("unwindingexception") > >() },
    { "n3615", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Constexpr Variable Templates") > >() },
    { "n3617", 0u, RevList< Rev< 0u, ArrHash< Hash("Philipp Juschka") >(), wxS("Lifting overload sets into function objects") > >() },
    { "n3618", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3619", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Morrow") >(), wxS("A proposal to add swappability traits to the standard library") > >() },
    { "n3620", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Network byte order conversion") > >() },
    { "n3621", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Teleconference ") > >() },
    { "n3622", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes WG Meeting No   April   Bristol UK") > >() },
    { "n3623", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No   April   Bristol UK") > >() },
    { "n3624", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Pointer comparison vs qualification conversions revision ") > >() },
    { "n3625", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("A URI Library for C") > >() },
    { "n3626", 0u, RevList< Rev< 0u, ArrHash< Hash("C. Kormanyos"), Hash("John Maddock"), Hash("Paul A Bristow") >(), wxS("FloatingPoint Typedefs Having Specified Widths") > >() },
    { "n3627", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Relaxed switch statement") > >() },
    { "n3628", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("C and C Compatibility") > >() },
    { "n3629", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Gregor") >(), wxS("Simplifying Cx Concepts") > >() },
    { "n3630", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("async future and thread Revision ") > >() },
    { "n3631", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("C The New C Standard") > >() },
    { "n3632", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Additional stdasync Launch Policies") > >() },
    { "n3633", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3634", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Improvements to stdfutureT and Related APIs") > >() },
    { "n3635", 0u, RevList< Rev< 0u, ArrHash< Hash("C. Cambly"), Hash("Michael Wong"), Hash("R. Mak"), Hash("R. Silvera") >(), wxS("Towards restrictlike semantics for C") > >() },
    { "n3636", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("thread should join") > >() },
    { "n3637", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("async and future Revision ") > >() },
    { "n3638", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Return type deduction for normal functions") > >() },
    { "n3639", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays with automatic storage duration revision ") > >() },
    { "n3640", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Extending sharedptr to Support Arrays") > >() },
    { "n3641", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Extending makeshared to Support Arrays") > >() },
    { "n3642", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for Standard Library Types part   version ") > >() },
    { "n3643", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Range Adaptor for Selecting from Pair or Tuple") > >() },
    { "n3644", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Null Forward Iterators") > >() },
    { "n3645", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Howard E. Hinnant"), Hash("James Dennett"), Hash("Jonathan Wakely") >(), wxS("Splicing Maps and Sets Revision ") > >() },
    { "n3646", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Pratte") >(), wxS("Network byte order conversion") > >() },
    { "n3647", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No   October  Portland Oregon USA") > >() },
    { "n3648", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Ville Voutilainen") >(), wxS("Wording Changes for Generalized Lambdacapture") > >() },
    { "n3649", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("Faisal Vali"), Hash("Herb Sutter") >(), wxS("Generic Polymorphic Lambda Expressions Revision ") > >() },
    { "n3650", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Brewis"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Resumable Functions") > >() },
    { "n3651", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Variable Templates Revision ") > >() },
    { "n3652", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Relaxing constraints on constexpr functions  constexpr member functions and implicit const") > >() },
    { "n3653", 0u, RevList< Rev< 0u, ArrHash< Hash("Logan R. Smith"), Hash("Ville Voutilainen") >(), wxS("Member initializers and aggregates") > >() },
    { "n3654", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Quoted Strings Library Proposal Revision ") > >() },
    { "n3655", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("TransformationTraits Redux v") > >() },
    { "n3656", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("makeunique Revision ") > >() },
    { "n3657", 0u, RevList< Rev< 0u, ArrHash< Hash("Joaqu\\u00EDn M\\u00AA L\\u00F3pez Mu\\u00F1oz"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Adding heterogeneous comparison lookup to associative containers rev ") > >() },
    { "n3658", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Compiletime integer sequences") > >() },
    { "n3659", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann"), Hash("Hans J. Boehm"), Hash("Howard E. Hinnant") >(), wxS("Shared locking in C") > >() },
    { "n3660", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for stdcomplex part  of UDL for Standard Library Types version ") > >() },
    { "n3661", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Digit Separators") > >() },
    { "n3662", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Matthew Austern") >(), wxS("C Dynamic Arrays") > >() },
    { "n3663", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Sized Deallocation") > >() },
    { "n3664", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Lawrence Crowl"), Hash("Logan R. Smith") >(), wxS("Clarifying Memory Allocation") > >() },
    { "n3665", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Uninterleaved String Output Streaming") > >() },
    { "n3666", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh") >(), wxS("C Latches and Barriers") > >() },
    { "n3667", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Drafting for Core ") > >() },
    { "n3668", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("exchange utility function revision ") > >() },
    { "n3669", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fixing constexpr member functions without const") > >() },
    { "n3670", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Wording for Addressing Tuples by Type Revision ") > >() },
    { "n3671", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Pall"), Hash("Michael Spertus") >(), wxS("Making nonmodifying sequence operations more robust Revision ") > >() },
    { "n3672", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola") >(), wxS("A proposal to add a utility class to represent optional objects Revision ") > >() },
    { "n3673", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("C Library Working Group Ready Issues Bristol ") > >() },
    { "n3674", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3675", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3676", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3677", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew L. Sandoval") >(), wxS("A Proposal to Add additional RAII Wrappers to the Standard Library") > >() },
    { "n3678", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Stream Guards") > >() },
    { "n3679", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Async future destructors must wait") > >() },
    { "n3680", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improving pair and tuple") > >() },
    { "n3681", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Auto and bracedinit lists") > >() },
    { "n3682", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3683", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3684", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3685", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3686", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Traversable arguments for container constructors and methods wording revision ") > >() },
    { "n3687", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3688", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3689", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3690", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Programming Languages  C") > >() },
    { "n3691", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3692", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("C Editors Report October ") > >() },
    { "n3693", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n3694", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "n3695", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3696", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("Proposal to extend atomic with priority update functions") > >() },
    { "n3697", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n3698", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("July  Santa Clara SG Meeting Announcement and Agenda") > >() },
    { "n3699", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add a generalized callable negator") > >() },
    { "n3700", 0u, RevList< Rev< 0u, ArrHash< Hash("B. Reiter"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Hierarchical Data Structures and Related Concepts for the C Standard Library") > >() },
    { "n3701", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Concepts Lite") > >() },
    { "n3702", 0u, RevList< Rev< 0u, ArrHash< Hash("Mikhail Semenov") >(), wxS("Introducing an optional parameter for memfn which allows to bind an object to its member function") > >() },
    { "n3703", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Extending stdsearch to use Additional Searching Algorithms Version ") > >() },
    { "n3704", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  September    Chicago IL USA") > >() },
    { "n3705", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3706", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") > >() },
    { "n3707", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Meeting Invitation and Information") > >() },
    { "n3708", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("A proposal to add coroutines to the C standard library") > >() },
    { "n3709", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh"), Hash("Hans J. Boehm"), Hash("Jared Hoberock") >(), wxS("Minutes for July  Santa Clara SG Meeting") > >() },
    { "n3710", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Specifying the absence of out of thin air results LWG") > >() },
    { "n3711", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter") >(), wxS("Task Groups As a Lower Level C Library Solution To ForkJoin Parallelism") > >() },
    { "n3712", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison") >(), wxS("PolicyBased Design for Safe Destruction in Concurrent Containers") > >() },
    { "n3713", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3714", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3715", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3716", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("A printflike Interface for the Streams Library") > >() },
    { "n3717", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n3718", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("M. Moir"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Support for C") > >() },
    { "n3719", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Extend INVOKE to support types convertible to target class") > >() },
    { "n3720", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3721", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Improvements to stdfutureT and Related APIs") > >() },
    { "n3722", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Brewis"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Resumable Functions") > >() },
    { "n3723", 0u, RevList< Rev< 0u, ArrHash< Hash("Pascal Constanza") >(), wxS("Extend operator to support rvalues") > >() },
    { "n3724", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jared Hoberock"), Hash("Olivier Girioux"), Hash("V. Grover") >(), wxS("A Parallel Algorithms Library") > >() },
    { "n3725", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Adl-Tabatabai"), Hash("J. Gottschlich"), Hash("Michael Wong"), Hash("T. Shpeisman") >(), wxS("Original Draft Specification of Transactional Language Constructs for C Version  February  ") > >() },
    { "n3726", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Polymorphic Memory Resources") > >() },
    { "n3727", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add invoke function template") > >() },
    { "n3728", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Packaging Parameter Packs Rev ") > >() },
    { "n3729", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Invocation type traits") > >() },
    { "n3730", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Specializations and namespaces") > >() },
    { "n3731", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Niklas Gustafsson") >(), wxS("Executors and schedulers revision ") > >() },
    { "n3732", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Potapov"), Hash("Anton Malakhov"), Hash("Arch D. Robison") >(), wxS("ValueOriented Concurrent Unordered Containers") > >() },
    { "n3733", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC CD  C  National Body Comments") > >() },
    { "n3734", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Geva") >(), wxS("Vector Programming A proposal for WG") > >() },
    { "n3735", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Geva") >(), wxS("On the difference between parallel loops and vector loops") > >() },
    { "n3736", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3737", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3738", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3739", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improving pair and tuple revision ") > >() },
    { "n3740", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer v") > >() },
    { "n3741", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Toward Opaque Typedefs for CY v") > >() },
    { "n3742", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Three randomrelated Proposals v") > >() },
    { "n3743", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Conditionallysupported Special Math Functions for C v") > >() },
    { "n3744", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing pure") > >() },
    { "n3745", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "n3746", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing a CY Swap Operator v") > >() },
    { "n3747", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("A Universal Model for Asynchronous Operations") > >() },
    { "n3748", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jo\\u00EBl Falcou"), Hash("Peter Gottschling") >(), wxS("Implicit Evaluation of auto Variables and Arguments") > >() },
    { "n3749", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Constexpr Library Additions functional") > >() },
    { "n3750", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Ostream Buffers") > >() },
    { "n3751", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Object Lifetime Lowlevel Programming and memcpy") > >() },
    { "n3752", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Sh\\u00F6dl"), Hash("Fabio Fracassi") >(), wxS("Index Based Ranges") > >() },
    { "n3753", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3754", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3755", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3756", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3757", 0u, RevList< Rev< 0u, ArrHash< Hash("Emil Dotchevski") >(), wxS("Support for userdefined exception information and diagnostic information in stdexception") > >() },
    { "n3758", 0u, RevList< Rev< 0u, ArrHash< Hash("Emil Dotchevski") >(), wxS("Standard exception information types for stdexception") > >() },
    { "n3759", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("SIMD Vector Types") > >() },
    { "n3760", 0u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati") >(), wxS("deprecated attribute") > >() },
    { "n3761", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean Middleditch") >(), wxS("Proposing typeat") > >() },
    { "n3762", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3763", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Traversable arguments for container constructors and methods wording revision ") > >() },
    { "n3764", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on relational operators") > >() },
    { "n3765", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("On Optional") > >() },
    { "n3766", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("The identity type transformation") > >() },
    { "n3767", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Teleconference Minutes September ") > >() },
    { "n3768", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes September ") > >() },
    { "n3769", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes PL Meeting No   Chicago Minutes") > >() },
    { "n3770", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3771", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Michael Wong") >(), wxS("Canadian C Comments") > >() },
    { "n3772", 0u, RevList< Rev< 0u, ArrHash< Hash("David Rodr\\u00EDguez Ibeas") >(), wxS("Changing the type of addressofmember expression") > >() },
    { "n3773", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("async and future Revision ") > >() },
    { "n3774", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("S. Wenzel") >(), wxS("C Needs Language Support For Vectorization") > >() },
    { "n3775", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Deprecating rand and Friends") > >() },
    { "n3776", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Wording for future") > >() },
    { "n3777", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Wording for deprecating async") > >() },
    { "n3778", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Sized Deallocation") > >() },
    { "n3779", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Userdefined Literals for stdcomplex") > >() },
    { "n3780", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Why Deprecating async is the Worst of all Options") > >() },
    { "n3781", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jeff Snyder"), Hash("Lawrence Crowl"), Hash("Logan R. Smith") >(), wxS("SingleQuotationMark as a Digit Separator") > >() },
    { "n3782", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Sh\\u00F6dl"), Hash("Fabio Fracassi") >(), wxS("Index Based Ranges Rev ") > >() },
    { "n3783", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Pratte") >(), wxS("Network Byte Order Conversion") > >() },
    { "n3784", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Improvements to stdfutureT and Related APIs") > >() },
    { "n3785", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Jeffrey Yasskin"), Hash("Matthew Austern"), Hash("Niklas Gustafsson") >(), wxS("Executors and schedulers revision ") > >() },
    { "n3786", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Prohibiting out of thin air results in C") > >() },
    { "n3787", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3788", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Immediate issues") > >() },
    { "n3789", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Constexpr Library Additions functional") > >() },
    { "n3790", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n3791", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Lightweight Drawing Library  Objectives Requirements Strategies") > >() },
    { "n3792", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3793", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola") >(), wxS("A proposal to add a utility class to represent optional objects Revision ") > >() },
    { "n3794", 0u, RevList< Rev< 0u, ArrHash< Hash("Daryle Walker") >(), wxS("Proposal to Add MultiDimensional Support to stdarray") > >() },
    { "n3795", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("A more common version of algorithm stdpartitioncopy") > >() },
    { "n3796", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("stdrand replacement") > >() },
    { "n3797", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3798", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("C Editors Report October ") > >() },
    { "n3799", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  February    Issaquah WA USA") > >() },
    { "n3800", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n3801", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Removing Undefined Behavior from the Preprocessor") > >() },
    { "n3802", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("apply call a function with arguments from a tuple") > >() },
    { "n3803", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Programming Languages  C Standard Library  File System Technical Specification") > >() },
    { "n3804", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Daniel Kr\\u00FCgler"), Hash("Kevlin Henney") >(), wxS("Any Library Proposal Revision ") > >() },
    { "n3805", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("SPRING  JTCSCWG C STANDARDS COMMITTEE MEETING Preliminary Information") > >() },
    { "n3806", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3807", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3808", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3810", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Alternatives for Array Extensions") > >() },
    { "n3811", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3812", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3813", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3814", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Jeff Snyder") >(), wxS("Call for CompileTime Reflection Proposals") > >() },
    { "n3815", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Christian K\\u00E4ser") >(), wxS("Enumerator List Property Queries") > >() },
    { "n3816", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Polymorphic Memory Resources  r") > >() },
    { "n3817", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh") >(), wxS("C Latches and Barriers") > >() },
    { "n3818", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3819", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Concepts Lite Specification") > >() },
    { "n3820", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Working Draft Technical Specification  Array Extensions") > >() },
    { "n3821", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3822", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3823", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3824", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("makearray") > >() },
    { "n3825", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Zink") >(), wxS("SG Graphics Discussion") > >() },
    { "n3826", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3827", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("Working Draft Technical Specification  URI") > >() },
    { "n3828", 0u, RevList< Rev< 0u, ArrHash< Hash("Jill Peckham") >(), wxS("FALL  JTCSCWG C Standards Committee Meeting") > >() },
    { "n3829", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("apply call a function with arguments from a tuple V") > >() },
    { "n3830", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Scoped Resource  Generic RAII Wrapper for the Standard Library") > >() },
    { "n3831", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Robert Geva") >(), wxS("Language Extensions for Vector level parallelism") > >() },
    { "n3832", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Pablo Halpern") >(), wxS("Task Region") > >() },
    { "n3833", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3834", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3835", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3836", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3837", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3838", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3839", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing the Rule of Five v") > >() },
    { "n3840", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer v") > >() },
    { "n3841", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Discouraging rand in C") > >() },
    { "n3842", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A sample Proposal") > >() },
    { "n3843", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A SFINAEFriendly stdcommontype") > >() },
    { "n3844", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A SFINAEFriendly stditeratortraits") > >() },
    { "n3845", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Greatest Common Divisor and Least Common Multiple") > >() },
    { "n3846", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Extending staticassert") > >() },
    { "n3847", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Random Number Generation is Not Simple") > >() },
    { "n3848", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft Technical Specification on C Extensions for Library Fundamentals") > >() },
    { "n3849", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3850", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3851", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("\\u0141. Mendakiewicz") >(), wxS("Multidimensional bounds index and arrayview") > >() },
    { "n3852", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Status Rev ") > >() },
    { "n3853", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("RangeBased ForLoops The Next Generation") > >() },
    { "n3854", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Variable Templates For Type Traits") > >() },
    { "n3856", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Unforgetting standard functions minmax as constexpr") > >() },
    { "n3857", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Niklas Gustafsson"), Hash("S. Mithani") >(), wxS("Improvements to stdfutureT and Related APIs") > >() },
    { "n3858", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Brewis"), Hash("Herb Sutter"), Hash("Niklas Gustafsson") >(), wxS("Resumable Functions") > >() },
    { "n3859", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("M. Moir"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Support for C") > >() },
    { "n3861", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Transactional Memory TM Meeting Minutes ") > >() },
    { "n3862", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Gottschlich"), Hash("Michael Spear"), Hash("Michael Wong") >(), wxS("Towards a Transactionsafe C Standard Library stdlist") > >() },
    { "n3863", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Fioravante") >(), wxS("Private Extension Methods") > >() },
    { "n3864", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Fioravante") >(), wxS("A constexpr bitwise operations library for C") > >() },
    { "n3865", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("More Improvements to stdfutureT") > >() },
    { "n3866", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Invocation type traits Rev ") > >() },
    { "n3867", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Specializations and namespaces Rev ") > >() },
    { "n3869", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Extending sharedptr to Support Arrays Revision ") > >() },
    { "n3870", 0u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Extending makeshared to Support Arrays Revision ") > >() },
    { "n3871", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("Proposal to Add Decimal Floating Point Support to C revision ") > >() },
    { "n3872", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison") >(), wxS("A Primer on Scheduling ForkJoin Parallelism with Work Stealing") > >() },
    { "n3873", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Improved insertion interface for uniquekey maps") > >() },
    { "n3874", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents") > >() },
    { "n3875", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("X. Li") >(), wxS("Runtime bound array data members") > >() },
    { "n3876", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Convenience Functions to Combine Hash Values") > >() },
    { "n3877", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3878", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Botond Ballo") >(), wxS("Extensions to the Concept Introduction Syntax in Concepts Lite") > >() },
    { "n3879", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Explicit Flow Control break label goto case and explicit switch") > >() },
    { "n3880", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Improving the Verification of C Programs") > >() },
    { "n3881", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Fixing the specification of universalcharacternames") > >() },
    { "n3882", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("An update to the preprocessor specification") > >() },
    { "n3883", 0u, RevList< Rev< 0u, ArrHash< Hash("N\\u00E9meth P\\u00E9ter") >(), wxS("Code checkers  generators") > >() },
    { "n3884", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Contiguous Iterators A Refinement of Random Access Iterators") > >() },
    { "n3886", 0u, RevList< Rev< 0u, ArrHash< Hash("Johann Anhofer") >(), wxS("A Proposal to add a Database Access Layer to the Standard Library") > >() },
    { "n3887", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Park") >(), wxS("Consistent Metafunction Aliases") > >() },
    { "n3888", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n3889", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Concepts Lite Specification") > >() },
    { "n3890", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("ContainerIncomplete Type") > >() },
    { "n3891", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Herb Sutter") >(), wxS("A proposal to rename sharedmutex to sharedtimedmutex") > >() },
    { "n3892", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Ostream Buffers") > >() },
    { "n3893", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3894", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3895", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3896", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("LIBRARY FOUNDATIONS FOR ASYNCHRONOUS OPERATIONS") > >() },
    { "n3897", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Autotype members") > >() },
    { "n3898", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoff Pike") >(), wxS("HASHING AND FINGERPRINTING") > >() },
    { "n3899", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Nested Allocation") > >() },
    { "n3900", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG  Telecon Minutes") > >() },
    { "n3901", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes February  WG Meeting No ") > >() },
    { "n3902", 0u, RevList< Rev< 0u, ArrHash< Hash("Kyle Kl\\u00F6pper") >(), wxS("Minutes February  PL Meeting No ") > >() },
    { "n3903", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C CD Comment Status Rev ") > >() },
    { "n3905", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Extending stdsearch to use Additional Searching Algorithms Version ") > >() },
    { "n3906", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC PDTS  File System National Body Comments") > >() },
    { "n3908", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft Information technology  Programming languages their environments and system software interfaces  C Extensions for Library Fundamentals") > >() },
    { "n3909", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A SFINAEFriendly stditeratortraits v") > >() },
    { "n3910", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("What can signal handlers do CWG ") > >() },
    { "n3911", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("TransformationTrait Alias voidt") > >() },
    { "n3912", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Auto and bracedinitlists continued") > >() },
    { "n3913", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Greatest Common Divisor and Least Common Multiple v") > >() },
    { "n3914", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Additional Core Language Issue Resolutions for Issaquah") > >() },
    { "n3915", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("apply call a function with arguments from a tuple V") > >() },
    { "n3916", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Polymorphic Memory Resources  r") > >() },
    { "n3918", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Temporary objects vs temporary expressions") > >() },
    { "n3919", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("M. Moir"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Support for C") > >() },
    { "n3920", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Extending sharedptr to Support Arrays Revision ") > >() },
    { "n3921", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("stringview a nonowning reference to a string revision ") > >() },
    { "n3922", 0u, RevList< Rev< 0u, ArrHash< Hash("James Dennett") >(), wxS("New Rules for auto deduction from bracedinitlist") > >() },
    { "n3923", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A SFINAEFriendly stditeratortraits v") > >() },
    { "n3924", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Discouraging rand in C v") > >() },
    { "n3925", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A sample Proposal v") > >() },
    { "n3926", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("LWG Issue  is NAD") > >() },
    { "n3927", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Definition of LockFree") > >() },
    { "n3928", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Extending staticassert v") > >() },
    { "n3929", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Concepts Lite Specification") > >() },
    { "n3930", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Immediate Issues") > >() },
    { "n3931", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Immediate Issues") > >() },
    { "n3932", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Variable Templates For Type Traits Revision ") > >() },
    { "n3936", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n3937", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Programming Languages  C") > >() },
    { "n3938", 0u, RevList< Rev< 0u, ArrHash< Hash("Stefanus du Toit") >(), wxS("Editors Report") > >() },
    { "n3939", 0u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Extending makeshared to Support Arrays Revision ") > >() },
    { "n3940", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n3941", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Study Group SG Active Issues List Revision R") > >() },
    { "n3942", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Study Group SG Closed Issues List Revision R") > >() },
    { "n3943", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Filesystem Study Group SG Defect Report List Revision R") > >() },
    { "n3944", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3945", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3946", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3947", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("URI  Proposed Wording Revision ") > >() },
    { "n3948", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting for C Technical Specifications") > >() },
    { "n3949", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Scoped Resource  Generic RAII Wrapper for the Standard Library") > >() },
    { "n3950", 0u, RevList< Rev< 0u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Defaulted comparison operators") > >() },
    { "n3951", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("C type reflection via variadic template expansion") > >() },
    { "n3952", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n3953", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n3954", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n3955", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Group Member Specifiers") > >() },
    { "n3956", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("ISOIEC CD  C  Responses to National Body Comments") > >() },
    { "n3957", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n3958", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n3959", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n3960", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3961", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("A proposal to add sharedmutex untimed") > >() },
    { "n3962", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Editors Report February   PostIssaquah") > >() },
    { "n3963", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3964", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Library Foundations for Asynchronous Operations Revision ") > >() },
    { "n3965", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n3966", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola") >(), wxS("Fixes for optional objects") > >() },
    { "n3967", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n3968", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n3969", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n3970", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n3971", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Concurrency TS Editors Report May ") > >() },
    { "n3972", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("SourceCode Information Capture") > >() },
    { "n3973", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe"), Hash("Robert Mill") >(), wxS("A Proposal to Add a Logical Const Wrapper to the Standard Library Technical Report") > >() },
    { "n3974", 0u, RevList< Rev< 0u, ArrHash< Hash("D. di Gennaro"), Hash("M. Arena"), Hash("Peter Sommerlad") >(), wxS("Polymorphic Deleter for Unique Pointers") > >() },
    { "n3975", 0u, RevList< Rev< 0u, ArrHash< Hash("D. M. Berris"), Hash("G. Matthews") >(), wxS("URI  Proposed Wording Revision ") > >() },
    { "n3976", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("\\u0141. Mendakiewicz") >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n3977", 0u, RevList< Rev< 0u, ArrHash< Hash("Niklas Gustafsson") >(), wxS("Resumable Functions") > >() },
    { "n3978", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Ostream Buffers") > >() },
    { "n3979", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  June    Rapperswil Switzerland") > >() },
    { "n3980", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant"), Hash("J. Byteway"), Hash("Vinnie Falco") >(), wxS("Types dont know ") > >() },
    { "n3981", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Removing trigraphs") > >() },
    { "n3982", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Rvalue reference overloads for optional") > >() },
    { "n3983", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Hashing tuplelike types") > >() },
    { "n3984", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("Adding attribute reflection to C") > >() },
    { "n3985", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("A proposal to add coroutines to the C standard library Revision ") > >() },
    { "n3986", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Bustamante"), Hash("Daniel F. Gutson"), Hash("S. Davalle") >(), wxS("Adding Standard support to avoid padding within structures") > >() },
    { "n3987", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("Yet another set of C type traits") > >() },
    { "n3988", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Hubert S.K. Tong") >(), wxS("Towards restrictlike aliasing semantics for C") > >() },
    { "n3989", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n3990", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Bustamante"), Hash("Daniel F. Gutson") >(), wxS("Adding Standard Circular Shift operators for computer integers") > >() },
    { "n3991", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Pablo Halpern") >(), wxS("Task Region R") > >() },
    { "n3992", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n3993", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("On Parallel Invocations of Functions in Parallelism TS") > >() },
    { "n3994", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("RangeBased ForLoops The Next Generation Revision ") > >() },
    { "n3995", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("A proposal to add sharedmutex untimed Revision ") > >() },
    { "n3996", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") > >() },
    { "n3997", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Beels"), Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n3998", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh"), Hash("Olivier Girioux") >(), wxS("C Latches and Barriers") > >() },
    { "n3999", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Standard Wording for Transactional Memory Support for C") > >() },
    { "n4000", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Gottschlich"), Hash("Jens Maurer"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Torvald Riegel") >(), wxS("Towards a Transactionsafe C Standard Library stdlist") > >() },
    { "n4001", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n4002", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Cleaningup noexcept in the Library") > >() },
    { "n4003", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4004", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4005", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4006", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("An improved emplace for uniquekey maps") > >() },
    { "n4007", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("Delimited iterators Rev ") > >() },
    { "n4008", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison") >(), wxS("SIMD polymorphism") > >() },
    { "n4009", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Uniform Container Erasure") > >() },
    { "n4010", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4011", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4012", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4013", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Atomic operations on nonatomic data") > >() },
    { "n4014", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Uniform Copy Initialization") > >() },
    { "n4015", 0u, RevList< Rev< 0u, ArrHash< Hash("Pierre Talbot"), Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A proposal to add a utility class to represent expected monad") > >() },
    { "n4016", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents Revision ") > >() },
    { "n4017", 0u, RevList< Rev< 0u, ArrHash< Hash("Riccardo Marcangelo") >(), wxS("Nonmember size and more") > >() },
    { "n4018", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4019", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4020", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4021", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n4022", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n4023", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals") > >() },
    { "n4024", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("Distinguishing coroutines and fibers") > >() },
    { "n4025", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder"), Hash("Logan R. Smith") >(), wxS("Exploring classes of runtime size") > >() },
    { "n4026", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Kawulak") >(), wxS("Nested namespace definition") > >() },
    { "n4027", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Christian K\\u00E4ser") >(), wxS("Type Member Property Queries rev ") > >() },
    { "n4028", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Defining a Portable C ABI") > >() },
    { "n4029", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Let return Be Direct and explicit") > >() },
    { "n4030", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "n4031", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("makearray revision ") > >() },
    { "n4032", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Comments on continuations and executors") > >() },
    { "n4033", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("synchronizedvalueT for associating a mutex with a value") > >() },
    { "n4034", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Destructive Move") > >() },
    { "n4035", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jo\\u00EBl Falcou"), Hash("Peter Gottschling") >(), wxS("Implicit Evaluation of auto Variables and Arguments") > >() },
    { "n4036", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Preshing"), Hash("Paul E. McKenney"), Hash("Torvald Riegel") >(), wxS("Towards Implementation and Use of memoryorderconsume") > >() },
    { "n4037", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("NonTransactional Implementation of Atomic Tree Move") > >() },
    { "n4038", 0u, RevList< Rev< 0u, ArrHash< Hash("Pete Becker") >(), wxS("Proposal for UnboundedPrecision Integer Types") > >() },
    { "n4039", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Berkan"), Hash("Chris Mysen"), Hash("Hans J. Boehm") >(), wxS("Default executor") > >() },
    { "n4040", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C Extensions for Concepts") > >() },
    { "n4041", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Concerns with changing existing types in Technical Specifications") > >() },
    { "n4042", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Safe conversions in uniqueptrT") > >() },
    { "n4043", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynarray Allocation Context") > >() },
    { "n4044", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("A ThreeClass IP Address Proposal Revision ") > >() },
    { "n4045", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Library Foundations for Asynchronous Operations Revision ") > >() },
    { "n4046", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Executors and Asynchronous Operations") > >() },
    { "n4047", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Gor Nishanov"), Hash("Mark Hall") >(), wxS("A Module System for C") > >() },
    { "n4048", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("More Improvements to stdfutureT  Revision ") > >() },
    { "n4049", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Bustamante"), Hash("Daniel F. Gutson"), Hash("Marcos Diaz"), Hash("P. Oliva") >(), wxS("overheadprinciple violations in exception handling") > >() },
    { "n4050", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Dynarray SemiEditorial Issues") > >() },
    { "n4051", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Allow typename in a template template parameter") > >() },
    { "n4052", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4053", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("WG  Rapperswil Minutes") > >() },
    { "n4054", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("PL  Rapperswil Minutes") > >() },
    { "n4055", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on nodebased containers and noexcept") > >() },
    { "n4056", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Minimal incomplete type support for standard containers") > >() },
    { "n4057", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe"), Hash("Robert Mill") >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4058", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Atomic Smart Pointers") > >() },
    { "n4059", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Spring  C Standards Committee Meeting") > >() },
    { "n4060", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Changes to vectorexecutionpolicy") > >() },
    { "n4061", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Greatest Common Divisor and Least Common Multiple v") > >() },
    { "n4063", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("On Parallel Invocations of Functions in Parallelism TS") > >() },
    { "n4064", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improving pair and tuple revision ") > >() },
    { "n4065", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("makearray revision ") > >() },
    { "n4066", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("Delimited iterators Rev ") > >() },
    { "n4067", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Experimental stdfunction etc") > >() },
    { "n4068", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Toward More Expressive Iterator Tags") > >() },
    { "n4069", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Peter Sommerlad") >(), wxS("C Ostream Buffers") > >() },
    { "n4070", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Improving the specification of the vector execution policy in Parallelism TS") > >() },
    { "n4071", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4072", 0u, RevList< Rev< 0u, ArrHash< Hash("M. Bos") >(), wxS("Fixed Size Parameter Packs") > >() },
    { "n4073", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "n4074", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Let return expr Be Explicit Revision ") > >() },
    { "n4075", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Beels"), Hash("Alexei Zakharov"), Hash("John Lakos") >(), wxS("Centralized DefensiveProgramming Support for Narrow Contracts Revision ") > >() },
    { "n4076", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add a generalized callable negator Revision ") > >() },
    { "n4077", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Experimental sharedptr for Library Fundamentals TS") > >() },
    { "n4078", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Fernando Cacciola"), Hash("Ville Voutilainen") >(), wxS("Fixes for optional objects") > >() },
    { "n4079", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Issues Resolved Directly In Rapperswil ") > >() },
    { "n4080", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Immediate Issues for Rapperswil") > >() },
    { "n4081", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals") > >() },
    { "n4082", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Programming Languages  C Extensions for Library Fundamentals") > >() },
    { "n4083", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Editors Report for Version  of the Library Fundamentals TS") > >() },
    { "n4084", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4085", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Editors Report for Version  of the Library Fundamentals TS") > >() },
    { "n4086", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Removing trigraphs") > >() },
    { "n4087", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("\\u0141. Mendakiewicz") >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n4088", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Herb Sutter"), Hash("Pablo Halpern") >(), wxS("Task Region R") > >() },
    { "n4089", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Safe conversions in uniqueptrT revision ") > >() },
    { "n4090", 0u, RevList< Rev< 0u, ArrHash< Hash("Faisal Vali") >(), wxS("The Maladies of All Member Templates An Incomplete Biography of Specialization DR  DR") > >() },
    { "n4091", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4092", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4093", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4094", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant"), Hash("Ville Voutilainen") >(), wxS("Response To Let return expr Be Explicit") > >() },
    { "n4095", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4096", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4097", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4098", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Editors Report PostRapperswil") > >() },
    { "n4099", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Working Draft Technical Specification  File System") > >() },
    { "n4100", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Programming Languages  C  File System Technical Specification") > >() },
    { "n4101", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4102", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4103", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4104", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4105", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Information technology  Programming languages their environments and system software interfaces  Technical Specification for C Extensions for Parallelism") > >() },
    { "n4106", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report postRapperswil") > >() },
    { "n4107", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n4108", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Concurrency TS Editors Report July ") > >() },
    { "n4109", 0u, RevList< Rev< 0u, ArrHash< Hash("Pierre Talbot"), Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A proposal to add a utility class to represent expected monad  Revision ") > >() },
    { "n4110", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Exploring the design space of contract specifications for C") > >() },
    { "n4111", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection rev ") > >() },
    { "n4112", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System PDTS National Body Comments Record of Response") > >() },
    { "n4113", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Christian K\\u00E4ser") >(), wxS("Reflection Type Traits For Classes Unions and Enumerations rev ") > >() },
    { "n4114", 0u, RevList< Rev< 0u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Defaulted comparison operators") > >() },
    { "n4115", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Stephan T. Lavavej") >(), wxS("Searching for Types in Parameter Packs") > >() },
    { "n4116", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Robert Kawulak") >(), wxS("Nested Namespace Definition rev ") > >() },
    { "n4117", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4118", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4119", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4120", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Bock") >(), wxS("Null Coalescing Conditional Operator") > >() },
    { "n4121", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("CompileTime String stdstringliteraln") > >() },
    { "n4122", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephen D. Clamage") >(), wxS("AGENDA PL Meeting No  WG Meeting No  November    UrbanaChampaign IL") > >() },
    { "n4123", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg"), Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Improvements to the Concurrency Technical Specification") > >() },
    { "n4124", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Toward More Expressive Iterator Tags") > >() },
    { "n4125", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WGSG Meeting Information") > >() },
    { "n4126", 0u, RevList< Rev< 0u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Explicitly defaulted comparison operators") > >() },
    { "n4127", 0u, RevList< Rev< 0u, ArrHash< Hash("Eelis van der Weegen") >(), wxS("Checkeddereference conditions") > >() },
    { "n4128", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Eric A Niebler"), Hash("Sean Parent") >(), wxS("Ranges for the Standard Library Revision ") > >() },
    { "n4129", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("SourceCode Information Capture") > >() },
    { "n4130", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("Pad Thy Atomics") > >() },
    { "n4131", 0u, RevList< Rev< 0u, ArrHash< Hash("Filip Ros\\u00E9en") >(), wxS("explicit should never be implicit") > >() },
    { "n4132", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Contiguous Iterators") > >() },
    { "n4133", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Cleanup for exceptionspecification and throwexpression") > >() },
    { "n4134", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Jim Radigan") >(), wxS("Resumable Functions v") > >() },
    { "n4135", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Beels"), Hash("Alexei Zakharov"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("Language Support for Runtime Contract Validation Revision ") > >() },
    { "n4136", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Batty"), Hash("Peter Sewell") >(), wxS("C Concurrency Challenges Draft") > >() },
    { "n4137", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4138", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4139", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4140", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4141", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Programming Languages  C") > >() },
    { "n4142", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards") >(), wxS("Atomic Operations on a Very Large Array") > >() },
    { "n4143", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen") >(), wxS("Executors and schedulers revision ") > >() },
    { "n4144", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour"), Hash("Stephan T. Lavavej") >(), wxS("Searching and Manipulation of Parameter Packs") > >() },
    { "n4145", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("DataInvariant Functions") > >() },
    { "n4146", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Disposition of Comments ISOIEC DIS  C ") > >() },
    { "n4147", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Inline variables or encapsulated expressions") > >() },
    { "n4148", 0u, RevList< Rev< 0u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Disallowing Inaccessible Operators From Trivially Copyable") > >() },
    { "n4149", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Categorically qualified classes") > >() },
    { "n4150", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Hubert S.K. Tong") >(), wxS("AliasSet Attributes Toward restrictlike aliasing semantics for C") > >() },
    { "n4151", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("TriviallyCopyable referencewrapper") > >() },
    { "n4152", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("uncaughtexceptions") > >() },
    { "n4153", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS(" LWG Meeting Invitation and Information") > >() },
    { "n4154", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Operator assert") > >() },
    { "n4155", 0u, RevList< Rev< 0u, ArrHash< Hash("Riccardo Marcangelo") >(), wxS("Nonmember size and more Revision ") > >() },
    { "n4156", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents Revision ") > >() },
    { "n4157", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Jared Hoberock") >(), wxS("Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms") > >() },
    { "n4158", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Destructive Move Rev ") > >() },
    { "n4159", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("R. Perepelitsa") >(), wxS("stdfunction and Beyond") > >() },
    { "n4160", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Value constraints") > >() },
    { "n4161", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Uniform Container Erasure Revision ") > >() },
    { "n4162", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Atomic Smart Pointers rev ") > >() },
    { "n4163", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Telecon Meeting") > >() },
    { "n4164", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter") >(), wxS("Forwarding References") > >() },
    { "n4165", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Unified Call Syntax") > >() },
    { "n4166", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Movable initializer lists") > >() },
    { "n4167", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("G. Mercer"), Hash("Hartmut Kaiser") >(), wxS("Transform Reduce an Additional Algorithm for C Extensions for Parallelism") > >() },
    { "n4168", 0u, RevList< Rev< 0u, ArrHash< Hash("Billy Baker") >(), wxS("Removing autoptr") > >() },
    { "n4169", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("A proposal to add invoke function template Revision ") > >() },
    { "n4170", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Extend INVOKE to support types convertible to target class Revision ") > >() },
    { "n4171", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Parameter group placeholders for bind") > >() },
    { "n4172", 0u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo"), Hash("E. Akhgari") >(), wxS("Named arguments") > >() },
    { "n4173", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot") > >() },
    { "n4174", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Call syntax xfy vs fxy") > >() },
    { "n4175", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Default comparisons") > >() },
    { "n4176", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Thoughts about Comparisons") > >() },
    { "n4177", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("\\u0141. Mendakiewicz") >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n4178", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed resolution for Core Issue  Qualification conversions and pointers to arrays of pointers") > >() },
    { "n4179", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Transactional Memory Support for C Wording revision ") > >() },
    { "n4180", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("SG Transactional Memory Support for C Update") > >() },
    { "n4182", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "n4183", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Contiguous Iterators Pointer Conversion  Type Trait") > >() },
    { "n4184", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("SIMD Types The Vector Type  Operations") > >() },
    { "n4185", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("SIMD Types The Mask Type  WriteMasking") > >() },
    { "n4186", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Supporting Custom Diagnostics and SFINAE") > >() },
    { "n4187", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Peter Sommerlad") >(), wxS("C Ostream Buffers") > >() },
    { "n4188", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("L. Deniau") >(), wxS("Proposal for classes with runtime size") > >() },
    { "n4189", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") > >() },
    { "n4190", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Removing autoptr randomshuffle And Old functional Stuff") > >() },
    { "n4191", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Logan R. Smith") >(), wxS("Folding expressions") > >() },
    { "n4192", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4193", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4194", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4195", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Olivier Girioux") >(), wxS("stdsynchronicT") > >() },
    { "n4196", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Attributes for namespaces and enumerators") > >() },
    { "n4197", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Adding u character literals") > >() },
    { "n4198", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Allow constant evaluation for all nontype template arguments") > >() },
    { "n4199", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Minutes of Sept   SG meeting in Redmond WA") > >() },
    { "n4200", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "n4201", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Fioravante") >(), wxS("Alignment Helpers for C") > >() },
    { "n4202", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Fioravante") >(), wxS("Strongly Typed Bitset") > >() },
    { "n4203", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Fioravante") >(), wxS("Fast ASCII Character Manipulation") > >() },
    { "n4204", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh"), Hash("Olivier Girioux") >(), wxS("C Latches and Barriers") > >() },
    { "n4205", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C Extensions for Concepts") > >() },
    { "n4206", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4207", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4208", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4209", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe"), Hash("Robert Mill") >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4210", 0u, RevList< Rev< 0u, ArrHash< Hash("D. Inglis"), Hash("Hubert S.K. Tong"), Hash("Michael Wong"), Hash("Rajan Bhakta") >(), wxS("IBM comment on preparing for a Trigraphadverse future in C") > >() },
    { "n4211", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Active Issues List Revision R") > >() },
    { "n4212", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Closed Issues List Revision R") > >() },
    { "n4213", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("File System TS Defect Report List Revision R") > >() },
    { "n4214", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Gor Nishanov"), Hash("Mark Hall") >(), wxS("A Module System for C Revision ") > >() },
    { "n4215", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeff Preshing"), Hash("Paul E. McKenney"), Hash("Torvald Riegel") >(), wxS("Towards Implementation and Use of memoryorderconsume") > >() },
    { "n4216", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Jeffrey"), Hash("Ali Sezgin"), Hash("Paul E. McKenney") >(), wxS("OutofThinAir Execution is Vacuous") > >() },
    { "n4217", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("stdrand replacement") > >() },
    { "n4218", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union") > >() },
    { "n4219", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Fixing the specification of universalcharacternames rev ") > >() },
    { "n4220", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("An update to the preprocessor specification rev ") > >() },
    { "n4221", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Generalized lifetime extension") > >() },
    { "n4222", 0u, RevList< Rev< 0u, ArrHash< Hash("Jesse Perla"), Hash("R. ter Borg") >(), wxS("Minimal Additions to the Array View Library for Performance and Interoperability") > >() },
    { "n4223", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely"), Hash("M. Kilpel\\u00E4inen"), Hash("Ville Voutilainen") >(), wxS("Response To Let return expr Be Explicit") > >() },
    { "n4224", 0u, RevList< Rev< 0u, ArrHash< Hash("A. Berkan"), Hash("Alasdair Mackintosh") >(), wxS("Supplements to C Latches") > >() },
    { "n4225", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Towards uniform handling of subobjects") > >() },
    { "n4226", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson"), Hash("Diego Diaz"), Hash("E. Bringas"), Hash("Jens Maurer") >(), wxS("Apply the noreturn attribute to main as a hint to eliminate global object destructor calls") > >() },
    { "n4227", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Cleaningup noexcept in the Library Rev ") > >() },
    { "n4228", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jonathan E. Caves") >(), wxS("Refining Expression Evaluation Order for Idiomatic C") > >() },
    { "n4229", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Pointer Ordering") > >() },
    { "n4230", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Robert Kawulak") >(), wxS("Nested namespace definition revision ") > >() },
    { "n4231", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Torvald Riegel") >(), wxS("Terms and definitions related to threads") > >() },
    { "n4232", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed") >(), wxS("Stackful Coroutines and Stackless Resumable Functions") > >() },
    { "n4233", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("A Class for Status and Optional Value") > >() },
    { "n4234", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel F. Gutson") >(), wxS("overheadprinciple violations in exception handling  part ") > >() },
    { "n4235", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Selecting from Parameter Packs") > >() },
    { "n4236", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("A compiletime string library template with UDL operator templates") > >() },
    { "n4237", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Robert Geva") >(), wxS("Language Extensions for Vector loop level parallelism") > >() },
    { "n4238", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("An Abstract Model of Vector Parallelism") > >() },
    { "n4239", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Michael Spertus") >(), wxS("Defaulted Comparison Using Reflection") > >() },
    { "n4240", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Improved insertion interface for uniquekey maps Revision ") > >() },
    { "n4241", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("A proposal to add sharedmutex untimed Revision ") > >() },
    { "n4242", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Executors and Asynchronous Operations Revision ") > >() },
    { "n4243", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal Revision ") > >() },
    { "n4244", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Resumable Lambdas A language extension for generators and coroutines") > >() },
    { "n4245", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4246", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4247", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4248", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Library Preconditions are a Language Feature") > >() },
    { "n4249", 0u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Alisdair Meredith"), Hash("David Chisnall"), Hash("J. Burley") >(), wxS("Networking Primitives stdexperimentalnetworkhtonl Considered Harmful") > >() },
    { "n4250", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4251", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Urbana Minutes") > >() },
    { "n4252", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Urbana Minutes") > >() },
    { "n4253", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Beels"), Hash("Alexei Zakharov"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("Language Support for Runtime Contract Validation Revision ") > >() },
    { "n4254", 0u, RevList< Rev< 0u, ArrHash< Hash("Rein Halbersma") >(), wxS("Userdefined Literals for sizet and ptrdifft") > >() },
    { "n4255", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Proposed resolution for US Allocatoraware regular expressions rev ") > >() },
    { "n4257", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("Delimited iterators rev ") > >() },
    { "n4258", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Cleaning up noexcept in the Library Rev ") > >() },
    { "n4259", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Wording for stduncaughtexceptions") > >() },
    { "n4260", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Wording for Atomic Smart Pointers") > >() },
    { "n4261", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed resolution for Core Issue  Qualification conversions and pointers to arrays of pointers") > >() },
    { "n4262", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Wording for Forwarding References") > >() },
    { "n4263", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Eric A Niebler"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jeffrey Yasskin"), Hash("Matthew Austern") >(), wxS("Toward a conceptenabled standard library") > >() },
    { "n4265", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Transactional Memory Support for C Wording revision ") > >() },
    { "n4266", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Attributes for namespaces and enumerators") > >() },
    { "n4267", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Adding u character literals") > >() },
    { "n4268", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Allow constant evaluation for all nontype template arguments") > >() },
    { "n4270", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Consolidated Revisions to C Extensions for Library Fundamentals") > >() },
    { "n4272", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Working Draft Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4273", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Uniform Container Erasure Revision ") > >() },
    { "n4274", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Jared Hoberock") >(), wxS("Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms  Proposed Wording Revision ") > >() },
    { "n4275", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Parallelism PDTS Comment Responses") > >() },
    { "n4276", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Adding Fused Transform Algorithms to the Parallelism TS") > >() },
    { "n4277", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("TriviallyCopyable referencewrapper Revision ") > >() },
    { "n4279", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Improved insertion interface for uniquekey maps Revision ") > >() },
    { "n4280", 0u, RevList< Rev< 0u, ArrHash< Hash("Riccardo Marcangelo") >(), wxS("Nonmember size and more Revison ") > >() },
    { "n4282", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A Proposal for the Worlds Dumbest Smart Pointer v") > >() },
    { "n4284", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Contiguous Iterators") > >() },
    { "n4285", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Cleanup for exceptionspecification and throwexpression") > >() },
    { "n4286", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Jim Radigan") >(), wxS("Resumable Functions revision ") > >() },
    { "n4287", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Threads Fibers and Couroutines slides deck") > >() },
    { "n4288", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Strike stringviewclear from Library Fundamentals") > >() },
    { "n4293", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("C language support for contract programming") > >() },
    { "n4294", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Arrays of runtime bounds as data members") > >() },
    { "n4295", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Richard Smith") >(), wxS("Folding Expressions") > >() },
    { "n4296", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4297", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4298", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Ballot Resolution Telecon Meeting") > >() },
    { "n4301", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Working Draft Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4302", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Technical Specification for C Extensions for Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4303", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Richard Smith") >(), wxS("Pointer Safety and Placement New") > >() },
    { "n4304", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4305", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4306", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4307", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comment  ISOIEC PDTS   Technical Specification C Extensions for Library Fundamentals") > >() },
    { "n4308", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comment  ISOIEC PDTS   Technical Specification C Extensions for Parallelism") > >() },
    { "n4309", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Return type deduction for explicitlydefaulted and deleted special member functions") > >() },
    { "n4310", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4311", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4312", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Programming Languages  Technical Specification for C Extensions for Parallelism") > >() },
    { "n4313", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Improvements to the Concurrency Technical Specification revision ") > >() },
    { "n4314", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("DataInvariant Functions revision ") > >() },
    { "n4315", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("makearray revision ") > >() },
    { "n4316", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("stdrand replacement revision ") > >() },
    { "n4317", 0u, RevList< Rev< 0u, ArrHash< Hash("Patrick Grace") >(), wxS("New Safer Functions to Advance Iterators") > >() },
    { "n4318", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Turnbull") >(), wxS("Proposal to add an absolute difference function to the C Standard Library") > >() },
    { "n4319", 0u, RevList< Rev< 0u, ArrHash< Hash("Francesco Logozzo"), Hash("Gabriel Dos Reis"), Hash("Jared Parsons"), Hash("Shuvendu Lahiri"), Hash("Thomas Ball") >(), wxS("Contracts for C What are the Choices") > >() },
    { "n4320", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Make exception specifications be part of the type system") > >() },
    { "n4321", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Towards Implementation and Use of memoryorderconsume") > >() },
    { "n4322", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("LinuxKernel Memory Model") > >() },
    { "n4323", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("OutofThinAir Execution is Vacuous") > >() },
    { "n4324", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Use Cases for ThreadLocal Storage") > >() },
    { "n4325", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Active Issues List Revision R") > >() },
    { "n4326", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Completed Issues List Revision R") > >() },
    { "n4327", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("C Standard Evolution Closed Issues List Revision R") > >() },
    { "n4328", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Issues History for C") > >() },
    { "n4329", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4330", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4331", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4332", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal Revision ") > >() },
    { "n4333", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Concepts Lite") > >() },
    { "n4334", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Wording for boolconstant") > >() },
    { "n4335", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals") > >() },
    { "n4336", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4337", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Editors Report for the Library Fundamentals TS") > >() },
    { "n4338", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Editors Report Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4339", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Concepts Meeting") > >() },
    { "n4340", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Use of the register Keyword") > >() },
    { "n4346", 0u, RevList< Rev< 0u, ArrHash< Hash("Lukasz Mendakiewicz") >(), wxS("Multidimensional bounds index and arrayview revision ") > >() },
    { "n4348", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Making stdfunction threadsafe") > >() },
    { "n4349", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Minutes of WG Telecon") > >() },
    { "n4350", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Concepts Meeting Notice revision ") > >() },
    { "n4351", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Responses to National Body Comments PDTS  C Extensions for Parallelism") > >() },
    { "n4352", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS") > >() },
    { "n4353", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS  Editors Report") > >() },
    { "n4354", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS  DTS Ballot Document") > >() },
    { "n4355", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards") >(), wxS("Shared Multidimensional Arrays with Polymorphic Layout") > >() },
    { "n4356", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards") >(), wxS("Relaxed Array Type Declarator") > >() },
    { "n4357", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Introduce the noexit attribute for main as a hint to eliminate destructor calls for objects with static storage duration") > >() },
    { "n4358", 0u, RevList< Rev< 0u, ArrHash< Hash("Thibaut Le Jehan") >(), wxS("Unary Folds and Empty Parameter Packs") > >() },
    { "n4359", 0u, RevList< Rev< 0u, ArrHash< Hash("Jerry Liang") >(), wxS("A Proposal to Add vector release method just like uniqueptr release method to the Standard Library") > >() },
    { "n4360", 0u, RevList< Rev< 0u, ArrHash< Hash("Douglas Boffey") >(), wxS("Delayed Evaluation Parameters") > >() },
    { "n4361", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Concepts Lite TS") > >() },
    { "n4362", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG  Skillman Minutes") > >() },
    { "n4365", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Responses to National Body Comments ISOIEC PDTS  C Extensions for Library Fundamentals") > >() },
    { "n4366", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("LWG  Missing SFINAE rule in uniqueptr templated assignment") > >() },
    { "n4367", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Comparison in C") > >() },
    { "n4368", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Introducing alias sizetype for type sizet in class stdbitset") > >() },
    { "n4369", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Default argument for second parameter of stdadvance") > >() },
    { "n4370", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal Revision ") > >() },
    { "n4371", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Minimal incomplete type support for standard containers revision ") > >() },
    { "n4372", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe") >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4373", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm") >(), wxS("Atomic View") > >() },
    { "n4374", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("LinuxKernel Memory Mode") > >() },
    { "n4375", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("OutofThinAir Execution is Vacuous") > >() },
    { "n4376", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Use Cases for ThreadLocal Storage") > >() },
    { "n4377", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("C Extensions for Concepts PDTS") > >() },
    { "n4378", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Beels"), Hash("Alexei Zakharov"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("Language Support for Contract Assertions") > >() },
    { "n4379", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("FAQ about N Language Support for Contract Assertions") > >() },
    { "n4380", 0u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Alisdair Meredith") >(), wxS("Constant View A proposal for a stdasconst helper function template") > >() },
    { "n4381", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Suggested Design for Customization Points") > >() },
    { "n4382", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Working Draft C extensions for Ranges") > >() },
    { "n4383", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4384", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4385", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4386", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Unspecialized stdtuplesize should be defined") > >() },
    { "n4387", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Geoffrey Romer"), Hash("Ville Voutilainen") >(), wxS("Improving pair and tuple revision ") > >() },
    { "n4388", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe"), Hash("Robert Mill") >(), wxS("A Proposal to Add a ConstPropagating Wrapper to the Standard Library") > >() },
    { "n4389", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Wording for boolconstant revision ") > >() },
    { "n4390", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Minimal incomplete type support for standard containers revision ") > >() },
    { "n4391", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("makearray revision ") > >() },
    { "n4392", 0u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh"), Hash("Olivier Girioux") >(), wxS("C Latches and Barriers") > >() },
    { "n4393", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Noop Constructors and Destructors") > >() },
    { "n4394", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Agenda for Lenexa Meeting") > >() },
    { "n4395", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("SIMD Types ABI Considerations") > >() },
    { "n4396", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comments PDTS  Transactional Memory") > >() },
    { "n4397", 0u, RevList< Rev< 0u, ArrHash< Hash("Oliver Kowalke") >(), wxS("A lowlevel API for stackful coroutines") > >() },
    { "n4398", 0u, RevList< Rev< 0u, ArrHash< Hash("Oliver Kowalke") >(), wxS("A unified syntax for stackless and stackful coroutines") > >() },
    { "n4399", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Proposed Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n4400", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Concurrency TS Editors Report May ") > >() },
    { "n4401", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Defaulted comparison operator semantics should be uniform") > >() },
    { "n4402", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Jim Radigan") >(), wxS("Resumable Functions revision ") > >() },
    { "n4403", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Draft wording for Resumable Functions") > >() },
    { "n4404", 0u, RevList< Rev< 0u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Extension to aggregate initialization") > >() },
    { "n4405", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Type of the accumulaters of standard algorithms stdaccumulate and stdinnerproduct") > >() },
    { "n4406", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Olivier Girioux") >(), wxS("Integrating Executors with Parallel Algorithm Execution") > >() },
    { "n4407", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4408", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4409", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Programming Languages  Technical Specification for C Extensions for Parallelism") > >() },
    { "n4410", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Responses to PDTS comments on Transactional Memory") > >() },
    { "n4411", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Gor Nishanov"), Hash("Herb Sutter"), Hash("Hong Hong"), Hash("Pablo Halpern") >(), wxS("Task Block formerly Task Region R") > >() },
    { "n4412", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Shortcomings of iostreams") > >() },
    { "n4414", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen") >(), wxS("Executors and Schedulers Revision ") > >() },
    { "n4415", 0u, RevList< Rev< 0u, ArrHash< Hash("Francesco Logozzo"), Hash("Gabriel Dos Reis"), Hash("Jose Daniel Garcia Sanchez"), Hash("Manuel Fahndrich"), Hash("Shuvendu Lahiri") >(), wxS("Simple Contracts for C") > >() },
    { "n4416", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Dont Move Vector Can Have Your NonMoveable Types Covered") > >() },
    { "n4417", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("SourceCode Information Capture") > >() },
    { "n4418", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("Parameter Stringization") > >() },
    { "n4419", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("Potential extensions to SourceCode Information Capture") > >() },
    { "n4420", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("Defining Test Code") > >() },
    { "n4421", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Active Issues List Revision R") > >() },
    { "n4422", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Completed Issues List Revision R") > >() },
    { "n4423", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Closed Issues List Revision R") > >() },
    { "n4424", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Richard Smith") >(), wxS("Inline Variables") > >() },
    { "n4425", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel") >(), wxS("Generalized Dynamic Assumptions") > >() },
    { "n4426", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Adding nothrow swappable traits") > >() },
    { "n4427", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG PreLenexa Telecon Meeting") > >() },
    { "n4428", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Christian K\\u00E4ser") >(), wxS("Type Property Queries rev ") > >() },
    { "n4429", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Core issue   rewording inherited constructors") > >() },
    { "n4430", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Core issue   replacement of class objects containing reference members") > >() },
    { "n4431", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4432", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4433", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("Flexible staticassert messages") > >() },
    { "n4434", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Tweaks to Streamline Concepts Lite Syntax") > >() },
    { "n4435", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing Contract Attributes") > >() },
    { "n4436", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing Standard Library Support for the C Detection Idiom") > >() },
    { "n4437", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Conditionallysupported Special Math Functions v") > >() },
    { "n4438", 0u, RevList< Rev< 0u, ArrHash< Hash("Brett Hall") >(), wxS("Industrial Experience with Transactional Memory at Wyatt Technologies") > >() },
    { "n4439", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents Revision ") > >() },
    { "n4440", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "n4441", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes  and ") > >() },
    { "n4442", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Default argument for second parameter of stdadvance Rev ") > >() },
    { "n4443", 0u, RevList< Rev< 0u, ArrHash< Hash("Vladimir Grigoriev") >(), wxS("Introducing alias sizetype for type sizet in class stdbitset Rev  ") > >() },
    { "n4444", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("LinuxKernel Memory Model") > >() },
    { "n4445", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("Hartmut Kaiser") >(), wxS("Overly attached promise") > >() },
    { "n4446", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("The missing INVOKE related trait") > >() },
    { "n4447", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("From a type T gather members name and type information via variadic template expansion") > >() },
    { "n4448", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Rounding and Overflow in C") > >() },
    { "n4449", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Message Digest Library for C") > >() },
    { "n4450", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union v") > >() },
    { "n4451", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") > >() },
    { "n4452", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Use cases of reflection") > >() },
    { "n4453", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Resumable Expressions") > >() },
    { "n4454", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("SIMD Types Example Matrix Multiplication") > >() },
    { "n4455", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("No Sane Compiler Would Optimize Atomics") > >() },
    { "n4456", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Towards improved support for games graphics realtime low latency embedded systems") > >() },
    { "n4457", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Active Issues Revision ") > >() },
    { "n4458", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Defect Reports and Accepted Issues Revision ") > >() },
    { "n4459", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("C Standard Core Language Closed Issues Revision ") > >() },
    { "n4460", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("LWG  Atomics mutexes and condition variables should not be trivially copyable") > >() },
    { "n4461", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Static if resurrected") > >() },
    { "n4462", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("LWG  Towards more perfect forwarding") > >() },
    { "n4463", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("IO device requirements for C") > >() },
    { "n4464", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva") >(), wxS("Picalculus syntax for C executors") > >() },
    { "n4465", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Gor Nishanov"), Hash("Mark Hall") >(), wxS("A Module System for C Revision ") > >() },
    { "n4466", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Wording for Modules") > >() },
    { "n4468", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jeffrey Mendelsohn"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("On Quantifying MemoryAllocation Strategies") > >() },
    { "n4469", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton"), Hash("Michael Spertus") >(), wxS("Template Argument Type Deduction") > >() },
    { "n4470", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Variadic lockguard") > >() },
    { "n4471", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Template parameter deduction for constructors Rev ") > >() },
    { "n4472", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("consexpr goto") > >() },
    { "n4473", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("noexceptauto again") > >() },
    { "n4474", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("Unified Call Syntax xfy and fxy") > >() },
    { "n4475", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Default comparisons R") > >() },
    { "n4476", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Thoughts about Comparisons R") > >() },
    { "n4477", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot R") > >() },
    { "n4478", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Proposal Revision ") > >() },
    { "n4479", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Merge Fundamentals V into v") > >() },
    { "n4480", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Programming Languages  C Extensions for Library Fundamentals DTS") > >() },
    { "n4481", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4482", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Some notes on executors and the Networking Library Proposal") > >() },
    { "n4483", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("Readcopyupdate") > >() },
    { "n4484", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Active Issues List Revision R") > >() },
    { "n4485", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Defect Report List Revision R") > >() },
    { "n4486", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Closed Issues List Revision R") > >() },
    { "n4487", 0u, RevList< Rev< 0u, ArrHash< Hash("Faisal Vali"), Hash("Ville Voutilainen") >(), wxS("Constexpr lambdas") > >() },
    { "n4488", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Responses to PDTS comments on Transactional Memory version ") > >() },
    { "n4489", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4490", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Lenexa Minutes") > >() },
    { "n4491", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Lenexa Minutes Draft") > >() },
    { "n4492", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Thoughts about C") > >() },
    { "n4494", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Lukasz Mendakiewicz") >(), wxS("Multidimensional bounds offset and arrayview revision ") > >() },
    { "n4495", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Mathias Gaunard") >(), wxS("Operator dot") > >() },
    { "n4496", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Urbana Minutes revision ") > >() },
    { "n4497", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Urbana Minutes Final") > >() },
    { "n4498", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Variadic lockguard Rev ") > >() },
    { "n4499", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Gor Nishanov") >(), wxS("Draft wording for Coroutines Revision ") > >() },
    { "n4501", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Working Draft Technical Specification for C Extensions for Concurrency") > >() },
    { "n4502", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Proposing Standard Library Support for the C Detection Idiom V") > >() },
    { "n4505", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism") > >() },
    { "n4506", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4507", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Technical Specification for C Extensions for Parallelism") > >() },
    { "n4508", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("A proposal to add sharedmutex untimed Revision ") > >() },
    { "n4509", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Jeff Snyder"), Hash("Olivier Girioux") >(), wxS("constexpr atomicisalwayslockfree") > >() },
    { "n4510", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Minimal incomplete type support for standard containers revision ") > >() },
    { "n4511", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Adding nothrowswappable traits revision ") > >() },
    { "n4512", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Lukasz Mendakiewicz") >(), wxS("Multidimensional bounds offset and arrayview revision ") > >() },
    { "n4513", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Working Draft Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4514", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4515", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Editors Report Technical Specification for C Extensions for Transactional Memory") > >() },
    { "n4516", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union v") > >() },
    { "n4517", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Record of Response National Body Comments ISOIEC PDTS ") > >() },
    { "n4518", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Make exception specifications be part of the type system version ") > >() },
    { "n4519", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("SourceCode Information Capture") > >() },
    { "n4521", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Merge Fundamentals V into V") > >() },
    { "n4522", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("stdatomicobjectfencemo T") > >() },
    { "n4523", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("constexpr stdthreadhardwaretruefalsesharingsize") > >() },
    { "n4524", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Respect vectorreserverequest Relative to Reallocation") > >() },
    { "n4525", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Lenexa") > >() },
    { "n4526", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Nicolas Guillemot"), Hash("Sean Middleditch") >(), wxS("Towards improved support for games graphics realtime low latency embedded systems") > >() },
    { "n4527", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4528", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4529", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4530", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeffrey Yasskin") >(), wxS("Editors Report for the Library Fundamentals TS") > >() },
    { "n4531", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("stdrand replacement revision ") > >() },
    { "n4532", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for default comparisons") > >() },
    { "n4533", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Make exception specifications be part of the type system version ") > >() },
    { "n4534", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("DataInvariant Functions revision ") > >() },
    { "n4535", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Richard Smith") >(), wxS("Featuretesting preprocessor predicates for C") > >() },
    { "n4536", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Moene"), Hash("Niels Dekker") >(), wxS("An algorithm to clamp a value between a pair of boundary values") > >() },
    { "n4537", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Adding Symmetry Between sharedptr and weakptr") > >() },
    { "n4538", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Technical Specification for C Extensions for Concurrency") > >() },
    { "n4539", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Active Issues List Revision R") > >() },
    { "n4540", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Completed Issues List Revision R") > >() },
    { "n4541", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution Closed Issues List Revision R") > >() },
    { "n4542", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union v") > >() },
    { "n4543", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("A polymorphic wrapper for all Callable objects") > >() },
    { "n4544", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS("October  WG Meeting Kona") > >() },
    { "n4545", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Oct  Kona HIUS") > >() },
    { "n4546", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Agenda and Meeting Notice for WG Concepts Telecon") > >() },
    { "n4547", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners report") > >() },
    { "n4548", 0u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4549", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Programming Languages  C Extensions for Concepts") > >() },
    { "n4550", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Record of Response National Body Comments on ISOIEC PDTS  Technical Specification C Extensions for Concepts") > >() },
    { "n4551", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comments ISOIEC PDTS  C Extensions for Concurrency") > >() },
    { "n4552", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("PreKona WG Telecon") > >() },
    { "n4553", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C extensions for Concepts") > >() },
    { "n4554", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Editors report for the Concepts TS") > >() },
    { "n4555", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("February  WG Meeting") > >() },
    { "n4556", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("WG telecon minutes") > >() },
    { "n4557", 0u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr") >(), wxS("WG  Telecon revised") > >() },
    { "n4558", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Kona WG Minutes") > >() },
    { "n4559", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Kona PL Minutes") > >() },
    { "n4560", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "n4561", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Ranges Editors Report") > >() },
    { "n4562", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4563", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Editors Report for the Library Fundamentals TS") > >() },
    { "n4564", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("C Extensions for Library Fundamentals Version  PDTS") > >() },
    { "n4565", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Record of Response National Body Comments ISOIEC PDTS  Technical Specification C Extensions for Concurrency") > >() },
    { "n4566", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4567", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C Note") > >() },
    { "n4568", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Feb Mar  Jacksonville FLUS") > >() },
    { "n4569", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Proposed Ranges TS working draft") > >() },
    { "n4570", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Oulu Meeting Information") > >() },
    { "n4571", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Issaquah meeting information") > >() },
    { "n4572", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreJacksonville") > >() },
    { "n4573", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Plum") >(), wxS(" Kona WG Meeting Information") > >() },
    { "n4575", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS Working Draft") > >() },
    { "n4576", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS Editors Report") > >() },
    { "n4577", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Technical Specification for C Extensions for Concurrency") > >() },
    { "n4578", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4579", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report preJacksonville mailing") > >() },
    { "n4580", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4581", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Revised WG  Telecon Minutes") > >() },
    { "n4582", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4583", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4584", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4585", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Editors Report for the Library Fundamentals TS") > >() },
    { "n4586", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Jacksonville Min") > >() },
    { "n4587", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Jacksonville Minutes Draft") > >() },
    { "n4588", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C extensions for Networking Note") > >() },
    { "n4589", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS Editors Report") > >() },
    { "n4590", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Jun  Oulu FI") > >() },
    { "n4591", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreOulu") > >() },
    { "n4592", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Modules TS Working Draft") > >() },
    { "n4593", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4594", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4595", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4596", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL Jacksonville Minutes revised") > >() },
    { "n4597", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Oulu Minutes") > >() },
    { "n4598", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Oulu Minutes") > >() },
    { "n4599", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS(" LWG Meeting") > >() },
    { "n4600", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4601", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Editors Report for the Library Fundamentals TS") > >() },
    { "n4602", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG telecon minutes  preOulu revised") > >() },
    { "n4603", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Committee Draft Standard for Programming Language C") > >() },
    { "n4604", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("C CD Ballot Document") > >() },
    { "n4606", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4607", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Toronto Meeting Information") > >() },
    { "n4608", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Nov  Issaquah WA US") > >() },
    { "n4609", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4610", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4611", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Modules TS") > >() },
    { "n4612", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C extensions for Networking") > >() },
    { "n4613", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4614", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreIssaquah") > >() },
    { "n4615", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4616", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Response to NB Comments SC N ISOIEC PDTS  Part  Library Fundamentals Part ") > >() },
    { "n4617", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Programming Languages  C Extensions for Library Fundamentals Version  DTS") > >() },
    { "n4618", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4619", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4620", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "n4621", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Editors Report for the Ranges TS") > >() },
    { "n4622", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Programming Languages  C Extensions for Ranges PDTS") > >() },
    { "n4623", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Issaquah Minutes") > >() },
    { "n4624", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Issaquah Minutes") > >() },
    { "n4625", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Programming Languages  C Extensions for Networking PDTS") > >() },
    { "n4626", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C Extensions for Networking") > >() },
    { "n4627", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4628", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft Technical Specification on C Extensions for Coroutines") > >() },
    { "n4629", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4630", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C extensions for Concepts") > >() },
    { "n4631", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Editors report for the Concepts TS") > >() },
    { "n4632", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Feb   Mar  Kona HI US") > >() },
    { "n4633", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards") >(), wxS(" Albuquerque WG meeting information") > >() },
    { "n4634", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Issaquah Minutes final") > >() },
    { "n4635", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("PreKona WG Telecon Agenda") > >() },
    { "n4636", 0u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo"), Hash("Duncan P. N. Exon Smith"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Michael Wong"), Hash("Patrice Roy"), Hash("Tony van Eerd") >(), wxS(" ISO WG C Standard Meeting in Toronto") > >() },
    { "n4637", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4638", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Module TS") > >() },
    { "n4639", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4640", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4641", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C extensions for Concepts") > >() },
    { "n4642", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Editors report for the Concepts TS") > >() },
    { "n4643", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comments for PDTS  C Extensions for Networking") > >() },
    { "n4644", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comments for PDTS  C Extensions for Ranges") > >() },
    { "n4645", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG Telecon Minutes") > >() },
    { "n4647", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4648", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Module TS") > >() },
    { "n4649", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft Technical Specification on C Extensions for Coroutines") > >() },
    { "n4650", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4651", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "n4652", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Editors Report for the Ranges TS") > >() },
    { "n4653", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS(" Kona Record of Discussion ISOIEC") > >() },
    { "n4654", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Kona Minutes") > >() },
    { "n4655", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Kona Minutes") > >() },
    { "n4656", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C Extensions for Networking") > >() },
    { "n4657", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4658", 0u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo") >(), wxS("Alternative accommodation student residence for the  Toronto WG Meeting") > >() },
    { "n4659", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C Note") > >() },
    { "n4660", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("C DIS Ballot Document") > >() },
    { "n4661", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4662", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Jul  Toronto ON CA") > >() },
    { "n4663", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines PDTS document") > >() },
    { "n4664", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Responses to National Body Comments for ISOIEC CD ") > >() },
    { "n4665", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreToronto") > >() },
    { "n4666", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("National Body Comments SC N  ISOIEC PDTS  C Extensions for Coroutines") > >() },
    { "n4667", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4668", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Module TS") > >() },
    { "n4669", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4670", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report preToronto mailing") > >() },
    { "n4671", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "n4672", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Editors Report for the Ranges TS") > >() },
    { "n4673", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Spring  WG Meeting Information Rapperswil") > >() },
    { "n4674", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C extensions for Concepts") > >() },
    { "n4675", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Editors report for the Concepts TS") > >() },
    { "n4676", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG Telecon Minutes") > >() },
    { "n4677", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("WG  PL Meeting Jacksonville FL March    ") > >() },
    { "n4678", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("National Body Comments for ISOIEC PDTS  C Extensions for Coroutines") > >() },
    { "n4679", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4680", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Extensions for Coroutines TS Document") > >() },
    { "n4681", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4682", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Module TS") > >() },
    { "n4683", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4684", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges TS Ballot Document") > >() },
    { "n4685", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "n4686", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Editors Report for the Ranges TS") > >() },
    { "n4687", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C Note") > >() },
    { "n4688", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4689", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Extensions to C for Modules Ballot Document") > >() },
    { "n4690", 0u, RevList< Rev< 0u, ArrHash< Hash("Patrice Roy") >(), wxS(" Toronto Record of Discussion") > >() },
    { "n4691", 0u, RevList< Rev< 0u, ArrHash< Hash("Patrice Roy") >(), wxS("WG  Toronto Minutes") > >() },
    { "n4692", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Toronto Minutes") > >() },
    { "n4693", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("PLWG draft agenda  Nov  Albuquerque NM US") > >() },
    { "n4694", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Responses to National Body Comments to ISOIEC PDTS  C Extensions for Ranges") > >() },
    { "n4697", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("NB Comments ISOIEC PDTS  C Extensions for Modules") > >() },
    { "n4698", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4699", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4700", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C Note") > >() },
    { "n4701", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Working Draft Standard for Programming Language C") > >() },
    { "n4704", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreAlbuquerque") > >() },
    { "n4705", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Telecon Minutes") > >() },
    { "n4706", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4707", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4708", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Responses to National Body Comments ISOIEC PDTS  C Extensions for Networking") > >() },
    { "n4709", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Albuquerque Minutes") > >() },
    { "n4710", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("PL  Albuquerque Minutes") > >() },
    { "n4711", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C  Extensions for Networking") > >() },
    { "n4712", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4713", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4714", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4715", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS(" San Diego Meeting Information") > >() },
    { "n4716", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG draft agenda  March  Jacksonville FL US") > >() },
    { "n4717", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreJacksonville") > >() },
    { "n4718", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting Modules TS publication") > >() },
    { "n4719", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Programming Languages  Extensions to C for Modules") > >() },
    { "n4720", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Working Draft Extensions to C for Modules") > >() },
    { "n4721", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Editors Report for the Module TS") > >() },
    { "n4722", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Responses to SC N ISOIEC PDTS  C Extensions for Modules") > >() },
    { "n4723", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft C Extensions for Coroutines") > >() },
    { "n4724", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4725", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4726", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report") > >() },
    { "n4727", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4728", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4729", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG telecon meeting Modules TS publication") > >() },
    { "n4730", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG preJacksonville telecon minutes") > >() },
    { "n4731", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("SC WG Liaison Report C Standard") > >() },
    { "n4732", 0u, RevList< Rev< 0u, ArrHash< Hash("Patrice Roy") >(), wxS("WG  Jacksonville Minutes") > >() },
    { "n4734", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C  Extensions for Networking") > >() },
    { "n4735", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4736", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft C  Extensions for Coroutines") > >() },
    { "n4737", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4738", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("C Standardization Committee Meeting HSR Rapperswil  Latest Info") > >() },
    { "n4739", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Jacksonville  LEWG Summary") > >() },
    { "n4740", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("N Editors Report  Programming Languages  C") > >() },
    { "n4741", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4742", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4743", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report postJacksonville mailing") > >() },
    { "n4744", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Programming Languages  Technical Specification for C Extensions for Parallelism Version ") > >() },
    { "n4745", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG draft agenda  June  Rapperswil Switzerland") > >() },
    { "n4746", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Working Draft C Extensions for Reflection") > >() },
    { "n4747", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Reflection TS  Editors Report") > >() },
    { "n4748", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreRapperswil") > >() },
    { "n4749", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4750", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4751", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG preRapperswil telecon minutes") > >() },
    { "n4752", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Responses to National Body Comments for ISOIEC PDTS  C Extensions for Parallelism Version ") > >() },
    { "n4753", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Rapperswil Minutes") > >() },
    { "n4754", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Rapperswil  LEWG Summary") > >() },
    { "n4755", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft C Extensions for Parallelism Version ") > >() },
    { "n4756", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report postRapperswil mailing") > >() },
    { "n4757", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Programming Languages  C Extensions for Parallelism Version ") > >() },
    { "n4758", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4759", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4760", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft C Extensions for Coroutines") > >() },
    { "n4761", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4762", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4763", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Collated Responses to National Body Comments PDTS  Parallelism V") > >() },
    { "n4764", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4765", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona meeting information") > >() },
    { "n4766", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Working Draft C Extensions for Reflection") > >() },
    { "n4767", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Reflection TS  Editors Report") > >() },
    { "n4768", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report ISOIEC JTCSCWG C") > >() },
    { "n4769", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG draft agenda  November  SanDiego USA") > >() },
    { "n4770", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona meeting information rev ") > >() },
    { "n4771", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Working Draft C Extensions for Networking") > >() },
    { "n4772", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Networking TS  Editors Report") > >() },
    { "n4773", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft C Extensions for Parallelism Version ") > >() },
    { "n4774", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report preSan Diego mailing") > >() },
    { "n4775", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft C Extensions for Coroutines") > >() },
    { "n4776", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Editors report for the Coroutines TS") > >() },
    { "n4777", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreSan Diego") > >() },
    { "n4778", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4779", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4780", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS(" Cologne Meeting Invitation and Information") > >() },
    { "n4781", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Rapperswil Minutes") > >() },
    { "n4782", 0u, RevList< Rev< 0u, ArrHash< Hash("Jamie Allsop") >(), wxS("WG Autumn Meeting  Belfast Northern Ireland") > >() },
    { "n4783", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS(" Cologne Meeting Invitation and Information") > >() },
    { "n4784", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG preSan Diego telecon minutes") > >() },
    { "n4785", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("San Diego  LEWG Summary") > >() },
    { "n4786", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4787", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4790", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  San Diego Minutes") > >() },
    { "n4791", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4792", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4793", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft C Extensions for Parallelism Version ") > >() },
    { "n4794", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report postSan Diego mailing") > >() },
    { "n4795", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG Draft agenda  Febuary  Kona HI USA") > >() },
    { "n4796", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft C Extensions for Parallelism Version ") > >() },
    { "n4797", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report preKona mailing") > >() },
    { "n4798", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreKona") > >() },
    { "n4799", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4800", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4801", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG preKona telecon minutes") > >() },
    { "n4802", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  San Diego Minutes") > >() },
    { "n4803", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Kona  LEWG Summary") > >() },
    { "n4805", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Kona Minutes of Meeting") > >() },
    { "n4806", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4807", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4808", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Working Draft C Extensions for Parallelism Version ") > >() },
    { "n4809", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Parallelism TS Editors Report postKona mailing") > >() },
    { "n4810", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4811", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4812", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4814", 0u, RevList< Rev< 0u, ArrHash< Hash("Jamie Allsop") >(), wxS(" Belfast Meeting Invitation and Information") > >() },
    { "n4815", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Cologne Agenda") > >() },
    { "n4816", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreCologne") > >() },
    { "n4817", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS(" Prague Meeting Invitation and Information") > >() },
    { "n4818", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Working Draft C Extensions for Reflection") > >() },
    { "n4819", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Reflection TS  Editors Report") > >() },
    { "n4820", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4821", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4823", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Cologne  LEWG Summary") > >() },
    { "n4824", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business plan and conveners report") > >() },
    { "n4825", 0u, RevList< Rev< 0u, ArrHash< Hash("Anton Stoyanov"), Hash("Mark Zeren"), Hash("Vassil Keremidchiev"), Hash("Vassil Vassilev") >(), wxS(" Varna Meeting Information") > >() },
    { "n4826", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Cologne Minutes of Meeting") > >() },
    { "n4829", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4830", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Committee Draft Standard for Programming Language C") > >() },
    { "n4831", 0u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS(" Portland Meeting Invitation and Information") > >() },
    { "n4832", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona meeting information") > >() },
    { "n4833", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Agenda for Belfast") > >() },
    { "n4834", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PreBelfast") > >() },
    { "n4835", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4836", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4837", 0u, RevList< Rev< 0u, ArrHash< Hash("Vassil Vassilev") >(), wxS(" Varna Meeting Information") > >() },
    { "n4838", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("PreBelfast Minutes of Meeting") > >() },
    { "n4839", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Belfast Minutes of Meeting") > >() },
    { "n4840", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4841", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4842", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4843", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4844", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Collated CD  Comments") > >() },
    { "n4845", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Belfast  LEWG Summary") > >() },
    { "n4846", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Agenda  Prague February ") > >() },
    { "n4847", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG telecon meeting PrePrague") > >() },
    { "n4848", 0u, RevList< Rev< 0u, ArrHash< Hash("Kevin Fleming") >(), wxS("WG Autumn Meeting   New York New York USA") > >() },
    { "n4849", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4850", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4851", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("PrePrague Telco Minutes of Meeting") > >() },
    { "n4852", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Prague LEWG Summary") > >() },
    { "n4853", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4854", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4855", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Prague Minutes of Meeting") > >() },
    { "n4856", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("C Extensions for Reflection") > >() },
    { "n4857", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Reflection TS  Responses") > >() },
    { "n4858", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Disposition of Comments SC  ISOIEC CD ") > >() },
    { "n4859", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4860", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Draft International Standard  Programming Languages  C") > >() },
    { "n4861", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4862", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4863", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Agenda for Fall Virtual WGPL Meeting") > >() },
    { "n4864", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG virtual meeting Autumn ") > >() },
    { "n4865", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("Response to Editorial Comments ISOIEC DIS  Programming Language C") > >() },
    { "n4866", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meeting PreAutumn ") > >() },
    { "n4867", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4868", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4869", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG PreAutumn  telecon minutes") > >() },
    { "n4870", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Prague Minutes of Meeting") > >() },
    { "n4871", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG PreAutumn  telecon minutes") > >() },
    { "n4873", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4874", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4875", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meeting Winter ") > >() },
    { "n4876", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG virtual meeting Winter ") > >() },
    { "n4877", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4878", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4879", 0u, RevList< Rev< 0u, ArrHash< Hash("Dawn Perchik"), Hash("Jens Maurer"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4880", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG agenda  February  Virtual Meeting") > >() },
    { "n4881", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG virtual meetings   and ") > >() },
    { "n4882", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meetings   and ") > >() },
    { "n4883", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG February  admin telecon minutes") > >() },
    { "n4884", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4885", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4886", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4887", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG agenda  June  Virtual Meeting") > >() },
    { "n4888", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG virtual meetings  and ") > >() },
    { "n4889", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meeting ") > >() },
    { "n4890", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4891", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4892", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4893", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4894", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4895", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Working Draft Extensions to C for Concurrency Version ") > >() },
    { "n4896", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG agenda  October  Virtual Meeting") > >() },
    { "n4897", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG admin telecon meeting September ") > >() },
    { "n4898", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4899", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meetings ") > >() },
    { "n4900", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG virtual plenary meetings ") > >() },
    { "n4901", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4902", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4903", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG agenda  February  Virtual Meeting") > >() },
    { "n4904", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("WG admin telecon meetings  summer and autumn revision ") > >() },
    { "n4905", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4906", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Transactional Memory TS") > >() },
    { "n4907", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4908", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4909", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4910", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4911", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4912", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona hybrid meeting information") > >() },
    { "n4913", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("PLWG agenda  July  Virtual Meeting") > >() },
    { "n4914", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4915", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report ISOIEC JTCSCWG C") > >() },
    { "n4916", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Minutes of Meeting") > >() },
    { "n4917", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4918", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4919", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Programming Languages  C") > >() },
    { "n4920", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4921", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4922", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("INCITS CWG agenda  November  Kona HI US") > >() },
    { "n4923", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Working Draft Extensions to C for Transactional Memory Version ") > >() },
    { "n4924", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4925", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Issaquah meeting information") > >() },
    { "n4926", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4927", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4928", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4929", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4933", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG November  Kona Minutes of Meeting") > >() },
    { "n4934", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings") > >() },
    { "n4935", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Zeren"), Hash("Stanimir Lukanov"), Hash("Vassil Keremidchiev"), Hash("Vassil Vassilev") >(), wxS(" Varna Meeting Invitation and Information") > >() },
    { "n4936", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona meeting information") > >() },
    { "n4937", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Programming Languages  C Extensions for Library Fundamentals Version ") > >() },
    { "n4938", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4939", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4940", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Kona Minutes of Meeting V") > >() },
    { "n4941", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("INCITS CWG Agenda  February  Issaquah WA USA") > >() },
    { "n4942", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4943", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG February  Issaquah Minutes of Meeting") > >() },
    { "n4944", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4945", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4946", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS(" Tokyo meeting information") > >() },
    { "n4947", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("INCITS CWG agenda  June  Varna Bulgaria") > >() },
    { "n4948", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft C Extensions for Library Fundamentals Version ") > >() },
    { "n4949", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report C Extensions for Library Fundamentals Version ") > >() },
    { "n4950", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Standard for Programming Language C") > >() },
    { "n4951", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report  Programming Languages  C") > >() },
    { "n4953", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Concurrency TS") > >() },
    { "n4954", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings rev ") > >() },
    { "n4955", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4956", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Concurrency TS PDTS") > >() },
    { "n4957", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG June  Varna Minutes of Meeting") > >() },
    { "n4958", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4959", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4960", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report ISOIEC JTCSCWG C") > >() },
    { "n4961", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS(" Tokyo meeting information") > >() },
    { "n4962", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  November  Kona HI") > >() },
    { "n4963", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings rev ") > >() },
    { "n4964", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4965", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4966", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("St Louis Meeting Invitation and Information") > >() },
    { "n4967", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4970", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Kona Minutes of Meeting") > >() },
    { "n4971", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4972", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4974", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Wroclaw meeting information") > >() },
    { "n4975", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings") > >() },
    { "n4976", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  March  Tokyo Japan") > >() },
    { "n4977", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Kona meeting information") > >() },
    { "n4978", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Admin telecon minutes") > >() },
    { "n4979", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava"), Hash("Peter Kulczycki") >(), wxS("Hagenberg Meeting Invitation and Information") > >() },
    { "n4980", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Tokyo Minutes of Meeting") > >() },
    { "n4981", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4982", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4983", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  June  St Louis MO USA") > >() },
    { "n4984", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG June  Admin Minutes of Meeting") > >() },
    { "n4985", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  St Louis Minutes of Meeting") > >() },
    { "n4986", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4987", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4988", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4989", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4990", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Business Plan and Conveners Report") > >() },
    { "n4991", 0u, RevList< Rev< 0u, ArrHash< Hash("Maya Traykova"), Hash("Vassil Keremidchiev"), Hash("Vassil Vassilev") >(), wxS(" Sofia Meeting Invitation and Information") > >() },
    { "n4993", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n4994", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n4995", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  November  Wroclaw Poland") > >() },
    { "n4997", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Hagenberg Meeting Invitation and Information") > >() },
    { "n4998", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Wroclaw Admin telecon minutes") > >() },
    { "n4999", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  February  Hagenberg Austria") > >() },
    { "n5000", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG November  Hybrid meeting Minutes of Meeting") > >() },
    { "n5001", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n5002", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n5003", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings") > >() },
    { "n5004", 0u, RevList< Rev< 0u, ArrHash< Hash("Maya Traykova"), Hash("Vassil Keremidchiev"), Hash("Vassil Vassilev") >(), wxS(" Sofia Meeting Invitation and Information") > >() },
    { "n5005", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Hagenberg Admin telecon minutes") > >() },
    { "n5006", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" WG admin telecon meetings revised ") > >() },
    { "n5007", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Hagenberg Minutes of Meeting") > >() },
    { "n5008", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Working Draft Programming Languages  C") > >() },
    { "n5009", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Editors Report Programming Languages  C") > >() },
    { "n5010", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("WG agenda  June  Sofia Bulgaria") > >() },
    { "n5012", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Sofia Admin telecon minutes") > >() },
    { "n5016", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG June  Sofia Hybrid meeting Minutes of Meeting") > >() },
    { "p0001r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Register Keyword") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Register Keyword") > >() },
    { "p0002r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Operator for bool") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Operator for bool") > >() },
    { "p0003r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Dynamic Exception Specifications") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Exception Specifications from C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Dynamic Exception Specifications from C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Exception Specifications from C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Exception Specifications from C") >, Rev< 5u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Exception Specifications from C") > >() },
    { "p0004r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Aliases in iostreams") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Removing Deprecated Aliases in iostreams") > >() },
    { "p0005r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Adopt notfn from Library Fundamentals  for C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Adopt notfn from Library Fundamentals  for C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Adopt notfn from Library Fundamentals  for C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Adopt notfn from Library Fundamentals  for C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Adopt notfn from Library Fundamentals  for C") > >() },
    { "p0006r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Adopt Type Traits Variable Templates from Library Fundamentals TS for C") > >() },
    { "p0007r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Constant View A proposal for a stdasconst helper function template") >, Rev< 1u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Alisdair Meredith") >(), wxS("Constant View A proposal for a stdasconst helper function template") > >() },
    { "p0008r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen") >(), wxS("C Executors") > >() },
    { "p0009r0", 18u, RevList< Rev< 0u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Jesse Perla"), Hash("Juan Alday"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Polymorphic Multidimensional Array View") >, Rev< 1u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Jesse Perla"), Hash("Juan Alday"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Polymorphic Multidimensional Array View") >, Rev< 2u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Polymorphic Multidimensional Array View") >, Rev< 3u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Polymorphic Multidimensional Array View") >, Rev< 4u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Polymorphic Multidimensional Array Reference") >, Rev< 5u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mauro Bianco") >(), wxS("Polymorphic Multidimensional Array Reference") >, Rev< 6u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mauro Bianco") >(), wxS("mdspan A NonOwning Multidimensional Array Reference") >, Rev< 7u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco") >(), wxS("mdspan A NonOwning Multidimensional Array Reference") >, Rev< 8u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco") >(), wxS("mdspan A NonOwning Multidimensional Array Reference") >, Rev< 9u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco") >(), wxS("mdspan A NonOwning Multidimensional Array Reference") >, Rev< 10u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco") >(), wxS("mdspan") >, Rev< 11u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 12u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 13u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 14u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 15u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 16u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 17u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") >, Rev< 18u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Mauro Bianco"), Hash("Nevin Liber") >(), wxS("MDSPAN") > >() },
    { "p0010r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pattabhi Raman") >(), wxS("Adding a subsection for concurrent random number generation in C") > >() },
    { "p0011r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jamie Allsop"), Hash("Nicolai Josuttis") >(), wxS("Additions to Filesystem supporting Relative Paths") > >() },
    { "p0012r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Make exception specifications be part of the type system version ") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Make exception specifications be part of the type system version ") > >() },
    { "p0013r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Logical Operator Type Traits") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Logical Operator Type Traits revison ") > >() },
    { "p0014r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nozomu Kat\\u014D") >(), wxS("Proposal to add the multiline option to stdregex for its ECMAScript engine") >, Rev< 1u, ArrHash< Hash("Nozomu Kat\\u014D") >(), wxS("Proposal to add the multiline option to stdregex for its ECMAScript engine") > >() },
    { "p0015r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("A specializationfriendly stdcommontype") > >() },
    { "p0017r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Extension to aggregate initialization") >, Rev< 1u, ArrHash< Hash("Oleg Smolsky") >(), wxS("Extension to aggregate initialization") > >() },
    { "p0018r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ben Sander"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Hal Finkel"), Hash("James Reus"), Hash("Robin Maffeo") >(), wxS("Lambda Capture of this by Value") >, Rev< 1u, ArrHash< Hash("Ben Sander"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Hal Finkel"), Hash("James Reus"), Hash("Robin Maffeo") >(), wxS("Lambda Capture of this by Value") >, Rev< 2u, ArrHash< Hash("Ben Sander"), Hash("Christian Trott"), Hash("Daveed Vandevoorde"), Hash("H. Carter Edwards"), Hash("Hal Finkel"), Hash("James Reus"), Hash("Robin Maffeo") >(), wxS("Lambda Capture of this by Value") >, Rev< 3u, ArrHash< Hash("Ben Sander"), Hash("Christian Trott"), Hash("Daveed Vandevoorde"), Hash("H. Carter Edwards"), Hash("Hal Finkel"), Hash("James Reus"), Hash("Robin Maffeo") >(), wxS("Lambda Capture of this by Value as this") > >() },
    { "p0019r0", 8u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 1u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 2u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 3u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 4u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 5u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 6u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Atomic View") >, Rev< 7u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Mark Hoemmen"), Hash("Olivier Girioux") >(), wxS("Atomic Ref") >, Rev< 8u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Mark Hoemmen"), Hash("Olivier Girioux") >(), wxS("Atomic Ref") > >() },
    { "p0020r0", 6u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic View") >, Rev< 1u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic") >, Rev< 2u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic") >, Rev< 3u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic View") >, Rev< 4u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic") >, Rev< 5u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic") >, Rev< 6u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic") > >() },
    { "p0021r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Working Draft C Extensions for Ranges") > >() },
    { "p0022r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Proxy Iterators for the Ranges Extensions") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Proxy Iterators for the Ranges Extensions") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Proxy Iterators for the Ranges Extensions") > >() },
    { "p0023r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Denis Bider") >(), wxS("Relocator Efficiently moving objects") > >() },
    { "p0024r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("The Parallelism TS Should be Standardized") >, Rev< 1u, ArrHash< Hash("Jared Hoberock") >(), wxS("The Parallelism TS Should be Standardized") >, Rev< 2u, ArrHash< Hash("Jared Hoberock") >(), wxS("The Parallelism TS Should be Standardized") > >() },
    { "p0025r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Martin Moene"), Hash("Niels Dekker") >(), wxS("An algorithm to clamp a value between a pair of boundary values") >, Rev< 1u, ArrHash< Hash("Martin Moene"), Hash("Niels Dekker") >(), wxS("An algorithm to clamp a value between a pair of boundary values") > >() },
    { "p0026r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew McAtamney-Greenwood") >(), wxS("multirangebased for loops") > >() },
    { "p0027r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Troy Korjuslommi") >(), wxS("Named Types") > >() },
    { "p0028r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Luis M. Sanchez"), Hash("Marco Danelutto"), Hash("Massimo Torquati"), Hash("Peter Sommerlad") >(), wxS("Using nonstandard attributes") >, Rev< 1u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Luis M. Sanchez"), Hash("Marco Danelutto"), Hash("Massimo Torquati"), Hash("Peter Sommerlad") >(), wxS("Using nonstandard attributes") >, Rev< 2u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Luis M. Sanchez"), Hash("Marco Danelutto"), Hash("Massimo Torquati"), Hash("Peter Sommerlad") >(), wxS("Using nonstandard attributes") >, Rev< 3u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jose Daniel Garcia Sanchez") >(), wxS("Using nonstandard attributes") >, Rev< 4u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jose Daniel Garcia Sanchez") >(), wxS("Using attribute namespaces without repetition") > >() },
    { "p0029r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Geoffrey Romer") >(), wxS("A Unified Proposal for Composable Hashing") > >() },
    { "p0030r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Benson Ma") >(), wxS("Proposal to Introduce a Argument Overload to stdhypot") >, Rev< 1u, ArrHash< Hash("Benson Ma") >(), wxS("Proposal to Introduce a Argument Overload to stdhypot") > >() },
    { "p0031r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to Add Constexpr Modifiers to reverseiterator moveiterator array and Range Access") > >() },
    { "p0032r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Homogeneous interface for variant any and optional") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Homogeneous interface for variant any and optional Revision ") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Homogeneous interface for variant any and optional Revision ") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Homogeneous interface for variant any and optional Revision ") > >() },
    { "p0033r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely"), Hash("Peter Dimov") >(), wxS("Reenabling sharedfromthis") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely"), Hash("Peter Dimov") >(), wxS("Reenabling sharedfromthis revision ") > >() },
    { "p0034r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("Civil Time for the Standard Library") > >() },
    { "p0035r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") >, Rev< 1u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") >, Rev< 2u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") >, Rev< 3u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") >, Rev< 4u, ArrHash< Hash("Clark Nelson") >(), wxS("Dynamic memory allocation for overaligned data") > >() },
    { "p0036r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thibaut Le Jehan") >(), wxS("Unary Folds and Empty Parameter Packs Revision ") > >() },
    { "p0037r0", 7u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Fixed point real numbers") >, Rev< 1u, ArrHash< Hash("John McFarlane") >(), wxS("Fixed point real numbers") >, Rev< 2u, ArrHash< Hash("John McFarlane") >(), wxS("Fixedpoint real numbers") >, Rev< 3u, ArrHash< Hash("John McFarlane"), Hash("Michael Wong") >(), wxS("Fixedpoint real numbers") >, Rev< 4u, ArrHash< Hash("John McFarlane") >(), wxS("Fixedpoint real numbers") >, Rev< 5u, ArrHash< Hash("John McFarlane") >(), wxS("FixedPoint Real Numbers") >, Rev< 6u, ArrHash< Hash("John McFarlane") >(), wxS("FixedPoint Real Numbers") >, Rev< 7u, ArrHash< Hash("John McFarlane") >(), wxS("FixedPoint Real Numbers") > >() },
    { "p0038r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean Middleditch") >(), wxS("Flat Containers") > >() },
    { "p0039r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brent Friedman") >(), wxS("Extending rawstorageiterator") > >() },
    { "p0040r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Brent Friedman") >(), wxS("Extending memory management tools") >, Rev< 1u, ArrHash< Hash("Brent Friedman") >(), wxS("Extending memory management tools") >, Rev< 2u, ArrHash< Hash("Brent Friedman") >(), wxS("Extending memory management tools") >, Rev< 3u, ArrHash< Hash("Brent Friedman") >(), wxS("Extending memory management tools") > >() },
    { "p0041r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brent Friedman") >(), wxS("Unstable remove algorithms") > >() },
    { "p0042r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("stdrecover undoing type erasure") > >() },
    { "p0043r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Function wrappers with allocators and noexcept") > >() },
    { "p0044r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("unwindingstate safe exception relativity") > >() },
    { "p0045r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Overloaded and qualified stdfunction") >, Rev< 1u, ArrHash< Hash("David Krauss") >(), wxS("Qualified stdfunction signatures") > >() },
    { "p0046r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Change istransparent to metafunction") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Change istransparent to metafunction") > >() },
    { "p0047r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Transactional Memory TM Meeting Minutes ") > >() },
    { "p0048r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Games DevLow LatencyFinancial TradingBanking Meeting Minutes ") > >() },
    { "p0050r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic match function") > >() },
    { "p0051r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic overload function") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic overload function Revision ") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic overload function") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic overload function") > >() },
    { "p0052r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 1u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 2u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 3u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 4u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 5u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 6u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 7u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 8u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 9u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") >, Rev< 10u, ArrHash< Hash("Andrew L. Sandoval"), Hash("Peter Sommerlad") >(), wxS("Generic Scope Guard and RAII Wrapper for the Standard Library") > >() },
    { "p0053r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") >, Rev< 2u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") >, Rev< 3u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Peter Sommerlad") >(), wxS("DRAFT C Synchronized Buffered Ostream") >, Rev< 4u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Peter Sommerlad") >(), wxS("DRAFT C Synchronized Buffered Ostream") >, Rev< 5u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") >, Rev< 6u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") >, Rev< 7u, ArrHash< Hash("Lawrence Crowl"), Hash("Nicolai Josuttis"), Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("C Synchronized Buffered Ostream") > >() },
    { "p0054r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines reports from the fields") > >() },
    { "p0055r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("On Interactions Between Coroutines and Networking Library") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("On Interactions Between Coroutines and Networking Library") > >() },
    { "p0056r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Soft Keywords") > >() },
    { "p0057r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines Revision ") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 2u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 3u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Gor Nishanov"), Hash("Jens Maurer"), Hash("Richard Smith") >(), wxS("Wording for Coroutines") >, Rev< 4u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 5u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 6u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 7u, ArrHash< Hash("Gor Nishanov") >(), wxS("Wording for Coroutines") >, Rev< 8u, ArrHash< Hash("Gor Nishanov") >(), wxS("Working Draft C Extensions for Coroutines") > >() },
    { "p0058r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Olivier Girioux") >(), wxS("An Interface for Abstracting Execution") >, Rev< 1u, ArrHash< Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Olivier Girioux") >(), wxS("An Interface for Abstracting Execution") > >() },
    { "p0059r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson") >(), wxS("Add rings to the Standard Library") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Guy Davidson") >(), wxS("Add rings to the Standard Library") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Guy Davidson"), Hash("Joe Best-Rotheray") >(), wxS("Add rings to the Standard Library") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Guy Davidson") >(), wxS("A proposal to add a ring span to the standard library") >, Rev< 4u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Guy Davidson") >(), wxS("A proposal to add a ring span to the standard library") > >() },
    { "p0060r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Mathias Gaunard") >(), wxS("Function ObjectBased Overloading of Operator Dot") > >() },
    { "p0061r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting preprocessor predicates for C") >, Rev< 1u, ArrHash< Hash("Clark Nelson") >(), wxS("hasinclude for C") > >() },
    { "p0062r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Peter Dimov") >(), wxS("When should compilers optimize atomics") >, Rev< 1u, ArrHash< Hash("Hal Finkel"), Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Peter Dimov") >(), wxS("When should compilers optimize atomics") > >() },
    { "p0063r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("C should refer to C instead of C") >, Rev< 1u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("C should refer to C instead of C") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("C should refer to C instead of C") >, Rev< 3u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm") >(), wxS("C should refer to C instead of C") > >() },
    { "p0065r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Movable initializer lists rev ") > >() },
    { "p0066r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("Accessors and views with lifetime extension") > >() },
    { "p0067r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions revision ") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions revision ") >, Rev< 4u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions revision ") >, Rev< 5u, ArrHash< Hash("Jens Maurer") >(), wxS("Elementary string conversions revision ") > >() },
    { "p0068r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of unused nodiscard and fallthrough attributes") > >() },
    { "p0069r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Sander"), Hash("Greg Stoner"), Hash("Siu-chi Chan"), Hash("Wen-Heng (Jack) Chung") >(), wxS("A C Compiler for Heterogeneous Computing") > >() },
    { "p0070r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines Return Before Await") > >() },
    { "p0071r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines Keyword alternatives") > >() },
    { "p0072r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents") >, Rev< 1u, ArrHash< Hash("Torvald Riegel") >(), wxS("LightWeight Execution Agents") > >() },
    { "p0073r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("On unifying the coroutines and resumable functions proposals") >, Rev< 1u, ArrHash< Hash("Torvald Riegel") >(), wxS("On unifying the coroutines and resumable functions proposals") >, Rev< 2u, ArrHash< Hash("Torvald Riegel") >(), wxS("On unifying the coroutines and resumable functions proposals") > >() },
    { "p0074r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Making stdownerless more flexible") > >() },
    { "p0075r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Template Library for IndexBased Loops") >, Rev< 1u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Template Library for IndexBased Loops") >, Rev< 2u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Template Library for Parallel For Loops") > >() },
    { "p0076r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Vector and Wavefront Policies") >, Rev< 1u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Jens Maurer"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Vector and Wavefront Policies") >, Rev< 2u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Jens Maurer"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Vector and Wavefront Policies") >, Rev< 3u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Jens Maurer"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Vector and Wavefront Policies") >, Rev< 4u, ArrHash< Hash("Arch D. Robison"), Hash("Clark Nelson"), Hash("Jens Maurer"), Hash("Pablo Halpern"), Hash("Robert Geva") >(), wxS("Vector and Wavefront Policies") > >() },
    { "p0077r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("iscallable the missing INVOKE related trait") >, Rev< 1u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("iscallable the missing INVOKE related trai") >, Rev< 2u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("iscallable the missing INVOKE related trai") > >() },
    { "p0078r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Karl-\\u00C9tienne Perron") >(), wxS("The pure attribute") > >() },
    { "p0079r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr") >(), wxS("Extension methods in C") > >() },
    { "p0080r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Park") >(), wxS("Variant Discriminated Union with Value Semantics") > >() },
    { "p0081r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul Dreik") >(), wxS("A proposal to add sincos to the standard library") > >() },
    { "p0082r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("For Loop Exit Strategies Revision ") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("For Loop Exit Strategies Revision ") >, Rev< 2u, ArrHash< Hash("Alan Talbot") >(), wxS("For Loop Exit Strategies Revision ") > >() },
    { "p0083r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Splicing Maps and Sets Revision ") >, Rev< 1u, ArrHash< Hash("Alan Talbot"), Hash("Howard E. Hinnant"), Hash("James Dennett"), Hash("Jonathan Wakely") >(), wxS("Splicing Maps and Sets Revision ") >, Rev< 2u, ArrHash< Hash("Alan Talbot"), Hash("Howard E. Hinnant"), Hash("James Dennett"), Hash("Jonathan Wakely") >(), wxS("Splicing Maps and Sets Revision ") >, Rev< 3u, ArrHash< Hash("Alan Talbot"), Hash("Howard E. Hinnant"), Hash("James Dennett"), Hash("Jonathan Wakely") >(), wxS("Splicing Maps and Sets Revision ") > >() },
    { "p0084r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Emplace Return Type") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("Emplace Return Type Revision ") >, Rev< 2u, ArrHash< Hash("Alan Talbot") >(), wxS("Emplace Return Type Revision ") > >() },
    { "p0085r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("Michael Jonker") >(), wxS("Oo adding a coherent character sequence to begin octalliterals") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("Jolly Chen"), Hash("Michael Jonker") >(), wxS("Oo adding a coherent character sequence to begin octalliterals") >, Rev< 2u, ArrHash< Hash("Alex Naumann"), Hash("Jolly Chen"), Hash("Michael Jonker") >(), wxS("Oo adding a coherent character sequence to begin octalliterals") >, Rev< 3u, ArrHash< Hash("Alex Naumann"), Hash("Jolly Chen"), Hash("Michael Jonker") >(), wxS("Oo adding a coherent character sequence to begin octalliterals") > >() },
    { "p0086r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant design review") > >() },
    { "p0087r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union without undefined behavior v") > >() },
    { "p0088r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union that is rarely invalid v") >, Rev< 1u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union that is rarely invalid v") >, Rev< 2u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union for C v") >, Rev< 3u, ArrHash< Hash("Alex Naumann") >(), wxS("Variant a typesafe union for C v") > >() },
    { "p0089r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jeffrey Mendelsohn"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("Quantifying MemoryAllocatiom Strategies") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Jeffrey Mendelsohn"), Hash("John Lakos"), Hash("Nathan Myers") >(), wxS("Quantifying MemoryAllocation Strategies") > >() },
    { "p0090r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Removing resulttype etc") > >() },
    { "p0091r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Template parameter deduction for constructors Rev ") >, Rev< 1u, ArrHash< Hash("Faisal Vali"), Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Template parameter deduction for constructors Rev ") >, Rev< 2u, ArrHash< Hash("Faisal Vali"), Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Template argument deduction for class templates Rev ") >, Rev< 3u, ArrHash< Hash("Faisal Vali"), Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Template argument deduction for class templates Rev ") >, Rev< 4u, ArrHash< Hash("Faisal Vali"), Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Template argument deduction for class templates Rev ") > >() },
    { "p0092r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Polishing chrono") >, Rev< 1u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Polishing") > >() },
    { "p0093r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Simply a strong variant") > >() },
    { "p0094r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Simply a basic variant") > >() },
    { "p0095r0", 2u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("The case for a language based variant") >, Rev< 1u, ArrHash< Hash("David Sankel") >(), wxS("Pattern Matching and Language Variants") >, Rev< 2u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Sergei Murzin") >(), wxS("Language Variants") > >() },
    { "p0096r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") >, Rev< 1u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") >, Rev< 2u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") >, Rev< 3u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") >, Rev< 4u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") >, Rev< 5u, ArrHash< Hash("Clark Nelson") >(), wxS("Featuretesting recommendations for C") > >() },
    { "p0097r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Michael Wong"), Hash("Pablo Halpern"), Hash("Paul E. McKenney"), Hash("Robert Geva"), Hash("Thomas Richard William Scogland") >(), wxS("Use Cases for ThreadLocal Storage") > >() },
    { "p0098r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("Jeff Preshing"), Hash("Lawrence Crowl"), Hash("Olivier Girioux"), Hash("Paul E. McKenney"), Hash("Torvald Riegel") >(), wxS("Towards Implementation and Use of memory order consume") >, Rev< 1u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("Jeff Preshing"), Hash("Lawrence Crowl"), Hash("Olivier Girioux"), Hash("Paul E. McKenney"), Hash("Torvald Riegel") >(), wxS("Towards Implementation and Use of memory order consume") > >() },
    { "p0099r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("A lowlevel API for stackful context switching") >, Rev< 1u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("A lowlevel API for stackful context switching") > >() },
    { "p0100r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Comparison in C") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Comparison in C") >, Rev< 2u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Comparison in C") > >() },
    { "p0101r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("An Outline of a C Numbers Technical Specification") > >() },
    { "p0102r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Parametric Number Type Aliases") > >() },
    { "p0103r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("OverflowDetecting and DoubleWide Arithmetic Operations") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("OverflowDetecting and DoubleWide Arithmetic Operations") > >() },
    { "p0104r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("MultiWord Integer Operations and Types") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("MultiWord Integer Operations and Types") > >() },
    { "p0105r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Rounding and Overflow in C") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Rounding and Overflow in C") > >() },
    { "p0106r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Binary FixedPoint Arithmetic") > >() },
    { "p0107r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Better support for constexpr in stdarray") > >() },
    { "p0108r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Paul E. McKenney") >(), wxS("Skeleton Proposal for ThreadLocal Storage TLS") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Paul E. McKenney") >(), wxS("Skeleton Proposal for ThreadLocal Storage TLS") > >() },
    { "p0109r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Function Aliases  Extended Inheritance  Opaque Typedefs") > >() },
    { "p0110r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Implementing the strong guarantee for variant assignment") > >() },
    { "p0112r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Revision ") >, Rev< 1u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking Library Revision ") > >() },
    { "p0113r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Executors and Asynchronous Operations Revision ") > >() },
    { "p0114r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Resumable Expressions revision ") > >() },
    { "p0116r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Kawulak") >(), wxS("Boolean conversion for Standard Library types") > >() },
    { "p0117r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Kawulak") >(), wxS("Generic tostringtowstring functions") > >() },
    { "p0118r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("ConceptsTS editors report") > >() },
    { "p0119r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Overload sets as function arguments") >, Rev< 1u, ArrHash< Hash("Andrew Sutton") >(), wxS("Overload sets as function arguments") >, Rev< 2u, ArrHash< Hash("Andrew Sutton") >(), wxS("Overload sets as function arguments") > >() },
    { "p0120r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("constexpr unions and common initial sequences") > >() },
    { "p0121r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Working Draft C extensions for Concepts") > >() },
    { "p0122r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Neil MacIntosh") >(), wxS("arrayview boundssafe views for sequences of objects") >, Rev< 1u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views of objects for sequences") >, Rev< 2u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views for sequences of objects") >, Rev< 3u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views for sequences of objects") >, Rev< 4u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views for sequences of objects") >, Rev< 5u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views for sequences of objects") >, Rev< 6u, ArrHash< Hash("Neil MacIntosh") >(), wxS("span boundssafe views for sequences of objects") >, Rev< 7u, ArrHash< Hash("Neil MacIntosh"), Hash("Stephan T. Lavavej") >(), wxS("span boundssafe views for sequences of objects") > >() },
    { "p0123r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Neil MacIntosh") >(), wxS("Unifying the interfaces of stringview and arrayview") >, Rev< 1u, ArrHash< Hash("Neil MacIntosh") >(), wxS("stringspan boundssafe views for sequences of characters") >, Rev< 2u, ArrHash< Hash("Neil MacIntosh") >(), wxS("stringspan boundssafe views for sequences of objects") > >() },
    { "p0124r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 1u, ArrHash< Hash("Andrea Parri"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 2u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 3u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 4u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 5u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 6u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 7u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") >, Rev< 8u, ArrHash< Hash("Andrea Parri"), Hash("Boqun Feng"), Hash("Paul E. McKenney"), Hash("Ulrich Weigand") >(), wxS("LinuxKernel Memory Model") > >() },
    { "p0125r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vittorio Romeo") >(), wxS("stdbitset inclusion test methods") > >() },
    { "p0126r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Olivier Girioux") >(), wxS("stdsynchronic") >, Rev< 1u, ArrHash< Hash("Olivier Girioux") >(), wxS("stdsynchronicT") >, Rev< 2u, ArrHash< Hash("Olivier Girioux"), Hash("Torvald Riegel") >(), wxS("stdsynchronicT") > >() },
    { "p0127r0", 2u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Declaring nontype template arguments with auto") >, Rev< 1u, ArrHash< Hash("James Touton"), Hash("Michael Spertus") >(), wxS("Declaring nontype template arguments with auto") >, Rev< 2u, ArrHash< Hash("James Touton"), Hash("Michael Spertus") >(), wxS("Declaring nontype template arguments with auto") > >() },
    { "p0128r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("constexprif") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("constexprif") > >() },
    { "p0129r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("We cannot realistically get rid of throwing moves") > >() },
    { "p0130r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Roberto Parolin"), Hash("Scott Wardle") >(), wxS("Comparing virtual functions") > >() },
    { "p0131r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Unified call syntax concerns") > >() },
    { "p0132r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonthrowing container operations") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonthrowing container operations") > >() },
    { "p0133r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Putting noexceptauto on hold again") > >() },
    { "p0134r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Introducing a name for braceorequalinitializers for nonstatic data members") > >() },
    { "p0135r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Guaranteed copy elision through simplified value categories") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Wording for guaranteed copy elision through simplified value categories") > >() },
    { "p0136r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Rewording inheriting constructors core issue  et al") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Rewording inheriting constructors core issue  et al") > >() },
    { "p0137r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Core Issue  Replacement of class objects containing reference members") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Core Issue  Replacement of class objects containing reference members") > >() },
    { "p0138r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Construction Rules for enum class Values") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Construction Rules for enum class Values") >, Rev< 2u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Construction Rules for enum class Values") > >() },
    { "p0141r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Pavel Curtis") >(), wxS("Modules Componentization and Transitional Paths") > >() },
    { "p0142r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("A Module System for C Revision ") > >() },
    { "p0143r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Wording for Modules") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Wording for Modules") >, Rev< 2u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Wording for Modules") > >() },
    { "p0144r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Structured Bindings") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter") >(), wxS("Structured Bindings") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Structured Bindings") > >() },
    { "p0145r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jonathan E. Caves") >(), wxS("Expression Order of Evaluation") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jonathan E. Caves") >(), wxS("Refining Expression Evaluation Order for Idiomatic C Revision ") >, Rev< 2u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jonathan E. Caves") >(), wxS("Refining Expression Evaluation Order for Idiomatic C") >, Rev< 3u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jonathan E. Caves") >(), wxS("Refining Expression Evaluation Order for Idiomatic C") > >() },
    { "p0146r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Regular Void") >, Rev< 1u, ArrHash< Hash("Matt Calabrese") >(), wxS("Regular Void") > >() },
    { "p0147r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("The Use and Implementation of Contracts") > >() },
    { "p0148r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("memoryresourceptr A Limited Smart Pointer for memoryresource Correctness") > >() },
    { "p0149r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder") >(), wxS("Generalised member pointers") >, Rev< 1u, ArrHash< Hash("Jeff Snyder") >(), wxS("Generalised member pointers") >, Rev< 2u, ArrHash< Hash("Jeff Snyder") >(), wxS("Generalised member pointers") >, Rev< 3u, ArrHash< Hash("Jeff Snyder") >(), wxS("Generalised member pointers") > >() },
    { "p0151r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of MultiDeclarators") > >() },
    { "p0152r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Jeff Snyder"), Hash("Olivier Girioux") >(), wxS("constexpr atomicisalwayslockfree") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Jeff Snyder"), Hash("Olivier Girioux") >(), wxS("constexpr atomicTisalwayslockfree") > >() },
    { "p0153r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("stdatomicobjectfencemo T") > >() },
    { "p0154r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("constexpr stdthreadhardwaretruefalsesharingsize") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("constexpr stdthreadhardwaretruefalsesharingsize") > >() },
    { "p0155r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arch D. Robison"), Hash("Artur Laksberg"), Hash("Gor Nishanov"), Hash("Herb Sutter"), Hash("Hong Hong"), Hash("Pablo Halpern") >(), wxS("Task Block R") > >() },
    { "p0156r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Variadic lockguard Rev ") >, Rev< 1u, ArrHash< Hash("Michael Spertus") >(), wxS("Variadic lockguard Rev ") >, Rev< 2u, ArrHash< Hash("Michael Spertus") >(), wxS("Variadic lockguard Rev ") > >() },
    { "p0157r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Handling Disappointment in C") > >() },
    { "p0158r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andy Sawyer"), Hash("Anthony Williams"), Hash("Arash Partow"), Hash("Christopher Kohlhoff"), Hash("Jamie Allsop"), Hash("Jonathan Coe"), Hash("Jonathan Wakely"), Hash("Roger Orr") >(), wxS("Couroutines belong in a TS") > >() },
    { "p0159r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Artur Laksberg") >(), wxS("Draft of Technical Specification for C Extensions for Concurrency") > >() },
    { "p0160r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Wording for removing defaults for unary folds") > >() },
    { "p0161r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("Bitset Iterators Masks and Container Operations") > >() },
    { "p0162r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("A response to PR On Interactions Between Coroutines and Networking Library") > >() },
    { "p0163r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("sharedptrweaktype") > >() },
    { "p0164r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues") > >() },
    { "p0165r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Kona") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Jacksonville") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Oulu") >, Rev< 3u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Issaquah") >, Rev< 4u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Kona") > >() },
    { "p0166r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Three interesting questions about contracts") > >() },
    { "p0167r0", 2u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues after the October  Kona meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  Jacksonville meeting") >, Rev< 2u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  Jacksonville meeting") > >() },
    { "p0169r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nozomu Kat\\u014D") >(), wxS("regex and Unicode character types") > >() },
    { "p0170r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Faisal Vali") >(), wxS("Wording for Constexpr Lambda") >, Rev< 1u, ArrHash< Hash("Faisal Vali") >(), wxS("Wording for Constexpr Lambda") > >() },
    { "p0171r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Response To Resumable Expressions PR") > >() },
    { "p0172r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Abominable Function Types") > >() },
    { "p0174r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Deprecating Vestigial Library Parts in C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Deprecating Vestigial Library Parts in C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Deprecating Vestigial Library Parts in C") > >() },
    { "p0175r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Synopses for the C library") >, Rev< 1u, ArrHash< Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe") >(), wxS("Synopses for the C library") > >() },
    { "p0177r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Cleaning up allocatortraits") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Cleaning up allocatortraits") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Cleaning up allocatortraits") > >() },
    { "p0178r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Allocators and swap") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Allocators and swap") > >() },
    { "p0180r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reserve a New Library Namespace Future Standardization") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reserve a New Library Namespace Future Standardization") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reserve a New Library Namespace Future Standardization") > >() },
    { "p0181r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Ordered By Default") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Ordered By Default") > >() },
    { "p0184r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Generalizing the RangeBased For Loop") > >() },
    { "p0185r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Adding nothrow swappable traits") >, Rev< 1u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Adding nothrowswappable traits revision ") > >() },
    { "p0186r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Iterator Facade Library Proposal for Ranges") > >() },
    { "p0187r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Bitfield Default Member Initializers") >, Rev< 1u, ArrHash< Hash("Andrew Tomazos") >(), wxS("ProposalWording for Bitfield Default Member Initializer Syntax") > >() },
    { "p0188r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for fallthrough attribute") >, Rev< 1u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for fallthrough attribute") > >() },
    { "p0189r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for nodiscard attribute") >, Rev< 1u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for nodiscard attribute") > >() },
    { "p0190r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposal for New memory order consume Definition") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposal for New memory order consume Definition") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposal for New memory order consume Definition") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposal for New memory order consume Definition") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Jens Maurer"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposal for New memory order consume Definition") > >() },
    { "p0191r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Daniel Markus") >(), wxS("C virtual member function pointer comparison") > >() },
    { "p0192r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Boris Fomitchev"), Hash("Olivier Girioux"), Hash("Sergei Nikolaev") >(), wxS("Adding a Fundamental Type for Short Float") >, Rev< 1u, ArrHash< Hash("Boris Fomitchev"), Hash("Lawrence Crowl"), Hash("Olivier Girioux"), Hash("Sergei Nikolaev") >(), wxS("Adding a Fundamental Type for Short Float") >, Rev< 4u, ArrHash< Hash("Boris Fomitchev"), Hash("Bryce Adelstein Lelbach"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("short float and fixedsize floating point types") > >() },
    { "p0193r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("JF Bastien") >(), wxS("Where is Vectorization in C") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("JF Bastien") >(), wxS("Where is Vectorization in C") > >() },
    { "p0194r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection revision ") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection revision ") >, Rev< 2u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") >, Rev< 3u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") >, Rev< 4u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") >, Rev< 5u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") >, Rev< 6u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection") > >() },
    { "p0195r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Robert Haberlach") >(), wxS("Modernizing usingdeclarations") >, Rev< 1u, ArrHash< Hash("Robert Haberlach") >(), wxS("Modernizing usingdeclarations") >, Rev< 2u, ArrHash< Hash("Richard Smith"), Hash("Robert Haberlach") >(), wxS("Pack expansions in usingdeclarations") > >() },
    { "p0196r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A generic nonet literal type for Nullable types") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Generic none factories for Nullable types") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Generic none factories for Nullable types") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Generic none factories for Nullable types") >, Rev< 4u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Generic none factories for Nullable types") >, Rev< 5u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Generic none factories for Nullable types") > >() },
    { "p0197r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Default Tuplelike access") > >() },
    { "p0198r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Default Swap") > >() },
    { "p0199r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Default Hash") > >() },
    { "p0200r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yegor Derevenets") >(), wxS("A Proposal to Add Y Combinator to the Standard Library") > >() },
    { "p0201r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe") >(), wxS("A cloning pointerclass for C") >, Rev< 1u, ArrHash< Hash("Jonathan Coe") >(), wxS("An indirect valuetype for C") >, Rev< 2u, ArrHash< Hash("Jonathan Coe") >(), wxS("A polymorphic valuetype for C") >, Rev< 3u, ArrHash< Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("A polymorphic valuetype for C") >, Rev< 4u, ArrHash< Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("A polymorphic valuetype for C") >, Rev< 5u, ArrHash< Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("A polymorphic valuetype for C") >, Rev< 6u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("A polymorphic valuetype for C") > >() },
    { "p0202r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Add Constexpr Modifiers to Functions in algorithm and cstring Headers") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Add Constexpr Modifiers to Functions in algorithm and cstring Headers") >, Rev< 2u, ArrHash< Hash("Antony Polukhin") >(), wxS("Add Constexpr Modifiers to Functions in algorithm and cstring Headers") >, Rev< 3u, ArrHash< Hash("Antony Polukhin") >(), wxS("Add Constexpr Modifiers to Functions in algorithm and utility Headers") > >() },
    { "p0203r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mathias Gaunard") >(), wxS("Considerations for the design of expressive portable SIMD vectors") > >() },
    { "p0205r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Moritz Klammler") >(), wxS("Allow Seeding Random Number Engines With stdrandomdevice") >, Rev< 1u, ArrHash< Hash("Moritz Klammler") >(), wxS("Efficient Seeding of Random Number Engines") > >() },
    { "p0206r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Discussion about stdthread and RAII") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("A joining thread") > >() },
    { "p0207r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on lambda captures") > >() },
    { "p0208r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Copyswap helper") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Copyswap Transaction") > >() },
    { "p0209r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("makefromtuple apply for construction") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("makefromtuple apply for construction") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("makefromtuple apply for construction") > >() },
    { "p0210r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("A lightweight dynamic array") > >() },
    { "p0211r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allocatoraware library wrappers for dynamic allocation") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allocatoraware library wrappers for dynamic allocation") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allocatoraware library wrappers for dynamic allocation") >, Rev< 3u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allocatoraware library wrappers for dynamic allocation") > >() },
    { "p0212r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for maybeunused attribute") >, Rev< 1u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Wording for maybeunused attribute") > >() },
    { "p0213r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Graham Bleaney") >(), wxS("Reexamining the Performance of MemoryAllocation Strategies") > >() },
    { "p0214r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 4u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 5u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 6u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 7u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 8u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") >, Rev< 9u, ArrHash< Hash("Matthias Kretz") >(), wxS("DataParallel Vector Types  Operations") > >() },
    { "p0215r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bradley White"), Hash("Greg Miller") >(), wxS("A CivilTime Library") > >() },
    { "p0216r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bradley White"), Hash("Greg Miller") >(), wxS("A TimeZone Library") > >() },
    { "p0217r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for structured bindings") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for structured bindings") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for structured bindings") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for structured bindings") > >() },
    { "p0218r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Adopt File System TS for C") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("Adopt File System TS for C") > >() },
    { "p0219r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Jamie Allsop"), Hash("Nicolai Josuttis") >(), wxS("Relative Paths for Filesystem") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("Relative Paths for Filesystem") > >() },
    { "p0220r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Adopt Library Fundamentals TS for C") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("Adopt Library Fundamentals V TS Components for C R") > >() },
    { "p0221r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for default comparisons revision ") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for default comparisons revision ") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Proposed wording for default comparisons revision ") > >() },
    { "p0222r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Allowing Anonymous Structs as Return Values") > >() },
    { "p0223r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Class Namespace") > >() },
    { "p0224r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Implicit Return Type") > >() },
    { "p0225r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Why I want Concepts and why I want them sooner rather than later") > >() },
    { "p0226r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("Edward Smith-Rowland"), Hash("Walter E. Brown") >(), wxS("Mathematical Special Functions for C v") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("Edward Smith-Rowland"), Hash("Walter E. Brown") >(), wxS("Mathematical Special Functions for C v") > >() },
    { "p0227r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thibaut Le Jehan") >(), wxS("Weakening the iterator categories of some standard algorithms") > >() },
    { "p0228r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Robert Ramey") >(), wxS("A Proposal to Add Safe Integer Types to the Standard Library Technical Report") >, Rev< 3u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("uniquefunction a moveonly stdfunction") >, Rev< 6u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("anyinvocable") > >() },
    { "p0229r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory Meeting minutes ") > >() },
    { "p0230r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Games DevLow LatencyFinancial Meeting Minutes ") > >() },
    { "p0231r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Extending the Transactional Memory Technical Specification to Support Commit Actions") > >() },
    { "p0232r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("A Concurrency ToolKit for Structured DeferralOptimistic Speculation") > >() },
    { "p0233r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 1u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 5u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") >, Rev< 6u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Safe Reclamation for Optimistic Concurrency") > >() },
    { "p0234r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hartmut Kaiser"), Hash("Michael Wong"), Hash("Thomas Heller") >(), wxS("Towards Massive Parallelismaka Heterogeneous DevicesAcceleratorsGPGPU support in C") > >() },
    { "p0235r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Fitzgerald"), Hash("Guy Somberg") >(), wxS("A Packaging System for C") > >() },
    { "p0236r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Richards"), Hash("Maria Rovatsou"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Khronoss OpenCL SYCL to support Heterogeneous Devices for C") > >() },
    { "p0237r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("On the standardization of fundamental bit manipulation utilities") >, Rev< 1u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 2u, ArrHash< Hash("Nathan Myers"), Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 3u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 4u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 5u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 6u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 7u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 8u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 9u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") >, Rev< 10u, ArrHash< Hash("Robert J. Brunner"), Hash("Vincent Reverdy") >(), wxS("Wording for fundamental bit manipulation utilities") > >() },
    { "p0238r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Return type deduction and SFINAE") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Return type deduction and SFINAE") > >() },
    { "p0239r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("valuelessbyexception") > >() },
    { "p0240r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Why I want Concepts but why they should come later rather than sooner") > >() },
    { "p0241r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Remove FutureRelated Explicit Specializations for Void") > >() },
    { "p0242r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Standard Library Support For Void") > >() },
    { "p0244r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Textview A C concepts and range based character encoding and code point enumeration library") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("Textview A C concepts and range based character encoding and code point enumeration library") >, Rev< 2u, ArrHash< Hash("Tom Honermann") >(), wxS("Textview A C concepts and range based character encoding and code point enumeration library") > >() },
    { "p0245r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Hexadecimal float literals for C") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Hexadecimal float literals for C") > >() },
    { "p0246r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("Contract Assert Support Merged Proposal") > >() },
    { "p0247r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("Criteria for Contract Support") > >() },
    { "p0248r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Concepts in C") > >() },
    { "p0249r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Brett Searies") >(), wxS("Input Devices For D Graphics") >, Rev< 2u, ArrHash< Hash("Brett Searies"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("Input Devices For D Graphics") > >() },
    { "p0250r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Wording improvements for initialization and thread ids CWG ") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Wording improvements for initialization and thread ids CWG ") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Wording improvements for initialization and thread ids CWG  ") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Wording improvements for initialization and thread ids CWG  ") > >() },
    { "p0251r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Herb Sutter") >(), wxS("Unified Call Syntax Wording") > >() },
    { "p0252r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot Wording") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot Wording") >, Rev< 2u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot Wording") > >() },
    { "p0253r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Fixing a design mistake in the searchers interface in Library Fundamentals") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Fixing a design mistake in the searchers interface in Library Fundamentals") > >() },
    { "p0254r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Integrating stdstringview and stdstring") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Integrating stdstringview and stdstring") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Integrating stdstringview and stdstring") > >() },
    { "p0255r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva"), Hash("Daniel Auresco") >(), wxS("C Static Reflection via template pack expansion") > >() },
    { "p0256r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Cleiton Santoia Silva") >(), wxS("C Reflection Light") > >() },
    { "p0257r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type for the standard library") >, Rev< 1u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type for increased type safety") > >() },
    { "p0258r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("iscontiguouslayout") >, Rev< 1u, ArrHash< Hash("Michael Spencer") >(), wxS("iscontiguouslayout") >, Rev< 2u, ArrHash< Hash("Michael Spencer") >(), wxS("hasuniqueobjectrepresentations  wording") > >() },
    { "p0259r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Michael Price") >(), wxS("fixedstring a compiletime string") > >() },
    { "p0260r0", 19u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 2u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 3u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 4u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 5u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 6u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 7u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 8u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 9u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 10u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 11u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 12u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 13u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 14u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 15u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 16u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 17u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 18u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") >, Rev< 19u, ArrHash< Hash("Chris Mysen"), Hash("Detlef Vollmann"), Hash("Gor Nishanov"), Hash("Lawrence Crowl") >(), wxS("C Concurrent Queues") > >() },
    { "p0261r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") >, Rev< 2u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") >, Rev< 3u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") >, Rev< 4u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Distributed Counters") > >() },
    { "p0262r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("A Class for Status and Optional Value") >, Rev< 1u, ArrHash< Hash("Chris Mysen"), Hash("Lawrence Crowl") >(), wxS("A Class for Status and Optional Value") > >() },
    { "p0263r0", 1u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the February  Jacksonville Meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the February  Jacksonville Meeting") > >() },
    { "p0264r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Price") >(), wxS("auto operator considered dangerous") > >() },
    { "p0265r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG is NOT proposing Transactional Memory for C") > >() },
    { "p0266r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Removing Restrictions on requiresExpressions") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Removing Restrictions on requiresExpressions") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Lifting Restrictions on requiresExpressions") > >() },
    { "p0267r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 1u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 2u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 3u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 4u, ArrHash< Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 5u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 6u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 7u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 8u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin"), Hash("Michael Kazakov") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 9u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin"), Hash("Michael Kazakov") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") >, Rev< 10u, ArrHash< Hash("Guy Davidson"), Hash("Herb Sutter"), Hash("Jason Zink"), Hash("Michael B. McLaughlin"), Hash("Michael Kazakov") >(), wxS("A Proposal to Add D Graphics Rendering and Display to C") > >() },
    { "p0268r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Michael Spertus") >(), wxS("upto expression") > >() },
    { "p0269r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Allocatoraware regular expressions") > >() },
    { "p0270r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Removing C dependencies from signal handler wording") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Removing C dependencies from signal handler wording") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Removing C dependencies from signal handler wording") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Removing C dependencies from signal handler wording") > >() },
    { "p0271r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Richard Smith"), Hash("Tony van Eerd") >(), wxS("stddirectinitT for plugging the metaprogramming constructor hole") > >() },
    { "p0272r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Give stdstring a nonconst data member function") >, Rev< 1u, ArrHash< Hash("David Sankel") >(), wxS("Give stdstring a nonconst data member function") > >() },
    { "p0273r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("David Jones"), Hash("Richard Smith") >(), wxS("Proposed modules changes from implementation and deployment experience") >, Rev< 1u, ArrHash< Hash("Chandler Carruth"), Hash("David Jones"), Hash("Richard Smith") >(), wxS("Proposed modules changes from implementation and deployment experience") > >() },
    { "p0274r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Clump  A Vectorlike Sequence Container with Embedded Storage") > >() },
    { "p0275r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") >, Rev< 2u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") >, Rev< 3u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") >, Rev< 4u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Classes and Functions Required for Dynamic Library Load") > >() },
    { "p0276r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add Attribute visible") > >() },
    { "p0277r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Wilson") >(), wxS("const Inheritance") >, Rev< 1u, ArrHash< Hash("David Wilson") >(), wxS("const Inheritance") > >() },
    { "p0278r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Saks"), Hash("Jon Kalb") >(), wxS("volatile solutions") > >() },
    { "p0279r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Paul E. McKenney") >(), wxS("ReadCopy Update RCU for C") >, Rev< 1u, ArrHash< Hash("Paul E. McKenney") >(), wxS("ReadCopy Update RCU for C") > >() },
    { "p0280r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Initialize unspecified aggregate members with direct list initialization") > >() },
    { "p0281r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Remove comma elision in variadic function declarations") > >() },
    { "p0282r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Constpreserving overloads for the strtox family of functions") > >() },
    { "p0283r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Standard and nonstandard attributes") >, Rev< 1u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Standard and nonstandard attributes") >, Rev< 2u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Standard and nonstandard attributes") > >() },
    { "p0284r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Unqualified enumerators in case labels") > >() },
    { "p0285r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Using customization points to unify executors") > >() },
    { "p0286r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("A networking library extension to support coawaitbased coroutines") > >() },
    { "p0287r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Simple Contracts for C") > >() },
    { "p0288r0", 9u, RevList< Rev< 0u, ArrHash< Hash("David Krauss") >(), wxS("A polymorphic wrapper for all Callable objects") >, Rev< 1u, ArrHash< Hash("David Krauss") >(), wxS("A polymorphic wrapper for all Callable objects") >, Rev< 4u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("anyinvocable") >, Rev< 5u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("anyinvocable") >, Rev< 6u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("anyinvocable") >, Rev< 7u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("anyinvocable") >, Rev< 8u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("moveonlyfunction was anyinvocable") >, Rev< 9u, ArrHash< Hash("Matt Calabrese"), Hash("Ryan McDougall") >(), wxS("moveonlyfunction was anyinvocable") > >() },
    { "p0289r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Austern") >(), wxS("Forward declarations of nested classes") > >() },
    { "p0290r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("apply for synchronizedvalueT") >, Rev< 1u, ArrHash< Hash("Anthony Williams") >(), wxS("apply for synchronizedvalueT") >, Rev< 2u, ArrHash< Hash("Anthony Williams") >(), wxS("apply for synchronizedvalueT") >, Rev< 3u, ArrHash< Hash("Anthony Williams") >(), wxS("apply for synchronizedvalue") >, Rev< 4u, ArrHash< Hash("Anthony Williams") >(), wxS("apply for synchronizedvalue") > >() },
    { "p0292r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("constexpr if A slightly different syntax") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("constexpr if A slightly different syntax") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("constexpr if A slightly different syntax") > >() },
    { "p0293r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Template deduction for nested classes") > >() },
    { "p0295r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adopt Selected Library Fundamentals V Components for C") > >() },
    { "p0296r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress guarantees Base definitions") >, Rev< 1u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress guarantees Base definitions") >, Rev< 2u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress guarantees Base definitions") > >() },
    { "p0298r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type definition") >, Rev< 1u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type definition") >, Rev< 2u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type definition") >, Rev< 3u, ArrHash< Hash("Neil MacIntosh") >(), wxS("A byte type definition") > >() },
    { "p0299r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress guarantees for the Parallelism TS v") >, Rev< 1u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress guarantees for the Parallelism TS features") > >() },
    { "p0301r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Wording for Unified Call Syntax") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Wording for Unified Call Syntax revision ") > >() },
    { "p0302r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Deprecating Allocator Support in stdfunction") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Removing Allocator Support in stdfunction rev ") > >() },
    { "p0303r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Fomitchev"), Hash("Lawrence Crowl"), Hash("Olivier Girioux"), Hash("Sergei Nikolaev") >(), wxS("Extensions to C for Short Float Type") > >() },
    { "p0304r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Jacksonville") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Issaquah") > >() },
    { "p0305r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("If statement with initializer") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Selection statements with initializer") > >() },
    { "p0306r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Comma elision and comma deletion") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Comma elision and comma deletion") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Comma elision and comma deletion") >, Rev< 3u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Comma elision and comma deletion") >, Rev< 4u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Comma elision and comma deletion") > >() },
    { "p0307r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Making Optional Greater Equal Again") >, Rev< 2u, ArrHash< Hash("Tony van Eerd") >(), wxS("Making Optional Greater Equal Again") > >() },
    { "p0308r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Valueless Variants Considered Harmful") > >() },
    { "p0309r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniele Bordes"), Hash("Markus Hosch") >(), wxS("Partial class") > >() },
    { "p0310r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marcelo Zimbres") >(), wxS("Splitting node and array allocation in allocators") > >() },
    { "p0311r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("A Unified Vision for Manipulating Tuplelike Objects") > >() },
    { "p0312r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Make Pointers to Members Callable") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Make Pointers to Members Callable") > >() },
    { "p0313r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Comparison operators in foldexpressions") > >() },
    { "p0314r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Haberlach") >(), wxS("Querying the alignment of an object") > >() },
    { "p0315r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Lambdas in unevaluated context") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Lambdas in unevaluated context") >, Rev< 2u, ArrHash< Hash("Louis Dionne") >(), wxS("Lambdas in unevaluated context") >, Rev< 3u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Louis Dionne") >(), wxS("Lambdas in unevaluated context") >, Rev< 4u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Louis Dionne") >(), wxS("Wording for lambdas in unevaluated contexts") > >() },
    { "p0316r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Miro Knejp") >(), wxS("allocateunique and allocatordelete") > >() },
    { "p0317r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Directory Entry Caching for Filesystem") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("Directory Entry Caching for Filesystem") > >() },
    { "p0318r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("decayunwrap and unwrapreference") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("unwraprefdecay and unwrapreference") > >() },
    { "p0319r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Adding Emplace functions for promiseTfutureT") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Adding Emplace functions for promiseTfutureT") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Adding Emplace functions for promiseTfutureT revision ") > >() },
    { "p0320r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Thread Constructor Attributes") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Thread Constructor Attributes") > >() },
    { "p0322r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bryce Adelstein Lelbach"), Hash("Jared Hoberock") >(), wxS("exceptionlist") > >() },
    { "p0323r0", 12u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A proposal to add a utility class to represent expected monad Revision ") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A proposal to add a utility class to represent expected object Revision ") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("A proposal to add a utility class to represent expected object Revision ") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Utility class to represent expected object") >, Rev< 4u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 5u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 6u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 7u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 8u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 9u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 10u, ArrHash< Hash("JF Bastien"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 11u, ArrHash< Hash("JF Bastien"), Hash("Jonathan Wakely"), Hash("Vicente Botet") >(), wxS("stdexpected") >, Rev< 12u, ArrHash< Hash("JF Bastien"), Hash("Jonathan Wakely"), Hash("Vicente Botet") >(), wxS("stdexpected") > >() },
    { "p0324r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("One Concept Definition Syntax") > >() },
    { "p0325r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Propose to adopt makearray in C") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Propose to adopt makearray into the IS") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("toarray from LFTS with updates") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("toarray from LFTS with updates") >, Rev< 4u, ArrHash< Hash("Zhihao Yuan") >(), wxS("toarray from LFTS with updates") > >() },
    { "p0326r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Structured binding customization point issues") > >() },
    { "p0327r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Product types access") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Product types access") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Product types access") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Product types access") > >() },
    { "p0329r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Richard Smith"), Hash("Tim Shen"), Hash("Zhihao Yuan") >(), wxS("Designated Initialization") >, Rev< 1u, ArrHash< Hash("Richard Smith"), Hash("Tim Shen") >(), wxS("Designated Initialization Wording") >, Rev< 2u, ArrHash< Hash("Richard Smith"), Hash("Tim Shen") >(), wxS("Designated Initialization Wording") >, Rev< 3u, ArrHash< Hash("Richard Smith"), Hash("Tim Shen") >(), wxS("Designated Initialization Wording") >, Rev< 4u, ArrHash< Hash("Richard Smith"), Hash("Tim Shen") >(), wxS("Designated Initialization Wording") > >() },
    { "p0330r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Rein Halbersma") >(), wxS("UserDefined Literals for sizet") >, Rev< 1u, ArrHash< Hash("Rein Halbersma") >(), wxS("UserDefined Literals for sizet") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 4u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 5u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 6u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 7u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for ptrdifft and sizet") >, Rev< 8u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Rein Halbersma") >(), wxS("Literal Suffixes for signed sizet") > >() },
    { "p0331r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Motivation and Examples for Multidimensional Array") > >() },
    { "p0332r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ben Sander"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("Mauro Bianco"), Hash("Robin Maffeo") >(), wxS("Relaxed Incomplete Multidimensional Array Type Declaration") >, Rev< 1u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Bryce Adelstein Lelbach"), Hash("Christian Trott"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mauro Bianco") >(), wxS("Relaxed Incomplete Multidimensional Array Type Declaration") >, Rev< 2u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards"), Hash("John Michopoulos"), Hash("Mauro Bianco") >(), wxS("Relaxed Incomplete Multidimensional Array Type Declaration") > >() },
    { "p0333r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Improving Parallel Algorithm Exception Handling") > >() },
    { "p0334r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Immutable Persistent Containers") > >() },
    { "p0335r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Context Tokens for Parallel Algorithms") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Context Tokens for Parallel Algorithms") > >() },
    { "p0336r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better Names for Parallel Execution Policies in C") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better Names for Parallel Execution Policies in C") > >() },
    { "p0337r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Delete operator for polymorphicallocator") > >() },
    { "p0338r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic factories") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic factories") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic factories") >, Rev< 3u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C generic factories") > >() },
    { "p0339r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocatorvoid as a vocabulary type") >, Rev< 1u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocatorvoid as a vocabulary type") >, Rev< 2u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocatorvoid as a vocabulary type") >, Rev< 3u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocatorvoid as a vocabulary type") >, Rev< 4u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocator as a vocabulary type") >, Rev< 5u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocator as a vocabulary type") >, Rev< 6u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Pablo Halpern") >(), wxS("polymorphicallocator as a vocabulary type") > >() },
    { "p0340r0", 3u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Making stdunderlyingtype SFINAEfriendly") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Making stdunderlyingtype SFINAEfriendly") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("Making stdunderlyingtype SFINAEfriendly") >, Rev< 3u, ArrHash< Hash("R. Tim Song") >(), wxS("Making stdunderlyingtype SFINAEfriendly") > >() },
    { "p0341r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("parameter packs outside of templates") > >() },
    { "p0342r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Timing barriers") >, Rev< 1u, ArrHash< Hash("Michael Spertus") >(), wxS("What does current time mean") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi"), Hash("Michael Spertus") >(), wxS("pessimizehint") > >() },
    { "p0343r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Metaprogramming HighOrder Functions") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Metaprogramming HighOrder Functions") > >() },
    { "p0345r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Allowing any unsigned integral type as parameter type for literal operators") > >() },
    { "p0346r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("A random Nomenclature Tweak") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("A random Nomenclature Tweak") > >() },
    { "p0347r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Melissa O'Neill"), Hash("R. Tim Song") >(), wxS("Simplifying simple uses of random") >, Rev< 1u, ArrHash< Hash("Melissa O'Neill"), Hash("R. Tim Song") >(), wxS("Simplifying simple uses of random") > >() },
    { "p0348r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Validity testing issues") > >() },
    { "p0349r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Assumptions about the size of datapar") > >() },
    { "p0350r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Integrating datapar with parallel algorithms and executors") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Integrating simd with parallel algorithms") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Integrating simd with parallel algorithms") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("Integrating simd with parallel algorithms") >, Rev< 4u, ArrHash< Hash("Matthias Kretz") >(), wxS("Integrating simd with parallel algorithms") > >() },
    { "p0352r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Faisal Vali"), Hash("Hubert S.K. Tong") >(), wxS("Smart References through Delegation An Alternative to Ns Operator Dot") >, Rev< 1u, ArrHash< Hash("Faisal Vali"), Hash("Hubert S.K. Tong") >(), wxS("Smart References through Delegation nd revision") > >() },
    { "p0353r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Unicode Encoding Conversions for the Standard Library") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("Unicode Friendly Encoding Conversions for the Standard Library") > >() },
    { "p0354r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("default  is  default  is  so") > >() },
    { "p0355r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Extending chrono to Calendars and Time Zones") >, Rev< 1u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Extending codechronocode to Calendars and Time Zones") >, Rev< 2u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Extending chrono to Calendars and Time Zones") >, Rev< 3u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Extending codechronocode to Calendars and Time Zones") >, Rev< 4u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Extending codechronocode to Calendars and Time Zones") >, Rev< 5u, ArrHash< Hash("Howard E. Hinnant"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Extending chrono to Calendars and Time Zones") >, Rev< 7u, ArrHash< Hash("Howard E. Hinnant"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Extending chrono to Calendars and Time Zones") > >() },
    { "p0356r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") >, Rev< 2u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") >, Rev< 3u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") >, Rev< 4u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") >, Rev< 5u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Simplified partial function application") > >() },
    { "p0357r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("referencewrapper for incomplete types") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("referencewrapper for incomplete types") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("referencewrapper for incomplete types") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("referencewrapper for incomplete types") > >() },
    { "p0358r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixes for notfn") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixes for notfn") > >() },
    { "p0359r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0360r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0361r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hartmut Kaiser"), Hash("Michael Wong"), Hash("Thomas Heller") >(), wxS("Invoking Algorithms asynchronously") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Hartmut Kaiser"), Hash("John Biddiscombe"), Hash("Michael Wong"), Hash("Thomas Heller") >(), wxS("Invoking Algorithms asynchronously") > >() },
    { "p0362r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Richards"), Hash("Gordon Brown"), Hash("Lee Howes"), Hash("Maria Rovatsou"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Towards support for Heterogeneous Devices in C Concurrency aspects") > >() },
    { "p0363r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Richards"), Hash("Gordon Brown"), Hash("Lee Howes"), Hash("Maria Rovatsou"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Towards support for Heterogeneous Devices in C Language aspects") > >() },
    { "p0364r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Patrice Roy"), Hash("Sean Middleditch"), Hash("Sunil Srivastava") >(), wxS("Report on Exception Handling Lite Disappointment from SG") > >() },
    { "p0365r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Report on SG a year later and future directions") > >() },
    { "p0366r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Extending the Transactional Memory Technical Specification with an intransaction Statemen") > >() },
    { "p0367r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jo\\u00EBl Falcou"), Hash("Ronan Keryell") >(), wxS("a C standard library class to qualify data accesses") > >() },
    { "p0369r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo"), Hash("Duncan P. N. Exon Smith"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Michael Wong"), Hash("Patrice Roy"), Hash("Tony van Eerd") >(), wxS(" Toronto ISO WG C Standard Meeting information") > >() },
    { "p0370r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges TS Design Updates Omnibus") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges TS Design Updates Omnibus") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges TS Design Updates Omnibus") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges TS Design Updates Omnibus") > >() },
    { "p0371r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Temporarily deprecate memoryorderconsume") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Temporarily discourage memoryorderconsume") > >() },
    { "p0372r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Davide C. C. Italiano"), Hash("Michael Spencer") >(), wxS("A type for utf data") > >() },
    { "p0373r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of File Literals") > >() },
    { "p0374r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David del Rio"), Hash("Javier Garcia-Blas"), Hash("Jose Daniel Garcia Sanchez"), Hash("Luis M. Sanchez"), Hash("Manuel F. Dolz"), Hash("Marco Danelutto"), Hash("Massimo Torquati") >(), wxS("Stream parallelism patterns") > >() },
    { "p0375r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("exhaustive attribute for enums") > >() },
    { "p0376r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("A Single Generalization of stdinvoke stdapply and stdvisit") > >() },
    { "p0377r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("stdintegralconstant with a Deduced Value Type") > >() },
    { "p0379r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Why a joining thread from P is a Bad Idea") > >() },
    { "p0380r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("A Contract Design") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("A Contract Design") > >() },
    { "p0381r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Numeric Width") >, Rev< 1u, ArrHash< Hash("John McFarlane"), Hash("Michael Wong") >(), wxS("Numeric Width") > >() },
    { "p0382r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Comments on P Overload sets as function arguments") > >() },
    { "p0384r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the June  Oulu meeting") > >() },
    { "p0385r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection Rationale design and evolution") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection Rationale design and evolution") >, Rev< 2u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection Rationale design and evolution") > >() },
    { "p0386r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Richard Smith") >(), wxS("Inline Variables") >, Rev< 2u, ArrHash< Hash("Hal Finkel"), Hash("Richard Smith") >(), wxS("Inline Variables") > >() },
    { "p0387r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Memory Model Issues for Concurrent Data Structures") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Memory Model Issues for Concurrent Data Structures") > >() },
    { "p0388r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Robert Haberlach") >(), wxS("Permit conversions to arrays of unknown bound") >, Rev< 1u, ArrHash< Hash("Robert Haberlach") >(), wxS("Permit conversions to arrays of unknown bound") >, Rev< 2u, ArrHash< Hash("Robert Haberlach") >(), wxS("Permit conversions to arrays of unknown bound") >, Rev< 3u, ArrHash< Hash("Robert Haberlach") >(), wxS("Permit conversions to arrays of unknown bound") >, Rev< 4u, ArrHash< Hash("Richard Smith"), Hash("Robert Haberlach") >(), wxS("Permit conversions to arrays of unknown bound") > >() },
    { "p0389r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Haberlach") >(), wxS("template keyword in unqualifiedids") > >() },
    { "p0390r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nickolas Pokhylets") >(), wxS("A Proposal to Add Pointer Cast Functions with Move Semantics to the Standard Library") > >() },
    { "p0391r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Introducing the term templated entity") > >() },
    { "p0392r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Adapting stringview by filesystem paths") > >() },
    { "p0393r0", 3u, RevList< Rev< 3u, ArrHash< Hash("Tony van Eerd") >(), wxS("Making Variant Greater Equal") > >() },
    { "p0394r0", 4u, RevList< Rev< 4u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("JF Bastien") >(), wxS("Hotel Parallelifornia terminate for Parallel Algorithms Exception Handling") > >() },
    { "p0396r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("C Concepts Active Issues List Snapshot of Revision ") > >() },
    { "p0397r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("C Standard Library Priority  Issues Resolved Directly In Oulu") > >() },
    { "p0398r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core issue  Explicit default constructors and copylistinitialization") > >() },
    { "p0399r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Networking TS  Threadpools") > >() },
    { "p0400r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Wording for Order of Evaluation of Function Arguments") > >() },
    { "p0401r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Extensions to the Allocator interface") >, Rev< 1u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") >, Rev< 2u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") >, Rev< 3u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") >, Rev< 4u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") >, Rev< 5u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") >, Rev< 6u, ArrHash< Hash("Chris Kennelly"), Hash("Jonathan Wakely") >(), wxS("Providing size feedback in the Allocator interface") > >() },
    { "p0403r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Literal suffixes for basicstringview") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Literal suffixes for basicstringview") > >() },
    { "p0404r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("James Touton") >(), wxS("Matching Types  Syntax Not found") > >() },
    { "p0405r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking TS changes from Kona") > >() },
    { "p0406r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Hal Finkel") >(), wxS("Intrusive Containers") > >() },
    { "p0407r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Allocatoraware basic stringbuf") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Allocatoraware basic stringbuf") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Allocatoraware basicstringbuf") > >() },
    { "p0408r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basic stringbufs Buffer") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basic stringbufs Buffer") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basic stringbufs Buffer") >, Rev< 3u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basicstringbufs Buffer") >, Rev< 4u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basicstringbufs Buffer") >, Rev< 5u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basicstringbufs Buffer") >, Rev< 6u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basicstringbufs Buffer") >, Rev< 7u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Efficient Access to basicstringbufs Buffer") > >() },
    { "p0409r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allow lambda capture  this") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allow lambda capture  this") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Allow lambda capture  this") > >() },
    { "p0411r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Separating Library Requirements and Preconditions") > >() },
    { "p0412r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("Benchmarking primitives") > >() },
    { "p0413r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Updating Parallel Execution Policy Names in the Parallelism TS") > >() },
    { "p0414r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Merging sharedptr changes from Library Fundamentals to C") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Merging sharedptr changes from Library Fundamentals to C") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Merging sharedptr changes from Library Fundamentals to C") > >() },
    { "p0415r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr for stdcomplex") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr for stdcomplex") > >() },
    { "p0416r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot R") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Operator Dot R") > >() },
    { "p0417r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("C should refer to ISOIEC   instead of ") >, Rev< 1u, ArrHash< Hash("Beman Dawes") >(), wxS("C should refer to ISOIEC   instead of  R") > >() },
    { "p0418r0", 2u, RevList< Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Fail or succeed there is no atomic lattice") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("Fail or succeed there is no atomic lattice") > >() },
    { "p0421r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mariusz Moczala") >(), wxS("Static class constructor") > >() },
    { "p0422r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Jeffrey"), Hash("Ali Sezgin"), Hash("Paul E. McKenney"), Hash("Tony Tye") >(), wxS("OutofThinAir Execution is Vacuous") > >() },
    { "p0423r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Variable templates for Networking TS traits") > >() },
    { "p0424r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Reconsidering literal operator templates for strings") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Louis Dionne") >(), wxS("Reconsidering literal operator templates for strings") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Louis Dionne") >(), wxS("String literals as nontype template parameters") > >() },
    { "p0425r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Metaprogramming by design not by accident") > >() },
    { "p0426r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr for stdchartraits") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr for stdchartraits") > >() },
    { "p0428r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Familiar template syntax for generic lambdas") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Familiar template syntax for generic lambdas") >, Rev< 2u, ArrHash< Hash("Louis Dionne") >(), wxS("Familiar template syntax for generic lambdas") > >() },
    { "p0429r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 2u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 3u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 4u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 5u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 6u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 7u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 8u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") >, Rev< 9u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatmap") > >() },
    { "p0430r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Jason Liu") >(), wxS("File system library on nonPOSIXlike operating systems") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Jason Liu") >(), wxS("File system library on nonPOSIXlike operating systems") >, Rev< 2u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Jason Liu") >(), wxS("File system library on nonPOSIXlike operating systems") > >() },
    { "p0431r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hyman Rosen") >(), wxS("Correcting Evaluation Order for C") > >() },
    { "p0432r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Implicit and Explicit Default Comparison Operators") > >() },
    { "p0433r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Walter E. Brown") >(), wxS("Toward a resolution of US and US Integrating template deduction for class templates into the standard library") >, Rev< 1u, ArrHash< Hash("Michael Spertus"), Hash("Walter E. Brown") >(), wxS("Toward a resolution of US and US Integrating template deduction for class templates into the standard library") >, Rev< 2u, ArrHash< Hash("Michael Spertus"), Hash("Stephan T. Lavavej"), Hash("Walter E. Brown") >(), wxS("Toward a resolution of US and US Integrating template deduction for class templates into the standard library") >, Rev< 3u, ArrHash< Hash("Michael Spertus"), Hash("Stephan T. Lavavej"), Hash("Walter E. Brown") >(), wxS("Toward a resolution of US and US Integrating template deduction for class templates into the standard library") > >() },
    { "p0434r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brett Searies") >(), wxS("Portable Interrupt Library") > >() },
    { "p0435r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Resolving LWG Issues re commontype") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Resolving LWG Issues re commontype") > >() },
    { "p0436r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("An Extensible Approach to Obtaining Selected Operators") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("An Extensible Approach to Obtaining Selected Operators") > >() },
    { "p0437r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Numeric Traits for the Next Standard Library") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Numeric Traits for the Standard Library") > >() },
    { "p0438r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Toward a random Technical Specification") > >() },
    { "p0439r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Make memoryorder a scoped enumeration") > >() },
    { "p0440r0", 1u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic View") >, Rev< 1u, ArrHash< Hash("H. Carter Edwards"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("James Reus"), Hash("Olivier Girioux") >(), wxS("Floating Point Atomic View") > >() },
    { "p0441r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges Merging Writable and MoveWritable") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Ranges Merging Writable and MoveWritable") > >() },
    { "p0443r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 1u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 2u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 3u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 4u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 5u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 6u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 7u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 9u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 10u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 11u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Eric A Niebler"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 12u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Eric A Niebler"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 13u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Eric A Niebler"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") >, Rev< 14u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("A Unified Executors Proposal for C") > >() },
    { "p0444r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed") >(), wxS("Unifying suspendbycall and suspendbyreturn") > >() },
    { "p0445r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0446r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0447r0", 28u, RevList< Rev< 0u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 1u, ArrHash< Hash("Guy Davidson"), Hash("Matthew Bentley"), Hash("Patrice Roy") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 2u, ArrHash< Hash("Guy Davidson"), Hash("Matthew Bentley"), Hash("Patrice Roy") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 3u, ArrHash< Hash("Guy Davidson"), Hash("Matthew Bentley"), Hash("Patrice Roy") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 4u, ArrHash< Hash("Guy Davidson"), Hash("Matthew Bentley"), Hash("Patrice Roy") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 8u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 9u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 10u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 11u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 12u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 13u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 14u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdcolony to the standard library") >, Rev< 15u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 16u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 17u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 18u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 19u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 20u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 21u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 22u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 23u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 24u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 25u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 26u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 27u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") >, Rev< 28u, ArrHash< Hash("Matthew Bentley") >(), wxS("Introduction of stdhive to the standard library") > >() },
    { "p0448r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("A strstream replacement using spancharT as") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("A strstream replacement using spancharT as") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("A strstream replacement using spancharT as buffer") >, Rev< 3u, ArrHash< Hash("Peter Sommerlad") >(), wxS("A strstream replacement using span as buffer") >, Rev< 4u, ArrHash< Hash("Peter Sommerlad") >(), wxS("A strstream replacement using span as buffer") > >() },
    { "p0451r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bryce Adelstein Lelbach") >(), wxS("FutureProofing Parallel Algorithms Exception Handling") > >() },
    { "p0452r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Binary transformreduce The Missing Overload") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Unifying numeric Parallel Algorithms") > >() },
    { "p0454r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("H. Carter Edwards") >(), wxS("Wording for a Minimal mdspan") > >() },
    { "p0457r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("String Prefix and Suffix Checking") >, Rev< 1u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("String Prefix and Suffix Checking") >, Rev< 2u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("String Prefix and Suffix Checking") > >() },
    { "p0458r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("Checking for Existence of an Element in Associative Containers") >, Rev< 1u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("Checking for Existence of an Element in Associative Containers") >, Rev< 2u, ArrHash< Hash("Mikhail Maltsev") >(), wxS("Checking for Existence of an Element in Associative Containers") > >() },
    { "p0459r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("C Extensions for Ranges Speculative Combined Proposal Document") > >() },
    { "p0460r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean Middleditch") >(), wxS("Flat containers wording") > >() },
    { "p0461r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Isabella Muerte"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed RCU C API") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed RCU C API") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("Geoffrey Romer"), Hash("Isabella Muerte"), Hash("Lance Roy"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed RCU C API") > >() },
    { "p0462r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Lawrence Crowl"), Hash("Michael Wong"), Hash("Olivier Girioux") >(), wxS("Marking memory order consume Dependency Chains") >, Rev< 1u, ArrHash< Hash("Clark Nelson"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jeff Preshing"), Hash("Lawrence Crowl"), Hash("Michael Wong"), Hash("Olivier Girioux"), Hash("Paul E. McKenney"), Hash("Torvald Riegel") >(), wxS("Marking memory order consume Dependency Chains") > >() },
    { "p0463r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("endian Just endian") >, Rev< 1u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("endian Just endian") > >() },
    { "p0464r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo"), Hash("Tony van Eerd") >(), wxS("Revisiting the meaning of fooConceptNameConceptName") >, Rev< 1u, ArrHash< Hash("Botond Ballo"), Hash("Tony van Eerd") >(), wxS("Revisiting the meaning of fooConceptNameConceptName") >, Rev< 2u, ArrHash< Hash("Botond Ballo"), Hash("Tony van Eerd") >(), wxS("Revisiting the meaning of fooConceptNameConceptName") > >() },
    { "p0465r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Procedural Function Interfaces") > >() },
    { "p0466r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") >, Rev< 1u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") >, Rev< 2u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") >, Rev< 3u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") >, Rev< 4u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") >, Rev< 5u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Layoutcompatibility and Pointerinterconvertibility Traits") > >() },
    { "p0467r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Iterator Concerns for Parallel Algorithms") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Iterator Concerns for Parallel Algorithms") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Iterator Concerns for Parallel Algorithms") > >() },
    { "p0468r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("A Proposal to Add an Intrusive Smart Pointer to the C Standard Library") >, Rev< 1u, ArrHash< Hash("Isabella Muerte") >(), wxS("An Intrusive Smart Pointer") > >() },
    { "p0469r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Sample in place") > >() },
    { "p0471r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Single argument stdinserter") > >() },
    { "p0472r0", 3u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Move stdmonostate to utility") >, Rev< 1u, ArrHash< Hash("Andrei Zissu"), Hash("David Sankel") >(), wxS("Put stdmonostate in utility") >, Rev< 2u, ArrHash< Hash("Andrei Zissu"), Hash("David Sankel") >(), wxS("Put stdmonostate in utility") >, Rev< 3u, ArrHash< Hash("Andrei Zissu"), Hash("David Sankel") >(), wxS("Put stdmonostate in utility") > >() },
    { "p0473r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS(" for stdvector concatenation") > >() },
    { "p0474r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Comparison in C Basic Facilities") > >() },
    { "p0475r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("LWG  guaranteed copy elision for piecewise construction") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("LWG  guaranteed copy elision for piecewise construction") > >() },
    { "p0476r0", 2u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Bitcasting object representations") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Bitcasting object representations") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("Bitcasting object representations") > >() },
    { "p0477r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("stdmonostatefunction") > >() },
    { "p0478r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Manganelli"), Hash("Michael Wong"), Hash("Sy Brand") >(), wxS("Template argument deduction for nonterminal function parameter packs") > >() },
    { "p0479r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Clay Trychta") >(), wxS("Attributes for Likely and Unlikely Branches") >, Rev< 1u, ArrHash< Hash("Clay Trychta") >(), wxS("Attributes for Likely and Unlikely Branches") >, Rev< 2u, ArrHash< Hash("Clay Trychta") >(), wxS("Attributes for Likely and Unlikely Branches") >, Rev< 4u, ArrHash< Hash("Clay Trychta") >(), wxS("Proposed wording for likely and unlikely attributes") >, Rev< 5u, ArrHash< Hash("Clay Trychta") >(), wxS("Proposed wording for likely and unlikely attributes") > >() },
    { "p0480r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Explicit type checking with structured bindings") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Structured bindings with explicit types") > >() },
    { "p0481r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Bravely Default") > >() },
    { "p0482r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings") >, Rev< 2u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings") >, Rev< 3u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings Revision ") >, Rev< 4u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings") >, Rev< 5u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings") >, Rev< 6u, ArrHash< Hash("Tom Honermann") >(), wxS("chart A type for UTF characters and strings Revision ") > >() },
    { "p0483r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Patrice Roy") >(), wxS("Extending Memory Management Tools And a Bit More") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") > >() },
    { "p0484r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Billy Baker"), Hash("Patrice Roy") >(), wxS("Enhancing Thread Constructor Attributes") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Billy Baker"), Hash("Patrice Roy") >(), wxS("Enhancing Thread Constructor Attributes") > >() },
    { "p0485r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Manganelli"), Hash("Michael Wong"), Hash("Sy Brand") >(), wxS("Amended rules for Partial Ordering of function templates") > >() },
    { "p0486r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ildus Nezametdinov"), Hash("Patrice Roy") >(), wxS("foreachiter algorithm proposal") > >() },
    { "p0487r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Fixing operator basicistream CharT LWG ") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Fixing operatorbasicistream CharT LWG ") > >() },
    { "p0488r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("WG Working paper NB Comments ISOIEC CD ") > >() },
    { "p0489r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Hedquist") >(), wxS("WG Working paper Late Comments on CD ") > >() },
    { "p0490r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core language changes addressing National Body comments for CD C") > >() },
    { "p0492r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Billy Robert O'Neal III"), Hash("Jason Liu"), Hash("Jonathan Wakely"), Hash("Nicolai Josuttis"), Hash("P.J. Plauger"), Hash("S. Davis Herring") >(), wxS("Proposed Resolution of C National Body Comments for Filesystem") >, Rev< 1u, ArrHash< Hash("Beman Dawes"), Hash("Billy Robert O'Neal III"), Hash("Jason Liu"), Hash("Jonathan Wakely"), Hash("Nicolai Josuttis"), Hash("P.J. Plauger"), Hash("S. Davis Herring") >(), wxS("Proposed Resolution of C National Body Comments for Filesystem") >, Rev< 2u, ArrHash< Hash("Beman Dawes"), Hash("Billy Robert O'Neal III"), Hash("Jason Liu"), Hash("Jonathan Wakely"), Hash("Nicolai Josuttis"), Hash("P.J. Plauger"), Hash("S. Davis Herring") >(), wxS("Proposed Resolution of C National Body Comments for Filesystem") > >() },
    { "p0493r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki") >(), wxS("Atomic maximumminimum") >, Rev< 1u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki") >(), wxS("Atomic maximumminimum") >, Rev< 2u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki") >(), wxS("Atomic maximumminimum") >, Rev< 3u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki"), Hash("Tim Northover") >(), wxS("Atomic maximumminimum") >, Rev< 4u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki"), Hash("Tim Northover") >(), wxS("Atomic maximumminimum") >, Rev< 5u, ArrHash< Hash("Al Grant"), Hash("Bronek Kozicki"), Hash("Tim Northover") >(), wxS("Atomic maximumminimum") > >() },
    { "p0494r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ildus Nezametdinov") >(), wxS("contiguouscontainer proposal") > >() },
    { "p0495r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Concurrency Safety in C Data Structures") > >() },
    { "p0497r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Fixes to sharedptr support for arrays") > >() },
    { "p0500r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Resolved Module TS N Issues") > >() },
    { "p0501r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Module TS Issues List") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Module TS Issues List") >, Rev< 2u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Module TS Issues List") >, Rev< 3u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Module TS Issues List") > >() },
    { "p0502r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("H. Carter Edwards"), Hash("JF Bastien") >(), wxS("Throwing out of a parallel algorithm terminatesbut how") > >() },
    { "p0503r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("Correcting library usage of literal type") > >() },
    { "p0504r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Revisiting inplace tag types for anyoptionalvariant") > >() },
    { "p0505r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Wording for GB ") > >() },
    { "p0506r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("use stringview for library function parameters instead of const string   const char ") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("use stringview for library function parameters instead of const string   const char ") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("use stringview for library function parameters instead of const string   const char ") > >() },
    { "p0507r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Sequencing of nonclass initialization") > >() },
    { "p0508r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Wording for GB ") > >() },
    { "p0509r0", 1u, RevList< Rev< 1u, ArrHash< Hash("James Dennett") >(), wxS("Updating Restrictions on exception handling") > >() },
    { "p0510r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("Disallowing references incomplete types arrays and empty variants") > >() },
    { "p0511r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Deduction guide for stdarray") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Deduction guide for stdarray") > >() },
    { "p0512r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Faisal Vali"), Hash("Michael Spertus"), Hash("Richard Smith") >(), wxS("Class Template Argument Deduction Assorted NB resolution and issues") > >() },
    { "p0513r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Poisoning the Hash") > >() },
    { "p0514r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Olivier Girioux") >(), wxS("Enhancing stdatomicflag for waiting") >, Rev< 1u, ArrHash< Hash("Olivier Girioux") >(), wxS("Enhancing stdatomicflag for waiting") >, Rev< 2u, ArrHash< Hash("Olivier Girioux") >(), wxS("Efficient waiting for concurrent programs") >, Rev< 3u, ArrHash< Hash("Olivier Girioux") >(), wxS("Efficient concurrent waiting for C") >, Rev< 4u, ArrHash< Hash("Olivier Girioux") >(), wxS("Efficient concurrent waiting for C") > >() },
    { "p0515r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Consistent comparison") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Consistent comparison") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Consistent comparison") >, Rev< 3u, ArrHash< Hash("Herb Sutter"), Hash("Jens Maurer"), Hash("Walter E. Brown") >(), wxS("Consistent comparison") > >() },
    { "p0516r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Clarify That sharedfutures Copy Operations have Wide Contracts") > >() },
    { "p0517r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Make futureerror Constructible") > >() },
    { "p0518r0", 1u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman"), Hash("Detlef Vollmann"), Hash("Jonathan Liffander"), Hash("Michael Wong") >(), wxS("Allowing copies as arguments to function objects given to parallel algorithms in response to CH") >, Rev< 1u, ArrHash< Hash("D. S. Hollman"), Hash("Detlef Vollmann"), Hash("Jonathan Liffander"), Hash("Michael Wong") >(), wxS("Allowing copies as arguments to function objects given to parallel algorithms in response to CH") > >() },
    { "p0519r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the November  Issaquah meeting") > >() },
    { "p0520r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the November  Issaquah meeting") > >() },
    { "p0521r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Stephan T. Lavavej") >(), wxS("Proposed Resolution for CA  sharedptr usecountunique") > >() },
    { "p0522r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("James Touton") >(), wxS("DR Matching of template templatearguments excludes compatible templates") > >() },
    { "p0523r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Wording for CH  Complexity of parallel algorithms") >, Rev< 1u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Wording for CH  Complexity of parallel algorithms") > >() },
    { "p0527r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Implicitly move from rvalue references in return statements") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("Implicitly move from rvalue references in return statements") > >() },
    { "p0528r0", 3u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Michael Spencer") >(), wxS("The Curious Case of Padding Bits Featuring Atomic CompareandExchange") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Michael Spencer") >(), wxS("The Curious Case of Padding Bits Featuring Atomic CompareandExchange") >, Rev< 2u, ArrHash< Hash("JF Bastien"), Hash("Michael Spencer") >(), wxS("The Curious Case of Padding Bits Featuring Atomic CompareandExchange") >, Rev< 3u, ArrHash< Hash("JF Bastien"), Hash("Michael Spencer") >(), wxS("The Curious Case of Padding Bits Featuring Atomic CompareandExchange") > >() },
    { "p0529r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Wording changes for proposed Modules TS extensions") > >() },
    { "p0532r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("On stdlaunder") > >() },
    { "p0533r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 1u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 2u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 3u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 4u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 5u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 6u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 7u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 8u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") >, Rev< 9u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("constexpr for cmath and cstdlib") > >() },
    { "p0534r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Oliver Kowalke") >(), wxS("callcc callwithcurrentcontinuation A lowlevel API for stackful context switching") >, Rev< 1u, ArrHash< Hash("Oliver Kowalke") >(), wxS("callcc callwithcurrentcontinuation A lowlevel API for stackful context switching") >, Rev< 2u, ArrHash< Hash("Oliver Kowalke") >(), wxS("callcc callwithcurrentcontinuation A lowlevel API for stackful context switching") >, Rev< 3u, ArrHash< Hash("Oliver Kowalke") >(), wxS("callcc callwithcurrentcontinuation A lowlevel API for stackful context switching") > >() },
    { "p0535r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Generalized Unpacking and Parameter Pack Slicing") > >() },
    { "p0536r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Implicit Return Type and Allowing Anonymous Types as Return Values") > >() },
    { "p0537r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Allow Attributes on Template Explicit Instantiations") > >() },
    { "p0538r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("A Qualified Replacement for pragma once") > >() },
    { "p0539r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Wide Integer Class") >, Rev< 1u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("A Proposal to add wideint Template Class") >, Rev< 2u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("A Proposal to add wideint Template Class") >, Rev< 3u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("A Proposal to add wideint Template Class") >, Rev< 4u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("A Proposal to add wideint Template Class") >, Rev< 5u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add wideint Template Class") > >() },
    { "p0540r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Laurent NAVARRO") >(), wxS("A Proposal to Add splitjoin of stringstringview to the Standard Library") >, Rev< 1u, ArrHash< Hash("Laurent NAVARRO") >(), wxS("A Proposal to Add splitjoin of stringstringview to the Standard Library") > >() },
    { "p0541r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("PostIncrement on Input and Output Iterators") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Ranges TS PostIncrement on Input and Output Iterators") > >() },
    { "p0542r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("Support for contract based programming in C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("Support for contract based programming in C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("Support for contract based programming in C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("John Lakos"), Hash("Jose Daniel Garcia Sanchez"), Hash("Nathan Myers") >(), wxS("Support for contract based programming in C") >, Rev< 4u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Support for contract based programming in C") >, Rev< 5u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Support for contract based programming in C") > >() },
    { "p0543r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Saturation arithmetic") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Saturation arithmetic") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Saturation arithmetic") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Saturation arithmetic") > >() },
    { "p0544r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("Titus Winters") >(), wxS("User Injection of Filesystems") > >() },
    { "p0545r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrey Semashev") >(), wxS("Supporting offsetof for Stablelayout Classes") > >() },
    { "p0546r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("H. Carter Edwards") >(), wxS("Span  foundation for the future") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("H. Carter Edwards") >(), wxS("Span  foundation for the future") >, Rev< 2u, ArrHash< Hash("Daniel Sunderland"), Hash("H. Carter Edwards") >(), wxS("Span  foundation for the future") > >() },
    { "p0547r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Assorted Object Concept Fixes") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Ranges TS Assorted Object Concept Fixes") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Ranges TS Assorted Object Concept Fixes") > >() },
    { "p0548r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("commontype and duration") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("commontype and duration") > >() },
    { "p0549r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 3u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 4u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 5u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 6u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") >, Rev< 7u, ArrHash< Hash("Walter E. Brown") >(), wxS("Adjuncts to stdhash") > >() },
    { "p0550r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Transformation Trait uncvref") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Transformation Trait uncvref") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Transformation Trait removecvref") > >() },
    { "p0551r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Thou Shalt Not Specialize std Function Templates") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Thou Shalt Not Specialize std Function Templates") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Thou Shalt Not Specialize std Function Templates") >, Rev< 3u, ArrHash< Hash("Walter E. Brown") >(), wxS("Thou Shalt Not Specialize std Function Templates") > >() },
    { "p0552r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("enableif vs requires") > >() },
    { "p0553r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Bit Operations") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Bit Operations") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Bit operations") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Bit operations") >, Rev< 4u, ArrHash< Hash("Jens Maurer") >(), wxS("Bit operations") > >() },
    { "p0554r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Composition of Arithmetic Types") >, Rev< 1u, ArrHash< Hash("John McFarlane") >(), wxS("Composition of Arithmetic Types") > >() },
    { "p0555r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("stringview for sourcelocation") > >() },
    { "p0556r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Integral powerof operations") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Integral powerof operations") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Integral powerof operations") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Integral powerof operations") > >() },
    { "p0557r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Concepts The Future of Generic Programming") > >() },
    { "p0558r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III"), Hash("Jens Maurer") >(), wxS("Resolving atomicT named base class inconsistencies") >, Rev< 1u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("Resolving atomicT named base class inconsistencies") > >() },
    { "p0559r0", 0u, RevList< Rev< 0u, ArrHash< Hash("J.C. van Winkel"), Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Wong"), Hash("Roger Orr"), Hash("Sylvain Bonnal"), Hash("Ville Voutilainen") >(), wxS("Operating principles for evolving C") > >() },
    { "p0560r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Miro Knejp") >(), wxS("Class template deduction guides for diamond operators") > >() },
    { "p0561r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("RAII Interface for Deferred Reclamation") >, Rev< 1u, ArrHash< Hash("Geoffrey Romer") >(), wxS("RAII Interface for Deferred Reclamation") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer") >(), wxS("RAII Interface for Deferred Reclamation") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer") >(), wxS("An RAII Interface for Deferred Reclamation") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer") >(), wxS("An RAII Interface for Deferred Reclamation") >, Rev< 5u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer") >(), wxS("An RAII Interface for Deferred Reclamation") >, Rev< 6u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer") >(), wxS("An RAII Interface for Deferred Reclamation") > >() },
    { "p0562r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Initialization List Symmetry") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("Initialization List Symmetry") >, Rev< 2u, ArrHash< Hash("Alan Talbot") >(), wxS("Trailing Commas in Baseclauses and Ctorinitializers") > >() },
    { "p0563r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Vector Front Operations") > >() },
    { "p0564r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Wording for threeway comparisons") > >() },
    { "p0565r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Prefix for operator as a pack generator and postfix operator for pack indexing") > >() },
    { "p0566r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("Geoffrey Romer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") >, Rev< 5u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures Hazard Pointer and ReadCopyUpdate RCU") > >() },
    { "p0567r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Asynchronous managed pointer for Heterogeneous computing") >, Rev< 1u, ArrHash< Hash("Gordon Brown"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Asynchronous managed pointer for Heterogeneous computing") > >() },
    { "p0568r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Towards Better Embedded programming support for C and an update on the status of SG two years later") > >() },
    { "p0569r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0570r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0571r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Type Requirements for numeric Algorithms") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Type Requirements for numeric Algorithms") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Type Requirements for numeric Algorithms") > >() },
    { "p0572r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen") >(), wxS("bitsizeof and bitoffsetof") >, Rev< 1u, ArrHash< Hash("Alex Christensen") >(), wxS("bitsizeof and bitoffsetof") >, Rev< 2u, ArrHash< Hash("Alex Christensen") >(), wxS("Static reflection of bit fields") > >() },
    { "p0573r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Abbreviated Lambdas for Fun and Profit") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Abbreviated Lambdas for Fun and Profit") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Abbreviated Lambdas for Fun and Profit") > >() },
    { "p0574r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Algorithm Complexity Constraints and Parallel Overloads") >, Rev< 1u, ArrHash< Hash("Anthony Williams") >(), wxS("Algorithm Complexity Constraints and Parallel Overloads") > >() },
    { "p0575r0", 2u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  Kona meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  Kona meeting") >, Rev< 2u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  Kona meeting") > >() },
    { "p0576r0", 1u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the February  Kona meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the February  Kona meeting") > >() },
    { "p0577r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Keep that Temporary") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Keptvalue statement for guard objects") > >() },
    { "p0578r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static Reflection in a Nutshell") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static Reflection in a Nutshell") > >() },
    { "p0579r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Constexpr for experimentalrangesiterator") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Constexpr for experimentalrangesiterator") > >() },
    { "p0581r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules") >, Rev< 1u, ArrHash< Hash("Beman Dawes"), Hash("Billy Robert O'Neal III"), Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Marshall Clow"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules") > >() },
    { "p0582r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Modules Contexts of template instantiations and name lookup") > >() },
    { "p0583r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("stdbyte is the correct name") > >() },
    { "p0584r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Module Interface and Preamble") > >() },
    { "p0586r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Federico Kircheis") >(), wxS("Safe integral comparisons") >, Rev< 1u, ArrHash< Hash("Federico Kircheis") >(), wxS("Safe integral comparisons") >, Rev< 2u, ArrHash< Hash("Federico Kircheis") >(), wxS("Safe integral comparisons") > >() },
    { "p0587r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Dennett"), Hash("Richard Smith") >(), wxS("Concepts TS revisited") > >() },
    { "p0588r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("Simplifying implicit lambda capture") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Simplifying implicit lambda capture") > >() },
    { "p0589r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Tuplebased for loops") > >() },
    { "p0590r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Herb Sutter") >(), wxS("A design static reflection") > >() },
    { "p0591r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Utility functions to implement usesallocator construction") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Utility functions to implement usesallocator construction") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("Utility functions to implement usesallocator construction") >, Rev< 3u, ArrHash< Hash("Pablo Halpern") >(), wxS("Utility functions to implement usesallocator construction") >, Rev< 4u, ArrHash< Hash("Pablo Halpern") >(), wxS("Utility functions to implement usesallocator construction") > >() },
    { "p0592r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") >, Rev< 3u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") >, Rev< 4u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") >, Rev< 5u, ArrHash< Hash("Ville Voutilainen") >(), wxS("To boldly suggest an overall plan for C") > >() },
    { "p0593r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("What to do with buffers that are not arrays and undefined behavior thereof") >, Rev< 1u, ArrHash< Hash("Richard Smith"), Hash("Ville Voutilainen") >(), wxS("Implicit creation of objects for lowlevel object manipulation") >, Rev< 2u, ArrHash< Hash("Richard Smith") >(), wxS("Implicit creation of objects for lowlevel object manipulation") >, Rev< 3u, ArrHash< Hash("Richard Smith") >(), wxS("Implicit creation of objects for lowlevel object manipulation") >, Rev< 4u, ArrHash< Hash("Richard Smith") >(), wxS("Implicit creation of objects for lowlevel object manipulation") >, Rev< 5u, ArrHash< Hash("Richard Smith") >(), wxS("Implicit creation of objects for lowlevel object manipulation") >, Rev< 6u, ArrHash< Hash("Richard Smith"), Hash("Ville Voutilainen") >(), wxS("Implicit creation of objects for lowlevel object manipulation") > >() },
    { "p0594r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Relative comparisons and stdlessT") > >() },
    { "p0595r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("The constexpr Operator") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("stdisconstantevaluated") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("stdisconstantevaluated") > >() },
    { "p0596r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("stdconstexprtrace and stdconstexprassert") >, Rev< 1u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Sideeffects in constant evaluation Output and consteval variables") > >() },
    { "p0597r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("stdconstexprvectorT") > >() },
    { "p0598r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Reflect Through Values Instead of Types") > >() },
    { "p0599r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("US noxecept for hash functions") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("US noxecept for hash functions") > >() },
    { "p0600r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("applying nodiscard for C") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("nodiscard in the Library") > >() },
    { "p0601r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Establishing a direction for SIMDenabled functions") > >() },
    { "p0602r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("variant and optional should propagate copymove triviality") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("variant and optional should propagate copymove triviality") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("variant and optional should propagate copymove triviality") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("variant and optional should propagate copymove triviality") >, Rev< 4u, ArrHash< Hash("Zhihao Yuan") >(), wxS("variant and optional should propagate copymove triviality") > >() },
    { "p0603r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter") >(), wxS("safe memcpy A simpler implementation primitive for seqlock and friends") > >() },
    { "p0604r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler"), Hash("Jonathan Wakely"), Hash("Pablo Halpern") >(), wxS("Resolving GB  US  US  US ") > >() },
    { "p0606r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Concepts Are Ready") > >() },
    { "p0607r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Inline Variables for the Standard Library") > >() },
    { "p0608r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("A sane variant converting constructor LEWG ") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("A sane variant converting constructor") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("A sane variant converting constructor") > >() },
    { "p0609r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("Attributes for Structured Bindings") >, Rev< 1u, ArrHash< Hash("Aaron Ballman") >(), wxS("Attributes for Structured Bindings") >, Rev< 2u, ArrHash< Hash("Aaron Ballman") >(), wxS("Attributes for Structured Bindings") >, Rev< 3u, ArrHash< Hash("Aaron Ballman") >(), wxS("Attributes for Structured Bindings") > >() },
    { "p0610r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Review Issues Resolved in Kona") > >() },
    { "p0611r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("More Better Operators") > >() },
    { "p0612r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("NB comment CH  volatile") > >() },
    { "p0613r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("NB comment GB Resolution of Core Issue ") > >() },
    { "p0614r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Rangebased for statements with initializer") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Rangebased for statements with initializer") > >() },
    { "p0615r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Renaming for structured bindings") > >() },
    { "p0616r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("depessimize legacy numeric algorithms with stdmove") > >() },
    { "p0618r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Deprecating codecvt") > >() },
    { "p0619r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Reviewing Deprecated Facilities of C for C") > >() },
    { "p0620r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Drafting for class template argument deduction issues") > >() },
    { "p0621r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Ready Ranges TS Issues") > >() },
    { "p0622r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Additional Core Language Working Group ready and tentatively ready Issues for the February  Kona meeting") > >() },
    { "p0623r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Anthony Williams"), Hash("Bryce Adelstein Lelbach") >(), wxS("Final C Parallel Algorithms Fixes") > >() },
    { "p0624r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Default constructible stateless lambdas") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Default constructible stateless lambdas") >, Rev< 2u, ArrHash< Hash("Louis Dionne") >(), wxS("Default constructible and assignable stateless lambdas") > >() },
    { "p0625r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Kona") > >() },
    { "p0627r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Melissa Mears") >(), wxS("Attribute to mark unreachable code") >, Rev< 1u, ArrHash< Hash("Melissa Mears") >(), wxS("Attribute to mark unreachable code") >, Rev< 3u, ArrHash< Hash("Melissa Mears") >(), wxS("Function to mark unreachable code") >, Rev< 5u, ArrHash< Hash("Jens Maurer") >(), wxS("Function to mark unreachable code") >, Rev< 6u, ArrHash< Hash("Jens Maurer") >(), wxS("Function to mark unreachable code") > >() },
    { "p0629r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Jason Merrill"), Hash("Nathan Sidwell") >(), wxS("Module interface vs imiplementation") > >() },
    { "p0630r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Duncan P. N. Exon Smith") >(), wxS("To boldly suggest a pub crawl for C Toronto") > >() },
    { "p0631r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 1u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 2u, ArrHash< Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 3u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 4u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 5u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 6u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 7u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") >, Rev< 8u, ArrHash< Hash("John McFarlane"), Hash("Lev Minkovsky") >(), wxS("Math Constants") > >() },
    { "p0632r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Proposal of uninitialized attribute") > >() },
    { "p0633r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne") >(), wxS("Exploring the design space of metaprogramming and reflection") > >() },
    { "p0634r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Down with typename") >, Rev< 1u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Nina Dinka Ranns") >(), wxS("Down with typename") >, Rev< 2u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Nina Dinka Ranns") >(), wxS("Down with typename") >, Rev< 3u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Nina Dinka Ranns") >(), wxS("Down with typename") > >() },
    { "p0635r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Raviv") >(), wxS("Add carray method to stdarray") > >() },
    { "p0636r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") >, Rev< 3u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") > >() },
    { "p0637r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Capture this with initialize") > >() },
    { "p0638r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ed Schouten") >(), wxS("CrochemorePerrin search algorithm for stdsearch") > >() },
    { "p0639r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("Changing attack vector of the constexprvector") > >() },
    { "p0640r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Emil Dotchevski"), Hash("Peter Dimov") >(), wxS("Userdefined exception information and diagnostic information in exception objects") > >() },
    { "p0641r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Resolving Core Issue  const mismatch with defaulted copy constructor") >, Rev< 1u, ArrHash< Hash("Botond Ballo"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Resolving Core Issue  const mismatch with defaulted copy constructor") >, Rev< 2u, ArrHash< Hash("Botond Ballo"), Hash("Daniel Kr\\u00FCgler") >(), wxS("Resolving Core Issue  const mismatch with defaulted copy constructor") > >() },
    { "p0642r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Structural Support for C Concurrency") >, Rev< 1u, ArrHash< Hash("Mingxin Wang"), Hash("Wei Chen") >(), wxS("Structural Support for C Concurrency") >, Rev< 2u, ArrHash< Hash("Mingxin Wang"), Hash("Wei Chen") >(), wxS("The Concurrent Invocation Library") >, Rev< 3u, ArrHash< Hash("Mingxin Wang"), Hash("Wei Chen") >(), wxS("The Concurrent Invocation Library") >, Rev< 4u, ArrHash< Hash("Mingxin Wang"), Hash("Wei Chen") >(), wxS("The Concurrent Invocation Library") > >() },
    { "p0643r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Omnibus paperToronto  meeting") > >() },
    { "p0644r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Forward without forward") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Forward without forward") > >() },
    { "p0645r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 5u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 7u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 9u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") >, Rev< 10u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Formatting") > >() },
    { "p0646r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms") >, Rev< 1u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms I listforward list") > >() },
    { "p0647r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Floating point value access for stdratio") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Floating point value access for stdratio") > >() },
    { "p0648r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Extending Tuplelike algorithms to ProductTyp") > >() },
    { "p0649r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("Other ProductType algorithms") > >() },
    { "p0650r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C Monadic interface") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C Monadic interface") >, Rev< 2u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("C Monadic interface") > >() },
    { "p0651r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Switch the Ranges TS to Use Variable Concepts") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Switch the Ranges TS to Use Variable Concepts") > >() },
    { "p0652r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Anton Malakhov"), Hash("Antony Polukhin"), Hash("Sergey Murylev") >(), wxS("Concurrent associative data structure with unsynchronized view") >, Rev< 1u, ArrHash< Hash("Anton Malakhov"), Hash("Antony Polukhin"), Hash("Sergey Murylev") >(), wxS("Concurrent associative data structure with unsynchronized view") >, Rev< 2u, ArrHash< Hash("Anton Malakhov"), Hash("Antony Polukhin"), Hash("Sergey Murylev") >(), wxS("Concurrent associative data structure with unsynchronized view") >, Rev< 3u, ArrHash< Hash("Anton Malakhov"), Hash("Antony Polukhin"), Hash("Sergey Murylev") >(), wxS("Concurrent associative data structure with unsynchronized view") > >() },
    { "p0653r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes") >(), wxS("pointertraits utility to convert to raw pointer") >, Rev< 1u, ArrHash< Hash("Glen Joseph Fernandes") >(), wxS("Utility to convert a pointer to a raw pointer") >, Rev< 2u, ArrHash< Hash("Glen Joseph Fernandes") >(), wxS("Utility to convert a pointer to a raw pointer") > >() },
    { "p0654r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lo\\u00efc Joly") >(), wxS("Explicit struct") > >() },
    { "p0655r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("Michael Park") >(), wxS("visitR Explicit Return Type for visit") >, Rev< 1u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("Michael Park") >(), wxS("visitR Explicit Return Type for visit") > >() },
    { "p0656r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Reducing ratio") > >() },
    { "p0657r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Deprecate Certain Declarations in the Global Namespace") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Deprecate Certain Declarations in the Global Namespace") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Deprecate Certain Declarations in the Global Namespace") > >() },
    { "p0658r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Proposal for adding alias declarations to concepts") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Proposal for adding alias declarations to concepts") > >() },
    { "p0659r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Adding status to stdfuture") > >() },
    { "p0660r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread") >, Rev< 2u, ArrHash< Hash("Anthony Williams"), Hash("Herb Sutter"), Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread Rev ") >, Rev< 3u, ArrHash< Hash("Anthony Williams"), Hash("Herb Sutter"), Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread") >, Rev< 4u, ArrHash< Hash("Anthony Williams"), Hash("Herb Sutter"), Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread") >, Rev< 5u, ArrHash< Hash("Anthony Williams"), Hash("Herb Sutter"), Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread") >, Rev< 6u, ArrHash< Hash("Anthony Williams"), Hash("Billy Robert O'Neal III"), Hash("Herb Sutter"), Hash("Nicolai Josuttis") >(), wxS("A Cooperatively Interruptible Joining Thread Rev ") >, Rev< 7u, ArrHash< Hash("Anthony Williams"), Hash("Billy Robert O'Neal III"), Hash("Herb Sutter"), Hash("Lewis Baker"), Hash("Nicolai Josuttis") >(), wxS("Interrupt Tokens and a Joining Thread Rev ") >, Rev< 8u, ArrHash< Hash("Anthony Williams"), Hash("Billy Robert O'Neal III"), Hash("Herb Sutter"), Hash("Lewis Baker"), Hash("Nicolai Josuttis") >(), wxS("Stop Tokens and a Joining Thread") >, Rev< 9u, ArrHash< Hash("Anthony Williams"), Hash("Billy Robert O'Neal III"), Hash("Herb Sutter"), Hash("Lewis Baker"), Hash("Nicolai Josuttis") >(), wxS("Stop Token and Joining Thread") >, Rev< 10u, ArrHash< Hash("Anthony Williams"), Hash("Billy Robert O'Neal III"), Hash("Herb Sutter"), Hash("Lewis Baker"), Hash("Nicolai Josuttis") >(), wxS("Stop Token and Joining Thread") > >() },
    { "p0661r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Allan Deutsch") >(), wxS("slotmap Container in C") > >() },
    { "p0662r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Wording for Ranges TS Issue   US Update rangedforloop wording") > >() },
    { "p0663r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges TS Ready Issues for the July  Toronto meeting") > >() },
    { "p0664r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines TS Issues") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutines TS Issues") >, Rev< 2u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 3u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 4u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 5u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 6u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 7u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") >, Rev< 8u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Coroutine TS Issues") > >() },
    { "p0665r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tristan Brindle") >(), wxS("Allowing Class Template Specializations in Unrelated Namespaces") >, Rev< 1u, ArrHash< Hash("Tristan Brindle") >(), wxS("Allowing Class Template Specializations in Associated Namespaces revision ") > >() },
    { "p0666r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alasdair Mackintosh") >(), wxS("C Latches and Barriers") >, Rev< 1u, ArrHash< Hash("Olivier Girioux") >(), wxS("Revised Latches and Barriers for C") >, Rev< 2u, ArrHash< Hash("Olivier Girioux") >(), wxS("Revised Latches and Barriers for C") > >() },
    { "p0667r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("The future of stdfuture extensions") > >() },
    { "p0668r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") >, Rev< 5u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Revising the C memory model") > >() },
    { "p0669r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson"), Hash("Michael B. McLaughlin") >(), wxS("Why We Should Standardize D Graphics for C") > >() },
    { "p0670r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection of functions") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection of functions") >, Rev< 2u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Static reflection of functions") >, Rev< 3u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Function reflection") >, Rev< 4u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Function reflection") > >() },
    { "p0671r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann") >(), wxS("Parametric Functions") >, Rev< 1u, ArrHash< Hash("Alex Naumann") >(), wxS("Parametric Functions") >, Rev< 2u, ArrHash< Hash("Alex Naumann") >(), wxS("Selfexplanatory Function Arguments") > >() },
    { "p0672r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Jo\\u00EBl Falcou"), Hash("Peter Gottschling") >(), wxS("Implicit Evaluation of auto Variables") > >() },
    { "p0673r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Merge Concurrency TS atomic pointers into C working draft") > >() },
    { "p0674r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Extending makeshared to Support Arrays") >, Rev< 1u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Extending makeshared to Support Arrays") > >() },
    { "p0675r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Numeric Traits for Type Composition") > >() },
    { "p0676r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Felix Petriconi"), Hash("Sean Parent") >(), wxS("Towards a Good Future") > >() },
    { "p0678r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("Business Requrements for Modules") > >() },
    { "p0679r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("Forward progress vs futures and continuations") > >() },
    { "p0680r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Torvald Riegel") >(), wxS("SG efficiency") > >() },
    { "p0681r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Precise Semantics for Assertions") > >() },
    { "p0682r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Repairing elementary string conversions") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Repairing elementary string conversions") > >() },
    { "p0683r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Default member initializers for bitfields") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Default member initializers for bitfields") > >() },
    { "p0684r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Titus Winters") >(), wxS("C Stability Velocity and Deployment Plans") >, Rev< 1u, ArrHash< Hash("Titus Winters") >(), wxS("C Stability Velocity and Deployment Plans") >, Rev< 2u, ArrHash< Hash("Titus Winters") >(), wxS("C Stability Velocity and Deployment Plans") > >() },
    { "p0685r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0686r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0687r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("Hartmut Kaiser"), Hash("Michael Wong"), Hash("Ruyman Reyes") >(), wxS("Data Movement in C") > >() },
    { "p0688r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("Jared Hoberock") >(), wxS("A Proposal to Simplify the Unified Executors Design") > >() },
    { "p0689r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("A Word about Modules") > >() },
    { "p0690r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III"), Hash("JF Bastien") >(), wxS("Tearable Atomics") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Billy Robert O'Neal III"), Hash("JF Bastien") >(), wxS("Tearable Atomics") > >() },
    { "p0691r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Hubert S.K. Tong"), Hash("John H. Spicer") >(), wxS("Integrating Concepts Open items for consideration") > >() },
    { "p0692r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Access Specifiers and Specializations") >, Rev< 1u, ArrHash< Hash("Matt Calabrese") >(), wxS("Access Checking on Specializations") > >() },
    { "p0694r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Function declarations using concepts") > >() },
    { "p0695r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Alternative concepts") > >() },
    { "p0696r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Remove abbreviated functions and templateintroduction syntax from the Concepts TS") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("Remove abbreviated functions and templateintroduction syntax from the Concepts TS") > >() },
    { "p0697r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Clarifying the status of feature test macros") > >() },
    { "p0698r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Toronto") > >() },
    { "p0699r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Toronto") > >() },
    { "p0700r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Alternatives to operator dot") > >() },
    { "p0701r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Back to the stdfuture") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Back to the stdfuture") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Hartmut Kaiser"), Hash("Micha\\u0142 Dominiak") >(), wxS("Back to the stdfuture Part II") > >() },
    { "p0702r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Language support for Constructor Template Argument Deduction") >, Rev< 1u, ArrHash< Hash("Jason Merrill"), Hash("Michael Spertus") >(), wxS("Language support for Constructor Template Argument Deduction") > >() },
    { "p0703r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Networking TS Issues") > >() },
    { "p0704r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Fixing constqualified pointers to members") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Fixing constqualified pointers to members") > >() },
    { "p0705r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Implicit and Explicit conversions") > >() },
    { "p0706r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Efficient headers for modules or not") > >() },
    { "p0707r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclasses") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclasses Generative C") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclasses Generative C") >, Rev< 3u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclasses Generative C") >, Rev< 4u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclasses Generative C") >, Rev< 5u, ArrHash< Hash("Herb Sutter") >(), wxS("Metaclass functions for generative C") > >() },
    { "p0709r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Zerooverhead deterministic exceptions Throwing values") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Zerooverhead deterministic exceptions Throwing values") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Zerooverhead deterministic exceptions Throwing values") >, Rev< 3u, ArrHash< Hash("Herb Sutter") >(), wxS("Zerooverhead deterministic exceptions Throwing values") >, Rev< 4u, ArrHash< Hash("Herb Sutter") >(), wxS("Zerooverhead deterministic exceptions Throwing values") > >() },
    { "p0710r0", 1u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the July  Toronto meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the July  Toronto meeting") > >() },
    { "p0711r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the July  Toronto meeting") > >() },
    { "p0712r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Herb Sutter") >(), wxS("Implementing language support for compiletime programming") > >() },
    { "p0713r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Identifying Module Source Code") >, Rev< 1u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Identifying Module Source") > >() },
    { "p0714r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Identically Named Namespaces and nonExported Symbols") > >() },
    { "p0715r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Exporting Using Directives") > >() },
    { "p0716r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Richard Smith") >(), wxS("Unified concept definition syntax") > >() },
    { "p0717r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Richard Smith") >(), wxS("Semantic constraint matching for concepts") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Richard Smith") >(), wxS("Semantic constraint matching for concepts") > >() },
    { "p0718r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Revising atomicsharedptr for C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Revising atomicsharedptr for C") > >() },
    { "p0721r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Exporting Using Declarations") > >() },
    { "p0722r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Controlling destruction in delete expressions") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Richard Smith") >(), wxS("Efficient sized delete for variable sized classes") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Richard Smith") >(), wxS("Efficient sized delete for variable sized classes") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Richard Smith") >(), wxS("Efficient sized delete for variable sized classes") > >() },
    { "p0723r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson"), Hash("John H. Spicer") >(), wxS("Response to Clarifying the status of feature test macros") > >() },
    { "p0724r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Merge the Concepts TS Working Draft into the C working draft") > >() },
    { "p0725r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Remove the requirement for constrainedtypespecifiers to be deduced to the same type from the Concepts TS") > >() },
    { "p0726r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Duncan P. N. Exon Smith") >(), wxS("Does the Concepts TS Improve on C") > >() },
    { "p0727r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  Temporary objects vs temporary expressions") > >() },
    { "p0728r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comment ") > >() },
    { "p0729r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Proposed wording for Networking TS NB comment GB ") > >() },
    { "p0730r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Options for addressing requiresclause syntax ambiguities") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Options for addressing requiresclause syntax ambiguities") > >() },
    { "p0731r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Interface Imports") > >() },
    { "p0732r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder") >(), wxS("Class Types in NonType Template Parameters") >, Rev< 1u, ArrHash< Hash("Jeff Snyder"), Hash("Louis Dionne") >(), wxS("Class Types in NonType Template Parameters") >, Rev< 2u, ArrHash< Hash("Jeff Snyder"), Hash("Louis Dionne") >(), wxS("Class Types in NonType Template Parameters") > >() },
    { "p0734r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Wording Paper C extensions for Concepts") > >() },
    { "p0735r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Will Deacon") >(), wxS("Interaction of memoryorderconsume with release sequences") >, Rev< 1u, ArrHash< Hash("Jade Alglave"), Hash("Will Deacon") >(), wxS("Interaction of memoryorderconsume with release sequences") > >() },
    { "p0736r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Nameless parameters and unutterable specializations") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Nameless parameters and unutterable specializations") > >() },
    { "p0737r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Michael Wong"), Hash("Thomas W Rodgers") >(), wxS("Execution Context of Execution Agents") > >() },
    { "p0738r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("I Stream You Stream We All Stream for istreamiterator") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("I Stream You Stream We All Stream for istreamiterator") >, Rev< 2u, ArrHash< Hash("Casey Carter") >(), wxS("I Stream You Stream We All Stream for istreamiterator") > >() },
    { "p0739r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Stephan T. Lavavej"), Hash("Walter E. Brown") >(), wxS("Some improvements to class template argument deduction integration into the standard library") > >() },
    { "p0740r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges TS Immediate Issues from the July  Toronto meeting") > >() },
    { "p0742r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comment resolutions") > >() },
    { "p0745r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Concepts inplace syntax") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Concepts inplace syntax") > >() },
    { "p0746r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comment  US") > >() },
    { "p0747r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comments  GB and  GB") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comment  GB but not  GB") > >() },
    { "p0748r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Wording for Networking PDTS ballot comments on reentrancy") > >() },
    { "p0749r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Namespace Pervasiveness  Modules") > >() },
    { "p0750r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Consume") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Paul E. McKenney") >(), wxS("Consume") > >() },
    { "p0752r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("stdvector Destruction Order") > >() },
    { "p0753r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("Manipulators for C Synchronized Buffered Ostream") >, Rev< 1u, ArrHash< Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("Manipulators for C Synchronized Buffered Ostream") >, Rev< 2u, ArrHash< Hash("Pablo Halpern"), Hash("Peter Sommerlad") >(), wxS("Manipulators for C Synchronized Buffered Ostream") > >() },
    { "p0754r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("version") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("version") >, Rev< 2u, ArrHash< Hash("Alan Talbot") >(), wxS("version") > >() },
    { "p0756r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Lambda syntax should be more liberal in what it accepts") > >() },
    { "p0757r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("regexiterator should be iterable") > >() },
    { "p0758r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Implicit conversion traits and utility functions") >, Rev< 1u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Implicit conversion traits and utility functions") > >() },
    { "p0759r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("fpos Requirements") >, Rev< 1u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("fpos requirements") > >() },
    { "p0761r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Michael Wong") >(), wxS("Executors Design Document") >, Rev< 1u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Michael Wong") >(), wxS("Executors Design Document") >, Rev< 2u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland"), Hash("Michael Wong") >(), wxS("Executors Design Document") > >() },
    { "p0762r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Concerns about expectedT E from the BoostOutcome peer review") > >() },
    { "p0766r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Fixing smallish functionality gaps in constraints") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Fixing smallish functionality gaps in constraints") > >() },
    { "p0767r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Expunge POD") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Deprecate POD") > >() },
    { "p0768r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Library Support for the Spaceship Comparison Operaton") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Library Support for the Spaceship Comparison Operator") > >() },
    { "p0769r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Dan Raviv") >(), wxS("Add shift to algorithm") >, Rev< 1u, ArrHash< Hash("Dan Raviv") >(), wxS("Add shift to algorithm") >, Rev< 2u, ArrHash< Hash("Dan Raviv") >(), wxS("Add shift to algorithm") > >() },
    { "p0770r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Kilburn") >(), wxS("A Proposal to Specify Behavior in Case of Exception Allocation Failure") > >() },
    { "p0771r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("stdfunction move operations should be noexcept") >, Rev< 1u, ArrHash< Hash("Nevin Liber"), Hash("Pablo Halpern") >(), wxS("stdfunction move constructor should be noexcept") > >() },
    { "p0772r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed") >(), wxS("ExecutionAgent Local Storage") >, Rev< 1u, ArrHash< Hash("Alex Voicu"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Nat Goodspeed"), Hash("Paul E. McKenney"), Hash("Tony Tye") >(), wxS("Execution Agent Local Storage") > >() },
    { "p0773r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Bob Steagall") >(), wxS("Towards meaningful fancy pointers") > >() },
    { "p0774r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Moduledecl location") > >() },
    { "p0775r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("module partitions") > >() },
    { "p0776r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Rebase the Concurrency TS onto C Standard") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Rebase the Parallelism TS onto the C Standard") > >() },
    { "p0777r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Treating Unnecessary decay") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Treating Unnecessary decay") > >() },
    { "p0778r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Names") > >() },
    { "p0779r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Proposing operator try with added native C macro functions") > >() },
    { "p0780r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Allow pack expansion in lambda initcapture") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Allow pack expansion in lambda initcapture") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Allow pack expansion in lambda initcapture") > >() },
    { "p0781r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("A Modern C Signature for main") > >() },
    { "p0782r0", 2u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Allan Deutsch"), Hash("Erich Keane") >(), wxS("A Case for SimplifyingImproving Natural Syntax Concepts") >, Rev< 1u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Erich Keane") >(), wxS("Constraining Concepts Overload Sets") >, Rev< 2u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Erich Keane"), Hash("Sean R. Spillane") >(), wxS("Constraining Concepts Overload Sets") > >() },
    { "p0783r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrii Grynenko"), Hash("Jay Feldblum"), Hash("Lee Howes") >(), wxS("Continuations without overcomplicating the future") > >() },
    { "p0784r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Richard Smith") >(), wxS("Standard containers and constexpr") >, Rev< 1u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Richard Smith") >(), wxS("Standard containers and constexpr") >, Rev< 2u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Richard Smith") >(), wxS("Standard containers and constexpr") >, Rev< 3u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Richard Smith") >(), wxS("More constexpr containers") >, Rev< 4u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Richard Smith") >(), wxS("More constexpr containers") >, Rev< 5u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Peter Dimov"), Hash("Richard Smith") >(), wxS("More constexpr containers") >, Rev< 6u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Peter Dimov"), Hash("Richard Smith") >(), wxS("More constexpr containers") >, Rev< 7u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne"), Hash("Nina Dinka Ranns"), Hash("Peter Dimov"), Hash("Richard Smith") >(), wxS("More constexpr containers") > >() },
    { "p0785r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Runtimesized arrays and a C wrapper") > >() },
    { "p0786r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("SuccessOrFailure ValuedOrError and ValuedOrNone types") >, Rev< 1u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("ValuedOrError and ValueOrNone types") > >() },
    { "p0787r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Proclaimed Ownership") > >() },
    { "p0788r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Standard Library Specification in a Concepts and Contracts World") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Standard Library Specification in a Concepts and Contracts World") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Standard Library Specification in a Concepts and Contracts World") >, Rev< 3u, ArrHash< Hash("Walter E. Brown") >(), wxS("Standard Library Specification in a Concepts and Contracts World") > >() },
    { "p0789r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Range Adaptors and Utilities") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Range Adaptors and Utilities") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Range Adaptors and Utilities") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("Range Adaptors and Utilities") > >() },
    { "p0790r0", 2u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Effect of operator on the C Standard Library") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("Effect of operator on the C Standard Library") >, Rev< 2u, ArrHash< Hash("David Stone") >(), wxS("Effect of operator on the C Standard Library") > >() },
    { "p0791r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jakob Riedle") >(), wxS("Concepts are Adjectives not Nouns") > >() },
    { "p0792r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 1u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 2u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 3u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 4u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 5u, ArrHash< Hash("Vittorio Romeo") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 6u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 7u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 8u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 9u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 10u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 11u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 12u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 13u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") >, Rev< 14u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Vittorio Romeo"), Hash("Zhihao Yuan") >(), wxS("functionref a nonowning reference to a Callable") > >() },
    { "p0793r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0794r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0795r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Kenneth Benzie"), Hash("Michael Wong"), Hash("Neil Henning"), Hash("Sy Brand") >(), wxS("From Vulkan with love a plea to reconsider the Module Keyword to be contextual") > >() },
    { "p0796r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Supporting Heterogeneous  Distributed Computing Through Affinity") >, Rev< 1u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Supporting Heterogeneous  Distributed Computing Through Affinity") >, Rev< 2u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Supporting Heterogeneous  Distributed Computing Through Affinity") >, Rev< 3u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Supporting Heterogeneous  Distributed Computing Through Affinity") > >() },
    { "p0797r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Matti Rintala"), Hash("Michael Wong") >(), wxS("Exception Handling in Parallel STL Algorithms") >, Rev< 1u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Matti Rintala"), Hash("Michael Wong"), Hash("Patrice Roy") >(), wxS("Handling Concurrent Exceptions with Executors") >, Rev< 2u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Matti Rintala"), Hash("Michael Wong"), Hash("Patrice Roy") >(), wxS("Handling Concurrent Exceptions with Executors") > >() },
    { "p0798r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") >, Rev< 2u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") >, Rev< 3u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") >, Rev< 4u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") >, Rev< 6u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") >, Rev< 8u, ArrHash< Hash("Sy Brand") >(), wxS("Monadic operations for stdoptional") > >() },
    { "p0799r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chris Szalwinski"), Hash("Hubert S.K. Tong"), Hash("Michael Wong"), Hash("Stephen Michell") >(), wxS("Programming vulnerabilities for C part of WG N") >, Rev< 1u, ArrHash< Hash("Stephen Michell") >(), wxS("Vulnerability descriptions for the programming language C") > >() },
    { "p0800r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("The Concepts TS improves upon C") > >() },
    { "p0801r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Extensions for Disambiguation Tags") > >() },
    { "p0802r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Bob Steagall"), Hash("Nicolai Josuttis"), Hash("Walter E. Brown") >(), wxS("Applying Concepts to the Standard Library") > >() },
    { "p0803r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Endian Library Request for Comments") > >() },
    { "p0804r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Impact of the Modules TS on the C tools ecosystem") > >() },
    { "p0805r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Comparing containers") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Comparing Containers") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Comparing Containers") > >() },
    { "p0806r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Deprecate Implicit Capture of thist") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Deprecate implicit capture of this via ") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Deprecate implicit capture of this via ") > >() },
    { "p0807r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("An Adjective Syntax for Concepts") > >() },
    { "p0808r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Ranges Naming") > >() },
    { "p0809r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Comparing Unordered Containers") > >() },
    { "p0810r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Deane"), Hash("Jason Turner") >(), wxS("constexpr in Practice") > >() },
    { "p0811r0", 3u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Wellbehaved interpolation for numbers and pointers") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Wellbehaved interpolation for numbers and pointers") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Wellbehaved interpolation for numbers and pointers") >, Rev< 3u, ArrHash< Hash("S. Davis Herring") >(), wxS("Wellbehaved interpolation for numbers and pointers") > >() },
    { "p0812r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("copylistinitialization is inherently un") > >() },
    { "p0813r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("construct shall Return the Replaced Address") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("construct shall Return the Replaced Address") > >() },
    { "p0814r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("hashcombine Again") >, Rev< 2u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("hashcombine Again") > >() },
    { "p0815r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Albuquerque") > >() },
    { "p0816r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("No More Nested Namespaces in Library Design") > >() },
    { "p0817r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the November  Albuquerque meeting") > >() },
    { "p0818r0", 1u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the November  Albuquerque meeting") >, Rev< 1u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the November  Albuquerque meeting") > >() },
    { "p0819r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Formally Supporting Feature Macros") > >() },
    { "p0820r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Tim Shen") >(), wxS("Feedback on PR") >, Rev< 1u, ArrHash< Hash("Tim Shen") >(), wxS("Feedback on Pr") >, Rev< 2u, ArrHash< Hash("Tim Shen") >(), wxS("Feedback on P") >, Rev< 3u, ArrHash< Hash("Tim Shen") >(), wxS("Feedback on P") >, Rev< 4u, ArrHash< Hash("Matthias Kretz"), Hash("Tim Shen") >(), wxS("Feedback on P") > >() },
    { "p0821r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Douglas") >(), wxS("Teaching Concepts TS Online") > >() },
    { "p0822r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Modules Are a Tooling Opportunity") > >() },
    { "p0824r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Charley Bay"), Hash("Michael Wong"), Hash("Odin Holmes") >(), wxS("Summary of SG discussion on systemerror towards exceptionless error handling") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Charley Bay"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Odin Holmes") >(), wxS("Summary of SG discussion on systemerror") > >() },
    { "p0825r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("A friendlier tuple get") >, Rev< 1u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("A friendlier tuple get") > >() },
    { "p0826r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("SFINAEfriendly stdbind") > >() },
    { "p0827r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane"), Hash("Louis Dionne") >(), wxS("GeneralPurpose Constant Value Type") > >() },
    { "p0828r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Elastic Integers") >, Rev< 1u, ArrHash< Hash("John McFarlane") >(), wxS("Elastic Integers") > >() },
    { "p0829r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding proposal") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Proposal") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Proposal") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Proposal") >, Rev< 4u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Proposal") > >() },
    { "p0830r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Using Concepts and requires in the C Standard Library") > >() },
    { "p0831r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Keep alias syntax extendable") > >() },
    { "p0832r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Module TS Does Not Support Intended Use Case") > >() },
    { "p0834r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Lifting overload sets into objects") > >() },
    { "p0835r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Adopt SD feature macros into the C working draft") > >() },
    { "p0836r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Gordon Brown"), Hash("Michael Haidl"), Hash("Michael Wong"), Hash("Michel Steuwer"), Hash("Ruyman Reyes"), Hash("Toomas Remmelg") >(), wxS("Introduce Parallelism to the Ranges TS") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella"), Hash("Gordon Brown"), Hash("Michael Haidl"), Hash("Michael Wong"), Hash("Michel Steuwer"), Hash("Ruyman Reyes"), Hash("Toomas Remmelg") >(), wxS("Introduce Parallelism to the Ranges TS") > >() },
    { "p0837r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on modular macros") > >() },
    { "p0838r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Coe") >(), wxS("A conditional transform algorithm for C") > >() },
    { "p0839r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Recursive Lambdas") > >() },
    { "p0840r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Lamguage support for empty objects") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Language support for empty objects") >, Rev< 2u, ArrHash< Hash("Richard Smith") >(), wxS("Language support for empty objects") > >() },
    { "p0841r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Adrian Prantl"), Hash("Bruno Cardoso Lopes"), Hash("Duncan P. N. Exon Smith") >(), wxS("Modules at scale") > >() },
    { "p0842r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Unknown Exports by Example") > >() },
    { "p0843r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("fixedcapacityvector") >, Rev< 1u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("fixedcapacityvector") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") >, Rev< 3u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") >, Rev< 4u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") >, Rev< 5u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") >, Rev< 6u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("staticvector") >, Rev< 7u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 8u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 9u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 10u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 11u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 12u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 13u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") >, Rev< 14u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector") > >() },
    { "p0844r0", 0u, RevList< Rev< 0u, ArrHash< Hash("J. Monnon") >(), wxS("Type functions and beyond") > >() },
    { "p0845r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Common Subset of C and C Binders") > >() },
    { "p0846r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("ADL and Function Templates that are not Visible") > >() },
    { "p0847r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 4u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 5u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 6u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") >, Rev< 7u, ArrHash< Hash("Barry Revzin"), Hash("Ben Deane"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Sy Brand") >(), wxS("Deducing this") > >() },
    { "p0848r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("Conditionally Trivial Special Member Functions") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("Conditionally Trivial Special Member Functions") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("Conditionally Trivial Special Member Functions") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("Conditionally Trivial Special Member Functions") > >() },
    { "p0849r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox DECAYCOPY in the language") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 4u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 5u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 6u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 7u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") >, Rev< 8u, ArrHash< Hash("Zhihao Yuan") >(), wxS("autox decaycopy in the language") > >() },
    { "p0851r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("simdT is neither a product type nor a container type") > >() },
    { "p0856r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("H. Carter Edwards") >(), wxS("Restrict Access Property for mdspan and span") > >() },
    { "p0857r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Wording for functionality gaps in constraints") > >() },
    { "p0858r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr iterator requirements") > >() },
    { "p0859r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Core Issue  When are constexpr member functions defined") > >() },
    { "p0860r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards") >(), wxS("Atomic Access Property for span and mdspan") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Daniel Sunderland"), Hash("H. Carter Edwards") >(), wxS("Atomic Access Property for mdspan") > >() },
    { "p0863r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder") >(), wxS("Fixing the partialorder comparison algorithm") >, Rev< 1u, ArrHash< Hash("Jeff Snyder") >(), wxS("Fixing the partialorder comparison algorithm") > >() },
    { "p0864r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Albuquerque") > >() },
    { "p0866r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("Response to Fibers under the magnifying glass") > >() },
    { "p0867r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Interface is Misleading") > >() },
    { "p0868r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Stern"), Hash("Andrew Hunter"), Hash("Paul E. McKenney") >(), wxS("Selected RCU Litmus Tests") >, Rev< 1u, ArrHash< Hash("Alan Stern"), Hash("Andrew Hunter"), Hash("Jade Alglave"), Hash("Luc Maranget"), Hash("Paul E. McKenney") >(), wxS("Selected RCU Litmus Tests") >, Rev< 2u, ArrHash< Hash("Alan Stern"), Hash("Andrew Hunter"), Hash("Jade Alglave"), Hash("Luc Maranget"), Hash("Paul E. McKenney") >(), wxS("Selected RCU Litmus Tests") > >() },
    { "p0870r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 3u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 4u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 5u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 6u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") >, Rev< 7u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect narrowing conversions") > >() },
    { "p0872r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes") >(), wxS("Discussion Summary Applying Concepts to the Standard Library") > >() },
    { "p0873r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("A plea for a consistent terse and intuitive declaration syntax") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("A plea for a consistent terse and intuitive declaration syntax") > >() },
    { "p0874r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Syntax to anonymously refer to the current declaration contexts") > >() },
    { "p0875r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("WG  Albuquerque Record of Discussion") > >() },
    { "p0876r0", 21u, RevList< Rev< 0u, ArrHash< Hash("Oliver Kowalke") >(), wxS("fibers without scheduler") >, Rev< 2u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 3u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fiberhandle  fibers without scheduler") >, Rev< 5u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 6u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 8u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 9u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 10u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 11u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 12u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 13u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 14u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 15u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 16u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 17u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 18u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 19u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 20u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") >, Rev< 21u, ArrHash< Hash("Nat Goodspeed"), Hash("Oliver Kowalke") >(), wxS("fibercontext  fibers without scheduler") > >() },
    { "p0877r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Cardoso Lopes") >(), wxS("A proposal for modular macros") > >() },
    { "p0878r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Subobjects copy elision") > >() },
    { "p0879r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr for swap and swap related functions") > >() },
    { "p0880r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("Numbers interaction") >, Rev< 1u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("Numbers interaction") >, Rev< 2u, ArrHash< Hash("Antony Polukhin"), Hash("Igor Klevanets") >(), wxS("Numbers interaction") > >() },
    { "p0881r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stack trace library") >, Rev< 1u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stack trace library") >, Rev< 2u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stack trace library") >, Rev< 3u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stacktrace library") >, Rev< 4u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stacktrace library") >, Rev< 5u, ArrHash< Hash("Antony Polukhin") >(), wxS("A Proposal to add stacktrace library") >, Rev< 6u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stacktrace library") >, Rev< 7u, ArrHash< Hash("Alexey Gorgurov"), Hash("Antony Polukhin") >(), wxS("A Proposal to add stacktrace library") > >() },
    { "p0882r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yonggang Li") >(), wxS("Userdefined Literals for stdfilesystempath") > >() },
    { "p0883r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fixing Atomic Initialization") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fixing Atomic Initialization") >, Rev< 2u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fixing Atomic Initialization") > >() },
    { "p0884r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Extending the noexcept Policy") > >() },
    { "p0886r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("The assume aligned attribute") > >() },
    { "p0887r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("The identity metafunction") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("The identity metafunction") > >() },
    { "p0888r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Jacksonville") > >() },
    { "p0889r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Ultimate copy elision") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Ultimate copy elision") > >() },
    { "p0891r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Let strongorder Truly Be a Customization Point") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Everyone Deserves a Little Order") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jeff Snyder") >(), wxS("Make strongorder a Customization Point") > >() },
    { "p0892r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Stephan T. Lavavej") >(), wxS("explicitbool") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Stephan T. Lavavej") >(), wxS("explicitbool") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Stephan T. Lavavej") >(), wxS("explicitbool") > >() },
    { "p0893r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Herb Sutter") >(), wxS("Chaining Comparisons") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Herb Sutter") >(), wxS("Chaining Comparisons") > >() },
    { "p0894r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Victor Dyachenko") >(), wxS("realloc for C") >, Rev< 1u, ArrHash< Hash("Victor Dyachenko") >(), wxS("realloc for C") > >() },
    { "p0895r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis"), Hash("Tony van Eerd") >(), wxS("Renaming cell to latest") > >() },
    { "p0896r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Merging the Ranges TS") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Merging the Ranges TS") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Eric A Niebler") >(), wxS("The One Ranges Proposal") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Eric A Niebler") >(), wxS("The One Ranges Proposal") >, Rev< 4u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Eric A Niebler") >(), wxS("The One Ranges Proposal") > >() },
    { "p0897r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrey Semashev") >(), wxS("Supporting offsetof for All Classes") > >() },
    { "p0898r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Standard Library Concepts") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Standard Library Concepts") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Standard Library Concepts") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Standard Library Concepts") > >() },
    { "p0899r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("LWG  is Not a Defect") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("LWG  is Not a Defect") > >() },
    { "p0900r0", 0u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman") >(), wxS("An Ontology for Properties of mdspan") > >() },
    { "p0901r0", 11u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 5u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 6u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 7u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 8u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 9u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly") >(), wxS("Size feedback in operator new") >, Rev< 10u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly"), Hash("Thomas K\\u00F6ppe") >(), wxS("Size feedback in operator new") >, Rev< 11u, ArrHash< Hash("Andrew Hunter"), Hash("Chris Kennelly"), Hash("Thomas K\\u00F6ppe") >(), wxS("Size feedback in operator new") > >() },
    { "p0902r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter") >(), wxS("Moveonly iterators") > >() },
    { "p0903r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ashley Hedberg") >(), wxS("Define basicstringviewnullptr and basicstringnullptr") >, Rev< 1u, ArrHash< Hash("Ashley Hedberg") >(), wxS("Define basicstringviewnullptr") >, Rev< 2u, ArrHash< Hash("Ashley Hedberg"), Hash("Jorg Brown"), Hash("Titus Winters") >(), wxS("Define basicstringviewnullptr") > >() },
    { "p0904r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrii Grynenko"), Hash("Jay Feldblum"), Hash("Lee Howes") >(), wxS("A strawman Future API") > >() },
    { "p0905r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter"), Hash("Richard Smith"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Symmetry for spaceship") >, Rev< 1u, ArrHash< Hash("Herb Sutter"), Hash("Richard Smith"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Symmetry for spaceship") > >() },
    { "p0906r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Improvement suggestions for the Modules TS") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Improvement suggestions for the Modules TS") > >() },
    { "p0907r0", 4u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Signed Integers are Twos Complement") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Signed Integers are Twos Complement") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("Signed Integers are Twos Complement") >, Rev< 3u, ArrHash< Hash("JF Bastien") >(), wxS("Signed Integers are Twos Complement") >, Rev< 4u, ArrHash< Hash("JF Bastien") >(), wxS("Signed Integers are Twos Complement") > >() },
    { "p0908r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eddie Kohler") >(), wxS("Offsetof for Pointers to Members") > >() },
    { "p0909r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Module TS Supports Legacy Integration") > >() },
    { "p0911r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Rebase the Coroutines TS onto the C Standard") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Rebase the Coroutines TS onto the C Standard") > >() },
    { "p0912r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") >, Rev< 2u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") >, Rev< 3u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") >, Rev< 4u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") >, Rev< 5u, ArrHash< Hash("Gor Nishanov") >(), wxS("Merge Coroutines TS into C working draft") > >() },
    { "p0913r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Add symmetric coroutine control transfer") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Add symmetric coroutine control transfer") > >() },
    { "p0914r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Add parameter preview to coroutine promise constructor") >, Rev< 1u, ArrHash< Hash("Gor Nishanov") >(), wxS("Add parameter preview to coroutine promise constructor") > >() },
    { "p0915r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Vittorio Romeo") >(), wxS("Conceptconstrained auto") > >() },
    { "p0916r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Naming implementationdefined simdabi tag types") > >() },
    { "p0917r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Making operator overloadable") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Making operator overloadable") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Making operator overloadable") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("Making operator overloadable") > >() },
    { "p0918r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Tim Shen") >(), wxS("More simd Operations") >, Rev< 1u, ArrHash< Hash("Tim Shen") >(), wxS("More simd Operations") >, Rev< 2u, ArrHash< Hash("Tim Shen") >(), wxS("More simd Operations") > >() },
    { "p0919r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Heterogeneous lookup for unordered containers") >, Rev< 1u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Heterogeneous lookup for unordered containers") >, Rev< 2u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Heterogeneous lookup for unordered containers") >, Rev< 3u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Heterogeneous lookup for unordered containers") > >() },
    { "p0920r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Precalculated hash values in lookup") >, Rev< 1u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Precalculated hash values in lookup") >, Rev< 2u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Precalculated hash values in lookup") > >() },
    { "p0921r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("Standard Library Compatibility Promises") >, Rev< 2u, ArrHash< Hash("Ashley Hedberg"), Hash("Titus Winters") >(), wxS("Standard Library Compatibility") > >() },
    { "p0922r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("LEWG wishlist for EWG") > >() },
    { "p0923r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Dependent ADL") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("ModulesDependent ADL") > >() },
    { "p0924r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules ContextSensitive Keyword") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("ModulesContextSensitive Keyword") > >() },
    { "p0925r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Unqualified Using Declarations") > >() },
    { "p0927r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Towards A Lazy Forwarding Mechanism for C") >, Rev< 1u, ArrHash< Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Towards A Lazy Forwarding Mechanism for C") >, Rev< 2u, ArrHash< Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Towards A Lazy Forwarding Mechanism for C") > >() },
    { "p0928r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Geoffrey Romer") >(), wxS("Mitigating Speculation Attacks in C") >, Rev< 1u, ArrHash< Hash("Chandler Carruth"), Hash("Devin Jeanpierre"), Hash("Geoffrey Romer") >(), wxS("Mitigating Spectre v Attacks in C") > >() },
    { "p0929r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Checking for abstract class types") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Checking for abstract class types") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Checking for abstract class types") > >() },
    { "p0930r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrii Grynenko"), Hash("Jay Feldblum"), Hash("Lee Howes") >(), wxS("Semifying Awaitables") > >() },
    { "p0931r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Structured bindings with polymorphic lambas") > >() },
    { "p0932r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Tightening the constraints on stdfunction") >, Rev< 1u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Tightening the constraints on stdfunction") > >() },
    { "p0933r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Runtime type introspection with stdexception ptr") >, Rev< 1u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Runtime type introspection with stdexceptionptr") > >() },
    { "p0934r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("A Modest Proposal Fixing ADL") > >() },
    { "p0935r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Eradicating unnecessarily explicit default constructors from the standard library") > >() },
    { "p0936r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis"), Hash("Richard Smith") >(), wxS("Bind ReturnedInitialized Objects to the Lifetime of Parameters") > >() },
    { "p0937r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p0938r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p0939r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Beman Dawes"), Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong") >(), wxS("Direction for ISO C") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Directions for ISO C") >, Rev< 2u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") >, Rev< 3u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") >, Rev< 4u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") > >() },
    { "p0940r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Olivier Girioux") >(), wxS("Concurrency TS is growing Concurrent Utilities and Data Structures") >, Rev< 1u, ArrHash< Hash("Michael Wong"), Hash("Olivier Girioux") >(), wxS("Concurrency TS is growing Concurrent Utilities and Data Structures") >, Rev< 2u, ArrHash< Hash("Michael Wong"), Hash("Olivier Girioux") >(), wxS("Concurrency TS is growing Concurrent Utilities and Data Structures") >, Rev< 3u, ArrHash< Hash("Michael Wong"), Hash("Olivier Girioux") >(), wxS("Concurrency TS is growing Concurrent Utilities and Data Structures") > >() },
    { "p0941r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Clark Nelson") >(), wxS("Integrating featuretest macros into the C WD") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Integrating featuretest macros into the C WD") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely"), Hash("Ville Voutilainen") >(), wxS("Integrating featuretest macros into the C WD") > >() },
    { "p0942r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Introducing a smartptr header") > >() },
    { "p0943r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 5u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") >, Rev< 6u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Support C atomics in C") > >() },
    { "p0944r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Contiguous Ranges") > >() },
    { "p0945r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Generalizing alias declarations") > >() },
    { "p0946r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Towards consistency between  and other comparison operators") > >() },
    { "p0947r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Another take on Modules") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Another take on Modules") > >() },
    { "p0949r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Adding support for typebased metaprogramming to the standard library") > >() },
    { "p0952r0", 2u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring"), Hash("Thomas K\\u00F6ppe") >(), wxS("A new specification for stdgeneratecanonical") >, Rev< 1u, ArrHash< Hash("S. Davis Herring"), Hash("Thomas K\\u00F6ppe") >(), wxS("A new specification for stdgeneratecanonical") >, Rev< 2u, ArrHash< Hash("S. Davis Herring"), Hash("Thomas K\\u00F6ppe") >(), wxS("A new specification for stdgeneratecanonical") > >() },
    { "p0953r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("constexpr reflexpr") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("Andrew Sutton"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("constexpr reflexpr") >, Rev< 2u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("constexpr reflexpr") > >() },
    { "p0954r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("What do we want to do with reflection") > >() },
    { "p0955r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Modules and macros") > >() },
    { "p0956r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Answers to concept syntax suggestions") > >() },
    { "p0957r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("PFA A Generic Extendable and Efficient Solution for Polymorphic Programming") >, Rev< 1u, ArrHash< Hash("Mingxin Wang") >(), wxS("PFA A Generic Extendable and Efficient Solution for Polymorphic Programming") >, Rev< 2u, ArrHash< Hash("Mingxin Wang") >(), wxS("PFA A Generic Extendable and Efficient Solution for Polymorphic Programming") >, Rev< 3u, ArrHash< Hash("Mingxin Wang") >(), wxS("PFA A Generic Extendable and Efficient Solution for Polymorphic Programming") >, Rev< 4u, ArrHash< Hash("Mingxin Wang") >(), wxS("PFA A Generic Extendable and Efficient Solution for Polymorphic Programming") >, Rev< 5u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A Polymorphic Programming Library") >, Rev< 6u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A Polymorphic Programming Library") >, Rev< 7u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A Polymorphic Programming Library") >, Rev< 8u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A Polymorphic Programming Library") >, Rev< 9u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A Polymorphic Programming Library") > >() },
    { "p0958r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to support proposed Executors TS") >, Rev< 1u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to support proposed Executors TS") >, Rev< 2u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to support proposed Executors TS") >, Rev< 3u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to support proposed Executors TS") > >() },
    { "p0959r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marius Bancila") >(), wxS("A Proposal for a Universally Unique Identifier Library") >, Rev< 1u, ArrHash< Hash("Marius Bancila") >(), wxS("A Proposal for a Universally Unique Identifier Library") >, Rev< 2u, ArrHash< Hash("Marius Bancila"), Hash("Tony van Eerd") >(), wxS("A Proposal for a Universally Unique Identifier Library") > >() },
    { "p0960r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Allow initializing aggregates from a parenthesized list of values") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Allow initializing aggregates from a parenthesized list of values") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe"), Hash("Ville Voutilainen") >(), wxS("Allow initializing aggregates from a parenthesized list of values") >, Rev< 3u, ArrHash< Hash("Thomas K\\u00F6ppe"), Hash("Ville Voutilainen") >(), wxS("Allow initializing aggregates from a parenthesized list of values") > >() },
    { "p0961r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Relaxing the structured bindings customization point finding rules") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Relaxing the structured bindings customization point finding rules") > >() },
    { "p0962r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Relaxing the rangefor loop customization point finding rules") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Relaxing the rangefor loop customization point finding rules") > >() },
    { "p0963r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Structured binding declaration as a condition") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Structured binding declaration as a condition") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Structured binding declaration as a condition") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Structured binding declaration as a condition") > >() },
    { "p0964r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Finding the right set of traits for simdT") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Finding the right set of traits for simdT") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Finding the right set of traits for simdT") > >() },
    { "p0965r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Initializers of objects with automatic and dynamic storage duration have funny inconsistencies") > >() },
    { "p0966r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Luo"), Hash("Mark Zeren") >(), wxS("stringreserve Should Not Shrink") >, Rev< 1u, ArrHash< Hash("Andrew Luo"), Hash("Mark Zeren") >(), wxS("stringreserve Should Not Shrink") > >() },
    { "p0968r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the March  Jacksonville meeting") > >() },
    { "p0969r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Allow structured bindings to accessible members") > >() },
    { "p0970r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Better Safer Range Access Customization Points") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Better Safer Range Access Customization Points") > >() },
    { "p0972r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("chrono zero min and max should be noexcept") > >() },
    { "p0973r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Coroutines TS Use Cases and Design Issues") > >() },
    { "p0974r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Ringle") >(), wxS("A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration") > >() },
    { "p0975r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Impact of coroutines on current and upcoming library facilities") > >() },
    { "p0976r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("The Evils of Paradigms") > >() },
    { "p0977r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Remember the Vasa") > >() },
    { "p0978r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("A Response to Pr Coroutines TS Use Cases and Design Issues") > >() },
    { "p0980r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Making stdstring constexpr") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Making stdstring constexpr") > >() },
    { "p0981r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Richard Smith") >(), wxS("Halo coroutine Heap Allocation eLision Optimization the joint response") > >() },
    { "p0982r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Weaken Release Sequences") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Olivier Girioux"), Hash("Viktor Vafeiades") >(), wxS("Weaken release sequences") > >() },
    { "p0983r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Richard Smith") >(), wxS("Plan of Record for Making C Modules Available in C Standards") > >() },
    { "p0984r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("All Pointers Replaced by Ideal Lambdas") > >() },
    { "p0985r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("LWG Chair postmeeting report") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("LWG Chair postmeeting report") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("LWG Chair postmeeting report") >, Rev< 3u, ArrHash< Hash("Marshall Clow") >(), wxS("LWG Chair postmeeting report") >, Rev< 4u, ArrHash< Hash("Marshall Clow") >(), wxS("LWG Chair postmeeting report") > >() },
    { "p0986r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Jones"), Hash("Richard Smith") >(), wxS("Comparison of Modules Proposals") > >() },
    { "p0987r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("polymorphicallocatorbyte instead of typeerasure") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("polymorphicallocator instead of typeerasure") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("polymorphicallocator instead of typeerasure") > >() },
    { "p0988r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson") >(), wxS("Ruminations on D graphics in the C International Standard") > >() },
    { "p0989r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Standardizing Extended Integers") > >() },
    { "p0990r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Rebuttal of Implementation Concerns for Bit Entanglement") > >() },
    { "p0991r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Comparison of Stackful Coroutine Proposals") > >() },
    { "p0992r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Translation and evaluation") > >() },
    { "p0993r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Herb Sutter") >(), wxS("Valuebased Reflection") > >() },
    { "p0994r0", 0u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Jason Carey") >(), wxS("String View Conversion for Function Arguments") > >() },
    { "p0995r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("Improving atomicflag") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("Improving atomicflag") > >() },
    { "p0996r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Rebase Library Fundamentals TS on C") > >() },
    { "p0997r0", 0u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin"), Hash("Erich Keane"), Hash("Nathan Myers") >(), wxS("Retire Pernicious Language Constructs in Module Contexts") > >() },
    { "p0999r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Dennett") >(), wxS("More Natural Arithmetic in C") > >() },
    { "p1000r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 3u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 4u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 5u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") >, Rev< 6u, ArrHash< Hash("Herb Sutter") >(), wxS("C IS schedule") > >() },
    { "p1001r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Target Vectorization Policies from Parallelism V TS to C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Target Vectorization Policies from Parallelism V TS to C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Pablo Halpern") >(), wxS("Target Vectorization Policies from Parallelism V TS to C") > >() },
    { "p1002r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Trycatch blocks in constexpr functions") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Trycatch blocks in constexpr functions") > >() },
    { "p1003r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Jacksonville") > >() },
    { "p1004r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Making stdvector constexpr") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Making stdvector constexpr") >, Rev< 2u, ArrHash< Hash("Louis Dionne") >(), wxS("Making stdvector constexpr") > >() },
    { "p1005r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("S. Davis Herring") >(), wxS("namespace std  namespace fs  filesystem ") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("S. Davis Herring") >(), wxS("namespace std  namespace fs  filesystem ") > >() },
    { "p1006r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Constexpr in stdpointertraits") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Constexpr in stdpointertraits") > >() },
    { "p1007r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Timur Doumler") >(), wxS("stdassumealigned") >, Rev< 1u, ArrHash< Hash("Chandler Carruth"), Hash("Timur Doumler") >(), wxS("stdassumealigned") >, Rev< 2u, ArrHash< Hash("Chandler Carruth"), Hash("Timur Doumler") >(), wxS("stdassumealigned") >, Rev< 3u, ArrHash< Hash("Chandler Carruth"), Hash("Timur Doumler") >(), wxS("stdassumealigned") > >() },
    { "p1008r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Howard E. Hinnant"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Prohibit aggregate types with userdeclared constructors") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Howard E. Hinnant"), Hash("Nicolai Josuttis"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Prohibit aggregates with userdeclared constructors") > >() },
    { "p1009r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Array size deduction in newexpressions") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Array size deduction in newexpressions") >, Rev< 2u, ArrHash< Hash("Timur Doumler") >(), wxS("Array size deduction in newexpressions") > >() },
    { "p1010r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("Container support for implicit lifetime types") >, Rev< 1u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("Container support for implicit lifetime types") > >() },
    { "p1011r0", 0u, RevList< Rev< 0u, ArrHash< Hash("ADAM David Alan Martin") >(), wxS("Constant Pointer View  stdasconst Strikes Back") > >() },
    { "p1012r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Frank Zingsheim") >(), wxS("Ternary Right Fold Expression") >, Rev< 1u, ArrHash< Hash("Frank Zingsheim") >(), wxS("Ternary Right Fold Expression") > >() },
    { "p1013r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Thomas K\\u00F6ppe") >(), wxS("Explicit concept expressions") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Thomas K\\u00F6ppe") >(), wxS("Explicit concept expressions") > >() },
    { "p1014r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Nevin Liber") >(), wxS("A Unit Type for C") > >() },
    { "p1015r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Patrice Roy") >(), wxS("WG  Jacksonville Record of Discussion") > >() },
    { "p1016r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("A few additional type manipulation utilities") > >() },
    { "p1017r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hartmut Kaiser"), Hash("John Biddiscombe") >(), wxS("Executors should be variadic") > >() },
    { "p1018r0", 19u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution status after Jacksonville ") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution status after Rapperswil ") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution status after San Diego ") >, Rev< 3u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution status after Kona ") >, Rev< 4u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Evolution status after Cologne ") >, Rev< 5u, ArrHash< Hash("JF Bastien") >(), wxS("Language Evolution status after Belfast ") >, Rev< 6u, ArrHash< Hash("JF Bastien") >(), wxS("Language Evolution status after Prague ") >, Rev< 7u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 8u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 9u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 10u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 11u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 12u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 13u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 14u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 15u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 16u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 17u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 18u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status  pandemic edition  ") >, Rev< 19u, ArrHash< Hash("JF Bastien") >(), wxS("C Language Evolution status") > >() },
    { "p1019r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Integrating Executors with Parallel Algorithms") >, Rev< 1u, ArrHash< Hash("Jared Hoberock") >(), wxS("Integrating Executors with Parallel Algorithms") >, Rev< 2u, ArrHash< Hash("Jared Hoberock") >(), wxS("Integrating Executors with Parallel Algorithms") > >() },
    { "p1020r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Smart pointer creation with default initialization") >, Rev< 1u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Peter Dimov") >(), wxS("Smart pointer creation with default initialization") > >() },
    { "p1021r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Extensions to Class Template Argument Deduction") >, Rev< 1u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") >, Rev< 2u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") >, Rev< 3u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") >, Rev< 4u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") >, Rev< 5u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") >, Rev< 6u, ArrHash< Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Filling holes in Class Template Argument Deduction") > >() },
    { "p1022r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Material for  JAX Discussions of Hazard Pointer and ReadCopyUpdate RCU") > >() },
    { "p1023r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tristan Brindle") >(), wxS("constexpr comparison operators for stdarray") > >() },
    { "p1024r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Tristan Brindle") >(), wxS("Usability Enhancements for stdspan") >, Rev< 1u, ArrHash< Hash("Tristan Brindle") >(), wxS("Usability Enhancements for stdspan") >, Rev< 2u, ArrHash< Hash("Tristan Brindle") >(), wxS("Usability Enhancements for stdspan") >, Rev< 3u, ArrHash< Hash("Tristan Brindle") >(), wxS("Usability Enhancements for stdspan") > >() },
    { "p1025r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Update The Reference To The Unicode Standard") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide"), Hash("R. Martinho Fernandes"), Hash("Steve Downey") >(), wxS("Update The Reference To The Unicode Standard") > >() },
    { "p1026r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("A call for a Data Persistence iostream v study group") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("A call for an Elsewhere Memory study group") > >() },
    { "p1028r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object for P Zerooverhead deterministic exceptions") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("statuscode and standard error object for P Zerooverhead deterministic exceptions") >, Rev< 2u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object for P Zerooverhead deterministic exceptions") >, Rev< 3u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object") >, Rev< 4u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object") >, Rev< 5u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object") >, Rev< 6u, ArrHash< Hash("Niall Douglas") >(), wxS("SG statuscode and standard error object") > >() },
    { "p1029r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("SG moverelocates") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("moverelocates") >, Rev< 2u, ArrHash< Hash("Niall Douglas") >(), wxS("move  relocates") >, Rev< 3u, ArrHash< Hash("Niall Douglas") >(), wxS("move  bitcopies") > >() },
    { "p1030r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 2u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 3u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 4u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 5u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 6u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 7u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") >, Rev< 8u, ArrHash< Hash("Niall Douglas") >(), wxS("stdfilesystempathview") > >() },
    { "p1031r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Low level file io library") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("Low level file io library") >, Rev< 2u, ArrHash< Hash("Niall Douglas") >(), wxS("Low level file io library") > >() },
    { "p1032r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Misc constexpr bits") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Misc constexpr bits") > >() },
    { "p1033r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella") >(), wxS("Rangify the uninitialised memory algorithms") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella") >(), wxS("Rangify the uninitialised memory algorithms") > >() },
    { "p1035r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Input range adaptors") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Input range adaptors") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input range adaptors") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input range adaptors") >, Rev< 4u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input range adaptors") >, Rev< 5u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input Range Adaptors") >, Rev< 6u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input Range Adaptors") >, Rev< 7u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Input Range Adaptors") > >() },
    { "p1037r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Deep Integration of the Ranges TS") > >() },
    { "p1039r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arvid Gerstmann"), Hash("JeanHeyd Meneide"), Hash("Nicole Mazzuca") >(), wxS("I got you FAM Flexible Array Members for C") > >() },
    { "p1040r0", 8u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed") >, Rev< 4u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed") >, Rev< 5u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed and depend") >, Rev< 6u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed and depend") >, Rev< 7u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed and depend") >, Rev< 8u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdembed and depend") > >() },
    { "p1041r0", 4u, RevList< Rev< 0u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Make chartchart string literals be UTF") >, Rev< 1u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Make chartchart string literals be UTF") >, Rev< 3u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Make chartchart string literals be UTF") >, Rev< 4u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Make chartchart string literals be UTF") > >() },
    { "p1042r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("VAOPT wording clarifications") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("VAOPT wording clarifications") > >() },
    { "p1043r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Nevin Liber") >(), wxS("Narrow contracts in stringview versus PR") > >() },
    { "p1044r0", 0u, RevList< Rev< 0u, ArrHash< Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Thomas W Rodgers") >(), wxS("stdasync in an Executors World") > >() },
    { "p1045r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("constexpr Function Parameters") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("constexpr Function Parameters") > >() },
    { "p1046r0", 2u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Automatically Generate More Operators") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("Automatically Generate More Operators") >, Rev< 2u, ArrHash< Hash("David Stone") >(), wxS("Automatically Generate More Operators") > >() },
    { "p1048r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Juan Alday") >(), wxS("A proposal for a type trait to detect scoped enumerations") >, Rev< 1u, ArrHash< Hash("Juan Alday") >(), wxS("A proposal for a type trait to detect scoped enumerations") > >() },
    { "p1050r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Fractional Numeric Type") >, Rev< 1u, ArrHash< Hash("John McFarlane") >(), wxS("Fractional Numeric Type") > >() },
    { "p1051r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vicente J. Botet Escrib\\u00E1") >(), wxS("stdexperimentalexpected LWG design issues") > >() },
    { "p1052r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Modules Macros and Build Systems") > >() },
    { "p1053r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Lee Howes") >(), wxS("Futureproofing continuations for executors") >, Rev< 1u, ArrHash< Hash("Eric A Niebler"), Hash("Lee Howes") >(), wxS("Futureproofing continuations for executors") > >() },
    { "p1054r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("D. S. Hollman"), Hash("Lee Howes"), Hash("Micha\\u0142 Dominiak") >(), wxS("A Unified Futures Proposal for C") > >() },
    { "p1055r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes") >(), wxS("A Modest Executor Proposal") > >() },
    { "p1056r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Lewis Baker") >(), wxS("Add coroutine task type") >, Rev< 1u, ArrHash< Hash("Gor Nishanov"), Hash("Lewis Baker") >(), wxS("Add lazy coroutine coroutine task type") > >() },
    { "p1059r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas W Rodgers") >(), wxS("Adapting Asio to use stdexpected") > >() },
    { "p1061r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 4u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 5u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 6u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 7u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 8u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 9u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") >, Rev< 10u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Structured Bindings can introduce a Pack") > >() },
    { "p1062r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Corentin Jabot"), Hash("Olivier Girioux"), Hash("Vittorio Romeo"), Hash("Zach Laine") >(), wxS("Diet Graphics") > >() },
    { "p1063r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Core Coroutines") >, Rev< 1u, ArrHash< Hash("Chandler Carruth"), Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Core Coroutines") >, Rev< 2u, ArrHash< Hash("Chandler Carruth"), Hash("Geoffrey Romer"), Hash("James Dennett") >(), wxS("Core Coroutines") > >() },
    { "p1064r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov"), Hash("Vassil Vassilev") >(), wxS("Allowing Virtual Function Calls in Constant Expressions") > >() },
    { "p1065r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr INVOKE") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Tomasz Kami\\u0144ski") >(), wxS("constexpr INVOKE") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Tomasz Kami\\u0144ski") >(), wxS("constexpr INVOKE") > >() },
    { "p1066r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mathias Stearn") >(), wxS("How to catch an exceptionptr without even trying") >, Rev< 1u, ArrHash< Hash("Mathias Stearn") >(), wxS("How to catch an exceptionptr without even trying") > >() },
    { "p1067r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("C Dependency Management Package Consumption vs Development") > >() },
    { "p1068r0", 11u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pablo Halpern"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 1u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 2u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 3u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 4u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 5u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 6u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 7u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 8u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 9u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 10u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") >, Rev< 11u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Vector API for random number generation") > >() },
    { "p1069r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Stephan T. Lavavej"), Hash("Walter E. Brown") >(), wxS("Refining standard library support for Class Template Argument Deduction") >, Rev< 1u, ArrHash< Hash("Michael Spertus"), Hash("Stephan T. Lavavej"), Hash("Walter E. Brown") >(), wxS("Inferencing heap objects") > >() },
    { "p1070r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Transactional Memory TM Meeting Minutes ") > >() },
    { "p1071r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes  ") > >() },
    { "p1072r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("Default Initialization for basicstring") >, Rev< 1u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("Optimized Initialization for basicstring and vector") >, Rev< 2u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizedefaultinit") >, Rev< 3u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizedefaultinit") >, Rev< 4u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizedefaultinit") >, Rev< 5u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizedefaultinit") >, Rev< 6u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizeandoverwrite") >, Rev< 7u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizeandoverwrite") >, Rev< 8u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizeandoverwrite") >, Rev< 9u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizeandoverwrite") >, Rev< 10u, ArrHash< Hash("Chris Kennelly"), Hash("Mark Zeren") >(), wxS("basicstringresizeandoverwrite") > >() },
    { "p1073r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("constexpr functions") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("constexpr functions") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("Immediate functions") >, Rev< 3u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("Immediate functions") > >() },
    { "p1074r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("CWG defect Defined Behavior of Invalid Pointers") > >() },
    { "p1076r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Editorial clause reorganization") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Editorial clause reorganization") > >() },
    { "p1077r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Allowing Virtual Destructors to be Trivial") > >() },
    { "p1079r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("A minimal solution to the concepts syntax problems") > >() },
    { "p1080r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1081r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Collin Gress"), Hash("Vincent Reverdy") >(), wxS("On empty structs in the standard library") > >() },
    { "p1082r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Rapperswil") > >() },
    { "p1083r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 3u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 4u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 5u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 6u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 7u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") >, Rev< 8u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") > >() },
    { "p1084r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Walter E. Brown") >(), wxS("Todays returntyperequirements Are Insufficient") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Walter E. Brown") >(), wxS("Todays returntyperequirements Are Insufficient") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Walter E. Brown") >(), wxS("Todays returntyperequirements Are Insufficient") > >() },
    { "p1085r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("Should Span be Regular") >, Rev< 1u, ArrHash< Hash("Tony van Eerd") >(), wxS("Should Span be Regular") >, Rev< 2u, ArrHash< Hash("Tony van Eerd") >(), wxS("Should Span be Regular") > >() },
    { "p1086r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Natural Syntax Keep It Simple") > >() },
    { "p1087r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Richard Smith") >(), wxS("Modules for Standard C") > >() },
    { "p1089r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow"), Hash("Nevin Liber"), Hash("Robert Douglas") >(), wxS("Sizes Should Only span Unsigned") >, Rev< 2u, ArrHash< Hash("Marshall Clow"), Hash("Nevin Liber"), Hash("Robert Douglas") >(), wxS("Sizes Should Only span Unsigned") > >() },
    { "p1090r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Aggregate initialization in the presence of deleted constructors") > >() },
    { "p1091r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Extending structured bindings to be more like variable declarations") >, Rev< 1u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Extending structured bindings to be more like variable declarations") >, Rev< 2u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Extending structured bindings to be more like variable declarations") >, Rev< 3u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Extending structured bindings to be more like variable declarations") > >() },
    { "p1093r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Bennieston"), Hash("Daven Gahir"), Hash("Jonathan Coe"), Hash("Thomas Russell") >(), wxS("Is undefined behaviour preserved") > >() },
    { "p1094r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Nested Inline Namespaces") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Nested Inline Namespaces") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Nested Inline Namespaces") > >() },
    { "p1095r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Zero overhead deterministic failure  A unified mechanism for C and C") > >() },
    { "p1096r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Simplify the customization point for structured bindings") > >() },
    { "p1097r0", 2u, RevList< Rev< 0u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Named character escapes") >, Rev< 1u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Named character escapes") >, Rev< 2u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Named character escapes") > >() },
    { "p1099r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jonathan M\\u00FCller") >(), wxS("Using Enum") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jonathan M\\u00FCller") >(), wxS("Using Enum") >, Rev< 3u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jonathan M\\u00FCller") >(), wxS("Using Enum") >, Rev< 4u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jonathan M\\u00FCller") >(), wxS("Using Enum") >, Rev< 5u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Jonathan M\\u00FCller") >(), wxS("Using Enum") > >() },
    { "p1100r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vinnie Falco") >(), wxS("Efficient composition with DynamicBuffer") > >() },
    { "p1101r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mikhail Maltsev"), Hash("Richard Sandiford") >(), wxS("Vector Length Agnostic SIMD") > >() },
    { "p1102r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien") >(), wxS("Down with ") >, Rev< 1u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien") >(), wxS("Down with ") >, Rev< 2u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien") >(), wxS("Down with ") > >() },
    { "p1103r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Richard Smith") >(), wxS("Merging Modules") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Merging Modules") >, Rev< 2u, ArrHash< Hash("Richard Smith") >(), wxS("Merging Modules") >, Rev< 3u, ArrHash< Hash("Richard Smith") >(), wxS("Merging Modules") > >() },
    { "p1105r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Leaving no room for a lowerlevel language A C Subset") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Ben Saks") >(), wxS("Leaving no room for a lowerlevel language A C Subset") > >() },
    { "p1108r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel") >(), wxS("webview") >, Rev< 1u, ArrHash< Hash("Hal Finkel") >(), wxS("webview") >, Rev< 2u, ArrHash< Hash("Hal Finkel") >(), wxS("webview") >, Rev< 3u, ArrHash< Hash("Hal Finkel") >(), wxS("webview") >, Rev< 4u, ArrHash< Hash("Hal Finkel") >(), wxS("webview") > >() },
    { "p1109r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Rapperswil Record of Discussion") >, Rev< 1u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Rapperswil Record of Discussion") > >() },
    { "p1110r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Jeffrey Yasskin") >(), wxS("A placeholder with no name") > >() },
    { "p1111r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Matthias Kretz") >(), wxS("Resolutions to NB Comments on the Parallelism TS v") > >() },
    { "p1112r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") >, Rev< 1u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") >, Rev< 2u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") >, Rev< 3u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") >, Rev< 4u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") >, Rev< 5u, ArrHash< Hash("Pal Balog") >(), wxS("Language support for class layout control") > >() },
    { "p1113r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the June  Rapperswil meeting") > >() },
    { "p1114r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the June  Rapperswil meeting") > >() },
    { "p1115r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms II Free eraseerase if") >, Rev< 1u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms II Free eraseerase if") >, Rev< 2u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms II Free eraseerase if") >, Rev< 3u, ArrHash< Hash("Marc Mutz") >(), wxS("Improving the Return Value of EraseLike Algorithms II Free eraseerase if") > >() },
    { "p1116r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("ReGaining Exclusive Ownership from sharedptrs") > >() },
    { "p1118r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz"), Hash("Tim Shen") >(), wxS("Concat and Split on simd objects") > >() },
    { "p1119r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("JF Bastien"), Hash("Matthias Kretz"), Hash("Olivier Girioux"), Hash("Thomas W Rodgers") >(), wxS("ABI for stdhardwareconstructivedestructiveinterferencesize") > >() },
    { "p1120r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Consistency improvements for  and other comparison operators") > >() },
    { "p1121r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Proposed Interface and Wording for Concurrency TS ") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Proposed Interface and Wording for Concurrency TS ") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Proposed Interface and Wording for Concurrency TS ") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers Proposed Interface and Wording for Concurrency TS ") > >() },
    { "p1122r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Proposed Wording for Concurrent Data Structures ReadCopyUpdate RCU") > >() },
    { "p1123r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Editorial Guidance for merging Pr and Pr") > >() },
    { "p1128r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Summer  WG Batavia LWG Meeting Information") > >() },
    { "p1130r0", 1u, RevList< Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Module Resource Requirement Propagation") > >() },
    { "p1131r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  simpletemplateid is ambiguous between classname and typename") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  simpletemplateid is ambiguous between classname and typename") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Issue  simpletemplateid is ambiguous between classname and typename") > >() },
    { "p1132r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 1u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 2u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 3u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 4u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 5u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 6u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 7u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") >, Rev< 8u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide"), Hash("Todor Buyukliev") >(), wxS("outptr  a scalable output pointer abstraction") > >() },
    { "p1133r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vinnie Falco") >(), wxS("Networking TS Associations For Call Wrappers") > >() },
    { "p1135r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Detlef Vollmann"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 3u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Detlef Vollmann"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 4u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("David Olsen"), Hash("Detlef Vollmann"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 5u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("David Olsen"), Hash("Detlef Vollmann"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") >, Rev< 6u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("David Olsen"), Hash("Detlef Vollmann"), Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("The C Synchronization Library") > >() },
    { "p1136r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS(" Bellevue adhoc meeting information") > >() },
    { "p1137r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1138r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("Deprecating ATOMICVARINIT") > >() },
    { "p1139r0", 2u, RevList< Rev< 0u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Address wording issues related to ISO ") >, Rev< 1u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Address wording issues related to ISO ") >, Rev< 2u, ArrHash< Hash("R. Martinho Fernandes") >(), wxS("Address wording issues related to ISO ") > >() },
    { "p1141r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Casey Carter"), Hash("Eric A Niebler"), Hash("Erich Keane"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Hubert S.K. Tong"), Hash("Jason Merrill"), Hash("Thomas K\\u00F6ppe"), Hash("Tom Honermann"), Hash("Ville Voutilainen") >(), wxS("Yet another approach for constrained declarations") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Casey Carter"), Hash("Eric A Niebler"), Hash("Erich Keane"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Hubert S.K. Tong"), Hash("Jason Merrill"), Hash("Michael Spertus"), Hash("Thomas K\\u00F6ppe"), Hash("Tom Honermann"), Hash("Ville Voutilainen"), Hash("Walter E. Brown") >(), wxS("Yet another approach for constrained declarations") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Casey Carter"), Hash("Eric A Niebler"), Hash("Erich Keane"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Hubert S.K. Tong"), Hash("Jason Merrill"), Hash("Michael Spertus"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe"), Hash("Tom Honermann"), Hash("Ville Voutilainen"), Hash("Walter E. Brown") >(), wxS("Yet another approach for constrained declarations") > >() },
    { "p1142r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Thoughts on a conservative terse syntax for constraints") > >() },
    { "p1143r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Eric Fiselier") >(), wxS("Adding the constinit attribute") >, Rev< 1u, ArrHash< Hash("Eric Fiselier") >(), wxS("Adding the constinit keyword") >, Rev< 2u, ArrHash< Hash("Eric Fiselier") >(), wxS("Adding the constinit keyword") > >() },
    { "p1144r0", 13u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Mingxin Wang") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 4u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 5u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 6u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Object relocation in terms of move plus destroy") >, Rev< 7u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 8u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 9u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 10u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 11u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 12u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("stdistriviallyrelocatable") >, Rev< 13u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Artur Ba\\u0107"), Hash("Daniel Liam Anderson"), Hash("Enrico Mauro"), Hash("Jody Hagins"), Hash("Michael Steffens"), Hash("St\\u00E9phane Janel"), Hash("Vinnie Falco"), Hash("Walter E. Brown"), Hash("Will Wray") >(), wxS("stdistriviallyrelocatable") > >() },
    { "p1145r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vinnie Falco") >(), wxS("Buffer Sequence Adaptors") > >() },
    { "p1147r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Printing volatile Pointers") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Printing volatile Pointers") > >() },
    { "p1148r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Cleaning up Clause ") > >() },
    { "p1149r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Constexpr regex") > >() },
    { "p1152r0", 4u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Deprecating volatile") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Deprecating volatile") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("Deprecating volatile") >, Rev< 3u, ArrHash< Hash("JF Bastien") >(), wxS("Deprecating volatile") >, Rev< 4u, ArrHash< Hash("JF Bastien") >(), wxS("Deprecating volatile") > >() },
    { "p1153r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("JF Bastien") >(), wxS("Copying volatile subobjects is not trivial") > >() },
    { "p1154r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Jeff Snyder") >(), wxS("Type traits for structural comparison") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Jeff Snyder") >(), wxS("Type traits for structural comparison") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Jeff Snyder") >(), wxS("Type traits for structural comparison") > >() },
    { "p1155r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("David Stone") >(), wxS("More implicit moves") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("David Stone") >(), wxS("More implicit moves") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("David Stone") >(), wxS("More implicit moves") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("David Stone") >(), wxS("More implicit moves") > >() },
    { "p1156r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Merged Modules and Tooling") > >() },
    { "p1157r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Multiargument constrainedparameter") > >() },
    { "p1158r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Conceptdefined placeholder types") > >() },
    { "p1159r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Russell") >(), wxS("Type Erased Iterators for modern C") > >() },
    { "p1160r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Add Test Polymorphic Memory Resource to the Standard Library") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Attila (Farkas) Feh\\uFFFDr") >(), wxS("Add Test Polymorphic Memory Resource to the Standard Library") > >() },
    { "p1161r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Deprecate uses of the comma operator in subscripting expressions") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Deprecate uses of the comma operator in subscripting expressions") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Deprecate uses of the comma operator in subscripting expressions") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Deprecate uses of the comma operator in subscripting expressions") > >() },
    { "p1163r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Explicitly Implicifying explicit Constructors") > >() },
    { "p1164r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Make createdirectory Intuitive") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Make createdirectory intuitive") > >() },
    { "p1165r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Fixing allocator usage for operatorbasicstring") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Make stateful allocator propagation more consistent for operatorbasicstring") > >() },
    { "p1166r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("What do we need from a linear algebra library") > >() },
    { "p1167r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Improving function templates with Class Template Argument Deduction") > >() },
    { "p1168r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("How to make Terse Notation soar with Class Template Argument Deduction") > >() },
    { "p1169r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("static operator") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("static operator") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("static operator") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("static operator") >, Rev< 4u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("static operator") > >() },
    { "p1170r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin") >(), wxS("Overload sets as function parameters") > >() },
    { "p1171r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Synchronously waiting on asynchronous operations") > >() },
    { "p1172r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("The Concept of Memory Allocator") >, Rev< 1u, ArrHash< Hash("Mingxin Wang") >(), wxS("The Concept of Memory Allocator") > >() },
    { "p1175r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("A simple and practical optional reference for C") > >() },
    { "p1177r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Package Ecosystem Plan") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Package Ecosystem Plan") > >() },
    { "p1178r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Compile") > >() },
    { "p1179r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Lifetime safety Preventing common dangling") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Lifetime safety Preventing common dangling") > >() },
    { "p1180r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Response to P") > >() },
    { "p1181r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Morwenn Ed") >(), wxS("Proposing unless") > >() },
    { "p1182r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gennaro Prot") >(), wxS("New names for the powerof templates and their header") > >() },
    { "p1184r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("A Module Mapper") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("A Module Mapper") >, Rev< 2u, ArrHash< Hash("Nathan Sidwell") >(), wxS("A Module Mapper") > >() },
    { "p1185r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("  ") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("  ") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("  ") > >() },
    { "p1186r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("When do you actually use ") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("When do you actually use ") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("When do you actually use ") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("When do you actually use ") > >() },
    { "p1187r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("A type trait for stdcompareways type") > >() },
    { "p1188r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Library utilities for ") > >() },
    { "p1189r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Adding  to library") > >() },
    { "p1190r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("I did not order this Why is it on my bill") > >() },
    { "p1191r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Adding operator to types that are not currently comparable") > >() },
    { "p1192r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas W Rodgers") >(), wxS("Experience report  integrating Executors with Parallel Algorithms") >, Rev< 1u, ArrHash< Hash("Thomas W Rodgers") >(), wxS("Experience report  integrating Executors with Parallel Algorithms") > >() },
    { "p1193r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Explicitly Specified Returns for Implicit Conversions") > >() },
    { "p1194r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("D. S. Hollman"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes") >(), wxS("The Compromise Executors Proposal A lazy simplification of P") > >() },
    { "p1195r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Making systemerror constexpr") > >() },
    { "p1196r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Valuebased stderrorcategory comparison") > >() },
    { "p1197r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("A nonallocating overload of errorcategorymessage") > >() },
    { "p1198r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Adding errorcategoryfailed") > >() },
    { "p1199r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("A simple proposal for unifying generic and objectoriented programming") > >() },
    { "p1200r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson"), Hash("Jean-Paul Rigault"), Hash("Jose Daniel Garcia Sanchez"), Hash("Matevz Tadel"), Hash("Roger Orr"), Hash("Ville Voutilainen") >(), wxS("High noon for the D Graphics proposal") > >() },
    { "p1201r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin"), Hash("Oleg Fatkhiev") >(), wxS("Variant direct comparisons") > >() },
    { "p1202r0", 5u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric fences") >, Rev< 1u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric Fences") >, Rev< 2u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric Fences") >, Rev< 3u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric Fences") >, Rev< 4u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric Fences") >, Rev< 5u, ArrHash< Hash("David Goldblatt") >(), wxS("Asymmetric Fences") > >() },
    { "p1203r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov"), Hash("Richard Smith") >(), wxS("Modular main") > >() },
    { "p1204r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Canonical Project Structure") > >() },
    { "p1205r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Olivier Girioux") >(), wxS("Teleportation via coawait") > >() },
    { "p1206r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("Range constructors for standard containers and views") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("rangesto A function to convert any range to a container") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("rangesto A function to convert any range to a container") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("rangesto A function to convert any range to a container") >, Rev< 4u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("Conversions from ranges to containers") >, Rev< 5u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("Conversions from ranges to containers") >, Rev< 6u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("Conversions from ranges to containers") >, Rev< 7u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot"), Hash("Eric A Niebler") >(), wxS("Conversions from ranges to containers") > >() },
    { "p1207r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Movability of Singlepass Iterators") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Movability of Singlepass Iterators") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Movability of Singlepass Iterators") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Movability of Singlepass Iterators") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Movability of Singlepass Iterators") > >() },
    { "p1208r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Robert Douglas") >(), wxS("Adopt sourcelocation from Library Fundamentals V for C") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Robert Douglas") >(), wxS("Adopt sourcelocation from Library Fundamentals V for C") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Robert Douglas") >(), wxS("SourceCode Information Capture") >, Rev< 4u, ArrHash< Hash("Corentin Jabot"), Hash("Robert Douglas") >(), wxS("Adopt source location from Library Fundamentals V for C") >, Rev< 5u, ArrHash< Hash("Corentin Jabot"), Hash("Robert Douglas") >(), wxS("Adopt source location from Library Fundamentals V for C") >, Rev< 6u, ArrHash< Hash("Corentin Jabot"), Hash("Daniel Kr\\u00FCgler"), Hash("Peter Sommerlad"), Hash("Robert Douglas") >(), wxS("Adopt source location from Library Fundamentals V for C") > >() },
    { "p1209r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Stephan T. Lavavej") >(), wxS("Adopt Consistent Container Erasure from Library Fundamentals  for C") > >() },
    { "p1210r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Completing the Rebase of Library Fundamentals Version  Working Draft") > >() },
    { "p1212r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Modules and Freestanding") > >() },
    { "p1213r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Global Module Fragment is Unnecessary") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Global Module Fragment Is Unnecessary") > >() },
    { "p1214r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Pointer to Member Functions and Member Objects are just Callables") > >() },
    { "p1217r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Outofthinair revisited again") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Outofthinair revisited again") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Outofthinair revisited again") > >() },
    { "p1218r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Redefinitions in Legacy Imports") > >() },
    { "p1219r0", 2u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Homogeneous variadic function parameters") >, Rev< 1u, ArrHash< Hash("James Touton") >(), wxS("Homogeneous variadic function parameters") >, Rev< 2u, ArrHash< Hash("James Touton") >(), wxS("Homogeneous variadic function parameters") > >() },
    { "p1220r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Kennelly") >(), wxS("Controlling When Inline Functions are Emitted") > >() },
    { "p1221r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jason Rice") >(), wxS("Parametric Expressions") >, Rev< 1u, ArrHash< Hash("Jason Rice") >(), wxS("Parametric Expressions") > >() },
    { "p1222r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatset") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatset") >, Rev< 2u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatset") >, Rev< 3u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatset") >, Rev< 4u, ArrHash< Hash("Zach Laine") >(), wxS("A Standard flatset") > >() },
    { "p1223r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("findbackward") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("findbackward") >, Rev< 2u, ArrHash< Hash("Zach Laine") >(), wxS("findbackward") >, Rev< 3u, ArrHash< Hash("Zach Laine") >(), wxS("findlast") >, Rev< 4u, ArrHash< Hash("Zach Laine") >(), wxS("findlast") >, Rev< 5u, ArrHash< Hash("Zach Laine") >(), wxS("findlast") > >() },
    { "p1224r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in San Diego") > >() },
    { "p1225r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Feedback on D Graphics") > >() },
    { "p1227r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jorg Brown") >(), wxS("Signed size functions") >, Rev< 1u, ArrHash< Hash("Jorg Brown") >(), wxS("Signed ssize functions unsigned size functions") >, Rev< 2u, ArrHash< Hash("Jorg Brown") >(), wxS("Signed ssize functions unsigned size functions") > >() },
    { "p1228r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Jorg Brown") >(), wxS("A proposal to add an efficient string concatenation routine to the Standard Library") > >() },
    { "p1229r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jorg Brown") >(), wxS("Labelled Parameters") > >() },
    { "p1230r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Recursive Type Template Instantiation") > >() },
    { "p1231r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("J.C. van Winkel") >(), wxS("Proposal for Study Group C Education") > >() },
    { "p1232r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Robert Geva") >(), wxS("Integrating executors with the standard library through customization") > >() },
    { "p1233r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ashley Hedberg"), Hash("Matt Calabrese") >(), wxS("Shiftbynegative in shiftleft and shiftright") >, Rev< 1u, ArrHash< Hash("Ashley Hedberg"), Hash("Bryce Adelstein Lelbach"), Hash("Matt Calabrese") >(), wxS("Shiftbynegative in shiftleft and shiftright") > >() },
    { "p1235r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Implicit constexpr") > >() },
    { "p1236r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Alternative Wording for PR Signed Integers are Twos Complement") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Alternative Wording for PR Signed Integers are Twos Complement") > >() },
    { "p1237r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1238r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("JeanHeyd Meneide"), Hash("Mark Zeren"), Hash("Peter Bindels"), Hash("R. Martinho Fernandes"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("SG Unicode Direction") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("JeanHeyd Meneide"), Hash("Mark Zeren"), Hash("Peter Bindels"), Hash("R. Martinho Fernandes"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("SG Unicode Direction") > >() },
    { "p1239r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Lustig") >(), wxS("Placed Before") > >() },
    { "p1240r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali") >(), wxS("Scalable Reflection in C") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Wyatt Childers") >(), wxS("Scalable Reflection in C") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Wyatt Childers") >(), wxS("Scalable Reflection") > >() },
    { "p1241r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Lee Howes"), Hash("Lewis Baker") >(), wxS("In support of merging coroutines into C") > >() },
    { "p1242r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder") >(), wxS("Singlefile modules with the Atom semantic properties rule") >, Rev< 1u, ArrHash< Hash("Jeff Snyder"), Hash("Richard Smith") >(), wxS("Singlefile modules with the Atom semantic properties rule") > >() },
    { "p1243r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") >, Rev< 1u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") >, Rev< 2u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") >, Rev< 3u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") >, Rev< 4u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") > >() },
    { "p1244r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Mysen"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("Dependent Execution for a Unified Executors Proposal for C") > >() },
    { "p1245r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Cardoso Lopes"), Hash("JF Bastien") >(), wxS("export module containing attribute") > >() },
    { "p1246r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Cardoso Lopes"), Hash("JF Bastien") >(), wxS("The nofloat function attribute") > >() },
    { "p1247r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Cardoso Lopes"), Hash("Erik Pilkington"), Hash("JF Bastien") >(), wxS("Disabling static destructors introducing nodestroy and alwaysdestroy attributes") > >() },
    { "p1248r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixing Relations") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Remove CommonReference requirement from StrictWeakOrdering") > >() },
    { "p1249r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen") >(), wxS("stdforward from stdinitializerlist") > >() },
    { "p1250r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ashley Hedberg"), Hash("Eric Fiselier"), Hash("Titus Winters") >(), wxS("Extension by inspecting members of User Defined Types") > >() },
    { "p1251r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Morris Hafner") >(), wxS("A more constexpr bitset") >, Rev< 1u, ArrHash< Hash("Morris Hafner") >(), wxS("A more constexpr bitset") > >() },
    { "p1252r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges Design Cleanup") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges Design Cleanup") >, Rev< 2u, ArrHash< Hash("Casey Carter") >(), wxS("Ranges Design Cleanup") > >() },
    { "p1253r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Guidelines for when a WG proposal should be reviewed by SG the text and Unicode study group") > >() },
    { "p1254r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Notes on C Package Management") > >() },
    { "p1255r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewmaybe") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewmaybe") >, Rev< 2u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewmaybe") >, Rev< 3u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewmaybe") >, Rev< 4u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewmaybe") >, Rev< 5u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 6u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 7u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 8u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 9u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 10u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 11u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 12u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsmaybe") >, Rev< 13u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsnullable And a concept to constrain maybes") >, Rev< 14u, ArrHash< Hash("Steve Downey") >(), wxS("A view of  or  elements viewsnullable And a concept to constrain maybes") > >() },
    { "p1256r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Executors Should Go To A TS") > >() },
    { "p1257r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Implementation experience on trying to implement concurrent data and control structures with executors") > >() },
    { "p1258r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Dont Make C Unimplementable On Small CPUs") > >() },
    { "p1259r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Merge most of Networking TS into C Working Draft") >, Rev< 1u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Merge most of Networking TS into C Working Draft") > >() },
    { "p1260r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching") > >() },
    { "p1261r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Wong"), Hash("Ronan Keryell") >(), wxS("Supporting Pipelines in C") > >() },
    { "p1263r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Controlling the instantiation of vtables and RTTI") > >() },
    { "p1264r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne") >(), wxS("Revising the wording of stream input operations") >, Rev< 1u, ArrHash< Hash("Louis Dionne") >(), wxS("Revising the wording of stream input operations") >, Rev< 2u, ArrHash< Hash("Louis Dionne") >(), wxS("Revising the wording of stream input operations") > >() },
    { "p1267r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Custom Constraint Diagnostics") > >() },
    { "p1269r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Carey") >(), wxS("Three Years with the Networking TS") > >() },
    { "p1271r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move resourceadaptor from Library TS to the C WP") > >() },
    { "p1272r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Byteswapping for funnuf") >, Rev< 1u, ArrHash< Hash("Isabella Muerte") >(), wxS("Byteswapping for funnuf") >, Rev< 2u, ArrHash< Hash("Isabella Muerte") >(), wxS("Byteswapping for funnuf") >, Rev< 3u, ArrHash< Hash("Isabella Muerte") >(), wxS("Byteswapping for funnuf") >, Rev< 4u, ArrHash< Hash("Corentin Jabot"), Hash("Isabella Muerte") >(), wxS("Byteswapping for funnuf") > >() },
    { "p1273r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS(" The Absurd From Exceptions") > >() },
    { "p1274r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Bang For The Buck") > >() },
    { "p1275r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Desert Sessions Improving hostile environment interactions") > >() },
    { "p1276r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Void Main") > >() },
    { "p1277r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Subscripts On Parade") > >() },
    { "p1278r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("offsetof For the Modern Era") > >() },
    { "p1279r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("stdbreakpoint") > >() },
    { "p1280r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Integer Width Literals") >, Rev< 1u, ArrHash< Hash("Isabella Muerte") >(), wxS("Integer Width Literals") >, Rev< 2u, ArrHash< Hash("Isabella Muerte") >(), wxS("Integer Width Literals") > >() },
    { "p1281r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Feature Presentation") > >() },
    { "p1282r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Ceci Nest Pas Une Pipe Adding a workflow operator to C") > >() },
    { "p1283r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Sharing is Caring") > >() },
    { "p1284r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chris Kennelly") >(), wxS("Allowing Inlining of Replaceable Functions") > >() },
    { "p1285r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Improving Completeness Requirements for Type Traits") > >() },
    { "p1286r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Contra CWG DR") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Contra CWG DR") >, Rev< 2u, ArrHash< Hash("Richard Smith") >(), wxS("Contra CWG DR") > >() },
    { "p1287r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop"), Hash("Lewis Baker") >(), wxS("Supporting async usecases for interrupttoken") > >() },
    { "p1288r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Coroutine concepts and metafunctions") > >() },
    { "p1289r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Ville Voutilainen") >(), wxS("Access control in contract conditions") >, Rev< 1u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Ville Voutilainen") >(), wxS("Access control in contract conditions") > >() },
    { "p1290r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Avoiding undefined behavior in contracts") >, Rev< 1u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Ville Voutilainen") >(), wxS("Avoiding undefined behavior in contracts") >, Rev< 2u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Ville Voutilainen") >(), wxS("Avoiding undefined behavior in contracts") >, Rev< 3u, ArrHash< Hash("Jose Daniel Garcia Sanchez"), Hash("Ville Voutilainen") >(), wxS("Avoiding undefined behavior in contracts") > >() },
    { "p1291r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("stdrangesless Should Be More") > >() },
    { "p1292r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matt Calabrese") >(), wxS("Customization Point Functions") > >() },
    { "p1293r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("ostreamjoiner") >, Rev< 1u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("ostreamjoiner") >, Rev< 2u, ArrHash< Hash("Michael Spertus"), Hash("Nathan Wilson") >(), wxS("ostreamjoiner") > >() },
    { "p1294r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Maddock"), Hash("Michael Spertus") >(), wxS("Proposed resolution for US Allocatoraware regular expressions rev ") > >() },
    { "p1295r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Spaceship library update") > >() },
    { "p1296r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Szaday"), Hash("Phil Miller") >(), wxS("assert stddisjointAnA BnB Contract assertions as an alternate spelling of restrict") > >() },
    { "p1298r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Olivier Girioux") >(), wxS("Reserve more freedom for atomicref implementers") > >() },
    { "p1299r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Preamble is Unnecessary") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Preamble is Unnecessarily Fragile") >, Rev< 3u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Module Preamble is Unnecessarily Fragile") > >() },
    { "p1300r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte"), Hash("Jussi Pakkanen"), Hash("Peter Bindels") >(), wxS("Remember the FORTRAN") > >() },
    { "p1301r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide") >(), wxS("nodiscard should have a reason") >, Rev< 1u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide") >(), wxS("nodiscardshould have a reason") >, Rev< 2u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide") >(), wxS("nodiscardshould have a reason") >, Rev< 3u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide") >(), wxS("nodiscardshould have a reason") >, Rev< 4u, ArrHash< Hash("Isabella Muerte"), Hash("JeanHeyd Meneide") >(), wxS("nodiscardshould have a reason") > >() },
    { "p1302r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte"), Hash("Richard Smith") >(), wxS("Implicit Module Partition Lookup") >, Rev< 1u, ArrHash< Hash("Isabella Muerte"), Hash("Richard Smith") >(), wxS("Implicit Module Partition Lookup") > >() },
    { "p1303r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Inline Module Partitions") > >() },
    { "p1304r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Simplifying Extern Template") > >() },
    { "p1305r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Deprecate The Addressof Operator") > >() },
    { "p1306r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") >, Rev< 3u, ArrHash< Hash("Andrew Sutton"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") >, Rev< 4u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") >, Rev< 5u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Sam Goodrick") >(), wxS("Expansion statements") > >() },
    { "p1307r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("weakequality considered harmful") > >() },
    { "p1308r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Sergei Murzin") >(), wxS("Pattern Matching") > >() },
    { "p1310r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Unifying the many ways to compare") > >() },
    { "p1312r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Comparison Concepts") > >() },
    { "p1313r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Woehlke") >(), wxS("Lets Talk About Package Specification") > >() },
    { "p1314r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Miguel Ojeda") >(), wxS("uniqueval a defaultonmove") >, Rev< 1u, ArrHash< Hash("Miguel Ojeda") >(), wxS("uniqueval a defaultonmove type") > >() },
    { "p1315r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureval a secureclearonmove type") >, Rev< 1u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureval a secureclearonmove type") >, Rev< 2u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear") >, Rev< 3u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear") >, Rev< 4u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear") >, Rev< 5u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear") >, Rev< 6u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear update to N") >, Rev< 7u, ArrHash< Hash("Miguel Ojeda") >(), wxS("secureclear") > >() },
    { "p1316r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("A whenall operator for coroutines") > >() },
    { "p1317r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Remove return type deduction in stdapply") >, Rev< 1u, ArrHash< Hash("Aaryaman Sagar"), Hash("Eric A Niebler") >(), wxS("Remove return type deduction in stdapply") > >() },
    { "p1318r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaryaman Sagar") >(), wxS("Tuple application traits") > >() },
    { "p1319r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") > >() },
    { "p1320r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Allowing contract predicates on nonfirst declarations") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Allowing contract predicates on nonfirst declarations") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Allowing contract predicates on nonfirst declarations") > >() },
    { "p1321r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("UB in contract violations") > >() },
    { "p1322r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS enhancement to enable custom IO executors") >, Rev< 1u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS enhancement to enable custom IO executors") >, Rev< 2u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS enhancement to enable custom IO executors") >, Rev< 3u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS enhancement to enable custom IO executors") > >() },
    { "p1323r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Contract postconditions and return type deduction") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Contract postconditions and return type deduction") >, Rev< 2u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Contract postconditions and return type deduction") > >() },
    { "p1324r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("RE Yet another approach for constrained declarations") >, Rev< 1u, ArrHash< Hash("Mihail Naydenov") >(), wxS("RE Yet another approach for constrained declarations") > >() },
    { "p1327r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Allowing dynamiccast polymorphic typeid in Constant Expressions") >, Rev< 1u, ArrHash< Hash("Peter Dimov"), Hash("Richard Smith"), Hash("Vassil Vassilev") >(), wxS("Allowing dynamiccast polymorphic typeid in Constant Expressions") > >() },
    { "p1328r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Dimov") >(), wxS("Making stdtypeinfooperator constexpr") >, Rev< 1u, ArrHash< Hash("Peter Dimov") >(), wxS("Making stdtypeinfooperator constexpr") > >() },
    { "p1329r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Mihailov"), Hash("Vassil Vassilev") >(), wxS("On the Coroutines TS") > >() },
    { "p1330r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Louis Dionne") >(), wxS("Changing the active member of a union inside constexpr") > >() },
    { "p1331r0", 2u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("Permitting trivial default initialization in constexpr contexts") >, Rev< 1u, ArrHash< Hash("CJ Johnson") >(), wxS("Permitting trivial default initialization in constexpr contexts") >, Rev< 2u, ArrHash< Hash("CJ Johnson") >(), wxS("Permitting trivial default initialization in constexpr contexts") > >() },
    { "p1332r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hyman Rosen"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Nathan Burgers") >(), wxS("Contract Checking in C A longterm Road Map") > >() },
    { "p1333r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Assigning Concrete Semantics to ContractChecking Levels at Compile Time") > >() },
    { "p1334r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Specifying Concrete Semantics Directly in ContractChecking Statements") > >() },
    { "p1335r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("Avoiding undefined behavior in contracts PR Explained") > >() },
    { "p1337r0", 0u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("Aliasing the standard library as a means to save C") > >() },
    { "p1338r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  San Diego Record of Discussion") >, Rev< 1u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  San Diego Record of Discussion") > >() },
    { "p1339r0", 1u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("Disallowing the friending of names in namespace std") >, Rev< 1u, ArrHash< Hash("CJ Johnson") >(), wxS("Disallowing the friending of names in namespace std") > >() },
    { "p1341r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Unifying Asynchronous APIs in the Standard Library") > >() },
    { "p1342r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Unifying Coroutines TS and Core Coroutines") > >() },
    { "p1344r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("PrePost vs EnspectsExsures") >, Rev< 1u, ArrHash< Hash("Nathan Myers") >(), wxS("PrePost vs EnspectsExsures") > >() },
    { "p1347r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell"), Hash("S. Davis Herring") >(), wxS("Modules ADL  Internal Linkage") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell"), Hash("S. Davis Herring") >(), wxS("Modules ADL  Internal Linkage") > >() },
    { "p1348r0", 0u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman"), Hash("H. Carter Edwards"), Hash("Jared Hoberock"), Hash("Lee Howes"), Hash("Michael Garland") >(), wxS("An Executor Property for Occupancy of Execution Agents") > >() },
    { "p1349r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vinnie Falco") >(), wxS("Better Integration of Sender Executors") > >() },
    { "p1350r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the November  San Diego meeting") > >() },
    { "p1351r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Zeren") >(), wxS("Intrusive smart pointer feedback") > >() },
    { "p1353r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Missing Feature Test Macros") > >() },
    { "p1354r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth") >(), wxS("SG Guidelines for Review of Proposals") > >() },
    { "p1355r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Chris Kennelly") >(), wxS("Exposing a narrow contract for ceil") >, Rev< 1u, ArrHash< Hash("Chris Kennelly") >(), wxS("Exposing a narrow contract for ceil") >, Rev< 2u, ArrHash< Hash("Chris Kennelly") >(), wxS("Exposing a narrow contract for ceil") > >() },
    { "p1356r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Coroutine TS ready issues  and ") > >() },
    { "p1357r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Walter E. Brown") >(), wxS("Traits for Unbounded Arrays") >, Rev< 1u, ArrHash< Hash("Glen Joseph Fernandes"), Hash("Walter E. Brown") >(), wxS("Traits for Unbounded Arrays") > >() },
    { "p1358r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core ready Issues") > >() },
    { "p1359r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core tentatively ready Issues") > >() },
    { "p1360r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Emad Barsoum"), Hash("Franke Seide"), Hash("Michael Wong"), Hash("Peter Goldsborough"), Hash("Robert Douglas"), Hash("Sarthak Pati"), Hash("Vincent Reverdy") >(), wxS("Towards Machine Learning for C Study Group ") > >() },
    { "p1361r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daniela Engert"), Hash("Howard E. Hinnant"), Hash("Victor Zverovich") >(), wxS("Integration of chrono with text formatting") >, Rev< 1u, ArrHash< Hash("Daniela Engert"), Hash("Howard E. Hinnant"), Hash("Victor Zverovich") >(), wxS("Integration of chrono with text formatting") >, Rev< 2u, ArrHash< Hash("Daniela Engert"), Hash("Howard E. Hinnant"), Hash("Victor Zverovich") >(), wxS("Integration of chrono with text formatting") > >() },
    { "p1362r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Incremental Approach Coroutine TS  Core Coroutines") > >() },
    { "p1364r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Fibers under the magnifying glass") > >() },
    { "p1365r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Using Coroutine TS with zero dynamic allocations") > >() },
    { "p1367r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Olivier Girioux") >(), wxS("Not All Agents Have TLS") >, Rev< 1u, ArrHash< Hash("Olivier Girioux") >(), wxS("Not All Agents Have TLS") > >() },
    { "p1368r0", 1u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Multiplication and division of fixedpoint numbers") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Multiplication and division of fixedpoint numbers") > >() },
    { "p1369r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Guidelines for Formulating Library Semantics Specifications") > >() },
    { "p1370r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen") >(), wxS("Generic numerical algorithm development without numericlimits") >, Rev< 1u, ArrHash< Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen") >(), wxS("Generic numerical algorithm development without numericlimits") > >() },
    { "p1371r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Pattern Matching") >, Rev< 1u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Pattern Matching") >, Rev< 2u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Pattern Matching") >, Rev< 3u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Bruno Cardoso Lopes"), Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Pattern Matching") > >() },
    { "p1372r0", 0u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman") >(), wxS("Giving atomicref implementers more flexibility by providing customization points for nonlockfree implementation") > >() },
    { "p1373r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Syntax alternatives for modules") > >() },
    { "p1374r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Resolving LWG  for C Consistently Explicit Constructors") > >() },
    { "p1375r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("More Constrained Apples or Oranges On the road to semantic constraint matching") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("More Constrained Apples or Oranges On the road to semantic constraint matching") >, Rev< 2u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("More Constrained Apples or Oranges") > >() },
    { "p1376r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Summary of freestanding evening session discussions") > >() },
    { "p1377r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Summary of Dec  SG freestanding discussions") > >() },
    { "p1378r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdstringliteral") > >() },
    { "p1380r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Ambiguity and Insecurities with ThreeWay Comparison") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Ambiguity and Insecurities with ThreeWay Comparison") > >() },
    { "p1381r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Reference capture of structured bindings") >, Rev< 1u, ArrHash< Hash("Nicolas Lesser") >(), wxS("Reference capture of structured bindings") > >() },
    { "p1382r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien"), Hash("Paul E. McKenney") >(), wxS("volatileloadT and volatilestoreT") >, Rev< 1u, ArrHash< Hash("JF Bastien"), Hash("Jeffrey Yasskin"), Hash("Paul E. McKenney") >(), wxS("volatileloadT and volatilestoreT") > >() },
    { "p1383r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Edward J. Rosten"), Hash("Oliver J. Rosten") >(), wxS("More constexpr for cmath and complex") >, Rev< 1u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("More constexpr for cmath and complex") >, Rev< 2u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("More constexpr for cmath and complex") > >() },
    { "p1385r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 1u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 2u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 3u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 4u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 5u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 6u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") >, Rev< 7u, ArrHash< Hash("Bob Steagall"), Hash("Guy Davidson") >(), wxS("A proposal to add linear algebra support to the C standard library") > >() },
    { "p1386r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson"), Hash("Guy Somberg"), Hash("Timur Doumler") >(), wxS("A Standard Audio API for C Motivation Scope and Basic Design") >, Rev< 1u, ArrHash< Hash("Guy Davidson"), Hash("Guy Somberg"), Hash("Timur Doumler") >(), wxS("A Standard Audio API for C Motivation Scope and Basic Design") >, Rev< 2u, ArrHash< Hash("Guy Davidson"), Hash("Guy Somberg"), Hash("Timur Doumler") >(), wxS("A Standard Audio API for C Motivation Scope and Basic Design") > >() },
    { "p1388r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("J.C. van Winkel") >(), wxS(" SG Telecon Minutes") > >() },
    { "p1389r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Michael Adams"), Hash("Sy Brand") >(), wxS("Standing Document for SG Guidelines for Teaching C to Beginners") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella"), Hash("Michael Adams"), Hash("Sy Brand") >(), wxS("Standing Document for SG Guidelines for Teaching C to Beginners") > >() },
    { "p1390r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Suggested Reflection TS NB Resolutions") >, Rev< 1u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Reflection TS NB comment resolutions summary and rationale") > >() },
    { "p1391r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview") > >() },
    { "p1392r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr"), Hash("S. Davis Herring") >(), wxS("Differences Between Functions and Function Templates") > >() },
    { "p1393r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Gordon Brown"), Hash("Jared Hoberock"), Hash("Micha\\u0142 Dominiak") >(), wxS("A General Property Customization Mechanism") > >() },
    { "p1394r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Range constructor for stdspan") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Range constructor for stdspan") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Range constructor for stdspan") >, Rev< 3u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Range constructor for stdspan") >, Rev< 4u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Range constructor for stdspan") > >() },
    { "p1395r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Partitions Are Not a Panacea") > >() },
    { "p1401r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") >, Rev< 3u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") >, Rev< 4u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") >, Rev< 5u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Narrowing contextual conversions to bool") > >() },
    { "p1402r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("stdcstringview  a C compatible stdstringview adapter") > >() },
    { "p1403r0", 0u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman") >(), wxS("Experience Report Implementing a Coroutines TS Frontend to an Existing Tasking Library") > >() },
    { "p1404r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("badalloc is not outofmemory") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Tomasz Kami\\u0144ski") >(), wxS("badalloc is not outofmemory") > >() },
    { "p1405r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("Jared Hoberock") >(), wxS("C Executors are Resilient to ABI Breakage") > >() },
    { "p1406r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("Add more stdhash specializations") >, Rev< 1u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("Add more stdhash specializations") > >() },
    { "p1407r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Scott Schurr") >(), wxS("Tell Programmers About Signed Integer Overflow Behavior") >, Rev< 1u, ArrHash< Hash("Scott Schurr") >(), wxS("Tell Programmers About Signed Integer Overflow Behavior") > >() },
    { "p1408r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Abandon observerptr") > >() },
    { "p1410r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Remove deprecated strstream") > >() },
    { "p1411r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Please reconsider scope for C") > >() },
    { "p1412r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Class Natures for Safety Critical Code On userdeclared and userdefined special member functions") > >() },
    { "p1413r0", 3u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("A safer interface for stdalignedstorage") >, Rev< 1u, ArrHash< Hash("CJ Johnson") >(), wxS("Deprecate stdalignedstorage and stdalignedunion") >, Rev< 2u, ArrHash< Hash("CJ Johnson") >(), wxS("Deprecate stdalignedstorage and stdalignedunion") >, Rev< 3u, ArrHash< Hash("CJ Johnson") >(), wxS("Deprecate stdalignedstorage and stdalignedunion") > >() },
    { "p1415r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eugenio Bargiacchi"), Hash("Michael Wong"), Hash("Richard Dosselmann"), Hash("Ritwik Dubey"), Hash("Vincent Reverdy") >(), wxS("SG Machine Learning Layered List") >, Rev< 1u, ArrHash< Hash("Eugenio Bargiacchi"), Hash("Michael Wong"), Hash("Richard Dosselmann"), Hash("Ritwik Dubey"), Hash("Vincent Reverdy") >(), wxS("SG Machine Learning Layered List") > >() },
    { "p1416r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Johann Mabille"), Hash("Matthieu Brucher") >(), wxS("SG Linear Algebra for Data Science and Machine Learning") > >() },
    { "p1417r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Athanasios (Nasos) Iliopoulos"), Hash("Jayesh Badwaik"), Hash("John Michopoulos"), Hash("Mark Hoemmen"), Hash("Matthieu Brucher") >(), wxS("Historical lessons for C linear algebra library standardization") > >() },
    { "p1419r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("A SFINAEfriendly trait to determine the extent of statically sized containers") > >() },
    { "p1421r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Assigning semantics to different Contract Checking Statements") > >() },
    { "p1422r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1423r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("chart backward compatibility remediation") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("chart backward compatibility remediation") >, Rev< 2u, ArrHash< Hash("Tom Honermann") >(), wxS("chart backward compatibility remediation") >, Rev< 3u, ArrHash< Hash("Tom Honermann") >(), wxS("chart backward compatibility remediation") > >() },
    { "p1424r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("constexpr feature macro concerns") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("constexpr feature macro concerns") > >() },
    { "p1425r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Iterators pair constructors for stack and queue") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Iterators pair constructors for stack and queue") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Iterators pair constructors for stack and queue") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Iterators pair constructors for stack and queue") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Iterators pair constructors for stack and queue") > >() },
    { "p1426r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("Pull the Plug on Contracts") > >() },
    { "p1427r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Corentin Jabot"), Hash("Peter Bindels"), Hash("Ren\\u00E9 Ferdinand Rivera Morell"), Hash("Stephen Kelly"), Hash("Steve Downey"), Hash("Tom Honermann") >(), wxS("Concerns about module toolability") > >() },
    { "p1428r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Subscripts and sizes should be signed") > >() },
    { "p1429r0", 3u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Contracts That Work") >, Rev< 1u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Contracts That Work") >, Rev< 2u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Contracts That Work") >, Rev< 3u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Contracts That Work") > >() },
    { "p1430r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mihail Mihailov"), Hash("Vassil Vassilev") >(), wxS("Firstclass symmetric coroutines in C") >, Rev< 1u, ArrHash< Hash("Mihail Mihailov"), Hash("Vassil Vassilev") >(), wxS("Firstclass symmetric coroutines in C") > >() },
    { "p1433r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Compile Time Regular Expressions") > >() },
    { "p1434r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Jens Gustedt"), Hash("Martin Uecker") >(), wxS("Discussing Pointer Provenance") > >() },
    { "p1436r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Executor properties for affinitybased execution") >, Rev< 1u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Executor properties for affinitybased execution") >, Rev< 2u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas W Rodgers") >(), wxS("Executor properties for affinitybased execution") >, Rev< 3u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers") >(), wxS("Executor properties for affinitybased execution") > >() },
    { "p1438r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") >, Rev< 1u, ArrHash< Hash("Bill Seymour") >(), wxS("A Rational Number Library for C") > >() },
    { "p1439r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Charset Transcoding Transformation and Transliteration") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Charset Transcoding Transformation and Transliteration") > >() },
    { "p1440r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Johel Ernesto Guerrero Pe\\u00F1a") >(), wxS("isclamped") > >() },
    { "p1441r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Are modules fast") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Are modules fast") > >() },
    { "p1442r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Damian Jarek") >(), wxS("A Medley of Networking TS improvements") > >() },
    { "p1443r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes   ") > >() },
    { "p1444r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning   ") > >() },
    { "p1445r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Concurrency TS to update or not update") > >() },
    { "p1446r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Reconsider the Networking TS for inclusion in C") > >() },
    { "p1447r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Naumann"), Hash("David Sankel"), Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("constexpr C is not constexpr C") > >() },
    { "p1448r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Burgers") >(), wxS("Simplifying Mixed Contract Modes") > >() },
    { "p1449r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Towards Tree and Graph Data Structures for C") > >() },
    { "p1450r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Enriching type modification traits") >, Rev< 1u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Enriching type modification traits") >, Rev< 2u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Enriching type modification traits") >, Rev< 3u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Enriching type modification traits") > >() },
    { "p1452r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("On the nonuniform semantics of returntyperequirements") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("On the nonuniform semantics of returntyperequirements") >, Rev< 2u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("On the nonuniform semantics of returntyperequirements") > >() },
    { "p1453r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Modularizing the Standard Library is a Reorganization Opportunity") > >() },
    { "p1456r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Moveonly views") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Moveonly views") > >() },
    { "p1457r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Kona") > >() },
    { "p1458r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Language support library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Language support library") > >() },
    { "p1459r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Diagnostics library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Diagnostics library") > >() },
    { "p1460r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alberto Ganesh Barbati"), Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Utilities library") >, Rev< 1u, ArrHash< Hash("Alberto Ganesh Barbati"), Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Utilities library") > >() },
    { "p1462r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Strings library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Strings library") > >() },
    { "p1463r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Containers library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Containers library") > >() },
    { "p1464r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Iterators library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Iterators library") > >() },
    { "p1465r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Function optimization hint attributes alwaysinline neverinline") > >() },
    { "p1466r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Miscellaneous minor fixes for chrono") >, Rev< 1u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Miscellaneous minor fixes for chrono") >, Rev< 2u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Miscellaneous minor fixes for chrono") >, Rev< 3u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Miscellaneous minor fixes for chrono") > >() },
    { "p1467r0", 9u, RevList< Rev< 0u, ArrHash< Hash("David Olsen"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types") >, Rev< 1u, ArrHash< Hash("David Olsen"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types") >, Rev< 2u, ArrHash< Hash("David Olsen"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types") >, Rev< 3u, ArrHash< Hash("David Olsen"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types") >, Rev< 4u, ArrHash< Hash("David Olsen"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") >, Rev< 5u, ArrHash< Hash("David Olsen"), Hash("Ilya Burylov"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") >, Rev< 6u, ArrHash< Hash("David Olsen"), Hash("Ilya Burylov"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") >, Rev< 7u, ArrHash< Hash("David Olsen"), Hash("Ilya Burylov"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") >, Rev< 8u, ArrHash< Hash("David Olsen"), Hash("Ilya Burylov"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") >, Rev< 9u, ArrHash< Hash("David Olsen"), Hash("Ilya Burylov"), Hash("Micha\\u0142 Dominiak") >(), wxS("Extended floatingpoint types and standard names") > >() },
    { "p1468r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Boris Fomitchev"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("Fixedlayout floatingpoint type aliases") >, Rev< 1u, ArrHash< Hash("Boris Fomitchev"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("Fixedlayout floatingpoint type aliases") >, Rev< 2u, ArrHash< Hash("Boris Fomitchev"), Hash("David Olsen"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("Fixedlayout floatingpoint type aliases") >, Rev< 3u, ArrHash< Hash("Boris Fomitchev"), Hash("David Olsen"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("Fixedlayout floatingpoint type aliases") >, Rev< 4u, ArrHash< Hash("Boris Fomitchev"), Hash("David Olsen"), Hash("Micha\\u0142 Dominiak"), Hash("Sergei Nikolaev") >(), wxS("Fixedlayout floatingpoint type aliases") > >() },
    { "p1469r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Disallow  Usage in C for Pattern Matching in C") > >() },
    { "p1470r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Against a standard concurrent hashmap") > >() },
    { "p1471r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("The trouble with coroutinetraits") > >() },
    { "p1472r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("SG Transactional Memory TM Meeting Minutes June   January ") > >() },
    { "p1473r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Shadow namespaces") > >() },
    { "p1474r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Helpful pointers for ContiguousIterator") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Helpful pointers for ContiguousIterator") > >() },
    { "p1477r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Coroutines TS Simplifications") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("Coroutines TS Simplifications") > >() },
    { "p1478r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 5u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 6u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 7u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") >, Rev< 8u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Bytewise atomic memcpy") > >() },
    { "p1479r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Kawulak") >(), wxS("ostringstream wrapper") > >() },
    { "p1481r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolas Lesser") >(), wxS("constexpr structured bindings") > >() },
    { "p1482r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bruno Cardoso Lopes"), Hash("JF Bastien"), Hash("Michael Spencer") >(), wxS("Modules Feedback") > >() },
    { "p1484r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Peter Bindels") >(), wxS("A uniform and predefined mapping from modules to filenames") > >() },
    { "p1485r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Better keywords for the Coroutines TS") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Better keywords for the Coroutines") > >() },
    { "p1486r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("United Amendment to Contracts Facility for C") >, Rev< 1u, ArrHash< Hash("John Lakos") >(), wxS("United Amendment to Contracts Facility for C") > >() },
    { "p1487r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("User Experience with Contracts That Work") > >() },
    { "p1490r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("ContractRelated Issues") > >() },
    { "p1491r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Dont add to the signedunsigned mess") > >() },
    { "p1492r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Geoffrey Romer"), Hash("Gor Nishanov"), Hash("Iain Sandoe"), Hash("Lewis Baker"), Hash("Nathan Sidwell"), Hash("Richard Smith") >(), wxS("Coroutines Language and Implementation Impact") > >() },
    { "p1493r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("Gor Nishanov"), Hash("Lewis Baker"), Hash("Mihail Mihailov") >(), wxS("Coroutines Usecases and Tradeoffs") > >() },
    { "p1494r0", 5u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") >, Rev< 3u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") >, Rev< 4u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") >, Rev< 5u, ArrHash< Hash("S. Davis Herring") >(), wxS("Partial program correctness") > >() },
    { "p1496r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot"), Hash("Jorg Brown"), Hash("Victor Zverovich") >(), wxS("Formatting of Negative Zero") >, Rev< 1u, ArrHash< Hash("Alan Talbot"), Hash("Jorg Brown") >(), wxS("Formatting of Negative Zero") >, Rev< 2u, ArrHash< Hash("Alan Talbot") >(), wxS("Formatting of Negative Zero") > >() },
    { "p1498r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chandler Carruth"), Hash("Nathan Sidwell"), Hash("Richard Smith") >(), wxS("Constrained Internal Linkage for Modules") >, Rev< 1u, ArrHash< Hash("Chandler Carruth"), Hash("Nathan Sidwell"), Hash("Richard Smith") >(), wxS("Constrained Internal Linkage for Modules") > >() },
    { "p1502r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Standard library header units for C") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Standard library header units for C") > >() },
    { "p1505r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Atomic operations library") >, Rev< 1u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Atomic operations library") > >() },
    { "p1510r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready Issues for the July  Cologne meeting") > >() },
    { "p1517r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ryan McDougall") >(), wxS("Contract Requirements for Iterative HighAssurance Systems") > >() },
    { "p1518r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Michael Spertus") >(), wxS("Stop overconstraining allocators in container deduction guides") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Michael Spertus") >(), wxS("Stop overconstraining allocators in container deduction guides") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Michael Spertus") >(), wxS("Stop overconstraining allocators in container deduction guides") > >() },
    { "p1520r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Response to response to Fibers under the magnifying glass") > >() },
    { "p1522r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Iterator Difference Type and Integer Overflow") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Iterator Difference Type and Integer Overflow") > >() },
    { "p1523r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Views and Size Types") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Views and Size Types") > >() },
    { "p1525r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker") >(), wxS("OneWay execute is a Poor Basis Operation") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Eric A Niebler"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Tomasz Kami\\u0144ski"), Hash("Ville Voutilainen"), Hash("Zach Laine") >(), wxS("OneWay execute is a Poor Basis Operation") > >() },
    { "p1601r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland"), Hash("Walter E. Brown") >(), wxS("Recommendations for Specifying Hidden Friends") > >() },
    { "p1602r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Make Me A Module") > >() },
    { "p1604r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("The inline keyword is not in line with the design of modules") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("The inline keyword is not in line with the design of modules") > >() },
    { "p1605r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Member Layout Control") > >() },
    { "p1606r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Requirements for Contract Roles") > >() },
    { "p1607r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jeff Snyder"), Hash("Joshua Berne") >(), wxS("Minimizing Contracts") >, Rev< 1u, ArrHash< Hash("Jeff Snyder"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Minimizing Contracts") > >() },
    { "p1609r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel") >(), wxS("C Should Support JustinTime Compilation") >, Rev< 1u, ArrHash< Hash("Hal Finkel") >(), wxS("C Should Support JustinTime Compilation") >, Rev< 2u, ArrHash< Hash("Hal Finkel") >(), wxS("C Should Support JustinTime Compilation") >, Rev< 3u, ArrHash< Hash("Hal Finkel") >(), wxS("C Should Support JustinTime Compilation") > >() },
    { "p1610r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mathias Stearn") >(), wxS("Rename awaitresume to awaitresult") > >() },
    { "p1611r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Kona Record of Discussion") > >() },
    { "p1612r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Walter E. Brown") >(), wxS("Relocate Endians Specification") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Relocate Endians Specification") > >() },
    { "p1614r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("The Mothership Has Landed Adding  to the Library") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("The Mothership Has Landed Adding  to the Library") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("The Mothership Has Landed Adding  to the Library") > >() },
    { "p1616r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus"), Hash("Roland Bock") >(), wxS("Using unconstrained template template parameters with constrained templates") >, Rev< 1u, ArrHash< Hash("Michael Spertus"), Hash("Roland Bock") >(), wxS("Using unconstrained template template parameters with constrained templates") > >() },
    { "p1619r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Functions for Testing Boundary Conditions on Integer Operations") >, Rev< 1u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Functions for Testing Boundary Conditions on Integer Operations") >, Rev< 2u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Functions for Testing Boundary Conditions on Integer Operations") > >() },
    { "p1622r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Thread support library") >, Rev< 1u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Thread support library") >, Rev< 2u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Thread support library") >, Rev< 3u, ArrHash< Hash("Daniel Sunderland") >(), wxS("Mandating the Standard Library Clause   Thread support library") > >() },
    { "p1624r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Resolving technical issues in parameter mapping equivalence and related problems") >, Rev< 1u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Resolving technical issues in parameter mapping equivalence and related problems") > >() },
    { "p1625r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Contracts why the house is not on fire ie why the status quo is tolerable") > >() },
    { "p1628r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Unicode characters properties") > >() },
    { "p1629r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Standard Text Encoding") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Transcoding the world  Standard Text Encoding") > >() },
    { "p1630r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Spaceship needs a tuneup Addressing some discovered issues with P and P") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Spaceship needs a tuneup") > >() },
    { "p1631r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall"), Hash("Niall Douglas") >(), wxS("Object detachment and attachment") >, Rev< 1u, ArrHash< Hash("Bob Steagall"), Hash("Niall Douglas") >(), wxS("Object detachment and attachment") > >() },
    { "p1633r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Olsen"), Hash("Olivier Girioux") >(), wxS("Amendments to the C Synchronization Library") >, Rev< 1u, ArrHash< Hash("David Olsen"), Hash("Olivier Girioux") >(), wxS("Amendments to the C Synchronization Library") > >() },
    { "p1634r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming guidelines for modules") > >() },
    { "p1635r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jayesh Badwaik") >(), wxS("A Design for an InterOperable and Customizable Linear Algebra Library") > >() },
    { "p1636r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Lars Gullik Bj\\u00F8nnes") >(), wxS("Formatters for library types") >, Rev< 1u, ArrHash< Hash("Lars Gullik Bj\\u00F8nnes") >(), wxS("Formatters for library types") >, Rev< 2u, ArrHash< Hash("Lars Gullik Bj\\u00F8nnes") >(), wxS("Formatters for library types") > >() },
    { "p1638r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("basicistreamviews iterator should not be copyable") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella"), Hash("Corentin Jabot") >(), wxS("basicistreamviews iterator should not be copyable") > >() },
    { "p1639r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Unifying sourcelocation and contractviolation") > >() },
    { "p1640r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Error size benchmarking") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Error size benchmarking Redux") > >() },
    { "p1641r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Rewording the Status Quo") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Rewording the Status Quo") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Rewording the Status Quo") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Rewording the Status Quo") > >() },
    { "p1642r0", 11u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 4u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 5u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 6u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 7u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 8u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 9u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 10u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") >, Rev< 11u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Easy utilities ranges and iterators") > >() },
    { "p1643r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Olsen") >(), wxS("Add waitnotify to atomicrefT") >, Rev< 1u, ArrHash< Hash("David Olsen") >(), wxS("Add waitnotify to atomicref") > >() },
    { "p1644r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Olsen") >(), wxS("Add waitnotify to atomicsharedptrT") > >() },
    { "p1645r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Deane") >(), wxS("constexpr for numeric algorithms") >, Rev< 1u, ArrHash< Hash("Ben Deane") >(), wxS("constexpr for numeric algorithms") > >() },
    { "p1648r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("The Concept of Extending Argument and a Support Library") >, Rev< 1u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("Mingxin Wang") >(), wxS("The Concept of Extending Argument and a Support Library") >, Rev< 2u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9"), Hash("Mingxin Wang") >(), wxS("A Library for Sink Argument Passing") > >() },
    { "p1649r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("A Generic Library for Compiletime Routing") > >() },
    { "p1650r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Output stdchronodays with d suffix") > >() },
    { "p1651r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("bindfront should not unwrap referencewrapper") > >() },
    { "p1652r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich"), Hash("Zhihao Yuan") >(), wxS("Printf corner cases in stdformat") >, Rev< 1u, ArrHash< Hash("Victor Zverovich"), Hash("Zhihao Yuan") >(), wxS("Printf corner cases in stdformat") > >() },
    { "p1654r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Roger Orr") >(), wxS("ABI breakage  summary of initial comments") >, Rev< 1u, ArrHash< Hash("Roger Orr") >(), wxS("ABI breakage  summary of initial comments") > >() },
    { "p1655r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("LEWG Omnibus Design Policy Paper") > >() },
    { "p1656r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("Throws Nothing should be noexcept") >, Rev< 1u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("Throws Nothing should be noexcept") >, Rev< 2u, ArrHash< Hash("Agust\\u00EDn Berg\\u00E9") >(), wxS("Throws Nothing should be noexcept") > >() },
    { "p1657r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Paul Fee") >(), wxS("String substring checking") > >() },
    { "p1658r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Jared Hoberock") >(), wxS("Suggestions for Consensus on Executors") > >() },
    { "p1659r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("startswith and endswith") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("startswith and endswith") >, Rev< 2u, ArrHash< Hash("Christopher Di Bella") >(), wxS("startswith and endswith") >, Rev< 3u, ArrHash< Hash("Christopher Di Bella") >(), wxS("startswith and endswith") > >() },
    { "p1660r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("D. S. Hollman"), Hash("Eric A Niebler"), Hash("Gordon Brown"), Hash("Jared Hoberock"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("A Compromise Executor Design Sketch") > >() },
    { "p1661r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Remove dedicated precalculated hash lookup interface") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Remove dedicated precalculated hash lookup interface") > >() },
    { "p1662r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Adding async RAII support to coroutines") > >() },
    { "p1663r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Supporting returnvalueoptimisation in coroutines") > >() },
    { "p1664r0", 7u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 4u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 5u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 6u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") >, Rev< 7u, ArrHash< Hash("Hannes Hauswedell"), Hash("JeanHeyd Meneide") >(), wxS("reconstructiblerange  a concept for putting ranges back together") > >() },
    { "p1665r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Bandela") >(), wxS("Tag Based Customization Point Functions") > >() },
    { "p1666r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1667r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Conceptaware noexcept specifiers") > >() },
    { "p1668r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("Enabling constexpr Intrinsics By Permitting Unevaluated inlineassembly in constexpr Functions") >, Rev< 1u, ArrHash< Hash("Erich Keane") >(), wxS("Enabling constexpr Intrinsics By Permitting Unevaluated inlineassembly in constexpr Functions") > >() },
    { "p1669r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("Callsite Based Inlining Hints alwaysinline and neverinline") > >() },
    { "p1670r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Joshua Berne") >(), wxS("Side Effects of Checked Contracts and Predicate Elision") > >() },
    { "p1671r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Joshua Berne") >(), wxS("Contract Evaluation in Constant Expressions") > >() },
    { "p1672r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Axiom is a False Friend") > >() },
    { "p1673r0", 13u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Siva Rajamanickam"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Siva Rajamanickam"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Siva Rajamanickam"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 4u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 5u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 6u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 7u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 8u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 9u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 10u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 11u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 12u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") >, Rev< 13u, ArrHash< Hash("Alicia Klinvex"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Graham Lopez"), Hash("Li-Ta Lo"), Hash("Mark Hoemmen"), Hash("Nevin Liber"), Hash("Peter Caday"), Hash("Piotr Luszczek"), Hash("Sarah Knepper"), Hash("Timothy Costa") >(), wxS("A free function linear algebra interface based on the BLAS") > >() },
    { "p1674r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Mark Hoemmen") >(), wxS("Evolving a Standard C Linear Algebra Library from the BLAS") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Mark Hoemmen") >(), wxS("Evolving a Standard C Linear Algebra Library from the BLAS") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Mark Hoemmen") >(), wxS("Evolving a Standard C Linear Algebra Library from the BLAS") > >() },
    { "p1675r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("rethrowexception must be allowed to copy") >, Rev< 1u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("rethrowexception must be allowed to copy") >, Rev< 2u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("rethrowexception must be allowed to copy") > >() },
    { "p1676r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("C Exception Optimizations An experiment") > >() },
    { "p1677r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("Cancellation is not an Error") >, Rev< 1u, ArrHash< Hash("Kirk Shoop") >(), wxS("Cancellation is not an Error") >, Rev< 2u, ArrHash< Hash("Kirk Shoop"), Hash("Lewis Baker"), Hash("Lisa Lippincott") >(), wxS("Cancellation is not an Error") > >() },
    { "p1678r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("Callbacks and Composition") >, Rev< 1u, ArrHash< Hash("Kirk Shoop") >(), wxS("Callbacks and Composition") >, Rev< 2u, ArrHash< Hash("Kirk Shoop") >(), wxS("Callbacks and Composition") > >() },
    { "p1679r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Wim Leflere") >(), wxS("String Contains function") >, Rev< 1u, ArrHash< Hash("Paul Fee"), Hash("Wim Leflere") >(), wxS("String Contains function") >, Rev< 2u, ArrHash< Hash("Paul Fee"), Hash("Wim Leflere") >(), wxS("String Contains function") >, Rev< 3u, ArrHash< Hash("Paul Fee"), Hash("Wim Leflere") >(), wxS("String Contains function") > >() },
    { "p1680r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Jeff Chapman") >(), wxS("Implementing Contracts in GCC") > >() },
    { "p1681r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Revisiting allocator model for coroutine lazytaskgenerator") > >() },
    { "p1682r0", 3u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdtounderlying") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdtounderlying") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdtounderlying") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("stdtounderlying") > >() },
    { "p1683r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("References for Standard Library Vocabulary Types  an optional case study") > >() },
    { "p1684r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") >, Rev< 4u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") >, Rev< 5u, ArrHash< Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("mdarray An Owning Multidimensional Array Analog of mdspan") > >() },
    { "p1685r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Make getsetdefaultresource replaceable") > >() },
    { "p1686r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Mandating the Standard Library Clause   Time library") >, Rev< 1u, ArrHash< Hash("Jeff Garland") >(), wxS("Mandating the Standard Library Clause   Time library") >, Rev< 2u, ArrHash< Hash("Jeff Garland") >(), wxS("Mandating the Standard Library Clause   Time library") > >() },
    { "p1687r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach") >(), wxS("Summary of the Tooling Study Groups PreCologne Telecons on Modules Tooling Interactions") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach") >(), wxS("Summary of the Tooling Study Groups Modules Ecosystem Technical Report Telecons") > >() },
    { "p1688r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Towards a C Ecosystem Technical Report") > >() },
    { "p1689r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") >, Rev< 1u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") >, Rev< 2u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") >, Rev< 3u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") >, Rev< 4u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") >, Rev< 5u, ArrHash< Hash("Ben Boeckel"), Hash("Brad King") >(), wxS("Format for describing dependencies of source files") > >() },
    { "p1690r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("Mateusz Pusz"), Hash("Xiao Shi") >(), wxS("Refinement Proposal for P Heterogeneous lookup for unordered containers") >, Rev< 1u, ArrHash< Hash("Geoffrey Romer"), Hash("Mateusz Pusz"), Hash("Xiao Shi") >(), wxS("Refinement Proposal for P Heterogeneous lookup for unordered containers") > >() },
    { "p1696r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer"), Hash("Jay Feldblum"), Hash("Mateusz Pusz"), Hash("Xiao Shi") >(), wxS("Refinement proposal for P Precalculated hash values in lookup") > >() },
    { "p1697r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Botond Ballo") >(), wxS("Require a diagnostic for declaration changes meaning") > >() },
    { "p1700r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("J.C. van Winkel") >(), wxS("Targetaudience tables") > >() },
    { "p1701r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Inline Namespaces Fragility Bites") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Inline Namespaces Fragility Bites") >, Rev< 2u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Inline Namespaces Fragility Bites") > >() },
    { "p1702r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Annex D Means Deprecated") > >() },
    { "p1703r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Recognizing Header Unit Imports Requires Full Preprocessing") >, Rev< 1u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Recognizing Header Unit Imports Requires Full Preprocessing") > >() },
    { "p1704r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne") >(), wxS("Undefined functions in axiomlevel contract statements") > >() },
    { "p1705r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Shafik Yaghmour") >(), wxS("Enumerating Core Undefined Behavior") >, Rev< 1u, ArrHash< Hash("Shafik Yaghmour") >(), wxS("Enumerating Core Undefined Behavior") > >() },
    { "p1706r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Stephen Michell") >(), wxS("Programming Language Vulnerabilities for C update") >, Rev< 1u, ArrHash< Hash("Michael Wong"), Hash("Stephen Michell") >(), wxS("Programming Language Vulnerabilities for C update") >, Rev< 2u, ArrHash< Hash("Aaron Ballman"), Hash("Andreas Weis"), Hash("Chris Tapp"), Hash("Clive Pygott"), Hash("Erhard Ploedereder"), Hash("Federico Kircheis"), Hash("John McFarlane"), Hash("Jorg Brown"), Hash("Lisa Lippincott"), Hash("Michael Wong"), Hash("Paul Preney"), Hash("Peter Sommerlad"), Hash("Richard Corden"), Hash("Stephen Michell"), Hash("Tullio Vardanega") >(), wxS("Programming Language Vulnerabilities for Safety Critical C") >, Rev< 3u, ArrHash< Hash("Aaron Ballman"), Hash("Andreas Weis"), Hash("Chris Tapp"), Hash("Clive Pygott"), Hash("Erhard Ploedereder"), Hash("Federico Kircheis"), Hash("John McFarlane"), Hash("Jorg Brown"), Hash("Lisa Lippincott"), Hash("Michael Wong"), Hash("Paul Preney"), Hash("Peter Sommerlad"), Hash("Richard Corden"), Hash("Stephen Michell"), Hash("Tullio Vardanega") >(), wxS("Programming Language Vulnerabilities for Safety Critical C") > >() },
    { "p1708r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Richard Dosselmann") >(), wxS("Simple Statistics functions") >, Rev< 1u, ArrHash< Hash("Michael Wong") >(), wxS("Simple Statistical Functions") >, Rev< 2u, ArrHash< Hash("Eric A Niebler"), Hash("Michael Wong"), Hash("Micheal Chiu"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann"), Hash("Vincent Reverdy") >(), wxS("Simple Statistical Functions") >, Rev< 3u, ArrHash< Hash("Eric A Niebler"), Hash("Micheal Chiu"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann"), Hash("Vincent Reverdy") >(), wxS("Simple Statistical Functions") >, Rev< 4u, ArrHash< Hash("Eric A Niebler"), Hash("Jens Maurer"), Hash("Micheal Chiu"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann"), Hash("Vincent Reverdy") >(), wxS("Simple Statistical Functions") >, Rev< 5u, ArrHash< Hash("Eric A Niebler"), Hash("Jens Maurer"), Hash("Micheal Chiu"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann"), Hash("Vincent Reverdy") >(), wxS("Simple Statistical Functions") >, Rev< 6u, ArrHash< Hash("Eric A Niebler"), Hash("Jens Maurer"), Hash("Micheal Chiu"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann"), Hash("Vincent Reverdy") >(), wxS("Simple Statistical Functions") >, Rev< 7u, ArrHash< Hash("Richard Dosselmann") >(), wxS("Basic Statistics") >, Rev< 8u, ArrHash< Hash("Richard Dosselmann") >(), wxS("Basic Statistics") >, Rev< 9u, ArrHash< Hash("Richard Dosselmann") >(), wxS("Basic Statistics") > >() },
    { "p1709r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann") >(), wxS("Graph Data Structures") >, Rev< 1u, ArrHash< Hash("Michael Wong") >(), wxS("Graph Data Structures") >, Rev< 2u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Domagoj \\u0160ari\\u0107"), Hash("Jens Maurer"), Hash("Jesun Firoz"), Hash("Kevin Deweese"), Hash("Matthew Galati"), Hash("Michael Wong"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann") >(), wxS("Graph Library") >, Rev< 3u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Domagoj \\u0160ari\\u0107"), Hash("Jens Maurer"), Hash("Jesun Firoz"), Hash("Kevin Deweese"), Hash("Matthew Galati"), Hash("Michael Wong"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann") >(), wxS("Graph Library") >, Rev< 4u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Domagoj \\u0160ari\\u0107"), Hash("Jens Maurer"), Hash("Jesun Firoz"), Hash("Kevin Deweese"), Hash("Matthew Galati"), Hash("Michael Wong"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann") >(), wxS("Graph Library") >, Rev< 5u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Domagoj \\u0160ari\\u0107"), Hash("Jens Maurer"), Hash("Jesun Firoz"), Hash("Kevin Deweese"), Hash("Matthew Galati"), Hash("Michael Wong"), Hash("Phillip Ratzloff"), Hash("Richard Dosselmann") >(), wxS("Graph Library") > >() },
    { "p1710r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Adding a global contract assumption mode") > >() },
    { "p1711r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("What to do about contracts") > >() },
    { "p1713r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Allowing both coreturn and coreturn value in the same coroutine") > >() },
    { "p1714r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jorg Brown") >(), wxS("NTTP are incomplete without float double and long double") >, Rev< 1u, ArrHash< Hash("Jorg Brown") >(), wxS("NTTP are incomplete without float double and long double") > >() },
    { "p1715r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jorg Brown") >(), wxS("Loosen restrictions on t typedefs and v values") >, Rev< 1u, ArrHash< Hash("Jorg Brown") >(), wxS("Loosen restrictions on t typedefs and v values") > >() },
    { "p1716r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("ranges compare algorithm are overconstrained") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("ranges compare algorithm are overconstrained") >, Rev< 2u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("ranges compare algorithm are overconstrained") >, Rev< 3u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("ranges compare algorithm are overconstrained") > >() },
    { "p1717r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Wyatt Childers") >(), wxS("Compiletime Metaprogramming in C") > >() },
    { "p1718r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Algorithms library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Algorithms library") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Algorithms library") > >() },
    { "p1719r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Numerics library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Numerics library") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Numerics library") > >() },
    { "p1720r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Localization library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Localization library") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Localization library") > >() },
    { "p1721r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   InputOutput library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   InputOutput library") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   InputOutput library") > >() },
    { "p1722r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Regular Expression library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Regular Expression library") >, Rev< 2u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Regular Expression library") > >() },
    { "p1723r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Atomics library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Atomics library") >, Rev< 2u, ArrHash< Hash("Daniel Sunderland"), Hash("Marshall Clow") >(), wxS("Mandating the Standard Library Clause   Atomics library") > >() },
    { "p1724r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues to be moved in Cologne") > >() },
    { "p1725r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Modular Topic Design") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Modular Topic Design") > >() },
    { "p1726r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell") >(), wxS("Pointer lifetimeend zap") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap") >, Rev< 2u, ArrHash< Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Peter Sewell"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap") >, Rev< 3u, ArrHash< Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap") >, Rev< 4u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap") >, Rev< 5u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap informationalhistorical") > >() },
    { "p1727r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Denis Yaroshevskiy") >(), wxS("Issues with current flatmap proposal") > >() },
    { "p1728r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Preconditions axiomlevel contracts and assumptions  an in depth study") > >() },
    { "p1729r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Text Parsing") >, Rev< 1u, ArrHash< Hash("Elias Kosunen"), Hash("Victor Zverovich") >(), wxS("Text Parsing") >, Rev< 2u, ArrHash< Hash("Elias Kosunen"), Hash("Victor Zverovich") >(), wxS("Text Parsing") >, Rev< 3u, ArrHash< Hash("Elias Kosunen"), Hash("Victor Zverovich") >(), wxS("Text Parsing") >, Rev< 4u, ArrHash< Hash("Elias Kosunen"), Hash("Victor Zverovich") >(), wxS("Text Parsing") >, Rev< 5u, ArrHash< Hash("Elias Kosunen"), Hash("Victor Zverovich") >(), wxS("Text Parsing") > >() },
    { "p1730r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Hyman Rosen"), Hash("John Lakos") >(), wxS("Adding a global contract assumption mode") > >() },
    { "p1731r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ilya Burylov"), Hash("Pablo Halpern"), Hash("Ruslan Arutyunyan") >(), wxS("Memory helper functions for containers") >, Rev< 1u, ArrHash< Hash("Ilya Burylov"), Hash("Pablo Halpern"), Hash("Ruslan Arutyunyan") >(), wxS("Memory helper functions for containers") > >() },
    { "p1732r0", 4u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("Do not promise support for function syntax of operators") >, Rev< 1u, ArrHash< Hash("CJ Johnson") >(), wxS("Do not promise support for function syntax of operators") >, Rev< 2u, ArrHash< Hash("CJ Johnson") >(), wxS("Do not promise support for function syntax of operators") >, Rev< 3u, ArrHash< Hash("CJ Johnson") >(), wxS("Do not promise support for function syntax of operators") >, Rev< 4u, ArrHash< Hash("CJ Johnson") >(), wxS("Do not promise support for function syntax of operators") > >() },
    { "p1733r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("David Sankel") >(), wxS("Userfriendly and Evolutionfriendly Reflection A Compromise") > >() },
    { "p1734r0", 0u, RevList< Rev< 0u, ArrHash< Hash("CJ Johnson") >(), wxS("Defaultable default constructors and destructors for all unions") > >() },
    { "p1735r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning ") > >() },
    { "p1736r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p1737r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("uniquefunction vs anyinvokable  Bikeshedding Off the Rails") > >() },
    { "p1738r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("The Executor Concept Hierarchy Needs a Single Root") > >() },
    { "p1739r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Type erasure for forwarding ranges in combination with subrangey view adaptors") >, Rev< 1u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Type erasure for forwarding ranges in combination with subrangey view adaptors") >, Rev< 2u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Avoid template bloat for forwarding ranges in combination with subrangey view adaptors") >, Rev< 3u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Avoid template bloat for saferanges in combination with subrangey view adaptors") >, Rev< 4u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Avoid template bloat for saferanges in combination with subrangey view adaptors") > >() },
    { "p1743r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Rostislav Khlebnikov") >(), wxS("Contracts Undefined Behavior and Defensive Programming") > >() },
    { "p1744r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Rostislav Khlebnikov") >(), wxS("Avoiding Misuse of ContractChecking") > >() },
    { "p1745r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Coroutine changes for C and beyond") > >() },
    { "p1746r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dan Klingler"), Hash("David Singer"), Hash("JF Bastien"), Hash("Richard Powell"), Hash("Sophia Poirier"), Hash("Tony Guetta") >(), wxS("Feedback on PR stdaudio") >, Rev< 1u, ArrHash< Hash("Dan Klingler"), Hash("David Singer"), Hash("Doug Wyatt"), Hash("Richard Powell"), Hash("Sophia Poirier"), Hash("Tony Guetta") >(), wxS("Feedback on PR stdaudio") > >() },
    { "p1747r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yehezkel Bernat") >(), wxS("Dont use chart and stdustring yet in P") > >() },
    { "p1748r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Yehezkel Bernat") >(), wxS("Fill in delaycpp TODO in D") >, Rev< 1u, ArrHash< Hash("Yehezkel Bernat") >(), wxS("Fill in delaycpp TODO in D") > >() },
    { "p1749r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yehezkel Bernat") >(), wxS("Access control for reflection") > >() },
    { "p1750r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Elias Kosunen"), Hash("Fatih Bakir"), Hash("Jeff Garland"), Hash("Klemens Morgenstern") >(), wxS("A Proposal to Add Process Management to the C Standard Library") >, Rev< 1u, ArrHash< Hash("Elias Kosunen"), Hash("Fatih Bakir"), Hash("Jeff Garland"), Hash("Klemens Morgenstern") >(), wxS("A Proposal to Add Process Management to the C Standard Library") > >() },
    { "p1751r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Numeric Type Families") > >() },
    { "p1753r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Name Lookup Should Find the First Thing of That Name") > >() },
    { "p1754r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Casey Carter"), Hash("Eric A Niebler"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Ville Voutilainen") >(), wxS("Rename concepts to standardcase for C while we still can") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Bjarne Stroustrup"), Hash("Casey Carter"), Hash("Eric A Niebler"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Ville Voutilainen") >(), wxS("Rename concepts to standardcase for C while we still can") > >() },
    { "p1756r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell") >(), wxS("Pointer lifetimeend zap") > >() },
    { "p1759r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handle from file streams") >, Rev< 1u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handle from file streams") >, Rev< 2u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handle from file streams") >, Rev< 3u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handles and file streams") >, Rev< 4u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handles and file streams") >, Rev< 5u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handles and file streams") >, Rev< 6u, ArrHash< Hash("Elias Kosunen") >(), wxS("Native handles and file streams") > >() },
    { "p1760r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("snapshotsource  A Horse with a Better Name") > >() },
    { "p1761r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Concurrent map customization options SG version") > >() },
    { "p1762r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Concurrent map customization options LEWG version") > >() },
    { "p1764r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tony van Eerd") >(), wxS("ssize Should be Named count") > >() },
    { "p1766r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Mitigating minor modules maladies") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Mitigating minor modules maladies") > >() },
    { "p1767r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Packaging C Modules") > >() },
    { "p1768r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Contiguous Containers Should Contain data") > >() },
    { "p1769r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("The default contract buildlevel and continuationmode should be implementationdefined") > >() },
    { "p1770r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("On vectors tensors matrices and hypermatrices") > >() },
    { "p1771r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("nodiscard for constructors") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("nodiscard for constructors") > >() },
    { "p1772r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Variadic overload sets and overload sequences") >, Rev< 1u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Variadic overload sets and overload sequences") > >() },
    { "p1773r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts have failed to provide a portable assume") > >() },
    { "p1774r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable optimisation hints") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable optimisation hints") >, Rev< 2u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 3u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 4u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 5u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 6u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 7u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") >, Rev< 8u, ArrHash< Hash("Timur Doumler") >(), wxS("Portable assumptions") > >() },
    { "p1779r0", 3u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("ABI isolation for member functions") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("ABI isolation for member functions") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("ABI isolation for member functions") >, Rev< 3u, ArrHash< Hash("S. Davis Herring") >(), wxS("ABI isolation for member functions") > >() },
    { "p1780r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anouk Paradis"), Hash("Daniel Wright"), Hash("Marco Paviotti"), Hash("Mark Batty"), Hash("Scott Owens"), Hash("Simon Cooksey") >(), wxS("Modular Relaxed Dependencies A new approach to the OutOfThinAir Problem") > >() },
    { "p1782r0", 1u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Local contract restrictions") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Local contract restrictions") > >() },
    { "p1786r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Hyman Rosen"), Hash("John Lakos") >(), wxS("Adding a global contract assumption mode") > >() },
    { "p1787r0", 6u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 3u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 4u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 5u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") >, Rev< 6u, ArrHash< Hash("S. Davis Herring") >(), wxS("Declarations and where to find them") > >() },
    { "p1788r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Olga Arkhipova") >(), wxS("Reuse of the built modules BMI") >, Rev< 2u, ArrHash< Hash("Olga Arkhipova") >(), wxS("Reuse of the built modules BMI") >, Rev< 3u, ArrHash< Hash("Olga Arkhipova") >(), wxS("Reuse of the built modules BMI") > >() },
    { "p1789r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Library Support for Expansion Statements") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Jeremy Rifkin"), Hash("Matthias Wippich") >(), wxS("Library Support for Expansion Statements") > >() },
    { "p1790r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to enable better DynamicBuffer composition") >, Rev< 1u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to enable better DynamicBuffer composition") > >() },
    { "p1791r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("Jamie Allsop") >(), wxS("Evolution of the P Unified Executors Proposal to accommodate new requirements") > >() },
    { "p1792r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Simplifying and generalising SenderReceiver for asynchronous operations") > >() },
    { "p1793r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Simplifying Contract Syntax") > >() },
    { "p1795r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("Jeff Hammond"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas Richard William Scogland") >(), wxS("System topology discovery for heterogeneous  distributed computing") >, Rev< 1u, ArrHash< Hash("Domagoj \\u0160ari\\u0107"), Hash("Gordon Brown"), Hash("Jeff Hammond"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas Richard William Scogland") >(), wxS("System topology discovery for heterogeneous  distributed computing") >, Rev< 2u, ArrHash< Hash("Domagoj \\u0160ari\\u0107"), Hash("Gordon Brown"), Hash("Jeff Hammond"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas Richard William Scogland") >(), wxS("System topology discovery for heterogeneous amp distributed computing") > >() },
    { "p1796r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Jens Gustedt"), Hash("Kayvan Memarian"), Hash("Peter Sewell"), Hash("Victor B. F. Gomes") >(), wxS("Effective Types Examples") > >() },
    { "p1797r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sewell") >(), wxS("CC Memory Object Model Papers  Introduction") > >() },
    { "p1798r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Linear Algebra SIG Meeting Minutes ") > >() },
    { "p1801r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Clarifying atomicthreadidcompareexchange") > >() },
    { "p1803r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("packexprargs I  compiletime friendly pack inspection") > >() },
    { "p1807r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("An Overview of Contracts Papers for Cologne") > >() },
    { "p1808r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Contra P polymorphicallocator as a vocabulary type") > >() },
    { "p1810r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("A Quick Look at What P Will Change") > >() },
    { "p1811r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Richard Smith") >(), wxS("Relaxing redefinition restrictions for reexportation robustness") > >() },
    { "p1812r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler"), Hash("Ville Voutilainen") >(), wxS("Axioms should be assumable a minimal fix for contracts") > >() },
    { "p1813r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("A Concept Design for the Numeric Algorithms") > >() },
    { "p1814r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Wording for Class Template Argument Deduction for Alias Templates") > >() },
    { "p1815r0", 2u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Translationunitlocal entities") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Translationunitlocal entities") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Translationunitlocal entities") > >() },
    { "p1816r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Wording for class template argument deduction for aggregates") > >() },
    { "p1818r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Narrowing and Widening Conversions") >, Rev< 1u, ArrHash< Hash("Lawrence Crowl") >(), wxS("Narrowing and Widening Conversions") > >() },
    { "p1819r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vittorio Romeo") >(), wxS("Interpolated Literals") > >() },
    { "p1820r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown") >(), wxS("Recommendations for a compromise on handling errors and cancellations in executors") > >() },
    { "p1823r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("Daveed Vandevoorde"), Hash("John H. Spicer"), Hash("Nicolai Josuttis"), Hash("Roger Orr"), Hash("Ville Voutilainen") >(), wxS("Remove Contracts from C") > >() },
    { "p1825r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Merged wording for PR and PR") > >() },
    { "p1830r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("stddependentfalse") >, Rev< 1u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("stddependentfalse") > >() },
    { "p1831r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("deprecating volatile library") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("deprecating volatile library") > >() },
    { "p1832r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Improving Debug Builds Inline With User Expectation") > >() },
    { "p1837r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Remove NTTPs of class type from C") > >() },
    { "p1838r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov"), Hash("Bryce Adelstein Lelbach") >(), wxS("Modules UserFacing Lexicon and File Extensions") > >() },
    { "p1839r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Krystian Stasiowski") >(), wxS("Accessing Object Representations") >, Rev< 1u, ArrHash< Hash("Krystian Stasiowski") >(), wxS("Accessing Object Representations") >, Rev< 2u, ArrHash< Hash("Krystian Stasiowski") >(), wxS("Accessing Object Representations") >, Rev< 3u, ArrHash< Hash("Krystian Stasiowski"), Hash("Timur Doumler") >(), wxS("Accessing Object Representations") >, Rev< 4u, ArrHash< Hash("Krystian Stasiowski"), Hash("Timur Doumler") >(), wxS("Accessing Object Representations") >, Rev< 5u, ArrHash< Hash("Krystian Stasiowski"), Hash("Timur Doumler") >(), wxS("Accessing object representations") >, Rev< 6u, ArrHash< Hash("Brian Bi"), Hash("Krystian Stasiowski"), Hash("Timur Doumler") >(), wxS("Accessing object representations") >, Rev< 7u, ArrHash< Hash("Brian Bi"), Hash("Krystian Stasiowski"), Hash("Timur Doumler") >(), wxS("Accessing object representations") > >() },
    { "p1840r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("Cologne  Record of Discussion") > >() },
    { "p1841r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Wording for Individually Specializable Numeric Traits") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Wording for Individually Specializable Numeric Traits") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Wording for Individually Specializable Numeric Traits") >, Rev< 3u, ArrHash< Hash("Walter E. Brown") >(), wxS("Wording for Individually Specializable Numeric Traits") > >() },
    { "p1842r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boris Kolpackov") >(), wxS("Generalized Module Dependency Mapper") > >() },
    { "p1843r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("Comparison and Hasher Requirements") > >() },
    { "p1844r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nozomu Kat\\u014D") >(), wxS("Enhancement of regex") >, Rev< 1u, ArrHash< Hash("Nozomu Kat\\u014D") >(), wxS("Enhancement of regex") > >() },
    { "p1845r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Jon Kalb") >(), wxS(" Denver Tooling Meeting") > >() },
    { "p1846r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John McFarlane") >(), wxS("Teach class Last") > >() },
    { "p1847r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Pal Balog") >(), wxS("Make declaration order layout mandated") >, Rev< 1u, ArrHash< Hash("Pal Balog") >(), wxS("Make declaration order layout mandated") >, Rev< 2u, ArrHash< Hash("Pal Balog") >(), wxS("Make declaration order layout mandated") >, Rev< 3u, ArrHash< Hash("Pal Balog") >(), wxS("Make declaration order layout mandated") >, Rev< 4u, ArrHash< Hash("Pal Balog") >(), wxS("Make declaration order layout mandated") > >() },
    { "p1848r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pal Balog") >(), wxS("Improve rules of standard layout") > >() },
    { "p1851r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Guidelines For snakecase Concept Naming") > >() },
    { "p1854r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Conversion to execution encoding should not lead to loss of meaning") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Conversion to literal encoding should not lead to loss of meaning") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Conversion to literal encoding should not lead to loss of meaning") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Conversion to literal encoding should not lead to loss of meaning") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Making nonencodable string literals illformed") > >() },
    { "p1855r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach") >(), wxS("Make compare freestanding") > >() },
    { "p1856r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Bit operations do not work on bytes a generic fix") > >() },
    { "p1857r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Modules Dependency Discovery") >, Rev< 1u, ArrHash< Hash("Michael Spencer") >(), wxS("Modules Dependency Discovery") >, Rev< 2u, ArrHash< Hash("Michael Spencer") >(), wxS("Modules Dependency Discovery") >, Rev< 3u, ArrHash< Hash("Michael Spencer") >(), wxS("Modules Dependency Discovery") > >() },
    { "p1858r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Generalized pack declaration and usage") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Generalized pack declaration and usage") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Generalized pack declaration and usage") > >() },
    { "p1859r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Standard terminology for execution character set encodings") > >() },
    { "p1860r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien") >(), wxS("C Networking Must Be Secure By Default") > >() },
    { "p1861r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien") >(), wxS("Secure Connections in Networking TS") >, Rev< 1u, ArrHash< Hash("Alex Christensen"), Hash("JF Bastien"), Hash("Scott Herscher") >(), wxS("Secure Networking in C") > >() },
    { "p1862r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Ranges adaptors for noncopyable iterators") >, Rev< 1u, ArrHash< Hash("Casey Carter"), Hash("Corentin Jabot") >(), wxS("Ranges adaptors for noncopyable iterators") > >() },
    { "p1863r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("ABI  Now or Never") >, Rev< 1u, ArrHash< Hash("Titus Winters") >(), wxS("ABI  Now or Never") > >() },
    { "p1864r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Defining Target Tuplets") > >() },
    { "p1865r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Olsen"), Hash("Olivier Girioux") >(), wxS("Add max to latch and barrier") >, Rev< 1u, ArrHash< Hash("David Olsen"), Hash("Olivier Girioux") >(), wxS("Add max to latch and barrier") > >() },
    { "p1868r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich"), Hash("Zach Laine") >(), wxS(" width clarifying units of width and precision in stdformat") >, Rev< 1u, ArrHash< Hash("Victor Zverovich"), Hash("Zach Laine") >(), wxS("Unicorn width clarifying units of width and precision in stdformat") >, Rev< 2u, ArrHash< Hash("Victor Zverovich"), Hash("Zach Laine") >(), wxS("Unicorn width clarifying units of width and precision in stdformat") > >() },
    { "p1869r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Rename conditionvariableany interruptible wait methods") >, Rev< 1u, ArrHash< Hash("Micha\\u0142 Dominiak"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Rename conditionvariableany interruptible wait methods") > >() },
    { "p1870r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("forwardingrange is too subtle") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("forwardingrange is too subtle") > >() },
    { "p1871r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Should concepts be enabled or disabled") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Concept traits should be named after concepts") > >() },
    { "p1872r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("span should have sizetype not indextype") > >() },
    { "p1873r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("removedotsinmodulenames") >, Rev< 1u, ArrHash< Hash("Michael Spencer") >(), wxS("removedotsinmodulenames") > >() },
    { "p1874r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Dynamic Initialization Order of NonLocal Variables in Modules") >, Rev< 1u, ArrHash< Hash("Michael Spencer") >(), wxS("Dynamic Initialization Order of NonLocal Variables in Modules") > >() },
    { "p1875r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Lite Support in C") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Lite Support in C") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Transactional Memory Lite Support in C") > >() },
    { "p1876r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("All The Module Names") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("All The Module Names") > >() },
    { "p1877r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Saving Private Ranges Recovering Lost Information from Comparison and Predicate Algorithms") > >() },
    { "p1878r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Eric A Niebler") >(), wxS("Constraining Readable Types") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("Constraining Readable Types") > >() },
    { "p1879r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Please Dont Rewrite My String Literals") > >() },
    { "p1880r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("uNstring Arguments Shall Be UTFN Encoded") > >() },
    { "p1881r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vittorio Romeo") >(), wxS("Epochs a backwardcompatible language evolution mechanism") >, Rev< 1u, ArrHash< Hash("Vittorio Romeo") >(), wxS("Epochs a backwardcompatible language evolution mechanism") > >() },
    { "p1882r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Noel Tchidjo Moyo") >(), wxS("Addition of a filter to recursivedirectoryiterator") > >() },
    { "p1883r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Walkthrough of Ps filehandle for LEWGI") >, Rev< 1u, ArrHash< Hash("Niall Douglas") >(), wxS("filehandle and mappedfilehandle") >, Rev< 2u, ArrHash< Hash("Niall Douglas") >(), wxS("filehandle and mappedfilehandle") > >() },
    { "p1884r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Private Module Partition An Inconsistent Boundary") > >() },
    { "p1885r0", 12u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 5u, ArrHash< Hash("Corentin Jabot") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 6u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 7u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 8u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 9u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 10u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 11u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") >, Rev< 12u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Naming Text Encodings to Demystify Them") > >() },
    { "p1886r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Error speed benchmarking") > >() },
    { "p1887r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Typesafe Reflection on attributes") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Reflection on attributes") > >() },
    { "p1888r0", 0u, RevList< Rev< 0u, ArrHash< Hash("D. S. Hollman"), Hash("Matti Rintala"), Hash("Michael Wong"), Hash("Pekka J\\u00E4\\u00E4skel\\u00E4inen") >(), wxS("Executors without exception handling support") > >() },
    { "p1889r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("C Numerics Work In Progress") >, Rev< 1u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("C Numerics Work In Progress") > >() },
    { "p1890r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev"), Hash("Antony Polukhin") >(), wxS("C Numerics Work In Progress Issues") > >() },
    { "p1891r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Guy Davidson"), Hash("Mark Hoemmen") >(), wxS("The LinearAlgebra Effort") > >() },
    { "p1892r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Brett") >(), wxS("Extended localespecific presentation specifiers for stdformat") >, Rev< 1u, ArrHash< Hash("Peter Brett") >(), wxS("Extended localespecific presentation specifiers for stdformat") > >() },
    { "p1893r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Contract Primitives") > >() },
    { "p1894r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of stdupto stdindices and stdenumerate") > >() },
    { "p1895r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lewis Baker") >(), wxS("taginvoke A general pattern for supporting customisable functions") > >() },
    { "p1896r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries   ") > >() },
    { "p1897r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Lee Howes") >(), wxS("Towards C executors An initial set of algorithms") >, Rev< 1u, ArrHash< Hash("Lee Howes") >(), wxS("Towards C executors An initial set of algorithms") >, Rev< 2u, ArrHash< Hash("Lee Howes") >(), wxS("Towards C executors A proposal for an initial set of algorithms") >, Rev< 3u, ArrHash< Hash("Lee Howes") >(), wxS("Towards C executors A proposal for an initial set of algorithms") > >() },
    { "p1898r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lee Howes") >(), wxS("Forward progress delegation for executors") >, Rev< 1u, ArrHash< Hash("Lee Howes") >(), wxS("Forward progress delegation for executors") > >() },
    { "p1899r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("strideview") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("strideview") >, Rev< 2u, ArrHash< Hash("Christopher Di Bella"), Hash("R. Tim Song") >(), wxS("strideview") >, Rev< 3u, ArrHash< Hash("Christopher Di Bella"), Hash("R. Tim Song") >(), wxS("strideview") > >() },
    { "p1900r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("ConceptsAdjacent Problems") > >() },
    { "p1901r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daryl Haresign") >(), wxS("Enabling the Use of weakptr as Keys in Unordered Associative Containers") >, Rev< 1u, ArrHash< Hash("Daryl Haresign") >(), wxS("Enabling the Use of weakptr as Keys in Unordered Associative Containers") >, Rev< 2u, ArrHash< Hash("Daryl Haresign") >(), wxS("Enabling the Use of weakptr as Keys in Unordered Associative Containers") > >() },
    { "p1902r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Missing featuretest macros ") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Missing featuretest macros ") > >() },
    { "p1905r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("InSource Mechanism to Identify Importable Headers") > >() },
    { "p1906r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Provided operator return lvalueref on rvalue") > >() },
    { "p1907r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Inconsistencies with nontype template parameters") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Inconsistencies with nontype template parameters") > >() },
    { "p1908r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Reserving Attribute Names for Future Use") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Reserving Attribute Names for Future Use") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Reserving Attribute Names for Future Use") > >() },
    { "p1909r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low Latency Meeting Minutes ") > >() },
    { "p1910r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Linear Algebra Meeting Minutes ") > >() },
    { "p1911r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning ") > >() },
    { "p1912r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Interconvertible object representations") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Types with arraylike object representations") > >() },
    { "p1913r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Frank Birbacher") >(), wxS("Comments on Audio Devices") > >() },
    { "p1914r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("On the names of shift algorithms") > >() },
    { "p1915r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Expected Feedback from simd in the Parallelism TS ") > >() },
    { "p1916r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("There might not be an elegant OOTA fix") > >() },
    { "p1917r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Library Issues to be moved in Belfast") > >() },
    { "p1919r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Expanding the Rights in SD") >, Rev< 1u, ArrHash< Hash("Nevin Liber") >(), wxS("Expanding the Rights in SD") >, Rev< 2u, ArrHash< Hash("Nevin Liber") >(), wxS("Expanding the Rights in SD") >, Rev< 3u, ArrHash< Hash("Nevin Liber") >(), wxS("Expanding the Rights in SD") > >() },
    { "p1920r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Namespace Templates") > >() },
    { "p1921r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Whats in a Name") > >() },
    { "p1922r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stdlist constexpr") > >() },
    { "p1923r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stddeque constexpr") > >() },
    { "p1924r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stdstack constexpr") > >() },
    { "p1925r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stdqueue constexpr") > >() },
    { "p1926r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stdpriorityqueue constexpr") > >() },
    { "p1927r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Add stdispartitioneduntil algorithm") > >() },
    { "p1928r0", 15u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Merge dataparallel types from the Parallelism TS ") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Merge dataparallel types from the Parallelism TS ") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Merge dataparallel types from the Parallelism TS ") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("Merge dataparallel types from the Parallelism TS ") >, Rev< 4u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 5u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 6u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 7u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 8u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 9u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 10u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 11u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 12u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 13u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 14u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") >, Rev< 15u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd  Merge dataparallel types from the Parallelism TS ") > >() },
    { "p1929r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexander Zaitsev") >(), wxS("Making stdforwardlist constexpr") > >() },
    { "p1930r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("Towards a standard unit systems library") > >() },
    { "p1932r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Extension of the C random number generators") > >() },
    { "p1933r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Suggestions for bulkexecute") > >() },
    { "p1934r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("Christopher Di Bella"), Hash("Eric A Niebler") >(), wxS("boolean Considered Harmful") > >() },
    { "p1935r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("A C Approach to Physical Units") >, Rev< 1u, ArrHash< Hash("Mateusz Pusz") >(), wxS("A C Approach to Physical Units") >, Rev< 2u, ArrHash< Hash("Mateusz Pusz") >(), wxS("A C Approach to Physical Units") > >() },
    { "p1936r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("Dependent Static Assertion") > >() },
    { "p1937r0", 2u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Fixing inconsistencies between constexpr and consteval functions") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("Fixing inconsistencies between constexpr and consteval functions") >, Rev< 2u, ArrHash< Hash("David Stone") >(), wxS("Fixing inconsistencies between constexpr and consteval functions") > >() },
    { "p1938r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("if consteval") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("if consteval") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("if consteval") >, Rev< 3u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Richard Smith") >(), wxS("if consteval") > >() },
    { "p1943r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Networking TS changes to improve completion token flexibility and performance") > >() },
    { "p1944r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin"), Hash("Daniil Goncharov") >(), wxS("Add Constexpr Modifiers to Functions in cstring and cwchar Headers") >, Rev< 1u, ArrHash< Hash("Antony Polukhin"), Hash("Daniil Goncharov") >(), wxS("Add Constexpr Modifiers to Functions in cstring and cwchar Headers") > >() },
    { "p1945r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Krystian Stasiowski") >(), wxS("Making More Objects Contiguous") > >() },
    { "p1946r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Casey Carter") >(), wxS("Allow defaulting comparisons by value") > >() },
    { "p1947r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("C exceptions and alternatives") > >() },
    { "p1948r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Modules Keep the dot") > >() },
    { "p1949r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 1u, ArrHash< Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 2u, ArrHash< Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 3u, ArrHash< Hash("Jens Maurer"), Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 4u, ArrHash< Hash("Jens Maurer"), Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 5u, ArrHash< Hash("Jens Maurer"), Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 6u, ArrHash< Hash("Jens Maurer"), Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") >, Rev< 7u, ArrHash< Hash("Jens Maurer"), Hash("Peter Bindels"), Hash("Steve Downey"), Hash("Tom Honermann"), Hash("Zach Laine") >(), wxS("C Identifier Syntax using Unicode Standard Annex ") > >() },
    { "p1950r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe") >(), wxS("An indirect valuetype for C") >, Rev< 1u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe") >(), wxS("An indirect valuetype for C") >, Rev< 2u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe") >(), wxS("An indirect valuetype for C") > >() },
    { "p1951r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Logan R. Smith") >(), wxS("Default Arguments for pairs Forwarding Constructor") >, Rev< 1u, ArrHash< Hash("Logan R. Smith") >(), wxS("Default Arguments for pairs Forwarding Constructor") > >() },
    { "p1953r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Unicode Identifiers And Unicode") > >() },
    { "p1955r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Frank Birbacher") >(), wxS("Top Level Is Constant Evaluated") >, Rev< 1u, ArrHash< Hash("Frank Birbacher") >(), wxS("Top Level Is Constant Evaluated") > >() },
    { "p1956r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("On the naming of lowlevel bit manipulation functions") >, Rev< 1u, ArrHash< Hash("Vincent Reverdy") >(), wxS("On the naming of lowlevel bit manipulation functions") > >() },
    { "p1957r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Converting from T to bool should be considered narrowing re US ") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Converting from T to bool should be considered narrowing re US ") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Converting from T to bool should be considered narrowing re US ") > >() },
    { "p1958r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lawrence Crowl") >(), wxS("C Concurrent Buffer Queue") > >() },
    { "p1959r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Remove stdweakequality and stdstrongequality") > >() },
    { "p1960r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Olsen") >(), wxS("NB Comment Changes Reviewed by SG") > >() },
    { "p1961r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Harmonizing the definitions of total order for pointers") > >() },
    { "p1962r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("How can you be so certain") > >() },
    { "p1963r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Billy Robert O'Neal III") >(), wxS("Fixing US ") > >() },
    { "p1964r0", 2u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Casting convertibletobool considered harmful") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Wording for booleantestable") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("Wording for booleantestable") > >() },
    { "p1965r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Sunderland"), Hash("R. Tim Song"), Hash("Walter E. Brown") >(), wxS("Blanket Wording for Specifying Hidden Friends") > >() },
    { "p1967r0", 14u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 4u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 5u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 6u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 7u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 8u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 9u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 10u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 11u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 12u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 13u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") >, Rev< 14u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed  a simple scannable preprocessorbased resource acquisition method") > >() },
    { "p1968r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready issues for the November  Belfast meeting") > >() },
    { "p1969r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready issues for the November  Belfast meeting") > >() },
    { "p1970r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Consistency for size functions") >, Rev< 1u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("Consistency for size functions") >, Rev< 2u, ArrHash< Hash("Casey Carter"), Hash("Hannes Hauswedell"), Hash("Jorg Brown") >(), wxS("Consistency for size functions add rangesssize") > >() },
    { "p1971r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Changes for NB Comments at the November  Belfast Meeting") > >() },
    { "p1972r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("US Check satisfaction of constraints for nontemplates when forming pointer to function") > >() },
    { "p1973r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Rename defaultinit functions NB Comment DE") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Rename defaultinit functions NB Comment DE") > >() },
    { "p1974r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Jeff Snyder"), Hash("Louis Dionne") >(), wxS("Nontransient constexpr allocation using propconst") > >() },
    { "p1975r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Fixing the wording of parenthesized aggregateinitialization") > >() },
    { "p1976r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixedsize span construction from dynamicsize range") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixedsize span construction from dynamicsize range") >, Rev< 2u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Fixedsize span construction from dynamicsize range") > >() },
    { "p1978r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Glen Joseph Fernandes"), Hash("Nevin Liber"), Hash("Peter Dimov") >(), wxS("Rename defaultinit functions and do nothing more") > >() },
    { "p1979r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mathias Stearn") >(), wxS("US Resolution") > >() },
    { "p1980r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Wording for CA ") > >() },
    { "p1981r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rename leap to leapsecond") > >() },
    { "p1982r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rename link to timezonelink") > >() },
    { "p1983r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Wording for GB US US US and US") > >() },
    { "p1985r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Mateusz Pusz") >(), wxS("Universal template parameters") >, Rev< 1u, ArrHash< Hash("Bengt Gustafsson"), Hash("Colin MacLean"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Mateusz Pusz") >(), wxS("Universal template parameters") >, Rev< 3u, ArrHash< Hash("Bengt Gustafsson"), Hash("Colin MacLean"), Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Mateusz Pusz") >(), wxS("Universal template parameters") > >() },
    { "p1988r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Allow Templates in Local Classes") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Allow Templates in Local Classes") > >() },
    { "p1989r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview  Constrain Harder") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview  Constrain Harder") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Range constructor for stdstringview  Constrain Harder") > >() },
    { "p1990r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin"), Hash("Daniil Goncharov") >(), wxS("Add operator to stdinitializerlist") >, Rev< 1u, ArrHash< Hash("Antony Polukhin"), Hash("Daniil Goncharov") >(), wxS("Add operator to stdinitializerlist") > >() },
    { "p1991r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Belfast Record of Discussion") > >() },
    { "p1993r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Restore factories to bulkexecute") >, Rev< 1u, ArrHash< Hash("Jared Hoberock") >(), wxS("Restore shared state to bulkexecute") > >() },
    { "p1994r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella"), Hash("R. Tim Song") >(), wxS("elementsview needs its own sentinel") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella"), Hash("R. Tim Song") >(), wxS("elementsview needs its own sentinel") > >() },
    { "p1995r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Herb Sutter"), Hash("Joshua Berne"), Hash("Ryan McDougall"), Hash("Timur Doumler") >(), wxS("Contracts  Use Cases") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Herb Sutter"), Hash("Joshua Berne"), Hash("Ryan McDougall"), Hash("Timur Doumler") >(), wxS("Contracts  Use Cases") > >() },
    { "p1996r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dmitry Sokolov") >(), wxS("Propagated template parameters") > >() },
    { "p1997r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Krystian Stasiowski"), Hash("Theodoric Stier") >(), wxS("Relaxing Restrictions on Arrays") >, Rev< 1u, ArrHash< Hash("Krystian Stasiowski"), Hash("Theodoric Stier") >(), wxS("Relaxing Restrictions on Arrays") > >() },
    { "p1998r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ryan McDougall") >(), wxS("Simple Facility for Lossless Integer Conversion") >, Rev< 1u, ArrHash< Hash("Ryan McDougall") >(), wxS("Simple Facility for Lossless Integer Conversion") > >() },
    { "p1999r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Process proposal doublecheck evolutionary material via a Tentatively Ready status") > >() },
    { "p2000r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Direction for ISO C") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") >, Rev< 2u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") >, Rev< 3u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") >, Rev< 4u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("Direction for ISO C") > >() },
    { "p2002r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Defaulted comparison specification cleanups") >, Rev< 1u, ArrHash< Hash("Richard Smith") >(), wxS("Defaulted comparison specification cleanups") > >() },
    { "p2003r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Fixing Internal and External Linkage Entities in Header Units") > >() },
    { "p2004r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Numbers and their Scopes") > >() },
    { "p2005r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Berrow") >(), wxS("A Brief D Graphics Review") > >() },
    { "p2006r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker") >(), wxS("Eliminating heapallocations in senderreceiver with connectstart as basis operations") >, Rev< 1u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker") >(), wxS("Eliminating heapallocations in senderreceiver with connectstart as basis operations") > >() },
    { "p2007r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdfromchars should work with stdstringview") > >() },
    { "p2008r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Enable variable template template parameters") > >() },
    { "p2009r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2010r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniil Goncharov") >(), wxS("Remove iostream operators from P") > >() },
    { "p2011r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Colby Pike") >(), wxS("A pipelinerewrite operator") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Colby Pike") >(), wxS("A pipelinerewrite operator") > >() },
    { "p2012r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Filipe Mulonde"), Hash("Nicolai Josuttis"), Hash("Victor Zverovich") >(), wxS("Fix the rangebased for loop Revix the rangebased for loop") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Filipe Mulonde"), Hash("Nicolai Josuttis"), Hash("Victor Zverovich") >(), wxS("Fix the rangebased for loop Rev") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Filipe Mulonde"), Hash("Nicolai Josuttis"), Hash("Victor Zverovich") >(), wxS("Fix the rangebased for loop Rev") > >() },
    { "p2013r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") >, Rev< 4u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") >, Rev< 5u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Language Optional operator new") > >() },
    { "p2014r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov"), Hash("Lewis Baker") >(), wxS("Proposed resolution for USUS  aligned allocation of coroutine frames") >, Rev< 1u, ArrHash< Hash("Gor Nishanov"), Hash("Lewis Baker") >(), wxS("Proposed resolution for USUS  aligned allocation of coroutine frames") >, Rev< 2u, ArrHash< Hash("Gor Nishanov"), Hash("Lewis Baker") >(), wxS("Proposed resolution for USUS  aligned allocation of coroutine frames") > >() },
    { "p2016r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("A step parameter for iota") > >() },
    { "p2017r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Conditionally safe ranges") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Conditionally borrowed ranges") > >() },
    { "p2019r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Usability improvements for stdthread") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Usability improvements for stdthread") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Usability improvements for stdthread") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") >, Rev< 5u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") >, Rev< 6u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") >, Rev< 7u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") >, Rev< 8u, ArrHash< Hash("Corentin Jabot") >(), wxS("Thread attributes") > >() },
    { "p2020r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Locales Encodings and Unicode") > >() },
    { "p2021r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Negative zero strikes again") > >() },
    { "p2022r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ran Regev") >(), wxS("Rangified version of lexicographicalcomparethreeway") >, Rev< 1u, ArrHash< Hash("Ran Regev") >(), wxS("Rangified version of lexicographicalcomparethreeway") >, Rev< 2u, ArrHash< Hash("Ran Regev") >(), wxS("Rangified version of lexicographicalcomparethreeway") >, Rev< 3u, ArrHash< Hash("Alex Dathskovsky"), Hash("Ran Regev") >(), wxS("Rangified version of lexicographicalcomparethreeway") > >() },
    { "p2024r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Dietmar K\\u00FChl"), Hash("Frank Birbacher"), Hash("Marina Efimova"), Hash("Vern Riedlin") >(), wxS("Bloomberg Analysis of Unified Executors") > >() },
    { "p2025r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Anton Zhilin") >(), wxS("Guaranteed copy elision for named return objects") >, Rev< 1u, ArrHash< Hash("Anton Zhilin") >(), wxS("Guaranteed copy elision for return variables") >, Rev< 2u, ArrHash< Hash("Anton Zhilin") >(), wxS("Guaranteed copy elision for return variables") > >() },
    { "p2026r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Weis"), Hash("Bryce Adelstein Lelbach"), Hash("Ilya Burylov"), Hash("JF Bastien"), Hash("Ruslan Arutyunyan"), Hash("Ryan McDougall") >(), wxS("A Constituent Study Group for SafetyCritical Applications") > >() },
    { "p2027r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Geoffrey Romer") >(), wxS("Movedfrom objects need not be valid") > >() },
    { "p2028r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("What is ABI and What Should WG Do About It") > >() },
    { "p2029r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Proposed resolution for core issues   and  escapes in character and string literals") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("Proposed resolution for core issues   and  escapes in character and string literals") >, Rev< 2u, ArrHash< Hash("Tom Honermann") >(), wxS("Proposed resolution for core issues   and  escapes in character and string literals") >, Rev< 3u, ArrHash< Hash("Tom Honermann") >(), wxS("Proposed resolution for core issues   and  escapes in character and string literals") >, Rev< 4u, ArrHash< Hash("Tom Honermann") >(), wxS("Proposed resolution for core issues   and  escapes in character and string literals") > >() },
    { "p2030r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning ") > >() },
    { "p2031r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Meeting Minutes ") > >() },
    { "p2032r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Contracts  What Came Before") > >() },
    { "p2033r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("History of Executor Properties") > >() },
    { "p2034r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ryan McDougall") >(), wxS("Partially Mutable Lambda Captures") >, Rev< 1u, ArrHash< Hash("Patrick McMichael"), Hash("Ryan McDougall") >(), wxS("Partially Mutable Lambda Captures") >, Rev< 2u, ArrHash< Hash("Patrick McMichael"), Hash("Ryan McDougall") >(), wxS("Partially Mutable Lambda Captures") >, Rev< 3u, ArrHash< Hash("Nestor Subiron Montoro"), Hash("Ryan McDougall") >(), wxS("Partially Mutable Lambda Captures") >, Rev< 4u, ArrHash< Hash("Nestor Subiron Montoro"), Hash("Ryan McDougall") >(), wxS("Partially Mutable Lambda Captures") > >() },
    { "p2035r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Value Proposition AllocatorAware AA Software") > >() },
    { "p2036r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Changing scope for lambda trailingreturntype") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Changing scope for lambda trailingreturntype") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Changing scope for lambda trailingreturntype") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Changing scope for lambda trailingreturntype") > >() },
    { "p2037r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Strings gratuitous assignment") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Strings gratuitous assignment") > >() },
    { "p2038r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ryan McDougall") >(), wxS("Proposed nomenclature for contractrelated proposals") > >() },
    { "p2039r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Menashe Rosemberg") >(), wxS("dountil Loop") > >() },
    { "p2040r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Reflectionbased lazyevaluation") > >() },
    { "p2041r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Deleting variable templates") >, Rev< 1u, ArrHash< Hash("David Stone") >(), wxS("template  delete") > >() },
    { "p2042r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Alternate names for makeshareddefaultinit") > >() },
    { "p2043r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("Dont constexpr All The Things") > >() },
    { "p2044r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Member Templates for Local Classes") >, Rev< 1u, ArrHash< Hash("Robert Leahy") >(), wxS("Member Templates for Local Classes") >, Rev< 2u, ArrHash< Hash("Robert Leahy") >(), wxS("Member Templates for Local Classes") > >() },
    { "p2045r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("Missing Mandates for the standard library") >, Rev< 1u, ArrHash< Hash("Marshall Clow") >(), wxS("Missing Mandates for the standard library") > >() },
    { "p2046r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Raviv") >(), wxS("Rangify New Algorithms") > >() },
    { "p2047r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 1u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 2u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 3u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 4u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 5u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 6u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") >, Rev< 7u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware optional type") > >() },
    { "p2048r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vittorio Romeo") >(), wxS("Prohibit zero and NULL from being used as null pointer literals") > >() },
    { "p2049r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Wyatt Childers") >(), wxS("Constraint refinement for specialcased functions") > >() },
    { "p2050r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Wyatt Childers") >(), wxS("Tweaks to the design of source code fragments") > >() },
    { "p2051r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Library Issues to be moved in Prague") > >() },
    { "p2052r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Making modern C io a consistent API experience from bottom to top") > >() },
    { "p2053r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Rostislav Khlebnikov") >(), wxS("Defensive Checks Versus Input Validation") >, Rev< 1u, ArrHash< Hash("John Lakos"), Hash("Rostislav Khlebnikov") >(), wxS("Defensive Checks Versus Input Validation") > >() },
    { "p2054r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Frank Birbacher"), Hash("Sophia Poirier"), Hash("Timur Doumler") >(), wxS("Audio IO Software Use Cases") >, Rev< 1u, ArrHash< Hash("Frank Birbacher"), Hash("Sophia Poirier"), Hash("Timur Doumler") >(), wxS("Audio IO Software Use Cases") > >() },
    { "p2055r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm"), Hash("Paul E. McKenney") >(), wxS("A Relaxed Guide to memoryorderrelaxed") > >() },
    { "p2057r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Inbal Levi"), Hash("Mark Hoemmen"), Hash("Matthew Bentley"), Hash("Michael Wong"), Hash("Paul M. Bendixen"), Hash("Ren\\u00E9 Ferdinand Rivera Morell"), Hash("Ronen Friedman"), Hash("Staffan Tjernstrom") >(), wxS("SG SG Past Present and Future status") > >() },
    { "p2058r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Ho\\u0159e\\u0148ovsk\\u00FD") >(), wxS("Make stdrandomdevice Less Inscrutable") > >() },
    { "p2059r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Ho\\u0159e\\u0148ovsk\\u00FD") >(), wxS("Make Pseudorandom Numbers Portable") > >() },
    { "p2060r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Ho\\u0159e\\u0148ovsk\\u00FD") >(), wxS("Make Random Number Engines Seedable") > >() },
    { "p2061r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Sequential consistency for atomic memcpy") > >() },
    { "p2062r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Wyatt Childers") >(), wxS("The Circle Metamodel") > >() },
    { "p2064r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Assumptions") > >() },
    { "p2065r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("naming and aliases") > >() },
    { "p2066r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Michael L. Scott") >(), wxS("Suggested draft TS for C Extensions for Transaction Memory Light") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Transaction Memory Light") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Transaction Memory Light") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Transaction Memory Light") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 5u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 6u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 7u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 8u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 9u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") >, Rev< 10u, ArrHash< Hash("Hans J. Boehm"), Hash("Jens Maurer"), Hash("Michael L. Scott"), Hash("Michael Spear"), Hash("Michael Wong"), Hash("Victor Luchangco") >(), wxS("Suggested draft TS for C Extensions for Minimal Transactional Memory") > >() },
    { "p2067r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("Allowing trailing commas in ctorinitializer") > >() },
    { "p2068r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("Using  to reduce the scope of constexprif") > >() },
    { "p2069r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Stackable thread local signal guards") > >() },
    { "p2070r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Jan Babst"), Hash("Michael Wong"), Hash("Peter Sommerlad") >(), wxS("A case for optional and objectptr") > >() },
    { "p2071r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels"), Hash("Tom Honermann") >(), wxS("Named universal character escapes") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Bindels"), Hash("R. Martinho Fernandes"), Hash("Steve Downey"), Hash("Tom Honermann") >(), wxS("Named universal character escapes") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Bindels"), Hash("R. Martinho Fernandes"), Hash("Steve Downey"), Hash("Tom Honermann") >(), wxS("Named universal character escapes") > >() },
    { "p2072r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Marco Foco"), Hash("Max Rietmann"), Hash("Michael Wong"), Hash("Vassil Vassilev") >(), wxS("Differentiable programming for C") >, Rev< 1u, ArrHash< Hash("Marco Foco"), Hash("Michael Wong"), Hash("Vassil Vassilev"), Hash("William S. Moses") >(), wxS("Differentiable programming for C") > >() },
    { "p2073r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dmitry Duka"), Hash("Ivan Shutov"), Hash("Konstantin Sadov") >(), wxS("Debugging C coroutines") > >() },
    { "p2074r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dmitry Duka") >(), wxS("Asynchronous callstacks  coroutines") > >() },
    { "p2075r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 1u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 2u, ArrHash< Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 3u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 4u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 5u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") >, Rev< 6u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("John Salmon"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Philox as an extension of the C RNG engines") > >() },
    { "p2076r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Previous disagreements on Contracts") > >() },
    { "p2077r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Heterogeneous erasure overloads for associative containers") >, Rev< 1u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Heterogeneous erasure overloads for associative containers") >, Rev< 2u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Heterogeneous erasure overloads for associative containers") >, Rev< 3u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Heterogeneous erasure overloads for associative containers") > >() },
    { "p2078r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall") >(), wxS("Add new traits type stdiscomplex") > >() },
    { "p2079r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Shared execution engine for executors") >, Rev< 1u, ArrHash< Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Parallel Executor") >, Rev< 2u, ArrHash< Hash("Lee Howes"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 3u, ArrHash< Hash("Lee Howes"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 4u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 5u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 6u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 7u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("System execution context") >, Rev< 8u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Parallel Scheduler") >, Rev< 9u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Parallel Scheduler") >, Rev< 10u, ArrHash< Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Parallel Scheduler") > >() },
    { "p2080r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Polymorphic allocators There is no such thing as One True Vocabulary Type") > >() },
    { "p2081r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Rebase the Library Fundamentals v TS on C") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Rebase the Library Fundamentals v TS on C") > >() },
    { "p2082r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Fixing CTAD for aggregates") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Fixing CTAD for aggregates") > >() },
    { "p2085r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Consistent defaulted comparisons") > >() },
    { "p2087r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Reflection Naming fix reflexpr") > >() },
    { "p2088r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Reflection Naming Reification") > >() },
    { "p2089r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Function parameter constraints are too fragile") > >() },
    { "p2091r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("Issues with Range Access CPOs") > >() },
    { "p2092r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Hubert S.K. Tong") >(), wxS("Disambiguating NestedRequirements") > >() },
    { "p2093r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 5u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 6u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 7u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 8u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 9u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 10u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 11u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 12u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 13u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") >, Rev< 14u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatted output") > >() },
    { "p2095r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Resolve lambda initcapture pack grammar CWG") > >() },
    { "p2096r0", 2u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Generalized wording for partial specializations") >, Rev< 1u, ArrHash< Hash("James Touton") >(), wxS("Generalized wording for partial specializations") >, Rev< 2u, ArrHash< Hash("James Touton") >(), wxS("Generalized wording for partial specializations") > >() },
    { "p2098r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bob Steagall"), Hash("Walter E. Brown") >(), wxS("Proposing stdisspecializationof") >, Rev< 1u, ArrHash< Hash("Bob Steagall"), Hash("Walter E. Brown") >(), wxS("Proposing stdisspecializationof") > >() },
    { "p2100r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Keep unhandledexception of a promise type mandatory  a response to US and FR") > >() },
    { "p2101r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("R. Tim Song") >(), wxS("Models subsumes satisfies Wording for US and US") > >() },
    { "p2102r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter"), Hash("R. Tim Song") >(), wxS("Make quotimplicit expression variationsquot more explicit Wording for US") > >() },
    { "p2103r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Changes for NB Comments at the February  Prague Meeting") > >() },
    { "p2104r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Gabriel Dos Reis"), Hash("Roger Orr") >(), wxS("Resolution for GB  Disallow changing concept values") > >() },
    { "p2106r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Alternative wording for GB and GB") > >() },
    { "p2107r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core issue  US Copy semantics of coroutine parameters") > >() },
    { "p2108r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready issues for the February  Prague meeting") > >() },
    { "p2109r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("US Disallow export import foo outside of module interface") > >() },
    { "p2113r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong") >(), wxS("Proposed resolution for  comment CA ") > >() },
    { "p2114r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Minimial Contract Use Cases") > >() },
    { "p2115r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("US Merging of multiple definitions for unnamed unscoped enumerations") > >() },
    { "p2116r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Remove tuplelike protocol support from fixedextent span") > >() },
    { "p2117r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marshall Clow") >(), wxS("C Standard Library Issues Resolved Directly In Prague") > >() },
    { "p2119r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jolanta Opara") >(), wxS("Feedback on Simple Statistics functions") > >() },
    { "p2120r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Simplified structured bindings protocol with pack aliases") > >() },
    { "p2123r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel"), Hash("Thomas Richard William Scogland") >(), wxS("interfaces A Facility to Manage ABIAPI Evolution") > >() },
    { "p2125r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Titus Winters") >(), wxS("The Ecosystem Expense of Vocabulary Types") > >() },
    { "p2126r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Unleashing the Power of AllocatorAware AA Infrastructure") > >() },
    { "p2127r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Pablo Halpern") >(), wxS("Making C Software Allocator Aware") > >() },
    { "p2128r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 4u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 5u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") >, Rev< 6u, ArrHash< Hash("Christian Trott"), Hash("Corentin Jabot"), Hash("D. S. Hollman"), Hash("Isabella Muerte"), Hash("Mark Hoemmen") >(), wxS("Multidimensional subscript operator") > >() },
    { "p2130r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Prague Record of Discussion") > >() },
    { "p2131r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Changes between C and C") > >() },
    { "p2132r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Language Evolution status after Prague ") > >() },
    { "p2133r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pal Balog") >(), wxS("The Incubator needs YOU") > >() },
    { "p2134r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pal Balog") >(), wxS("Kaizen keep improving together") > >() },
    { "p2135r0", 1u, RevList< Rev< 1u, ArrHash< Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Paul E. McKenney") >(), wxS("PR A Relaxed Guide to memoryorderrelaxed") > >() },
    { "p2136r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("invokeR") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("invoker") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("invoker") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("invoker") > >() },
    { "p2137r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Chandler Carruth"), Hash("Chris Kennelly"), Hash("Chris Palmer"), Hash("Christian Trott"), Hash("D. S. Hollman"), Hash("Damien Lebrun-Grandie"), Hash("David Stone"), Hash("Dmitri Gribenko"), Hash("Hal Finkel"), Hash("Josh Levenberg"), Hash("Nevin Liber"), Hash("Richard Smith"), Hash("Thomas K\\u00F6ppe"), Hash("Thomas Richard William Scogland"), Hash("Timothy Costa"), Hash("Titus Winters") >(), wxS("Goals and priorities for C") > >() },
    { "p2138r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Rules of DesignWording engagement") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Rules of DesignWording engagement") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Rules of DesignWording engagement") >, Rev< 3u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Rules of Design  Specification engagement") >, Rev< 4u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Rules of DesignSpecification engagement") > >() },
    { "p2139r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reviewing Deprecated Facilities of C for C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reviewing Deprecated Facilities of C for C") > >() },
    { "p2141r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Aggregates are named tuples") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Aggregates are named tuples") >, Rev< 2u, ArrHash< Hash("Antony Polukhin") >(), wxS("Aggregates are named tuples") > >() },
    { "p2142r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Jim Buckeyne") >(), wxS("Allow  operator to work on pointers") > >() },
    { "p2145r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Billy Baker"), Hash("Botond Ballo"), Hash("Bryce Adelstein Lelbach"), Hash("David Stone"), Hash("Fabio Fracassi"), Hash("JF Bastien"), Hash("Nevin Liber"), Hash("Titus Winters"), Hash("Tom Honermann") >(), wxS("Evolving C Remotely") >, Rev< 1u, ArrHash< Hash("Billy Baker"), Hash("Botond Ballo"), Hash("Bryce Adelstein Lelbach"), Hash("David Stone"), Hash("Fabio Fracassi"), Hash("JF Bastien"), Hash("Nevin Liber"), Hash("Titus Winters"), Hash("Tom Honermann") >(), wxS("Evolving C Remotely") > >() },
    { "p2146r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Amanda Kornoushenko") >(), wxS("Modern stdbyte stream IO for C") >, Rev< 1u, ArrHash< Hash("Amanda Kornoushenko") >(), wxS("Modern stdbyte stream IO for C") >, Rev< 2u, ArrHash< Hash("Amanda Kornoushenko") >(), wxS("Modern stdbyte stream IO for C") > >() },
    { "p2148r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("CJ Johnson") >(), wxS("Library Evolution Design Guidelines") > >() },
    { "p2149r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Remove systemexecutor") > >() },
    { "p2150r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Down with typename in the library") > >() },
    { "p2152r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Inbal Levi") >(), wxS("Querying the alignment of an object") >, Rev< 1u, ArrHash< Hash("Inbal Levi") >(), wxS("Querying the alignment of an object") > >() },
    { "p2155r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gordon Brown"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen"), Hash("Michael Wong"), Hash("Ruyman Reyes"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers") >(), wxS("Policy property for describing adjacency") > >() },
    { "p2156r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Erich Keane") >(), wxS("Allow Duplicate Attributes") >, Rev< 1u, ArrHash< Hash("Erich Keane") >(), wxS("Allow Duplicate Attributes") > >() },
    { "p2159r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bill Seymour") >(), wxS("An Unbounded Decimal FloatingPoint Type") >, Rev< 1u, ArrHash< Hash("Bill Seymour") >(), wxS("A Big Decimal Type") > >() },
    { "p2160r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Locks lock lockables wording for LWG ") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Locks lock lockables wording for LWG ") > >() },
    { "p2161r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Remove Default Candidate Executor") >, Rev< 1u, ArrHash< Hash("Robert Leahy") >(), wxS("Remove Default Candidate Executor") >, Rev< 2u, ArrHash< Hash("Robert Leahy") >(), wxS("Remove Default Candidate Executor") > >() },
    { "p2162r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Inheriting from stdvariant resolving LWG") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Inheriting from stdvariant resolving LWG") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Inheriting from stdvariant resolving LWG") > >() },
    { "p2163r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Damian"), Hash("Michael Spertus") >(), wxS("Native tuples in C") > >() },
    { "p2164r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 5u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 6u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 7u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 8u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") >, Rev< 9u, ArrHash< Hash("Corentin Jabot") >(), wxS("viewsenumerate") > >() },
    { "p2165r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Comparing pair and tuples") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Compatibility between tuple and tuplelike objects") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Compatibility between tuple pair and tuplelike objects") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Compatibility between tuple pair and tuplelike objects") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("Compatibility between tuple pair and tuplelike objects") > >() },
    { "p2166r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Yuriy Chernyshov") >(), wxS("A Proposal to Prohibit stdbasicstring and stdbasicstringview construction from nullptr") >, Rev< 1u, ArrHash< Hash("Yuriy Chernyshov") >(), wxS("A Proposal to Prohibit stdbasicstring and stdbasicstringview construction from nullptr") > >() },
    { "p2167r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improved Proposed Wording for LWG ") >, Rev< 1u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improved Proposed Wording for LWG  contextually convertible to bool") >, Rev< 2u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improved Proposed Wording for LWG  contextually convertible to bool") >, Rev< 3u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Improved Proposed Wording for LWG  contextually convertible to bool") > >() },
    { "p2168r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Lewis Baker") >(), wxS("generator A Synchronous Coroutine Generator Compatible With Ranges") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Lewis Baker") >(), wxS("generator A Synchronous Coroutine Generator Compatible With Ranges") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Lewis Baker") >(), wxS("generator A Synchronous Coroutine Generator Compatible With Ranges") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Lewis Baker") >(), wxS("generator A Synchronous Coroutine Generator Compatible With Ranges") > >() },
    { "p2169r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Michael Park") >(), wxS("A Nice Placeholder With No Name") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Michael Park") >(), wxS("A Nice Placeholder With No Name") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Michael Park") >(), wxS("A Nice Placeholder With No Name") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Michael Park") >(), wxS("A Nice Placeholder With No Name") >, Rev< 4u, ArrHash< Hash("Corentin Jabot"), Hash("Michael Park") >(), wxS("A Nice Placeholder With No Name") > >() },
    { "p2170r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Charles Salvia") >(), wxS("Feedback on implementing the proposed stderror type") > >() },
    { "p2171r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Rebasing the Networking TS on C") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Rebasing the Networking TS on C revision ") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Rebasing the Networking TS on C revision ") > >() },
    { "p2172r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("What do we want from a modularized Standard Library") > >() },
    { "p2173r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Inbal Levi"), Hash("Ville Voutilainen") >(), wxS("Attributes on LambdaExpressions") >, Rev< 1u, ArrHash< Hash("Daveed Vandevoorde"), Hash("Inbal Levi"), Hash("Ville Voutilainen") >(), wxS("Attributes on LambdaExpressions") > >() },
    { "p2174r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Compound Literals") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Compound Literals") > >() },
    { "p2175r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Composable cancellation for senderbased async operations") > >() },
    { "p2176r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("A different take on inexpressible conditions") > >() },
    { "p2178r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Misc lexing and string handling improvements") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Misc lexing and string handling improvements") > >() },
    { "p2179r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2181r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("Correcting the Design of Bulk Execution") >, Rev< 1u, ArrHash< Hash("Jared Hoberock"), Hash("Michael Garland") >(), wxS("Correcting the Design of Bulk Execution") > >() },
    { "p2182r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract Support Defining the Minimum Viable Feature Set") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract Support Defining the Minimum Viable Feature Set") > >() },
    { "p2183r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("David Olsen"), Hash("Inbal Levi"), Hash("Kirk Shoop"), Hash("Micha\\u0142 Dominiak"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Executors Review Properties") > >() },
    { "p2184r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Thriving in a crowded and changing world C ") > >() },
    { "p2185r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Caleb Sunstrum") >(), wxS("Contracts Use Case Categorization") > >() },
    { "p2186r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("JF Bastien") >(), wxS("Removing Garbage Collection Support") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("JF Bastien") >(), wxS("Removing Garbage Collection Support") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("JF Bastien") >(), wxS("Removing Garbage Collection Support") > >() },
    { "p2187r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Nathan Myers") >(), wxS("stdswapif stdpredictable") >, Rev< 3u, ArrHash< Hash("Nathan Myers") >(), wxS("stdswapif stdpredictable") >, Rev< 4u, ArrHash< Hash("Nathan Myers") >(), wxS("stdswapif stdpredictable") >, Rev< 5u, ArrHash< Hash("Nathan Myers") >(), wxS("stdswapif stdpredictable") > >() },
    { "p2188r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Zap the Zap Pointers should just be bags of bits") >, Rev< 1u, ArrHash< Hash("Anthony Williams") >(), wxS("Zap the Zap Pointers are sometimes just bags of bits") > >() },
    { "p2191r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules ADL  GMFs do not play together well anymore") > >() },
    { "p2192r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Dusan B. Jovanovic") >(), wxS("stdvalstat  function return type") >, Rev< 1u, ArrHash< Hash("Dusan B. Jovanovic") >(), wxS("stdvalstat  function return type") >, Rev< 2u, ArrHash< Hash("Dusan B. Jovanovic") >(), wxS("stdvalstat Transparent Returns Handling") >, Rev< 3u, ArrHash< Hash("Dusan B. Jovanovic") >(), wxS("stdvalstat  Returns Handling") > >() },
    { "p2193r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Florian Sattler"), Hash("J.C. van Winkel") >(), wxS("How to structure a teaching topic") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Florian Sattler"), Hash("J.C. van Winkel") >(), wxS("How to structure a teaching topic") > >() },
    { "p2194r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("The character set of the internal representation should be Unicode") > >() },
    { "p2195r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Electronic Straw Polls") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Electronic Straw Polls") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Electronic Straw Polls") > >() },
    { "p2196r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Vincent Reverdy") >(), wxS("A lifetimeextending forwarder") > >() },
    { "p2197r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Tesch"), Hash("Victor Zverovich") >(), wxS("Formatting for stdcomplex") > >() },
    { "p2198r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 4u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 5u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 6u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") >, Rev< 7u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding FeatureTest Macros and ImplementationDefined Extensions") > >() },
    { "p2199r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte") >(), wxS("Concepts to differentiate types") > >() },
    { "p2201r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Mixed string literal concatenation") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Mixed string literal concatenation") > >() },
    { "p2202r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Dietmar K\\u00FChl"), Hash("Eric A Niebler"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Gordon Brown"), Hash("Kirk Shoop"), Hash("Robert Leahy"), Hash("Thomas W Rodgers"), Hash("Tomasz Kami\\u0144ski"), Hash("Tony van Eerd") >(), wxS("SendersReceivers group Executors review report") > >() },
    { "p2203r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryan St. Amour"), Hash("Conor Hoekstra"), Hash("Ryan McDougall"), Hash("Tomasz Kami\\u0144ski") >(), wxS("LEWG Executors Customization Point Report") > >() },
    { "p2205r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("D. S. Hollman"), Hash("Dmitri Mokhov"), Hash("Inbal Levi"), Hash("Jared Hoberock"), Hash("Ruslan Arutyunyan"), Hash("Thomas Richard William Scogland"), Hash("Zach Laine") >(), wxS("Executors Review  Polymorphic Executor") > >() },
    { "p2206r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anuya Welling"), Hash("Ben Craig"), Hash("Christopher Kohlhoff"), Hash("Gordon Brown"), Hash("Guy Davidson"), Hash("Lee Howes"), Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan"), Hash("Thomas Richard William Scogland") >(), wxS("Executors Thread Pool review report") > >() },
    { "p2207r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Ben Craig"), Hash("D. S. Hollman"), Hash("Gordon Brown"), Hash("Guy Davidson"), Hash("Hartmut Kaiser"), Hash("Jared Hoberock"), Hash("Micha\\u0142 Dominiak"), Hash("Robert Leahy") >(), wxS("Executors review concepts breakout group report") > >() },
    { "p2209r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lee Howes") >(), wxS("Bulk Schedule") > >() },
    { "p2210r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Superior String Splitting") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Superior String Splitting") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Superior String Splitting") > >() },
    { "p2211r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Sarginson"), Hash("David Sankel"), Hash("Michael Park"), Hash("Sergei Murzin") >(), wxS("Exhaustiveness Checking for Pattern Matching") > >() },
    { "p2212r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alexey Dmitriev"), Hash("Howard E. Hinnant") >(), wxS("Relax Requirements for timepointclock") >, Rev< 1u, ArrHash< Hash("Alexey Dmitriev"), Hash("Howard E. Hinnant") >(), wxS("Relax Requirements for timepointclock") >, Rev< 2u, ArrHash< Hash("Alexey Dmitriev"), Hash("Howard E. Hinnant") >(), wxS("Relax Requirements for timepointclock") > >() },
    { "p2213r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Amir Kirsh"), Hash("Andrei Zissu"), Hash("Dan Raviv"), Hash("Dvir Yitzchaki"), Hash("Inbal Levi"), Hash("Michael Peeri"), Hash("Ran Regev"), Hash("Yehezkel Bernat") >(), wxS("Executors Naming") >, Rev< 1u, ArrHash< Hash("Amir Kirsh"), Hash("Andrei Zissu"), Hash("Dan Raviv"), Hash("Dvir Yitzchaki"), Hash("Inbal Levi"), Hash("Michael Peeri"), Hash("Ran Regev"), Hash("Yehezkel Bernat") >(), wxS("Executors Naming") > >() },
    { "p2214r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Conor Hoekstra"), Hash("R. Tim Song") >(), wxS("A Plan for C Ranges") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Conor Hoekstra"), Hash("R. Tim Song") >(), wxS("A Plan for C Ranges") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Conor Hoekstra"), Hash("R. Tim Song") >(), wxS("A Plan for C Ranges") > >() },
    { "p2215r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Undefined behavior and the concurrency memory model") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Undefined behavior and the concurrency memory model") > >() },
    { "p2216r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdformat improvements") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdformat improvements") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdformat improvements") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdformat improvements") > >() },
    { "p2217r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2218r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("More flexible optionalvalueor") > >() },
    { "p2219r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("P Executors Issues Needing Resolution") > >() },
    { "p2220r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("redefine properties in P") > >() },
    { "p2221r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("define P cpos with taginvoke") > >() },
    { "p2223r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Trimming whitespaces before line splicing") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Trimming whitespaces before line splicing") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Trimming whitespaces before line splicing") > >() },
    { "p2224r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock"), Hash("Lee Howes"), Hash("Michael Garland") >(), wxS("A Better bulkschedule") > >() },
    { "p2226r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A function template to move from an object and reset it to its default constructed state") > >() },
    { "p2227r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Update normative reference to POSIX") > >() },
    { "p2228r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Slide Deck for P EWG Presentation ") > >() },
    { "p2231r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Add further constexpr support for optionalvariant") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Add further constexpr support for optionalvariant") > >() },
    { "p2232r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Emil Dotchevski") >(), wxS("ZeroOverhead Deterministic Exceptions Catching Values") > >() },
    { "p2233r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Fall Library Evolution Polls") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Fall Library Evolution Polls") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Fall Library Evolution Polls") >, Rev< 3u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Fall Library Evolution Polls") > >() },
    { "p2234r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Scott Schurr") >(), wxS("Consider a UB and IFNDR Audit") >, Rev< 1u, ArrHash< Hash("Scott Schurr") >(), wxS("Consider a UB and IFNDR Audit") > >() },
    { "p2235r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Disentangling schedulers and executors") > >() },
    { "p2236r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary Nov ") > >() },
    { "p2237r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton") >(), wxS("Metaprogramming") > >() },
    { "p2238r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready issues for the November  meeting") > >() },
    { "p2242r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonliteral variables and labels and gotos in constexpr functions") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonliteral variables and labels and gotos in constexpr functions") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonliteral variables and labels and gotos in constexpr functions") >, Rev< 3u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Nonliteral variables and labels and gotos in constexpr functions") > >() },
    { "p2244r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinanceSimulation Meeting Minutes") > >() },
    { "p2245r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning Meeting Minutes") > >() },
    { "p2246r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("Character encoding of diagnostic text") >, Rev< 1u, ArrHash< Hash("Aaron Ballman") >(), wxS("Character encoding of diagnostic text") > >() },
    { "p2247r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Bryce Adelstein Lelbach"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Report") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Bryce Adelstein Lelbach"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Report") > >() },
    { "p2248r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 3u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 4u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 5u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 6u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 7u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") >, Rev< 8u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Enabling listinitialization for algorithms") > >() },
    { "p2249r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 3u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 4u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 5u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") >, Rev< 6u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Mixed comparisons for smart pointers") > >() },
    { "p2250r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael J. Voss"), Hash("Ruslan Arutyunyan") >(), wxS("Scheduler vs Executor") > >() },
    { "p2251r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("Require span  basicstringview to be Trivially Copyable") >, Rev< 1u, ArrHash< Hash("Nevin Liber") >(), wxS("Require span  basicstringview to be Trivially Copyable") > >() },
    { "p2253r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2254r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jared Hoberock") >(), wxS("Executors Beyond Invocables") > >() },
    { "p2255r0", 2u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("A type trait to detect reference binding to temporary") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("A type trait to detect reference binding to temporary") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("A type trait to detect reference binding to temporary") > >() },
    { "p2257r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dalton M. Woodard") >(), wxS("Blocking is an insufficient description for senders and receivers") > >() },
    { "p2259r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Repairing input range adaptors and countediterator") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Repairing input range adaptors and countediterator") > >() },
    { "p2260r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2262r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Fall Library Evolution Poll Outcomes") > >() },
    { "p2263r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels"), Hash("Tom Honermann") >(), wxS("A call for a WG managed chat service") >, Rev< 1u, ArrHash< Hash("Peter Bindels"), Hash("Tom Honermann") >(), wxS("A call for a WG managed chat service") > >() },
    { "p2264r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 3u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 4u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 5u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 6u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") >, Rev< 7u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make assert macro user friendly for C and C") > >() },
    { "p2265r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Kevlin Henney") >(), wxS("Renaming anyinvocable") >, Rev< 1u, ArrHash< Hash("Kevlin Henney") >(), wxS("Renaming anyinvocable") > >() },
    { "p2266r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Simpler implicit move") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Simpler implicit move") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Simpler implicit move") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Simpler implicit move") > >() },
    { "p2267r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Fabio Fracassi"), Hash("Inbal Levi") >(), wxS("Library Evolution Policies") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Fabio Fracassi"), Hash("Inbal Levi") >(), wxS("Library Evolution Policies") > >() },
    { "p2268r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Roadmap") > >() },
    { "p2272r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Butler") >(), wxS("Safety  Security Review Board") > >() },
    { "p2273r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andreas Fertig") >(), wxS("Making stduniqueptr constexpr") >, Rev< 1u, ArrHash< Hash("Andreas Fertig") >(), wxS("Making stduniqueptr constexpr") >, Rev< 2u, ArrHash< Hash("Andreas Fertig") >(), wxS("Making stduniqueptr constexpr") >, Rev< 3u, ArrHash< Hash("Andreas Fertig") >(), wxS("Making stduniqueptr constexpr") > >() },
    { "p2274r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("C and C Compatibility Study Group") > >() },
    { "p2276r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fix stdcbegin stdrangescbegin and cbegin for span fix of wrong fix of lwg") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fix cbegin") > >() },
    { "p2277r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Packs outside of Templates") > >() },
    { "p2278r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("cbegin should always return a constant iterator") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("cbegin should always return a constant iterator") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("cbegin should always return a constant iterator") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("cbegin should always return a constant iterator") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("cbegin should always return a constant iterator") > >() },
    { "p2279r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("We need a language mechanism for customization points") > >() },
    { "p2280r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Using unknown references in constant expressions") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Using unknown references in constant expressions") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Using unknown references in constant expressions") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Using unknown references in constant expressions") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("Using unknown references in constant expressions") > >() },
    { "p2281r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Clarifying range adaptor objects") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Clarifying range adaptor objects") > >() },
    { "p2283r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Schellenberger Costa") >(), wxS("constexpr for specialized memory algorithms") >, Rev< 1u, ArrHash< Hash("Michael Schellenberger Costa") >(), wxS("constexpr for specialized memory algorithms") >, Rev< 2u, ArrHash< Hash("Michael Schellenberger Costa") >(), wxS("constexpr for specialized memory algorithms") > >() },
    { "p2285r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Are default function arguments in the immediate context") > >() },
    { "p2286r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 5u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 6u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 7u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") >, Rev< 8u, ArrHash< Hash("Barry Revzin") >(), wxS("Formatting Ranges") > >() },
    { "p2287r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") >, Rev< 5u, ArrHash< Hash("Barry Revzin") >(), wxS("Designatedinitializers for base classes") > >() },
    { "p2289r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Winter Library Evolution Polls") > >() },
    { "p2290r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Delimited escape sequences") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Delimited escape sequences") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Delimited escape sequences") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Delimited escape sequences") > >() },
    { "p2291r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daniil Goncharov"), Hash("Karaev Alexander") >(), wxS("Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in Header") >, Rev< 1u, ArrHash< Hash("Daniil Goncharov"), Hash("Karaev Alexander") >(), wxS("Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in Header") >, Rev< 2u, ArrHash< Hash("Daniil Goncharov"), Hash("Karaev Alexander") >(), wxS("Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in Header") >, Rev< 3u, ArrHash< Hash("Daniil Goncharov"), Hash("Karaev Alexander") >(), wxS("Add Constexpr Modifiers to Functions tochars and fromchars for Integral Types in Header") > >() },
    { "p2295r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Correct UTF handling during phase  of translation") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Correct UTF handling during phase  of translation") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Support for UTF as a portable source file encoding") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Support for UTF as a portable source file encoding") >, Rev< 4u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Support for UTF as a portable source file encoding") >, Rev< 5u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Support for UTF as a portable source file encoding") >, Rev< 6u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Support for UTF as a portable source file encoding") > >() },
    { "p2297r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Wording improvements for encodings and character sets") > >() },
    { "p2299r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("mdspan and CTAD") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("mdspan and CTAD") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("mdspan and CTAD") >, Rev< 3u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("mdspans of All Dynamic Extents") >, Rev< 4u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("mdspans of All Dynamic Extents") > >() },
    { "p2300r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 3u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 4u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 5u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 6u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 7u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 8u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 9u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") >, Rev< 10u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Georgy Evtushenko"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("stdexecution") > >() },
    { "p2301r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Add a pmr alias for stdstacktrace") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Add a pmr alias for stdstacktrace") > >() },
    { "p2302r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("Prefer stdrangescontains over stdbasicstringviewcontains") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdrangescontains") >, Rev< 2u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdrangescontains") >, Rev< 3u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdrangescontains") >, Rev< 4u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdrangescontains") > >() },
    { "p2303r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Function literals and value closures") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Function literals and value closures") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Function literals and value closures") >, Rev< 3u, ArrHash< Hash("Jens Gustedt") >(), wxS("Function literals and value closures") >, Rev< 4u, ArrHash< Hash("Jens Gustedt") >(), wxS("Basic lambdas for C") > >() },
    { "p2304r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Improve type generic programming") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Improve type generic programming") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Improve type generic programming") >, Rev< 3u, ArrHash< Hash("Jens Gustedt") >(), wxS("Improve type generic programming") > >() },
    { "p2305r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Type inference for variable definitions and function returns") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Type inference for variable definitions and function returns") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Type inference for variable definitions and function returns") >, Rev< 3u, ArrHash< Hash("Jens Gustedt") >(), wxS("Type inference for variable definitions and function returns") >, Rev< 4u, ArrHash< Hash("Jens Gustedt") >(), wxS("Type inference for variable definitions and function returns") >, Rev< 5u, ArrHash< Hash("Alex Gilding"), Hash("Jens Gustedt") >(), wxS("Type inference for object definitions") > >() },
    { "p2306r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Typegeneric lambdas") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Typegeneric lambdas") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Typegeneric lambdas") >, Rev< 3u, ArrHash< Hash("Jens Gustedt") >(), wxS("Typegeneric lambdas") > >() },
    { "p2307r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Lvalue closures") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Lvalue closures") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Lvalue closures") > >() },
    { "p2308r0", 1u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Template parameter initialization") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Template parameter initialization") > >() },
    { "p2309r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("A common CC core specification") > >() },
    { "p2310r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Revise spelling of keywords") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Revise spelling of keywords") > >() },
    { "p2311r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Make false and true firstclass language features") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Make false and true firstclass language features") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Make false and true firstclass language features") > >() },
    { "p2312r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Introduce the nullptr constant") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Introduce the nullptr constant") > >() },
    { "p2313r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group tentatively ready issues for the February  meeting") > >() },
    { "p2314r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Character sets and encodings") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Character sets and encodings") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Character sets and encodings") >, Rev< 3u, ArrHash< Hash("Jens Maurer") >(), wxS("Character sets and encodings") >, Rev< 4u, ArrHash< Hash("Jens Maurer") >(), wxS("Character sets and encodings") > >() },
    { "p2315r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary Feb ") > >() },
    { "p2316r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Consistent character literal encoding") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Consistent character literal encoding") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Consistent character literal encoding") > >() },
    { "p2317r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("C  An Invisible foundation of everything") > >() },
    { "p2318r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt"), Hash("Kayvan Memarian"), Hash("Martin Uecker"), Hash("Peter Sewell"), Hash("Victor B. F. Gomes") >(), wxS("A Provenanceaware Memory Object Model for C") >, Rev< 1u, ArrHash< Hash("Jens Gustedt"), Hash("Kayvan Memarian"), Hash("Martin Uecker"), Hash("Peter Sewell"), Hash("Victor B. F. Gomes") >(), wxS("A Provenanceaware Memory Object Model for C") > >() },
    { "p2319r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") >, Rev< 5u, ArrHash< Hash("Victor Zverovich") >(), wxS("Prevent path presentation problems") > >() },
    { "p2320r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("The Syntax of Static Reflection") > >() },
    { "p2321r0", 2u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("zip") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("zip") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("zip") > >() },
    { "p2322r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 5u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") >, Rev< 6u, ArrHash< Hash("Barry Revzin") >(), wxS("rangesfold") > >() },
    { "p2323r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Martin Uecker") >(), wxS("maybeunused attribute for labels") > >() },
    { "p2324r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Martin Uecker") >(), wxS("Labels at the end of compound statements C compatibility") >, Rev< 1u, ArrHash< Hash("Martin Uecker") >(), wxS("Labels at the end of compound statements C compatibility") >, Rev< 2u, ArrHash< Hash("Martin Uecker") >(), wxS("Labels at the end of compound statements C compatibility") > >() },
    { "p2325r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Views should not be required to be default constructible") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Views should not be required to be default constructible") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Views should not be required to be default constructible") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Views should not be required to be default constructible") > >() },
    { "p2327r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Ben Saks"), Hash("Jens Maurer"), Hash("Paul M. Bendixen") >(), wxS("Dedeprecating volatile compound assignment") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Ben Saks"), Hash("Jens Maurer"), Hash("Paul M. Bendixen") >(), wxS("Dedeprecating volatile compound operations") > >() },
    { "p2328r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("joinview should join all views of ranges") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("joinview should join all views of ranges") > >() },
    { "p2329r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Move Copy and Locality at Scale") > >() },
    { "p2330r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2331r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt"), Hash("\\u00C9tienne Alepins") >(), wxS("Unsequenced functions") > >() },
    { "p2332r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Matthew Bentley"), Hash("Ville Voutilainen") >(), wxS("Establishing stdhive as replacement name for the proposed stdcolony container") > >() },
    { "p2333r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Winter Library Evolution Poll Outcomes") > >() },
    { "p2334r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Melanie Blower") >(), wxS("Add support for preprocessing directives elifdef and elifndef") >, Rev< 1u, ArrHash< Hash("Melanie Blower") >(), wxS("Add support for preprocessing directives elifdef and elifndef") > >() },
    { "p2337r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicholas G Timmons") >(), wxS("Less constexpr for cmath") > >() },
    { "p2338r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Character primitives and the C library") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Character primitives and the C library") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Character primitives and the C library") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Character primitives and the C library") >, Rev< 4u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library Character primitives and the C library") > >() },
    { "p2339r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract violation handlers") > >() },
    { "p2340r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Clarifying the status of the C headers") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Clarifying the status of the C headers") > >() },
    { "p2342r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("For a Few Punctuators More") > >() },
    { "p2345r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean Parent") >(), wxS("Relaxing Requirements of MovedFrom Objects") > >() },
    { "p2347r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bruno Manganelli"), Hash("Corentin Jabot") >(), wxS("Argument type deduction for nontrailing parameter packs") >, Rev< 1u, ArrHash< Hash("Bruno Manganelli"), Hash("Corentin Jabot") >(), wxS("Argument type deduction for nontrailing parameter packs") >, Rev< 2u, ArrHash< Hash("Bruno Manganelli"), Hash("Corentin Jabot") >(), wxS("Argument type deduction for nontrailing parameter packs") > >() },
    { "p2348r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Whitespaces Wording Revamp") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Whitespaces Wording Revamp") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Whitespaces Wording Revamp") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Whitespaces Wording Revamp") > >() },
    { "p2350r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andreas Fertig") >(), wxS("constexpr class") >, Rev< 1u, ArrHash< Hash("Andreas Fertig") >(), wxS("constexpr class") >, Rev< 2u, ArrHash< Hash("Andreas Fertig") >(), wxS("constexpr class") > >() },
    { "p2351r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Mark all library static cast wrappers as nodiscard") > >() },
    { "p2352r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2353r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Rector") >(), wxS("Metaprograms and fragments are needed in commaseparated contexts") > >() },
    { "p2355r0", 2u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Postfix fold expressions") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Postfix fold expressions") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Postfix fold expressions") > >() },
    { "p2356r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Implementing Factory builder on top of P") > >() },
    { "p2358r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki"), Hash("Ga\\u0161per A\\u017Eman"), Hash("John McFarlane") >(), wxS("Defining Contracts") > >() },
    { "p2360r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Extend initstatement to allow aliasdeclaration") > >() },
    { "p2361r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Unevaluated string literals") >, Rev< 1u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated string literals") >, Rev< 2u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated strings") >, Rev< 3u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated strings") >, Rev< 4u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated strings") >, Rev< 5u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated strings") >, Rev< 6u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot") >(), wxS("Unevaluated strings") > >() },
    { "p2362r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Make obfuscating wide character literals illformed") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Remove nonencodable wide character literals and multicharacter wide character literals") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Remove nonencodable wide character literals and multicharacter wide character literals") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Peter Brett") >(), wxS("Remove nonencodable wide character literals and multicharacter wide character literals") > >() },
    { "p2363r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >, Rev< 1u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >, Rev< 2u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >, Rev< 3u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >, Rev< 4u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") >, Rev< 5u, ArrHash< Hash("Konstantin Boyarinov"), Hash("Ruslan Arutyunyan"), Hash("Sergey Vinogradov") >(), wxS("Extending associative containers with the remaining heterogeneous overloads") > >() },
    { "p2367r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Remove misuses of listinitialization from Clause ") > >() },
    { "p2368r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Spring Library Evolution Polls") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Spring Library Evolution Polls") > >() },
    { "p2370r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrei Nekrashevich"), Hash("Antony Polukhin") >(), wxS("Stacktrace from exception") >, Rev< 1u, ArrHash< Hash("Andrei Nekrashevich"), Hash("Antony Polukhin") >(), wxS("Stacktrace from exception") >, Rev< 2u, ArrHash< Hash("Andrei Nekrashevich"), Hash("Antony Polukhin") >(), wxS("Stacktrace from exception") > >() },
    { "p2372r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Fixing locale handling in chrono formatters") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Fixing locale handling in chrono formatters") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Fixing locale handling in chrono formatters") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Fixing locale handling in chrono formatters") > >() },
    { "p2374r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Sy Brand") >(), wxS("viewscartesianproduct") >, Rev< 1u, ArrHash< Hash("Sy Brand") >(), wxS("viewscartesianproduct") >, Rev< 2u, ArrHash< Hash("Micha\\u0142 Dominiak"), Hash("Sy Brand") >(), wxS("viewscartesianproduct") >, Rev< 3u, ArrHash< Hash("Micha\\u0142 Dominiak"), Hash("Sy Brand") >(), wxS("viewscartesianproduct") >, Rev< 4u, ArrHash< Hash("Micha\\u0142 Dominiak"), Hash("Sy Brand") >(), wxS("viewscartesianproduct") > >() },
    { "p2375r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Johan Lundberg") >(), wxS("Generalisation of nthelement to a range of nths") >, Rev< 1u, ArrHash< Hash("Johan Lundberg") >(), wxS("Generalisation of nthelement to a range of nths") > >() },
    { "p2376r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Johan Lundberg") >(), wxS("Comments on Simple Statistical Functions pr Contracts Exceptions and Special cases") > >() },
    { "p2377r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("nodiscard in the Standard Library Clause  Iterators library") > >() },
    { "p2378r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt"), Hash("Martin Uecker") >(), wxS("Properly define blocks as part of the grammar") >, Rev< 1u, ArrHash< Hash("Jens Gustedt"), Hash("Martin Uecker") >(), wxS("Properly define blocks as part of the grammar") > >() },
    { "p2380r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("referencewrapper Associations") >, Rev< 1u, ArrHash< Hash("Robert Leahy") >(), wxS("referencewrapper Associations") > >() },
    { "p2381r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Pattern Matching with Exception Handling") > >() },
    { "p2382r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal Finkel") >(), wxS("Presentation Slides for PR") > >() },
    { "p2384r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Spring Library Evolution Poll Outcomes") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Spring Library Evolution Poll Outcomes") > >() },
    { "p2385r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary June ") > >() },
    { "p2386r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the June  meeting") > >() },
    { "p2387r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Pipe support for userdefined range adaptors") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Pipe support for userdefined range adaptors") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Pipe support for userdefined range adaptors") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Pipe support for userdefined range adaptors") > >() },
    { "p2388r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Abortonly contract support") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Minimum Contract Support either Ignore or Checkandabort") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Minimum Contract Support either Ignore or Checkandabort") >, Rev< 3u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Minimum Contract Support either Noeval or Evalandabort") >, Rev< 4u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Minimum Contract Support either Noeval or Evalandabort") > >() },
    { "p2389r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("dextents Index Type Parameter") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Mark Hoemmen") >(), wxS("dextents Index Type Parameter") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Mark Hoemmen") >(), wxS("dextents Index Type Parameter") > >() },
    { "p2390r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Gustedt") >(), wxS("Add annotations for unreachable control flow") >, Rev< 1u, ArrHash< Hash("Jens Gustedt") >(), wxS("Add annotations for unreachable control flow") >, Rev< 2u, ArrHash< Hash("Jens Gustedt") >(), wxS("Add annotations for unreachable control flow") > >() },
    { "p2391r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("C Update Report") > >() },
    { "p2392r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Pattern matching using is and as") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Pattern matching using quotisquot and quotasquot") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Pattern matching using is and as") >, Rev< 3u, ArrHash< Hash("Herb Sutter") >(), wxS("Pattern matching using is and as") > >() },
    { "p2393r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Cleaning up integerclass types") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Cleaning up integerclass types") > >() },
    { "p2395r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2396r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Concurrency TS  fixes") >, Rev< 1u, ArrHash< Hash("David Goldblatt") >(), wxS("Concurrency TS  fixes") > >() },
    { "p2397r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2400r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Library Evolution Report") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Library Evolution Report  to ") >, Rev< 2u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Library Evolution Report  to ") >, Rev< 3u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Library Evolution Report  to ") > >() },
    { "p2401r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Add a conditional noexcept specification to stdexchange") > >() },
    { "p2402r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("A free function linear algebra interface based on the BLAS slides") > >() },
    { "p2403r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("Presentation on P  stdexecution") > >() },
    { "p2404r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Justin Bassett") >(), wxS("Relaxing equalitycomparablewiths and threewaycomparablewiths common reference requirements to") >, Rev< 1u, ArrHash< Hash("Justin Bassett") >(), wxS("Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith") >, Rev< 2u, ArrHash< Hash("Justin Bassett") >(), wxS("Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith") >, Rev< 3u, ArrHash< Hash("Justin Bassett") >(), wxS("Moveonly types for equalitycomparablewith totallyorderedwith and threewaycomparablewith") > >() },
    { "p2405r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Bassett") >(), wxS("nulloptt and nullptrt should both have operator and operator") > >() },
    { "p2406r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Fix countediterator interaction with input iterators") >, Rev< 1u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Fix countediterator interaction with input iterators") >, Rev< 2u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Add lazycountediterator") >, Rev< 3u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Add lazycountediterator") >, Rev< 4u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Add lazycountediterator") >, Rev< 5u, ArrHash< Hash("Yehezkel Bernat"), Hash("Yehuda Bernat") >(), wxS("Add lazycountediterator") > >() },
    { "p2407r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") >, Rev< 2u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") >, Rev< 3u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") >, Rev< 4u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") >, Rev< 5u, ArrHash< Hash("Ben Craig"), Hash("Emil Meissner") >(), wxS("Freestanding Library Partial Classes") > >() },
    { "p2408r0", 5u, RevList< Rev< 0u, ArrHash< Hash("David Olsen") >(), wxS("Ranges views as inputs to nonRanges algorithms") >, Rev< 1u, ArrHash< Hash("David Olsen") >(), wxS("Ranges views as inputs to nonRanges algorithms") >, Rev< 2u, ArrHash< Hash("David Olsen") >(), wxS("Ranges iterators as inputs to nonRanges algorithms") >, Rev< 3u, ArrHash< Hash("David Olsen") >(), wxS("Ranges iterators as inputs to nonRanges algorithms") >, Rev< 4u, ArrHash< Hash("David Olsen") >(), wxS("Ranges iterators as inputs to nonRanges algorithms") >, Rev< 5u, ArrHash< Hash("David Olsen") >(), wxS("Ranges iterators as inputs to nonRanges algorithms") > >() },
    { "p2409r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Requirements for Usage of C Modules at Bloomberg") > >() },
    { "p2410r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Typeandresource safety in modern C") > >() },
    { "p2411r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Thoughts on pattern matching") > >() },
    { "p2412r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Minimal module support for the standard library") > >() },
    { "p2413r0", 1u, RevList< Rev< 0u, ArrHash< Hash("L\\u00E9n\\u00E1rd Szolnoki") >(), wxS("Remove unsafe conversions of uniqueptr") >, Rev< 1u, ArrHash< Hash("L\\u00E9n\\u00E1rd Szolnoki") >(), wxS("Remove unsafe conversions of uniqueptr") > >() },
    { "p2414r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 1u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 2u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 3u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 4u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 5u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 6u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 7u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 8u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") >, Rev< 9u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions") > >() },
    { "p2415r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("What is a view") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("What is a view") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("What is a view") > >() },
    { "p2416r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Presentation of requirements in the standard library") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Presentation of requirements in the standard library") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Presentation of requirements in the standard library") > >() },
    { "p2417r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daniil Goncharov") >(), wxS("A more constexpr bitset") >, Rev< 1u, ArrHash< Hash("Daniil Goncharov") >(), wxS("A more constexpr bitset") >, Rev< 2u, ArrHash< Hash("Daniil Goncharov") >(), wxS("A more constexpr bitset") > >() },
    { "p2418r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Add support for stdgeneratorlike types to stdformat") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Add support for stdgeneratorlike types to stdformat") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Add support for stdgeneratorlike types to stdformat") > >() },
    { "p2419r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Peter Brett"), Hash("Victor Zverovich") >(), wxS("Clarify handling of encodings in localized formatting of chrono types") >, Rev< 1u, ArrHash< Hash("Peter Brett"), Hash("Victor Zverovich") >(), wxS("Clarify handling of encodings in localized formatting of chrono types") >, Rev< 2u, ArrHash< Hash("Peter Brett"), Hash("Victor Zverovich") >(), wxS("Clarify handling of encodings in localized formatting of chrono types") > >() },
    { "p2420r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Summer Library Evolution Polls") > >() },
    { "p2422r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Remove nodiscard annotations from the standard library specification") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Remove nodiscard annotations from the standard library specification") > >() },
    { "p2423r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Rajan Bhakta") >(), wxS("C Floating Point Study Group Liaison Report") > >() },
    { "p2424r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Abbreviated Parameters") > >() },
    { "p2425r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Expression Function Body") > >() },
    { "p2428r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Slides BSI issues with P") > >() },
    { "p2429r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sy Brand") >(), wxS("Concepts Error Messages for Humans") > >() },
    { "p2430r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Slides Partial success scenarios with P") > >() },
    { "p2431r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lewis Baker"), Hash("Micha\\u0142 Dominiak"), Hash("Michael Garland") >(), wxS("Presentation Plans for P Revision ") > >() },
    { "p2432r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fixing istreamview") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Fix istreamview Rev ") > >() },
    { "p2434r0", 4u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Nondeterministic pointer provenance") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Nondeterministic pointer provenance") >, Rev< 2u, ArrHash< Hash("S. Davis Herring") >(), wxS("Nondeterministic pointer provenance") >, Rev< 3u, ArrHash< Hash("S. Davis Herring") >(), wxS("Nondeterministic pointer provenance") >, Rev< 4u, ArrHash< Hash("S. Davis Herring") >(), wxS("Nondeterministic pointer provenance") > >() },
    { "p2435r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Summer Library Evolution Poll Outcomes") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Summer Library Evolution Poll Outcomes") > >() },
    { "p2436r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" September Library Evolution Polls") > >() },
    { "p2437r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("Support for warning") >, Rev< 1u, ArrHash< Hash("Aaron Ballman") >(), wxS("Support for warning") > >() },
    { "p2438r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Federico Kircheis"), Hash("Tomasz Kami\\u0144ski") >(), wxS("stdstringsubstr ") >, Rev< 1u, ArrHash< Hash("Federico Kircheis"), Hash("Tomasz Kami\\u0144ski") >(), wxS("stdstringsubstr ") >, Rev< 2u, ArrHash< Hash("Federico Kircheis"), Hash("Tomasz Kami\\u0144ski") >(), wxS("stdstringsubstr ") > >() },
    { "p2439r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("Slides for PR what is a view") > >() },
    { "p2440r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("rangesiota rangesshiftleft and rangesshiftright") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("rangesiota rangesshiftleft and rangesshiftright") > >() },
    { "p2441r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsjoinwith") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsjoinwith") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsjoinwith") > >() },
    { "p2442r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Windowing range adaptors viewschunk and viewsslide") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Windowing range adaptors viewschunk and viewsslide") > >() },
    { "p2443r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("viewschunkby") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("viewschunkby") > >() },
    { "p2444r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("The Asio asynchronous model") > >() },
    { "p2445r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("forwardlike") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("forwardlike") > >() },
    { "p2446r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsmove") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsallmove") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("viewsasrvalue") > >() },
    { "p2447r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Federico Kircheis") >(), wxS("stdspan and the missing constructor") >, Rev< 1u, ArrHash< Hash("Federico Kircheis") >(), wxS("stdspan and the missing constructor") >, Rev< 2u, ArrHash< Hash("Federico Kircheis") >(), wxS("stdspan and the missing constructor") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Federico Kircheis") >(), wxS("stdspan over an initializer list") >, Rev< 4u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Federico Kircheis") >(), wxS("stdspan over an initializer list") >, Rev< 5u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Federico Kircheis") >(), wxS("stdspan over an initializer list") >, Rev< 6u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Federico Kircheis") >(), wxS("stdspan over an initializer list") > >() },
    { "p2448r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Relaxing some constexpr restrictions") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Relaxing some constexpr restrictions") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Relaxing some constexpr restrictions") > >() },
    { "p2450r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary Oct ") > >() },
    { "p2451r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" September Library Evolution Poll Outcomes") > >() },
    { "p2452r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi") >(), wxS(" October Library Evolution and Concurrency Polls on Networking and Executors") > >() },
    { "p2453r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" October Library Evolution Poll Outcomes") > >() },
    { "p2454r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" November Library Evolution Polls") > >() },
    { "p2455r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" November Library Evolution Poll Outcomes") > >() },
    { "p2456r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" December Library Evolution Polls") > >() },
    { "p2457r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" December Library Evolution Poll Outcomes") > >() },
    { "p2458r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" January Library Evolution Polls") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" January Library Evolution Polls") > >() },
    { "p2459r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi") >(), wxS(" January Library Evolution Poll Outcomes") > >() },
    { "p2460r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Relax requirements on wchart to match existing practices") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Relax requirements on wchart to match existing practices") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Relax requirements on wchart to match existing practices") > >() },
    { "p2461r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Closurebased Syntax for Contracts") >, Rev< 1u, ArrHash< Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Closurebased Syntax for Contracts") > >() },
    { "p2462r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready issues for the October  meeting") > >() },
    { "p2463r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff") >(), wxS("Slides for Pr The Asio asynchronous model") > >() },
    { "p2464r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on networking and executors") > >() },
    { "p2465r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules std and stdall") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules std and stdcompat") >, Rev< 2u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules std and stdcompat") >, Rev< 3u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis"), Hash("Jonathan Wakely"), Hash("Stephan T. Lavavej") >(), wxS("Standard Library Modules std and stdcompat") > >() },
    { "p2466r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("The notes on contract annotations") > >() },
    { "p2467r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Support exclusive mode for fstreams") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Support exclusive mode for fstreams") > >() },
    { "p2468r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Bjarne Stroustrup"), Hash("Cameron DaCamara"), Hash("Daveed Vandevoorde"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jason Merrill"), Hash("Jonathan E. Caves"), Hash("Richard Smith"), Hash("Ville Voutilainen") >(), wxS("The Equality Operator You Are Looking For") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Bjarne Stroustrup"), Hash("Cameron DaCamara"), Hash("Daveed Vandevoorde"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jason Merrill"), Hash("Jonathan E. Caves"), Hash("Richard Smith"), Hash("Ville Voutilainen") >(), wxS("The Equality Operator You Are Looking For") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Bjarne Stroustrup"), Hash("Cameron DaCamara"), Hash("Daveed Vandevoorde"), Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Jason Merrill"), Hash("Jonathan E. Caves"), Hash("Richard Smith"), Hash("Ville Voutilainen") >(), wxS("The Equality Operator You Are Looking For") > >() },
    { "p2469r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("Jamie Allsop"), Hash("Klemens Morgenstern"), Hash("Richard Hodges"), Hash("Vinnie Falco") >(), wxS("Response to P The Networking TS is baked P SenderReceiver is not") > >() },
    { "p2470r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Slides for presentation of PR stdexecution senderreceiver") > >() },
    { "p2471r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("NetTS ASIO and Sender Library Design Comparison") >, Rev< 1u, ArrHash< Hash("Kirk Shoop") >(), wxS("NetTS ASIO and Sender Library Design Comparison") > >() },
    { "p2472r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("makefunctionref A More Functional functionref") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("make functionref more functional") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Zhihao Yuan") >(), wxS("make functionref more functional") >, Rev< 3u, ArrHash< Hash("Jarrad J. Waterloo"), Hash("Zhihao Yuan") >(), wxS("make functionref more functional") > >() },
    { "p2473r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Distributing C Module Libraries") >, Rev< 1u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Distributing C Module Libraries") > >() },
    { "p2474r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("viewsrepeat") >, Rev< 1u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("viewsrepeat") >, Rev< 2u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("viewsrepeat") > >() },
    { "p2475r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2477r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow programmer to control and detect coroutine elision by static constexpr bool shouldelide and") >, Rev< 1u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow programmer to control and detect coroutine elision by static constexpr bool mustelide and") >, Rev< 2u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow programmer to control and detect coroutine elision") >, Rev< 3u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow programmers to control coroutine elision") > >() },
    { "p2478r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hubert S.K. Tong"), Hash("Rajan Bhakta") >(), wxS("Threadlocal for better C interoperability with C") > >() },
    { "p2479r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Slides for P") > >() },
    { "p2480r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christopher Kohlhoff"), Hash("Jamie Allsop"), Hash("Klemens Morgenstern") >(), wxS("Response to P NetTS Asio and Sender library design comparison  corrected and expanded") > >() },
    { "p2481r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Forwarding reference to specific typetemplate") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Forwarding reference to specific typetemplate") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Forwarding reference to specific typetemplate") > >() },
    { "p2483r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hui Xie") >(), wxS("Support Noncopyable Types for singleview") > >() },
    { "p2484r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith") >(), wxS("Extending class types as nontype template parameters") > >() },
    { "p2485r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Do not add valueexists and valueor to C") > >() },
    { "p2486r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("Structured naming for function object and CPO values") >, Rev< 1u, ArrHash< Hash("Kirk Shoop") >(), wxS("Structured naming for function object and CPO values") > >() },
    { "p2487r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Attributelike syntax for contract annotations") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Is attributelike syntax adequate for contract annotations") > >() },
    { "p2489r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Library Evolution Plan for Completing C") > >() },
    { "p2490r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)") >(), wxS("Zerooverhead exception stacktraces") >, Rev< 3u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)") >(), wxS("Zerooverhead exception stacktraces") > >() },
    { "p2491r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Text encodings followup") > >() },
    { "p2492r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Attending C Standards Committee Meetings During a Pandemic") > >() },
    { "p2493r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Missing feature test macros for C core papers") > >() },
    { "p2494r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Relaxing range adaptors to allow for move only types") >, Rev< 1u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Relaxing range adaptors to allow for move only types") >, Rev< 2u, ArrHash< Hash("Micha\\u0142 Dominiak") >(), wxS("Relaxing range adaptors to allow for move only types") > >() },
    { "p2495r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing stringstreams with stringview") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing stringstreams with stringview") >, Rev< 2u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing stringstreams with stringview") >, Rev< 3u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing stringstreams with stringview") > >() },
    { "p2497r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Testing for success or failure of charconv functions") > >() },
    { "p2498r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Brett") >(), wxS("Forward compatibility of textencoding with additional encoding registries") >, Rev< 1u, ArrHash< Hash("Peter Brett") >(), wxS("Forward compatibility of textencoding with additional encoding registries") > >() },
    { "p2499r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("stringview range constructor should be explicit") > >() },
    { "p2500r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("C parallel algorithms and P") >, Rev< 1u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel algorithms and P") >, Rev< 2u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel algorithms and P") > >() },
    { "p2501r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Undo the rename of viewsmove and viewsasconst") > >() },
    { "p2502r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("stdgenerator Synchronous Coroutine Generator for Ranges") >, Rev< 1u, ArrHash< Hash("Casey Carter") >(), wxS("stdgenerator Synchronous Coroutine Generator for Ranges") >, Rev< 2u, ArrHash< Hash("Casey Carter") >(), wxS("stdgenerator Synchronous Coroutine Generator for Ranges") > >() },
    { "p2504r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lucian Radu Teodorescu") >(), wxS("Computations as a global solution to concurrency") > >() },
    { "p2505r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") >, Rev< 1u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") >, Rev< 2u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") >, Rev< 3u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") >, Rev< 4u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") >, Rev< 5u, ArrHash< Hash("Jeff Garland") >(), wxS("Monadic Functions for stdexpected") > >() },
    { "p2506r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Casey Carter") >(), wxS("stdlazy a coroutine for deferred execution") > >() },
    { "p2507r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Brett") >(), wxS("Only assume conditionalexpressions") >, Rev< 1u, ArrHash< Hash("Peter Brett") >(), wxS("Limit assume to conditionalexpressions") > >() },
    { "p2508r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Exposing stdbasicformatstring") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Exposing stdbasicformatstring") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Exposing stdbasicformatstring") > >() },
    { "p2509r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect valuepreserving conversions") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect valuepreserving conversions") > >() },
    { "p2510r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Mark de Wever") >(), wxS("Formatting pointers") >, Rev< 1u, ArrHash< Hash("Mark de Wever") >(), wxS("Formatting pointers") >, Rev< 2u, ArrHash< Hash("Mark de Wever") >(), wxS("Formatting pointers") >, Rev< 3u, ArrHash< Hash("Mark de Wever") >(), wxS("Formatting pointers") > >() },
    { "p2511r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Beyond operator NTTP callables in typeerased call wrappers") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Beyond operator NTTP callables in typeerased call wrappers") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Beyond operator NTTP callables in typeerased call wrappers") > >() },
    { "p2512r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2513r0", 4u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Tom Honermann") >(), wxS("chart Compatibility and Portability Fixes") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Tom Honermann") >(), wxS("chart Compatibility and Portability Fix") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Tom Honermann") >(), wxS("chart Compatibility and Portability Fix") >, Rev< 3u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Tom Honermann") >(), wxS("chart Compatibility and Portability Fix") >, Rev< 4u, ArrHash< Hash("JeanHeyd Meneide"), Hash("Tom Honermann") >(), wxS("chart Compatibility and Portability Fix") > >() },
    { "p2514r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Isabella Muerte"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("stdbreakpoint") > >() },
    { "p2515r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("stdisdebuggerpresent") > >() },
    { "p2516r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("stringview is implicitly convertible from what") > >() },
    { "p2517r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("Add a conditional noexcept specification to stdapply") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("Add a conditional noexcept specification to stdapply") > >() },
    { "p2520r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("moveiterator should be a random access iterator") > >() },
    { "p2521r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract support  Working Paper") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract support  Working Paper") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract support  Working Paper") >, Rev< 3u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Bronek Kozicki"), Hash("Caleb Sunstrum"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Ryan McDougall") >(), wxS("Contract support  Record of SG consensus") >, Rev< 4u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract support  Record of SG consensus") >, Rev< 5u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract support  Record of SG consensus") > >() },
    { "p2523r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Bentley") >(), wxS("Request for reinclusion of stdhive proposal in C") > >() },
    { "p2524r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinanceSimulation ") > >() },
    { "p2525r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning Meeting Minutes ") > >() },
    { "p2527r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alex Christensen") >(), wxS("stdvariantalternativeindex and stdvariantalternativeindexv") >, Rev< 1u, ArrHash< Hash("Alex Christensen") >(), wxS("stdvariantalternativeindex and stdtupleelementindex") >, Rev< 2u, ArrHash< Hash("Alex Christensen") >(), wxS("stdvariantalternativeindex and stdtupleelementindex") >, Rev< 3u, ArrHash< Hash("Alex Christensen") >(), wxS("stdvariantalternativeindex and stdtupleelementindex") > >() },
    { "p2528r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Reini Urban") >(), wxS("CC Identifier Security using Unicode Standard Annex ") > >() },
    { "p2529r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mathias Stearn") >(), wxS("generator should have T referencetype") > >() },
    { "p2530r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Why Hazard Pointers should be in C") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Why Hazard Pointers should be in C") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Why Hazard Pointers should be in C") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Frank Birbacher"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Maged M. Michael"), Hash("Mathias Stearn"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointers for C") > >() },
    { "p2531r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary Feb ") > >() },
    { "p2532r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Removing exceptionptr from the Receiver Concepts") > >() },
    { "p2533r0", 0u, RevList< Rev< 0u, ArrHash< Hash("William M. (Mike) Miller") >(), wxS("Core Language Working Group ready Issues for the February  meeting") > >() },
    { "p2534r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides functionref in the wild PR presentation") > >() },
    { "p2535r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Lustig"), Hash("Olivier Girioux") >(), wxS("Message fences") > >() },
    { "p2536r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Olga Arkhipova") >(), wxS("Distributing C Module Libraries with dependencies json files") > >() },
    { "p2537r0", 2u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Relax vastart Requirements to Match C") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Relax vastart Requirements to Match C") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("Relax vastart Requirements to Match C") > >() },
    { "p2538r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("ADLproof stdprojected") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Casey Carter") >(), wxS("ADLproof stdprojected") > >() },
    { "p2539r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Should the output of stdprint to a terminal be synchronized with the underlying stream") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Should the output of stdprint to a terminal be synchronized with the underlying stream") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Should the output of stdprint to a terminal be synchronized with the underlying stream") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Should the output of stdprint to a terminal be synchronized with the underlying stream") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Should the output of stdprint to a terminal be synchronized with the underlying stream") > >() },
    { "p2540r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Empty Product for certain Views") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Empty Product for certain Views") > >() },
    { "p2541r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Consider renaming removequals") > >() },
    { "p2542r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 1u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 2u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 3u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 4u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 5u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 6u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 7u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") >, Rev< 8u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("viewsconcat") > >() },
    { "p2544r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Neumann") >(), wxS("C exceptions are becoming more and more problematic") > >() },
    { "p2545r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Why RCU Should be in C") >, Rev< 1u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Why RCU Should be in C") >, Rev< 2u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Why RCU Should be in C") >, Rev< 3u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Why RCU Should be in C") >, Rev< 4u, ArrHash< Hash("Andrew Hunter"), Hash("Arthur O'Dwyer"), Hash("D. S. Hollman"), Hash("David Goldblatt"), Hash("Erik Rigtorp"), Hash("Frank Birbacher"), Hash("Geoffrey Romer"), Hash("Hans J. Boehm"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney"), Hash("Tomasz Kami\\u0144ski") >(), wxS("ReadCopy Update RCU") > >() },
    { "p2546r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") >, Rev< 2u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") >, Rev< 3u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") >, Rev< 4u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") >, Rev< 5u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Debugging Support") > >() },
    { "p2547r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Lewis Baker") >(), wxS("Language support for customisable functions") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Lewis Baker") >(), wxS("Language support for customisable functions") > >() },
    { "p2548r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 2u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 3u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 4u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 5u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") >, Rev< 6u, ArrHash< Hash("Michael Florian Hava") >(), wxS("copyablefunction") > >() },
    { "p2549r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Yihe Li") >(), wxS("stdunexpected should have error as member accessor") >, Rev< 1u, ArrHash< Hash("Yihe Li") >(), wxS("stdunexpected should have error as member accessor") > >() },
    { "p2550r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("rangescopy should say outputiterator somewhere") > >() },
    { "p2551r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely"), Hash("Matthias Kretz") >(), wxS("Clarify intent of P numeric traits") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely"), Hash("Matthias Kretz") >(), wxS("Clarify intent of P numeric traits") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely"), Hash("Matthias Kretz") >(), wxS("Clarify intent of P numeric traits") > >() },
    { "p2552r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("On the ignorability of standard attributes") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("On the ignorability of standard attributes") >, Rev< 2u, ArrHash< Hash("Timur Doumler") >(), wxS("On the ignorability of standard attributes") >, Rev< 3u, ArrHash< Hash("Timur Doumler") >(), wxS("On the ignorability of standard attributes") > >() },
    { "p2553r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("Make mdspan sizetype controllable") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("Make mdspan sizetype controllable") > >() },
    { "p2554r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("K. R. Walker"), Hash("Mark Hoemmen") >(), wxS("CArray Interoperability of MDSpan") > >() },
    { "p2555r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Naming improvements for stdexecution") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Naming improvements for stdexecution") > >() },
    { "p2557r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2558r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Add   and  to the basic character set") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Add   and  to the basic character set") >, Rev< 2u, ArrHash< Hash("Steve Downey") >(), wxS("Add   and  to the basic character set") > >() },
    { "p2559r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Plan for Concurrency Technical Specification Version ") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("Plan for Concurrency Technical Specification Version ") > >() },
    { "p2560r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mat\\u00FA\\u0161 Chochl\\u00EDk") >(), wxS("Comparing value and typebased reflection") > >() },
    { "p2561r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("operator") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("An error propagation operator") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("A control flow operator") > >() },
    { "p2562r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("constexpr Stable Sorting") >, Rev< 1u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("constexpr Stable Sorting") > >() },
    { "p2564r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("consteval needs to propagate up") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("consteval needs to propagate up") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("consteval needs to propagate up") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("consteval needs to propagate up") > >() },
    { "p2565r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bret Brown") >(), wxS("Supporting UserDefined Attributes") > >() },
    { "p2568r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of stdmapatptr") > >() },
    { "p2569r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Fred Tydeman") >(), wxS("HASSUBNORM implies what") > >() },
    { "p2570r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("On side effects in contract annotations") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract predicates that are not predicates") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract predicates that are not predicates") > >() },
    { "p2572r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("stdformat fill character allowances") >, Rev< 1u, ArrHash< Hash("Tom Honermann") >(), wxS("stdformat fill character allowances") > >() },
    { "p2573r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Yihe Li") >(), wxS(" deleteshould have a reason") >, Rev< 1u, ArrHash< Hash("Yihe Li") >(), wxS(" deleteshould have a reason") >, Rev< 2u, ArrHash< Hash("Yihe Li") >(), wxS(" deleteshould have a reason") > >() },
    { "p2574r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Polls") > >() },
    { "p2575r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p2576r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Gilding"), Hash("Jens Gustedt") >(), wxS("The constexpr specifier for object definitions") > >() },
    { "p2577r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("C Modules Discovery in Prebuilt Library Releases") >, Rev< 1u, ArrHash< Hash("Daniel Ruoso") >(), wxS("C Modules Discovery in Prebuilt Library Releases") >, Rev< 2u, ArrHash< Hash("Daniel Ruoso") >(), wxS("C Modules Discovery in Prebuilt Library Releases") > >() },
    { "p2579r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Mitigation strategies for P Changing scope for lambda trailingreturntype") > >() },
    { "p2580r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Paolo Di Giglio") >(), wxS("Tuple protocol for Cstyle arrays TN") > >() },
    { "p2581r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Specifying the Interoperability of Binary Module Interface Files") >, Rev< 1u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Specifying the Interoperability of Built Module Interface Files") >, Rev< 2u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Specifying the Interoperability of Built Module Interface Files") > >() },
    { "p2582r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Wording for class template argument deduction from inherited constructors") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Wording for class template argument deduction from inherited constructors") > >() },
    { "p2584r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("A More Composable fromchars") > >() },
    { "p2585r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Improving default container formatting") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Improving default container formatting") > >() },
    { "p2586r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("Standard Secure Networking") > >() },
    { "p2587r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("tostring or not tostring") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("tostring or not tostring") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("tostring or not tostring") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("tostring or not tostring") > >() },
    { "p2588r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Eric A Niebler"), Hash("Gonzalo Brito Gadeschi"), Hash("Thomas W Rodgers") >(), wxS("Relax stdbarrier phase completion step guarantees") >, Rev< 1u, ArrHash< Hash("Anthony Williams"), Hash("Eric A Niebler"), Hash("Gonzalo Brito Gadeschi"), Hash("Thomas W Rodgers") >(), wxS("Relax stdbarrier phase completion step guarantees") >, Rev< 2u, ArrHash< Hash("Anthony Williams"), Hash("Eric A Niebler"), Hash("Gonzalo Brito Gadeschi"), Hash("Thomas W Rodgers") >(), wxS("Relax stdbarrier phase completion step guarantees") >, Rev< 3u, ArrHash< Hash("Anthony Williams"), Hash("Eric A Niebler"), Hash("Gonzalo Brito Gadeschi"), Hash("Thomas W Rodgers") >(), wxS("Relax stdbarrier phase completion step guarantees") > >() },
    { "p2589r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("static operator") >, Rev< 1u, ArrHash< Hash("Nevin Liber") >(), wxS("static operator") > >() },
    { "p2590r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Explicit lifetime management") >, Rev< 1u, ArrHash< Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Explicit lifetime management") >, Rev< 2u, ArrHash< Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Explicit lifetime management") > >() },
    { "p2591r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") >, Rev< 3u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") >, Rev< 4u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") >, Rev< 5u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Concatenation of strings and string views") > >() },
    { "p2592r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Hashing support for stdchrono value classes") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Hashing support for stdchrono value classes") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Hashing support for stdchrono value classes") >, Rev< 3u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Hashing support for stdchrono value classes") > >() },
    { "p2593r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Allowing staticassertfalse") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Allowing staticassertfalse") > >() },
    { "p2594r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Slides Allow programmer to control and detect coroutine elision PR Presentation") >, Rev< 1u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Slides Allow programmer to control coroutine elision PR Presentation") > >() },
    { "p2596r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Improve stdhivereshape") > >() },
    { "p2598r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Changing scope for lambda trailingreturntype P should not be a DR") > >() },
    { "p2599r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("mdspansizetype should be indextype") >, Rev< 1u, ArrHash< Hash("Nevin Liber") >(), wxS("mdspansizetype should be indextype") >, Rev< 2u, ArrHash< Hash("Nevin Liber") >(), wxS("index type  sizetype in mdspan") > >() },
    { "p2600r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("A minimal ADL restriction to avoid illformed template instantiation") > >() },
    { "p2601r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("To make redundant empty angle brackets optional for class template argument lists") >, Rev< 1u, ArrHash< Hash("Justin Cooke") >(), wxS("Make redundant empty angle brackets optional") > >() },
    { "p2602r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Poison Pills are Too Toxic") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Poison Pills are Too Toxic") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Poison Pills are Too Toxic") > >() },
    { "p2603r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("member function pointer to function pointer") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("member function pointer to function pointer") > >() },
    { "p2604r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott") >(), wxS("MDSPAN rename pointer and contiguous") > >() },
    { "p2605r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2607r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("Let alignas specify minimum alignment") > >() },
    { "p2608r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("Allow multiple initstatements") > >() },
    { "p2609r0", 3u, RevList< Rev< 0u, ArrHash< Hash("John Eivind Helset") >(), wxS("Relaxing Ranges Just A Smidge") >, Rev< 1u, ArrHash< Hash("John Eivind Helset") >(), wxS("Relaxing Ranges Just A Smidge") >, Rev< 2u, ArrHash< Hash("John Eivind Helset") >(), wxS("Relaxing Ranges Just A Smidge") >, Rev< 3u, ArrHash< Hash("John Eivind Helset") >(), wxS("Relaxing Ranges Just A Smidge") > >() },
    { "p2610r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Polls") > >() },
    { "p2611r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p2613r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Yihe Li") >(), wxS("Add the missing empty to mdspan") >, Rev< 1u, ArrHash< Hash("Yihe Li") >(), wxS("Add the missing empty to mdspan") > >() },
    { "p2614r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Deprecate numericlimitshasdenorm") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Deprecate numericlimitshasdenorm") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Deprecate numericlimitshasdenorm") > >() },
    { "p2615r0", 1u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Meaningful exports") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Meaningful exports") > >() },
    { "p2616r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Making stdatomic notificationwait operations usable in more situations") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("Making stdatomic notificationwait operations usable in more situations") >, Rev< 2u, ArrHash< Hash("Lewis Baker") >(), wxS("Making stdatomic notificationwait operations usable in more situations") >, Rev< 3u, ArrHash< Hash("Lewis Baker") >(), wxS("Making stdatomic notificationwait operations usable in more situations") >, Rev< 4u, ArrHash< Hash("Lewis Baker") >(), wxS("Making stdatomic notificationwait operations usable in more situations") > >() },
    { "p2617r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Responses to NB comments on DTS  Extensions to C for Transactional Memory Version ") > >() },
    { "p2618r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Issues to be moved in Virtual Plenary Jul ") > >() },
    { "p2620r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Lifting artificial restriction on universal character names") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Lifting artificial restriction on universal character names") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Improve the wording for Universal Character Names in identifiers") > >() },
    { "p2621r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("UB In my Lexer") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("UB In my Lexer") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("UB In my Lexer") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("UB In my Lexer") > >() },
    { "p2622r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the July  meeting") > >() },
    { "p2623r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("implicit constant initialization") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("implicit constant initialization") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("implicit constant initialization") > >() },
    { "p2624r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("Make operations on bools more portable") > >() },
    { "p2625r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Life without operator PR presentation") > >() },
    { "p2626r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("charNt incremental adoption Casting pointers of UTF character types") > >() },
    { "p2627r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Virtual Meeting Record of Discussion") > >() },
    { "p2628r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Extend barrier APIs with memoryorder") > >() },
    { "p2629r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("barrier tokenless split arrivewait") > >() },
    { "p2630r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen") >(), wxS("Submdspan") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen") >(), wxS("Submdspan") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("Submdspan") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("Submdspan") >, Rev< 4u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("Submdspan") > >() },
    { "p2631r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bryce Adelstein Lelbach"), Hash("Jonathan Wakely") >(), wxS("Publish TS Library Fundamentals v Now") > >() },
    { "p2632r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Pablo Halpern") >(), wxS("A plan for better template meta programming facilities in C") > >() },
    { "p2633r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("threadlocalinherit Enhancing threadlocal storage") > >() },
    { "p2634r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("Allow qualifiers in constructor declarations") > >() },
    { "p2635r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Justin Cooke") >(), wxS("Enhancing the break statement") > >() },
    { "p2636r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("References to ranges should always be viewable") >, Rev< 1u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("References to ranges should always be viewable") >, Rev< 2u, ArrHash< Hash("Hannes Hauswedell") >(), wxS("References to ranges should always be viewable") > >() },
    { "p2637r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Member visit and apply") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Member visit") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Member visit") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Member visit") > >() },
    { "p2638r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Intels response to PR for stdsimd parallelism in TS ") > >() },
    { "p2639r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Torben Thaysen") >(), wxS("Static Allocations") > >() },
    { "p2640r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Innerscope Namespace Entities Exported or Not") >, Rev< 1u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Innerscope Namespace Entities Exported or Not") >, Rev< 2u, ArrHash< Hash("Nathan Sidwell") >(), wxS("Modules Innerscope Namespace Entities Exported or Not") > >() },
    { "p2641r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Checking if a union alternative is active") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Checking if a union alternative is active") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Checking if a union alternative is active") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Checking if a union alternative is active") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("Checking if a union alternative is active") > >() },
    { "p2642r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen") >(), wxS("Padded mdspan layouts") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen") >(), wxS("Padded mdspan layouts") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen") >(), wxS("Padded mdspan layouts") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Padded mdspan layouts") >, Rev< 4u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Padded mdspan layouts") >, Rev< 5u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Padded mdspan layouts") >, Rev< 6u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Jiaming Yuan"), Hash("Malte F\\u00F6rster"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Padded mdspan layouts") > >() },
    { "p2643r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi"), Hash("Olivier Girioux"), Hash("Thomas W Rodgers") >(), wxS("Improving C concurrency features") >, Rev< 1u, ArrHash< Hash("Gonzalo Brito Gadeschi"), Hash("Olivier Girioux"), Hash("Thomas W Rodgers") >(), wxS("Improving C concurrency features") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi"), Hash("Olivier Girioux"), Hash("Thomas W Rodgers") >(), wxS("Improving C concurrency features") > >() },
    { "p2644r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Get Fix of Broken Rangebased for Loop Finally Done") >, Rev< 1u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi"), Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Herb Sutter"), Hash("Nicolai Josuttis"), Hash("Peter Sommerlad"), Hash("Titus Winters"), Hash("Victor Zverovich") >(), wxS("Final Fix of Broken Range based for Loop Rev ") > >() },
    { "p2645r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("pathview a design that took a wrong turn") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("pathview a design that took a wrong turn") > >() },
    { "p2646r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne"), Hash("Parsa Amini") >(), wxS("Explicit Assumption Syntax Can Reduce Run Time") > >() },
    { "p2647r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Permitting static constexpr variables in constexpr functions") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan Wakely") >(), wxS("Permitting static constexpr variables in constexpr functions") > >() },
    { "p2648r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Polls") > >() },
    { "p2649r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p2650r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS(" Library Evolution Polls") > >() },
    { "p2652r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Disallow user specialization of allocatortraits") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Disallow user specialization of allocatortraits") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("Disallow user specialization of allocatortraits") > >() },
    { "p2653r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Update Annex E based on Unicode  UAX ") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("Update Annex E based on Unicode  UAX ") > >() },
    { "p2654r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Modules and Macros") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Modules and Macros") > >() },
    { "p2655r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("commonreferencet of referencewrapper Should Be a Reference Type") >, Rev< 1u, ArrHash< Hash("Hui Xie"), Hash("S. Levent Yilmaz") >(), wxS("commonreferencet of referencewrapper Should Be a Reference Type") >, Rev< 2u, ArrHash< Hash("Hui Xie"), Hash("R. Tim Song"), Hash("S. Levent Yilmaz") >(), wxS("commonreferencet of referencewrapper Should Be a Reference Type") >, Rev< 3u, ArrHash< Hash("Hui Xie"), Hash("R. Tim Song"), Hash("S. Levent Yilmaz") >(), wxS("commonreferencet of referencewrapper Should Be a Reference Type") > >() },
    { "p2656r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Ecosystem International Standard") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Ecosystem International Standard") >, Rev< 2u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Ecosystem International Standard") >, Rev< 3u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Ecosystem International Standard") >, Rev< 4u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN C Ecosystem International Standard") > >() },
    { "p2657r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("C is the next C") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("C is the next C") > >() },
    { "p2658r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("temporary storage class specifiers") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("temporary storage class specifiers") > >() },
    { "p2659r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("A Proposal to Publish a Technical Specification for Contracts") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Brian Bi") >(), wxS("A Proposal to Publish a Technical Specification for Contracts") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Brian Bi") >(), wxS("A Proposal to Publish a Technical Specification for Contracts") > >() },
    { "p2660r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Proposed Contracts TS") > >() },
    { "p2661r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Miscellaneous amendments to the Contracts TS") > >() },
    { "p2662r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Corentin Jabot"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Pablo Halpern") >(), wxS("Pack Indexing") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Pablo Halpern") >(), wxS("Pack Indexing") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Pablo Halpern") >(), wxS("Pack Indexing") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Pablo Halpern") >(), wxS("Pack Indexing") > >() },
    { "p2663r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 1u, ArrHash< Hash("Daniel Towner") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 3u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 4u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 5u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 6u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") >, Rev< 7u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to support interleaved complex values in stdsimd") > >() },
    { "p2664r0", 11u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 1u, ArrHash< Hash("Daniel Towner") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 3u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 4u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 5u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 6u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 7u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 8u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 9u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 10u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") >, Rev< 11u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with permutation API") > >() },
    { "p2665r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Allow calling overload sets containing T constT") > >() },
    { "p2666r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Last use optimization") > >() },
    { "p2667r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Support for static and SBO vectors by allocators") > >() },
    { "p2668r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Role based parameter passing") > >() },
    { "p2669r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Deprecate changing kind of names in class template specializations") > >() },
    { "p2670r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Nontransient constexpr allocation") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Nontransient constexpr allocation") > >() },
    { "p2671r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Syntax choices for generalized pack declaration and usage") > >() },
    { "p2672r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Exploring the Design Space for a Pipeline Operator") > >() },
    { "p2673r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Luis Caro Campos") >(), wxS("Common Description Format for C Libraries and Packages") > >() },
    { "p2674r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler"), Hash("Vittorio Romeo") >(), wxS("A trait for implicit lifetime types") >, Rev< 1u, ArrHash< Hash("Timur Doumler"), Hash("Vittorio Romeo") >(), wxS("A trait for implicit lifetime types") > >() },
    { "p2675r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("LWG The Paper formats width estimation is too approximate and not forward compatible") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("LWG The Paper formats width estimation is too approximate and not forward compatible") > >() },
    { "p2676r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Abrahams"), Hash("David Sankel"), Hash("Dimitri Racordon"), Hash("Sean Parent") >(), wxS("The Val Object Model") > >() },
    { "p2677r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Reconsidering concepts inplace syntax") >, Rev< 2u, ArrHash< Hash("Michael Spertus") >(), wxS("Reconsidering concepts inplace syntax") > >() },
    { "p2678r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2679r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Richard Smith"), Hash("Timur Doumler") >(), wxS("Fixing stdstartlifetimeas for arrays") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Arthur O'Dwyer"), Hash("Richard Smith"), Hash("Robert Leahy"), Hash("Timur Doumler") >(), wxS("Fixing stdstartlifetimeas and stdstartlifetimeasarray") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Arthur O'Dwyer"), Hash("Richard Smith"), Hash("Robert Leahy"), Hash("Timur Doumler") >(), wxS("Fixing stdstartlifetimeas and stdstartlifetimeasarray") > >() },
    { "p2680r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Contracts for C Prioritizing Safety") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Contracts for C Prioritizing Safety") > >() },
    { "p2681r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong"), Hash("Richard Dosselmann") >(), wxS("More Stats Functions") >, Rev< 1u, ArrHash< Hash("Richard Dosselmann") >(), wxS("More Basic Statistics") > >() },
    { "p2682r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Transactional Memory TS Editors Report") > >() },
    { "p2683r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes ") > >() },
    { "p2684r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning Virtual Meeting Minutes ") > >() },
    { "p2685r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Joshua Berne") >(), wxS("Language Support For Scoped Allocators") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Joshua Berne") >(), wxS("Language Support For Scoped Objects") > >() },
    { "p2686r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Updated wording and implementation experience for P constexpr structured bindings") >, Rev< 1u, ArrHash< Hash("Brian Bi"), Hash("Corentin Jabot") >(), wxS("constexpr structured bindings and references to constexpr variables") >, Rev< 2u, ArrHash< Hash("Brian Bi"), Hash("Corentin Jabot") >(), wxS("constexpr structured bindings and references to constexpr variables") >, Rev< 3u, ArrHash< Hash("Brian Bi"), Hash("Corentin Jabot") >(), wxS("constexpr structured bindings and references to constexpr variables") >, Rev< 4u, ArrHash< Hash("Brian Bi"), Hash("Corentin Jabot") >(), wxS("constexpr structured bindings and references to constexpr variables") >, Rev< 5u, ArrHash< Hash("Brian Bi"), Hash("Corentin Jabot") >(), wxS("constexpr structured bindings and references to constexpr variables") > >() },
    { "p2687r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Design Alternatives for TypeandResource Safe C") > >() },
    { "p2688r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching Discussion for Kona ") >, Rev< 1u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching match Expression") >, Rev< 2u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching match Expression") >, Rev< 3u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching match Expression") >, Rev< 4u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching match Expression") >, Rev< 5u, ArrHash< Hash("Michael Park") >(), wxS("Pattern Matching match Expression") > >() },
    { "p2689r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen") >(), wxS("atomicaccessor") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("atomicaccessor") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("atomicaccessor") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Daniel Sunderland"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("Atomic Refs Bound to Memory Orderings  Atomic Accessors") > >() },
    { "p2690r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("C parallel algorithms and P") >, Rev< 1u, ArrHash< Hash("Ruslan Arutyunyan") >(), wxS("Presentation for C parallel algorithms and P") > >() },
    { "p2691r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Herb Sutter"), Hash("Michael Spencer") >(), wxS("Allow referencing inline functions with internal linkage from outside their defining header unit") > >() },
    { "p2692r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Generic Programming is just Programming") > >() },
    { "p2693r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Formatting threadid and stacktrace") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Victor Zverovich") >(), wxS("Formatting threadid and stacktrace") > >() },
    { "p2695r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer"), Hash("Timur Doumler") >(), wxS("A proposed plan for contracts in C") >, Rev< 1u, ArrHash< Hash("John H. Spicer"), Hash("Timur Doumler") >(), wxS("A proposed plan for contracts in C") > >() },
    { "p2696r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("Introduce CppSwappable as additional convenience requirements") > >() },
    { "p2697r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing bitset with stringview") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Interfacing bitset with stringview") > >() },
    { "p2698r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Unconditional termination is a serious problem") > >() },
    { "p2700r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Brian Bi"), Hash("Herb Sutter"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Oliver J. Rosten"), Hash("Peter Brett"), Hash("Timur Doumler") >(), wxS("Questions on P Contracts for C Prioritizing Safety") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Brian Bi"), Hash("Herb Sutter"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Oliver J. Rosten"), Hash("Peter Brett"), Hash("Timur Doumler") >(), wxS("Questions on P Contracts for C Prioritizing Safety") > >() },
    { "p2701r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Translating Linker Input Files to Module Metadata Files") > >() },
    { "p2702r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Specifying Importable Headers") > >() },
    { "p2703r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Kona Nov ") > >() },
    { "p2704r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Immediate Issues to be moved in Kona Nov ") > >() },
    { "p2705r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Library Fundamentals TS Issues to be moved in Kona Nov ") > >() },
    { "p2706r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jason Merrill") >(), wxS("Drafting for US  Redundant specification for defaulted functions") > >() },
    { "p2708r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("No Future Fundamentals TSes") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi"), Hash("Nevin Liber") >(), wxS("No Future Fundamentals TSes") > >() },
    { "p2709r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the November  meeting") > >() },
    { "p2710r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group NB comment resolutions for the November  meeting") > >() },
    { "p2711r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Making multiparam and other converting constructors of views explicit") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Making multiparam constructors of views explicit") > >() },
    { "p2712r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Classification of ContractChecking Predicates") > >() },
    { "p2713r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Escaping improvements in stdformat") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Escaping improvements in stdformat") > >() },
    { "p2714r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski"), Hash("Zhihao Yuan") >(), wxS("Bind front and back to NTTP callables") >, Rev< 1u, ArrHash< Hash("Tomasz Kami\\u0144ski"), Hash("Zhihao Yuan") >(), wxS("Bind front and back to NTTP callables") > >() },
    { "p2717r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 2u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 3u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 4u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 5u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Tool Introspection") >, Rev< 6u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN Tool Introspection") > >() },
    { "p2718r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Nicolai Josuttis") >(), wxS("Wording for PR Fix for Rangebased for Loop") > >() },
    { "p2719r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") >, Rev< 1u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") >, Rev< 2u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") >, Rev< 3u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") >, Rev< 4u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") >, Rev< 5u, ArrHash< Hash("Louis Dionne"), Hash("Oliver Hunt") >(), wxS("Typeaware allocation and deallocation functions") > >() },
    { "p2721r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Deprecating function") > >() },
    { "p2722r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Beyond operator PR presentation") > >() },
    { "p2723r0", 1u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Zeroinitialize objects of automatic storage duration") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Zeroinitialize objects of automatic storage duration") > >() },
    { "p2724r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("constant dangling") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("constant dangling") > >() },
    { "p2725r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("stdintegralconstant Literals") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("stdintegralconstant Literals") > >() },
    { "p2726r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Better stdtuple Indexing") > >() },
    { "p2727r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("stditeratorinterface") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("stditeratorinterface") >, Rev< 2u, ArrHash< Hash("Zach Laine") >(), wxS("stditeratorinterface") >, Rev< 3u, ArrHash< Hash("Zach Laine") >(), wxS("stditeratorinterface") >, Rev< 4u, ArrHash< Hash("Zach Laine") >(), wxS("stditeratorinterface") > >() },
    { "p2728r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 1u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 2u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 3u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 4u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 5u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 6u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") >, Rev< 7u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  UTF Transcoding") > >() },
    { "p2729r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Unicode in the Library Part  Normalization") > >() },
    { "p2730r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("variable scope") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("variable scope") > >() },
    { "p2732r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG November  Kona meeting Record of Discussion") > >() },
    { "p2733r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix handling of empty specifiers in stdformat") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix handling of empty specifiers in stdformat") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix handling of empty specifiers in stdformat") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix handling of empty specifiers in stdformat") > >() },
    { "p2734r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Marc Mutz") >(), wxS("Adding the new  SI prefixes") > >() },
    { "p2735r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman") >(), wxS("C xor C Programming") > >() },
    { "p2736r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Referencing the Unicode Standard") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Referencing the Unicode Standard") > >() },
    { "p2737r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Conditioncentric Contracts Syntax") > >() },
    { "p2738r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("David Ledger") >(), wxS("constexpr cast from void towards constexpr typeerasure") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("David Ledger") >(), wxS("constexpr cast from void towards constexpr typeerasure") > >() },
    { "p2739r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("A call to action Think seriously about safety then do something sensible about it") > >() },
    { "p2740r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Simpler implicit dangling resolution") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Simpler implicit dangling resolution") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Simpler implicit dangling resolution") > >() },
    { "p2741r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("usergenerated staticassert messages") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("usergenerated staticassert messages") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("usergenerated staticassert messages") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("usergenerated staticassert messages") > >() },
    { "p2742r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("indirect dangling identification") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("indirect dangling identification") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("indirect dangling identification") > >() },
    { "p2743r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Contracts for C Prioritizing Safety  Presentation slides of PR") > >() },
    { "p2746r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 3u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 4u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 5u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 6u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") >, Rev< 7u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Deprecate and Replace Fenv Rounding Modes") > >() },
    { "p2747r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Limited support for constexpr void") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr placement new") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr placement new") > >() },
    { "p2748r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned glvalue to a Temporary") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") >, Rev< 2u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") >, Rev< 3u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") >, Rev< 4u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") >, Rev< 5u, ArrHash< Hash("Brian Bi") >(), wxS("Disallow Binding a Returned Glvalue to a Temporary") > >() },
    { "p2749r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Down with character") > >() },
    { "p2750r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("C Dangling Reduction") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("C Dangling Reduction") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("C Dangling Reduction") > >() },
    { "p2751r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Evaluation of Checked Contracts") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Evaluation of Checked Contracts") > >() },
    { "p2752r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Static storage for braced initializers") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Static storage for braced initializers") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Static storage for braced initializers") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Static storage for braced initializers") > >() },
    { "p2754r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jake Fevold") >(), wxS("Deconstructing Avoiding Uninitialized Reads of Auto Variables") > >() },
    { "p2755r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jake Fevold"), Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("A Bold Plan for a Complete Contracts Facility") >, Rev< 1u, ArrHash< Hash("Jake Fevold"), Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("A Bold Plan for a Complete Contracts Facility") > >() },
    { "p2756r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Simple Contract Side Effect Semantics") > >() },
    { "p2757r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Type checking format args") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Type checking format args") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Type checking format args") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Type checking format args") > >() },
    { "p2758r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") >, Rev< 5u, ArrHash< Hash("Barry Revzin") >(), wxS("Emitting messages at compile time") > >() },
    { "p2759r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("DG Opinion on Safety for ISO C") >, Rev< 1u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("DG Opinion on Safety for ISO C") > >() },
    { "p2760r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("A Plan for C Ranges") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("A Plan for C Ranges") > >() },
    { "p2761r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides If structured binding PR presentation") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides If structured binding PR presentation") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Evaluating structured binding as a condition PR presentation") >, Rev< 3u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Structured binding declaration as a condition PR presentation") > >() },
    { "p2762r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("SenderReceiver Interface For Networking") >, Rev< 1u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("SenderReceiver Interface For Networking") >, Rev< 2u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("SenderReceiver Interface For Networking") > >() },
    { "p2763r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("layoutstride static extents default constructor fix") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("layoutstride static extents default constructor fix") > >() },
    { "p2764r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes ") > >() },
    { "p2765r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning Virtual Meeting Minutes ") > >() },
    { "p2766r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2767r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("flatmapflatset omnibus") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("flatmapflatset omnibus") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("flatmapflatset omnibus") > >() },
    { "p2769r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("getelement customization point object") >, Rev< 1u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("getelement customization point object") >, Rev< 2u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("getelement customization point object") >, Rev< 3u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("getelement customization point object") > >() },
    { "p2770r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Stashing stashing iterators for proper flattening") > >() },
    { "p2771r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas Neumann") >(), wxS("Towards memory safety in C") >, Rev< 1u, ArrHash< Hash("Thomas Neumann") >(), wxS("Towards memory safety in C") > >() },
    { "p2772r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdintegralconstant literals do not suffice  constexprt") > >() },
    { "p2773r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Considerations for Unicode algorithms") > >() },
    { "p2774r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Scoped threadlocal storage") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Concurrent object pool was Scoped threadlocal storage") > >() },
    { "p2775r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi") >(), wxS(" Library Evolution Polls") > >() },
    { "p2776r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p2779r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Make basicstringviews range construction conditionally explicit") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Make basicstringviews range construction conditionally explicit") > >() },
    { "p2780r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Callerside precondition checking and Evalandthrow") > >() },
    { "p2781r0", 9u, RevList< Rev< 1u, ArrHash< Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprv") >, Rev< 2u, ArrHash< Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprv") >, Rev< 3u, ArrHash< Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprv") >, Rev< 4u, ArrHash< Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") >, Rev< 5u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") >, Rev< 6u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") >, Rev< 7u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") >, Rev< 8u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") >, Rev< 9u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Matthias Kretz"), Hash("Zach Laine") >(), wxS("stdconstexprwrapper") > >() },
    { "p2782r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A proposal for a type trait to detect if value initialization can be achieved by zerofilling") > >() },
    { "p2784r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Not halting the program after detected contract violation") > >() },
    { "p2785r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)"), Hash("S\\u00E9bastien Bini") >(), wxS("Relocating prvalues") >, Rev< 1u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)"), Hash("S\\u00E9bastien Bini") >(), wxS("Relocating prvalues") >, Rev< 2u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)"), Hash("S\\u00E9bastien Bini") >(), wxS("Relocating prvalues") >, Rev< 3u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)"), Hash("S\\u00E9bastien Bini") >(), wxS("Relocating prvalues") > >() },
    { "p2786r0", 13u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial relocatability options") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial relocatability options") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial relocatability options") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 5u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 6u, ArrHash< Hash("Alisdair Meredith"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 7u, ArrHash< Hash("Alisdair Meredith"), Hash("Joshua Berne"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 8u, ArrHash< Hash("Alisdair Meredith"), Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability For C") >, Rev< 9u, ArrHash< Hash("Alisdair Meredith"), Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Pablo Halpern") >(), wxS("Trivial Relocatability For C") >, Rev< 10u, ArrHash< Hash("Alisdair Meredith"), Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Pablo Halpern") >(), wxS("Trivial Relocatability For C") >, Rev< 11u, ArrHash< Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Pablo Halpern") >(), wxS("Trivial Relocatability For C") >, Rev< 12u, ArrHash< Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Pablo Halpern") >(), wxS("Trivial Relocatability For C") >, Rev< 13u, ArrHash< Hash("Corentin Jabot"), Hash("Joshua Berne"), Hash("Lori Hughes"), Hash("Pablo Halpern") >(), wxS("Trivial Relocatability For C") > >() },
    { "p2787r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("pmrgenerator  Promise Types are not Values") >, Rev< 1u, ArrHash< Hash("Steve Downey") >(), wxS("pmrgenerator  Promise Types are not Values") > >() },
    { "p2788r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Linkage for modular constants") > >() },
    { "p2789r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Issaquah Feb ") > >() },
    { "p2790r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Immediate Issues to be moved in Issaquah Feb ") > >() },
    { "p2791r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ran Regev") >(), wxS("mandate concepts for new features") > >() },
    { "p2795r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Correct and incorrect code and quoterroneous behaviourquot") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for uninitialized reads") >, Rev< 2u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for uninitialized reads") >, Rev< 3u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for uninitialized reads") >, Rev< 4u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for uninitialized reads") >, Rev< 5u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for uninitialized reads") > >() },
    { "p2796r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the February  meeting") > >() },
    { "p2797r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Proposed resolution for CWG Static and explicit object member functions with the same par") > >() },
    { "p2798r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen") >(), wxS("Fix layout mappings all static extent default constructor") > >() },
    { "p2799r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Closed ranges may be a problem breaking countediterator is not the solution") > >() },
    { "p2800r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Boeckel") >(), wxS("Dependency flag soup needs some fiber") > >() },
    { "p2802r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson") >(), wxS("Presentation of PR to LEWG at Issaquah ") > >() },
    { "p2803r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd Intro slides") > >() },
    { "p2805r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed") >(), wxS("fibercontext fibers without scheduler  LEWG slides") > >() },
    { "p2806r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Bruno Cardoso Lopes"), Hash("Michael Park"), Hash("Zach Laine") >(), wxS("do expressions") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Bruno Cardoso Lopes"), Hash("Michael Park"), Hash("Zach Laine") >(), wxS("do expressions") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Bruno Cardoso Lopes"), Hash("Michael Park"), Hash("Zach Laine") >(), wxS("do expressions") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Bruno Cardoso Lopes"), Hash("Michael Park"), Hash("Zach Laine") >(), wxS("do expressions") > >() },
    { "p2807r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Issaquah Slides for Intel response to stdsimd") > >() },
    { "p2808r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer"), Hash("S. Davis Herring") >(), wxS("Internal linkage in the global module") > >() },
    { "p2809r0", 3u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("Trivial infinite loops are not Undefined Behavior") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("Trivial infinite loops are not Undefined Behavior") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("Trivial infinite loops are not Undefined Behavior") >, Rev< 3u, ArrHash< Hash("JF Bastien") >(), wxS("Trivial infinite loops are not Undefined Behavior") > >() },
    { "p2810r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("isdebuggerpresent isreplaceable") >, Rev< 1u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("isdebuggerpresent isreplaceable") >, Rev< 2u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("isdebuggerpresent isreplaceable") >, Rev< 3u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("isdebuggerpresent isreplaceable") >, Rev< 4u, ArrHash< Hash("Ben Craig"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("isdebuggerpresent isreplaceable") > >() },
    { "p2811r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Contract Violation Handlers") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Contract Violation Handlers") >, Rev< 2u, ArrHash< Hash("Joshua Berne") >(), wxS("Contract Violation Handlers") >, Rev< 3u, ArrHash< Hash("Joshua Berne") >(), wxS("Contract Violation Handlers") >, Rev< 4u, ArrHash< Hash("Joshua Berne") >(), wxS("Contract Violation Handlers") >, Rev< 5u, ArrHash< Hash("Joshua Berne") >(), wxS("ContractViolation Handlers") >, Rev< 6u, ArrHash< Hash("Joshua Berne") >(), wxS("ContractViolation Handlers") >, Rev< 7u, ArrHash< Hash("Joshua Berne") >(), wxS("ContractViolation Handlers") > >() },
    { "p2812r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nevin Liber") >(), wxS("PR LEWG presentation") > >() },
    { "p2814r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Arthur O'Dwyer"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability  Comparing P with P") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Arthur O'Dwyer"), Hash("Mungo Gill") >(), wxS("Trivial Relocatability  Comparing P with P") > >() },
    { "p2815r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("Slides for presentation on PR") > >() },
    { "p2816r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Gabriel Dos Reis") >(), wxS("Safety Profiles Typeandresource Safe programming in ISO Standard C") > >() },
    { "p2817r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("The idea behind the contracts MVP") > >() },
    { "p2818r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Uniform Call Syntax for explicitobject member functions") > >() },
    { "p2819r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Christoph Hofer"), Hash("Michael Florian Hava") >(), wxS("Add tuple protocol to complex") >, Rev< 1u, ArrHash< Hash("Christoph Hofer"), Hash("Michael Florian Hava") >(), wxS("Add tuple protocol to complex") >, Rev< 2u, ArrHash< Hash("Christoph Hofer"), Hash("Michael Florian Hava") >(), wxS("Add tuple protocol to complex") > >() },
    { "p2821r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") >, Rev< 3u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") >, Rev< 4u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") >, Rev< 5u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("spanat") > >() },
    { "p2822r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Providing user control of associated entities of class types") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("Providing user control of associated entities of class types") >, Rev< 2u, ArrHash< Hash("Lewis Baker") >(), wxS("Providing user control of associated entities of class types") > >() },
    { "p2824r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG February  Issaquah meeting Record of Discussion") > >() },
    { "p2825r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("calltargetunevaluatedcallexpression") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Overload Resolution hook declcallunevaluatedpostfixexpression") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Overload Resolution hook declcallunevaluatedpostfixexpression") >, Rev< 3u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Overload resolution hook declcall unevaluatedcallexpression ") >, Rev< 4u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Overload resolution hook declcall unevaluatedcallexpression ") >, Rev< 5u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Overload resolution hook declcall unevaluatedcallexpression ") > >() },
    { "p2826r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Replacement functions") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Replacement functions") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Replacement functions") > >() },
    { "p2827r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Floatingpoint overflow and underflow in fromchars LWG ") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Floatingpoint overflow and underflow in fromchars LWG ") > >() },
    { "p2828r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Copy elision for directinitialization with a conversion function Core issue ") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Copy elision for directinitialization with a conversion function Core issue ") >, Rev< 2u, ArrHash< Hash("Brian Bi") >(), wxS("Copy elision for directinitialization with a conversion function Core issue ") > >() },
    { "p2829r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of Contracts Supporting ConstOnDefinition Style") > >() },
    { "p2830r0", 10u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("constexpr type comparison") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("constexpr type comparison") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 3u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 4u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 5u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 6u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 7u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 8u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 9u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") >, Rev< 10u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Nichols") >(), wxS("Standardized Constexpr Type Ordering") > >() },
    { "p2831r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Edward Catmur (1982 \\u002D 2024)"), Hash("Timur Doumler") >(), wxS("Functions having a narrow contract should not be noexcept") > >() },
    { "p2833r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library inout expected span") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library inout expected span") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library inout expected span") > >() },
    { "p2834r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Semantic Stability Across ContractChecking Build Modes") >, Rev< 1u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Semantic Stability Across ContractChecking Build Modes") > >() },
    { "p2835r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Expose stdatomicrefs object address") >, Rev< 1u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Expose stdatomicrefs object address") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Expose stdatomicrefs object address") >, Rev< 3u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Expose stdatomicrefs object address") >, Rev< 4u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Expose stdatomicrefs object address") >, Rev< 5u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Gonzalo Brito Gadeschi"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen") >(), wxS("Expose stdatomicrefs object address") >, Rev< 6u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Gonzalo Brito Gadeschi"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen") >(), wxS("Expose stdatomicrefs object address") >, Rev< 7u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Gonzalo Brito Gadeschi"), Hash("H. Carter Edwards"), Hash("Mark Hoemmen") >(), wxS("Expose stdatomicrefs object address") > >() },
    { "p2836r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdconstiterator often produces an unexpected type") >, Rev< 1u, ArrHash< Hash("Christopher Di Bella") >(), wxS("stdbasicconstiterator should follow its underlying types convertibility") > >() },
    { "p2837r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Harold Bott") >(), wxS("Planning to Revisit the Lakos Rule") > >() },
    { "p2838r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Unconditional contract violation handling of any kind is a serious problem") > >() },
    { "p2839r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi"), Hash("Joshua Berne") >(), wxS("Nontrivial relocation via a new owning reference type") > >() },
    { "p2841r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Concept Template Parameters") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Concept Template Parameters") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Concept and variabletemplate templateparameters") >, Rev< 3u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("James Touton") >(), wxS("Concept and variabletemplate templateparameters") >, Rev< 4u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("James Touton") >(), wxS("Concept and variabletemplate templateparameters") >, Rev< 5u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("James Touton") >(), wxS("Concept and variabletemplate templateparameters") >, Rev< 6u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Hubert S.K. Tong"), Hash("James Touton") >(), wxS("Concept and variabletemplate templateparameters") >, Rev< 7u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Hubert S.K. Tong"), Hash("James Touton") >(), wxS("Concept and variabletemplate templateparameters") > >() },
    { "p2842r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Harold Bott") >(), wxS("Destructor Semantics Do Not Affect Constructible Traits") > >() },
    { "p2843r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Preprocessing is never undefined") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Preprocessing is never undefined") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Preprocessing is never undefined") > >() },
    { "p2845r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 5u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 6u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 7u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") >, Rev< 8u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stdfilesystempath") > >() },
    { "p2846r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("sizehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("sizehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("reservehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("reservehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 4u, ArrHash< Hash("Corentin Jabot") >(), wxS("reservehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 5u, ArrHash< Hash("Corentin Jabot") >(), wxS("reservehint Eagerly reserving memory for notquitesized lazy ranges") >, Rev< 6u, ArrHash< Hash("Corentin Jabot") >(), wxS("reservehint Eagerly reserving memory for notquitesized lazy ranges") > >() },
    { "p2848r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Enrico Mauro") >(), wxS("stdisuniqued") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Enrico Mauro") >(), wxS("stdisuniqued") > >() },
    { "p2849r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Kirk Shoop") >(), wxS("asyncobject  aka asyncRAII objects") > >() },
    { "p2850r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Batty"), Hash("Simon Cooksey") >(), wxS("Minimal Compiler Preserved Dependencies") > >() },
    { "p2852r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Contract violation handling semantics for the contracts MVP") > >() },
    { "p2853r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of stdcontractviolation") > >() },
    { "p2855r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Member customization points for Senders and Receivers") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Member customization points for Senders and Receivers") > >() },
    { "p2857r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Bentley") >(), wxS("PR Critique") > >() },
    { "p2858r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Noexcept vs contract violations") > >() },
    { "p2861r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("The Lakos Rule Narrow Contracts And noexcept Are Inherently Incompatible") > >() },
    { "p2862r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("textencodingname should never return null values") >, Rev< 1u, ArrHash< Hash("Daniel Kr\\u00FCgler") >(), wxS("textencodingname should never return null values") > >() },
    { "p2863r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 5u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 6u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 7u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 8u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") >, Rev< 9u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Review Annex D for C") > >() },
    { "p2864r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Arithmetic Conversion on Enumerations From C") > >() },
    { "p2865r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 5u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") >, Rev< 6u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Array Comparisons from C") > >() },
    { "p2866r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") >, Rev< 5u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Volatile Features From C") > >() },
    { "p2867r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated strstreams From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated strstreams From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated strstreams From C") > >() },
    { "p2868r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated stdallocator Typedef From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated stdallocator Typedef From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated stdallocator Typedef From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated stdallocator Typedef From C") > >() },
    { "p2869r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated sharedptr Atomic Access APIs From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated sharedptr Atomic Access APIs From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated sharedptr Atomic Access APIs From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated sharedptr Atomic Access APIs From C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated sharedptr Atomic Access APIs From C") > >() },
    { "p2870r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove basicstringreserve From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove basicstringreserve From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove basicstringreserve From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove basicstringreserve From C") > >() },
    { "p2871r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Unicode Conversion Facets From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Unicode Conversion Facets From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Unicode Conversion Facets From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Unicode Conversion Facets From C") > >() },
    { "p2872r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove wstringconvert From C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove wstringconvert From C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove wstringconvert From C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove wstringconvert From C") > >() },
    { "p2873r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated locale category facets for Unicode from C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Tom Honermann") >(), wxS("Remove Deprecated locale category facets for Unicode from C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("Tom Honermann") >(), wxS("Remove Deprecated locale category facets for Unicode from C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith"), Hash("Tom Honermann") >(), wxS("Remove Deprecated locale category facets for Unicode from C") > >() },
    { "p2874r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Mandating Annex D") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Mandating Annex D") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Mandating Annex D") > >() },
    { "p2875r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Undeprecate polymorphicallocatordestroy For C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Undeprecate polymorphicallocatordestroy For C") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Undeprecate polymorphicallocatordestroy For C") >, Rev< 3u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Undeprecate polymorphicallocatordestroy For C") >, Rev< 4u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Undeprecate polymorphicallocatordestroy For C") > >() },
    { "p2876r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz") >(), wxS("Proposal to extend stdsimd with more constructors and accessors") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz") >(), wxS("Proposal to extend stdsimd with more constructors and accessors") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with more constructors and accessors") >, Rev< 3u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Proposal to extend stdsimd with more constructors and accessors") > >() },
    { "p2877r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Tom Honermann") >(), wxS("Contract Build Modes and Semantics") > >() },
    { "p2878r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 3u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 4u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 5u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") >, Rev< 6u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Reference checking") > >() },
    { "p2879r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("Proposal of stddump") > >() },
    { "p2880r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alina Elizarova"), Hash("Andrey Nikolaev"), Hash("Ilya Burylov"), Hash("Pavel Dyakov"), Hash("Ruslan Arutyunyan") >(), wxS("Algorithmlike vs stdsimd based RNG API") > >() },
    { "p2881r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan M\\u00FCller") >(), wxS("Generatorbased for loop") > >() },
    { "p2882r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("An Event Model for C Executors") > >() },
    { "p2883r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("offsetof Should Be A Keyword In C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("offsetof Should Be A Keyword In C") > >() },
    { "p2884r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("assert Should Be A Keyword In C") > >() },
    { "p2885r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler"), Hash("Ville Voutilainen") >(), wxS("Requirements for a Contracts syntax") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler"), Hash("Tom Honermann"), Hash("Ville Voutilainen") >(), wxS("Requirements for a Contracts syntax") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler"), Hash("Tom Honermann"), Hash("Ville Voutilainen") >(), wxS("Requirements for a Contracts syntax") >, Rev< 3u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler"), Hash("Tom Honermann"), Hash("Ville Voutilainen") >(), wxS("Requirements for a Contracts syntax") > >() },
    { "p2886r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Concurrency TS Editors report") > >() },
    { "p2887r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinanceSimulation virtual meeting minutes to ") > >() },
    { "p2888r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning Virtual Meeting Minutes to ") > >() },
    { "p2889r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("Distributed Arrays") > >() },
    { "p2890r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts on lambdas") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts on lambdas") >, Rev< 2u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts on lambdas") > >() },
    { "p2891r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2892r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Joe Jevnik") >(), wxS("stdsimd Types Should be Regular") > >() },
    { "p2893r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jody Hagins") >(), wxS("Variadic Friends") >, Rev< 1u, ArrHash< Hash("Jody Hagins") >(), wxS("Variadic Friends") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Jody Hagins") >(), wxS("Variadic Friends") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Jody Hagins") >(), wxS("Variadic Friends") > >() },
    { "p2894r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Constant evaluation of Contracts") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Constant evaluation of Contracts") >, Rev< 2u, ArrHash< Hash("Timur Doumler") >(), wxS("Constant evaluation of Contracts") > >() },
    { "p2895r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller"), Hash("Sebastian Theophil") >(), wxS("noncopyable and nonmoveable utility classes") > >() },
    { "p2896r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Outstanding design questions for the Contracts MVP") > >() },
    { "p2897r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 2u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 3u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 4u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 5u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 6u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") >, Rev< 7u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("alignedaccessor An mdspan accessor expressing pointer overalignment") > >() },
    { "p2898r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Importable Headers are Not Universally Implementable") >, Rev< 1u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Build System Requirements for Importable Headers") > >() },
    { "p2899r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Rostislav Khlebnikov"), Hash("Timur Doumler") >(), wxS("Contracts for C  Rationale") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Rostislav Khlebnikov"), Hash("Timur Doumler") >(), wxS("Contracts for C  Rationale") > >() },
    { "p2900r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 3u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 4u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 5u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 6u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 7u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 8u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 9u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 10u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 11u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 12u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 13u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") >, Rev< 14u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C") > >() },
    { "p2901r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Kim Liegeois"), Hash("Mark Hoemmen") >(), wxS("Extending linear algebra support to batched operations") > >() },
    { "p2902r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("constexpr Parallel Algorithms") >, Rev< 1u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("constexpr Parallel Algorithms") >, Rev< 2u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("constexpr Parallel Algorithms") > >() },
    { "p2904r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Annop Rana") >(), wxS("Removing exception in precedence rules when using member pointer syntax") > >() },
    { "p2905r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings") > >() },
    { "p2906r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bernhard Manfred Gruber") >(), wxS("Structured bindings for stdextents") > >() },
    { "p2909r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Dude wheres my char") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix formatting of code units as integers Dude wheres my char") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix formatting of code units as integers Dude wheres my char") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix formatting of code units as integers Dude wheres my char") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix formatting of code units as integers Dude wheres my char") > >() },
    { "p2910r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Varna Jun ") > >() },
    { "p2911r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Adam Lach"), Hash("Jagrut Dave") >(), wxS("Python Bindings with ValueBased Reflection") >, Rev< 1u, ArrHash< Hash("Adam Lach"), Hash("Jagrut Dave") >(), wxS("Python Bindings with ValueBased Reflection") > >() },
    { "p2912r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Concurrent queues and senderreceivers") > >() },
    { "p2915r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Proposed resolution to CWG") > >() },
    { "p2917r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andreas Fertig") >(), wxS("An inline defaulted destructor should keep the copy and moveoperations") >, Rev< 1u, ArrHash< Hash("Andreas Fertig") >(), wxS("An inline defaulted destructor should keep the copy and moveoperations") > >() },
    { "p2918r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings II") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings II") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Runtime format strings II") > >() },
    { "p2920r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Bryce Adelstein Lelbach"), Hash("Fabio Fracassi"), Hash("Guy Davidson"), Hash("Nevin Liber"), Hash("Robert Leahy") >(), wxS("Library Evolution Leaderships Understanding of the Noexcept Policy History") > >() },
    { "p2921r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann"), Hash("Gor Nishanov") >(), wxS("Exploring stdexpected based API alternatives for bufferqueue") > >() },
    { "p2922r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the June  meeting") > >() },
    { "p2925r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi"), Hash("Nevin Liber"), Hash("Timur Doumler") >(), wxS("inplacevector  DR LEWG presentation") > >() },
    { "p2926r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Joe Jevnik") >(), wxS("stdsimd types should be regular  PR LEWG presentation") > >() },
    { "p2927r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("Observing exceptions stored in exceptionptr") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Gor Nishanov") >(), wxS("Observing exceptions stored in exceptionptr") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Gor Nishanov") >(), wxS("Observing exceptions stored in exceptionptr") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Gor Nishanov") >(), wxS("Observing exceptions stored in exceptionptr") > >() },
    { "p2929r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("simdinvoke") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("simdinvoke") > >() },
    { "p2930r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark de Wever") >(), wxS("Formatter specializations for the standard library") > >() },
    { "p2931r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG June  Varna Meeting Record of Discussion") > >() },
    { "p2932r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("A Principled Approach to Open Design Questions for Contracts") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("A Principled Approach to Open Design Questions for Contracts") >, Rev< 2u, ArrHash< Hash("Joshua Berne") >(), wxS("A Principled Approach to Open Design Questions for Contracts") >, Rev< 3u, ArrHash< Hash("Joshua Berne") >(), wxS("A Principled Approach to Open Design Questions for Contracts") > >() },
    { "p2933r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("stdsimd overloads for bit header") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("stdsimd overloads for bit header") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("stdsimd overloads for ltbit header") >, Rev< 3u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Extend bit header function with overloads for stdsimd") >, Rev< 4u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Extend bit header function with overloads for stdsimd") > >() },
    { "p2935r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("An AttributeLike Syntax for Contracts") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("An AttributeLike Syntax for Contracts") >, Rev< 2u, ArrHash< Hash("Joshua Berne") >(), wxS("An AttributeLike Syntax for Contracts") >, Rev< 3u, ArrHash< Hash("Joshua Berne") >(), wxS("An AttributeLike Syntax for Contracts") >, Rev< 4u, ArrHash< Hash("Joshua Berne") >(), wxS("An AttributeLike Syntax for Contracts") > >() },
    { "p2937r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Remove strtok") > >() },
    { "p2940r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("switch for Pattern Matching") > >() },
    { "p2941r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mihail Naydenov") >(), wxS("Identifiers for Pattern Matching") > >() },
    { "p2944r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Comparisons for referencewrapper") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Comparisons for referencewrapper") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Comparisons for referencewrapper") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("Comparisons for referencewrapper") > >() },
    { "p2945r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Additional format specifiers for timepoint") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Additional format specifiers for timepoint") > >() },
    { "p2946r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("A flexible solution to the problems of noexcept") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("A flexible solution to the problems of noexcept") > >() },
    { "p2947r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Zissu"), Hash("Gal Zaban"), Hash("Inbal Levi"), Hash("Ran Regev") >(), wxS("Contracts must avoid disclosing sensitive information") > >() },
    { "p2949r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("Slides for PR Narrow Contracts and noexcept are Inherently Incompatable") > >() },
    { "p2950r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tomasz Kami\\u0144ski") >(), wxS("Slides for PR stdbasicconstiterator should follow its underlying types convertibility") > >() },
    { "p2951r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Shadowing is good for safety") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Shadowing is good for safety") >, Rev< 2u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Shadowing is good for safety") >, Rev< 3u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Shadowing is good for safety") > >() },
    { "p2952r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Matthew Taylor") >(), wxS("auto operatorX  default") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Matthew Taylor") >(), wxS("auto operatorX  default") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Matthew Taylor") >(), wxS("auto operatorX  default") > >() },
    { "p2953r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Forbid defaulting operatorX ") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Forbid defaulting operatorX ") > >() },
    { "p2954r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Contracts and virtual functions for the Contracts MVP") > >() },
    { "p2955r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Safer Range Access") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Safer Range Access") > >() },
    { "p2956r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Add saturating library support to stdsimd") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Add saturating library support to stdsimd") > >() },
    { "p2957r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Iain Sandoe") >(), wxS("Contracts and coroutines") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Iain Sandoe") >(), wxS("Contracts and coroutines") >, Rev< 2u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Iain Sandoe"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts and coroutines") > >() },
    { "p2958r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("typeof and typeofunqual") > >() },
    { "p2959r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Container Relocation") > >() },
    { "p2960r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("Concurrency TS Editors report for N") > >() },
    { "p2961r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer"), Hash("Timur Doumler") >(), wxS("A natural syntax for Contracts") >, Rev< 1u, ArrHash< Hash("Jens Maurer"), Hash("Timur Doumler") >(), wxS("A natural syntax for Contracts") >, Rev< 2u, ArrHash< Hash("Jens Maurer"), Hash("Timur Doumler") >(), wxS("A natural syntax for Contracts") > >() },
    { "p2962r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Communicating the Baseline Compile Command for C Modules support") > >() },
    { "p2963r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Ordering of constraints involving fold expressions") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Ordering of constraints involving fold expressions") >, Rev< 2u, ArrHash< Hash("Corentin Jabot") >(), wxS("Ordering of constraints involving fold expressions") >, Rev< 3u, ArrHash< Hash("Corentin Jabot") >(), wxS("Ordering of constraints involving fold expressions") > >() },
    { "p2964r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Allowing userdefined types in stdsimd") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Allowing userdefined types in stdsimd") > >() },
    { "p2966r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Gabriel Morin"), Hash("Matthew Bentley"), Hash("Patrice Roy"), Hash("Staffan Tjernstrom") >(), wxS("Making C Better for Game Developers  Progress Report") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Gabriel Morin"), Hash("Matthew Bentley"), Hash("Patrice Roy"), Hash("Staffan Tjernstrom") >(), wxS("Making C Better for Game Developers  Progress Report") > >() },
    { "p2967r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Relocation Is A Library Interface") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Relocation Is A Library Interface") > >() },
    { "p2968r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make stdignore a firstclass object") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make stdignore a firstclass object") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad") >(), wxS("Make stdignore a firstclass object") > >() },
    { "p2969r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler"), Hash("Tom Honermann"), Hash("Ville Voutilainen") >(), wxS("Contract annotations are potentiallythrowing") > >() },
    { "p2970r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Partial application of concepts in template arguments") > >() },
    { "p2971r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Walter E. Brown") >(), wxS("Implication for C") >, Rev< 1u, ArrHash< Hash("Walter E. Brown") >(), wxS("Implication for C") >, Rev< 2u, ArrHash< Hash("Walter E. Brown") >(), wxS("Implication for C") >, Rev< 3u, ArrHash< Hash("Walter E. Brown") >(), wxS("Implication for C") > >() },
    { "p2972r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p2973r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely"), Hash("Thomas K\\u00F6ppe") >(), wxS("Erroneous behaviour for missing return from assignment") > >() },
    { "p2976r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library algorithm numeric and random") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding Library algorithm numeric and random") > >() },
    { "p2977r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ben Boeckel") >(), wxS("Module commands database format") >, Rev< 1u, ArrHash< Hash("Ben Boeckel"), Hash("Daniel Ruoso") >(), wxS("Build database files") >, Rev< 2u, ArrHash< Hash("Ben Boeckel"), Hash("Daniel Ruoso") >(), wxS("Build database files") > >() },
    { "p2978r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hassan Sajjad") >(), wxS("A New Approach For Compiling C") > >() },
    { "p2979r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Harold Bott"), Hash("John Lakos") >(), wxS("The Need for Design Policies in WG") > >() },
    { "p2980r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("A motivation scope and plan for a physical quantities and units library") >, Rev< 1u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("A motivation scope and plan for a quantities and units library") > >() },
    { "p2981r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz") >(), wxS("Improving our safety with a physical quantities and units library") >, Rev< 1u, ArrHash< Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz") >(), wxS("Improving our safety with a physical quantities and units library") > >() },
    { "p2982r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Charles Hogg"), Hash("Mateusz Pusz") >(), wxS("stdquantity as a numeric type") >, Rev< 1u, ArrHash< Hash("Charles Hogg"), Hash("Mateusz Pusz") >(), wxS("stdquantity as a numeric type") > >() },
    { "p2984r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reconsider Redeclaring static constexpr Data Members") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Reconsider Redeclaring static constexpr Data Members") > >() },
    { "p2985r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("A type trait for detecting virtual base classes") > >() },
    { "p2986r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("Generic Function Pointer") > >() },
    { "p2988r0", 12u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 1u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 2u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptional") >, Rev< 3u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 4u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 5u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 6u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 7u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 8u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 9u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 10u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 11u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") >, Rev< 12u, ArrHash< Hash("Peter Sommerlad"), Hash("Steve Downey") >(), wxS("stdoptionalT") > >() },
    { "p2989r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("A Simple Approach to Universal Template Parameters") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("A Simple Approach to Universal Template Parameters") >, Rev< 2u, ArrHash< Hash("Corentin Jabot"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("A Simple Approach to Universal Template Parameters") > >() },
    { "p2990r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("C Modules Roadmap") > >() },
    { "p2991r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Stop Forcing stdmove to Pessimize") > >() },
    { "p2992r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Attribute discard and attributes on expressions") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Attribute discardreason") > >() },
    { "p2993r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Luke Valenty") >(), wxS("Constrained Numbers") > >() },
    { "p2994r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("On the Naming of Packs") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("On the Naming of Packs") > >() },
    { "p2995r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p2996r0", 13u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 1u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 2u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 3u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 4u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 5u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 6u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 7u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 8u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 9u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 10u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 11u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 12u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") >, Rev< 13u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Reflection for C") > >() },
    { "p2997r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("Removing the common reference requirement from the indirectly invocable concepts") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("R. Tim Song") >(), wxS("Removing the common reference requirement from the indirectly invocable concepts") > >() },
    { "p2998r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("CTAD for function parameter types") > >() },
    { "p2999r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Sender Algorithm Customization") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Sender Algorithm Customization") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Sender Algorithm Customization") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("Sender Algorithm Customization") > >() },
    { "p3001r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("David Sankel"), Hash("Jonathan M\\u00FCller"), Hash("Zach Laine") >(), wxS("stdhive and containers like it are not a good fit for the standard library") > >() },
    { "p3002r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Guidelines for allocators in new library classes") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Policies for Using Allocators in New Library Classes") > >() },
    { "p3003r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Johel Ernesto Guerrero Pe\\u00F1a") >(), wxS("The design of a library of number concepts") > >() },
    { "p3004r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bill Chapman"), Hash("Harold Bott"), Hash("John Lakos"), Hash("Lori Hughes"), Hash("Mike Giroux"), Hash("Mungo Gill"), Hash("Oleg Subbotin") >(), wxS("Principled Design for WG") > >() },
    { "p3005r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Bill Chapman"), Hash("Harold Bott"), Hash("John Lakos"), Hash("Mike Giroux"), Hash("Mungo Gill"), Hash("Oleg Subbotin") >(), wxS("Memorializing PrincipledDesign Policies for WG") > >() },
    { "p3006r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Launder less") >, Rev< 1u, ArrHash< Hash("Antony Polukhin") >(), wxS("Launder less") > >() },
    { "p3007r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Return object semantics in postconditions") > >() },
    { "p3008r0", 6u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 1u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 2u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 3u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 4u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 5u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") >, Rev< 6u, ArrHash< Hash("David Sankel"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic floatingpoint minmax") > >() },
    { "p3009r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joe Jevnik") >(), wxS("Injected class name in the base specifier list") > >() },
    { "p3010r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dan Katz") >(), wxS("Using Reflection to Replace a Metalanguage for Generating JS Bindings") > >() },
    { "p3011r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Bentley") >(), wxS("Supporting document for Hive proposal  outreach for evidence of containerstyle use in industry") > >() },
    { "p3012r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthew Bentley") >(), wxS("Supporting document for Hive proposal  use of stdlist in open source codebases") > >() },
    { "p3014r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Customizing stdexpecteds exception") > >() },
    { "p3015r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Howard E. Hinnant") >(), wxS("Rebuttal to Additional format specifiers for timepoint") > >() },
    { "p3016r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 3u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 4u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 5u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") >, Rev< 6u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve inconsistencies in beginend for valarray and braced initializer lists") > >() },
    { "p3018r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Weis") >(), wxS("LowLevel Integer Arithmetic") > >() },
    { "p3019r0", 14u, RevList< Rev< 0u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 1u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 2u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 3u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 4u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 5u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 6u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 7u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 8u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 9u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 10u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 11u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 12u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 13u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") >, Rev< 14u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") > >() },
    { "p3020r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3021r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Unified function call syntax UFCS") > >() },
    { "p3022r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel") >(), wxS("A Boring Thread Attributes Interface") >, Rev< 1u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel") >(), wxS("A Boring Thread Attributes Interface") > >() },
    { "p3023r0", 1u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("C Should Be C") >, Rev< 1u, ArrHash< Hash("David Sankel") >(), wxS("C Should Be C") > >() },
    { "p3024r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel"), Hash("Jeff Garland"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Interface Directions for stdsimd") > >() },
    { "p3025r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial tradingSimulation virtual Minutes to ") > >() },
    { "p3026r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3027r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("UFCS is a breaking change of the absolutely worst kind") > >() },
    { "p3028r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Rostislav Khlebnikov"), Hash("Timur Doumler") >(), wxS("An Overview of Syntax Choices for Contracts") > >() },
    { "p3029r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("Better mdspans CTAD") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("Better mdspans CTAD") > >() },
    { "p3031r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Resolve CWG conversion function for lambda with explicit object parameter") > >() },
    { "p3032r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Less transient constexpr allocation") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Less transient constexpr allocation") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("Less transient constexpr allocation") > >() },
    { "p3033r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Should we import function bodies to get the better optimizations") > >() },
    { "p3034r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Module Declarations Shouldnt be Macros") >, Rev< 1u, ArrHash< Hash("Michael Spencer") >(), wxS("Module Declarations Shouldnt be Macros") > >() },
    { "p3037r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Paul Keir") >(), wxS("constexpr stdsharedptr") >, Rev< 1u, ArrHash< Hash("Paul Keir") >(), wxS("constexpr stdsharedptr") >, Rev< 2u, ArrHash< Hash("Paul Keir") >(), wxS("constexpr stdsharedptr") >, Rev< 3u, ArrHash< Hash("Paul Keir") >(), wxS("constexpr stdsharedptr") >, Rev< 4u, ArrHash< Hash("Paul Keir") >(), wxS("constexpr stdsharedptr") >, Rev< 5u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Paul Keir") >(), wxS("constexpr stdsharedptr and friends") >, Rev< 6u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Paul Keir") >(), wxS("constexpr stdsharedptr and friends") > >() },
    { "p3038r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Concrete suggestions for initial Profiles") > >() },
    { "p3039r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Stone") >(), wxS("Automatically Generate operator") > >() },
    { "p3040r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Kona Nov ") > >() },
    { "p3041r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Transitioning from include World to Modules") > >() },
    { "p3042r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Vocabulary Types for Composite Class Design") > >() },
    { "p3043r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Using variable template template without meta programming") > >() },
    { "p3044r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("substringview from string") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("substringview from string") >, Rev< 2u, ArrHash< Hash("Michael Florian Hava") >(), wxS("substringview from string") > >() },
    { "p3045r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 1u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 2u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 3u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 4u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 5u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") >, Rev< 6u, ArrHash< Hash("Charles Hogg"), Hash("Dominik Berner"), Hash("Johel Ernesto Guerrero Pe\\u00F1a"), Hash("Mateusz Pusz"), Hash("Nicolas Holthaus"), Hash("Roth Michaels"), Hash("Vincent Reverdy") >(), wxS("Quantities and units library") > >() },
    { "p3046r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the November  meeting") > >() },
    { "p3047r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove deprecated namespace relops from C") > >() },
    { "p3049r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("nodehandles for lists") >, Rev< 1u, ArrHash< Hash("Michael Florian Hava") >(), wxS("nodehandles for lists") > >() },
    { "p3050r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Optimize linalgconjugated for noncomplex value types") >, Rev< 1u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by optimizing linalgconjugated for noncomplex value types") >, Rev< 2u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by optimizing linalgconjugated for noncomplex value types") >, Rev< 3u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by optimizing linalgconjugated for noncomplex value types") > >() },
    { "p3051r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Response Files") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Response Files") >, Rev< 2u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Response Files") >, Rev< 3u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN Structured Response Files") > >() },
    { "p3052r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewinterfaceat") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("viewinterfaceat") > >() },
    { "p3053r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3054r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3055r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Relax wording to permit relocation optimizations in the STL") >, Rev< 1u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Relax wording to permit relocation optimizations in the STL") > >() },
    { "p3056r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("what ostream exception") > >() },
    { "p3057r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Two finergrained compilation model for named modules") > >() },
    { "p3059r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("Making userdefined constructors of view iteratorssentinels private") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("Making userdefined constructors of view iteratorssentinels private") > >() },
    { "p3060r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Weile Wei") >(), wxS("Add stdrangesupton") >, Rev< 1u, ArrHash< Hash("Weile Wei"), Hash("Zhihao Yuan") >(), wxS("Add stdviewsupton") >, Rev< 2u, ArrHash< Hash("Weile Wei"), Hash("Zhihao Yuan") >(), wxS("Add stdviewsindicesn") >, Rev< 3u, ArrHash< Hash("Weile Wei"), Hash("Zhihao Yuan") >(), wxS("Add stdviewsindicesn") > >() },
    { "p3061r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("WG  Kona Record of Discussion") > >() },
    { "p3062r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Sankel") >(), wxS("C Should Be C  Presentation") > >() },
    { "p3064r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alan Stern"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("How to Avoid OOTA Without Really Trying") >, Rev< 1u, ArrHash< Hash("Alan Stern"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("How to Avoid OOTA Without Really Trying") >, Rev< 2u, ArrHash< Hash("Alan Stern"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("How to Avoid OOTA Without Really Trying") > >() },
    { "p3066r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Allow repeating contract annotations on nonfirst declarations") > >() },
    { "p3067r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Provide predefined simd permute generator functions for common operations") > >() },
    { "p3068r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 3u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 4u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 5u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") >, Rev< 6u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Allowing exception throwing in constantevaluation") > >() },
    { "p3070r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting enums") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting enums") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting enums") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting enums") > >() },
    { "p3071r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Protection against modifications in contracts") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Protection against modifications in contracts") > >() },
    { "p3072r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Hasslefree thread attributes") >, Rev< 1u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Hasslefree thread attributes") >, Rev< 2u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Hasslefree thread attributes") > >() },
    { "p3073r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler"), Hash("Ville Voutilainen") >(), wxS("Remove evaluationundefinedbehavior and willcontinue from the Contracts MVP") > >() },
    { "p3074r0", 7u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr union lifetime") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("stduninitializedT") >, Rev< 2u, ArrHash< Hash("Barry Revzin") >(), wxS("stduninitializedT") >, Rev< 3u, ArrHash< Hash("Barry Revzin") >(), wxS("trivial union was stduninitializedT") >, Rev< 4u, ArrHash< Hash("Barry Revzin") >(), wxS("trivial unions was stduninitializedT") >, Rev< 5u, ArrHash< Hash("Barry Revzin") >(), wxS("trivial unions was stduninitializedT") >, Rev< 6u, ArrHash< Hash("Barry Revzin") >(), wxS("trivial unions was stduninitializedT") >, Rev< 7u, ArrHash< Hash("Barry Revzin") >(), wxS("trivial unions was stduninitializedT") > >() },
    { "p3075r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Shafik Yaghmour") >(), wxS("Adding an Undefined Behavior and IFNDR Annex") > >() },
    { "p3079r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("Should ignore and observe exist for constant evaluation of contracts") > >() },
    { "p3081r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Core safety Profiles Specification adoptability and impact") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Core safety profiles for C") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Core safety profiles for C") > >() },
    { "p3084r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Slides for LEWG viewsmaybe ") > >() },
    { "p3085r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("noexcept policy for SD throws nothing") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("noexcept policy for SD throws nothing") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("noexcept policy for SD throws nothing") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("noexcept policy for SD throws nothing") > >() },
    { "p3086r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library") >, Rev< 1u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library") >, Rev< 2u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library") >, Rev< 3u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library") >, Rev< 4u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library") > >() },
    { "p3087r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Make directinitialization for enumeration types at least as permissive as directlistinitialization") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("Make directinitialization for enumeration types at least as permissive as directlistinitializatio") > >() },
    { "p3088r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Attributes for contract assertions") >, Rev< 1u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Attributes for contract assertions") > >() },
    { "p3090r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Inbal Levi") >(), wxS("stdexecution Introduction") > >() },
    { "p3091r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better lookups for map and unorderedmap") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better lookups for map and unorderedmap") >, Rev< 2u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better lookups for map and unorderedmap") >, Rev< 3u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better lookups for map and unorderedmap") >, Rev< 4u, ArrHash< Hash("Pablo Halpern") >(), wxS("Better lookups for map  unorderedmap and flatmap") > >() },
    { "p3092r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Modules ABI requirement") > >() },
    { "p3093r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Attributes on expressions") > >() },
    { "p3094r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 1u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 2u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 3u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 4u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 5u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") >, Rev< 6u, ArrHash< Hash("Mateusz Pusz") >(), wxS("stdbasicfixedstring") > >() },
    { "p3095r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Saksham Sharma") >(), wxS("ABI comparison with reflection") > >() },
    { "p3096r0", 12u, RevList< Rev< 0u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 1u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 2u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 3u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 4u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 5u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 6u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 7u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 8u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 9u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 10u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 11u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") >, Rev< 12u, ArrHash< Hash("Adam Lach"), Hash("Walter Genovese") >(), wxS("Function Parameter Reflection in Reflection for C") > >() },
    { "p3097r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C Support for virtual functions") > >() },
    { "p3098r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C Postcondition captures") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C Postcondition captures") > >() },
    { "p3100r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Undefined and erroneous behaviour are contract violations") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Undefined and erroneous behaviour are contract violations") >, Rev< 2u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Implicit contract assertions") >, Rev< 3u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Implicit contract assertions") > >() },
    { "p3101r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Ran Regev") >(), wxS("Differentiating potentially throwing and nonthrowing violation handlers") > >() },
    { "p3102r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Refining Contract Violation Detection Modes") > >() },
    { "p3103r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("More bitset operations") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("More bitset operations") >, Rev< 2u, ArrHash< Hash("Jan Schultke") >(), wxS("More bitset operations") > >() },
    { "p3104r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Bit permutations") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("Bit permutations") >, Rev< 2u, ArrHash< Hash("Jan Schultke") >(), wxS("Bit permutations") >, Rev< 3u, ArrHash< Hash("Jan Schultke") >(), wxS("Bit permutations") >, Rev< 4u, ArrHash< Hash("Jan Schultke") >(), wxS("Bit permutations") > >() },
    { "p3105r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("constexpr stduncaughtexceptions") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("constexpr stduncaughtexceptions") >, Rev< 2u, ArrHash< Hash("Jan Schultke") >(), wxS("constexpr stduncaughtexceptions") > >() },
    { "p3106r0", 1u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Clarifying rules for brace elision in aggregate initialization") >, Rev< 1u, ArrHash< Hash("James Touton") >(), wxS("Clarifying rules for brace elision in aggregate initialization") > >() },
    { "p3107r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") >, Rev< 5u, ArrHash< Hash("Victor Zverovich") >(), wxS("Permit an efficient implementation of stdprint") > >() },
    { "p3109r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler"), Hash("Kirk Shoop"), Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu") >(), wxS("A plan for stdexecution for C") > >() },
    { "p3110r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Array element initialization via pattern expansion") > >() },
    { "p3111r0", 8u, RevList< Rev< 0u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 1u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 2u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 3u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 4u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 5u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 6u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 7u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") >, Rev< 8u, ArrHash< Hash("Daniel Lustig"), Hash("Gonzalo Brito Gadeschi"), Hash("Simon Cooksey") >(), wxS("Atomic Reduction Operations") > >() },
    { "p3112r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Specify Constructor of stdnulloptt") > >() },
    { "p3113r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Slides Contract assertions the noexcept operator and deduced exception specifications") > >() },
    { "p3114r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("noexceptcontractassert  slides") > >() },
    { "p3115r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Data Member Variable and Alias Declarations Can Introduce A Pack") > >() },
    { "p3116r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Policy for explicit") > >() },
    { "p3117r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Zach Laine") >(), wxS("Extending Conditionally Borrowed") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Jonathan M\\u00FCller"), Hash("Zach Laine") >(), wxS("Extending Conditionally Borrowed") > >() },
    { "p3119r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Tokyo Technical Fixes to Contracts") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Tokyo Technical Fixes to Contracts") > >() },
    { "p3122r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("nodiscard should be Recommended Practice") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("nodiscard should be Recommended Practice") > >() },
    { "p3123r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3125r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Pointer tagging") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr pointer tagging") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr pointer tagging") >, Rev< 3u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr pointer tagging") >, Rev< 4u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr pointer tagging") > >() },
    { "p3126r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Overview") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Overview") >, Rev< 2u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Overview") >, Rev< 3u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Overview") > >() },
    { "p3127r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Background and Terminology") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Background and Terminology") > >() },
    { "p3128r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Algorithms") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Algorithms") >, Rev< 2u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Algorithms") >, Rev< 3u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Algorithms") > >() },
    { "p3129r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Views") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Views") > >() },
    { "p3130r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Container Interface") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Container Interface") >, Rev< 2u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Container Interface") >, Rev< 3u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Container Interface") > >() },
    { "p3131r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Containers") >, Rev< 1u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Containers") >, Rev< 2u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Containers") >, Rev< 3u, ArrHash< Hash("Andrew Lumsdaine"), Hash("Phillip Ratzloff") >(), wxS("Graph Library Graph Containers") > >() },
    { "p3133r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Charles Hogg") >(), wxS("Fast firstfactor finding function") > >() },
    { "p3135r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Extensions") >, Rev< 1u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Extensions") > >() },
    { "p3136r0", 1u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("Retiring niebloids") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("Retiring niebloids") > >() },
    { "p3137r0", 3u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("viewstoinput") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("viewstoinput") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("viewstoinput") >, Rev< 3u, ArrHash< Hash("R. Tim Song") >(), wxS("viewstoinput") > >() },
    { "p3138r0", 5u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelast") >, Rev< 1u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelast") >, Rev< 2u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelast") >, Rev< 3u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelatest") >, Rev< 4u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelatest") >, Rev< 5u, ArrHash< Hash("R. Tim Song") >(), wxS("viewscachelatest") > >() },
    { "p3139r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jordan Saxonberg"), Hash("Zhihao Yuan") >(), wxS("Pointer cast for uniqueptr") >, Rev< 1u, ArrHash< Hash("Jordan Saxonberg"), Hash("Zhihao Yuan") >(), wxS("Pointer cast for uniqueptr") > >() },
    { "p3140r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("stdintleastt") > >() },
    { "p3141r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hal T. Ng"), Hash("LLVM.edu"), Hash("Professor") >(), wxS("stdterminates") > >() },
    { "p3142r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Printing Blank Lines with println") > >() },
    { "p3143r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("An indepth walk through of the example in PR") > >() },
    { "p3144r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos"), Hash("Mungo Gill") >(), wxS("Deprecate Delete of Incomplete Class Type") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos"), Hash("Mungo Gill") >(), wxS("Deprecate Delete of Incomplete Class Type") >, Rev< 2u, ArrHash< Hash("Alisdair Meredith"), Hash("John Lakos"), Hash("Mungo Gill") >(), wxS("Deleting a Pointer to an Incomplete Type Should be Illformed") > >() },
    { "p3146r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Clarifying stdvariant converting construction") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Clarifying stdvariant converting construction") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Clarifying stdvariant converting construction") > >() },
    { "p3147r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("A Direction for Vector") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("A Direction for Vector") > >() },
    { "p3148r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("Formatting of chrono Time Values") >, Rev< 1u, ArrHash< Hash("Alan Talbot") >(), wxS("Formatting of chrono Time Values") > >() },
    { "p3149r0", 11u, RevList< Rev< 0u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 1u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 2u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 3u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 4u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 5u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 6u, ArrHash< Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 7u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 8u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 9u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 10u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") >, Rev< 11u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Ian Petersen"), Hash("J\\u00E1n Ondru\\u0161ek"), Hash("Jessica Wong"), Hash("Kirk Shoop"), Hash("Lee Howes"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("asyncscope  Creating scopes for nonsequential concurrency") > >() },
    { "p3150r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes ") > >() },
    { "p3151r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3152r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Add missing constructors and assignment for indirect and polymorphic") >, Rev< 1u, ArrHash< Hash("Antony Peacock"), Hash("Jonathan Coe"), Hash("Sean Parent") >(), wxS("Add missing constructors and assignment for indirect and polymorphic") > >() },
    { "p3153r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns"), Hash("Pablo Halpern"), Hash("Ville Voutilainen") >(), wxS("An allocatoraware variant type") > >() },
    { "p3154r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Elias Kosunen") >(), wxS("Deprecating signed character types in iostreams") >, Rev< 1u, ArrHash< Hash("Elias Kosunen") >(), wxS("Deprecating signed character types in iostreams") > >() },
    { "p3155r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Timur Doumler") >(), wxS("noexcept policy for SD The Lakos Rule") > >() },
    { "p3156r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("emptycheckablerange") > >() },
    { "p3157r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Bryce Adelstein Lelbach"), Hash("Michael Garland") >(), wxS("Generative Extensions for Reflection") >, Rev< 1u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Bryce Adelstein Lelbach"), Hash("Michael Garland") >(), wxS("Generative Extensions for Reflection") > >() },
    { "p3158r0", 0u, RevList< Rev< 0u, ArrHash< Hash("James Touton") >(), wxS("Headless Template Template Parameters") > >() },
    { "p3159r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("C Range Adaptors and Parallel Algorithms") > >() },
    { "p3160r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("An allocatoraware inplacevector") >, Rev< 1u, ArrHash< Hash("Pablo Halpern") >(), wxS("An allocatoraware inplacevector") >, Rev< 2u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Pablo Halpern") >(), wxS("An allocatoraware inplacevector") > >() },
    { "p3161r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Tiago Freire") >(), wxS("Unified integer overflow arithmetic") >, Rev< 1u, ArrHash< Hash("Tiago Freire") >(), wxS("Unified integer overflow arithmetic") >, Rev< 2u, ArrHash< Hash("Tiago Freire") >(), wxS("Unified integer overflow arithmetic") >, Rev< 3u, ArrHash< Hash("Tiago Freire") >(), wxS("Unified integer overflow arithmetic") >, Rev< 4u, ArrHash< Hash("Tiago Freire") >(), wxS("Unified integer overflow arithmetic") > >() },
    { "p3162r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel") >(), wxS("LEWG nodiscard policy") > >() },
    { "p3164r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Improving diagnostics for sender expressions") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Improving diagnostics for sender expressions") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Improving diagnostics for sender expressions") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("Early Diagnostics for Sender Expressions") >, Rev< 4u, ArrHash< Hash("Eric A Niebler") >(), wxS("Early Diagnostics for Sender Expressions") > >() },
    { "p3165r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Contracts on virtual functions for the Contracts MVP") > >() },
    { "p3166r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Static Exception Specifications") > >() },
    { "p3167r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Attributes for the result name in a postcondition assertion") > >() },
    { "p3168r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Marco Foco") >(), wxS("Give stdoptional Range Support") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Marco Foco") >(), wxS("Give stdoptional Range Support") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Marco Foco") >(), wxS("Give stdoptional Range Support") > >() },
    { "p3169r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("Inherited contracts") > >() },
    { "p3170r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("sinkable exception error message") > >() },
    { "p3171r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Peter Dimov") >(), wxS("Adding functionality to placeholder types") > >() },
    { "p3172r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Using this in constructor preconditions") > >() },
    { "p3173r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("PR may be minimimal but it is not viable") > >() },
    { "p3174r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p3175r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Reconsidering the stdexecutionon algorithm") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Reconsidering the stdexecutionon algorithm") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("Reconsidering the stdexecutionon algorithm") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("Reconsidering the stdexecutionon algorithm") > >() },
    { "p3176r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("The Oxford variadic comma") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("The Oxford variadic comma") > >() },
    { "p3177r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("const prvalues in the conditional operator") > >() },
    { "p3178r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("Retrieval of Exception Information") >, Rev< 1u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("Retrieval of Exception Information") > >() },
    { "p3179r0", 9u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 1u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 2u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 3u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 4u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 5u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 6u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 7u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 8u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") >, Rev< 9u, ArrHash< Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Ruslan Arutyunyan") >(), wxS("C parallel range algorithms") > >() },
    { "p3180r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Tokyo Mar ") > >() },
    { "p3181r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dave Claussen"), Hash("David Goldblatt"), Hash("Hans J. Boehm") >(), wxS("Atomic stores and object lifetimes") > >() },
    { "p3182r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Add popvalue methods to container adaptors") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Add container pop methods that return the popped value") > >() },
    { "p3183r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Contract testing support") >, Rev< 1u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Contract testing support") > >() },
    { "p3185r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas W Rodgers") >(), wxS("A proposed direction for C Standard Networking based on IETF TAPS") > >() },
    { "p3187r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Kirk Shoop"), Hash("Lewis Baker") >(), wxS("remove ensurestarted and startdetached from P") > >() },
    { "p3188r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Proxy A PointerSemanticsBased Polymorphism Library  Presentation slides for PR") > >() },
    { "p3189r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Slides for LEWG presentation of PR Contracts for C") > >() },
    { "p3190r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Slides for EWG presentation of DR Contracts for C") > >() },
    { "p3191r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne"), Hash("Yeoul Na") >(), wxS("Feedback on the scalability of contract violation handlers in P") > >() },
    { "p3192r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("LEWGISG Presentation of PR Bit Permutations") > >() },
    { "p3194r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("LEWGISG Presentation of PR constexpr stduncaughtexceptions") > >() },
    { "p3196r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the March  meeting") > >() },
    { "p3197r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer"), Hash("Timur Doumler") >(), wxS("A response to the Tokyo EWG polls on the Contracts MVP PR") > >() },
    { "p3198r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("A takeaway from the Tokyo LEWG meeting on Contracts MVP") > >() },
    { "p3199r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Choices for makeoptional and value") > >() },
    { "p3201r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Jonathan Wakely") >(), wxS("LEWG nodiscard policy") >, Rev< 1u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Jonathan Wakely") >(), wxS("LEWG nodiscard policy") > >() },
    { "p3203r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Klemens Morgenstern") >(), wxS("Implementation defined coroutine extensions") > >() },
    { "p3204r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Why Contracts") > >() },
    { "p3205r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Zissu"), Hash("Ben Craig"), Hash("Ga\\u0161per A\\u017Eman"), Hash("Jeff Snyder") >(), wxS("Throwing from a noexcept function should be a contract violation") > >() },
    { "p3206r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Maikel Nadolski") >(), wxS("A sender query for completion behaviour") > >() },
    { "p3207r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("More  like") > >() },
    { "p3208r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sunghyun Min") >(), wxS("import std and stream macros") > >() },
    { "p3210r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("A Postcondition is a Pattern Match") >, Rev< 1u, ArrHash< Hash("Andrew Tomazos") >(), wxS("A Postcondition is a Pattern Match") >, Rev< 2u, ArrHash< Hash("Andrew Tomazos") >(), wxS("A Postcondition is a Pattern Match") > >() },
    { "p3211r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewstransformjoin") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsflatmap") > >() },
    { "p3212r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("The contract of sort") > >() },
    { "p3213r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3214r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3215r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("Slides Thread Attributes as Designators PR presentation") > >() },
    { "p3216r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsslice") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsslice") > >() },
    { "p3217r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Adjoints to Enabling listinitialization for algorithms findlast") > >() },
    { "p3218r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("const references to constexpr variables") > >() },
    { "p3220r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsdelimit") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("viewstakebefore") > >() },
    { "p3221r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("Disable pointers to contracted functions") > >() },
    { "p3222r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by adding transposed special cases for P layouts") >, Rev< 1u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by adding transposed special cases for P layouts") > >() },
    { "p3223r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Making stdbasicistreamignore less surprising") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Making stdistreamignore less surprising") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Making stdistreamignore less surprising") > >() },
    { "p3224r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for P  Make directinitialization for enumeration types at least as permissive as direct") > >() },
    { "p3225r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for P stdintleastt") > >() },
    { "p3226r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts for C Naming the Louis semantic") > >() },
    { "p3227r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Timur Doumler") >(), wxS("Contracts for C Fixing the contract violation handling API") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Timur Doumler") >(), wxS("Fixing the library API for contract violation handling") > >() },
    { "p3228r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts for C Revisiting contract check elision and duplication") >, Rev< 1u, ArrHash< Hash("Timur Doumler") >(), wxS("Contracts for C Revisiting contract check elision and duplication") > >() },
    { "p3229r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Making erroneous behaviour compatible with Contracts") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Making erroneous behaviour compatible with Contracts") > >() },
    { "p3230r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewstakedropexactly") >, Rev< 1u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsuncheckedtakedrop") >, Rev< 2u, ArrHash< Hash("Hewill Kang") >(), wxS("viewsuncheckedtakedrop") > >() },
    { "p3232r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Userdefined erroneous behaviour") >, Rev< 1u, ArrHash< Hash("Thomas K\\u00F6ppe") >(), wxS("Userdefined erroneous behaviour") > >() },
    { "p3233r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Issues with P Trivial Relocatability For C") > >() },
    { "p3234r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Glen Joseph Fernandes") >(), wxS("Utility to check if a pointer is in a given range") >, Rev< 1u, ArrHash< Hash("Glen Joseph Fernandes") >(), wxS("Utility to check if a pointer is in a given range") > >() },
    { "p3235r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdprint more types faster with less memory") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdprint more types faster with less memory") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdprint more types faster with less memory") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("stdprint more types faster with less memory") > >() },
    { "p3236r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alan de Freitas"), Hash("Daniel Liam Anderson"), Hash("Giuseppe D\\u2019Angelo"), Hash("Hans Goudey"), Hash("Hartmut Kaiser"), Hash("Isidoros Tsaousis"), Hash("Jacques Lucke"), Hash("Krystian Stasiowski"), Hash("Shreyas Atre"), Hash("St\\u00E9phane Janel"), Hash("Thiago Maciera") >(), wxS("Please reject P and adopt P") >, Rev< 1u, ArrHash< Hash("Alan de Freitas"), Hash("Daniel Liam Anderson"), Hash("Giuseppe D\\u2019Angelo"), Hash("Hans Goudey"), Hash("Jacques Lucke"), Hash("Krystian Stasiowski"), Hash("St\\u00E9phane Janel"), Hash("Thiago Maciera") >(), wxS("Please reject P and adopt P") > >() },
    { "p3237r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrei Zissu") >(), wxS("Matrix Representation of Contract Semantics") >, Rev< 1u, ArrHash< Hash("Andrei Zissu") >(), wxS("Matrix Representation of Contract Semantics") >, Rev< 2u, ArrHash< Hash("Andrei Zissu") >(), wxS("Matrix Representation of Contract Semantics") > >() },
    { "p3238r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("An alternate proposal for naming contract semantics") > >() },
    { "p3239r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Relocating Swap") > >() },
    { "p3240r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Slides for EWGI presentation on allocators Tokyo ") > >() },
    { "p3241r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Slides for LEWG presentation on trivial relocation April ") > >() },
    { "p3242r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Copy and fill for mdspan") >, Rev< 1u, ArrHash< Hash("Christian Trott"), Hash("Damien Lebrun-Grandie"), Hash("Mark Hoemmen"), Hash("Nicolas Manual Morales") >(), wxS("Copy and fill for mdspan") > >() },
    { "p3243r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Darius Nea\\u021Bu"), Hash("David Sankel"), Hash("Marco Foco") >(), wxS("Give stdoptional Range Support  Presentation Tokyo ") > >() },
    { "p3244r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Darius Nea\\u021Bu"), Hash("David Sankel") >(), wxS("nodiscard Policy  Presentation Tokyo ") > >() },
    { "p3245r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Xavier Bonaventura") >(), wxS("Allow nodiscard in type alias declarations") >, Rev< 1u, ArrHash< Hash("Xavier Bonaventura") >(), wxS("Allow nodiscard in type alias declarations") >, Rev< 2u, ArrHash< Hash("Xavier Bonaventura") >(), wxS("Allow nodiscard in type alias declarations") > >() },
    { "p3247r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Deprecate the notion of trivial types") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Deprecate the notion of trivial types") >, Rev< 2u, ArrHash< Hash("Jens Maurer") >(), wxS("Deprecate the notion of trivial types") > >() },
    { "p3248r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Require uintptrt") >, Rev< 1u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Require uintptrt") >, Rev< 2u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Require uintptrt") >, Rev< 3u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Require uintptrt") >, Rev< 4u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("Require uintptrt") > >() },
    { "p3249r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ran Regev") >(), wxS("A unified syntax for Pattern Matching and Contracts when introducing a new name") > >() },
    { "p3250r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("C contracts with regards to function pointers") > >() },
    { "p3251r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("C contracts and coroutines") > >() },
    { "p3253r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Distinguishing between member and free coroutines") > >() },
    { "p3254r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Reserve identifiers preceded by  for nonignorable annotation tokens") > >() },
    { "p3255r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Expose whether atomic notifying operations are lockfree") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Expose whether atomic notifying operations are lockfree") > >() },
    { "p3257r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Make the predicate of contractassert more regular") > >() },
    { "p3258r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Formatting charNt") > >() },
    { "p3259r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("const by default") > >() },
    { "p3261r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Revisiting constification in Contract Assertions") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Revisiting constification in Contract Assertions") >, Rev< 2u, ArrHash< Hash("Joshua Berne") >(), wxS("Revisiting constification in Contract Assertions") > >() },
    { "p3263r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tiago Freire") >(), wxS("Encoded annotated char") > >() },
    { "p3264r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Doubleevaluation of preconditions") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Doubleevaluation of preconditions") > >() },
    { "p3265r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ship Contracts in a TS") >, Rev< 1u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ship Contracts in a TS") >, Rev< 2u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ship Contracts in a TS") >, Rev< 3u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ship Contracts in a TS") > >() },
    { "p3266r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("non referenceable types") > >() },
    { "p3267r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("C contracts implementation strategies") >, Rev< 1u, ArrHash< Hash("Peter Bindels"), Hash("Tom Honermann") >(), wxS("Approaches to C Contracts") > >() },
    { "p3268r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("C Contracts Constification Challenges Concerning Current Code") > >() },
    { "p3269r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer"), Hash("Timur Doumler") >(), wxS("Do Not Ship Contracts as a TS") > >() },
    { "p3270r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Repetition Elision and Constification wrt contractassert") > >() },
    { "p3271r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Function Usage Types Contracts for Function Pointers") >, Rev< 1u, ArrHash< Hash("Lisa Lippincott") >(), wxS("Function Types with Usage Contracts for Function Pointers") > >() },
    { "p3273r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Daveed Vandevoorde"), Hash("David Olsen"), Hash("Michael Garland") >(), wxS("Introspection of Closure Types") > >() },
    { "p3274r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("A framework for Profiles development") > >() },
    { "p3275r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Replace simd operator with getter and setter functions  or not") > >() },
    { "p3276r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Jake Fevold"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Mungo Gill"), Hash("Rostislav Khlebnikov"), Hash("Steve Downey") >(), wxS("P Is Superior to a Contracts TS") > >() },
    { "p3278r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nina Dinka Ranns") >(), wxS("Analysis of interaction between relocation assignment and swap") > >() },
    { "p3279r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("CWG What trivially fooable should mean") > >() },
    { "p3281r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Contact checks should be regular C") > >() },
    { "p3282r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Static Storage for C Concurrent boundedqueue") > >() },
    { "p3283r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Rhidian De Wit") >(), wxS("Adding first and last to strings") > >() },
    { "p3284r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("finally writeenv and unstoppable Sender Adaptors") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("finally writeenv and unstoppable Sender Adaptors") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("writeenv and unstoppable Sender Adaptors") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("writeenv and unstoppable Sender Adaptors") >, Rev< 4u, ArrHash< Hash("Eric A Niebler") >(), wxS("writeenv and unstoppable Sender Adaptors") > >() },
    { "p3285r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("Contracts Protecting The Protector") > >() },
    { "p3286r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("Module Metadata Format for Distribution with PreBuilt Libraries") > >() },
    { "p3287r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Exploration of namespaces for stdsimd") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Exploration of namespaces for stdsimd") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Exploration of namespaces for stdsimd") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("Exploration of namespaces for stdsimd") > >() },
    { "p3288r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("stdelide") >, Rev< 1u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("stdelide") >, Rev< 2u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("stdelide") >, Rev< 3u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("stdelide") > >() },
    { "p3289r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Consteval blocks") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Consteval blocks") > >() },
    { "p3290r0", 3u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Integrating Existing Assertions With Contracts") >, Rev< 1u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Integrating Existing Assertions With Contracts") >, Rev< 2u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Integrating Existing Assertions With Contracts") >, Rev< 3u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Integrating Existing Assertions With Contracts") > >() },
    { "p3292r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Goldblatt") >(), wxS("Provenance and Concurrency") > >() },
    { "p3293r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov") >(), wxS("Splicing a base class subobject") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov") >(), wxS("Splicing a base class subobject") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov") >(), wxS("Splicing a base class subobject") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov") >(), wxS("Splicing a base class subobject") > >() },
    { "p3294r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde") >(), wxS("Code Injection with Token Sequences") >, Rev< 1u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde") >(), wxS("Code Injection with Token Sequences") >, Rev< 2u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde") >(), wxS("Code Injection with Token Sequences") > >() },
    { "p3295r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding constexpr containers and constexpr exception types") >, Rev< 1u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding constexpr containers and constexpr exception types") >, Rev< 2u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding constexpr containers and constexpr exception types") >, Rev< 3u, ArrHash< Hash("Ben Craig") >(), wxS("Freestanding constexpr containers and constexpr exception types") > >() },
    { "p3296r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams") >(), wxS("letwithasyncscope") >, Rev< 1u, ArrHash< Hash("Anthony Williams") >(), wxS("letwithasyncscope") >, Rev< 2u, ArrHash< Hash("Anthony Williams") >(), wxS("letasyncscope") >, Rev< 3u, ArrHash< Hash("Anthony Williams") >(), wxS("letasyncscope") >, Rev< 4u, ArrHash< Hash("Anthony Williams") >(), wxS("letasyncscope") > >() },
    { "p3297r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Christian Eltzschig"), Hash("Jean-Francois Campeau"), Hash("Mathias Kraus"), Hash("Pez Zarifian"), Hash("Ryan McDougall") >(), wxS("C Needs Contract Checking") >, Rev< 1u, ArrHash< Hash("Christian Eltzschig"), Hash("Jean-Francois Campeau"), Hash("Mathias Kraus"), Hash("Pez Zarifian"), Hash("Ryan McDougall") >(), wxS("C Needs Contract Checking") > >() },
    { "p3298r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Implicit userdefined conversion functions as operator") >, Rev< 1u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Implicit userdefined conversion functions as operator") > >() },
    { "p3299r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz") >(), wxS("Range constructors for stdsimd") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Range constructors for stdsimd") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Range constructors for stdsimd") >, Rev< 3u, ArrHash< Hash("Daniel Towner"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Range constructors for stdsimd") > >() },
    { "p3300r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach") >(), wxS("C Asynchronous Parallel Algorithms") > >() },
    { "p3301r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("inplacestoppablebase") > >() },
    { "p3302r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("SG Unicode meeting summaries  through ") > >() },
    { "p3303r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Fixing Lazy Sender Algorithm Customization") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("Fixing Lazy Sender Algorithm Customization") > >() },
    { "p3304r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes ") > >() },
    { "p3305r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3306r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Damien Lebrun-Grandie"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Atomic ReadModifyWrite Improvements") > >() },
    { "p3307r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("FloatingPoint MaximumMinimum Function Objects") > >() },
    { "p3308r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Trott"), Hash("Mark Hoemmen") >(), wxS("mdarray design questions and answers") > >() },
    { "p3309r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr atomic and atomicref") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr atomic and atomicref") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr atomic and atomicref") >, Rev< 3u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr atomic and atomicref") > >() },
    { "p3310r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving partial ordering issues introduced by PR") >, Rev< 1u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving partial ordering issues introduced by PR") >, Rev< 2u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving partial ordering issues introduced by PR") >, Rev< 3u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving partial ordering issues introduced by PR") >, Rev< 4u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving issues introduced by PR") >, Rev< 5u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Solving issues introduced by relaxed template template parameter matching") >, Rev< 6u, ArrHash< Hash("James Touton"), Hash("Matheus Izvekov") >(), wxS("Solving issues introduced by relaxed template template parameter matching") > >() },
    { "p3311r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("An optin approach for integration of traditional assert facilities in C contracts") > >() },
    { "p3312r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Overload Set Types") >, Rev< 1u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Overload Set Types") > >() },
    { "p3313r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Khalil Estell") >(), wxS("Impacts of noexept on ARM table based exception metadata") > >() },
    { "p3314r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3315r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3316r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("A more predictable unchecked semantic") > >() },
    { "p3317r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("Compile time resolved contracts") > >() },
    { "p3318r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Throwing violation handlers from an application programming perspective") > >() },
    { "p3319r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") >, Rev< 4u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") >, Rev< 5u, ArrHash< Hash("Matthias Kretz") >(), wxS("Add an iota object for simd and more") > >() },
    { "p3320r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("EWG slides for P Delete if Incomplete") > >() },
    { "p3321r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Contracts Interaction With Tooling") > >() },
    { "p3323r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("cvqualified types in atomic and atomicref") >, Rev< 1u, ArrHash< Hash("Gonzalo Brito Gadeschi") >(), wxS("cvqualified types in atomic and atomicref") > >() },
    { "p3324r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Tom Honermann") >(), wxS("Attributes for namespace aliases template parameters and lambda captures") > >() },
    { "p3325r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") >, Rev< 4u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") >, Rev< 5u, ArrHash< Hash("Eric A Niebler") >(), wxS("A Utility for Creating Execution Environments") > >() },
    { "p3326r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("favor ease of use") > >() },
    { "p3327r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Contract assertions on function pointers") > >() },
    { "p3328r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Observable Checkpoints During Contract Evaluation") > >() },
    { "p3329r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Healing the C Filter View") > >() },
    { "p3330r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Damien Lebrun-Grandie"), Hash("Gonzalo Brito Gadeschi") >(), wxS("Userdefined Atomic ReadModifyWrite Operations") > >() },
    { "p3331r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nikita Sakharin") >(), wxS("Accessing The First and Last Elements in Associative Containers") >, Rev< 1u, ArrHash< Hash("Nikita Sakharin") >(), wxS("Accessing The First and Last Elements in Associative Containers") > >() },
    { "p3332r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("A simpler notation for PM") > >() },
    { "p3334r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrei Zissu"), Hash("Coral Kashri"), Hash("Inbal Levi"), Hash("Tal Yaakovi") >(), wxS("Cross Static Variables") > >() },
    { "p3335r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Core Options") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Core Options") >, Rev< 2u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Core Options") >, Rev< 3u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Structured Core Options") >, Rev< 4u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN Structured Core Options") > >() },
    { "p3336r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Usage Experience for Contracts with BDE") > >() },
    { "p3338r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Observe and ignore semantics in constant evaluation") > >() },
    { "p3339r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jayesh Badwaik"), Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("C Ecosystem IS Open License") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN C Ecosystem IS Open License") > >() },
    { "p3340r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Consistent Grammar for Sequences") > >() },
    { "p3341r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in St Louis Jun ") > >() },
    { "p3342r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Working Draft Standard for C Ecosystem") >, Rev< 1u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("Working Draft Standard for C Ecosystem") >, Rev< 2u, ArrHash< Hash("Ren\\u00E9 Ferdinand Rivera Morell") >(), wxS("WITHDRAWN Working Draft Standard for C Ecosystem") > >() },
    { "p3343r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Contracts  What are we doing here EWG Presentation") > >() },
    { "p3344r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Lisa Lippincott"), Hash("Timur Doumler") >(), wxS("Virtual Functions on Contracts EWG  Presentation for P") > >() },
    { "p3345r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the June  meeting") > >() },
    { "p3346r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nat Goodspeed") >(), wxS("threadlocal means fiberspecific") > >() },
    { "p3347r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("InvalidProspective Pointer Operations") >, Rev< 1u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("InvalidProspective Pointer Operations") >, Rev< 2u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("InvalidProspective Pointer Operations") >, Rev< 3u, ArrHash< Hash("Anthony Williams"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Martin Uecker"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("InvalidProspective Pointer Operations") > >() },
    { "p3348r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C should refer to C not C") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C should refer to C not C") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C should refer to C not C") >, Rev< 3u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C should refer to C not C") >, Rev< 4u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C should refer to C not C") > >() },
    { "p3349r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Converting contiguous iterators to pointers") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Converting contiguous iterators to pointers") > >() },
    { "p3351r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Yihe Li") >(), wxS("viewsscan") >, Rev< 1u, ArrHash< Hash("Yihe Li") >(), wxS("viewsscan") >, Rev< 2u, ArrHash< Hash("Yihe Li") >(), wxS("viewsscan") > >() },
    { "p3352r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos"), Hash("Martin Uecker") >(), wxS("Taming the Demons C version  Undefined Behavior and Partial Program Correctness") > >() },
    { "p3354r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Slides for PR") > >() },
    { "p3355r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix submdspan for C") >, Rev< 1u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix submdspan for C") >, Rev< 2u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix submdspan for C") > >() },
    { "p3356r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("noninvalidatingvector") > >() },
    { "p3357r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas P. K. Healy") >(), wxS("NRVO with factory and afterfactory") > >() },
    { "p3358r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sy Brand") >(), wxS("SARIF for Structured Diagnostics") > >() },
    { "p3359r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Slides for PR  Implicit conversion functions") > >() },
    { "p3360r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("Slides for PR  Overload Set Types") > >() },
    { "p3361r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Esa Pulkkinen") >(), wxS("Class invariants and contract checking philosophy") >, Rev< 1u, ArrHash< Hash("Esa Pulkkinen") >(), wxS("Class invariants and contract checking philosophy") > >() },
    { "p3362r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Static analysis and safety of Contracts P vs PP") > >() },
    { "p3364r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated upath overloads From C") > >() },
    { "p3365r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove the Deprecated iterator Class Template from C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove the Deprecated iterator Class Template from C") > >() },
    { "p3366r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Atomic Initialization API from C") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Remove Deprecated Atomic Initialization API from C") > >() },
    { "p3367r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr coroutines") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr coroutines") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr coroutines") >, Rev< 3u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr coroutines") >, Rev< 4u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr coroutines") > >() },
    { "p3369r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("constexpr for uninitializeddefaultconstruct") > >() },
    { "p3370r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Add new library headers from C") >, Rev< 1u, ArrHash< Hash("Jens Maurer") >(), wxS("Add new library headers from C") > >() },
    { "p3371r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Fix C by making the symmetric and Hermitian rankk and rankk updates consistent with the BLAS") >, Rev< 1u, ArrHash< Hash("Ilya Burylov"), Hash("Mark Hoemmen") >(), wxS("Fix C by making the rank rank rankk and rankk updates consistent with the BLAS") >, Rev< 2u, ArrHash< Hash("Ilya Burylov"), Hash("Mark Hoemmen") >(), wxS("Fix C by making the rank rank rankk and rankk updates consistent with the BLAS") >, Rev< 3u, ArrHash< Hash("Ilya Burylov"), Hash("Mark Hoemmen") >(), wxS("Fix C by making the rank rank rankk and rankk updates consistent with the BLAS") >, Rev< 4u, ArrHash< Hash("Ilya Burylov"), Hash("Mark Hoemmen") >(), wxS("Fix C by making the rank rank rankk and rankk updates consistent with the BLAS") > >() },
    { "p3372r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr containers and adapters") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr containers and adapters") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr containers and adapters") >, Rev< 3u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr containers and adapters") > >() },
    { "p3373r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Of Operation States and Their Lifetimes") >, Rev< 1u, ArrHash< Hash("Robert Leahy") >(), wxS("Of Operation States and Their Lifetimes") > >() },
    { "p3374r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Liang Jiaming") >(), wxS("Adding formatter for fpos") >, Rev< 1u, ArrHash< Hash("Liang Jiaming") >(), wxS("Adding formatter for fpos") > >() },
    { "p3375r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Guy Davidson") >(), wxS("Reproducible floatingpoint results") >, Rev< 1u, ArrHash< Hash("Guy Davidson") >(), wxS("Reproducible floatingpoint results") >, Rev< 2u, ArrHash< Hash("Guy Davidson") >(), wxS("Reproducible floatingpoint results") >, Rev< 3u, ArrHash< Hash("Guy Davidson") >(), wxS("Reproducible floatingpoint results") > >() },
    { "p3376r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Contract assertions versus static analysis and safety") > >() },
    { "p3378r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr exception types") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr exception types") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr exception types") > >() },
    { "p3379r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("Constrain stdexpected equality operators") > >() },
    { "p3380r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Extending support for class types as nontype template parameters") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("Extending support for class types as nontype template parameters") > >() },
    { "p3381r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Sutton"), Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Faisal Vali"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("Syntax for Reflection") > >() },
    { "p3382r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Antony Polukhin") >(), wxS("Coarse clocks and resolutions") > >() },
    { "p3383r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Stephan Lachnit"), Hash("Xavier Bonaventura") >(), wxS("mdspanat") >, Rev< 1u, ArrHash< Hash("Stephan Lachnit"), Hash("Xavier Bonaventura") >(), wxS("mdspanat") >, Rev< 2u, ArrHash< Hash("Stephan Lachnit"), Hash("Xavier Bonaventura") >(), wxS("mdspanat") >, Rev< 3u, ArrHash< Hash("Stephan Lachnit"), Hash("Xavier Bonaventura") >(), wxS("mdspanat") > >() },
    { "p3384r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Rifkin") >(), wxS("COUNTER") > >() },
    { "p3385r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Anders Johansson"), Hash("Aurelien Cassagnes"), Hash("Roman Khoroshikh") >(), wxS("Attributes reflection") >, Rev< 1u, ArrHash< Hash("Anders Johansson"), Hash("Aurelien Cassagnes"), Hash("Roman Khoroshikh") >(), wxS("Attributes reflection") >, Rev< 2u, ArrHash< Hash("Anders Johansson"), Hash("Aurelien Cassagnes"), Hash("Roman Khoroshikh") >(), wxS("Attributes reflection") >, Rev< 3u, ArrHash< Hash("Anders Johansson"), Hash("Aurelien Cassagnes"), Hash("Roman Khoroshikh") >(), wxS("Attributes reflection") >, Rev< 4u, ArrHash< Hash("Aurelien Cassagnes") >(), wxS("Attributes reflection") >, Rev< 5u, ArrHash< Hash("Aurelien Cassagnes") >(), wxS("Attributes reflection") > >() },
    { "p3386r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Static Analysis of Contracts with P") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Static Analysis of Contracts with P") > >() },
    { "p3387r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Iain Sandoe"), Hash("Joshua Berne"), Hash("Peter Bindels"), Hash("Timur Doumler") >(), wxS("Contract assertions on coroutines") > >() },
    { "p3388r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("When Do You Know connect Doesnt Throw") >, Rev< 1u, ArrHash< Hash("Robert Leahy") >(), wxS("When Do You Know connect Doesnt Throw") >, Rev< 2u, ArrHash< Hash("Robert Leahy") >(), wxS("When Do You Know connect Doesnt Throw") > >() },
    { "p3389r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Of Operation States and Their Lifetimes LEWG Presentation ") > >() },
    { "p3390r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Christian Mazakas"), Hash("Sean Baxter") >(), wxS("Safe C") > >() },
    { "p3391r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr stdformat") >, Rev< 1u, ArrHash< Hash("Barry Revzin") >(), wxS("constexpr stdformat") > >() },
    { "p3392r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Inbal Levi") >(), wxS("Do not promise support for function syntax of operators") > >() },
    { "p3394r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Annotations for Reflection") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Annotations for Reflection") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Annotations for Reflection") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Annotations for Reflection") >, Rev< 4u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Wyatt Childers") >(), wxS("Annotations for Reflection") > >() },
    { "p3395r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Victor Zverovich") >(), wxS("Formatting of stderrorcode") >, Rev< 1u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix encoding issues and add a formatter for stderrorcode") >, Rev< 2u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix encoding issues and add a formatter for stderrorcode") >, Rev< 3u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix encoding issues and add a formatter for stderrorcode") >, Rev< 4u, ArrHash< Hash("Victor Zverovich") >(), wxS("Fix encoding issues and add a formatter for stderrorcode") > >() },
    { "p3396r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("stdexecution wording fixes") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("stdexecution wording fixes") > >() },
    { "p3397r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Clarify requirements on extended floating point types") > >() },
    { "p3398r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson") >(), wxS("User specified type decay") > >() },
    { "p3399r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Khalil Estell"), Hash("Nevin Liber"), Hash("Robert Leahy") >(), wxS("Adjusting Electronic Polls to a Hybrid Workflow") > >() },
    { "p3400r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne") >(), wxS("Specifying Contract Assertion Properties with Labels") >, Rev< 1u, ArrHash< Hash("Joshua Berne") >(), wxS("Specifying Contract Assertion Properties with Labels") > >() },
    { "p3401r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang"), Hash("Tian Liao") >(), wxS("Enrich Creation Functions for the PointerSemanticsBased Polymorphism Library  Proxy") > >() },
    { "p3402r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Charles-Henri Gros"), Hash("Christopher Lapkowski"), Hash("Marc-Andr\\u00E9 Laverdi\\u00E8re") >(), wxS("A Safety Profile Verifying Class Initialization") >, Rev< 1u, ArrHash< Hash("Charles-Henri Gros"), Hash("Christopher Lapkowski"), Hash("Marc-Andr\\u00E9 Laverdi\\u00E8re") >(), wxS("A Safety Profile Verifying Class Initialization") >, Rev< 2u, ArrHash< Hash("Charles-Henri Gros"), Hash("Christopher Lapkowski"), Hash("Marc-Andr\\u00E9 Laverdi\\u00E8re") >(), wxS("A Safety Profile Verifying Initialization") >, Rev< 3u, ArrHash< Hash("Charles-Henri Gros"), Hash("Christopher Lapkowski"), Hash("Marc-Andr\\u00E9 Laverdi\\u00E8re") >(), wxS("A Safety Profile Verifying Initialization") > >() },
    { "p3403r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrew Tomazos") >(), wxS("The Undefined Behavior Question") > >() },
    { "p3404r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andre Kostur") >(), wxS("stdat  Rangechecked accesses to arbitrary containers") > >() },
    { "p3405r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Elias Kosunen") >(), wxS("Outoforder designated initializers") > >() },
    { "p3406r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("We need better performance testing") > >() },
    { "p3407r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Make idiomatic usage of offsetof welldefined") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Make idiomatic usage of offsetof welldefined") > >() },
    { "p3409r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Enabling more efficient stoptoken based cancellation of senders") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("Enabling more efficient stoptoken based cancellation of senders") > >() },
    { "p3411r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Hui Xie"), Hash("Louis Dionne"), Hash("S. Levent Yilmaz") >(), wxS("anyview") >, Rev< 1u, ArrHash< Hash("Hui Xie"), Hash("Louis Dionne"), Hash("S. Levent Yilmaz") >(), wxS("anyview") >, Rev< 2u, ArrHash< Hash("Hui Xie"), Hash("Louis Dionne"), Hash("Patrick Roberts"), Hash("S. Levent Yilmaz") >(), wxS("anyview") >, Rev< 3u, ArrHash< Hash("Hui Xie"), Hash("Louis Dionne"), Hash("Patrick Roberts"), Hash("S. Levent Yilmaz") >(), wxS("anyview") > >() },
    { "p3412r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Bengt Gustafsson"), Hash("Victor Zverovich") >(), wxS("String interpolation") >, Rev< 1u, ArrHash< Hash("Bengt Gustafsson"), Hash("Victor Zverovich") >(), wxS("String interpolation") >, Rev< 2u, ArrHash< Hash("Bengt Gustafsson"), Hash("Victor Zverovich") >(), wxS("String interpolation") > >() },
    { "p3413r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("A more flexible optionalvalueor else") > >() },
    { "p3415r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Range interface in stdoptional breaks code") > >() },
    { "p3416r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("exceptionptrcast Add   delete overload") > >() },
    { "p3417r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Timur Doumler") >(), wxS("Improving the handling of exceptions thrown from contract predicates") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Timur Doumler") >(), wxS("Handling exceptions thrown from contract predicates") > >() },
    { "p3419r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Levine") >(), wxS("Reflection Syntax Options Summary") > >() },
    { "p3420r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Michael Garland") >(), wxS("Reflection of Templates") >, Rev< 1u, ArrHash< Hash("Andrei Alexandrescu"), Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Michael Garland") >(), wxS("Reflection of Templates") > >() },
    { "p3421r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig") >(), wxS("Consteval destructors") > >() },
    { "p3422r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow main function in named modules") >, Rev< 1u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow main function in named modules") > >() },
    { "p3423r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Yihe Li") >(), wxS("Extending UserGenerated Diagnostic Messages") >, Rev< 1u, ArrHash< Hash("Yihe Li") >(), wxS("Extending UserGenerated Diagnostic Messages") > >() },
    { "p3424r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Define Delete With Throwing Exception Specification") > >() },
    { "p3425r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Reducing operationstate sizes for subobject child operations") >, Rev< 1u, ArrHash< Hash("Lewis Baker") >(), wxS("Reducing operationstate sizes for subobject child operations") > >() },
    { "p3427r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Synchronous Reclamation") >, Rev< 1u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Synchronous Reclamation") > >() },
    { "p3428r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Batches") >, Rev< 1u, ArrHash< Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("Hazard Pointer Batches") > >() },
    { "p3429r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Reflection header should minimize standard library dependencies") >, Rev< 1u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Reflection header should minimize standard library dependencies") > >() },
    { "p3430r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("simd issues explicit unsequenced identityelement position and members of disabled simd") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("simd issues explicit unsequenced identityelement position and members of disabled simd") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("simd issues explicit unsequenced identityelement position and members of disabled simd") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("simd issues explicit unsequenced identityelement position and members of disabled simd") > >() },
    { "p3431r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Deprecate constqualifier on beginend of views") > >() },
    { "p3433r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("Allocator Support for Operation States") >, Rev< 1u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("Allocator Support for Operation States") > >() },
    { "p3435r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jean-Baptiste VALLON HOARAU"), Hash("Jo\\u00EBl Falcou") >(), wxS("Reflection and metaprogramming") > >() },
    { "p3436r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Strategy for removing safetyrelated undefined behavior by default") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Strategy for removing safetyrelated undefined behavior by default") > >() },
    { "p3437r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Proposed default principles Reflect C Generate C") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Proposed principles Reflect C generate C by default") > >() },
    { "p3438r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Fertig") >(), wxS("Make integral overloads of stdtostring constexpr") > >() },
    { "p3439r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Chained comparisons Safe correct efficient") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Chained comparisons Safe correct efficient") >, Rev< 2u, ArrHash< Hash("Herb Sutter") >(), wxS("Chained comparisons Safe correct efficient") >, Rev< 3u, ArrHash< Hash("Herb Sutter") >(), wxS("Chained comparisons Safe correct efficient") > >() },
    { "p3440r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Add nelements named constructor to stdsimd") >, Rev< 1u, ArrHash< Hash("Daniel Towner") >(), wxS("Add nelements named constructor to stdsimd") > >() },
    { "p3441r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Rename simdsplit to simdchunk") >, Rev< 1u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Rename simdsplit to simdchunk") >, Rev< 2u, ArrHash< Hash("Daniel Towner"), Hash("Ruslan Arutyunyan") >(), wxS("Rename simdsplit to simdchunk") > >() },
    { "p3442r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Nicolas Fleury"), Hash("Patrice Roy") >(), wxS("invalidatedereferencing attribute") >, Rev< 1u, ArrHash< Hash("Nicolas Fleury"), Hash("Patrice Roy") >(), wxS("invalidatedereferencing attribute") >, Rev< 2u, ArrHash< Hash("Nicolas Fleury"), Hash("Patrice Roy") >(), wxS("invalidatedereferencing attribute") > >() },
    { "p3443r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ran Regev") >(), wxS("Reflection on SG  Process") > >() },
    { "p3444r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Sean Baxter") >(), wxS("Memory safety without lifetime parameters") > >() },
    { "p3445r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Towner") >(), wxS("Add utilities for easier typebit casting in stdsimd") > >() },
    { "p3446r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Profile invalidation  eliminating dangling pointers") > >() },
    { "p3447r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Profiles syntax") > >() },
    { "p3449r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr stdgenerator") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr stdgenerator") > >() },
    { "p3450r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Extending iswithinlifetime") > >() },
    { "p3451r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("A Suggestion for Reflection Access Control") > >() },
    { "p3454r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Fedor Pikus"), Hash("Gonzalo Brito Gadeschi"), Hash("Maged M. Michael"), Hash("Michael Wong") >(), wxS("Revising Atomic MaxMin Operations") > >() },
    { "p3455r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes ") > >() },
    { "p3456r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gor Nishanov") >(), wxS("systemscheduler on Win Darwin and Linux") > >() },
    { "p3457r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3460r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric Fiselier"), Hash("Iain Sandoe"), Hash("Nina Dinka Ranns") >(), wxS("Contracts Implementors Report") > >() },
    { "p3465r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Pursue P as a Lifetime TS") > >() },
    { "p3466r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Herb Sutter") >(), wxS("Reaffirm design principles for future C evolution") >, Rev< 1u, ArrHash< Hash("Herb Sutter") >(), wxS("Reaffirm design principles for future C evolution") > >() },
    { "p3467r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3468r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ben Craig"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3469r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spertus") >(), wxS("Virtual deducing this") > >() },
    { "p3470r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daniel Ruoso") >(), wxS("InterfaceUnitOnly Module Library Support") > >() },
    { "p3471r0", 4u, RevList< Rev< 0u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Standard library hardening") >, Rev< 1u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Standard Library Hardening") >, Rev< 2u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Standard Library Hardening") >, Rev< 3u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Standard Library Hardening") >, Rev< 4u, ArrHash< Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Standard Library Hardening") > >() },
    { "p3472r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Make fibercontextcanresume const") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Make fibercontextcanresume const") > >() },
    { "p3473r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Splicing Should Respect Access Control") > >() },
    { "p3474r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Rifkin") >(), wxS("stdarguments") > >() },
    { "p3475r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Defang and deprecate memoryorderconsume") >, Rev< 1u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Defang and deprecate memoryorderconsume") >, Rev< 2u, ArrHash< Hash("Hans J. Boehm") >(), wxS("Defang and deprecate memoryorderconsume") > >() },
    { "p3476r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Park") >(), wxS("Slides for PR  Pattern Matching match Expression") > >() },
    { "p3477r0", 5u, RevList< Rev< 0u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") >, Rev< 1u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") >, Rev< 2u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") >, Rev< 3u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") >, Rev< 4u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") >, Rev< 5u, ArrHash< Hash("JF Bastien") >(), wxS("There are exactly  bits in a byte") > >() },
    { "p3478r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John H. Spicer") >(), wxS("Constification should not be part of the MVP") > >() },
    { "p3479r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Cranmer") >(), wxS("Enabling C pragma support in C") > >() },
    { "p3480r0", 6u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 2u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 3u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 4u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 5u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") >, Rev< 6u, ArrHash< Hash("Matthias Kretz") >(), wxS("stdsimd is a range") > >() },
    { "p3481r0", 5u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("Summarizing stdexecutionbulk issues") >, Rev< 1u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("stdexecutionbulk issues") >, Rev< 2u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Ruslan Arutyunyan") >(), wxS("stdexecutionbulk issues") >, Rev< 3u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Mark Hoemmen"), Hash("Ruslan Arutyunyan") >(), wxS("stdexecutionbulk issues") >, Rev< 4u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Mark Hoemmen"), Hash("Ruslan Arutyunyan") >(), wxS("stdexecutionbulk issues") >, Rev< 5u, ArrHash< Hash("Lewis Baker"), Hash("Lucian Radu Teodorescu"), Hash("Mark Hoemmen"), Hash("Ruslan Arutyunyan") >(), wxS("stdexecutionbulk issues") > >() },
    { "p3482r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Thomas W Rodgers") >(), wxS("Proposed API for creating TAPS based networking connections") >, Rev< 1u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Thomas W Rodgers") >(), wxS("Design for C networking based on IETF TAPS") > >() },
    { "p3483r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C PreWroclaw technical clarifications") >, Rev< 1u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contracts for C PreWroclaw technical clarifications") > >() },
    { "p3484r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Postconditions odrusing a parameter modified in an overriding function") >, Rev< 1u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Postconditions odrusing a parameter modified in an overriding function") >, Rev< 2u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Postconditions odrusing a parameter modified in an overriding function") > >() },
    { "p3485r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Grouping using declarations with braces") > >() },
    { "p3487r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Postconditions odrusing a parameter that may be passed in registers") > >() },
    { "p3488r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz") >(), wxS("FloatingPoint Excess Precision") >, Rev< 1u, ArrHash< Hash("Matthias Kretz") >(), wxS("FloatingPoint Excess Precision") > >() },
    { "p3489r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Postconditions odrusing a parameter of dependent type") > >() },
    { "p3490r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("Justification for ranges as the output of parallel range algorithms") > >() },
    { "p3491r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov") >(), wxS("definestaticstringobjectarray") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("definestaticstringobjectarray") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("definestaticstringobjectarray") >, Rev< 3u, ArrHash< Hash("Barry Revzin"), Hash("Daveed Vandevoorde"), Hash("Peter Dimov"), Hash("Wyatt Childers") >(), wxS("definestaticstringobjectarray") > >() },
    { "p3492r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("Sized deallocation for placement new") >, Rev< 1u, ArrHash< Hash("Lauri Vasama") >(), wxS("Sized deallocation for placement new") >, Rev< 2u, ArrHash< Hash("Lauri Vasama") >(), wxS("Sized deallocation for placement new") > >() },
    { "p3493r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Ruminations on reflection and access") > >() },
    { "p3495r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen"), Hash("Oliver J. Rosten") >(), wxS("Remarks on Basic Statistics PR") > >() },
    { "p3496r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("ImmediateEscalating Expressions") > >() },
    { "p3497r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Wilmans") >(), wxS("Guarded Objects") > >() },
    { "p3498r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis"), Hash("Thomas Wise"), Hash("Zachary Henkel") >(), wxS("Stop the Bleeding but First Do No Harm") > >() },
    { "p3499r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Lisa Lippincott"), Hash("Timur Doumler") >(), wxS("Exploring strict contract predicates") >, Rev< 1u, ArrHash< Hash("Joshua Berne"), Hash("Lisa Lippincott"), Hash("Timur Doumler") >(), wxS("Exploring strict contract predicates") > >() },
    { "p3500r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Are Contracts safe") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Joshua Berne"), Hash("Ryan McDougall"), Hash("Timur Doumler") >(), wxS("Are Contracts safe") > >() },
    { "p3501r0", 0u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("The addressing of cats") > >() },
    { "p3502r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Slides for DR  Contracts for C") > >() },
    { "p3503r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely"), Hash("Nicolas Manual Morales") >(), wxS("Make typeerased allocator use in promise and packagedtask consistent") >, Rev< 1u, ArrHash< Hash("Jonathan Wakely"), Hash("Nicolas Manual Morales") >(), wxS("Make typeerased allocator use in promise and packagedtask consistent") >, Rev< 2u, ArrHash< Hash("Jonathan Wakely"), Hash("Nicolas Manual Morales") >(), wxS("Make typeerased allocator use in promise and packagedtask consistent") >, Rev< 3u, ArrHash< Hash("Jonathan Wakely"), Hash("Nicolas Manual Morales") >(), wxS("Make typeerased allocator use in promise and packagedtask consistent") > >() },
    { "p3504r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Wroclaw Nov ") > >() },
    { "p3505r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Junekey Jeon"), Hash("Victor Zverovich") >(), wxS("Fix the default floatingpoint representation in stdformat") > >() },
    { "p3506r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("P Is Still not Ready for C") > >() },
    { "p3508r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Michael Schellenberger Costa") >(), wxS("Wording for constexpr for specialized memory algorithms") > >() },
    { "p3510r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Myers") >(), wxS("Leftover properties of this in constructor preconditions") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Myers") >(), wxS("Leftover properties of this in constructor preconditions") >, Rev< 2u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Nathan Myers") >(), wxS("Leftover properties of this in constructor preconditions") > >() },
    { "p3514r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("RFC  The Security Flag for C") > >() },
    { "p3516r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Louis Dionne") >(), wxS("Uninitialized algorithms for relocation") >, Rev< 1u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Louis Dionne") >(), wxS("Uninitialized algorithms for relocation") >, Rev< 2u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Louis Dionne") >(), wxS("Uninitialized algorithms for relocation") > >() },
    { "p3517r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Slides presented to LEWG on trivial relocation in Wroclaw") > >() },
    { "p3518r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Slides for Standardized Constexpr Type Ordering") > >() },
    { "p3519r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lewis Baker") >(), wxS("Slides for P presentation to LEWG") > >() },
    { "p3520r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski"), Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Wroclaw Technical Fixes to Contracts") > >() },
    { "p3521r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Park"), Hash("Zach Laine") >(), wxS("Pattern Matching Customization Point for Open Sum Types") > >() },
    { "p3524r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the November  meeting") > >() },
    { "p3525r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Explicit Implicit Template Regions") > >() },
    { "p3526r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric Fiselier"), Hash("Peter Bindels") >(), wxS("Container truncation") > >() },
    { "p3527r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Michael Park"), Hash("Zach Laine") >(), wxS("Pattern Matching variantlike and stdexpected") >, Rev< 1u, ArrHash< Hash("Michael Park"), Hash("Zach Laine") >(), wxS("Pattern Matching variantlike and stdexpected") > >() },
    { "p3530r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Boleyn Su"), Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Intrinsic for reading uninitialized memory") > >() },
    { "p3533r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr virtual inheritance") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr virtual inheritance") >, Rev< 2u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr virtual inheritance") > >() },
    { "p3534r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Avoid UB When Compiling Code That Violates Library Specification") > >() },
    { "p3537r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Presentation on Concurrent Queue API LEWG Telecon Dec") >, Rev< 1u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Presentation on Concurrent Queue API") > >() },
    { "p3539r0", 1u, RevList< Rev< 1u, ArrHash< Hash("Pawe\\u0142 Benetkiewicz") >(), wxS("Consistent Function Label Naming for Sections") > >() },
    { "p3540r0", 2u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed Parameter offset") >, Rev< 1u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed Parameter offset") >, Rev< 2u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed Parameter offset") > >() },
    { "p3541r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Violation handlers vs noexcept") >, Rev< 1u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Violation handlers vs noexcept") > >() },
    { "p3542r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Abolish the term converting constructor") > >() },
    { "p3543r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("John Lakos"), Hash("Joshua Berne"), Hash("Mungo Gill"), Hash("Timur Doumler") >(), wxS("Response to Core Safety Profiles P") > >() },
    { "p3544r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("rangesto view") > >() },
    { "p3546r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Mejstrik") >(), wxS("Explicit return type deduction for stdnumericlimits and numbers") > >() },
    { "p3547r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dan Katz"), Hash("Ville Voutilainen") >(), wxS("Modeling Access Control With Reflection") >, Rev< 1u, ArrHash< Hash("Dan Katz"), Hash("Ville Voutilainen") >(), wxS("Modeling Access Control With Reflection") > >() },
    { "p3548r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Niall Douglas") >(), wxS("P stdfilesystempathview forward progress options") > >() },
    { "p3549r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Bruno Cardoso Lopes"), Hash("Michael Park"), Hash("Zach Laine") >(), wxS("Diverging expressions") > >() },
    { "p3550r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Imports cannot ") > >() },
    { "p3552r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Maikel Nadolski") >(), wxS("Add a Coroutine Lazy Type") >, Rev< 1u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Maikel Nadolski") >(), wxS("Add a Coroutine Task Type") >, Rev< 2u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Maikel Nadolski") >(), wxS("Add a Coroutine Task Type") >, Rev< 3u, ArrHash< Hash("Dietmar K\\u00FChl"), Hash("Maikel Nadolski") >(), wxS("Add a Coroutine Task Type") > >() },
    { "p3554r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Peter Dimov") >(), wxS("Nontransient allocation with vector and basicstring") > >() },
    { "p3555r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("An infinite range concept") > >() },
    { "p3556r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("Input files are source files") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Lori Hughes") >(), wxS("Input files are source files") > >() },
    { "p3557r0", 3u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("HighQuality Sender Diagnostics with Constexpr Exceptions") >, Rev< 1u, ArrHash< Hash("Eric A Niebler") >(), wxS("HighQuality Sender Diagnostics with Constexpr Exceptions") >, Rev< 2u, ArrHash< Hash("Eric A Niebler") >(), wxS("HighQuality Sender Diagnostics with Constexpr Exceptions") >, Rev< 3u, ArrHash< Hash("Eric A Niebler") >(), wxS("HighQuality Sender Diagnostics with Constexpr Exceptions") > >() },
    { "p3558r0", 1u, RevList< Rev< 0u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Core Language Contracts By Default") >, Rev< 1u, ArrHash< Hash("John Lakos"), Hash("Joshua Berne") >(), wxS("Core Language Contracts By Default") > >() },
    { "p3559r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Trivial relocation One trait or two") > >() },
    { "p3560r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Peter Dimov") >(), wxS("Error Handling in Reflection") >, Rev< 1u, ArrHash< Hash("Barry Revzin"), Hash("Peter Dimov") >(), wxS("Error Handling in Reflection") >, Rev< 2u, ArrHash< Hash("Barry Revzin"), Hash("Peter Dimov") >(), wxS("Error Handling in Reflection") > >() },
    { "p3561r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Esa Pulkkinen") >(), wxS("Index based coproduct operations on variant and library wording") >, Rev< 1u, ArrHash< Hash("Esa Pulkkinen") >(), wxS("Index based coproduct operations on variant and library wording") >, Rev< 2u, ArrHash< Hash("Esa Pulkkinen") >(), wxS("Index based coproduct operations on variant and library wording") > >() },
    { "p3564r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bryce Adelstein Lelbach"), Hash("Mark Hoemmen"), Hash("Michael Garland") >(), wxS("Make the concurrent forward progress guarantee usable in bulk") > >() },
    { "p3565r0", 1u, RevList< Rev< 0u, ArrHash< Hash("S. Davis Herring") >(), wxS("Virtual floatingpoint values") >, Rev< 1u, ArrHash< Hash("S. Davis Herring") >(), wxS("Virtual floatingpoint values") > >() },
    { "p3566r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Marco Foco") >(), wxS("You shall not pass char  Safety concerns working with unbounded nullterminated strings") >, Rev< 1u, ArrHash< Hash("Marco Foco") >(), wxS("You shall not pass char  Safety concerns working with unbounded nullterminated strings") >, Rev< 2u, ArrHash< Hash("Alexey Shevlyakov"), Hash("Giuseppe D\\u2019Angelo"), Hash("Joshua Kriegshauser"), Hash("Marco Foco") >(), wxS("You shall not pass char  Safety concerns working with unbounded nullterminated strings") > >() },
    { "p3567r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer"), Hash("Hui Xie"), Hash("Louis Dionne") >(), wxS("flatmeow Fixes") > >() },
    { "p3568r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke"), Hash("Sarah Qui\\u00F1ones") >(), wxS("break label and continue label") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("break label and continue label") > >() },
    { "p3569r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aaron Ballman"), Hash("Corentin Jabot"), Hash("Erich Keane"), Hash("Shafik Yaghmour"), Hash("Vlad Serebrennikov") >(), wxS("Split defineaggregate from Reflection") > >() },
    { "p3570r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Fabio Fracassi") >(), wxS("optional variants in senderreceiver") >, Rev< 1u, ArrHash< Hash("Fabio Fracassi") >(), wxS("optional variants in senderreceiver") >, Rev< 2u, ArrHash< Hash("Fabio Fracassi") >(), wxS("optional variants in senderreceiver") > >() },
    { "p3572r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Pattern matching") > >() },
    { "p3573r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Gabriel Dos Reis"), Hash("J.C. van Winkel"), Hash("John H. Spicer"), Hash("Jose Daniel Garcia Sanchez"), Hash("Michael Florian Hava"), Hash("Ran Regev"), Hash("Ville Voutilainen") >(), wxS("Contract concerns") > >() },
    { "p3574r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Constexpr Callables") > >() },
    { "p3575r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes ") > >() },
    { "p3576r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3577r0", 0u, RevList< Rev< 0u, ArrHash< Hash("John Lakos") >(), wxS("Require a nonthrowing default contractviolation handler") > >() },
    { "p3578r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ryan McDougall") >(), wxS("Language Safety and Grandma Safety") > >() },
    { "p3579r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Fix matching of nontype template parameters when matching template template parameters") >, Rev< 1u, ArrHash< Hash("Matheus Izvekov") >(), wxS("Fix matching of nontype template parameters when matching template template parameters") > >() },
    { "p3580r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alan Talbot") >(), wxS("The Naming of Things") > >() },
    { "p3581r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("No inplacevector shouldnt have an Allocator") > >() },
    { "p3582r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Observed a contract violation Skip subsequent assertions") > >() },
    { "p3583r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("Contracts Types  Functions") > >() },
    { "p3584r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mingxin Wang") >(), wxS("Enrich Facade Creation Facilities for the PointerSemanticsBased Polymorphism Library  Proxy") > >() },
    { "p3585r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("allocatortraitsisinternallyrelocatable") > >() },
    { "p3586r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("The Plethora of Problems With Profiles") > >() },
    { "p3587r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("Reconsider reflection access for C") > >() },
    { "p3588r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Allow static data members in local and unnamed classes") >, Rev< 1u, ArrHash< Hash("Brian Bi") >(), wxS("Allow static data members in local and unnamed classes") > >() },
    { "p3589r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Profiles The Framework") >, Rev< 1u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Profiles The Framework") >, Rev< 2u, ArrHash< Hash("Gabriel Dos Reis") >(), wxS("C Profiles The Framework") > >() },
    { "p3590r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Constexpr Coroutines Burdens") > >() },
    { "p3591r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Contextualizing Contracts Concerns") > >() },
    { "p3592r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Resolving Concerns with constification") > >() },
    { "p3599r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Berne"), Hash("Timur Doumler") >(), wxS("Initial Implicit Contract Assertions") > >() },
    { "p3601r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi") >(), wxS("Slides for PR") > >() },
    { "p3603r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Constevalonly Values and Consteval Variables") > >() },
    { "p3605r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nikita Sakharin") >(), wxS("isqrt A function to calculate integer square root of the nonnegative integer") > >() },
    { "p3606r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Younan Zhang") >(), wxS("On Overload Resolution Exact Matches and Clever Implementations") > >() },
    { "p3608r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Contracts and profiles what can we reasonably ship in C") > >() },
    { "p3611r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Dealing with pointer errors Separating static and dynamic checking") > >() },
    { "p3613r0", 0u, RevList< Rev< 0u, ArrHash< Hash("R. Tim Song") >(), wxS("On the beating of horses and other matters") > >() },
    { "p3614r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Do not remove nor postpone accesscontextunchecked") > >() },
    { "p3615r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Hagenberg Feb ") > >() },
    { "p3616r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ville Voutilainen") >(), wxS("Remove contracts on virtual functions for now") > >() },
    { "p3617r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("stdmetareflectconstantarraystring") > >() },
    { "p3618r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Allow attaching main to the global module") > >() },
    { "p3619r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Sergey Anisimov"), Hash("Tymofii Kutlov"), Hash("Vlad Serebrennikov") >(), wxS("Counterexamples for PR") >, Rev< 1u, ArrHash< Hash("Sergey Anisimov"), Hash("Tymofii Kutlov"), Hash("Vlad Serebrennikov") >(), wxS("Counterexamples for PR") > >() },
    { "p3620r0", 0u, RevList< Rev< 0u, ArrHash< Hash("David Chisnall"), Hash("Matthew Taylor") >(), wxS("Concerns with the proposed addition of fibers to C ") > >() },
    { "p3623r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Arthur O'Dwyer") >(), wxS("Add noexcept to iteratorrange LWG ") > >() },
    { "p3625r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("either neither") > >() },
    { "p3626r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Make predicate exceptions propagate by default") > >() },
    { "p3627r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ulfar Erlingsson") >(), wxS("Easytoadopt security profiles for preventing RCE remote code execution in existing C code") > >() },
    { "p3628r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("break label and continue label tl dr") > >() },
    { "p3630r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR") > >() },
    { "p3631r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Louis Dionne") >(), wxS("Cleaning up the trivial relocation APIs in C") > >() },
    { "p3632r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("PR Make the concurrent forward progress guarantee usable in bulk") >, Rev< 1u, ArrHash< Hash("Mark Hoemmen") >(), wxS("PR Make the concurrent forward progress guarantee usable in bulk") > >() },
    { "p3633r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Murat Can Cagri") >(), wxS("A Byte is a Byte") > >() },
    { "p3635r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("We shouldnt rush to require either CHARBIT or uintNNt") > >() },
    { "p3636r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Nevin Liber") >(), wxS("LEWG Hagenberg presentation for P No inplacevector shouldnt have an Allocator") > >() },
    { "p3637r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava"), Hash("Nevin Liber"), Hash("Victor Zverovich") >(), wxS("Inherit stdmetaexception from stdexception") > >() },
    { "p3638r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the February  meeting") > >() },
    { "p3639r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("The BitInt Debate") > >() },
    { "p3640r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonas Persson") >(), wxS("Make contracts reliable by default") > >() },
    { "p3641r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Rename stdobservable to stdobservablecheckpoint and add a featuretest macro") > >() },
    { "p3642r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Carryless product stdclmul") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("Carryless product stdclmul") >, Rev< 2u, ArrHash< Hash("Jan Schultke") >(), wxS("Carryless product stdclmul") > >() },
    { "p3643r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("stdtosigned and stdtounsigned") > >() },
    { "p3647r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR") > >() },
    { "p3649r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("A principled approach to safety profiles") > >() },
    { "p3650r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("st Century C") > >() },
    { "p3651r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("Note to the C standards committee members") > >() },
    { "p3652r0", 1u, RevList< Rev< 0u, ArrHash< Hash("L\\u00E9n\\u00E1rd Szolnoki") >(), wxS("Constexpr floatingpoint charconv functions") >, Rev< 1u, ArrHash< Hash("L\\u00E9n\\u00E1rd Szolnoki") >(), wxS("Constexpr floatingpoint charconv functions") > >() },
    { "p3654r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo"), Hash("Louis Dionne") >(), wxS("Slides for P") > >() },
    { "p3655r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Jeremy Rifkin"), Hash("Peter Bindels") >(), wxS("zstringview") >, Rev< 1u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Jeremy Rifkin"), Hash("Peter Bindels") >(), wxS("zstringview") >, Rev< 2u, ArrHash< Hash("Alexey Shevlyakov"), Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Jeremy Rifkin"), Hash("Marco Foco"), Hash("Peter Bindels") >(), wxS("zstringview") > >() },
    { "p3656r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Herb Sutter") >(), wxS("Initial draft proposal for core language UB white paper Process and major work items") >, Rev< 1u, ArrHash< Hash("Ga\\u0161per A\\u017Eman"), Hash("Herb Sutter") >(), wxS("Initial draft proposal for core language UB white paper Process and major work items") > >() },
    { "p3657r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith") >(), wxS("A Grammar for Whitespace Characters") > >() },
    { "p3658r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Robin Leroy") >(), wxS("Adjust identifier following new Unicode recommendations") >, Rev< 1u, ArrHash< Hash("Robin Leroy") >(), wxS("Adjust identifier following new Unicode recommendations") > >() },
    { "p3660r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Rifkin") >(), wxS("Improve referencewrapper Ergonomics") > >() },
    { "p3661r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andrzej Krzemie\\u0144ski") >(), wxS("Attributes annotations labels") > >() },
    { "p3662r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Rifkin") >(), wxS("Improve Increment and Decrement Operator Syntax") > >() },
    { "p3663r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Futureproof submdspanmapping") >, Rev< 1u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Futureproof submdspanmapping") >, Rev< 2u, ArrHash< Hash("Mark Hoemmen") >(), wxS("Futureproof submdspanmapping") > >() },
    { "p3664r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zach Laine") >(), wxS("Make variantsize SFINAE friendly") > >() },
    { "p3665r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jeremy Rifkin"), Hash("Levi de Koning") >(), wxS("Vertical Text Processing") > >() },
    { "p3667r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jose Daniel Garcia Sanchez") >(), wxS("Extending rangefor loop with an expression statement") > >() },
    { "p3668r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alex Waffl3x"), Hash("Matthew Taylor") >(), wxS("Defaulting Postfix Increment and Decrement Operations") >, Rev< 1u, ArrHash< Hash("Alex Waffl3x"), Hash("Matthew Taylor") >(), wxS("Defaulting Postfix Increment and Decrement Operations") >, Rev< 2u, ArrHash< Hash("Alex Waffl3x"), Hash("Matthew Taylor") >(), wxS("Defaulting Postfix Increment and Decrement Operations") > >() },
    { "p3669r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("NonBlocking Support for stdexecution") >, Rev< 1u, ArrHash< Hash("Detlef Vollmann") >(), wxS("NonBlocking Support for stdexecution") >, Rev< 2u, ArrHash< Hash("Detlef Vollmann") >(), wxS("NonBlocking Support for stdexecution") > >() },
    { "p3670r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Pack Indexing for Template Names") >, Rev< 1u, ArrHash< Hash("Corentin Jabot") >(), wxS("Pack Indexing for Template Names") > >() },
    { "p3671r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Clarifying the interaction of the literal and execution encodings") > >() },
    { "p3672r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("On Windows Systems APIs Text Encodings and Pragmatism") > >() },
    { "p3676r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Khalil Estell"), Hash("Stephen Berry") >(), wxS("Enhanced inline Keyword with Configurable Inlining Levels") > >() },
    { "p3677r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("Preserving LCCTYPE at program start for UTF locales") > >() },
    { "p3678r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Aurelien Cassagnes") >(), wxS("Arbitrary attributes in defineaggregate") > >() },
    { "p3679r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("SFINAEable constexpr exceptions") > >() },
    { "p3681r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot") >(), wxS("chartraits Stop the bleeding") > >() },
    { "p3682r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Remove stdexecutionsplit") > >() },
    { "p3685r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Robert Leahy") >(), wxS("Rename asyncscopetoken") > >() },
    { "p3686r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Chuanqi Xu") >(), wxS("Allow named modules to export macros") > >() },
    { "p3687r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Ville Voutilainen"), Hash("Wyatt Childers") >(), wxS("Final Adjustments to C Reflection") >, Rev< 1u, ArrHash< Hash("Dan Katz"), Hash("Daveed Vandevoorde"), Hash("Ville Voutilainen"), Hash("Wyatt Childers") >(), wxS("Final Adjustments to C Reflection") > >() },
    { "p3688r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Corentin Jabot"), Hash("Jan Schultke") >(), wxS("ASCII character utilities") >, Rev< 1u, ArrHash< Hash("Corentin Jabot"), Hash("Jan Schultke") >(), wxS("ASCII character utilities") > >() },
    { "p3689r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Mejstrik") >(), wxS("Convenience functions for Random number generation") > >() },
    { "p3690r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Matthias Kretz"), Hash("Olaf Krzikalla") >(), wxS("Consistency fix Make simd reductions SIMDgeneric") >, Rev< 1u, ArrHash< Hash("Matthias Kretz"), Hash("Olaf Krzikalla") >(), wxS("Consistency fix Make simd reductions SIMDgeneric") > >() },
    { "p3691r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Abhilash Majumder"), Hash("Bryce Adelstein Lelbach"), Hash("Daniel Towner"), Hash("Ilya Burylov"), Hash("Mark Hoemmen"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Reconsider naming of the namespace for stdsimd") >, Rev< 1u, ArrHash< Hash("Abhilash Majumder"), Hash("Bryce Adelstein Lelbach"), Hash("Daniel Towner"), Hash("Ilya Burylov"), Hash("Mark Hoemmen"), Hash("Matthias Kretz"), Hash("Ruslan Arutyunyan") >(), wxS("Reconsider naming of the namespace for stdsimd") > >() },
    { "p3692r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alan Stern"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("How to Avoid OOTA Without Really Trying") >, Rev< 1u, ArrHash< Hash("Alan Stern"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Paul E. McKenney") >(), wxS("How to Avoid OOTA Without Really Trying") > >() },
    { "p3693r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Low LatencyGamesEmbeddedFinancial Trading virtual Meeting Minutes ") > >() },
    { "p3694r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Wong") >(), wxS("SG Machine Learning virtual Meeting Minutes to ") > >() },
    { "p3695r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Deprecate implicit conversions between Unicode character types") > >() },
    { "p3696r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Spencer") >(), wxS("Discovering Header Units via Module Maps") > >() },
    { "p3697r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alisdair Meredith"), Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Minor additions to C standard library hardening") >, Rev< 1u, ArrHash< Hash("Alisdair Meredith"), Hash("Konstantin Varlamov"), Hash("Louis Dionne") >(), wxS("Minor additions to C standard library hardening") > >() },
    { "p3698r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Charles Hussong") >(), wxS("Crosscapacity comparisons for inplacevector") > >() },
    { "p3699r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Rename conqueueerrc") >, Rev< 1u, ArrHash< Hash("Detlef Vollmann") >(), wxS("Rename conqueueerrc") > >() },
    { "p3700r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("Making Safe C happen") > >() },
    { "p3701r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Concepts for integer types not integral types") > >() },
    { "p3702r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Stricter requirements for document submissions SD") > >() },
    { "p3703r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alec Cepeda"), Hash("Alexander Buzanis"), Hash("Charlie Sabino"), Hash("Cory Turnbaugh"), Hash("Guanduo Mu"), Hash("Hongli Zhao"), Hash("Joneskim Kimo"), Hash("Matthias Zajdela"), Hash("Michael Spertus"), Hash("Mitch Verhelle"), Hash("Pierr-Yves Sojic"), Hash("Roshan Surabhi"), Hash("Steven Arellana"), Hash("Wei Cai"), Hash("Yaodan Zhang") >(), wxS("Constness and Locking") > >() },
    { "p3704r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup") >(), wxS("What are profiles") > >() },
    { "p3705r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Eddie Nolan") >(), wxS("A Sentinel for NullTerminated Strings") >, Rev< 1u, ArrHash< Hash("Eddie Nolan") >(), wxS("A Sentinel for NullTerminated Strings") >, Rev< 2u, ArrHash< Hash("Eddie Nolan") >(), wxS("A Sentinel for NullTerminated Strings") > >() },
    { "p3706r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ruslan Arutyunyan"), Hash("Ville Voutilainen") >(), wxS("Rename join and nest in asyncscope proposal") > >() },
    { "p3707r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Gregoire Angerand"), Hash("Patrice Roy") >(), wxS("A stdisalwaysexhaustive trait") > >() },
    { "p3709r0", 2u, RevList< Rev< 0u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("Reconsider parallel rangesrotatecopy and rangesreversecopy") >, Rev< 1u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("Reconsider parallel rangesrotatecopy and rangesreversecopy") >, Rev< 2u, ArrHash< Hash("Alexey Kukanov"), Hash("Ruslan Arutyunyan") >(), wxS("Reconsider parallel rangesrotatecopy and rangesreversecopy") > >() },
    { "p3710r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alexey Shevlyakov"), Hash("Joshua Kriegshauser"), Hash("Marco Foco") >(), wxS("zstringview a stringview with guaranteed null termination") > >() },
    { "p3711r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Alexey Shevlyakov"), Hash("Joshua Kriegshauser"), Hash("Marco Foco") >(), wxS("Safer StringViewLike Functions for Replacing char strings") >, Rev< 1u, ArrHash< Hash("Alexey Shevlyakov"), Hash("Joshua Kriegshauser"), Hash("Marco Foco") >(), wxS("Safer StringViewLike Functions for Replacing char strings") > >() },
    { "p3712r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Weis"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3713r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Weis"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Poll Outcomes") > >() },
    { "p3714r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Cranmer") >(), wxS("Virtual values have Virtual Value") > >() },
    { "p3715r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Joshua Cranmer") >(), wxS("Tightening floatingpoint semantics for C") > >() },
    { "p3716r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Peter Bindels") >(), wxS("Subsetting") > >() },
    { "p3717r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Update Annex E onto Unicode ") > >() },
    { "p3718r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Eric A Niebler") >(), wxS("Fixing Lazy Sender Algorithm Customization Again") > >() },
    { "p3719r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yuxuan Chen") >(), wxS("stdisvectorboolreference") > >() },
    { "p3721r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR") > >() },
    { "p3722r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR") > >() },
    { "p3724r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Integer division") > >() },
    { "p3725r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Filter View Extensions for Input Ranges") >, Rev< 1u, ArrHash< Hash("Nicolai Josuttis") >(), wxS("Filter View Extensions for Input Ranges") > >() },
    { "p3726r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Adjustments to Union Lifetime Rules") > >() },
    { "p3727r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Steve Downey") >(), wxS("Update Annex E based on Unicode  UAX ") > >() },
    { "p3729r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("Aligning span and stringview") > >() },
    { "p3730r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR") > >() },
    { "p3731r0", 0u, RevList< Rev< 0u, ArrHash< Hash("JeanHeyd Meneide") >(), wxS("embed Preprocessor Parameter Order") > >() },
    { "p3732r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Abhilash Majumder"), Hash("Alexey Kukanov"), Hash("Bryce Adelstein Lelbach"), Hash("Mark Hoemmen"), Hash("Ruslan Arutyunyan") >(), wxS("Numeric Range Algorithms") > >() },
    { "p3733r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("More named universal character escapes") > >() },
    { "p3734r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Not all predicates must be regular") > >() },
    { "p3735r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("partialsortn nthelementn") > >() },
    { "p3736r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides against PR  No implication for C") > >() },
    { "p3737r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("stdarray is a wrapper for an array") > >() },
    { "p3738r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Yihan Wang") >(), wxS("Make stdmakefromtuple SFINAE friendly") > >() },
    { "p3739r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Standard Library Hardening  using stdoptional") >, Rev< 1u, ArrHash< Hash("Jarrad J. Waterloo") >(), wxS("Standard Library Hardening  using stdoptional") > >() },
    { "p3740r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Last chance to fix stdnontype") >, Rev< 1u, ArrHash< Hash("Bronek Kozicki"), Hash("Jan Schultke") >(), wxS("Last chance to fix stdnontype") > >() },
    { "p3741r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("viewssetoperations") > >() },
    { "p3742r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan Wakely") >(), wxS("C Standard Library Ready Issues to be moved in Sofia Jun ") > >() },
    { "p3745r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Pablo Halpern") >(), wxS("Rebuttal to PR") > >() },
    { "p3746r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava"), Hash("Nevin Liber"), Hash("Victor Zverovich") >(), wxS("LEWG Slides for PR Inherit stdmetaexception from stdexception") > >() },
    { "p3747r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Thomas Mejstrik") >(), wxS("Call side return type deduction") > >() },
    { "p3748r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("Inspecting exceptionptr works should be constexpr") > >() },
    { "p3749r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides in response to PR  Concerns regarding stdzstringview") > >() },
    { "p3752r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jens Maurer") >(), wxS("Core Language Working Group ready Issues for the June  meeting") > >() },
    { "p3753r0", 1u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR  Last chance to fix stdnontype") >, Rev< 1u, ArrHash< Hash("Jan Schultke") >(), wxS("Slides for PR  Last chance to fix stdnontype") > >() },
    { "p3754r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Timur Doumler") >(), wxS("Slides for PR presentation to EWG") > >() },
    { "p3757r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("Remove valuetype invocability requirement from indirect unary callable concepts") > >() },
    { "p3760r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Oliver J. Rosten") >(), wxS("Presentation constexpr Parallel Algorithms") > >() },
    { "p3763r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hewill Kang") >(), wxS("Remove redundant reservehint members from view classes") > >() },
    { "p3764r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("A utility function for propagating the most significant bit") > >() },
    { "p3765r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1"), Hash("Jan Schultke") >(), wxS("Deprecate implicit conversion from bool to character types") > >() },
    { "p3769r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Lauri Vasama") >(), wxS("Clarification of placement new deallocation") > >() },
    { "p3771r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr mutex locks and condition variable") > >() },
    { "p3772r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jan Schultke") >(), wxS("stdsimd overloads for bit permutations") > >() },
    { "p3774r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki"), Hash("Jan Schultke"), Hash("Tomasz Kami\\u0144ski") >(), wxS("Rename stdnontype and make it broadly useful") > >() },
    { "p3778r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Ga\\u0161per A\\u017Eman") >(), wxS("Fixing typeorder template definition") > >() },
    { "p3780r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Detecting bitwise trivially relocatable types") > >() },
    { "p3781r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Xavier Bonaventura") >(), wxS("istype should imply istype") > >() },
    { "p3784r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Michael Florian Hava") >(), wxS("rangeif") > >() },
    { "p3785r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Waffl3x"), Hash("Matthew Taylor") >(), wxS("Library Wording Changes for Defaulted Postfix Increment and Decrement Operators") > >() },
    { "p3787r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Giuseppe D\\u2019Angelo") >(), wxS("Adjoints to Enabling listinitialization for algorithms uninitializedfill") > >() },
    { "p3788r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Mateusz Pusz") >(), wxS("Fixing stdcomplex binary operators") > >() },
    { "p3790r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Anthony Williams"), Hash("Daniel Kr\\u00FCgler"), Hash("David Goldblatt"), Hash("Hans J. Boehm"), Hash("Hubert S.K. Tong"), Hash("JF Bastien"), Hash("Jens Maurer"), Hash("Kostya Serebryany"), Hash("Maged M. Michael"), Hash("Michael Wong"), Hash("Niall Douglas"), Hash("Paul E. McKenney"), Hash("Peter Sewell"), Hash("Thomas Richard William Scogland"), Hash("Thomas W Rodgers"), Hash("Will Deacon") >(), wxS("Pointer lifetimeend zap proposed solutions Bagofbits pointer class") > >() },
    { "p3791r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Hana Dus\\u00EDkov\\u00E1") >(), wxS("constexpr deterministic random") > >() },
    { "p3792r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bronek Kozicki") >(), wxS("Why constantwrapper is not a usable replacement for nontype") > >() },
    { "p3793r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Brian Bi"), Hash("Jan Schultke") >(), wxS("Better shifting") > >() },
    { "p3794r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Zhihao Yuan") >(), wxS("An idea or two on renaming the nontype tag") > >() },
    { "p3795r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Barry Revzin") >(), wxS("Miscellaneous Reflection Cleanup") > >() },
    { "p3796r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Dietmar K\\u00FChl") >(), wxS("Coroutine Task Issues") > >() },
    { "p3798r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Alex Kremer"), Hash("Ayaz Salikhov") >(), wxS("The unexpected in stdexpected") > >() },
    { "p3799r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Andreas Weis"), Hash("Billy Baker"), Hash("Corentin Jabot"), Hash("Fabio Fracassi"), Hash("Inbal Levi"), Hash("Nevin Liber") >(), wxS(" Library Evolution Polls") > >() },
    { "p3801r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Jonathan M\\u00FCller") >(), wxS("Concerns about the design of stdexecutiontask") > >() },
    { "p3802r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Daveed Vandevoorde") >(), wxS("Poor Functions") > >() },
    { "p4000r0", 0u, RevList< Rev< 0u, ArrHash< Hash("Bjarne Stroustrup"), Hash("Daveed Vandevoorde"), Hash("Howard E. Hinnant"), Hash("Michael Wong"), Hash("Roger Orr") >(), wxS("To TS or not to TS that is the question") > >() },
};
